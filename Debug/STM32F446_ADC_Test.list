
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013210  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005f90  080133e0  080133e0  000233e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019370  08019370  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  08019370  08019370  00029370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019378  08019378  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019378  08019378  00029378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801937c  0801937c  0002937c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08019380  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009dec  20000250  080195d0  00030250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a03c  080195d0  0003a03c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af79  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000411a  00000000  00000000  0004b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0004f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001329  00000000  00000000  00050c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b33  00000000  00000000  00051f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002170a  00000000  00000000  00079a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6198  00000000  00000000  0009b176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fc4  00000000  00000000  00181310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001892d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080133c8 	.word	0x080133c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	080133c8 	.word	0x080133c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ce6:	f000 b9bb 	b.w	8001060 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f84d 	bl	8000d98 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f840 	bl	8000d98 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f82f 	bl	8000d98 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f821 	bl	8000d98 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <calc_process_dma_buffer+0x24>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <calc_process_dma_buffer+0x24>
		return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001086:	e0d0      	b.n	800122a <calc_process_dma_buffer+0x1c6>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001090:	7c7b      	ldrb	r3, [r7, #17]
 8001092:	3301      	adds	r3, #1
 8001094:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800109c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 80010a0:	82bb      	strh	r3, [r7, #20]
 80010a2:	e001      	b.n	80010a8 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 80010a4:	2300      	movs	r3, #0
 80010a6:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 80010a8:	8abb      	ldrh	r3, [r7, #20]
 80010aa:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 80010ae:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 80010b0:	7c7a      	ldrb	r2, [r7, #17]
 80010b2:	4960      	ldr	r1, [pc, #384]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010c2:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 80010c4:	7c7a      	ldrb	r2, [r7, #17]
 80010c6:	495b      	ldr	r1, [pc, #364]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3302      	adds	r3, #2
 80010d4:	2200      	movs	r2, #0
 80010d6:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 80010d8:	7c3a      	ldrb	r2, [r7, #16]
 80010da:	4956      	ldr	r1, [pc, #344]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010ea:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4951      	ldr	r1, [pc, #324]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3302      	adds	r3, #2
 80010fc:	2200      	movs	r2, #0
 80010fe:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 8001100:	7c7a      	ldrb	r2, [r7, #17]
 8001102:	494c      	ldr	r1, [pc, #304]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3304      	adds	r3, #4
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 8001116:	7c7a      	ldrb	r2, [r7, #17]
 8001118:	4946      	ldr	r1, [pc, #280]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3308      	adds	r3, #8
 8001126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800112a:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4941      	ldr	r1, [pc, #260]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	3304      	adds	r3, #4
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001140:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001142:	7c3a      	ldrb	r2, [r7, #16]
 8001144:	493b      	ldr	r1, [pc, #236]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3308      	adds	r3, #8
 8001152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001156:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001158:	7c7a      	ldrb	r2, [r7, #17]
 800115a:	4936      	ldr	r1, [pc, #216]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	330c      	adds	r3, #12
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800116c:	7c3a      	ldrb	r2, [r7, #16]
 800116e:	4931      	ldr	r1, [pc, #196]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	330c      	adds	r3, #12
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].value_is_zero = 0;
 8001180:	7c7a      	ldrb	r2, [r7, #17]
 8001182:	492c      	ldr	r1, [pc, #176]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	330d      	adds	r3, #13
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].value_is_zero = 0;
 8001194:	7c3a      	ldrb	r2, [r7, #16]
 8001196:	4927      	ldr	r1, [pc, #156]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	330d      	adds	r3, #13
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a8:	8abb      	ldrh	r3, [r7, #20]
 80011aa:	82fb      	strh	r3, [r7, #22]
 80011ac:	e030      	b.n	8001210 <calc_process_dma_buffer+0x1ac>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 80011ae:	8af9      	ldrh	r1, [r7, #22]
 80011b0:	7c7a      	ldrb	r2, [r7, #17]
 80011b2:	8a7b      	ldrh	r3, [r7, #18]
 80011b4:	4c20      	ldr	r4, [pc, #128]	; (8001238 <calc_process_dma_buffer+0x1d4>)
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 80011bc:	fb05 f000 	mul.w	r0, r5, r0
 80011c0:	4401      	add	r1, r0
 80011c2:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 80011c6:	491d      	ldr	r1, [pc, #116]	; (800123c <calc_process_dma_buffer+0x1d8>)
 80011c8:	f44f 7052 	mov.w	r0, #840	; 0x348
 80011cc:	fb00 f202 	mul.w	r2, r0, r2
 80011d0:	4413      	add	r3, r2
 80011d2:	4622      	mov	r2, r4
 80011d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 80011d8:	8afb      	ldrh	r3, [r7, #22]
 80011da:	1c59      	adds	r1, r3, #1
 80011dc:	7c3a      	ldrb	r2, [r7, #16]
 80011de:	8a7b      	ldrh	r3, [r7, #18]
 80011e0:	1c58      	adds	r0, r3, #1
 80011e2:	8278      	strh	r0, [r7, #18]
 80011e4:	461d      	mov	r5, r3
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <calc_process_dma_buffer+0x1d4>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80011ee:	fb04 f303 	mul.w	r3, r4, r3
 80011f2:	440b      	add	r3, r1
 80011f4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011f8:	4910      	ldr	r1, [pc, #64]	; (800123c <calc_process_dma_buffer+0x1d8>)
 80011fa:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	442b      	add	r3, r5
 8001204:	4602      	mov	r2, r0
 8001206:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800120a:	8afb      	ldrh	r3, [r7, #22]
 800120c:	3302      	adds	r3, #2
 800120e:	82fb      	strh	r3, [r7, #22]
 8001210:	8afa      	ldrh	r2, [r7, #22]
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	429a      	cmp	r2, r3
 8001216:	d9ca      	bls.n	80011ae <calc_process_dma_buffer+0x14a>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f93c 	bl	8001498 <calc_downsample>
	calc_downsample(raw_buf_second);
 8001220:	7c3b      	ldrb	r3, [r7, #16]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f938 	bl	8001498 <calc_downsample>
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bdb0      	pop	{r4, r5, r7, pc}
 8001232:	bf00      	nop
 8001234:	2000026c 	.word	0x2000026c
 8001238:	2000261c 	.word	0x2000261c
 800123c:	20005a9c 	.word	0x20005a9c

08001240 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b03      	cmp	r3, #3
 8001252:	f200 8117 	bhi.w	8001484 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0fda      	lsrs	r2, r3, #31
 8001262:	4413      	add	r3, r2
 8001264:	105b      	asrs	r3, r3, #1
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0fda      	lsrs	r2, r3, #31
 8001272:	4413      	add	r3, r2
 8001274:	105b      	asrs	r3, r3, #1
 8001276:	425b      	negs	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e0df      	b.n	8001446 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4981      	ldr	r1, [pc, #516]	; (8001490 <calc_zero_detector+0x250>)
 800128a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128e:	fb03 f202 	mul.w	r2, r3, r2
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4413      	add	r3, r2
 8001296:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800129a:	461a      	mov	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4293      	cmp	r3, r2
 80012a0:	f300 80ce 	bgt.w	8001440 <calc_zero_detector+0x200>
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	497a      	ldr	r1, [pc, #488]	; (8001490 <calc_zero_detector+0x250>)
 80012a8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80012ac:	fb03 f202 	mul.w	r2, r3, r2
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	4413      	add	r3, r2
 80012b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b8:	461a      	mov	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4293      	cmp	r3, r2
 80012be:	f2c0 80bf 	blt.w	8001440 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4972      	ldr	r1, [pc, #456]	; (8001490 <calc_zero_detector+0x250>)
 80012c6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4413      	add	r3, r2
 80012d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4293      	cmp	r3, r2
 80012dc:	da3d      	bge.n	800135a <calc_zero_detector+0x11a>
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	496a      	ldr	r1, [pc, #424]	; (8001490 <calc_zero_detector+0x250>)
 80012e6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ea:	fb00 f202 	mul.w	r2, r0, r2
 80012ee:	4413      	add	r3, r2
 80012f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012f4:	461a      	mov	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	db2e      	blt.n	800135a <calc_zero_detector+0x11a>
				detected++;
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	3301      	adds	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b01      	cmp	r3, #1
 8001306:	dd11      	ble.n	800132c <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3b02      	subs	r3, #2
 800130e:	4960      	ldr	r1, [pc, #384]	; (8001490 <calc_zero_detector+0x250>)
 8001310:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001314:	fb00 f202 	mul.w	r2, r0, r2
 8001318:	4413      	add	r3, r2
 800131a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4293      	cmp	r3, r2
 8001324:	dd02      	ble.n	800132c <calc_zero_detector+0xec>
						detected++;
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	3301      	adds	r3, #1
 800132a:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3302      	adds	r3, #2
 8001330:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001334:	d211      	bcs.n	800135a <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	3302      	adds	r3, #2
 800133c:	4954      	ldr	r1, [pc, #336]	; (8001490 <calc_zero_detector+0x250>)
 800133e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001342:	fb00 f202 	mul.w	r2, r0, r2
 8001346:	4413      	add	r3, r2
 8001348:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4293      	cmp	r3, r2
 8001352:	da02      	bge.n	800135a <calc_zero_detector+0x11a>
						detected++;
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	3301      	adds	r3, #1
 8001358:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d90f      	bls.n	8001380 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	494c      	ldr	r1, [pc, #304]	; (8001494 <calc_zero_detector+0x254>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001378:	7fbb      	ldrb	r3, [r7, #30]
 800137a:	3301      	adds	r3, #1
 800137c:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800137e:	e05f      	b.n	8001440 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4942      	ldr	r1, [pc, #264]	; (8001490 <calc_zero_detector+0x250>)
 8001388:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	4413      	add	r3, r2
 8001394:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4293      	cmp	r3, r2
 800139e:	dd4f      	ble.n	8001440 <calc_zero_detector+0x200>
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	493a      	ldr	r1, [pc, #232]	; (8001490 <calc_zero_detector+0x250>)
 80013a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013ac:	fb00 f202 	mul.w	r2, r0, r2
 80013b0:	4413      	add	r3, r2
 80013b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	dc40      	bgt.n	8001440 <calc_zero_detector+0x200>
				detected++;
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	3301      	adds	r3, #1
 80013c2:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	dd11      	ble.n	80013ee <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	3b02      	subs	r3, #2
 80013d0:	492f      	ldr	r1, [pc, #188]	; (8001490 <calc_zero_detector+0x250>)
 80013d2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013d6:	fb00 f202 	mul.w	r2, r0, r2
 80013da:	4413      	add	r3, r2
 80013dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	dc02      	bgt.n	80013ee <calc_zero_detector+0x1ae>
						detected++;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	3301      	adds	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3302      	adds	r3, #2
 80013f2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013f6:	d211      	bcs.n	800141c <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3302      	adds	r3, #2
 80013fe:	4924      	ldr	r1, [pc, #144]	; (8001490 <calc_zero_detector+0x250>)
 8001400:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001404:	fb00 f202 	mul.w	r2, r0, r2
 8001408:	4413      	add	r3, r2
 800140a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800140e:	461a      	mov	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4293      	cmp	r3, r2
 8001414:	dd02      	ble.n	800141c <calc_zero_detector+0x1dc>
						detected++;
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	3301      	adds	r3, #1
 800141a:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 800141c:	7ffb      	ldrb	r3, [r7, #31]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d90c      	bls.n	800143c <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	491b      	ldr	r1, [pc, #108]	; (8001494 <calc_zero_detector+0x254>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3308      	adds	r3, #8
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	601a      	str	r2, [r3, #0]
					detect_count++;
 8001436:	7fbb      	ldrb	r3, [r7, #30]
 8001438:	3301      	adds	r3, #1
 800143a:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3301      	adds	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800144c:	f4ff af1b 	bcc.w	8001286 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 8001450:	7fbb      	ldrb	r3, [r7, #30]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d917      	bls.n	8001486 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	490e      	ldr	r1, [pc, #56]	; (8001494 <calc_zero_detector+0x254>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	f06f 0208 	mvn.w	r2, #8
 800146a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	4909      	ldr	r1, [pc, #36]	; (8001494 <calc_zero_detector+0x254>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	f06f 0208 	mvn.w	r2, #8
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e000      	b.n	8001486 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001484:	bf00      	nop
	}
}
 8001486:	3724      	adds	r7, #36	; 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200074dc 	.word	0x200074dc
 8001494:	2000026c 	.word	0x2000026c

08001498 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing, etc)
 */
void calc_downsample(uint8_t bufnum) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	f200 8115 	bhi.w	80016d8 <calc_downsample+0x240>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e083      	b.n	80015bc <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	498a      	ldr	r1, [pc, #552]	; (80016e0 <calc_downsample+0x248>)
 80014b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80014bc:	fb03 f202 	mul.w	r2, r3, r2
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4413      	add	r3, r2
 80014c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014c8:	461c      	mov	r4, r3
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4983      	ldr	r1, [pc, #524]	; (80016e0 <calc_downsample+0x248>)
 80014d2:	f44f 7052 	mov.w	r0, #840	; 0x348
 80014d6:	fb00 f202 	mul.w	r2, r0, r2
 80014da:	4413      	add	r3, r2
 80014dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014e0:	4423      	add	r3, r4
 80014e2:	79f9      	ldrb	r1, [r7, #7]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	3201      	adds	r2, #1
 80014e8:	487d      	ldr	r0, [pc, #500]	; (80016e0 <calc_downsample+0x248>)
 80014ea:	f44f 7452 	mov.w	r4, #840	; 0x348
 80014ee:	fb04 f101 	mul.w	r1, r4, r1
 80014f2:	440a      	add	r2, r1
 80014f4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a7a      	ldr	r2, [pc, #488]	; (80016e4 <calc_downsample+0x24c>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad1      	subs	r1, r2, r3
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	8bfb      	ldrh	r3, [r7, #30]
 8001508:	b28c      	uxth	r4, r1
 800150a:	4977      	ldr	r1, [pc, #476]	; (80016e8 <calc_downsample+0x250>)
 800150c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001510:	fb00 f202 	mul.w	r2, r0, r2
 8001514:	4413      	add	r3, r2
 8001516:	4622      	mov	r2, r4
 8001518:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	4973      	ldr	r1, [pc, #460]	; (80016ec <calc_downsample+0x254>)
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	82bb      	strh	r3, [r7, #20]
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	8bfb      	ldrh	r3, [r7, #30]
 8001532:	496d      	ldr	r1, [pc, #436]	; (80016e8 <calc_downsample+0x250>)
 8001534:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001538:	fb00 f202 	mul.w	r2, r0, r2
 800153c:	4413      	add	r3, r2
 800153e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001542:	827b      	strh	r3, [r7, #18]
 8001544:	8a7a      	ldrh	r2, [r7, #18]
 8001546:	8abb      	ldrh	r3, [r7, #20]
 8001548:	4293      	cmp	r3, r2
 800154a:	bf28      	it	cs
 800154c:	4613      	movcs	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	b298      	uxth	r0, r3
 8001554:	4965      	ldr	r1, [pc, #404]	; (80016ec <calc_downsample+0x254>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	4602      	mov	r2, r0
 8001562:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	4961      	ldr	r1, [pc, #388]	; (80016ec <calc_downsample+0x254>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3302      	adds	r3, #2
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	823b      	strh	r3, [r7, #16]
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	495a      	ldr	r1, [pc, #360]	; (80016e8 <calc_downsample+0x250>)
 800157e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001582:	fb00 f202 	mul.w	r2, r0, r2
 8001586:	4413      	add	r3, r2
 8001588:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800158c:	81fb      	strh	r3, [r7, #14]
 800158e:	89fa      	ldrh	r2, [r7, #14]
 8001590:	8a3b      	ldrh	r3, [r7, #16]
 8001592:	4293      	cmp	r3, r2
 8001594:	bf38      	it	cc
 8001596:	4613      	movcc	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	b298      	uxth	r0, r3
 800159e:	4953      	ldr	r1, [pc, #332]	; (80016ec <calc_downsample+0x254>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3302      	adds	r3, #2
 80015ac:	4602      	mov	r2, r0
 80015ae:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 80015b0:	8bfb      	ldrh	r3, [r7, #30]
 80015b2:	3301      	adds	r3, #1
 80015b4:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	3302      	adds	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f240 3245 	movw	r2, #837	; 0x345
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f67f af76 	bls.w	80014b4 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <calc_downsample+0x248>)
 80015cc:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <calc_downsample+0x248>)
 80015e2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4403      	add	r3, r0
 80015f4:	0fda      	lsrs	r2, r3, #31
 80015f6:	4413      	add	r3, r2
 80015f8:	105b      	asrs	r3, r3, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	8bfb      	ldrh	r3, [r7, #30]
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	83f9      	strh	r1, [r7, #30]
 8001604:	461c      	mov	r4, r3
 8001606:	b280      	uxth	r0, r0
 8001608:	4937      	ldr	r1, [pc, #220]	; (80016e8 <calc_downsample+0x250>)
 800160a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4423      	add	r3, r4
 8001614:	4602      	mov	r2, r0
 8001616:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 800161a:	8bfb      	ldrh	r3, [r7, #30]
 800161c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001620:	d20a      	bcs.n	8001638 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	8bfb      	ldrh	r3, [r7, #30]
 8001626:	4930      	ldr	r1, [pc, #192]	; (80016e8 <calc_downsample+0x250>)
 8001628:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800162c:	fb00 f202 	mul.w	r2, r0, r2
 8001630:	4413      	add	r3, r2
 8001632:	2200      	movs	r2, #0
 8001634:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	492c      	ldr	r1, [pc, #176]	; (80016ec <calc_downsample+0x254>)
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3302      	adds	r3, #2
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	4827      	ldr	r0, [pc, #156]	; (80016ec <calc_downsample+0x254>)
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4403      	add	r3, r0
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	1acb      	subs	r3, r1, r3
 800165c:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	if (range > ADC_NOISE_RAW) {
 800165e:	8afb      	ldrh	r3, [r7, #22]
 8001660:	2b1e      	cmp	r3, #30
 8001662:	d918      	bls.n	8001696 <calc_downsample+0x1fe>
		calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 8001664:	8afb      	ldrh	r3, [r7, #22]
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	491f      	ldr	r1, [pc, #124]	; (80016ec <calc_downsample+0x254>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	18c1      	adds	r1, r0, r3
 800167e:	8afb      	ldrh	r3, [r7, #22]
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <calc_downsample+0x258>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	b29b      	uxth	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fdd6 	bl	8001240 <calc_zero_detector>
 8001694:	e021      	b.n	80016da <calc_downsample+0x242>
	} else {
		// mark zero crossings as invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	4914      	ldr	r1, [pc, #80]	; (80016ec <calc_downsample+0x254>)
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3308      	adds	r3, #8
 80016a6:	f06f 0208 	mvn.w	r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	490f      	ldr	r1, [pc, #60]	; (80016ec <calc_downsample+0x254>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3304      	adds	r3, #4
 80016bc:	f06f 0208 	mvn.w	r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].value_is_zero = 1;		// value is zero
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	4909      	ldr	r1, [pc, #36]	; (80016ec <calc_downsample+0x254>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	330d      	adds	r3, #13
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e000      	b.n	80016da <calc_downsample+0x242>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80016d8:	bf00      	nop
	}
}
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	20005a9c 	.word	0x20005a9c
 80016e4:	55555556 	.word	0x55555556
 80016e8:	200074dc 	.word	0x200074dc
 80016ec:	2000026c 	.word	0x2000026c
 80016f0:	cccccccd 	.word	0xcccccccd

080016f4 <calc_filter_add_v>:

/*
 * @brief  Add new value to voltage filter
 * @para newValue: The new value to add to the filter
 */
void calc_filter_add_v(float newValue) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float v_total = 0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	e019      	b.n	800173e <calc_filter_add_v+0x4a>
		v_filter[i] = v_filter[i+1];
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3301      	adds	r3, #1
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <calc_filter_add_v+0x84>)
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4918      	ldr	r1, [pc, #96]	; (8001778 <calc_filter_add_v+0x84>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	601a      	str	r2, [r3, #0]
		v_total += v_filter[i];			// accumulate total
 8001720:	4a15      	ldr	r2, [pc, #84]	; (8001778 <calc_filter_add_v+0x84>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b03      	cmp	r3, #3
 8001742:	dde2      	ble.n	800170a <calc_filter_add_v+0x16>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = newValue;
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <calc_filter_add_v+0x84>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6113      	str	r3, [r2, #16]
	v_total += newValue;
 800174a:	ed97 7a03 	vldr	s14, [r7, #12]
 800174e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	edc7 7a03 	vstr	s15, [r7, #12]
	v_filtered = v_total / FILTER_NUM;
 800175a:	ed97 7a03 	vldr	s14, [r7, #12]
 800175e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <calc_filter_add_v+0x88>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200002c0 	.word	0x200002c0
 800177c:	200003c4 	.word	0x200003c4

08001780 <calc_filter_add_i>:
 * @para new_i_value:  The new current value to add to the filter
 * @para new_va_value: The new va value to add to the filter
 * @para new_w_value:  The new w value to add to the filter
 * @para new_pf_value: The new PF value to add to the filter
 */
void calc_filter_add_i(uint8_t channel, float new_i_value, float new_va_value, float new_w_value, float new_pf_value) {
 8001780:	b490      	push	{r4, r7}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	ed87 0a04 	vstr	s0, [r7, #16]
 800178c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001790:	ed87 1a02 	vstr	s2, [r7, #8]
 8001794:	edc7 1a01 	vstr	s3, [r7, #4]
 8001798:	75fb      	strb	r3, [r7, #23]
	float i_total=0, va_total=0, w_total=0, pf_total=0;
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e09a      	b.n	80018ee <calc_filter_add_i+0x16e>
		i_filter[channel][i] = i_filter[channel][i+1];
 80017b8:	7df9      	ldrb	r1, [r7, #23]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	1c58      	adds	r0, r3, #1
 80017be:	7dfa      	ldrb	r2, [r7, #23]
 80017c0:	4c8b      	ldr	r4, [pc, #556]	; (80019f0 <calc_filter_add_i+0x270>)
 80017c2:	460b      	mov	r3, r1
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	4403      	add	r3, r0
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4423      	add	r3, r4
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	4887      	ldr	r0, [pc, #540]	; (80019f0 <calc_filter_add_i+0x270>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4403      	add	r3, r0
 80017e0:	6019      	str	r1, [r3, #0]
		i_total += i_filter[channel][i];
 80017e2:	7dfa      	ldrb	r2, [r7, #23]
 80017e4:	4982      	ldr	r1, [pc, #520]	; (80019f0 <calc_filter_add_i+0x270>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		va_filter[channel][i] = va_filter[channel][i+1];
 8001804:	7df9      	ldrb	r1, [r7, #23]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	1c58      	adds	r0, r3, #1
 800180a:	7dfa      	ldrb	r2, [r7, #23]
 800180c:	4c79      	ldr	r4, [pc, #484]	; (80019f4 <calc_filter_add_i+0x274>)
 800180e:	460b      	mov	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	4403      	add	r3, r0
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4423      	add	r3, r4
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	4875      	ldr	r0, [pc, #468]	; (80019f4 <calc_filter_add_i+0x274>)
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4403      	add	r3, r0
 800182c:	6019      	str	r1, [r3, #0]
		va_total += va_filter[channel][i];
 800182e:	7dfa      	ldrb	r2, [r7, #23]
 8001830:	4970      	ldr	r1, [pc, #448]	; (80019f4 <calc_filter_add_i+0x274>)
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		w_filter[channel][i] = w_filter[channel][i+1];
 8001850:	7df9      	ldrb	r1, [r7, #23]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	1c58      	adds	r0, r3, #1
 8001856:	7dfa      	ldrb	r2, [r7, #23]
 8001858:	4c67      	ldr	r4, [pc, #412]	; (80019f8 <calc_filter_add_i+0x278>)
 800185a:	460b      	mov	r3, r1
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	4403      	add	r3, r0
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4423      	add	r3, r4
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	4863      	ldr	r0, [pc, #396]	; (80019f8 <calc_filter_add_i+0x278>)
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4403      	add	r3, r0
 8001878:	6019      	str	r1, [r3, #0]
		w_total += w_filter[channel][i];
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	495e      	ldr	r1, [pc, #376]	; (80019f8 <calc_filter_add_i+0x278>)
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pf_filter[channel][i] = pf_filter[channel][i+1];
 800189c:	7df9      	ldrb	r1, [r7, #23]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	1c58      	adds	r0, r3, #1
 80018a2:	7dfa      	ldrb	r2, [r7, #23]
 80018a4:	4c55      	ldr	r4, [pc, #340]	; (80019fc <calc_filter_add_i+0x27c>)
 80018a6:	460b      	mov	r3, r1
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	4403      	add	r3, r0
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4423      	add	r3, r4
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	4851      	ldr	r0, [pc, #324]	; (80019fc <calc_filter_add_i+0x27c>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4403      	add	r3, r0
 80018c4:	6019      	str	r1, [r3, #0]
		pf_total += pf_filter[channel][i];
 80018c6:	7dfa      	ldrb	r2, [r7, #23]
 80018c8:	494c      	ldr	r1, [pc, #304]	; (80019fc <calc_filter_add_i+0x27c>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	f77f af61 	ble.w	80017b8 <calc_filter_add_i+0x38>
	}
	// add new measurements
	i_filter[channel][FILTER_NUM-1] = new_i_value;
 80018f6:	7dfa      	ldrb	r2, [r7, #23]
 80018f8:	493d      	ldr	r1, [pc, #244]	; (80019f0 <calc_filter_add_i+0x270>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3310      	adds	r3, #16
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	601a      	str	r2, [r3, #0]
	i_total += new_i_value;
 800190a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800190e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001916:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	va_filter[channel][FILTER_NUM-1] = new_va_value;
 800191a:	7dfa      	ldrb	r2, [r7, #23]
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <calc_filter_add_i+0x274>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3310      	adds	r3, #16
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]
	va_total += new_va_value;
 800192e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001932:	edd7 7a03 	vldr	s15, [r7, #12]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	w_filter[channel][FILTER_NUM-1] = new_w_value;
 800193e:	7dfa      	ldrb	r2, [r7, #23]
 8001940:	492d      	ldr	r1, [pc, #180]	; (80019f8 <calc_filter_add_i+0x278>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3310      	adds	r3, #16
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	601a      	str	r2, [r3, #0]
	w_total += new_w_value;
 8001952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001956:	edd7 7a02 	vldr	s15, [r7, #8]
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pf_filter[channel][FILTER_NUM-1] = new_pf_value;
 8001962:	7dfa      	ldrb	r2, [r7, #23]
 8001964:	4925      	ldr	r1, [pc, #148]	; (80019fc <calc_filter_add_i+0x27c>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3310      	adds	r3, #16
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
	pf_total += new_pf_value;
 8001976:	ed97 7a08 	vldr	s14, [r7, #32]
 800197a:	edd7 7a01 	vldr	s15, [r7, #4]
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	edc7 7a08 	vstr	s15, [r7, #32]

	i_filtered[channel] = i_total / FILTER_NUM;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800198c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <calc_filter_add_i+0x280>)
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	edc3 7a00 	vstr	s15, [r3]
	va_filtered[channel] = va_total / FILTER_NUM;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019a4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <calc_filter_add_i+0x284>)
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	edc3 7a00 	vstr	s15, [r3]
	w_filtered[channel] = w_total / FILTER_NUM;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019bc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <calc_filter_add_i+0x288>)
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	pf_filtered[channel] = pf_total / FILTER_NUM;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <calc_filter_add_i+0x28c>)
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	edc3 7a00 	vstr	s15, [r3]
}
 80019e6:	bf00      	nop
 80019e8:	3730      	adds	r7, #48	; 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc90      	pop	{r4, r7}
 80019ee:	4770      	bx	lr
 80019f0:	200002d4 	.word	0x200002d4
 80019f4:	20000310 	.word	0x20000310
 80019f8:	2000034c 	.word	0x2000034c
 80019fc:	20000388 	.word	0x20000388
 8001a00:	200003c8 	.word	0x200003c8
 8001a04:	200003d4 	.word	0x200003d4
 8001a08:	200003e0 	.word	0x200003e0
 8001a0c:	200003ec 	.word	0x200003ec

08001a10 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	ed2d 8b02 	vpush	{d8}
 8001a18:	b0d4      	sub	sp, #336	; 0x150
 8001a1a:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	int64_t i1_sq_acc=0, i2_sq_acc=0, i3_sq_acc=0;		// accumulator for squared I values
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	double i1_va_acc=0, i2_va_acc=0, i3_va_acc=0;		// accumulator for squared VA values
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	double i1_w_acc=0, i2_w_acc=0, i3_w_acc=0;			// accumulating I values where I > 0 (for W calculation)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t v_pp;				// Voltage channel Peak-Peak
	uint16_t i1_zero, i2_zero, i3_zero;
	uint16_t i1_pp, i2_pp, i3_pp;			// Current channel P-P
	float w=0, va=0;
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8001aaa:	4bb2      	ldr	r3, [pc, #712]	; (8001d74 <calc_measurements+0x364>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da06      	bge.n	8001ac0 <calc_measurements+0xb0>
		meter_readings_invalid = 1;
 8001ab2:	4bb1      	ldr	r3, [pc, #708]	; (8001d78 <calc_measurements+0x368>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abc:	f000 bfad 	b.w	8002a1a <calc_measurements+0x100a>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 8001ac0:	4bac      	ldr	r3, [pc, #688]	; (8001d74 <calc_measurements+0x364>)
 8001ac2:	885b      	ldrh	r3, [r3, #2]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4bab      	ldr	r3, [pc, #684]	; (8001d74 <calc_measurements+0x364>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dc06      	bgt.n	8001ae2 <calc_measurements+0xd2>
		meter_readings_invalid = 1;
 8001ad4:	4ba8      	ldr	r3, [pc, #672]	; (8001d78 <calc_measurements+0x368>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ade:	f000 bf9c 	b.w	8002a1a <calc_measurements+0x100a>
	}

	meter_readings_invalid = 0;		// readings are valid
 8001ae2:	4aa5      	ldr	r2, [pc, #660]	; (8001d78 <calc_measurements+0x368>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	7013      	strb	r3, [r2, #0]

	v_pp = sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min;
 8001ae8:	4ba2      	ldr	r3, [pc, #648]	; (8001d74 <calc_measurements+0x364>)
 8001aea:	885a      	ldrh	r2, [r3, #2]
 8001aec:	4ba1      	ldr	r3, [pc, #644]	; (8001d74 <calc_measurements+0x364>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	v_zero = v_pp / 2 + sample_buf_meta[ADC_CH_V].min;
 8001af6:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b9d      	ldr	r3, [pc, #628]	; (8001d74 <calc_measurements+0x364>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	i1_pp = sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min;
 8001b08:	4b9a      	ldr	r3, [pc, #616]	; (8001d74 <calc_measurements+0x364>)
 8001b0a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001b0c:	4b99      	ldr	r3, [pc, #612]	; (8001d74 <calc_measurements+0x364>)
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	i2_pp = sample_buf_meta[ADC_CH_I2].max - sample_buf_meta[ADC_CH_I2].min;
 8001b16:	4b97      	ldr	r3, [pc, #604]	; (8001d74 <calc_measurements+0x364>)
 8001b18:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001b1a:	4b96      	ldr	r3, [pc, #600]	; (8001d74 <calc_measurements+0x364>)
 8001b1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	i3_pp = sample_buf_meta[ADC_CH_I3].max - sample_buf_meta[ADC_CH_I3].min;
 8001b24:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <calc_measurements+0x364>)
 8001b26:	8ada      	ldrh	r2, [r3, #22]
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <calc_measurements+0x364>)
 8001b2a:	8a9b      	ldrh	r3, [r3, #20]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	i1_zero = i1_pp / 2 + sample_buf_meta[ADC_CH_I1].min;
 8001b32:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <calc_measurements+0x364>)
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
	i2_zero = i2_pp / 2 + sample_buf_meta[ADC_CH_I2].min;
 8001b44:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <calc_measurements+0x364>)
 8001b4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b50:	4413      	add	r3, r2
 8001b52:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	i3_zero = i3_pp / 2 + sample_buf_meta[ADC_CH_I3].min;
 8001b56:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <calc_measurements+0x364>)
 8001b60:	8a9b      	ldrh	r3, [r3, #20]
 8001b62:	4413      	add	r3, r2
 8001b64:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc

	// Calculate values using the positive half of the sine wave

	// Add up squared measurements
	// does the positive x-ing come before the negative?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001b68:	4b82      	ldr	r3, [pc, #520]	; (8001d74 <calc_measurements+0x364>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <calc_measurements+0x364>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f280 8163 	bge.w	8001e3c <calc_measurements+0x42c>
		// iterate from positive to negative crossing (positive half wave)
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <calc_measurements+0x364>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b7e:	e155      	b.n	8001e2c <calc_measurements+0x41c>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b80:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <calc_measurements+0x36c>)
 8001b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b8a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001b96:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001b9a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	17da      	asrs	r2, r3, #31
 8001ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001bb0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	1851      	adds	r1, r2, r1
 8001bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bba:	4629      	mov	r1, r5
 8001bbc:	414b      	adcs	r3, r1
 8001bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bc0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bc8:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <calc_measurements+0x36c>)
 8001bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001bce:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001bd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bd6:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001be2:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001be6:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	17da      	asrs	r2, r3, #31
 8001bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001bf8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001bfc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001c00:	4621      	mov	r1, r4
 8001c02:	1851      	adds	r1, r2, r1
 8001c04:	6539      	str	r1, [r7, #80]	; 0x50
 8001c06:	4629      	mov	r1, r5
 8001c08:	414b      	adcs	r3, r1
 8001c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001c10:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001c14:	4a59      	ldr	r2, [pc, #356]	; (8001d7c <calc_measurements+0x36c>)
 8001c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c1a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001c1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c22:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001c2e:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001c32:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	17da      	asrs	r2, r3, #31
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c40:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c44:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001c48:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	1851      	adds	r1, r2, r1
 8001c50:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c52:	4629      	mov	r1, r5
 8001c54:	414b      	adcs	r3, r1
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c58:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001c5c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <calc_measurements+0x36c>)
 8001c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c66:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001c6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c6e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001c7a:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001c7e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	17da      	asrs	r2, r3, #31
 8001c88:	4698      	mov	r8, r3
 8001c8a:	4691      	mov	r9, r2
 8001c8c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c90:	eb12 0108 	adds.w	r1, r2, r8
 8001c94:	6439      	str	r1, [r7, #64]	; 0x40
 8001c96:	eb43 0309 	adc.w	r3, r3, r9
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c9c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001ca0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 8001ca4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001cae:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 ffe2 	bl	8002c7c <calc_adc_raw_to_V>
 8001cb8:	eeb0 8a40 	vmov.f32	s16, s0
 8001cbc:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fff9 	bl	8002cb8 <calc_adc_raw_to_A>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cce:	ee17 0a90 	vmov	r0, s15
 8001cd2:	f7fe fc59 	bl	8000588 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001cde:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0a      	blt.n	8001cfc <calc_measurements+0x2ec>
 8001ce6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001cea:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001cee:	f7fe faed 	bl	80002cc <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001cfa:	e014      	b.n	8001d26 <calc_measurements+0x316>
			else { i1_w_acc += abs(va_instant); }
 8001cfc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d00:	f7fe ff4a 	bl	8000b98 <__aeabi_d2iz>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfb8      	it	lt
 8001d0a:	425b      	neglt	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc29 	bl	8000564 <__aeabi_i2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001d1a:	f7fe fad7 	bl	80002cc <__adddf3>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001d26:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 ffa6 	bl	8002c7c <calc_adc_raw_to_V>
 8001d30:	eeb0 8a40 	vmov.f32	s16, s0
 8001d34:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 ffbd 	bl	8002cb8 <calc_adc_raw_to_A>
 8001d3e:	eef0 7a40 	vmov.f32	s15, s0
 8001d42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d46:	ee17 0a90 	vmov	r0, s15
 8001d4a:	f7fe fc1d 	bl	8000588 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8001d56:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db10      	blt.n	8001d80 <calc_measurements+0x370>
 8001d5e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001d62:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001d66:	f7fe fab1 	bl	80002cc <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001d72:	e01a      	b.n	8001daa <calc_measurements+0x39a>
 8001d74:	2000026c 	.word	0x2000026c
 8001d78:	200002bc 	.word	0x200002bc
 8001d7c:	200074dc 	.word	0x200074dc
			else { i2_w_acc += abs(va_instant); }
 8001d80:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d84:	f7fe ff08 	bl	8000b98 <__aeabi_d2iz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bfb8      	it	lt
 8001d8e:	425b      	neglt	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbe7 	bl	8000564 <__aeabi_i2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001d9e:	f7fe fa95 	bl	80002cc <__adddf3>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8001daa:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 ff64 	bl	8002c7c <calc_adc_raw_to_V>
 8001db4:	eeb0 8a40 	vmov.f32	s16, s0
 8001db8:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 ff7b 	bl	8002cb8 <calc_adc_raw_to_A>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fbdb 	bl	8000588 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8001dda:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0a      	blt.n	8001df8 <calc_measurements+0x3e8>
 8001de2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001de6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001dea:	f7fe fa6f 	bl	80002cc <__adddf3>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8001df6:	e014      	b.n	8001e22 <calc_measurements+0x412>
			else { i3_w_acc += abs(va_instant); }
 8001df8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dfc:	f7fe fecc 	bl	8000b98 <__aeabi_d2iz>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bfb8      	it	lt
 8001e06:	425b      	neglt	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbab 	bl	8000564 <__aeabi_i2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001e16:	f7fe fa59 	bl	80002cc <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e26:	3301      	adds	r3, #1
 8001e28:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e2c:	4bb0      	ldr	r3, [pc, #704]	; (80020f0 <calc_measurements+0x6e0>)
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e34:	4293      	cmp	r3, r2
 8001e36:	f6ff aea3 	blt.w	8001b80 <calc_measurements+0x170>
 8001e3a:	e2ba      	b.n	80023b2 <calc_measurements+0x9a2>
		}
	} else {	// negative crossing is first
		// iterate from positive x-ing to the end of the buffer ....
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001e3c:	4bac      	ldr	r3, [pc, #688]	; (80020f0 <calc_measurements+0x6e0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e44:	e149      	b.n	80020da <calc_measurements+0x6ca>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001e46:	4aab      	ldr	r2, [pc, #684]	; (80020f4 <calc_measurements+0x6e4>)
 8001e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e4c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e50:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001e5c:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001e60:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	17da      	asrs	r2, r3, #31
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e6e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e72:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001e76:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	1851      	adds	r1, r2, r1
 8001e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e80:	4649      	mov	r1, r9
 8001e82:	414b      	adcs	r3, r1
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e8a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001e8e:	4a99      	ldr	r2, [pc, #612]	; (80020f4 <calc_measurements+0x6e4>)
 8001e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e94:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001e98:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e9c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001ea8:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001eac:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	17da      	asrs	r2, r3, #31
 8001eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001eba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ebe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ec6:	4641      	mov	r1, r8
 8001ec8:	1851      	adds	r1, r2, r1
 8001eca:	6339      	str	r1, [r7, #48]	; 0x30
 8001ecc:	4649      	mov	r1, r9
 8001ece:	414b      	adcs	r3, r1
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ed6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001eda:	4a86      	ldr	r2, [pc, #536]	; (80020f4 <calc_measurements+0x6e4>)
 8001edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ee0:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001ee4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ee8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001ef4:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001ef8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	17da      	asrs	r2, r3, #31
 8001f02:	469a      	mov	sl, r3
 8001f04:	4693      	mov	fp, r2
 8001f06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f0a:	eb12 010a 	adds.w	r1, r2, sl
 8001f0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f10:	eb43 030b 	adc.w	r3, r3, fp
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f1a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001f1e:	4a75      	ldr	r2, [pc, #468]	; (80020f4 <calc_measurements+0x6e4>)
 8001f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f24:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001f28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f2c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001f38:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001f3c:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	17da      	asrs	r2, r3, #31
 8001f46:	461c      	mov	r4, r3
 8001f48:	4615      	mov	r5, r2
 8001f4a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f4e:	1911      	adds	r1, r2, r4
 8001f50:	6239      	str	r1, [r7, #32]
 8001f52:	416b      	adcs	r3, r5
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f5a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			num_readings++;
 8001f5e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001f68:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fe85 	bl	8002c7c <calc_adc_raw_to_V>
 8001f72:	eeb0 8a40 	vmov.f32	s16, s0
 8001f76:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fe9c 	bl	8002cb8 <calc_adc_raw_to_A>
 8001f80:	eef0 7a40 	vmov.f32	s15, s0
 8001f84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f88:	ee17 0a90 	vmov	r0, s15
 8001f8c:	f7fe fafc 	bl	8000588 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001f98:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <calc_measurements+0x5a6>
 8001fa0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001fa4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001fa8:	f7fe f990 	bl	80002cc <__adddf3>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001fb4:	e014      	b.n	8001fe0 <calc_measurements+0x5d0>
			else { i1_w_acc += abs(va_instant); }
 8001fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fba:	f7fe fded 	bl	8000b98 <__aeabi_d2iz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bfb8      	it	lt
 8001fc4:	425b      	neglt	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe facc 	bl	8000564 <__aeabi_i2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001fd4:	f7fe f97a 	bl	80002cc <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001fe0:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fe49 	bl	8002c7c <calc_adc_raw_to_V>
 8001fea:	eeb0 8a40 	vmov.f32	s16, s0
 8001fee:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fe60 	bl	8002cb8 <calc_adc_raw_to_A>
 8001ff8:	eef0 7a40 	vmov.f32	s15, s0
 8001ffc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002000:	ee17 0a90 	vmov	r0, s15
 8002004:	f7fe fac0 	bl	8000588 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8002010:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <calc_measurements+0x61e>
 8002018:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800201c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002020:	f7fe f954 	bl	80002cc <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 800202c:	e014      	b.n	8002058 <calc_measurements+0x648>
			else { i2_w_acc += abs(va_instant); }
 800202e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002032:	f7fe fdb1 	bl	8000b98 <__aeabi_d2iz>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	bfb8      	it	lt
 800203c:	425b      	neglt	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa90 	bl	8000564 <__aeabi_i2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800204c:	f7fe f93e 	bl	80002cc <__adddf3>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8002058:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fe0d 	bl	8002c7c <calc_adc_raw_to_V>
 8002062:	eeb0 8a40 	vmov.f32	s16, s0
 8002066:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fe24 	bl	8002cb8 <calc_adc_raw_to_A>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002078:	ee17 0a90 	vmov	r0, s15
 800207c:	f7fe fa84 	bl	8000588 <__aeabi_f2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8002088:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <calc_measurements+0x696>
 8002090:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002094:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002098:	f7fe f918 	bl	80002cc <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 80020a4:	e014      	b.n	80020d0 <calc_measurements+0x6c0>
			else { i3_w_acc += abs(va_instant); }
 80020a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020aa:	f7fe fd75 	bl	8000b98 <__aeabi_d2iz>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bfb8      	it	lt
 80020b4:	425b      	neglt	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa54 	bl	8000564 <__aeabi_i2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80020c4:	f7fe f902 	bl	80002cc <__adddf3>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 80020d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020d4:	3301      	adds	r3, #1
 80020d6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020de:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80020e2:	f4ff aeb0 	bcc.w	8001e46 <calc_measurements+0x436>
		}
		// ..... the continue iterating from the start of the buffer to the negative crossing
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 80020e6:	2314      	movs	r3, #20
 80020e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020ec:	e15a      	b.n	80023a4 <calc_measurements+0x994>
 80020ee:	bf00      	nop
 80020f0:	2000026c 	.word	0x2000026c
 80020f4:	200074dc 	.word	0x200074dc
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 80020f8:	4a9c      	ldr	r2, [pc, #624]	; (800236c <calc_measurements+0x95c>)
 80020fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002102:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	b29b      	uxth	r3, r3
 800210a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 800210e:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8002112:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	17da      	asrs	r2, r3, #31
 800211c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002120:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002124:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002128:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800212c:	4621      	mov	r1, r4
 800212e:	1851      	adds	r1, r2, r1
 8002130:	61b9      	str	r1, [r7, #24]
 8002132:	4629      	mov	r1, r5
 8002134:	414b      	adcs	r3, r1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800213c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8002140:	4a8a      	ldr	r2, [pc, #552]	; (800236c <calc_measurements+0x95c>)
 8002142:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002146:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800214a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800214e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	b29b      	uxth	r3, r3
 8002156:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 800215a:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 800215e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	17da      	asrs	r2, r3, #31
 8002168:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800216c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002170:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002174:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002178:	4621      	mov	r1, r4
 800217a:	1851      	adds	r1, r2, r1
 800217c:	6139      	str	r1, [r7, #16]
 800217e:	4629      	mov	r1, r5
 8002180:	414b      	adcs	r3, r1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002188:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 800218c:	4a77      	ldr	r2, [pc, #476]	; (800236c <calc_measurements+0x95c>)
 800218e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002192:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002196:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800219a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 80021a6:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80021aa:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	17da      	asrs	r2, r3, #31
 80021b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021bc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80021c0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80021c4:	4621      	mov	r1, r4
 80021c6:	1851      	adds	r1, r2, r1
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4629      	mov	r1, r5
 80021cc:	414b      	adcs	r3, r1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021d4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 80021d8:	4a64      	ldr	r2, [pc, #400]	; (800236c <calc_measurements+0x95c>)
 80021da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021de:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80021e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021e6:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 80021f2:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80021f6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	17da      	asrs	r2, r3, #31
 8002200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002204:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002208:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800220c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002210:	4621      	mov	r1, r4
 8002212:	1851      	adds	r1, r2, r1
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	4629      	mov	r1, r5
 8002218:	414b      	adcs	r3, r1
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002220:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 8002224:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002228:	3301      	adds	r3, #1
 800222a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 800222e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd22 	bl	8002c7c <calc_adc_raw_to_V>
 8002238:	eeb0 8a40 	vmov.f32	s16, s0
 800223c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fd39 	bl	8002cb8 <calc_adc_raw_to_A>
 8002246:	eef0 7a40 	vmov.f32	s15, s0
 800224a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800224e:	ee17 0a90 	vmov	r0, s15
 8002252:	f7fe f999 	bl	8000588 <__aeabi_f2d>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 800225e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0a      	blt.n	800227c <calc_measurements+0x86c>
 8002266:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800226a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800226e:	f7fe f82d 	bl	80002cc <__adddf3>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 800227a:	e014      	b.n	80022a6 <calc_measurements+0x896>
			else { i1_w_acc += abs(va_instant); }
 800227c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002280:	f7fe fc8a 	bl	8000b98 <__aeabi_d2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bfb8      	it	lt
 800228a:	425b      	neglt	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f969 	bl	8000564 <__aeabi_i2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800229a:	f7fe f817 	bl	80002cc <__adddf3>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 80022a6:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fce6 	bl	8002c7c <calc_adc_raw_to_V>
 80022b0:	eeb0 8a40 	vmov.f32	s16, s0
 80022b4:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fcfd 	bl	8002cb8 <calc_adc_raw_to_A>
 80022be:	eef0 7a40 	vmov.f32	s15, s0
 80022c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f95d 	bl	8000588 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 80022d6:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0a      	blt.n	80022f4 <calc_measurements+0x8e4>
 80022de:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80022e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80022e6:	f7fd fff1 	bl	80002cc <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 80022f2:	e014      	b.n	800231e <calc_measurements+0x90e>
			else { i2_w_acc += abs(va_instant); }
 80022f4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022f8:	f7fe fc4e 	bl	8000b98 <__aeabi_d2iz>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfb8      	it	lt
 8002302:	425b      	neglt	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f92d 	bl	8000564 <__aeabi_i2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002312:	f7fd ffdb 	bl	80002cc <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 800231e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fcaa 	bl	8002c7c <calc_adc_raw_to_V>
 8002328:	eeb0 8a40 	vmov.f32	s16, s0
 800232c:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fcc1 	bl	8002cb8 <calc_adc_raw_to_A>
 8002336:	eef0 7a40 	vmov.f32	s15, s0
 800233a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800233e:	ee17 0a90 	vmov	r0, s15
 8002342:	f7fe f921 	bl	8000588 <__aeabi_f2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 800234e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0c      	blt.n	8002370 <calc_measurements+0x960>
 8002356:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800235a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800235e:	f7fd ffb5 	bl	80002cc <__adddf3>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 800236a:	e016      	b.n	800239a <calc_measurements+0x98a>
 800236c:	200074dc 	.word	0x200074dc
			else { i3_w_acc += abs(va_instant); }
 8002370:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002374:	f7fe fc10 	bl	8000b98 <__aeabi_d2iz>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	bfb8      	it	lt
 800237e:	425b      	neglt	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8ef 	bl	8000564 <__aeabi_i2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800238e:	f7fd ff9d 	bl	80002cc <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 800239a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800239e:	3301      	adds	r3, #1
 80023a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <calc_measurements+0xbf0>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023ac:	4293      	cmp	r3, r2
 80023ae:	f6ff aea3 	blt.w	80020f8 <calc_measurements+0x6e8>
		}
	}

	// Calculate measured RMS voltage
	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 80023b2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80023b6:	2200      	movs	r2, #0
 80023b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80023c0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023c4:	f7fe fc80 	bl	8000cc8 <__aeabi_ldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe f904 	bl	80005dc <__aeabi_l2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	ec43 2b10 	vmov	d0, r2, r3
 80023dc:	f010 fe58 	bl	8013090 <sqrt>
 80023e0:	ec53 2b10 	vmov	r2, r3, d0
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbd6 	bl	8000b98 <__aeabi_d2iz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fc43 	bl	8002c7c <calc_adc_raw_to_V>
 80023f6:	eef0 7a40 	vmov.f32	s15, s0
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <calc_measurements+0xbf4>)
 80023fc:	edc3 7a00 	vstr	s15, [r3]
	//v_measured = calc_adc_raw_to_V(v_pp) / 2 * 0.707;		// only works for a perfect sine wave (no distortion)
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8002400:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <calc_measurements+0xbf0>)
 8002402:	2201      	movs	r2, #1
 8002404:	731a      	strb	r2, [r3, #12]
	pf_measured[I1] = pf_measured[I2] = pf_measured[I3] = 1.0;		// assumed PF
 8002406:	4b80      	ldr	r3, [pc, #512]	; (8002608 <calc_measurements+0xbf8>)
 8002408:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	4b7e      	ldr	r3, [pc, #504]	; (8002608 <calc_measurements+0xbf8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a7d      	ldr	r2, [pc, #500]	; (8002608 <calc_measurements+0xbf8>)
 8002414:	6053      	str	r3, [r2, #4]
 8002416:	4b7c      	ldr	r3, [pc, #496]	; (8002608 <calc_measurements+0xbf8>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a7b      	ldr	r2, [pc, #492]	; (8002608 <calc_measurements+0xbf8>)
 800241c:	6013      	str	r3, [r2, #0]

	// Process I1 values
	// do we have zero (below ADC noise) current reading?
	if (sample_buf_meta[ADC_CH_I1].value_is_zero) {	// set all measured values to zero
 800241e:	4b78      	ldr	r3, [pc, #480]	; (8002600 <calc_measurements+0xbf0>)
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <calc_measurements+0xa32>
		i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 8002428:	4b78      	ldr	r3, [pc, #480]	; (800260c <calc_measurements+0xbfc>)
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b77      	ldr	r3, [pc, #476]	; (8002610 <calc_measurements+0xc00>)
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	4b76      	ldr	r3, [pc, #472]	; (8002614 <calc_measurements+0xc04>)
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e0c7      	b.n	80025d2 <calc_measurements+0xbc2>
	} else {
		i_measured[I1] = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8002442:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002446:	2200      	movs	r2, #0
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
 800244a:	677a      	str	r2, [r7, #116]	; 0x74
 800244c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002450:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8002454:	f7fe fc38 	bl	8000cc8 <__aeabi_ldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe f8bc 	bl	80005dc <__aeabi_l2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	ec43 2b10 	vmov	d0, r2, r3
 800246c:	f010 fe10 	bl	8013090 <sqrt>
 8002470:	ec53 2b10 	vmov	r2, r3, d0
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb8e 	bl	8000b98 <__aeabi_d2iz>
 800247c:	4603      	mov	r3, r0
 800247e:	b21b      	sxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fc19 	bl	8002cb8 <calc_adc_raw_to_A>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	4b60      	ldr	r3, [pc, #384]	; (800260c <calc_measurements+0xbfc>)
 800248c:	edc3 7a00 	vstr	s15, [r3]
		//term_print("%s() - I1 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I1], sample_buf_meta[ADC_CH_I1].min, sample_buf_meta[ADC_CH_I1].max);
		if (i_measured[I1] >= I1_MIN) {		// Reading above min current?
 8002490:	4b5e      	ldr	r3, [pc, #376]	; (800260c <calc_measurements+0xbfc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f877 	bl	8000588 <__aeabi_f2d>
 800249a:	a357      	add	r3, pc, #348	; (adr r3, 80025f8 <calc_measurements+0xbe8>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe fb50 	bl	8000b44 <__aeabi_dcmpge>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <calc_measurements+0xbaa>
			if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80024b8:	f7fe fb4e 	bl	8000b58 <__aeabi_dcmpgt>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d013      	beq.n	80024ea <calc_measurements+0xada>
 80024c2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f84c 	bl	8000564 <__aeabi_i2d>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80024d4:	f7fe f9da 	bl	800088c <__aeabi_ddiv>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fba2 	bl	8000c28 <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80024f6:	f7fe fb2f 	bl	8000b58 <__aeabi_dcmpgt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <calc_measurements+0xb18>
 8002500:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f82d 	bl	8000564 <__aeabi_i2d>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002512:	f7fe f9bb 	bl	800088c <__aeabi_ddiv>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fb83 	bl	8000c28 <__aeabi_d2f>
 8002522:	4603      	mov	r3, r0
 8002524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I1] = v_measured * i_measured[I1];
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <calc_measurements+0xbfc>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	4b35      	ldr	r3, [pc, #212]	; (8002604 <calc_measurements+0xbf4>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <calc_measurements+0xc00>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
			if (w > 0) { w_measured[I1] = va - w;}
 800253e:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd09      	ble.n	8002560 <calc_measurements+0xb50>
 800254c:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8002550:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <calc_measurements+0xc04>)
 800255a:	edc3 7a00 	vstr	s15, [r3]
 800255e:	e003      	b.n	8002568 <calc_measurements+0xb58>
			else { w_measured[I1] = va_measured[I1];}
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <calc_measurements+0xc00>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <calc_measurements+0xc04>)
 8002566:	6013      	str	r3, [r2, #0]
			if (w_measured[I1] > va_measured[I1]) w_measured[I1] = va_measured[I1];		// W must be =< than VA
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <calc_measurements+0xc04>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <calc_measurements+0xc00>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	dd03      	ble.n	8002586 <calc_measurements+0xb76>
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <calc_measurements+0xc00>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <calc_measurements+0xc04>)
 8002584:	6013      	str	r3, [r2, #0]
			if (i_measured[I1] >= I1_MIN_PF) { pf_measured[I1] = w_measured[I1] / va_measured[I1]; }		// Calculate PF if we have sufficient current
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <calc_measurements+0xbfc>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	db0a      	blt.n	80025b0 <calc_measurements+0xba0>
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <calc_measurements+0xc04>)
 800259c:	edd3 6a00 	vldr	s13, [r3]
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <calc_measurements+0xc00>)
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <calc_measurements+0xbf8>)
 80025ac:	edc3 7a00 	vstr	s15, [r3]
			sample_buf_meta[ADC_CH_I1].measurements_valid = 1;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <calc_measurements+0xbf0>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80025b8:	e00b      	b.n	80025d2 <calc_measurements+0xbc2>
		} else {
			//term_print("%s() - I1 = %fA below minimum\r\n", __FUNCTION__, i_measured[I1]);
			i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <calc_measurements+0xbfc>)
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <calc_measurements+0xc00>)
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <calc_measurements+0xc04>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
		}
	}

	// Process I2 values
	if (sample_buf_meta[ADC_CH_I2].value_is_zero) {	// set all measured values to zero
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <calc_measurements+0xbf0>)
 80025d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01d      	beq.n	8002618 <calc_measurements+0xc08>
		i_measured[I2] = 0.0;va_measured[I2] = 0.0; w_measured[I2] = 0.0;
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <calc_measurements+0xbfc>)
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <calc_measurements+0xc00>)
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <calc_measurements+0xc04>)
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e0d8      	b.n	80027a8 <calc_measurements+0xd98>
 80025f6:	bf00      	nop
 80025f8:	33333333 	.word	0x33333333
 80025fc:	3fd33333 	.word	0x3fd33333
 8002600:	2000026c 	.word	0x2000026c
 8002604:	200003f8 	.word	0x200003f8
 8002608:	20000420 	.word	0x20000420
 800260c:	200003fc 	.word	0x200003fc
 8002610:	20000408 	.word	0x20000408
 8002614:	20000414 	.word	0x20000414
	} else {
		i_measured[I2] = calc_adc_raw_to_A (sqrt((i2_sq_acc / num_readings)));	// RMS current
 8002618:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800261c:	2200      	movs	r2, #0
 800261e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002620:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002622:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002626:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800262a:	f7fe fb4d 	bl	8000cc8 <__aeabi_ldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fd ffd1 	bl	80005dc <__aeabi_l2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	ec43 2b10 	vmov	d0, r2, r3
 8002642:	f010 fd25 	bl	8013090 <sqrt>
 8002646:	ec53 2b10 	vmov	r2, r3, d0
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe faa3 	bl	8000b98 <__aeabi_d2iz>
 8002652:	4603      	mov	r3, r0
 8002654:	b21b      	sxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fb2e 	bl	8002cb8 <calc_adc_raw_to_A>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
 8002660:	4bbb      	ldr	r3, [pc, #748]	; (8002950 <calc_measurements+0xf40>)
 8002662:	edc3 7a01 	vstr	s15, [r3, #4]
		//term_print("%s() - I2 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I2], sample_buf_meta[ADC_CH_I2].min, sample_buf_meta[ADC_CH_I2].max);
		if (i_measured[I2] >= I2_MIN) {		// Reading above min current?
 8002666:	4bba      	ldr	r3, [pc, #744]	; (8002950 <calc_measurements+0xf40>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff8c 	bl	8000588 <__aeabi_f2d>
 8002670:	a3b5      	add	r3, pc, #724	; (adr r3, 8002948 <calc_measurements+0xf38>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fe fa65 	bl	8000b44 <__aeabi_dcmpge>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8087 	beq.w	8002790 <calc_measurements+0xd80>
			if (i2_va_acc > 0) { va = i2_va_acc / num_readings; }
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800268e:	f7fe fa63 	bl	8000b58 <__aeabi_dcmpgt>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <calc_measurements+0xcb0>
 8002698:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff61 	bl	8000564 <__aeabi_i2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80026aa:	f7fe f8ef 	bl	800088c <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fab7 	bl	8000c28 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i2_w_acc > 0) { w = i2_w_acc / num_readings; }
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026cc:	f7fe fa44 	bl	8000b58 <__aeabi_dcmpgt>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d013      	beq.n	80026fe <calc_measurements+0xcee>
 80026d6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff42 	bl	8000564 <__aeabi_i2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026e8:	f7fe f8d0 	bl	800088c <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa98 	bl	8000c28 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I2] = v_measured * i_measured[I2];
 80026fe:	4b94      	ldr	r3, [pc, #592]	; (8002950 <calc_measurements+0xf40>)
 8002700:	ed93 7a01 	vldr	s14, [r3, #4]
 8002704:	4b93      	ldr	r3, [pc, #588]	; (8002954 <calc_measurements+0xf44>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270e:	4b92      	ldr	r3, [pc, #584]	; (8002958 <calc_measurements+0xf48>)
 8002710:	edc3 7a01 	vstr	s15, [r3, #4]
			if (w > 0) { w_measured[I2] = va - w;}
 8002714:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	dd09      	ble.n	8002736 <calc_measurements+0xd26>
 8002722:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8002726:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <calc_measurements+0xf4c>)
 8002730:	edc3 7a01 	vstr	s15, [r3, #4]
 8002734:	e003      	b.n	800273e <calc_measurements+0xd2e>
			else { w_measured[I2] = va_measured[I2];}
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <calc_measurements+0xf48>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a88      	ldr	r2, [pc, #544]	; (800295c <calc_measurements+0xf4c>)
 800273c:	6053      	str	r3, [r2, #4]
			if (w_measured[I2] > va_measured[I2]) w_measured[I2] = va_measured[I2];		// W must be =< than VA
 800273e:	4b87      	ldr	r3, [pc, #540]	; (800295c <calc_measurements+0xf4c>)
 8002740:	ed93 7a01 	vldr	s14, [r3, #4]
 8002744:	4b84      	ldr	r3, [pc, #528]	; (8002958 <calc_measurements+0xf48>)
 8002746:	edd3 7a01 	vldr	s15, [r3, #4]
 800274a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	dd03      	ble.n	800275c <calc_measurements+0xd4c>
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <calc_measurements+0xf48>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a80      	ldr	r2, [pc, #512]	; (800295c <calc_measurements+0xf4c>)
 800275a:	6053      	str	r3, [r2, #4]
			if (i_measured[I2] >= I2_MIN_PF) {pf_measured[I2] = w_measured[I2] / va_measured[I2];}	// Calculate PF if we have sufficient current
 800275c:	4b7c      	ldr	r3, [pc, #496]	; (8002950 <calc_measurements+0xf40>)
 800275e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	db0a      	blt.n	8002786 <calc_measurements+0xd76>
 8002770:	4b7a      	ldr	r3, [pc, #488]	; (800295c <calc_measurements+0xf4c>)
 8002772:	edd3 6a01 	vldr	s13, [r3, #4]
 8002776:	4b78      	ldr	r3, [pc, #480]	; (8002958 <calc_measurements+0xf48>)
 8002778:	ed93 7a01 	vldr	s14, [r3, #4]
 800277c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002780:	4b77      	ldr	r3, [pc, #476]	; (8002960 <calc_measurements+0xf50>)
 8002782:	edc3 7a01 	vstr	s15, [r3, #4]
			sample_buf_meta[ADC_CH_I2].measurements_valid = 1;
 8002786:	4b77      	ldr	r3, [pc, #476]	; (8002964 <calc_measurements+0xf54>)
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800278e:	e00b      	b.n	80027a8 <calc_measurements+0xd98>
		} else {
			//term_print("%s() - I2 = %fA below minimum\r\n", __FUNCTION__, i_measured[I2]);
			i_measured[I2] = 0.0;va_measured[I2] = 0.0; w_measured[I2] = 0.0;
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <calc_measurements+0xf40>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <calc_measurements+0xf48>)
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	4b6e      	ldr	r3, [pc, #440]	; (800295c <calc_measurements+0xf4c>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
		}
	}

	// Process I3 values
	if (sample_buf_meta[ADC_CH_I3].value_is_zero) {	// set all measured values to zero
 80027a8:	4b6e      	ldr	r3, [pc, #440]	; (8002964 <calc_measurements+0xf54>)
 80027aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <calc_measurements+0xdbc>
		i_measured[I3] = 0.0; va_measured[I3] = 0.0; w_measured[I3] = 0.0;
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <calc_measurements+0xf40>)
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <calc_measurements+0xf48>)
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	4b66      	ldr	r3, [pc, #408]	; (800295c <calc_measurements+0xf4c>)
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e0d9      	b.n	8002980 <calc_measurements+0xf70>
	} else {
		i_measured[I3] = calc_adc_raw_to_A (sqrt((i3_sq_acc / num_readings)));	// RMS current
 80027cc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80027d0:	2200      	movs	r2, #0
 80027d2:	663b      	str	r3, [r7, #96]	; 0x60
 80027d4:	667a      	str	r2, [r7, #100]	; 0x64
 80027d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027da:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027de:	f7fe fa73 	bl	8000cc8 <__aeabi_ldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fd fef7 	bl	80005dc <__aeabi_l2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	ec43 2b10 	vmov	d0, r2, r3
 80027f6:	f010 fc4b 	bl	8013090 <sqrt>
 80027fa:	ec53 2b10 	vmov	r2, r3, d0
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7fe f9c9 	bl	8000b98 <__aeabi_d2iz>
 8002806:	4603      	mov	r3, r0
 8002808:	b21b      	sxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fa54 	bl	8002cb8 <calc_adc_raw_to_A>
 8002810:	eef0 7a40 	vmov.f32	s15, s0
 8002814:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <calc_measurements+0xf40>)
 8002816:	edc3 7a02 	vstr	s15, [r3, #8]
		//term_print("%s() - I3 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I3], sample_buf_meta[ADC_CH_I3].min, sample_buf_meta[ADC_CH_I3].max);
		if (i_measured[I3] >= I3_MIN) {		// Reading above min current?
 800281a:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <calc_measurements+0xf40>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd feb2 	bl	8000588 <__aeabi_f2d>
 8002824:	a348      	add	r3, pc, #288	; (adr r3, 8002948 <calc_measurements+0xf38>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fe f98b 	bl	8000b44 <__aeabi_dcmpge>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8099 	beq.w	8002968 <calc_measurements+0xf58>
			if (i3_va_acc > 0) { va = i3_va_acc / num_readings; }
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002842:	f7fe f989 	bl	8000b58 <__aeabi_dcmpgt>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <calc_measurements+0xe64>
 800284c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe87 	bl	8000564 <__aeabi_i2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800285e:	f7fe f815 	bl	800088c <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f9dd 	bl	8000c28 <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i3_w_acc > 0) { w = i3_w_acc / num_readings; }
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002880:	f7fe f96a 	bl	8000b58 <__aeabi_dcmpgt>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d013      	beq.n	80028b2 <calc_measurements+0xea2>
 800288a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe68 	bl	8000564 <__aeabi_i2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800289c:	f7fd fff6 	bl	800088c <__aeabi_ddiv>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f9be 	bl	8000c28 <__aeabi_d2f>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I3] = v_measured * i_measured[I3];
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <calc_measurements+0xf40>)
 80028b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <calc_measurements+0xf44>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <calc_measurements+0xf48>)
 80028c4:	edc3 7a02 	vstr	s15, [r3, #8]
			if (w > 0) { w_measured[I3] = va - w; }
 80028c8:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	dd09      	ble.n	80028ea <calc_measurements+0xeda>
 80028d6:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80028da:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <calc_measurements+0xf4c>)
 80028e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80028e8:	e003      	b.n	80028f2 <calc_measurements+0xee2>
			else { w_measured[I3] = va_measured[I3]; }
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <calc_measurements+0xf48>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <calc_measurements+0xf4c>)
 80028f0:	6093      	str	r3, [r2, #8]
			if (w_measured[I3] > va_measured[I3]) w_measured[I3] = va_measured[I3];		// W must be =< than VA
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <calc_measurements+0xf4c>)
 80028f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <calc_measurements+0xf48>)
 80028fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	dd03      	ble.n	8002910 <calc_measurements+0xf00>
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <calc_measurements+0xf48>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a13      	ldr	r2, [pc, #76]	; (800295c <calc_measurements+0xf4c>)
 800290e:	6093      	str	r3, [r2, #8]
			if (i_measured[I3] >= I3_MIN_PF) { pf_measured[I3] = w_measured[I3] / va_measured[I3]; }	// Calculate PF if we have sufficient current
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <calc_measurements+0xf40>)
 8002912:	edd3 7a02 	vldr	s15, [r3, #8]
 8002916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800291a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	db0a      	blt.n	800293a <calc_measurements+0xf2a>
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <calc_measurements+0xf4c>)
 8002926:	edd3 6a02 	vldr	s13, [r3, #8]
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <calc_measurements+0xf48>)
 800292c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <calc_measurements+0xf50>)
 8002936:	edc3 7a02 	vstr	s15, [r3, #8]
			sample_buf_meta[ADC_CH_I3].measurements_valid = 1;
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <calc_measurements+0xf54>)
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2020 	strb.w	r2, [r3, #32]
 8002942:	e01d      	b.n	8002980 <calc_measurements+0xf70>
 8002944:	f3af 8000 	nop.w
 8002948:	33333333 	.word	0x33333333
 800294c:	3fd33333 	.word	0x3fd33333
 8002950:	200003fc 	.word	0x200003fc
 8002954:	200003f8 	.word	0x200003f8
 8002958:	20000408 	.word	0x20000408
 800295c:	20000414 	.word	0x20000414
 8002960:	20000420 	.word	0x20000420
 8002964:	2000026c 	.word	0x2000026c
		} else {
			//term_print("%s() - I3 = %fA below minimum\r\n", __FUNCTION__, i_measured[I3]);
			i_measured[I3] = 0.0; va_measured[I3] = 0.0; w_measured[I3] = 0.0;
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <calc_measurements+0x101c>)
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <calc_measurements+0x1020>)
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <calc_measurements+0x1024>)
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
		}
	}

	// add measurements to filter
	calc_filter_add_v(v_measured);
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <calc_measurements+0x1028>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	f7fe feb3 	bl	80016f4 <calc_filter_add_v>
	calc_filter_add_i(I1, i_measured[I1], va_measured[I1], w_measured[I1], pf_measured[I1]);
 800298e:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <calc_measurements+0x101c>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <calc_measurements+0x1020>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <calc_measurements+0x1024>)
 800299c:	edd3 6a00 	vldr	s13, [r3]
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <calc_measurements+0x102c>)
 80029a2:	ed93 6a00 	vldr	s12, [r3]
 80029a6:	eef0 1a46 	vmov.f32	s3, s12
 80029aa:	eeb0 1a66 	vmov.f32	s2, s13
 80029ae:	eef0 0a47 	vmov.f32	s1, s14
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fee2 	bl	8001780 <calc_filter_add_i>
	calc_filter_add_i(I2, i_measured[I2], va_measured[I2], w_measured[I2], pf_measured[I2]);
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <calc_measurements+0x101c>)
 80029be:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <calc_measurements+0x1020>)
 80029c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <calc_measurements+0x1024>)
 80029ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <calc_measurements+0x102c>)
 80029d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80029d4:	eef0 1a46 	vmov.f32	s3, s12
 80029d8:	eeb0 1a66 	vmov.f32	s2, s13
 80029dc:	eef0 0a47 	vmov.f32	s1, s14
 80029e0:	eeb0 0a67 	vmov.f32	s0, s15
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe fecb 	bl	8001780 <calc_filter_add_i>
	calc_filter_add_i(I3, i_measured[I3], va_measured[I3], w_measured[I3], pf_measured[I3]);
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <calc_measurements+0x101c>)
 80029ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <calc_measurements+0x1020>)
 80029f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <calc_measurements+0x1024>)
 80029f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <calc_measurements+0x102c>)
 80029fe:	ed93 6a02 	vldr	s12, [r3, #8]
 8002a02:	eef0 1a46 	vmov.f32	s3, s12
 8002a06:	eeb0 1a66 	vmov.f32	s2, s13
 8002a0a:	eef0 0a47 	vmov.f32	s1, s14
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	2002      	movs	r0, #2
 8002a14:	f7fe feb4 	bl	8001780 <calc_filter_add_i>
	//calc_assign_meter_values(display_channel);

	return 0;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8002a20:	46bd      	mov	sp, r7
 8002a22:	ecbd 8b02 	vpop	{d8}
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200003fc 	.word	0x200003fc
 8002a30:	20000408 	.word	0x20000408
 8002a34:	20000414 	.word	0x20000414
 8002a38:	200003f8 	.word	0x200003f8
 8002a3c:	20000420 	.word	0x20000420

08002a40 <calc_update_energy_totals>:

/*
 * @brief    Update the energy totals with the latest readings. Must be called every 100ms.
 */
void calc_update_energy_totals() {
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
	double divisor = (double)36000.0;		// 3600000 / 100 to convert W to Wh per 100ms
 8002a46:	a36c      	add	r3, pc, #432	; (adr r3, 8002bf8 <calc_update_energy_totals+0x1b8>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	e9c7 2300 	strd	r2, r3, [r7]

	for (int i=0; i<NUM_I_SENSORS; i++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e042      	b.n	8002adc <calc_update_energy_totals+0x9c>
		accumulator_vah[i] += (double)va_filtered[i] / divisor;
 8002a56:	4a60      	ldr	r2, [pc, #384]	; (8002bd8 <calc_update_energy_totals+0x198>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a62:	4a5e      	ldr	r2, [pc, #376]	; (8002bdc <calc_update_energy_totals+0x19c>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd8b 	bl	8000588 <__aeabi_f2d>
 8002a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a76:	f7fd ff09 	bl	800088c <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fd fc23 	bl	80002cc <__adddf3>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4853      	ldr	r0, [pc, #332]	; (8002bd8 <calc_update_energy_totals+0x198>)
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	00c9      	lsls	r1, r1, #3
 8002a90:	4401      	add	r1, r0
 8002a92:	e9c1 2300 	strd	r2, r3, [r1]
		accumulator_wh[i] += (double)w_filtered[i] / divisor;
 8002a96:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <calc_update_energy_totals+0x1a0>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002aa2:	4a50      	ldr	r2, [pc, #320]	; (8002be4 <calc_update_energy_totals+0x1a4>)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd6b 	bl	8000588 <__aeabi_f2d>
 8002ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab6:	f7fd fee9 	bl	800088c <__aeabi_ddiv>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fc03 	bl	80002cc <__adddf3>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4845      	ldr	r0, [pc, #276]	; (8002be0 <calc_update_energy_totals+0x1a0>)
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	00c9      	lsls	r1, r1, #3
 8002ad0:	4401      	add	r1, r0
 8002ad2:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i=0; i<NUM_I_SENSORS; i++) {
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	ddb9      	ble.n	8002a56 <calc_update_energy_totals+0x16>
	}
	accumulator_count++;
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <calc_update_energy_totals+0x1a8>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <calc_update_energy_totals+0x1a8>)
 8002aec:	701a      	strb	r2, [r3, #0]
	if (accumulator_count >= 10) {		// once a second
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <calc_update_energy_totals+0x1a8>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	d969      	bls.n	8002bca <calc_update_energy_totals+0x18a>
		for (int i=0; i<NUM_I_SENSORS; i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	e060      	b.n	8002bbe <calc_update_energy_totals+0x17e>
			total_vah[i] += (uint32_t) round(accumulator_vah[i] * 10.0);
 8002afc:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <calc_update_energy_totals+0x1ac>)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002b04:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <calc_update_energy_totals+0x198>)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <calc_update_energy_totals+0x1b0>)
 8002b16:	f7fd fd8f 	bl	8000638 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ec43 2b17 	vmov	d7, r2, r3
 8002b22:	eeb0 0a47 	vmov.f32	s0, s14
 8002b26:	eef0 0a67 	vmov.f32	s1, s15
 8002b2a:	f010 fbc1 	bl	80132b0 <round>
 8002b2e:	ec53 2b10 	vmov	r2, r3, d0
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fe f857 	bl	8000be8 <__aeabi_d2uiz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	18e2      	adds	r2, r4, r3
 8002b3e:	492b      	ldr	r1, [pc, #172]	; (8002bec <calc_update_energy_totals+0x1ac>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			total_wh[i] += (uint32_t) round(accumulator_wh[i] * 10.0);
 8002b46:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <calc_update_energy_totals+0x1b4>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002b4e:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <calc_update_energy_totals+0x1a0>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <calc_update_energy_totals+0x1b0>)
 8002b60:	f7fd fd6a 	bl	8000638 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	ec43 2b17 	vmov	d7, r2, r3
 8002b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b70:	eef0 0a67 	vmov.f32	s1, s15
 8002b74:	f010 fb9c 	bl	80132b0 <round>
 8002b78:	ec53 2b10 	vmov	r2, r3, d0
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fe f832 	bl	8000be8 <__aeabi_d2uiz>
 8002b84:	4603      	mov	r3, r0
 8002b86:	18e2      	adds	r2, r4, r3
 8002b88:	491a      	ldr	r1, [pc, #104]	; (8002bf4 <calc_update_energy_totals+0x1b4>)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			accumulator_vah[i] = 0.0;
 8002b90:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <calc_update_energy_totals+0x198>)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	18d1      	adds	r1, r2, r3
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
			accumulator_wh[i] = 0.0;
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <calc_update_energy_totals+0x1a0>)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	18d1      	adds	r1, r2, r3
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i=0; i<NUM_I_SENSORS; i++) {
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	dd9b      	ble.n	8002afc <calc_update_energy_totals+0xbc>

		}
		accumulator_count = 0;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <calc_update_energy_totals+0x1a8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
	}

}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	20000430 	.word	0x20000430
 8002bdc:	200003d4 	.word	0x200003d4
 8002be0:	20000448 	.word	0x20000448
 8002be4:	200003e0 	.word	0x200003e0
 8002be8:	20000460 	.word	0x20000460
 8002bec:	2000821c 	.word	0x2000821c
 8002bf0:	40240000 	.word	0x40240000
 8002bf4:	20008228 	.word	0x20008228
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	40e19400 	.word	0x40e19400

08002c00 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8002c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f816 	bl	8002c40 <calc_adc_raw_to_mv_float>
 8002c14:	ee10 3a10 	vmov	r3, s0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fcb5 	bl	8000588 <__aeabi_f2d>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	ec43 2b10 	vmov	d0, r2, r3
 8002c26:	f010 fb43 	bl	80132b0 <round>
 8002c2a:	ec53 2b10 	vmov	r2, r3, d0
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fd ffb1 	bl	8000b98 <__aeabi_d2iz>
 8002c36:	4603      	mov	r3, r0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8002c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c56:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002c74 <calc_adc_raw_to_mv_float+0x34>
 8002c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002c78 <calc_adc_raw_to_mv_float+0x38>
 8002c62:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c66:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	457ff000 	.word	0x457ff000
 8002c78:	454e4000 	.word	0x454e4000

08002c7c <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c92:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002cb0 <calc_adc_raw_to_V+0x34>
 8002c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c9a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002cb4 <calc_adc_raw_to_V+0x38>
 8002c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	457ff000 	.word	0x457ff000
 8002cb4:	44434000 	.word	0x44434000

08002cb8 <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cce:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002cec <calc_adc_raw_to_A+0x34>
 8002cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002cf0 <calc_adc_raw_to_A+0x38>
 8002cda:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002cde:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	457ff000 	.word	0x457ff000
 8002cf0:	43620000 	.word	0x43620000

08002cf4 <cmd_error>:
extern uint32_t total_vah[];
extern uint32_t total_wh[];

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4803      	ldr	r0, [pc, #12]	; (8002d0c <cmd_error+0x18>)
 8002d00:	f003 ff32 	bl	8006b68 <term_print>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	080133e0 	.word	0x080133e0

08002d10 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b30      	cmp	r3, #48	; 0x30
 8002d20:	d002      	beq.n	8002d28 <cmd_t+0x18>
 8002d22:	2b31      	cmp	r3, #49	; 0x31
 8002d24:	d005      	beq.n	8002d32 <cmd_t+0x22>
 8002d26:	e009      	b.n	8002d3c <cmd_t+0x2c>
	case '0':
		tft_display = 1;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <cmd_t+0x3c>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
		return 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e006      	b.n	8002d40 <cmd_t+0x30>
		break;
	case '1':
		tft_display = 2;
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <cmd_t+0x3c>)
 8002d34:	2202      	movs	r2, #2
 8002d36:	701a      	strb	r2, [r3, #0]
		return 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e001      	b.n	8002d40 <cmd_t+0x30>
		break;
	}
	return -1;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	20002601 	.word	0x20002601

08002d50 <cmd_z>:


// adjust energy integration timer period
int cmd_z(uint8_t* cmd_str) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f107 0208 	add.w	r2, r7, #8
 8002d60:	4909      	ldr	r1, [pc, #36]	; (8002d88 <cmd_z+0x38>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f00d f848 	bl	800fdf8 <siscanf>
 8002d68:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d002      	beq.n	8002d76 <cmd_z+0x26>
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d74:	e004      	b.n	8002d80 <cmd_z+0x30>
	new_energy_time_period = value;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <cmd_z+0x3c>)
 8002d7c:	801a      	strh	r2, [r3, #0]
	return 0;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	080133f8 	.word	0x080133f8
 8002d8c:	20002606 	.word	0x20002606

08002d90 <cmd_p>:

// adjust ADC timer period
int cmd_p(uint8_t* cmd_str) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f107 0208 	add.w	r2, r7, #8
 8002da0:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <cmd_p+0x38>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00d f828 	bl	800fdf8 <siscanf>
 8002da8:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <cmd_p+0x26>
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db4:	e004      	b.n	8002dc0 <cmd_p+0x30>
	new_time_period = value;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <cmd_p+0x3c>)
 8002dbc:	801a      	strh	r2, [r3, #0]
	return 0;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	080133f8 	.word	0x080133f8
 8002dcc:	20002604 	.word	0x20002604

08002dd0 <cmd_a>:


int cmd_a(uint8_t* cmd_str) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f107 0208 	add.w	r2, r7, #8
 8002de0:	4909      	ldr	r1, [pc, #36]	; (8002e08 <cmd_a+0x38>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f00d f808 	bl	800fdf8 <siscanf>
 8002de8:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <cmd_a+0x26>
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df4:	e004      	b.n	8002e00 <cmd_a+0x30>
	modbus_addr_change = value;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <cmd_a+0x3c>)
 8002dfc:	701a      	strb	r2, [r3, #0]
	return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	080133f8 	.word	0x080133f8
 8002e0c:	20002603 	.word	0x20002603

08002e10 <cmd_led>:

int cmd_led(int cmd) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	dd05      	ble.n	8002e2a <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2120      	movs	r1, #32
 8002e22:	4807      	ldr	r0, [pc, #28]	; (8002e40 <cmd_led+0x30>)
 8002e24:	f008 f928 	bl	800b078 <HAL_GPIO_WritePin>
 8002e28:	e004      	b.n	8002e34 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	4804      	ldr	r0, [pc, #16]	; (8002e40 <cmd_led+0x30>)
 8002e30:	f008 f922 	bl	800b078 <HAL_GPIO_WritePin>
	}
	return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40020000 	.word	0x40020000

08002e44 <cmd_g>:

int cmd_g() {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_I_SENSORS; i++) {
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	e014      	b.n	8002e7a <cmd_g+0x36>
		term_print("VAh[%d] = %u [1/10 VAh]\r\n", i, total_vah[i]);
 8002e50:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <cmd_g+0x48>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <cmd_g+0x4c>)
 8002e5e:	f003 fe83 	bl	8006b68 <term_print>
		term_print(" Wh[%d] = %u [1/10 Wh]\r\n", i, total_wh[i]);
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <cmd_g+0x50>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	480a      	ldr	r0, [pc, #40]	; (8002e98 <cmd_g+0x54>)
 8002e70:	f003 fe7a 	bl	8006b68 <term_print>
	for (int i=0; i<NUM_I_SENSORS; i++) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	dde7      	ble.n	8002e50 <cmd_g+0xc>
	}
	return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000821c 	.word	0x2000821c
 8002e90:	080133fc 	.word	0x080133fc
 8002e94:	20008228 	.word	0x20008228
 8002e98:	08013418 	.word	0x08013418

08002e9c <cmd_help>:

int cmd_help(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002ea0:	4816      	ldr	r0, [pc, #88]	; (8002efc <cmd_help+0x60>)
 8002ea2:	f003 fe61 	bl	8006b68 <term_print>
	term_print("A[1..255]: Set new Modbus Address (EEPROM)\r\n");
 8002ea6:	4816      	ldr	r0, [pc, #88]	; (8002f00 <cmd_help+0x64>)
 8002ea8:	f003 fe5e 	bl	8006b68 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002eac:	4815      	ldr	r0, [pc, #84]	; (8002f04 <cmd_help+0x68>)
 8002eae:	f003 fe5b 	bl	8006b68 <term_print>
	term_print("E: Toggle ESP mode\r\n");
 8002eb2:	4815      	ldr	r0, [pc, #84]	; (8002f08 <cmd_help+0x6c>)
 8002eb4:	f003 fe58 	bl	8006b68 <term_print>
	term_print("G: Show Energy readings\r\n");
 8002eb8:	4814      	ldr	r0, [pc, #80]	; (8002f0c <cmd_help+0x70>)
 8002eba:	f003 fe55 	bl	8006b68 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002ebe:	4814      	ldr	r0, [pc, #80]	; (8002f10 <cmd_help+0x74>)
 8002ec0:	f003 fe52 	bl	8006b68 <term_print>
	term_print("M show measurements using all channels\r\n");
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <cmd_help+0x78>)
 8002ec6:	f003 fe4f 	bl	8006b68 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002eca:	4813      	ldr	r0, [pc, #76]	; (8002f18 <cmd_help+0x7c>)
 8002ecc:	f003 fe4c 	bl	8006b68 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time (EEPROM)\r\n");
 8002ed0:	4812      	ldr	r0, [pc, #72]	; (8002f1c <cmd_help+0x80>)
 8002ed2:	f003 fe49 	bl	8006b68 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002ed6:	4812      	ldr	r0, [pc, #72]	; (8002f20 <cmd_help+0x84>)
 8002ed8:	f003 fe46 	bl	8006b68 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002edc:	4811      	ldr	r0, [pc, #68]	; (8002f24 <cmd_help+0x88>)
 8002ede:	f003 fe43 	bl	8006b68 <term_print>
	term_print("T[0|1]: TFT display OFF / ON\r\n");
 8002ee2:	4811      	ldr	r0, [pc, #68]	; (8002f28 <cmd_help+0x8c>)
 8002ee4:	f003 fe40 	bl	8006b68 <term_print>
	term_print("Y: Reset all energy totals (VA, W) to zero\r\n");
 8002ee8:	4810      	ldr	r0, [pc, #64]	; (8002f2c <cmd_help+0x90>)
 8002eea:	f003 fe3d 	bl	8006b68 <term_print>
	term_print("Z[500..1500]: adjust energy integration timer (200ms) [EEPROM]\r\n");
 8002eee:	4810      	ldr	r0, [pc, #64]	; (8002f30 <cmd_help+0x94>)
 8002ef0:	f003 fe3a 	bl	8006b68 <term_print>

	return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	08013434 	.word	0x08013434
 8002f00:	08013448 	.word	0x08013448
 8002f04:	08013478 	.word	0x08013478
 8002f08:	080134b0 	.word	0x080134b0
 8002f0c:	080134c8 	.word	0x080134c8
 8002f10:	080134e4 	.word	0x080134e4
 8002f14:	08013500 	.word	0x08013500
 8002f18:	0801352c 	.word	0x0801352c
 8002f1c:	08013574 	.word	0x08013574
 8002f20:	080135b4 	.word	0x080135b4
 8002f24:	080135d0 	.word	0x080135d0
 8002f28:	08013610 	.word	0x08013610
 8002f2c:	08013630 	.word	0x08013630
 8002f30:	08013660 	.word	0x08013660

08002f34 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f40:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3b3f      	subs	r3, #63	; 0x3f
 8002f48:	2b3b      	cmp	r3, #59	; 0x3b
 8002f4a:	f200 80e3 	bhi.w	8003114 <cmd_process+0x1e0>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <cmd_process+0x20>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	080030fb 	.word	0x080030fb
 8002f58:	08003115 	.word	0x08003115
 8002f5c:	08003045 	.word	0x08003045
 8002f60:	08003115 	.word	0x08003115
 8002f64:	0800304f 	.word	0x0800304f
 8002f68:	08003115 	.word	0x08003115
 8002f6c:	08003065 	.word	0x08003065
 8002f70:	08003115 	.word	0x08003115
 8002f74:	08003083 	.word	0x08003083
 8002f78:	080030fb 	.word	0x080030fb
 8002f7c:	08003115 	.word	0x08003115
 8002f80:	08003115 	.word	0x08003115
 8002f84:	08003115 	.word	0x08003115
 8002f88:	0800308b 	.word	0x0800308b
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	08003115 	.word	0x08003115
 8002f94:	08003115 	.word	0x08003115
 8002f98:	080030c5 	.word	0x080030c5
 8002f9c:	08003115 	.word	0x08003115
 8002fa0:	080030cf 	.word	0x080030cf
 8002fa4:	080030db 	.word	0x080030db
 8002fa8:	080030f1 	.word	0x080030f1
 8002fac:	08003115 	.word	0x08003115
 8002fb0:	08003115 	.word	0x08003115
 8002fb4:	08003115 	.word	0x08003115
 8002fb8:	08003115 	.word	0x08003115
 8002fbc:	08003101 	.word	0x08003101
 8002fc0:	0800310b 	.word	0x0800310b
 8002fc4:	08003115 	.word	0x08003115
 8002fc8:	08003115 	.word	0x08003115
 8002fcc:	08003115 	.word	0x08003115
 8002fd0:	08003115 	.word	0x08003115
 8002fd4:	08003115 	.word	0x08003115
 8002fd8:	08003115 	.word	0x08003115
 8002fdc:	08003045 	.word	0x08003045
 8002fe0:	08003115 	.word	0x08003115
 8002fe4:	0800304f 	.word	0x0800304f
 8002fe8:	08003115 	.word	0x08003115
 8002fec:	08003065 	.word	0x08003065
 8002ff0:	08003115 	.word	0x08003115
 8002ff4:	08003083 	.word	0x08003083
 8002ff8:	080030fb 	.word	0x080030fb
 8002ffc:	08003115 	.word	0x08003115
 8003000:	08003115 	.word	0x08003115
 8003004:	08003115 	.word	0x08003115
 8003008:	0800308b 	.word	0x0800308b
 800300c:	0800309d 	.word	0x0800309d
 8003010:	08003115 	.word	0x08003115
 8003014:	08003115 	.word	0x08003115
 8003018:	080030c5 	.word	0x080030c5
 800301c:	08003115 	.word	0x08003115
 8003020:	080030cf 	.word	0x080030cf
 8003024:	080030db 	.word	0x080030db
 8003028:	080030f1 	.word	0x080030f1
 800302c:	08003115 	.word	0x08003115
 8003030:	08003115 	.word	0x08003115
 8003034:	08003115 	.word	0x08003115
 8003038:	08003115 	.word	0x08003115
 800303c:	08003101 	.word	0x08003101
 8003040:	0800310b 	.word	0x0800310b
	case 'A':
	case 'a':
		retval = cmd_a(cmd_str);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fec3 	bl	8002dd0 <cmd_a>
 800304a:	60f8      	str	r0, [r7, #12]
		break;
 800304c:	e062      	b.n	8003114 <cmd_process+0x1e0>
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3301      	adds	r3, #1
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3b31      	subs	r3, #49	; 0x31
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4618      	mov	r0, r3
 800305a:	f003 ffdb 	bl	8007014 <term_csv_buffer>
		retval = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
		break;
 8003062:	e057      	b.n	8003114 <cmd_process+0x1e0>
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <cmd_process+0x1ec>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <cmd_process+0x140>
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <cmd_process+0x1ec>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 8003072:	e04f      	b.n	8003114 <cmd_process+0x1e0>
			esp_mode = 1;
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <cmd_process+0x1ec>)
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 800307a:	482a      	ldr	r0, [pc, #168]	; (8003124 <cmd_process+0x1f0>)
 800307c:	f003 fd74 	bl	8006b68 <term_print>
		break;
 8003080:	e048      	b.n	8003114 <cmd_process+0x1e0>
	case 'G':
	case 'g':
		retval = cmd_g();
 8003082:	f7ff fedf 	bl	8002e44 <cmd_g>
 8003086:	60f8      	str	r0, [r7, #12]
		break;
 8003088:	e044      	b.n	8003114 <cmd_process+0x1e0>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3301      	adds	r3, #1
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	3b2f      	subs	r3, #47	; 0x2f
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff febc 	bl	8002e10 <cmd_led>
 8003098:	60f8      	str	r0, [r7, #12]
		break;
 800309a:	e03b      	b.n	8003114 <cmd_process+0x1e0>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd f907 	bl	80002b0 <strlen>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d908      	bls.n	80030ba <cmd_process+0x186>
		    term_show_channel(cmd_str[1] - 0x31);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3301      	adds	r3, #1
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	3b31      	subs	r3, #49	; 0x31
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 feee 	bl	8006e94 <term_show_channel>
 80030b8:	e001      	b.n	80030be <cmd_process+0x18a>
		} else {
			term_show_measurements();
 80030ba:	f003 fe09 	bl	8006cd0 <term_show_measurements>
		}
		retval = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
		break;
 80030c2:	e027      	b.n	8003114 <cmd_process+0x1e0>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fe63 	bl	8002d90 <cmd_p>
 80030ca:	60f8      	str	r0, [r7, #12]
		break;
 80030cc:	e022      	b.n	8003114 <cmd_process+0x1e0>
	case 'R':
	case 'r':
		adc_restart = 1;
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <cmd_process+0x1f4>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
		break;
 80030d8:	e01c      	b.n	8003114 <cmd_process+0x1e0>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3301      	adds	r3, #1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3b31      	subs	r3, #49	; 0x31
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f003 fd9b 	bl	8006c20 <term_show_buffer>
		retval = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
		break;
 80030ee:	e011      	b.n	8003114 <cmd_process+0x1e0>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fe0d 	bl	8002d10 <cmd_t>
 80030f6:	60f8      	str	r0, [r7, #12]
		break;
 80030f8:	e00c      	b.n	8003114 <cmd_process+0x1e0>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80030fa:	f7ff fecf 	bl	8002e9c <cmd_help>
 80030fe:	60f8      	str	r0, [r7, #12]
	case 'Y':
	case 'y':
		retval = energy_totals_init(1);
 8003100:	2001      	movs	r0, #1
 8003102:	f001 fef9 	bl	8004ef8 <energy_totals_init>
 8003106:	60f8      	str	r0, [r7, #12]
		break;
 8003108:	e004      	b.n	8003114 <cmd_process+0x1e0>
	case 'Z':
	case 'z':
		retval = cmd_z(cmd_str);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fe20 	bl	8002d50 <cmd_z>
 8003110:	60f8      	str	r0, [r7, #12]
		break;
 8003112:	bf00      	nop

	}
	return retval;
 8003114:	68fb      	ldr	r3, [r7, #12]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20002602 	.word	0x20002602
 8003124:	080136a4 	.word	0x080136a4
 8003128:	20002600 	.word	0x20002600

0800312c <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fd f8bb 	bl	80002b0 <strlen>
 800313a:	4603      	mov	r3, r0
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <CMD_Handler+0x3c>)
 8003140:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <CMD_Handler+0x3c>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fdd2 	bl	8002cf4 <cmd_error>
		return -1;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003154:	e003      	b.n	800315e <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff feec 	bl	8002f34 <cmd_process>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000461 	.word	0x20000461

0800316c <display_init>:
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;

void display_meter_mask(uint8_t clear);

void display_init() {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 8003170:	2302      	movs	r3, #2
 8003172:	4618      	mov	r0, r3
 8003174:	f004 fcfe 	bl	8007b74 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 8003178:	2302      	movs	r3, #2
 800317a:	2b01      	cmp	r3, #1
 800317c:	d002      	beq.n	8003184 <display_init+0x18>
 800317e:	2302      	movs	r3, #2
 8003180:	2b03      	cmp	r3, #3
 8003182:	d107      	bne.n	8003194 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <display_init+0x3c>)
 8003186:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800318a:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <display_init+0x40>)
 800318e:	22f0      	movs	r2, #240	; 0xf0
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	e007      	b.n	80031a4 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <display_init+0x40>)
 8003196:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800319a:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <display_init+0x3c>)
 800319e:	22f0      	movs	r2, #240	; 0xf0
 80031a0:	801a      	strh	r2, [r3, #0]
	}
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200020d2 	.word	0x200020d2
 80031ac:	200020d4 	.word	0x200020d4

080031b0 <display_splash_screen>:

void display_splash_screen() {
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 80031b6:	2000      	movs	r0, #0
 80031b8:	f004 ff32 	bl	8008020 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 80031bc:	2302      	movs	r3, #2
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	2300      	movs	r3, #0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4b33      	ldr	r3, [pc, #204]	; (8003294 <display_splash_screen+0xe4>)
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <display_splash_screen+0xe8>)
 80031c8:	2120      	movs	r1, #32
 80031ca:	4834      	ldr	r0, [pc, #208]	; (800329c <display_splash_screen+0xec>)
 80031cc:	f00c fdb4 	bl	800fd38 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <display_splash_screen+0xf0>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	461c      	mov	r4, r3
 80031d6:	4831      	ldr	r0, [pc, #196]	; (800329c <display_splash_screen+0xec>)
 80031d8:	f7fd f86a 	bl	80002b0 <strlen>
 80031dc:	4603      	mov	r3, r0
 80031de:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <display_splash_screen+0xf4>)
 80031e0:	8892      	ldrh	r2, [r2, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	1ae3      	subs	r3, r4, r3
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	b29c      	uxth	r4, r3
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <display_splash_screen+0xf8>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <display_splash_screen+0xf4>)
 80031f4:	88db      	ldrh	r3, [r3, #6]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	0fda      	lsrs	r2, r3, #31
 80031fa:	4413      	add	r3, r2
 80031fc:	105b      	asrs	r3, r3, #1
 80031fe:	b29d      	uxth	r5, r3
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <display_splash_screen+0xf4>)
 8003202:	2200      	movs	r2, #0
 8003204:	9204      	str	r2, [sp, #16]
 8003206:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800320a:	9203      	str	r2, [sp, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	9202      	str	r2, [sp, #8]
 8003210:	466e      	mov	r6, sp
 8003212:	1d1a      	adds	r2, r3, #4
 8003214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003218:	e886 0003 	stmia.w	r6, {r0, r1}
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <display_splash_screen+0xec>)
 8003220:	4629      	mov	r1, r5
 8003222:	4620      	mov	r0, r4
 8003224:	f005 fe6e 	bl	8008f04 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <display_splash_screen+0xf0>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	461c      	mov	r4, r3
 800322e:	481f      	ldr	r0, [pc, #124]	; (80032ac <display_splash_screen+0xfc>)
 8003230:	f7fd f83e 	bl	80002b0 <strlen>
 8003234:	4603      	mov	r3, r0
 8003236:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <display_splash_screen+0x100>)
 8003238:	8892      	ldrh	r2, [r2, #4]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	1ae3      	subs	r3, r4, r3
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	b29c      	uxth	r4, r3
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <display_splash_screen+0xf8>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <display_splash_screen+0xf4>)
 800324c:	88db      	ldrh	r3, [r3, #6]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	0fda      	lsrs	r2, r3, #31
 8003252:	4413      	add	r3, r2
 8003254:	105b      	asrs	r3, r3, #1
 8003256:	b29b      	uxth	r3, r3
 8003258:	3319      	adds	r3, #25
 800325a:	b29d      	uxth	r5, r3
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <display_splash_screen+0x100>)
 800325e:	2200      	movs	r2, #0
 8003260:	9204      	str	r2, [sp, #16]
 8003262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003266:	9203      	str	r2, [sp, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	9202      	str	r2, [sp, #8]
 800326c:	466e      	mov	r6, sp
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003274:	e886 0003 	stmia.w	r6, {r0, r1}
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <display_splash_screen+0xfc>)
 800327c:	4629      	mov	r1, r5
 800327e:	4620      	mov	r0, r4
 8003280:	f005 fe40 	bl	8008f04 <Displ_WString>

	Displ_BackLight('1');
 8003284:	2031      	movs	r0, #49	; 0x31
 8003286:	f005 fe7d 	bl	8008f84 <Displ_BackLight>
}
 800328a:	bf00      	nop
 800328c:	3704      	adds	r7, #4
 800328e:	46bd      	mov	sp, r7
 8003290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003292:	bf00      	nop
 8003294:	08018ec0 	.word	0x08018ec0
 8003298:	080136cc 	.word	0x080136cc
 800329c:	200020b0 	.word	0x200020b0
 80032a0:	200020d2 	.word	0x200020d2
 80032a4:	20000024 	.word	0x20000024
 80032a8:	200020d4 	.word	0x200020d4
 80032ac:	08018ec4 	.word	0x08018ec4
 80032b0:	2000000c 	.word	0x2000000c

080032b4 <display_channel_detail>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// channel detail screen
void display_channel_detail() {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af06      	add	r7, sp, #24
	uint16_t font_col = channel_colour[display_channel+1];
 80032ba:	4b98      	ldr	r3, [pc, #608]	; (800351c <display_channel_detail+0x268>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	4a97      	ldr	r2, [pc, #604]	; (8003520 <display_channel_detail+0x26c>)
 80032c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c6:	80fb      	strh	r3, [r7, #6]
	if (!meter_readings_invalid) {
 80032c8:	4b96      	ldr	r3, [pc, #600]	; (8003524 <display_channel_detail+0x270>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 80bd 	bne.w	800344c <display_channel_detail+0x198>
		// V
		snprintf(str,sizeof(str),"%3.0f", v_filtered);
 80032d2:	4b95      	ldr	r3, [pc, #596]	; (8003528 <display_channel_detail+0x274>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f956 	bl	8000588 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	e9cd 2300 	strd	r2, r3, [sp]
 80032e4:	4a91      	ldr	r2, [pc, #580]	; (800352c <display_channel_detail+0x278>)
 80032e6:	2120      	movs	r1, #32
 80032e8:	4891      	ldr	r0, [pc, #580]	; (8003530 <display_channel_detail+0x27c>)
 80032ea:	f00c fd25 	bl	800fd38 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, channel_colour[0], BLACK);
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <display_channel_detail+0x26c>)
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	4b90      	ldr	r3, [pc, #576]	; (8003534 <display_channel_detail+0x280>)
 80032f4:	2100      	movs	r1, #0
 80032f6:	9104      	str	r1, [sp, #16]
 80032f8:	9203      	str	r2, [sp, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	9202      	str	r2, [sp, #8]
 80032fe:	466c      	mov	r4, sp
 8003300:	1d1a      	adds	r2, r3, #4
 8003302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003306:	e884 0003 	stmia.w	r4, {r0, r1}
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a88      	ldr	r2, [pc, #544]	; (8003530 <display_channel_detail+0x27c>)
 800330e:	2107      	movs	r1, #7
 8003310:	2009      	movs	r0, #9
 8003312:	f005 fdf7 	bl	8008f04 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", i_filtered[display_channel]);
 8003316:	4b81      	ldr	r3, [pc, #516]	; (800351c <display_channel_detail+0x268>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <display_channel_detail+0x284>)
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f930 	bl	8000588 <__aeabi_f2d>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	e9cd 2300 	strd	r2, r3, [sp]
 8003330:	4a82      	ldr	r2, [pc, #520]	; (800353c <display_channel_detail+0x288>)
 8003332:	2120      	movs	r1, #32
 8003334:	487e      	ldr	r0, [pc, #504]	; (8003530 <display_channel_detail+0x27c>)
 8003336:	f00c fcff 	bl	800fd38 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, font_col, BLACK);
 800333a:	4b7e      	ldr	r3, [pc, #504]	; (8003534 <display_channel_detail+0x280>)
 800333c:	2200      	movs	r2, #0
 800333e:	9204      	str	r2, [sp, #16]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	9203      	str	r2, [sp, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	9202      	str	r2, [sp, #8]
 8003348:	466c      	mov	r4, sp
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003350:	e884 0003 	stmia.w	r4, {r0, r1}
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a76      	ldr	r2, [pc, #472]	; (8003530 <display_channel_detail+0x27c>)
 8003358:	2107      	movs	r1, #7
 800335a:	2078      	movs	r0, #120	; 0x78
 800335c:	f005 fdd2 	bl	8008f04 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", va_filtered[display_channel] );
 8003360:	4b6e      	ldr	r3, [pc, #440]	; (800351c <display_channel_detail+0x268>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4a76      	ldr	r2, [pc, #472]	; (8003540 <display_channel_detail+0x28c>)
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd f90b 	bl	8000588 <__aeabi_f2d>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	e9cd 2300 	strd	r2, r3, [sp]
 800337a:	4a72      	ldr	r2, [pc, #456]	; (8003544 <display_channel_detail+0x290>)
 800337c:	2120      	movs	r1, #32
 800337e:	486c      	ldr	r0, [pc, #432]	; (8003530 <display_channel_detail+0x27c>)
 8003380:	f00c fcda 	bl	800fd38 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1,  font_col, BLACK);
 8003384:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <display_channel_detail+0x280>)
 8003386:	2200      	movs	r2, #0
 8003388:	9204      	str	r2, [sp, #16]
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	9203      	str	r2, [sp, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	9202      	str	r2, [sp, #8]
 8003392:	466c      	mov	r4, sp
 8003394:	1d1a      	adds	r2, r3, #4
 8003396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800339a:	e884 0003 	stmia.w	r4, {r0, r1}
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a63      	ldr	r2, [pc, #396]	; (8003530 <display_channel_detail+0x27c>)
 80033a2:	2130      	movs	r1, #48	; 0x30
 80033a4:	2009      	movs	r0, #9
 80033a6:	f005 fdad 	bl	8008f04 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", w_filtered[display_channel] );
 80033aa:	4b5c      	ldr	r3, [pc, #368]	; (800351c <display_channel_detail+0x268>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	4a66      	ldr	r2, [pc, #408]	; (8003548 <display_channel_detail+0x294>)
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8e6 	bl	8000588 <__aeabi_f2d>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	e9cd 2300 	strd	r2, r3, [sp]
 80033c4:	4a5f      	ldr	r2, [pc, #380]	; (8003544 <display_channel_detail+0x290>)
 80033c6:	2120      	movs	r1, #32
 80033c8:	4859      	ldr	r0, [pc, #356]	; (8003530 <display_channel_detail+0x27c>)
 80033ca:	f00c fcb5 	bl	800fd38 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1,  font_col, BLACK);
 80033ce:	4b59      	ldr	r3, [pc, #356]	; (8003534 <display_channel_detail+0x280>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	9204      	str	r2, [sp, #16]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	9203      	str	r2, [sp, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	9202      	str	r2, [sp, #8]
 80033dc:	466c      	mov	r4, sp
 80033de:	1d1a      	adds	r2, r3, #4
 80033e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a51      	ldr	r2, [pc, #324]	; (8003530 <display_channel_detail+0x27c>)
 80033ec:	2159      	movs	r1, #89	; 0x59
 80033ee:	2009      	movs	r0, #9
 80033f0:	f005 fd88 	bl	8008f04 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[display_channel]) );
 80033f4:	4b49      	ldr	r3, [pc, #292]	; (800351c <display_channel_detail+0x268>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4a54      	ldr	r2, [pc, #336]	; (800354c <display_channel_detail+0x298>)
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	eef0 7ae7 	vabs.f32	s15, s15
 8003406:	ee17 0a90 	vmov	r0, s15
 800340a:	f7fd f8bd 	bl	8000588 <__aeabi_f2d>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	e9cd 2300 	strd	r2, r3, [sp]
 8003416:	4a4e      	ldr	r2, [pc, #312]	; (8003550 <display_channel_detail+0x29c>)
 8003418:	2120      	movs	r1, #32
 800341a:	4845      	ldr	r0, [pc, #276]	; (8003530 <display_channel_detail+0x27c>)
 800341c:	f00c fc8c 	bl	800fd38 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1,  font_col, BLACK);
 8003420:	4b44      	ldr	r3, [pc, #272]	; (8003534 <display_channel_detail+0x280>)
 8003422:	2200      	movs	r2, #0
 8003424:	9204      	str	r2, [sp, #16]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	9203      	str	r2, [sp, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	9202      	str	r2, [sp, #8]
 800342e:	466c      	mov	r4, sp
 8003430:	1d1a      	adds	r2, r3, #4
 8003432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003436:	e884 0003 	stmia.w	r4, {r0, r1}
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3c      	ldr	r2, [pc, #240]	; (8003530 <display_channel_detail+0x27c>)
 800343e:	2182      	movs	r1, #130	; 0x82
 8003440:	2009      	movs	r0, #9
 8003442:	f005 fd5f 	bl	8008f04 <Displ_WString>
		} else {
			snprintf(str,sizeof(str)," 0.0");
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
		*/
		display_show_curves();
 8003446:	f001 fa4f 	bl	80048e8 <display_show_curves>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
		//Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
		}

}
 800344a:	e063      	b.n	8003514 <display_channel_detail+0x260>
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <display_channel_detail+0x280>)
 800344e:	2200      	movs	r2, #0
 8003450:	9204      	str	r2, [sp, #16]
 8003452:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003456:	9203      	str	r2, [sp, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	9202      	str	r2, [sp, #8]
 800345c:	466c      	mov	r4, sp
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003464:	e884 0003 	stmia.w	r4, {r0, r1}
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3a      	ldr	r2, [pc, #232]	; (8003554 <display_channel_detail+0x2a0>)
 800346c:	2107      	movs	r1, #7
 800346e:	2009      	movs	r0, #9
 8003470:	f005 fd48 	bl	8008f04 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 8003474:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <display_channel_detail+0x280>)
 8003476:	2200      	movs	r2, #0
 8003478:	9204      	str	r2, [sp, #16]
 800347a:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	9202      	str	r2, [sp, #8]
 8003484:	466c      	mov	r4, sp
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800348c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a31      	ldr	r2, [pc, #196]	; (8003558 <display_channel_detail+0x2a4>)
 8003494:	2107      	movs	r1, #7
 8003496:	2078      	movs	r0, #120	; 0x78
 8003498:	f005 fd34 	bl	8008f04 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <display_channel_detail+0x280>)
 800349e:	2200      	movs	r2, #0
 80034a0:	9204      	str	r2, [sp, #16]
 80034a2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80034a6:	9203      	str	r2, [sp, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	9202      	str	r2, [sp, #8]
 80034ac:	466c      	mov	r4, sp
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a28      	ldr	r2, [pc, #160]	; (800355c <display_channel_detail+0x2a8>)
 80034bc:	2130      	movs	r1, #48	; 0x30
 80034be:	2009      	movs	r0, #9
 80034c0:	f005 fd20 	bl	8008f04 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <display_channel_detail+0x280>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	9204      	str	r2, [sp, #16]
 80034ca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80034ce:	9203      	str	r2, [sp, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	9202      	str	r2, [sp, #8]
 80034d4:	466c      	mov	r4, sp
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <display_channel_detail+0x2a8>)
 80034e4:	2159      	movs	r1, #89	; 0x59
 80034e6:	2009      	movs	r0, #9
 80034e8:	f005 fd0c 	bl	8008f04 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <display_channel_detail+0x280>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	9204      	str	r2, [sp, #16]
 80034f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f6:	9203      	str	r2, [sp, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	9202      	str	r2, [sp, #8]
 80034fc:	466c      	mov	r4, sp
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003504:	e884 0003 	stmia.w	r4, {r0, r1}
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <display_channel_detail+0x2ac>)
 800350c:	2182      	movs	r1, #130	; 0x82
 800350e:	2009      	movs	r0, #9
 8003510:	f005 fcf8 	bl	8008f04 <Displ_WString>
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bd90      	pop	{r4, r7, pc}
 800351c:	20000462 	.word	0x20000462
 8003520:	20000000 	.word	0x20000000
 8003524:	200002bc 	.word	0x200002bc
 8003528:	200003c4 	.word	0x200003c4
 800352c:	080136e8 	.word	0x080136e8
 8003530:	200020b0 	.word	0x200020b0
 8003534:	20000030 	.word	0x20000030
 8003538:	200003c8 	.word	0x200003c8
 800353c:	080136f0 	.word	0x080136f0
 8003540:	200003d4 	.word	0x200003d4
 8003544:	080136f8 	.word	0x080136f8
 8003548:	200003e0 	.word	0x200003e0
 800354c:	200003ec 	.word	0x200003ec
 8003550:	08013700 	.word	0x08013700
 8003554:	08013708 	.word	0x08013708
 8003558:	0801370c 	.word	0x0801370c
 800355c:	08013714 	.word	0x08013714
 8003560:	0801371c 	.word	0x0801371c

08003564 <display_usage>:

/*
 * @brief      Display "Usage" page
 * @para mask  1=display Usage mask, 0=display values
 */
void display_usage(uint8_t mask) {
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b092      	sub	sp, #72	; 0x48
 8003568:	af06      	add	r7, sp, #24
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
	int font_col = channel_colour[0];
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <display_usage+0x19c>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
	int ypos = 10;
 8003574:	230a      	movs	r3, #10
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
	int xpos = 20;
 8003578:	2314      	movs	r3, #20
 800357a:	623b      	str	r3, [r7, #32]
	int line_space = -2;
 800357c:	f06f 0301 	mvn.w	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
	int section_space = 5;
 8003582:	2305      	movs	r3, #5
 8003584:	61bb      	str	r3, [r7, #24]
	sFONT font = Font24;
 8003586:	4a5f      	ldr	r2, [pc, #380]	; (8003704 <display_usage+0x1a0>)
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	ca07      	ldmia	r2, {r0, r1, r2}
 800358e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Create page mask
	if (mask != 0) {
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80c1 	beq.w	800371c <display_usage+0x1b8>
		xpos += 8*font.Width;
 800359a:	8a3b      	ldrh	r3, [r7, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	4413      	add	r3, r2
 80035a2:	623b      	str	r3, [r7, #32]
		Displ_WString(xpos, ypos, "V", font, 1,  font_col, BLACK);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	b29c      	uxth	r4, r3
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	b29d      	uxth	r5, r3
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2200      	movs	r2, #0
 80035b2:	9204      	str	r2, [sp, #16]
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	2301      	movs	r3, #1
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	466a      	mov	r2, sp
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a4f      	ldr	r2, [pc, #316]	; (8003708 <display_usage+0x1a4>)
 80035cc:	4629      	mov	r1, r5
 80035ce:	4620      	mov	r0, r4
 80035d0:	f005 fc98 	bl	8008f04 <Displ_WString>
		ypos += section_space+line_space + font.Height;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	8a7a      	ldrh	r2, [r7, #18]
 80035dc:	4413      	add	r3, r2
 80035de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e0:	4413      	add	r3, r2
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (int i=0; i<NUM_I_SENSORS; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e8:	e085      	b.n	80036f6 <display_usage+0x192>
			font_col = channel_colour[i+1];
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	3301      	adds	r3, #1
 80035ee:	4a44      	ldr	r2, [pc, #272]	; (8003700 <display_usage+0x19c>)
 80035f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
			Displ_WString(xpos , ypos, "A" , font, 1,  font_col, BLACK);
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	b29c      	uxth	r4, r3
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	b29d      	uxth	r5, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	b29b      	uxth	r3, r3
 8003602:	2200      	movs	r2, #0
 8003604:	9204      	str	r2, [sp, #16]
 8003606:	9303      	str	r3, [sp, #12]
 8003608:	2301      	movs	r3, #1
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	466a      	mov	r2, sp
 800360e:	f107 0310 	add.w	r3, r7, #16
 8003612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003616:	e882 0003 	stmia.w	r2, {r0, r1}
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a3b      	ldr	r2, [pc, #236]	; (800370c <display_usage+0x1a8>)
 800361e:	4629      	mov	r1, r5
 8003620:	4620      	mov	r0, r4
 8003622:	f005 fc6f 	bl	8008f04 <Displ_WString>
			ypos += line_space + font.Height;
 8003626:	8a7b      	ldrh	r3, [r7, #18]
 8003628:	461a      	mov	r2, r3
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003630:	4413      	add	r3, r2
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "VA" , font, 1,  font_col, BLACK);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	b29c      	uxth	r4, r3
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	b29d      	uxth	r5, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	b29b      	uxth	r3, r3
 8003640:	2200      	movs	r2, #0
 8003642:	9204      	str	r2, [sp, #16]
 8003644:	9303      	str	r3, [sp, #12]
 8003646:	2301      	movs	r3, #1
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	466a      	mov	r2, sp
 800364c:	f107 0310 	add.w	r3, r7, #16
 8003650:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003654:	e882 0003 	stmia.w	r2, {r0, r1}
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <display_usage+0x1ac>)
 800365c:	4629      	mov	r1, r5
 800365e:	4620      	mov	r0, r4
 8003660:	f005 fc50 	bl	8008f04 <Displ_WString>
			ypos += line_space + font.Height;
 8003664:	8a7b      	ldrh	r3, [r7, #18]
 8003666:	461a      	mov	r2, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366e:	4413      	add	r3, r2
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "W" , font, 1,  font_col, BLACK);
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	b29c      	uxth	r4, r3
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	b29d      	uxth	r5, r3
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	b29b      	uxth	r3, r3
 800367e:	2200      	movs	r2, #0
 8003680:	9204      	str	r2, [sp, #16]
 8003682:	9303      	str	r3, [sp, #12]
 8003684:	2301      	movs	r3, #1
 8003686:	9302      	str	r3, [sp, #8]
 8003688:	466a      	mov	r2, sp
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003692:	e882 0003 	stmia.w	r2, {r0, r1}
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <display_usage+0x1b0>)
 800369a:	4629      	mov	r1, r5
 800369c:	4620      	mov	r0, r4
 800369e:	f005 fc31 	bl	8008f04 <Displ_WString>
			ypos += line_space + font.Height;
 80036a2:	8a7b      	ldrh	r3, [r7, #18]
 80036a4:	461a      	mov	r2, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ac:	4413      	add	r3, r2
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "PF" , font, 1,  font_col, BLACK);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	b29c      	uxth	r4, r3
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	b29d      	uxth	r5, r3
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	9204      	str	r2, [sp, #16]
 80036c0:	9303      	str	r3, [sp, #12]
 80036c2:	2301      	movs	r3, #1
 80036c4:	9302      	str	r3, [sp, #8]
 80036c6:	466a      	mov	r2, sp
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <display_usage+0x1b4>)
 80036d8:	4629      	mov	r1, r5
 80036da:	4620      	mov	r0, r4
 80036dc:	f005 fc12 	bl	8008f04 <Displ_WString>
			ypos += section_space+line_space + font.Height;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	8a7a      	ldrh	r2, [r7, #18]
 80036e8:	4413      	add	r3, r2
 80036ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ec:	4413      	add	r3, r2
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i=0; i<NUM_I_SENSORS; i++) {
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	3301      	adds	r3, #1
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f77f af76 	ble.w	80035ea <display_usage+0x86>
		}
		return;
 80036fe:	e2ad      	b.n	8003c5c <display_usage+0x6f8>
 8003700:	20000000 	.word	0x20000000
 8003704:	20000024 	.word	0x20000024
 8003708:	08013724 	.word	0x08013724
 800370c:	08013728 	.word	0x08013728
 8003710:	0801372c 	.word	0x0801372c
 8003714:	08013730 	.word	0x08013730
 8003718:	08013734 	.word	0x08013734
	}

	snprintf(str,sizeof(str),"%3.0f", v_filtered);
 800371c:	4baa      	ldr	r3, [pc, #680]	; (80039c8 <display_usage+0x464>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fc ff31 	bl	8000588 <__aeabi_f2d>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	e9cd 2300 	strd	r2, r3, [sp]
 800372e:	4aa7      	ldr	r2, [pc, #668]	; (80039cc <display_usage+0x468>)
 8003730:	2120      	movs	r1, #32
 8003732:	48a7      	ldr	r0, [pc, #668]	; (80039d0 <display_usage+0x46c>)
 8003734:	f00c fb00 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+4*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003738:	8a3b      	ldrh	r3, [r7, #16]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	b29a      	uxth	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	b29b      	uxth	r3, r3
 8003742:	4413      	add	r3, r2
 8003744:	b29c      	uxth	r4, r3
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	b29d      	uxth	r5, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	b29b      	uxth	r3, r3
 800374e:	2200      	movs	r2, #0
 8003750:	9204      	str	r2, [sp, #16]
 8003752:	9303      	str	r3, [sp, #12]
 8003754:	2301      	movs	r3, #1
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	466a      	mov	r2, sp
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003762:	e882 0003 	stmia.w	r2, {r0, r1}
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a99      	ldr	r2, [pc, #612]	; (80039d0 <display_usage+0x46c>)
 800376a:	4629      	mov	r1, r5
 800376c:	4620      	mov	r0, r4
 800376e:	f005 fbc9 	bl	8008f04 <Displ_WString>
	ypos += section_space+line_space + font.Height;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	8a7a      	ldrh	r2, [r7, #18]
 800377a:	4413      	add	r3, r2
 800377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377e:	4413      	add	r3, r2
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I1+1];
 8003782:	4b94      	ldr	r3, [pc, #592]	; (80039d4 <display_usage+0x470>)
 8003784:	885b      	ldrh	r3, [r3, #2]
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I1]);
 8003788:	4b93      	ldr	r3, [pc, #588]	; (80039d8 <display_usage+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fefb 	bl	8000588 <__aeabi_f2d>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	e9cd 2300 	strd	r2, r3, [sp]
 800379a:	4a90      	ldr	r2, [pc, #576]	; (80039dc <display_usage+0x478>)
 800379c:	2120      	movs	r1, #32
 800379e:	488c      	ldr	r0, [pc, #560]	; (80039d0 <display_usage+0x46c>)
 80037a0:	f00c faca 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+3*font.Width , ypos, str , font, 1,  font_col, BLACK);
 80037a4:	8a3b      	ldrh	r3, [r7, #16]
 80037a6:	461a      	mov	r2, r3
 80037a8:	0052      	lsls	r2, r2, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	b29c      	uxth	r4, r3
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	b29d      	uxth	r5, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	9204      	str	r2, [sp, #16]
 80037c2:	9303      	str	r3, [sp, #12]
 80037c4:	2301      	movs	r3, #1
 80037c6:	9302      	str	r3, [sp, #8]
 80037c8:	466a      	mov	r2, sp
 80037ca:	f107 0310 	add.w	r3, r7, #16
 80037ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <display_usage+0x46c>)
 80037da:	4629      	mov	r1, r5
 80037dc:	4620      	mov	r0, r4
 80037de:	f005 fb91 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 80037e2:	8a7b      	ldrh	r3, [r7, #18]
 80037e4:	461a      	mov	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	4413      	add	r3, r2
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I1]);
 80037f0:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <display_usage+0x47c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fec7 	bl	8000588 <__aeabi_f2d>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003802:	4a78      	ldr	r2, [pc, #480]	; (80039e4 <display_usage+0x480>)
 8003804:	2120      	movs	r1, #32
 8003806:	4872      	ldr	r0, [pc, #456]	; (80039d0 <display_usage+0x46c>)
 8003808:	f00c fa96 	bl	800fd38 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	b29c      	uxth	r4, r3
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	b29d      	uxth	r5, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	b29b      	uxth	r3, r3
 8003818:	2200      	movs	r2, #0
 800381a:	9204      	str	r2, [sp, #16]
 800381c:	9303      	str	r3, [sp, #12]
 800381e:	2301      	movs	r3, #1
 8003820:	9302      	str	r3, [sp, #8]
 8003822:	466a      	mov	r2, sp
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800382c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <display_usage+0x46c>)
 8003834:	4629      	mov	r1, r5
 8003836:	4620      	mov	r0, r4
 8003838:	f005 fb64 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 800383c:	8a7b      	ldrh	r3, [r7, #18]
 800383e:	461a      	mov	r2, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003846:	4413      	add	r3, r2
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I1]);
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <display_usage+0x484>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe9a 	bl	8000588 <__aeabi_f2d>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	e9cd 2300 	strd	r2, r3, [sp]
 800385c:	4a61      	ldr	r2, [pc, #388]	; (80039e4 <display_usage+0x480>)
 800385e:	2120      	movs	r1, #32
 8003860:	485b      	ldr	r0, [pc, #364]	; (80039d0 <display_usage+0x46c>)
 8003862:	f00c fa69 	bl	800fd38 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	b29c      	uxth	r4, r3
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	b29d      	uxth	r5, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	b29b      	uxth	r3, r3
 8003872:	2200      	movs	r2, #0
 8003874:	9204      	str	r2, [sp, #16]
 8003876:	9303      	str	r3, [sp, #12]
 8003878:	2301      	movs	r3, #1
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	466a      	mov	r2, sp
 800387e:	f107 0310 	add.w	r3, r7, #16
 8003882:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003886:	e882 0003 	stmia.w	r2, {r0, r1}
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a50      	ldr	r2, [pc, #320]	; (80039d0 <display_usage+0x46c>)
 800388e:	4629      	mov	r1, r5
 8003890:	4620      	mov	r0, r4
 8003892:	f005 fb37 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 8003896:	8a7b      	ldrh	r3, [r7, #18]
 8003898:	461a      	mov	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a0:	4413      	add	r3, r2
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I1]) );
 80038a4:	4b51      	ldr	r3, [pc, #324]	; (80039ec <display_usage+0x488>)
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	eef0 7ae7 	vabs.f32	s15, s15
 80038ae:	ee17 0a90 	vmov	r0, s15
 80038b2:	f7fc fe69 	bl	8000588 <__aeabi_f2d>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	e9cd 2300 	strd	r2, r3, [sp]
 80038be:	4a4c      	ldr	r2, [pc, #304]	; (80039f0 <display_usage+0x48c>)
 80038c0:	2120      	movs	r1, #32
 80038c2:	4843      	ldr	r0, [pc, #268]	; (80039d0 <display_usage+0x46c>)
 80038c4:	f00c fa38 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 80038c8:	8a3b      	ldrh	r3, [r7, #16]
 80038ca:	461a      	mov	r2, r3
 80038cc:	0052      	lsls	r2, r2, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	b29c      	uxth	r4, r3
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	b29d      	uxth	r5, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	9204      	str	r2, [sp, #16]
 80038e6:	9303      	str	r3, [sp, #12]
 80038e8:	2301      	movs	r3, #1
 80038ea:	9302      	str	r3, [sp, #8]
 80038ec:	466a      	mov	r2, sp
 80038ee:	f107 0310 	add.w	r3, r7, #16
 80038f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <display_usage+0x46c>)
 80038fe:	4629      	mov	r1, r5
 8003900:	4620      	mov	r0, r4
 8003902:	f005 faff 	bl	8008f04 <Displ_WString>
	ypos += section_space+line_space + font.Height;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	8a7a      	ldrh	r2, [r7, #18]
 800390e:	4413      	add	r3, r2
 8003910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003912:	4413      	add	r3, r2
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I2+1];
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <display_usage+0x470>)
 8003918:	889b      	ldrh	r3, [r3, #4]
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I2]);
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <display_usage+0x474>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fc fe31 	bl	8000588 <__aeabi_f2d>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	e9cd 2300 	strd	r2, r3, [sp]
 800392e:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <display_usage+0x478>)
 8003930:	2120      	movs	r1, #32
 8003932:	4827      	ldr	r0, [pc, #156]	; (80039d0 <display_usage+0x46c>)
 8003934:	f00c fa00 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003938:	8a3b      	ldrh	r3, [r7, #16]
 800393a:	461a      	mov	r2, r3
 800393c:	0052      	lsls	r2, r2, #1
 800393e:	4413      	add	r3, r2
 8003940:	b29a      	uxth	r2, r3
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4413      	add	r3, r2
 8003948:	b29c      	uxth	r4, r3
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	b29d      	uxth	r5, r3
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	b29b      	uxth	r3, r3
 8003952:	2200      	movs	r2, #0
 8003954:	9204      	str	r2, [sp, #16]
 8003956:	9303      	str	r3, [sp, #12]
 8003958:	2301      	movs	r3, #1
 800395a:	9302      	str	r3, [sp, #8]
 800395c:	466a      	mov	r2, sp
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003966:	e882 0003 	stmia.w	r2, {r0, r1}
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <display_usage+0x46c>)
 800396e:	4629      	mov	r1, r5
 8003970:	4620      	mov	r0, r4
 8003972:	f005 fac7 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 8003976:	8a7b      	ldrh	r3, [r7, #18]
 8003978:	461a      	mov	r2, r3
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	4413      	add	r3, r2
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I2]);
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <display_usage+0x47c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fdfd 	bl	8000588 <__aeabi_f2d>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	e9cd 2300 	strd	r2, r3, [sp]
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <display_usage+0x480>)
 8003998:	2120      	movs	r1, #32
 800399a:	480d      	ldr	r0, [pc, #52]	; (80039d0 <display_usage+0x46c>)
 800399c:	f00c f9cc 	bl	800fd38 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	b29c      	uxth	r4, r3
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	b29d      	uxth	r5, r3
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	9204      	str	r2, [sp, #16]
 80039b0:	9303      	str	r3, [sp, #12]
 80039b2:	2301      	movs	r3, #1
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	466a      	mov	r2, sp
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	e015      	b.n	80039f4 <display_usage+0x490>
 80039c8:	200003c4 	.word	0x200003c4
 80039cc:	080136e8 	.word	0x080136e8
 80039d0:	200020b0 	.word	0x200020b0
 80039d4:	20000000 	.word	0x20000000
 80039d8:	200003c8 	.word	0x200003c8
 80039dc:	080136f0 	.word	0x080136f0
 80039e0:	200003d4 	.word	0x200003d4
 80039e4:	080136f8 	.word	0x080136f8
 80039e8:	200003e0 	.word	0x200003e0
 80039ec:	200003ec 	.word	0x200003ec
 80039f0:	08013700 	.word	0x08013700
 80039f4:	4a9b      	ldr	r2, [pc, #620]	; (8003c64 <display_usage+0x700>)
 80039f6:	4629      	mov	r1, r5
 80039f8:	4620      	mov	r0, r4
 80039fa:	f005 fa83 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 80039fe:	8a7b      	ldrh	r3, [r7, #18]
 8003a00:	461a      	mov	r2, r3
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a08:	4413      	add	r3, r2
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I2]);
 8003a0c:	4b96      	ldr	r3, [pc, #600]	; (8003c68 <display_usage+0x704>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fdb9 	bl	8000588 <__aeabi_f2d>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a1e:	4a93      	ldr	r2, [pc, #588]	; (8003c6c <display_usage+0x708>)
 8003a20:	2120      	movs	r1, #32
 8003a22:	4890      	ldr	r0, [pc, #576]	; (8003c64 <display_usage+0x700>)
 8003a24:	f00c f988 	bl	800fd38 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	b29c      	uxth	r4, r3
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	b29d      	uxth	r5, r3
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2200      	movs	r2, #0
 8003a36:	9204      	str	r2, [sp, #16]
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	466a      	mov	r2, sp
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a48:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a85      	ldr	r2, [pc, #532]	; (8003c64 <display_usage+0x700>)
 8003a50:	4629      	mov	r1, r5
 8003a52:	4620      	mov	r0, r4
 8003a54:	f005 fa56 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 8003a58:	8a7b      	ldrh	r3, [r7, #18]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a62:	4413      	add	r3, r2
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I2]) );
 8003a66:	4b82      	ldr	r3, [pc, #520]	; (8003c70 <display_usage+0x70c>)
 8003a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a6c:	eef0 7ae7 	vabs.f32	s15, s15
 8003a70:	ee17 0a90 	vmov	r0, s15
 8003a74:	f7fc fd88 	bl	8000588 <__aeabi_f2d>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8003a80:	4a7c      	ldr	r2, [pc, #496]	; (8003c74 <display_usage+0x710>)
 8003a82:	2120      	movs	r1, #32
 8003a84:	4877      	ldr	r0, [pc, #476]	; (8003c64 <display_usage+0x700>)
 8003a86:	f00c f957 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003a8a:	8a3b      	ldrh	r3, [r7, #16]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	b29d      	uxth	r5, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	9204      	str	r2, [sp, #16]
 8003aa8:	9303      	str	r3, [sp, #12]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	9302      	str	r3, [sp, #8]
 8003aae:	466a      	mov	r2, sp
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ab8:	e882 0003 	stmia.w	r2, {r0, r1}
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a69      	ldr	r2, [pc, #420]	; (8003c64 <display_usage+0x700>)
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f005 fa1e 	bl	8008f04 <Displ_WString>
	ypos += section_space+line_space + font.Height;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	8a7a      	ldrh	r2, [r7, #18]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad4:	4413      	add	r3, r2
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I3+1];
 8003ad8:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <display_usage+0x714>)
 8003ada:	88db      	ldrh	r3, [r3, #6]
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I3]);
 8003ade:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <display_usage+0x718>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fd50 	bl	8000588 <__aeabi_f2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	e9cd 2300 	strd	r2, r3, [sp]
 8003af0:	4a63      	ldr	r2, [pc, #396]	; (8003c80 <display_usage+0x71c>)
 8003af2:	2120      	movs	r1, #32
 8003af4:	485b      	ldr	r0, [pc, #364]	; (8003c64 <display_usage+0x700>)
 8003af6:	f00c f91f 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003afa:	8a3b      	ldrh	r3, [r7, #16]
 8003afc:	461a      	mov	r2, r3
 8003afe:	0052      	lsls	r2, r2, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	b29c      	uxth	r4, r3
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	b29d      	uxth	r5, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2200      	movs	r2, #0
 8003b16:	9204      	str	r2, [sp, #16]
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	466a      	mov	r2, sp
 8003b20:	f107 0310 	add.w	r3, r7, #16
 8003b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b28:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a4d      	ldr	r2, [pc, #308]	; (8003c64 <display_usage+0x700>)
 8003b30:	4629      	mov	r1, r5
 8003b32:	4620      	mov	r0, r4
 8003b34:	f005 f9e6 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 8003b38:	8a7b      	ldrh	r3, [r7, #18]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	4413      	add	r3, r2
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I3]);
 8003b46:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <display_usage+0x720>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fd1c 	bl	8000588 <__aeabi_f2d>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	e9cd 2300 	strd	r2, r3, [sp]
 8003b58:	4a44      	ldr	r2, [pc, #272]	; (8003c6c <display_usage+0x708>)
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	4841      	ldr	r0, [pc, #260]	; (8003c64 <display_usage+0x700>)
 8003b5e:	f00c f8eb 	bl	800fd38 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	b29c      	uxth	r4, r3
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	b29d      	uxth	r5, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	9204      	str	r2, [sp, #16]
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	2301      	movs	r3, #1
 8003b76:	9302      	str	r3, [sp, #8]
 8003b78:	466a      	mov	r2, sp
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b82:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a36      	ldr	r2, [pc, #216]	; (8003c64 <display_usage+0x700>)
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f005 f9b9 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 8003b92:	8a7b      	ldrh	r3, [r7, #18]
 8003b94:	461a      	mov	r2, r3
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	4413      	add	r3, r2
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I3]);
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <display_usage+0x704>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fcef 	bl	8000588 <__aeabi_f2d>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	e9cd 2300 	strd	r2, r3, [sp]
 8003bb2:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <display_usage+0x708>)
 8003bb4:	2120      	movs	r1, #32
 8003bb6:	482b      	ldr	r0, [pc, #172]	; (8003c64 <display_usage+0x700>)
 8003bb8:	f00c f8be 	bl	800fd38 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	b29c      	uxth	r4, r3
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	b29d      	uxth	r5, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2200      	movs	r2, #0
 8003bca:	9204      	str	r2, [sp, #16]
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	2301      	movs	r3, #1
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	466a      	mov	r2, sp
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003bdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a20      	ldr	r2, [pc, #128]	; (8003c64 <display_usage+0x700>)
 8003be4:	4629      	mov	r1, r5
 8003be6:	4620      	mov	r0, r4
 8003be8:	f005 f98c 	bl	8008f04 <Displ_WString>
	ypos += line_space + font.Height;
 8003bec:	8a7b      	ldrh	r3, [r7, #18]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf6:	4413      	add	r3, r2
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I3]) );
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <display_usage+0x70c>)
 8003bfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c00:	eef0 7ae7 	vabs.f32	s15, s15
 8003c04:	ee17 0a90 	vmov	r0, s15
 8003c08:	f7fc fcbe 	bl	8000588 <__aeabi_f2d>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	e9cd 2300 	strd	r2, r3, [sp]
 8003c14:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <display_usage+0x710>)
 8003c16:	2120      	movs	r1, #32
 8003c18:	4812      	ldr	r0, [pc, #72]	; (8003c64 <display_usage+0x700>)
 8003c1a:	f00c f88d 	bl	800fd38 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003c1e:	8a3b      	ldrh	r3, [r7, #16]
 8003c20:	461a      	mov	r2, r3
 8003c22:	0052      	lsls	r2, r2, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b29c      	uxth	r4, r3
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	b29d      	uxth	r5, r3
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	9204      	str	r2, [sp, #16]
 8003c3c:	9303      	str	r3, [sp, #12]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	9302      	str	r3, [sp, #8]
 8003c42:	466a      	mov	r2, sp
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <display_usage+0x700>)
 8003c54:	4629      	mov	r1, r5
 8003c56:	4620      	mov	r0, r4
 8003c58:	f005 f954 	bl	8008f04 <Displ_WString>
	//ypos += section_space+line_space + font.Height;


}
 8003c5c:	3730      	adds	r7, #48	; 0x30
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200020b0 	.word	0x200020b0
 8003c68:	200003e0 	.word	0x200003e0
 8003c6c:	080136f8 	.word	0x080136f8
 8003c70:	200003ec 	.word	0x200003ec
 8003c74:	08013700 	.word	0x08013700
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	200003c8 	.word	0x200003c8
 8003c80:	080136f0 	.word	0x080136f0
 8003c84:	200003d4 	.word	0x200003d4

08003c88 <display_debug>:

void display_debug() {
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af06      	add	r7, sp, #24
	int font_col = WHITE;
 8003c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c92:	607b      	str	r3, [r7, #4]
#ifdef DEBUG
	snprintf(str,sizeof(str),"Calc: %lums", calc_ticks);
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <display_debug+0x74>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <display_debug+0x78>)
 8003c9a:	2120      	movs	r1, #32
 8003c9c:	4819      	ldr	r0, [pc, #100]	; (8003d04 <display_debug+0x7c>)
 8003c9e:	f00c f84b 	bl	800fd38 <sniprintf>
	Displ_WString(20, 20, str , Font24, 1,  font_col, BLACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <display_debug+0x80>)
 8003ca8:	2100      	movs	r1, #0
 8003caa:	9104      	str	r1, [sp, #16]
 8003cac:	9203      	str	r2, [sp, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	9202      	str	r2, [sp, #8]
 8003cb2:	466c      	mov	r4, sp
 8003cb4:	1d1a      	adds	r2, r3, #4
 8003cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cba:	e884 0003 	stmia.w	r4, {r0, r1}
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <display_debug+0x7c>)
 8003cc2:	2114      	movs	r1, #20
 8003cc4:	2014      	movs	r0, #20
 8003cc6:	f005 f91d 	bl	8008f04 <Displ_WString>
#ifdef USE_WIFI
	Displ_WString(20, 40, ip_addr_str, Font20, 1, font_col, BLACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <display_debug+0x84>)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	9104      	str	r1, [sp, #16]
 8003cd4:	9203      	str	r2, [sp, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	9202      	str	r2, [sp, #8]
 8003cda:	466c      	mov	r4, sp
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce2:	e884 0003 	stmia.w	r4, {r0, r1}
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <display_debug+0x88>)
 8003cea:	2128      	movs	r1, #40	; 0x28
 8003cec:	2014      	movs	r0, #20
 8003cee:	f005 f909 	bl	8008f04 <Displ_WString>
#endif
#endif
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd90      	pop	{r4, r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20008238 	.word	0x20008238
 8003d00:	08013738 	.word	0x08013738
 8003d04:	200020b0 	.word	0x200020b0
 8003d08:	20000024 	.word	0x20000024
 8003d0c:	20000018 	.word	0x20000018
 8003d10:	20000044 	.word	0x20000044

08003d14 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <display_update_meter+0xb4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	79fa      	ldrb	r2, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d034      	beq.n	8003d92 <display_update_meter+0x7e>
		switch(screen) {
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d82d      	bhi.n	8003d8c <display_update_meter+0x78>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <display_update_meter+0x24>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d5b 	.word	0x08003d5b
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d77 	.word	0x08003d77
 8003d48:	08003d85 	.word	0x08003d85
		case 1:
			//meter_readings_invalid = 1;
			display_channel = I1;
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <display_update_meter+0xb8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
			display_meter_mask(1);
 8003d52:	2001      	movs	r0, #1
 8003d54:	f000 f848 	bl	8003de8 <display_meter_mask>
			break;
 8003d58:	e018      	b.n	8003d8c <display_update_meter+0x78>
		case 2:
			//meter_readings_invalid = 1;
			display_channel = I2;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <display_update_meter+0xb8>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
			display_meter_mask(0);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f000 f841 	bl	8003de8 <display_meter_mask>
			break;
 8003d66:	e011      	b.n	8003d8c <display_update_meter+0x78>
		case 3:
			//meter_readings_invalid = 1;
			display_channel = I3;
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <display_update_meter+0xb8>)
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
			display_meter_mask(0);
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f000 f83a 	bl	8003de8 <display_meter_mask>
			break;
 8003d74:	e00a      	b.n	8003d8c <display_update_meter+0x78>
		case 4:
			Displ_CLS(BLACK);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f004 f952 	bl	8008020 <Displ_CLS>
			display_usage(1);
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7ff fbf1 	bl	8003564 <display_usage>
			break;
 8003d82:	e003      	b.n	8003d8c <display_update_meter+0x78>
		case 5:
			Displ_CLS(BLACK);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f004 f94b 	bl	8008020 <Displ_CLS>
			break;
 8003d8a:	bf00      	nop
		}
		last_screen = screen;
 8003d8c:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <display_update_meter+0xb4>)
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d010      	beq.n	8003dba <display_update_meter+0xa6>
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	dc11      	bgt.n	8003dc0 <display_update_meter+0xac>
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	dc02      	bgt.n	8003da6 <display_update_meter+0x92>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dc03      	bgt.n	8003dac <display_update_meter+0x98>
		break;
	case 5:
		display_debug();
		break;
	}
}
 8003da4:	e00c      	b.n	8003dc0 <display_update_meter+0xac>
	switch(screen) {
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d003      	beq.n	8003db2 <display_update_meter+0x9e>
}
 8003daa:	e009      	b.n	8003dc0 <display_update_meter+0xac>
		display_channel_detail();
 8003dac:	f7ff fa82 	bl	80032b4 <display_channel_detail>
		break;
 8003db0:	e006      	b.n	8003dc0 <display_update_meter+0xac>
		display_usage(0);
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7ff fbd6 	bl	8003564 <display_usage>
		break;
 8003db8:	e002      	b.n	8003dc0 <display_update_meter+0xac>
		display_debug();
 8003dba:	f7ff ff65 	bl	8003c88 <display_debug>
		break;
 8003dbe:	bf00      	nop
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200020d0 	.word	0x200020d0
 8003dcc:	20000462 	.word	0x20000462

08003dd0 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
	last_screen = 0;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <display_update_mask+0x14>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	200020d0 	.word	0x200020d0

08003de8 <display_meter_mask>:

/*
 * @brief       Draw the screen mask for meter main screen
 * @para clear  0 = do not clear display
 */
void display_meter_mask(uint8_t clear) {
 8003de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dea:	b08d      	sub	sp, #52	; 0x34
 8003dec:	af06      	add	r7, sp, #24
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
	uint16_t ypos = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	82fb      	strh	r3, [r7, #22]
	uint16_t box_height = 40;
 8003df6:	2328      	movs	r3, #40	; 0x28
 8003df8:	82bb      	strh	r3, [r7, #20]
	uint16_t border_col = GREEN;
 8003dfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dfe:	827b      	strh	r3, [r7, #18]
	uint16_t font_col = GREEN;
 8003e00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e04:	823b      	strh	r3, [r7, #16]
	uint16_t back_col = BLACK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	81fb      	strh	r3, [r7, #14]
	if (clear) Displ_CLS(back_col);
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <display_meter_mask+0x30>
 8003e10:	89fb      	ldrh	r3, [r7, #14]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f004 f904 	bl	8008020 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003e18:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003e1c:	4ba5      	ldr	r3, [pc, #660]	; (80040b4 <display_meter_mask+0x2cc>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	b21a      	sxth	r2, r3
 8003e26:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8003e2a:	8a7b      	ldrh	r3, [r7, #18]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2000      	movs	r0, #0
 8003e32:	f004 fade 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003e36:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003e3a:	8afa      	ldrh	r2, [r7, #22]
 8003e3c:	8abb      	ldrh	r3, [r7, #20]
 8003e3e:	4413      	add	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	b21a      	sxth	r2, r3
 8003e44:	8a7b      	ldrh	r3, [r7, #18]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f004 fad0 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003e52:	8afa      	ldrh	r2, [r7, #22]
 8003e54:	8abb      	ldrh	r3, [r7, #20]
 8003e56:	4413      	add	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	b219      	sxth	r1, r3
 8003e5c:	4b95      	ldr	r3, [pc, #596]	; (80040b4 <display_meter_mask+0x2cc>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	b218      	sxth	r0, r3
 8003e66:	8afa      	ldrh	r2, [r7, #22]
 8003e68:	8abb      	ldrh	r3, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	8a7b      	ldrh	r3, [r7, #18]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	4602      	mov	r2, r0
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f004 faba 	bl	80083f2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	; (80040b4 <display_meter_mask+0x2cc>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b218      	sxth	r0, r3
 8003e88:	8afa      	ldrh	r2, [r7, #22]
 8003e8a:	8abb      	ldrh	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	b219      	sxth	r1, r3
 8003e92:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <display_meter_mask+0x2cc>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	8a7b      	ldrh	r3, [r7, #18]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f004 faa6 	bl	80083f2 <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 8003ea6:	8afb      	ldrh	r3, [r7, #22]
 8003ea8:	3309      	adds	r3, #9
 8003eaa:	b29c      	uxth	r4, r3
 8003eac:	4b82      	ldr	r3, [pc, #520]	; (80040b8 <display_meter_mask+0x2d0>)
 8003eae:	89fa      	ldrh	r2, [r7, #14]
 8003eb0:	9204      	str	r2, [sp, #16]
 8003eb2:	8a3a      	ldrh	r2, [r7, #16]
 8003eb4:	9203      	str	r2, [sp, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	9202      	str	r2, [sp, #8]
 8003eba:	466d      	mov	r5, sp
 8003ebc:	1d1a      	adds	r2, r3, #4
 8003ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ec2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2256      	movs	r2, #86	; 0x56
 8003eca:	4621      	mov	r1, r4
 8003ecc:	204b      	movs	r0, #75	; 0x4b
 8003ece:	f004 fd9b 	bl	8008a08 <Displ_WChar>
	font_col = channel_colour[display_channel+1];
 8003ed2:	4b7a      	ldr	r3, [pc, #488]	; (80040bc <display_meter_mask+0x2d4>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	4a79      	ldr	r2, [pc, #484]	; (80040c0 <display_meter_mask+0x2d8>)
 8003eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ede:	823b      	strh	r3, [r7, #16]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8003ee0:	4b74      	ldr	r3, [pc, #464]	; (80040b4 <display_meter_mask+0x2cc>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	3b1e      	subs	r3, #30
 8003ee6:	b29c      	uxth	r4, r3
 8003ee8:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <display_meter_mask+0x2d0>)
 8003eea:	89fa      	ldrh	r2, [r7, #14]
 8003eec:	9204      	str	r2, [sp, #16]
 8003eee:	8a3a      	ldrh	r2, [r7, #16]
 8003ef0:	9203      	str	r2, [sp, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	9202      	str	r2, [sp, #8]
 8003ef6:	466d      	mov	r5, sp
 8003ef8:	1d1a      	adds	r2, r3, #4
 8003efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003efe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2241      	movs	r2, #65	; 0x41
 8003f06:	2109      	movs	r1, #9
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f004 fd7d 	bl	8008a08 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8003f0e:	8aba      	ldrh	r2, [r7, #20]
 8003f10:	8afb      	ldrh	r3, [r7, #22]
 8003f12:	4413      	add	r3, r2
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	82fb      	strh	r3, [r7, #22]
	border_col = YELLOW;
 8003f1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f1e:	827b      	strh	r3, [r7, #18]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003f20:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003f24:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <display_meter_mask+0x2cc>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8003f32:	8a7b      	ldrh	r3, [r7, #18]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	4603      	mov	r3, r0
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f004 fa5a 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003f3e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003f42:	8afa      	ldrh	r2, [r7, #22]
 8003f44:	8abb      	ldrh	r3, [r7, #20]
 8003f46:	4413      	add	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b21a      	sxth	r2, r3
 8003f4c:	8a7b      	ldrh	r3, [r7, #18]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	2000      	movs	r0, #0
 8003f56:	f004 fa4c 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003f5a:	8afa      	ldrh	r2, [r7, #22]
 8003f5c:	8abb      	ldrh	r3, [r7, #20]
 8003f5e:	4413      	add	r3, r2
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b219      	sxth	r1, r3
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <display_meter_mask+0x2cc>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	b218      	sxth	r0, r3
 8003f6e:	8afa      	ldrh	r2, [r7, #22]
 8003f70:	8abb      	ldrh	r3, [r7, #20]
 8003f72:	4413      	add	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b21a      	sxth	r2, r3
 8003f78:	8a7b      	ldrh	r3, [r7, #18]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	4602      	mov	r2, r0
 8003f80:	2000      	movs	r0, #0
 8003f82:	f004 fa36 	bl	80083f2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8003f86:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <display_meter_mask+0x2cc>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	b218      	sxth	r0, r3
 8003f90:	8afa      	ldrh	r2, [r7, #22]
 8003f92:	8abb      	ldrh	r3, [r7, #20]
 8003f94:	4413      	add	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	b219      	sxth	r1, r3
 8003f9a:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <display_meter_mask+0x2cc>)
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8003fa8:	8a7b      	ldrh	r3, [r7, #18]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	4623      	mov	r3, r4
 8003fae:	f004 fa20 	bl	80083f2 <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8003fb2:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <display_meter_mask+0x2cc>)
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	3b50      	subs	r3, #80	; 0x50
 8003fb8:	b29c      	uxth	r4, r3
 8003fba:	8afb      	ldrh	r3, [r7, #22]
 8003fbc:	3309      	adds	r3, #9
 8003fbe:	b29d      	uxth	r5, r3
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <display_meter_mask+0x2d0>)
 8003fc2:	89fa      	ldrh	r2, [r7, #14]
 8003fc4:	9204      	str	r2, [sp, #16]
 8003fc6:	8a3a      	ldrh	r2, [r7, #16]
 8003fc8:	9203      	str	r2, [sp, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	9202      	str	r2, [sp, #8]
 8003fce:	466e      	mov	r6, sp
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd6:	e886 0003 	stmia.w	r6, {r0, r1}
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a39      	ldr	r2, [pc, #228]	; (80040c4 <display_meter_mask+0x2dc>)
 8003fde:	4629      	mov	r1, r5
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f004 ff8f 	bl	8008f04 <Displ_WString>
	// W
	ypos += box_height+1;
 8003fe6:	8aba      	ldrh	r2, [r7, #20]
 8003fe8:	8afb      	ldrh	r3, [r7, #22]
 8003fea:	4413      	add	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	82fb      	strh	r3, [r7, #22]
	border_col = YELLOW;
 8003ff2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ff6:	827b      	strh	r3, [r7, #18]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003ff8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003ffc:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <display_meter_mask+0x2cc>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	3b01      	subs	r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	b21a      	sxth	r2, r3
 8004006:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800400a:	8a7b      	ldrh	r3, [r7, #18]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4603      	mov	r3, r0
 8004010:	2000      	movs	r0, #0
 8004012:	f004 f9ee 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8004016:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800401a:	8afa      	ldrh	r2, [r7, #22]
 800401c:	8abb      	ldrh	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	b21a      	sxth	r2, r3
 8004024:	8a7b      	ldrh	r3, [r7, #18]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	2000      	movs	r0, #0
 800402e:	f004 f9e0 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8004032:	8afa      	ldrh	r2, [r7, #22]
 8004034:	8abb      	ldrh	r3, [r7, #20]
 8004036:	4413      	add	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	b219      	sxth	r1, r3
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <display_meter_mask+0x2cc>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	b29b      	uxth	r3, r3
 8004044:	b218      	sxth	r0, r3
 8004046:	8afa      	ldrh	r2, [r7, #22]
 8004048:	8abb      	ldrh	r3, [r7, #20]
 800404a:	4413      	add	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	b21a      	sxth	r2, r3
 8004050:	8a7b      	ldrh	r3, [r7, #18]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	4602      	mov	r2, r0
 8004058:	2000      	movs	r0, #0
 800405a:	f004 f9ca 	bl	80083f2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <display_meter_mask+0x2cc>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	3b01      	subs	r3, #1
 8004064:	b29b      	uxth	r3, r3
 8004066:	b218      	sxth	r0, r3
 8004068:	8afa      	ldrh	r2, [r7, #22]
 800406a:	8abb      	ldrh	r3, [r7, #20]
 800406c:	4413      	add	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	b219      	sxth	r1, r3
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <display_meter_mask+0x2cc>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	3b01      	subs	r3, #1
 8004078:	b29b      	uxth	r3, r3
 800407a:	b21a      	sxth	r2, r3
 800407c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8004080:	8a7b      	ldrh	r3, [r7, #18]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4623      	mov	r3, r4
 8004086:	f004 f9b4 	bl	80083f2 <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <display_meter_mask+0x2cc>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	3b50      	subs	r3, #80	; 0x50
 8004090:	b29c      	uxth	r4, r3
 8004092:	8afb      	ldrh	r3, [r7, #22]
 8004094:	3309      	adds	r3, #9
 8004096:	b29d      	uxth	r5, r3
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <display_meter_mask+0x2d0>)
 800409a:	89fa      	ldrh	r2, [r7, #14]
 800409c:	9204      	str	r2, [sp, #16]
 800409e:	8a3a      	ldrh	r2, [r7, #16]
 80040a0:	9203      	str	r2, [sp, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	9202      	str	r2, [sp, #8]
 80040a6:	466e      	mov	r6, sp
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040ae:	e886 0003 	stmia.w	r6, {r0, r1}
 80040b2:	e009      	b.n	80040c8 <display_meter_mask+0x2e0>
 80040b4:	200020d2 	.word	0x200020d2
 80040b8:	20000024 	.word	0x20000024
 80040bc:	20000462 	.word	0x20000462
 80040c0:	20000000 	.word	0x20000000
 80040c4:	0801372c 	.word	0x0801372c
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2257      	movs	r2, #87	; 0x57
 80040cc:	4629      	mov	r1, r5
 80040ce:	4620      	mov	r0, r4
 80040d0:	f004 fc9a 	bl	8008a08 <Displ_WChar>

	// PF
	ypos += box_height+1;
 80040d4:	8aba      	ldrh	r2, [r7, #20]
 80040d6:	8afb      	ldrh	r3, [r7, #22]
 80040d8:	4413      	add	r3, r2
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	82fb      	strh	r3, [r7, #22]
	border_col = WHITE;
 80040e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040e4:	827b      	strh	r3, [r7, #18]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 80040e6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80040ea:	4b62      	ldr	r3, [pc, #392]	; (8004274 <display_meter_mask+0x48c>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b21a      	sxth	r2, r3
 80040f4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80040f8:	8a7b      	ldrh	r3, [r7, #18]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	2000      	movs	r0, #0
 8004100:	f004 f977 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8004104:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004108:	8afa      	ldrh	r2, [r7, #22]
 800410a:	8abb      	ldrh	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	b29b      	uxth	r3, r3
 8004110:	b21a      	sxth	r2, r3
 8004112:	8a7b      	ldrh	r3, [r7, #18]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	2200      	movs	r2, #0
 800411a:	2000      	movs	r0, #0
 800411c:	f004 f969 	bl	80083f2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8004120:	8afa      	ldrh	r2, [r7, #22]
 8004122:	8abb      	ldrh	r3, [r7, #20]
 8004124:	4413      	add	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	b219      	sxth	r1, r3
 800412a:	4b52      	ldr	r3, [pc, #328]	; (8004274 <display_meter_mask+0x48c>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	b218      	sxth	r0, r3
 8004134:	8afa      	ldrh	r2, [r7, #22]
 8004136:	8abb      	ldrh	r3, [r7, #20]
 8004138:	4413      	add	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	b21a      	sxth	r2, r3
 800413e:	8a7b      	ldrh	r3, [r7, #18]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	4602      	mov	r2, r0
 8004146:	2000      	movs	r0, #0
 8004148:	f004 f953 	bl	80083f2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <display_meter_mask+0x48c>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	3b01      	subs	r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	b218      	sxth	r0, r3
 8004156:	8afa      	ldrh	r2, [r7, #22]
 8004158:	8abb      	ldrh	r3, [r7, #20]
 800415a:	4413      	add	r3, r2
 800415c:	b29b      	uxth	r3, r3
 800415e:	b219      	sxth	r1, r3
 8004160:	4b44      	ldr	r3, [pc, #272]	; (8004274 <display_meter_mask+0x48c>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	3b01      	subs	r3, #1
 8004166:	b29b      	uxth	r3, r3
 8004168:	b21a      	sxth	r2, r3
 800416a:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800416e:	8a7b      	ldrh	r3, [r7, #18]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4623      	mov	r3, r4
 8004174:	f004 f93d 	bl	80083f2 <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8004178:	8afb      	ldrh	r3, [r7, #22]
 800417a:	3309      	adds	r3, #9
 800417c:	b29c      	uxth	r4, r3
 800417e:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <display_meter_mask+0x490>)
 8004180:	89fa      	ldrh	r2, [r7, #14]
 8004182:	9204      	str	r2, [sp, #16]
 8004184:	8a3a      	ldrh	r2, [r7, #16]
 8004186:	9203      	str	r2, [sp, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	9202      	str	r2, [sp, #8]
 800418c:	466d      	mov	r5, sp
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004194:	e885 0003 	stmia.w	r5, {r0, r1}
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a38      	ldr	r2, [pc, #224]	; (800427c <display_meter_mask+0x494>)
 800419c:	4621      	mov	r1, r4
 800419e:	205f      	movs	r0, #95	; 0x5f
 80041a0:	f004 feb0 	bl	8008f04 <Displ_WString>
	// Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);		// Degree sign

	// Graph Box
	ypos += box_height+1;
 80041a4:	8aba      	ldrh	r2, [r7, #20]
 80041a6:	8afb      	ldrh	r3, [r7, #22]
 80041a8:	4413      	add	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	82fb      	strh	r3, [r7, #22]
	border_col = BLUE;
 80041b0:	231f      	movs	r3, #31
 80041b2:	827b      	strh	r3, [r7, #18]
	curve_y_size = display_y-ypos-graph_border*2;
 80041b4:	4b32      	ldr	r3, [pc, #200]	; (8004280 <display_meter_mask+0x498>)
 80041b6:	881a      	ldrh	r2, [r3, #0]
 80041b8:	8afb      	ldrh	r3, [r7, #22]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	b29a      	uxth	r2, r3
 80041be:	2302      	movs	r3, #2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <display_meter_mask+0x49c>)
 80041ca:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 80041cc:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <display_meter_mask+0x49c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	8afb      	ldrh	r3, [r7, #22]
 80041d6:	4413      	add	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2202      	movs	r2, #2
 80041dc:	4413      	add	r3, r2
 80041de:	b29a      	uxth	r2, r3
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <display_meter_mask+0x4a0>)
 80041e2:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 80041e4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <display_meter_mask+0x48c>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b218      	sxth	r0, r3
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <display_meter_mask+0x498>)
 80041f0:	881a      	ldrh	r2, [r3, #0]
 80041f2:	8afb      	ldrh	r3, [r7, #22]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	b21c      	sxth	r4, r3
 80041fa:	2302      	movs	r3, #2
 80041fc:	b21b      	sxth	r3, r3
 80041fe:	8a7a      	ldrh	r2, [r7, #18]
 8004200:	9201      	str	r2, [sp, #4]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	4623      	mov	r3, r4
 8004206:	4602      	mov	r2, r0
 8004208:	2000      	movs	r0, #0
 800420a:	f004 fa23 	bl	8008654 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <display_meter_mask+0x4a4>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b218      	sxth	r0, r3
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <display_meter_mask+0x4a0>)
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b219      	sxth	r1, r3
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <display_meter_mask+0x4a4>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	33d2      	adds	r3, #210	; 0xd2
 8004220:	b29b      	uxth	r3, r3
 8004222:	b21a      	sxth	r2, r3
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <display_meter_mask+0x4a0>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b21b      	sxth	r3, r3
 800422a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800422e:	9400      	str	r4, [sp, #0]
 8004230:	f004 f8df 	bl	80083f2 <Displ_Line>

	// Channel
	snprintf(str,sizeof(str),"I%d", display_channel+1 );
 8004234:	4b16      	ldr	r3, [pc, #88]	; (8004290 <display_meter_mask+0x4a8>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <display_meter_mask+0x4ac>)
 800423c:	2120      	movs	r1, #32
 800423e:	4816      	ldr	r0, [pc, #88]	; (8004298 <display_meter_mask+0x4b0>)
 8004240:	f00b fd7a 	bl	800fd38 <sniprintf>
	Displ_WString(190, 133, str , Font24, 1, font_col, back_col);
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <display_meter_mask+0x490>)
 8004246:	89fa      	ldrh	r2, [r7, #14]
 8004248:	9204      	str	r2, [sp, #16]
 800424a:	8a3a      	ldrh	r2, [r7, #16]
 800424c:	9203      	str	r2, [sp, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	9202      	str	r2, [sp, #8]
 8004252:	466c      	mov	r4, sp
 8004254:	1d1a      	adds	r2, r3, #4
 8004256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800425a:	e884 0003 	stmia.w	r4, {r0, r1}
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <display_meter_mask+0x4b0>)
 8004262:	2185      	movs	r1, #133	; 0x85
 8004264:	20be      	movs	r0, #190	; 0xbe
 8004266:	f004 fe4d 	bl	8008f04 <Displ_WString>
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004272:	bf00      	nop
 8004274:	200020d2 	.word	0x200020d2
 8004278:	20000024 	.word	0x20000024
 800427c:	08013734 	.word	0x08013734
 8004280:	200020d4 	.word	0x200020d4
 8004284:	20000008 	.word	0x20000008
 8004288:	200007ac 	.word	0x200007ac
 800428c:	2000000a 	.word	0x2000000a
 8004290:	20000462 	.word	0x20000462
 8004294:	08013744 	.word	0x08013744
 8004298:	200020b0 	.word	0x200020b0

0800429c <display_align_curves>:

/*
 * @ brief       Aligns V + I curve to start at positive zero crossing and reduces it to one full cycle
 * @retval:      number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042a6:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ac:	603b      	str	r3, [r7, #0]
	uint8_t adc_channel;

	switch(display_channel) {
 80042ae:	4b53      	ldr	r3, [pc, #332]	; (80043fc <display_align_curves+0x160>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d00c      	beq.n	80042d0 <display_align_curves+0x34>
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	dc0d      	bgt.n	80042d6 <display_align_curves+0x3a>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <display_align_curves+0x28>
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d003      	beq.n	80042ca <display_align_curves+0x2e>
 80042c2:	e008      	b.n	80042d6 <display_align_curves+0x3a>
	case I1:
		adc_channel = ADC_CH_I1;
 80042c4:	2302      	movs	r3, #2
 80042c6:	71fb      	strb	r3, [r7, #7]
		break;
 80042c8:	e007      	b.n	80042da <display_align_curves+0x3e>
	case I2:
		adc_channel = ADC_CH_I2;
 80042ca:	2303      	movs	r3, #3
 80042cc:	71fb      	strb	r3, [r7, #7]
		break;
 80042ce:	e004      	b.n	80042da <display_align_curves+0x3e>
	case I3:
		adc_channel = ADC_CH_I3;
 80042d0:	2301      	movs	r3, #1
 80042d2:	71fb      	strb	r3, [r7, #7]
		break;
 80042d4:	e001      	b.n	80042da <display_align_curves+0x3e>
	default:
		adc_channel = ADC_CH_I1;
 80042d6:	2302      	movs	r3, #2
 80042d8:	71fb      	strb	r3, [r7, #7]
	}

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 80042da:	4b49      	ldr	r3, [pc, #292]	; (8004400 <display_align_curves+0x164>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da29      	bge.n	8004336 <display_align_curves+0x9a>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	e01f      	b.n	8004328 <display_align_curves+0x8c>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 80042e8:	4a46      	ldr	r2, [pc, #280]	; (8004404 <display_align_curves+0x168>)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80042f0:	4a45      	ldr	r2, [pc, #276]	; (8004408 <display_align_curves+0x16c>)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[adc_channel][i] = sample_buf[adc_channel][i];
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4841      	ldr	r0, [pc, #260]	; (8004404 <display_align_curves+0x168>)
 80042fe:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004302:	fb02 f101 	mul.w	r1, r2, r1
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	440a      	add	r2, r1
 800430a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 800430e:	493e      	ldr	r1, [pc, #248]	; (8004408 <display_align_curves+0x16c>)
 8004310:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004314:	fb03 f202 	mul.w	r2, r3, r2
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4413      	add	r3, r2
 800431c:	4602      	mov	r2, r0
 800431e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800432e:	d3db      	bcc.n	80042e8 <display_align_curves+0x4c>
		}
		return SAMPLE_BUF_SIZE;
 8004330:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8004334:	e05b      	b.n	80043ee <display_align_curves+0x152>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <display_align_curves+0x164>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	e022      	b.n	8004384 <display_align_curves+0xe8>
		dest_idx++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8004344:	4a2f      	ldr	r2, [pc, #188]	; (8004404 <display_align_curves+0x168>)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800434c:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <display_align_curves+0x16c>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 8004354:	79fa      	ldrb	r2, [r7, #7]
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	482a      	ldr	r0, [pc, #168]	; (8004404 <display_align_curves+0x168>)
 800435a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800435e:	fb02 f101 	mul.w	r1, r2, r1
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	440a      	add	r2, r1
 8004366:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 800436a:	4927      	ldr	r1, [pc, #156]	; (8004408 <display_align_curves+0x16c>)
 800436c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004370:	fb03 f202 	mul.w	r2, r3, r2
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	4602      	mov	r2, r0
 800437a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	3301      	adds	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800438a:	d3d8      	bcc.n	800433e <display_align_curves+0xa2>
	}

	continue_at = SAMPLE_BUF_OVERLAP;
 800438c:	2314      	movs	r3, #20
 800438e:	603b      	str	r3, [r7, #0]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	e022      	b.n	80043dc <display_align_curves+0x140>
		dest_idx++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <display_align_curves+0x168>)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <display_align_curves+0x16c>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 80043ac:	79fa      	ldrb	r2, [r7, #7]
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	4814      	ldr	r0, [pc, #80]	; (8004404 <display_align_curves+0x168>)
 80043b2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80043b6:	fb02 f101 	mul.w	r1, r2, r1
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	440a      	add	r2, r1
 80043be:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80043c2:	4911      	ldr	r1, [pc, #68]	; (8004408 <display_align_curves+0x16c>)
 80043c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80043c8:	fb03 f202 	mul.w	r2, r3, r2
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	4602      	mov	r2, r0
 80043d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3301      	adds	r3, #1
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <display_align_curves+0x164>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	dbd7      	blt.n	8004396 <display_align_curves+0xfa>
	}

	return ++dest_idx;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000462 	.word	0x20000462
 8004400:	2000026c 	.word	0x2000026c
 8004404:	200074dc 	.word	0x200074dc
 8004408:	200007b0 	.word	0x200007b0

0800440c <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 800440c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440e:	b08b      	sub	sp, #44	; 0x2c
 8004410:	af06      	add	r7, sp, #24
 8004412:	4603      	mov	r3, r0
 8004414:	80fb      	strh	r3, [r7, #6]
 8004416:	460b      	mov	r3, r1
 8004418:	717b      	strb	r3, [r7, #5]
 800441a:	4613      	mov	r3, r2
 800441c:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 800441e:	797b      	ldrb	r3, [r7, #5]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <draw_curve+0x20>
 8004424:	4b65      	ldr	r3, [pc, #404]	; (80045bc <draw_curve+0x1b0>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 800442c:	4b64      	ldr	r3, [pc, #400]	; (80045c0 <draw_curve+0x1b4>)
 800442e:	881a      	ldrh	r2, [r3, #0]
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <draw_curve+0x1b8>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b02      	subs	r3, #2
 800443a:	b299      	uxth	r1, r3
 800443c:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <draw_curve+0x1bc>)
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	2302      	movs	r3, #2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	b29a      	uxth	r2, r3
 800444a:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <draw_curve+0x1b8>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	2000      	movs	r0, #0
 8004450:	9000      	str	r0, [sp, #0]
 8004452:	2002      	movs	r0, #2
 8004454:	f003 fc30 	bl	8007cb8 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8004458:	4b58      	ldr	r3, [pc, #352]	; (80045bc <draw_curve+0x1b0>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8004460:	4b5a      	ldr	r3, [pc, #360]	; (80045cc <draw_curve+0x1c0>)
 8004462:	889a      	ldrh	r2, [r3, #4]
 8004464:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <draw_curve+0x1c4>)
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	4413      	add	r3, r2
 800446a:	b29c      	uxth	r4, r3
 800446c:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <draw_curve+0x1c8>)
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	4b56      	ldr	r3, [pc, #344]	; (80045cc <draw_curve+0x1c0>)
 8004472:	88db      	ldrh	r3, [r3, #6]
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	b29d      	uxth	r5, r3
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <draw_curve+0x1c0>)
 800447e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004482:	9204      	str	r2, [sp, #16]
 8004484:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004488:	9203      	str	r2, [sp, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	9202      	str	r2, [sp, #8]
 800448e:	466e      	mov	r6, sp
 8004490:	1d1a      	adds	r2, r3, #4
 8004492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004496:	e886 0003 	stmia.w	r6, {r0, r1}
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a4e      	ldr	r2, [pc, #312]	; (80045d8 <draw_curve+0x1cc>)
 800449e:	4629      	mov	r1, r5
 80044a0:	4620      	mov	r0, r4
 80044a2:	f004 fd2f 	bl	8008f04 <Displ_WString>
		return;
 80044a6:	e086      	b.n	80045b6 <draw_curve+0x1aa>
	}

	if (centre_zero) {
 80044a8:	793b      	ldrb	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04c      	beq.n	8004548 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_x_size, curve_y_zero, WHITE);
 80044ae:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <draw_curve+0x1c4>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b218      	sxth	r0, r3
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <draw_curve+0x1c8>)
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b219      	sxth	r1, r3
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <draw_curve+0x1c4>)
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <draw_curve+0x1d0>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	4413      	add	r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b21a      	sxth	r2, r3
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <draw_curve+0x1c8>)
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80044d2:	9400      	str	r4, [sp, #0]
 80044d4:	f003 ff8d 	bl	80083f2 <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_x_size; x++) {
 80044d8:	2301      	movs	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e02d      	b.n	800453a <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <draw_curve+0x1c4>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	4413      	add	r3, r2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b218      	sxth	r0, r3
 80044f0:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <draw_curve+0x1c8>)
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	4939      	ldr	r1, [pc, #228]	; (80045e0 <draw_curve+0x1d4>)
 80044fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	b219      	sxth	r1, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	b29a      	uxth	r2, r3
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <draw_curve+0x1c4>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	4413      	add	r3, r2
 8004510:	b29b      	uxth	r3, r3
 8004512:	b21c      	sxth	r4, r3
 8004514:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <draw_curve+0x1c8>)
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	4d31      	ldr	r5, [pc, #196]	; (80045e0 <draw_curve+0x1d4>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004520:	b29b      	uxth	r3, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	b29b      	uxth	r3, r3
 8004526:	b21a      	sxth	r2, r3
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	4622      	mov	r2, r4
 8004530:	f003 ff5f 	bl	80083f2 <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <draw_curve+0x1d0>)
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4293      	cmp	r3, r2
 8004544:	dbcb      	blt.n	80044de <draw_curve+0xd2>
 8004546:	e036      	b.n	80045b6 <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_x_size; x++) {
 8004548:	2301      	movs	r3, #1
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	e02d      	b.n	80045aa <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	b29a      	uxth	r2, r3
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <draw_curve+0x1c4>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	4413      	add	r3, r2
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	b218      	sxth	r0, r3
 8004560:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <draw_curve+0x1c8>)
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	3b01      	subs	r3, #1
 8004568:	491d      	ldr	r1, [pc, #116]	; (80045e0 <draw_curve+0x1d4>)
 800456a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800456e:	b29b      	uxth	r3, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	b219      	sxth	r1, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	b29a      	uxth	r2, r3
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <draw_curve+0x1c4>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	4413      	add	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	b21c      	sxth	r4, r3
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <draw_curve+0x1c8>)
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	4d15      	ldr	r5, [pc, #84]	; (80045e0 <draw_curve+0x1d4>)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004590:	b29b      	uxth	r3, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	b29b      	uxth	r3, r3
 8004596:	b21a      	sxth	r2, r3
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	4622      	mov	r2, r4
 80045a0:	f003 ff27 	bl	80083f2 <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <draw_curve+0x1d0>)
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4293      	cmp	r3, r2
 80045b4:	dbcb      	blt.n	800454e <draw_curve+0x142>
		}
	}
}
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045bc:	200002bc 	.word	0x200002bc
 80045c0:	200020d4 	.word	0x200020d4
 80045c4:	20000008 	.word	0x20000008
 80045c8:	200020d2 	.word	0x200020d2
 80045cc:	20000024 	.word	0x20000024
 80045d0:	2000000a 	.word	0x2000000a
 80045d4:	200007ac 	.word	0x200007ac
 80045d8:	08013748 	.word	0x08013748
 80045dc:	200007ae 	.word	0x200007ae
 80045e0:	20000464 	.word	0x20000464

080045e4 <make_curve>:
 *             represents plus/minus values centered around the half way point of the data range.
 *          The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 * @ para bufnum      Sample buffer to use for curve
 * @ para auto_scale  1 = scale to fit available screen area, 0 = use ADC full scale
 */
void make_curve(uint8_t bufnum, uint8_t auto_scale) {
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b095      	sub	sp, #84	; 0x54
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	460a      	mov	r2, r1
 80045ee:	71fb      	strb	r3, [r7, #7]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71bb      	strb	r3, [r7, #6]
	int value;
	int scale_factor = 1;
 80045f4:	2301      	movs	r3, #1
 80045f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	int src_idx = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	64bb      	str	r3, [r7, #72]	; 0x48
	int range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80045fc:	79fa      	ldrb	r2, [r7, #7]
 80045fe:	49b3      	ldr	r1, [pc, #716]	; (80048cc <make_curve+0x2e8>)
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3302      	adds	r3, #2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	79fa      	ldrb	r2, [r7, #7]
 8004612:	49ae      	ldr	r1, [pc, #696]	; (80048cc <make_curve+0x2e8>)
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	1ac3      	subs	r3, r0, r3
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
	int zero_value = range / 2 + sample_buf_meta[bufnum].min;	// zero should be half way if DC-Bias is accurate
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	0fda      	lsrs	r2, r3, #31
 8004628:	4413      	add	r3, r2
 800462a:	105b      	asrs	r3, r3, #1
 800462c:	4618      	mov	r0, r3
 800462e:	79fa      	ldrb	r2, [r7, #7]
 8004630:	49a6      	ldr	r1, [pc, #664]	; (80048cc <make_curve+0x2e8>)
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	4403      	add	r3, r0
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
	int curve_y_min;
	float fScale;

	if (auto_scale) {
 8004642:	79bb      	ldrb	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <make_curve+0x84>
		fScale = (float)curve_y_size / (float)range;
 8004648:	4ba1      	ldr	r3, [pc, #644]	; (80048d0 <make_curve+0x2ec>)
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800465e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004662:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8004666:	e00b      	b.n	8004680 <make_curve+0x9c>
	} else {
		fScale = (float)curve_y_size / ADC_FS_RAW;
 8004668:	4b99      	ldr	r3, [pc, #612]	; (80048d0 <make_curve+0x2ec>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004674:	eddf 6a97 	vldr	s13, [pc, #604]	; 80048d4 <make_curve+0x2f0>
 8004678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	if (fScale < 1) {
 8004680:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	d51f      	bpl.n	80046d2 <make_curve+0xee>
		scale_factor = trunc(1/fScale)+1; // divisor
 8004692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004696:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800469a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800469e:	ee16 0a90 	vmov	r0, s13
 80046a2:	f7fb ff71 	bl	8000588 <__aeabi_f2d>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	ec43 2b10 	vmov	d0, r2, r3
 80046ae:	f00e fe47 	bl	8013340 <trunc>
 80046b2:	ec51 0b10 	vmov	r0, r1, d0
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	4b87      	ldr	r3, [pc, #540]	; (80048d8 <make_curve+0x2f4>)
 80046bc:	f7fb fe06 	bl	80002cc <__adddf3>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	f7fc fa66 	bl	8000b98 <__aeabi_d2iz>
 80046cc:	4603      	mov	r3, r0
 80046ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d0:	e010      	b.n	80046f4 <make_curve+0x110>
	} else {
		scale_factor = trunc(fScale);	// multiplier
 80046d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80046d4:	f7fb ff58 	bl	8000588 <__aeabi_f2d>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	ec43 2b10 	vmov	d0, r2, r3
 80046e0:	f00e fe2e 	bl	8013340 <trunc>
 80046e4:	ec53 2b10 	vmov	r2, r3, d0
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	f7fc fa54 	bl	8000b98 <__aeabi_d2iz>
 80046f0:	4603      	mov	r3, r0
 80046f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	curve_x_size = display_align_curves() / 2;		// half the data points to fit screen size
 80046f4:	f7ff fdd2 	bl	800429c <display_align_curves>
 80046f8:	4603      	mov	r3, r0
 80046fa:	0fda      	lsrs	r2, r3, #31
 80046fc:	4413      	add	r3, r2
 80046fe:	105b      	asrs	r3, r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <make_curve+0x2f8>)
 8004704:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8004706:	4b72      	ldr	r3, [pc, #456]	; (80048d0 <make_curve+0x2ec>)
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	f1c3 0301 	rsb	r3, r3, #1
 8004712:	633b      	str	r3, [r7, #48]	; 0x30

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8004714:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800471c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004724:	d567      	bpl.n	80047f6 <make_curve+0x212>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	496d      	ldr	r1, [pc, #436]	; (80048e0 <make_curve+0x2fc>)
 800472a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800472e:	fb03 f202 	mul.w	r2, r3, r2
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	4413      	add	r3, r2
 8004736:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800473a:	461c      	mov	r4, r3
 800473c:	79fa      	ldrb	r2, [r7, #7]
 800473e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004740:	3301      	adds	r3, #1
 8004742:	4967      	ldr	r1, [pc, #412]	; (80048e0 <make_curve+0x2fc>)
 8004744:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004748:	fb00 f202 	mul.w	r2, r0, r2
 800474c:	4413      	add	r3, r2
 800474e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004752:	4423      	add	r3, r4
 8004754:	0fda      	lsrs	r2, r3, #31
 8004756:	4413      	add	r3, r2
 8004758:	105b      	asrs	r3, r3, #1
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 800475c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004760:	1ad2      	subs	r2, r2, r3
 8004762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004764:	fb92 f3f3 	sdiv	r3, r2, r3
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4293      	cmp	r3, r2
 8004774:	bfb8      	it	lt
 8004776:	4613      	movlt	r3, r2
 8004778:	4a5a      	ldr	r2, [pc, #360]	; (80048e4 <make_curve+0x300>)
 800477a:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800477c:	2301      	movs	r3, #1
 800477e:	643b      	str	r3, [r7, #64]	; 0x40
 8004780:	e032      	b.n	80047e8 <make_curve+0x204>
			src_idx+=2;
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004784:	3302      	adds	r3, #2
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	4955      	ldr	r1, [pc, #340]	; (80048e0 <make_curve+0x2fc>)
 800478c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004790:	fb03 f202 	mul.w	r2, r3, r2
 8004794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004796:	4413      	add	r3, r2
 8004798:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800479c:	461c      	mov	r4, r3
 800479e:	79fa      	ldrb	r2, [r7, #7]
 80047a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a2:	3301      	adds	r3, #1
 80047a4:	494e      	ldr	r1, [pc, #312]	; (80048e0 <make_curve+0x2fc>)
 80047a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80047aa:	fb00 f202 	mul.w	r2, r0, r2
 80047ae:	4413      	add	r3, r2
 80047b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047b4:	4423      	add	r3, r4
 80047b6:	0fda      	lsrs	r2, r3, #31
 80047b8:	4413      	add	r3, r2
 80047ba:	105b      	asrs	r3, r3, #1
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 80047be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	bfb8      	it	lt
 80047d8:	461a      	movlt	r2, r3
 80047da:	4942      	ldr	r1, [pc, #264]	; (80048e4 <make_curve+0x300>)
 80047dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	3301      	adds	r3, #1
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40
 80047e8:	4b3c      	ldr	r3, [pc, #240]	; (80048dc <make_curve+0x2f8>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f0:	4293      	cmp	r3, r2
 80047f2:	dbc6      	blt.n	8004782 <make_curve+0x19e>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 80047f4:	e066      	b.n	80048c4 <make_curve+0x2e0>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	4939      	ldr	r1, [pc, #228]	; (80048e0 <make_curve+0x2fc>)
 80047fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80047fe:	fb03 f202 	mul.w	r2, r3, r2
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	4413      	add	r3, r2
 8004806:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800480a:	461c      	mov	r4, r3
 800480c:	79fa      	ldrb	r2, [r7, #7]
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	3301      	adds	r3, #1
 8004812:	4933      	ldr	r1, [pc, #204]	; (80048e0 <make_curve+0x2fc>)
 8004814:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004818:	fb00 f202 	mul.w	r2, r0, r2
 800481c:	4413      	add	r3, r2
 800481e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004822:	4423      	add	r3, r4
 8004824:	0fda      	lsrs	r2, r3, #31
 8004826:	4413      	add	r3, r2
 8004828:	105b      	asrs	r3, r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	1ad2      	subs	r2, r2, r3
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	4293      	cmp	r3, r2
 8004844:	bfb8      	it	lt
 8004846:	4613      	movlt	r3, r2
 8004848:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <make_curve+0x300>)
 800484a:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800484c:	2301      	movs	r3, #1
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004850:	e032      	b.n	80048b8 <make_curve+0x2d4>
			src_idx+=2;
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	3302      	adds	r3, #2
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	4921      	ldr	r1, [pc, #132]	; (80048e0 <make_curve+0x2fc>)
 800485c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004860:	fb03 f202 	mul.w	r2, r3, r2
 8004864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004866:	4413      	add	r3, r2
 8004868:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800486c:	461c      	mov	r4, r3
 800486e:	79fa      	ldrb	r2, [r7, #7]
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	3301      	adds	r3, #1
 8004874:	491a      	ldr	r1, [pc, #104]	; (80048e0 <make_curve+0x2fc>)
 8004876:	f44f 7048 	mov.w	r0, #800	; 0x320
 800487a:	fb00 f202 	mul.w	r2, r0, r2
 800487e:	4413      	add	r3, r2
 8004880:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004884:	4423      	add	r3, r4
 8004886:	0fda      	lsrs	r2, r3, #31
 8004888:	4413      	add	r3, r2
 800488a:	105b      	asrs	r3, r3, #1
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	bfb8      	it	lt
 80048a8:	461a      	movlt	r2, r3
 80048aa:	490e      	ldr	r1, [pc, #56]	; (80048e4 <make_curve+0x300>)
 80048ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 80048b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b4:	3301      	adds	r3, #1
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <make_curve+0x2f8>)
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	4293      	cmp	r3, r2
 80048c2:	dbc6      	blt.n	8004852 <make_curve+0x26e>
}
 80048c4:	bf00      	nop
 80048c6:	3754      	adds	r7, #84	; 0x54
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	2000026c 	.word	0x2000026c
 80048d0:	20000008 	.word	0x20000008
 80048d4:	457ff000 	.word	0x457ff000
 80048d8:	3ff00000 	.word	0x3ff00000
 80048dc:	200007ae 	.word	0x200007ae
 80048e0:	200007b0 	.word	0x200007b0
 80048e4:	20000464 	.word	0x20000464

080048e8 <display_show_curves>:

/*
 * @brief   Display curves for voltage + selected current channels on TFT display
 */
void display_show_curves(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	uint8_t adc_channel;
	make_curve(ADC_CH_V, 0);
 80048ee:	2100      	movs	r1, #0
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7ff fe77 	bl	80045e4 <make_curve>
	draw_curve(channel_colour[ADC_CH_V], 0, (sample_buf_meta[ADC_CH_V].zero_cross_pos >= 0));
 80048f6:	4b25      	ldr	r3, [pc, #148]	; (800498c <display_show_curves+0xa4>)
 80048f8:	8818      	ldrh	r0, [r3, #0]
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <display_show_curves+0xa8>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	43db      	mvns	r3, r3
 8004900:	0fdb      	lsrs	r3, r3, #31
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	2100      	movs	r1, #0
 8004908:	f7ff fd80 	bl	800440c <draw_curve>

	switch(display_channel) {
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <display_show_curves+0xac>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d00c      	beq.n	800492e <display_show_curves+0x46>
 8004914:	2b02      	cmp	r3, #2
 8004916:	dc0d      	bgt.n	8004934 <display_show_curves+0x4c>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <display_show_curves+0x3a>
 800491c:	2b01      	cmp	r3, #1
 800491e:	d003      	beq.n	8004928 <display_show_curves+0x40>
 8004920:	e008      	b.n	8004934 <display_show_curves+0x4c>
	case I1:
		adc_channel = ADC_CH_I1;
 8004922:	2302      	movs	r3, #2
 8004924:	71fb      	strb	r3, [r7, #7]
		break;
 8004926:	e007      	b.n	8004938 <display_show_curves+0x50>
	case I2:
		adc_channel = ADC_CH_I2;
 8004928:	2303      	movs	r3, #3
 800492a:	71fb      	strb	r3, [r7, #7]
		break;
 800492c:	e004      	b.n	8004938 <display_show_curves+0x50>
	case I3:
		adc_channel = ADC_CH_I3;
 800492e:	2301      	movs	r3, #1
 8004930:	71fb      	strb	r3, [r7, #7]
		break;
 8004932:	e001      	b.n	8004938 <display_show_curves+0x50>
	default:
		adc_channel = ADC_CH_I1;
 8004934:	2302      	movs	r3, #2
 8004936:	71fb      	strb	r3, [r7, #7]
	}
	if (!sample_buf_meta[adc_channel].value_is_zero) {
 8004938:	79fa      	ldrb	r2, [r7, #7]
 800493a:	4915      	ldr	r1, [pc, #84]	; (8004990 <display_show_curves+0xa8>)
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	330d      	adds	r3, #13
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11a      	bne.n	8004984 <display_show_curves+0x9c>
		make_curve(adc_channel, 1);
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fe46 	bl	80045e4 <make_curve>
		draw_curve(channel_colour[display_channel+1], 1, (sample_buf_meta[adc_channel].zero_cross_pos >= 0));
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <display_show_curves+0xac>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	4a0b      	ldr	r2, [pc, #44]	; (800498c <display_show_curves+0xa4>)
 8004960:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8004964:	79fa      	ldrb	r2, [r7, #7]
 8004966:	490a      	ldr	r1, [pc, #40]	; (8004990 <display_show_curves+0xa8>)
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	3304      	adds	r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	43db      	mvns	r3, r3
 8004978:	0fdb      	lsrs	r3, r3, #31
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	f7ff fd44 	bl	800440c <draw_curve>
	}
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000000 	.word	0x20000000
 8004990:	2000026c 	.word	0x2000026c
 8004994:	20000462 	.word	0x20000462

08004998 <ee24_isConnected>:

/*
 * @ brief  Check if EEPROM device is present
 */
bool ee24_isConnected(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 200)!=HAL_OK)
 800499c:	23c8      	movs	r3, #200	; 0xc8
 800499e:	2202      	movs	r2, #2
 80049a0:	21a0      	movs	r1, #160	; 0xa0
 80049a2:	4805      	ldr	r0, [pc, #20]	; (80049b8 <ee24_isConnected+0x20>)
 80049a4:	f007 f818 	bl	800b9d8 <HAL_I2C_IsDeviceReady>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <ee24_isConnected+0x1a>
		return false;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <ee24_isConnected+0x1c>

	return true;
 80049b2:	2301      	movs	r3, #1
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000222c 	.word	0x2000222c

080049bc <ee24_write_byte>:

/*
 * @ brief  Blocking call to write one byte to EEPROM
 */
bool ee24_write_byte(uint16_t address, uint8_t *data)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af04      	add	r7, sp, #16
 80049c2:	4603      	mov	r3, r0
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <ee24_write_byte+0x68>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <ee24_write_byte+0x18>
 80049d0:	2300      	movs	r3, #0
 80049d2:	e023      	b.n	8004a1c <ee24_write_byte+0x60>
	ee24_lock = 1;
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <ee24_write_byte+0x68>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	2364      	movs	r3, #100	; 0x64
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	2301      	movs	r3, #1
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2301      	movs	r3, #1
 80049ea:	21a0      	movs	r1, #160	; 0xa0
 80049ec:	480e      	ldr	r0, [pc, #56]	; (8004a28 <ee24_write_byte+0x6c>)
 80049ee:	f006 fcd3 	bl	800b398 <HAL_I2C_Mem_Write>
 80049f2:	4603      	mov	r3, r0
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <ee24_write_byte+0x70>)
 80049f8:	701a      	strb	r2, [r3, #0]
	//ee24_result = HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1);
	if (ee24_result != HAL_OK)
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <ee24_write_byte+0x70>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <ee24_write_byte+0x58>
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <ee24_write_byte+0x6c>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <ee24_write_byte+0x74>)
 8004a08:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <ee24_write_byte+0x68>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
		return false;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e003      	b.n	8004a1c <ee24_write_byte+0x60>
	}
	ee24_lock = 0;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <ee24_write_byte+0x68>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
	return true;
 8004a1a:	2301      	movs	r3, #1
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	200020d6 	.word	0x200020d6
 8004a28:	2000222c 	.word	0x2000222c
 8004a2c:	200020d7 	.word	0x200020d7
 8004a30:	200020d8 	.word	0x200020d8

08004a34 <ee24_write_word>:

/*
 * @ brief  Blocking call to write one word to EEPROM
 */
bool ee24_write_word(uint16_t address, uint16_t *data)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <ee24_write_word+0x68>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <ee24_write_word+0x18>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e023      	b.n	8004a94 <ee24_write_word+0x60>
	ee24_lock = 1;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <ee24_write_word+0x68>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100);
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	2364      	movs	r3, #100	; 0x64
 8004a56:	9302      	str	r3, [sp, #8]
 8004a58:	2302      	movs	r3, #2
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2301      	movs	r3, #1
 8004a62:	21a0      	movs	r1, #160	; 0xa0
 8004a64:	480e      	ldr	r0, [pc, #56]	; (8004aa0 <ee24_write_word+0x6c>)
 8004a66:	f006 fc97 	bl	800b398 <HAL_I2C_Mem_Write>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <ee24_write_word+0x70>)
 8004a70:	701a      	strb	r2, [r3, #0]
	//ee24_result = HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2);
	if (ee24_result != HAL_OK)
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <ee24_write_word+0x70>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <ee24_write_word+0x58>
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <ee24_write_word+0x6c>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <ee24_write_word+0x74>)
 8004a80:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <ee24_write_word+0x68>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
		return false;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e003      	b.n	8004a94 <ee24_write_word+0x60>
	}
	ee24_lock = 0;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <ee24_write_word+0x68>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
	return true;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200020d6 	.word	0x200020d6
 8004aa0:	2000222c 	.word	0x2000222c
 8004aa4:	200020d7 	.word	0x200020d7
 8004aa8:	200020d8 	.word	0x200020d8

08004aac <ee24_write>:
/*
 * @brief    Blocking call to write bytes to EEPROM
 * @retval   true on success
 */
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4603      	mov	r3, r0
 8004aba:	81fb      	strh	r3, [r7, #14]
	bool retval = false;
 8004abc:	2300      	movs	r3, #0
 8004abe:	75fb      	strb	r3, [r7, #23]
	uint16_t first = address, last=address+len;
 8004ac0:	89fb      	ldrh	r3, [r7, #14]
 8004ac2:	82bb      	strh	r3, [r7, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	89fb      	ldrh	r3, [r7, #14]
 8004aca:	4413      	add	r3, r2
 8004acc:	827b      	strh	r3, [r7, #18]
	// check if all bytes are within page (16 byte) boundary
	if ( (first & 0xF0) != (last & 0xF0) ) {
 8004ace:	8aba      	ldrh	r2, [r7, #20]
 8004ad0:	8a7b      	ldrh	r3, [r7, #18]
 8004ad2:	4053      	eors	r3, r2
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <ee24_write+0x36>
		return false;		// fail if write goes outside page boundary
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e01e      	b.n	8004b20 <ee24_write+0x74>
	}

	if (ee24_lock == 1) return false;
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <ee24_write+0x7c>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <ee24_write+0x42>
 8004aea:	2300      	movs	r3, #0
 8004aec:	e018      	b.n	8004b20 <ee24_write+0x74>
	ee24_lock = 1;
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <ee24_write+0x7c>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	89fa      	ldrh	r2, [r7, #14]
 8004afa:	2164      	movs	r1, #100	; 0x64
 8004afc:	9102      	str	r1, [sp, #8]
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2301      	movs	r3, #1
 8004b06:	21a0      	movs	r1, #160	; 0xa0
 8004b08:	4808      	ldr	r0, [pc, #32]	; (8004b2c <ee24_write+0x80>)
 8004b0a:	f006 fc45 	bl	800b398 <HAL_I2C_Mem_Write>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <ee24_write+0x6c>
		retval = true;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
	}
	ee24_lock = 0;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <ee24_write+0x7c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
	return retval;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200020d6 	.word	0x200020d6
 8004b2c:	2000222c 	.word	0x2000222c

08004b30 <ee24_read_byte>:
/*
 * @brief    Blocking call to read one byte from EEPROM
 * @retval   true on success
 */
bool ee24_read_byte(uint8_t address, uint8_t *data)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af04      	add	r7, sp, #16
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <ee24_read_byte+0x6c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <ee24_read_byte+0x18>
 8004b44:	2300      	movs	r3, #0
 8004b46:	e024      	b.n	8004b92 <ee24_read_byte+0x62>
	ee24_lock = 1;
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <ee24_read_byte+0x6c>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	2364      	movs	r3, #100	; 0x64
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	2301      	movs	r3, #1
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2301      	movs	r3, #1
 8004b60:	21a0      	movs	r1, #160	; 0xa0
 8004b62:	480f      	ldr	r0, [pc, #60]	; (8004ba0 <ee24_read_byte+0x70>)
 8004b64:	f006 fd12 	bl	800b58c <HAL_I2C_Mem_Read>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <ee24_read_byte+0x74>)
 8004b6e:	701a      	strb	r2, [r3, #0]
	if (ee24_result != HAL_OK )
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <ee24_read_byte+0x74>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <ee24_read_byte+0x5a>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1) != HAL_OK)
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <ee24_read_byte+0x70>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <ee24_read_byte+0x78>)
 8004b7e:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <ee24_read_byte+0x6c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		return false;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e003      	b.n	8004b92 <ee24_read_byte+0x62>
	}
	ee24_lock = 0;
 8004b8a:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <ee24_read_byte+0x6c>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
	return true;
 8004b90:	2301      	movs	r3, #1
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200020d6 	.word	0x200020d6
 8004ba0:	2000222c 	.word	0x2000222c
 8004ba4:	200020d7 	.word	0x200020d7
 8004ba8:	200020d8 	.word	0x200020d8

08004bac <ee24_read_word>:

/*
 * @ brief  Blocking call to read one word from EEPROM
 */
bool ee24_read_word(uint8_t address, uint16_t *data)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af04      	add	r7, sp, #16
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	6039      	str	r1, [r7, #0]
 8004bb6:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 8004bb8:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <ee24_read_word+0x6c>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <ee24_read_word+0x18>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e024      	b.n	8004c0e <ee24_read_word+0x62>
	ee24_lock = 1;
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <ee24_read_word+0x6c>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	2364      	movs	r3, #100	; 0x64
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	21a0      	movs	r1, #160	; 0xa0
 8004bde:	480f      	ldr	r0, [pc, #60]	; (8004c1c <ee24_read_word+0x70>)
 8004be0:	f006 fcd4 	bl	800b58c <HAL_I2C_Mem_Read>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <ee24_read_word+0x74>)
 8004bea:	701a      	strb	r2, [r3, #0]
	if (ee24_result != HAL_OK)
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <ee24_read_word+0x74>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <ee24_read_word+0x5a>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <ee24_read_word+0x70>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <ee24_read_word+0x78>)
 8004bfa:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <ee24_read_word+0x6c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
		return false;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e003      	b.n	8004c0e <ee24_read_word+0x62>
	}
	ee24_lock = 0;
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <ee24_read_word+0x6c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
	return true;
 8004c0c:	2301      	movs	r3, #1
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200020d6 	.word	0x200020d6
 8004c1c:	2000222c 	.word	0x2000222c
 8004c20:	200020d7 	.word	0x200020d7
 8004c24:	200020d8 	.word	0x200020d8

08004c28 <ee24_read>:

/*
 * @ brief  Blocking call to read bytes from EEPROM
 */
bool ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4603      	mov	r3, r0
 8004c36:	81fb      	strh	r3, [r7, #14]
	if (ee24_lock == 1) return false;
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <ee24_read+0x70>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <ee24_read+0x1c>
 8004c40:	2300      	movs	r3, #0
 8004c42:	e024      	b.n	8004c8e <ee24_read+0x66>
	ee24_lock = 1;
 8004c44:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <ee24_read+0x70>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	89fa      	ldrh	r2, [r7, #14]
 8004c50:	2164      	movs	r1, #100	; 0x64
 8004c52:	9102      	str	r1, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	21a0      	movs	r1, #160	; 0xa0
 8004c5e:	480f      	ldr	r0, [pc, #60]	; (8004c9c <ee24_read+0x74>)
 8004c60:	f006 fc94 	bl	800b58c <HAL_I2C_Mem_Read>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <ee24_read+0x78>)
 8004c6a:	701a      	strb	r2, [r3, #0]
	//ee24_result = HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len)
	if (ee24_result != HAL_OK )
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <ee24_read+0x78>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <ee24_read+0x5e>
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <ee24_read+0x74>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <ee24_read+0x7c>)
 8004c7a:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <ee24_read+0x70>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
		return false;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e003      	b.n	8004c8e <ee24_read+0x66>
	}
	ee24_lock = 0;
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <ee24_read+0x70>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
	return true;
 8004c8c:	2301      	movs	r3, #1
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200020d6 	.word	0x200020d6
 8004c9c:	2000222c 	.word	0x2000222c
 8004ca0:	200020d7 	.word	0x200020d7
 8004ca4:	200020d8 	.word	0x200020d8

08004ca8 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8004cac:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8004cb0:	490d      	ldr	r1, [pc, #52]	; (8004ce8 <start_adcs+0x40>)
 8004cb2:	480e      	ldr	r0, [pc, #56]	; (8004cec <start_adcs+0x44>)
 8004cb4:	f004 ff60 	bl	8009b78 <HAL_ADC_Start_DMA>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 8004cbe:	480c      	ldr	r0, [pc, #48]	; (8004cf0 <start_adcs+0x48>)
 8004cc0:	f001 ff52 	bl	8006b68 <term_print>
  	  Error_Handler();
 8004cc4:	f001 fae6 	bl	8006294 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8004cc8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8004ccc:	4909      	ldr	r1, [pc, #36]	; (8004cf4 <start_adcs+0x4c>)
 8004cce:	480a      	ldr	r0, [pc, #40]	; (8004cf8 <start_adcs+0x50>)
 8004cd0:	f004 ff52 	bl	8009b78 <HAL_ADC_Start_DMA>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 8004cda:	4808      	ldr	r0, [pc, #32]	; (8004cfc <start_adcs+0x54>)
 8004cdc:	f001 ff44 	bl	8006b68 <term_print>
 	  Error_Handler();
 8004ce0:	f001 fad8 	bl	8006294 <Error_Handler>
	}
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	2000261c 	.word	0x2000261c
 8004cec:	200020dc 	.word	0x200020dc
 8004cf0:	08013754 	.word	0x08013754
 8004cf4:	2000405c 	.word	0x2000405c
 8004cf8:	20002124 	.word	0x20002124
 8004cfc:	08013770 	.word	0x08013770

08004d00 <adjust_TIM2_period>:
 * with every TIM2 call
 * @para newPeriod  New timer value, must be between 2000 and 2500
 * @para store      1 to store value in eeprom
 * @retval          -1 on failure, 0 on success
 */
int adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	460a      	mov	r2, r1
 8004d0a:	80fb      	strh	r3, [r7, #6]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d803      	bhi.n	8004d22 <adjust_TIM2_period+0x22>
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d20:	d207      	bcs.n	8004d32 <adjust_TIM2_period+0x32>
		term_print("Invalid period for TIM2 (%u)\r\n", newPeriod);
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	4619      	mov	r1, r3
 8004d26:	481b      	ldr	r0, [pc, #108]	; (8004d94 <adjust_TIM2_period+0x94>)
 8004d28:	f001 ff1e 	bl	8006b68 <term_print>
		return -1;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d30:	e02c      	b.n	8004d8c <adjust_TIM2_period+0x8c>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 8004d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR %u\r\n", newPeriod);
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4816      	ldr	r0, [pc, #88]	; (8004d98 <adjust_TIM2_period+0x98>)
 8004d40:	f001 ff12 	bl	8006b68 <term_print>

	if (store) {
 8004d44:	797b      	ldrb	r3, [r7, #5]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01f      	beq.n	8004d8a <adjust_TIM2_period+0x8a>
		// Store new value in EEPROM memory
		eeprom_buf[0] = (newPeriod & 0xFF00) >> 8;	// High byte
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <adjust_TIM2_period+0x9c>)
 8004d54:	701a      	strb	r2, [r3, #0]
		eeprom_buf[1] = newPeriod & 0xFF;			// Low byte
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <adjust_TIM2_period+0x9c>)
 8004d5c:	705a      	strb	r2, [r3, #1]
		if (ee24_write_word(EEPROM_ADDR_TIM2ARR,(uint16_t *) &eeprom_buf) != true ) {
 8004d5e:	490f      	ldr	r1, [pc, #60]	; (8004d9c <adjust_TIM2_period+0x9c>)
 8004d60:	2002      	movs	r0, #2
 8004d62:	f7ff fe67 	bl	8004a34 <ee24_write_word>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f083 0301 	eor.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <adjust_TIM2_period+0x80>
			term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8004d72:	490b      	ldr	r1, [pc, #44]	; (8004da0 <adjust_TIM2_period+0xa0>)
 8004d74:	480b      	ldr	r0, [pc, #44]	; (8004da4 <adjust_TIM2_period+0xa4>)
 8004d76:	f001 fef7 	bl	8006b68 <term_print>
			return -1;
 8004d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d7e:	e005      	b.n	8004d8c <adjust_TIM2_period+0x8c>
		} else {
			term_print("TIM2 ARR %u saved to EEPROM\r\n", newPeriod);
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	4619      	mov	r1, r3
 8004d84:	4808      	ldr	r0, [pc, #32]	; (8004da8 <adjust_TIM2_period+0xa8>)
 8004d86:	f001 feef 	bl	8006b68 <term_print>
		}
	}
	return 0;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	0801378c 	.word	0x0801378c
 8004d98:	080137ac 	.word	0x080137ac
 8004d9c:	200025dc 	.word	0x200025dc
 8004da0:	08018ee8 	.word	0x08018ee8
 8004da4:	080137bc 	.word	0x080137bc
 8004da8:	080137e0 	.word	0x080137e0

08004dac <adjust_TIM3_period>:

int adjust_TIM3_period(uint16_t newPeriod, uint8_t store) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	460a      	mov	r2, r1
 8004db6:	80fb      	strh	r3, [r7, #6]
 8004db8:	4613      	mov	r3, r2
 8004dba:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 1500) || (newPeriod < 500) ) {
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d803      	bhi.n	8004dce <adjust_TIM3_period+0x22>
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dcc:	d207      	bcs.n	8004dde <adjust_TIM3_period+0x32>
		term_print("Invalid period for TIM3 (%u)\r\n", newPeriod);
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	481b      	ldr	r0, [pc, #108]	; (8004e40 <adjust_TIM3_period+0x94>)
 8004dd4:	f001 fec8 	bl	8006b68 <term_print>
		return -1;
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ddc:	e02c      	b.n	8004e38 <adjust_TIM3_period+0x8c>
	}
	TIM3->ARR = (uint32_t) newPeriod;	// change register directly
 8004dde:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <adjust_TIM3_period+0x98>)
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM3 ARR %u\r\n", TIM3->ARR);
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <adjust_TIM3_period+0x98>)
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	4619      	mov	r1, r3
 8004dea:	4817      	ldr	r0, [pc, #92]	; (8004e48 <adjust_TIM3_period+0x9c>)
 8004dec:	f001 febc 	bl	8006b68 <term_print>

	if (store) {
 8004df0:	797b      	ldrb	r3, [r7, #5]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01f      	beq.n	8004e36 <adjust_TIM3_period+0x8a>
		// Store new value in EEPROM memory
		eeprom_buf[0] = (newPeriod & 0xFF00) >> 8;	// High byte
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <adjust_TIM3_period+0xa0>)
 8004e00:	701a      	strb	r2, [r3, #0]
		eeprom_buf[1] = newPeriod & 0xFF;			// Low byte
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <adjust_TIM3_period+0xa0>)
 8004e08:	705a      	strb	r2, [r3, #1]
		if (ee24_write_word(EEPROM_ADDR_TIM3ARR,(uint16_t *) &eeprom_buf) != true ) {
 8004e0a:	4910      	ldr	r1, [pc, #64]	; (8004e4c <adjust_TIM3_period+0xa0>)
 8004e0c:	2006      	movs	r0, #6
 8004e0e:	f7ff fe11 	bl	8004a34 <ee24_write_word>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f083 0301 	eor.w	r3, r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <adjust_TIM3_period+0x80>
			term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8004e1e:	490c      	ldr	r1, [pc, #48]	; (8004e50 <adjust_TIM3_period+0xa4>)
 8004e20:	480c      	ldr	r0, [pc, #48]	; (8004e54 <adjust_TIM3_period+0xa8>)
 8004e22:	f001 fea1 	bl	8006b68 <term_print>
			return -1;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e2a:	e005      	b.n	8004e38 <adjust_TIM3_period+0x8c>
		} else {
			term_print("TIM3 ARR %u saved to EEPROM\r\n", newPeriod);
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <adjust_TIM3_period+0xac>)
 8004e32:	f001 fe99 	bl	8006b68 <term_print>
		}
	}
	return 0;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	08013800 	.word	0x08013800
 8004e44:	40000400 	.word	0x40000400
 8004e48:	08013820 	.word	0x08013820
 8004e4c:	200025dc 	.word	0x200025dc
 8004e50:	08018efc 	.word	0x08018efc
 8004e54:	080137bc 	.word	0x080137bc
 8004e58:	08013830 	.word	0x08013830

08004e5c <set_modbus_address>:


int set_modbus_address(uint8_t newAddress, uint8_t store) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	460a      	mov	r2, r1
 8004e66:	71fb      	strb	r3, [r7, #7]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71bb      	strb	r3, [r7, #6]
	if ((newAddress > 254) || (newAddress < 2)) {
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	2bff      	cmp	r3, #255	; 0xff
 8004e70:	d002      	beq.n	8004e78 <set_modbus_address+0x1c>
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d807      	bhi.n	8004e88 <set_modbus_address+0x2c>
		term_print("Invalid Modbus Address (%d)\r\n", newAddress);
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4817      	ldr	r0, [pc, #92]	; (8004edc <set_modbus_address+0x80>)
 8004e7e:	f001 fe73 	bl	8006b68 <term_print>
		return -1;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e86:	e025      	b.n	8004ed4 <set_modbus_address+0x78>
	}
	modbus_address = newAddress;
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <set_modbus_address+0x84>)
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	7013      	strb	r3, [r2, #0]
	term_print("Modbus %d\r\n",modbus_address);
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <set_modbus_address+0x84>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <set_modbus_address+0x88>)
 8004e96:	f001 fe67 	bl	8006b68 <term_print>
	if (store) {
 8004e9a:	79bb      	ldrb	r3, [r7, #6]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d018      	beq.n	8004ed2 <set_modbus_address+0x76>
		// Store new value in EEPROM memory
		eeprom_buf[0] = newAddress;
 8004ea0:	4a11      	ldr	r2, [pc, #68]	; (8004ee8 <set_modbus_address+0x8c>)
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	7013      	strb	r3, [r2, #0]
		if (ee24_write_byte(EEPROM_ADDR_MODBUSADDR, (uint8_t*) &eeprom_buf) != true ) {
 8004ea6:	4910      	ldr	r1, [pc, #64]	; (8004ee8 <set_modbus_address+0x8c>)
 8004ea8:	2004      	movs	r0, #4
 8004eaa:	f7ff fd87 	bl	80049bc <ee24_write_byte>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f083 0301 	eor.w	r3, r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d006      	beq.n	8004ec8 <set_modbus_address+0x6c>
			term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8004eba:	490c      	ldr	r1, [pc, #48]	; (8004eec <set_modbus_address+0x90>)
 8004ebc:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <set_modbus_address+0x94>)
 8004ebe:	f001 fe53 	bl	8006b68 <term_print>
			return -1;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ec6:	e005      	b.n	8004ed4 <set_modbus_address+0x78>
		} else {
			term_print("Modbus Address %d saved to EEPROM\r\n", newAddress);
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4809      	ldr	r0, [pc, #36]	; (8004ef4 <set_modbus_address+0x98>)
 8004ece:	f001 fe4b 	bl	8006b68 <term_print>
		}
	}
	return 0;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	08013850 	.word	0x08013850
 8004ee0:	200025d8 	.word	0x200025d8
 8004ee4:	08013870 	.word	0x08013870
 8004ee8:	200025dc 	.word	0x200025dc
 8004eec:	08018f10 	.word	0x08018f10
 8004ef0:	080137bc 	.word	0x080137bc
 8004ef4:	0801387c 	.word	0x0801387c

08004ef8 <energy_totals_init>:
/*
 * @brief        Initialise energy totals from eeprom
 * @para reset   1 = reset energy values to zero and write to eeprom
 * @retval       0 on success, -1 on failure
 */
int energy_totals_init(uint8_t reset) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	71fb      	strb	r3, [r7, #7]
	int i;

	// read VAh from eeprom
	if ( ee24_read(EEPROM_ADDR_VAH, (uint8_t*) &eeprom_buf, 12, 100) != true ) {
 8004f02:	2364      	movs	r3, #100	; 0x64
 8004f04:	220c      	movs	r2, #12
 8004f06:	493e      	ldr	r1, [pc, #248]	; (8005000 <energy_totals_init+0x108>)
 8004f08:	20d0      	movs	r0, #208	; 0xd0
 8004f0a:	f7ff fe8d 	bl	8004c28 <ee24_read>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f083 0301 	eor.w	r3, r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <energy_totals_init+0x28>
		return -1;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f1e:	e06b      	b.n	8004ff8 <energy_totals_init+0x100>
	}

	// check if we have a blank eeprom (all bytes 0xFF)
	for (i=0; i<12; i++){
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e009      	b.n	8004f3a <energy_totals_init+0x42>
		if (eeprom_buf[i] != 0xFF) break;	// abort loop if we have valid entry
 8004f26:	4a36      	ldr	r2, [pc, #216]	; (8005000 <energy_totals_init+0x108>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2bff      	cmp	r3, #255	; 0xff
 8004f32:	d106      	bne.n	8004f42 <energy_totals_init+0x4a>
	for (i=0; i<12; i++){
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b0b      	cmp	r3, #11
 8004f3e:	ddf2      	ble.n	8004f26 <energy_totals_init+0x2e>
 8004f40:	e000      	b.n	8004f44 <energy_totals_init+0x4c>
		if (eeprom_buf[i] != 0xFF) break;	// abort loop if we have valid entry
 8004f42:	bf00      	nop
	}
	if ((i >= 12) || (reset) ) {		// if all bytes were 0xFF (blank eeprom) or reset request
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b0b      	cmp	r3, #11
 8004f48:	dc02      	bgt.n	8004f50 <energy_totals_init+0x58>
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d03c      	beq.n	8004fca <energy_totals_init+0xd2>
		term_print("Init EEPROM with energy totals\r\n");
 8004f50:	482c      	ldr	r0, [pc, #176]	; (8005004 <energy_totals_init+0x10c>)
 8004f52:	f001 fe09 	bl	8006b68 <term_print>
		for (i=0; i<12; i++) {		// fill eeprom buffer with zero values
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e007      	b.n	8004f6c <energy_totals_init+0x74>
			eeprom_buf[i] = 0;
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <energy_totals_init+0x108>)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
		for (i=0; i<12; i++) {		// fill eeprom buffer with zero values
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b0b      	cmp	r3, #11
 8004f70:	ddf4      	ble.n	8004f5c <energy_totals_init+0x64>
		}
		HAL_Delay(EEPROM_DELAY);
 8004f72:	2004      	movs	r0, #4
 8004f74:	f004 fd98 	bl	8009aa8 <HAL_Delay>
		if (ee24_write(EEPROM_ADDR_VAH, (uint8_t*) &eeprom_buf, 12, 100) != true ) {
 8004f78:	2364      	movs	r3, #100	; 0x64
 8004f7a:	220c      	movs	r2, #12
 8004f7c:	4920      	ldr	r1, [pc, #128]	; (8005000 <energy_totals_init+0x108>)
 8004f7e:	20d0      	movs	r0, #208	; 0xd0
 8004f80:	f7ff fd94 	bl	8004aac <ee24_write>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <energy_totals_init+0xa6>
			term_print("%s() - Error: EEPROM init VAh failed\r\n", __FUNCTION__);
 8004f90:	491d      	ldr	r1, [pc, #116]	; (8005008 <energy_totals_init+0x110>)
 8004f92:	481e      	ldr	r0, [pc, #120]	; (800500c <energy_totals_init+0x114>)
 8004f94:	f001 fde8 	bl	8006b68 <term_print>
			return -1;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f9c:	e02c      	b.n	8004ff8 <energy_totals_init+0x100>
		}
		HAL_Delay(EEPROM_DELAY);
 8004f9e:	2004      	movs	r0, #4
 8004fa0:	f004 fd82 	bl	8009aa8 <HAL_Delay>
		if (ee24_write(EEPROM_ADDR_WH, (uint8_t*) &eeprom_buf, 12, 100) != true ) {
 8004fa4:	2364      	movs	r3, #100	; 0x64
 8004fa6:	220c      	movs	r2, #12
 8004fa8:	4915      	ldr	r1, [pc, #84]	; (8005000 <energy_totals_init+0x108>)
 8004faa:	20e0      	movs	r0, #224	; 0xe0
 8004fac:	f7ff fd7e 	bl	8004aac <ee24_write>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f083 0301 	eor.w	r3, r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <energy_totals_init+0xd2>
			term_print("%s() - Error: EEPROM init Wh failed\r\n", __FUNCTION__);
 8004fbc:	4912      	ldr	r1, [pc, #72]	; (8005008 <energy_totals_init+0x110>)
 8004fbe:	4814      	ldr	r0, [pc, #80]	; (8005010 <energy_totals_init+0x118>)
 8004fc0:	f001 fdd2 	bl	8006b68 <term_print>
			return -1;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc8:	e016      	b.n	8004ff8 <energy_totals_init+0x100>
		}
	}

	//term_print_hex((uint8_t*) &eeprom_buf, 12, 0);
	// move values into variables
	memcpy(&total_vah[0], (uint8_t*) &eeprom_buf, 12);
 8004fca:	220c      	movs	r2, #12
 8004fcc:	490c      	ldr	r1, [pc, #48]	; (8005000 <energy_totals_init+0x108>)
 8004fce:	4811      	ldr	r0, [pc, #68]	; (8005014 <energy_totals_init+0x11c>)
 8004fd0:	f00b f9ff 	bl	80103d2 <memcpy>

	// read Wh from eeprom
	HAL_Delay(EEPROM_DELAY);
 8004fd4:	2004      	movs	r0, #4
 8004fd6:	f004 fd67 	bl	8009aa8 <HAL_Delay>
	if (ee24_read(EEPROM_ADDR_WH, (uint8_t*) &eeprom_buf, 12, 100) == true) {
 8004fda:	2364      	movs	r3, #100	; 0x64
 8004fdc:	220c      	movs	r2, #12
 8004fde:	4908      	ldr	r1, [pc, #32]	; (8005000 <energy_totals_init+0x108>)
 8004fe0:	20e0      	movs	r0, #224	; 0xe0
 8004fe2:	f7ff fe21 	bl	8004c28 <ee24_read>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <energy_totals_init+0xfe>
		//term_print_hex((uint8_t*) &eeprom_buf, 12, 0);
		memcpy(&total_wh[0], (uint8_t*) &eeprom_buf, 12);
 8004fec:	220c      	movs	r2, #12
 8004fee:	4904      	ldr	r1, [pc, #16]	; (8005000 <energy_totals_init+0x108>)
 8004ff0:	4809      	ldr	r0, [pc, #36]	; (8005018 <energy_totals_init+0x120>)
 8004ff2:	f00b f9ee 	bl	80103d2 <memcpy>
	}
	return 0;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	200025dc 	.word	0x200025dc
 8005004:	080138a0 	.word	0x080138a0
 8005008:	08018f24 	.word	0x08018f24
 800500c:	080138c4 	.word	0x080138c4
 8005010:	080138ec 	.word	0x080138ec
 8005014:	2000821c 	.word	0x2000821c
 8005018:	20008228 	.word	0x20008228

0800501c <version_change>:
}

/*
 * @brief  Function to manage version change and update stored parameters
 */
void version_change(uint8_t old_major, uint8_t old_minor) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	460a      	mov	r2, r1
 8005026:	71fb      	strb	r3, [r7, #7]
 8005028:	4613      	mov	r3, r2
 800502a:	71bb      	strb	r3, [r7, #6]
	// update version number in EEPROM
	eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <version_change+0x40>)
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <version_change+0x40>)
 8005034:	2202      	movs	r2, #2
 8005036:	705a      	strb	r2, [r3, #1]
	if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 8005038:	4908      	ldr	r1, [pc, #32]	; (800505c <version_change+0x40>)
 800503a:	2000      	movs	r0, #0
 800503c:	f7ff fcfa 	bl	8004a34 <ee24_write_word>
 8005040:	4603      	mov	r3, r0
 8005042:	f083 0301 	eor.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <version_change+0x38>
		term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 800504c:	4904      	ldr	r1, [pc, #16]	; (8005060 <version_change+0x44>)
 800504e:	4805      	ldr	r0, [pc, #20]	; (8005064 <version_change+0x48>)
 8005050:	f001 fd8a 	bl	8006b68 <term_print>
	}
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200025dc 	.word	0x200025dc
 8005060:	08018f38 	.word	0x08018f38
 8005064:	080137bc 	.word	0x080137bc

08005068 <eeprom>:

void eeprom() {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	if (!ee24_isConnected()) {
 800506e:	f7ff fc93 	bl	8004998 <ee24_isConnected>
 8005072:	4603      	mov	r3, r0
 8005074:	f083 0301 	eor.w	r3, r3, #1
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <eeprom+0x20>
		  term_print("%s() - Error: EEPROM not found\r\n", __FUNCTION__);
 800507e:	4966      	ldr	r1, [pc, #408]	; (8005218 <eeprom+0x1b0>)
 8005080:	4866      	ldr	r0, [pc, #408]	; (800521c <eeprom+0x1b4>)
 8005082:	f001 fd71 	bl	8006b68 <term_print>

			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
			energy_totals_init(0);
		}
	}
}
 8005086:	e0c3      	b.n	8005210 <eeprom+0x1a8>
		  if (ee24_read_word(EEPROM_ADDR_VERSION, (uint16_t *) &eeprom_buf) != true) {
 8005088:	4965      	ldr	r1, [pc, #404]	; (8005220 <eeprom+0x1b8>)
 800508a:	2000      	movs	r0, #0
 800508c:	f7ff fd8e 	bl	8004bac <ee24_read_word>
 8005090:	4603      	mov	r3, r0
 8005092:	f083 0301 	eor.w	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <eeprom+0x3c>
			  term_print("Error: EEPROM read error\r\n");
 800509c:	4861      	ldr	r0, [pc, #388]	; (8005224 <eeprom+0x1bc>)
 800509e:	f001 fd63 	bl	8006b68 <term_print>
}
 80050a2:	e0b5      	b.n	8005210 <eeprom+0x1a8>
			ee24_is_present = true;
 80050a4:	4b60      	ldr	r3, [pc, #384]	; (8005228 <eeprom+0x1c0>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
			if ((eeprom_buf[0] == 0xFF) && (eeprom_buf[1] == 0xFF)) {		// new/blank EEPROM
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <eeprom+0x1b8>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2bff      	cmp	r3, #255	; 0xff
 80050b2:	d11c      	bne.n	80050ee <eeprom+0x86>
 80050b4:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <eeprom+0x1b8>)
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2bff      	cmp	r3, #255	; 0xff
 80050bc:	d117      	bne.n	80050ee <eeprom+0x86>
				eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80050be:	4b58      	ldr	r3, [pc, #352]	; (8005220 <eeprom+0x1b8>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	4b56      	ldr	r3, [pc, #344]	; (8005220 <eeprom+0x1b8>)
 80050c6:	2202      	movs	r2, #2
 80050c8:	705a      	strb	r2, [r3, #1]
				term_print("Updating Version in EEPROM\r\n", __FUNCTION__);
 80050ca:	4953      	ldr	r1, [pc, #332]	; (8005218 <eeprom+0x1b0>)
 80050cc:	4857      	ldr	r0, [pc, #348]	; (800522c <eeprom+0x1c4>)
 80050ce:	f001 fd4b 	bl	8006b68 <term_print>
				if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 80050d2:	4953      	ldr	r1, [pc, #332]	; (8005220 <eeprom+0x1b8>)
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7ff fcad 	bl	8004a34 <ee24_write_word>
 80050da:	4603      	mov	r3, r0
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <eeprom+0x86>
					term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 80050e6:	494c      	ldr	r1, [pc, #304]	; (8005218 <eeprom+0x1b0>)
 80050e8:	4851      	ldr	r0, [pc, #324]	; (8005230 <eeprom+0x1c8>)
 80050ea:	f001 fd3d 	bl	8006b68 <term_print>
			if ((eeprom_buf[0]!=VERSION_MAJOR) || (eeprom_buf[0]!=VERSION_MINOR)) {
 80050ee:	4b4c      	ldr	r3, [pc, #304]	; (8005220 <eeprom+0x1b8>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <eeprom+0x9a>
 80050f8:	4b49      	ldr	r3, [pc, #292]	; (8005220 <eeprom+0x1b8>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d009      	beq.n	8005116 <eeprom+0xae>
				version_change(eeprom_buf[0], eeprom_buf[1]);
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <eeprom+0x1b8>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4a45      	ldr	r2, [pc, #276]	; (8005220 <eeprom+0x1b8>)
 800510a:	7852      	ldrb	r2, [r2, #1]
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ff83 	bl	800501c <version_change>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 8005116:	2004      	movs	r0, #4
 8005118:	f004 fcc6 	bl	8009aa8 <HAL_Delay>
			if (ee24_read_word(EEPROM_ADDR_TIM2ARR, (uint16_t *) &eeprom_buf) == true) {
 800511c:	4940      	ldr	r1, [pc, #256]	; (8005220 <eeprom+0x1b8>)
 800511e:	2002      	movs	r0, #2
 8005120:	f7ff fd44 	bl	8004bac <ee24_read_word>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01a      	beq.n	8005160 <eeprom+0xf8>
				uint16_t value = eeprom_buf[0]*256 + eeprom_buf[1];
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <eeprom+0x1b8>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	b29b      	uxth	r3, r3
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	b29a      	uxth	r2, r3
 8005136:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <eeprom+0x1b8>)
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	b29b      	uxth	r3, r3
 800513e:	4413      	add	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
				if (adjust_TIM2_period(value, 0) < 0) {		// adjust timer value, don't store
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fdda 	bl	8004d00 <adjust_TIM2_period>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	da14      	bge.n	800517c <eeprom+0x114>
					term_print("%s() - Unable to write %u to TIM2_ARR\r\n", __FUNCTION__, value);
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	461a      	mov	r2, r3
 8005156:	4930      	ldr	r1, [pc, #192]	; (8005218 <eeprom+0x1b0>)
 8005158:	4836      	ldr	r0, [pc, #216]	; (8005234 <eeprom+0x1cc>)
 800515a:	f001 fd05 	bl	8006b68 <term_print>
 800515e:	e00d      	b.n	800517c <eeprom+0x114>
				term_print("%s() - EEPROM read error (ee24_ErrorCode = %u)\r\n", __FUNCTION__, ee24_ErrorCode);
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <eeprom+0x1d0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	492c      	ldr	r1, [pc, #176]	; (8005218 <eeprom+0x1b0>)
 8005168:	4834      	ldr	r0, [pc, #208]	; (800523c <eeprom+0x1d4>)
 800516a:	f001 fcfd 	bl	8006b68 <term_print>
				term_print("TIM2 ARR %d\r\n",TIM2->ARR);
 800516e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4619      	mov	r1, r3
 8005176:	4832      	ldr	r0, [pc, #200]	; (8005240 <eeprom+0x1d8>)
 8005178:	f001 fcf6 	bl	8006b68 <term_print>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 800517c:	2004      	movs	r0, #4
 800517e:	f004 fc93 	bl	8009aa8 <HAL_Delay>
			if (ee24_read_word(EEPROM_ADDR_TIM3ARR, (uint16_t *) &eeprom_buf) == true) {
 8005182:	4927      	ldr	r1, [pc, #156]	; (8005220 <eeprom+0x1b8>)
 8005184:	2006      	movs	r0, #6
 8005186:	f7ff fd11 	bl	8004bac <ee24_read_word>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01a      	beq.n	80051c6 <eeprom+0x15e>
				uint16_t value = eeprom_buf[0]*256 + eeprom_buf[1];
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <eeprom+0x1b8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	b29a      	uxth	r2, r3
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <eeprom+0x1b8>)
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	80bb      	strh	r3, [r7, #4]
				if (adjust_TIM3_period(value, 0) < 0) {		// adjust timer value, don't store
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fdfd 	bl	8004dac <adjust_TIM3_period>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da14      	bge.n	80051e2 <eeprom+0x17a>
					term_print("%s() - Unable to write %u to TIM3_ARR\r\n", __FUNCTION__, value);
 80051b8:	88bb      	ldrh	r3, [r7, #4]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4916      	ldr	r1, [pc, #88]	; (8005218 <eeprom+0x1b0>)
 80051be:	4821      	ldr	r0, [pc, #132]	; (8005244 <eeprom+0x1dc>)
 80051c0:	f001 fcd2 	bl	8006b68 <term_print>
 80051c4:	e00d      	b.n	80051e2 <eeprom+0x17a>
				term_print("%s() - EEPROM read error (ee24_ErrorCode = %u)\r\n", __FUNCTION__, ee24_ErrorCode);
 80051c6:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <eeprom+0x1d0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	4912      	ldr	r1, [pc, #72]	; (8005218 <eeprom+0x1b0>)
 80051ce:	481b      	ldr	r0, [pc, #108]	; (800523c <eeprom+0x1d4>)
 80051d0:	f001 fcca 	bl	8006b68 <term_print>
				term_print("TIM3 ARR %d\r\n",TIM2->ARR);
 80051d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4619      	mov	r1, r3
 80051dc:	481a      	ldr	r0, [pc, #104]	; (8005248 <eeprom+0x1e0>)
 80051de:	f001 fcc3 	bl	8006b68 <term_print>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 80051e2:	2004      	movs	r0, #4
 80051e4:	f004 fc60 	bl	8009aa8 <HAL_Delay>
			if (ee24_read_byte(EEPROM_ADDR_MODBUSADDR, (uint8_t*) &eeprom_buf) == true) {
 80051e8:	490d      	ldr	r1, [pc, #52]	; (8005220 <eeprom+0x1b8>)
 80051ea:	2004      	movs	r0, #4
 80051ec:	f7ff fca0 	bl	8004b30 <ee24_read_byte>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <eeprom+0x19c>
				set_modbus_address(eeprom_buf[0], 0);
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <eeprom+0x1b8>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fe2c 	bl	8004e5c <set_modbus_address>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 8005204:	2004      	movs	r0, #4
 8005206:	f004 fc4f 	bl	8009aa8 <HAL_Delay>
			energy_totals_init(0);
 800520a:	2000      	movs	r0, #0
 800520c:	f7ff fe74 	bl	8004ef8 <energy_totals_init>
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	08018f48 	.word	0x08018f48
 800521c:	08013914 	.word	0x08013914
 8005220:	200025dc 	.word	0x200025dc
 8005224:	08013938 	.word	0x08013938
 8005228:	200025fc 	.word	0x200025fc
 800522c:	08013954 	.word	0x08013954
 8005230:	080137bc 	.word	0x080137bc
 8005234:	08013974 	.word	0x08013974
 8005238:	200020d8 	.word	0x200020d8
 800523c:	0801399c 	.word	0x0801399c
 8005240:	080139d0 	.word	0x080139d0
 8005244:	080139e0 	.word	0x080139e0
 8005248:	08013a08 	.word	0x08013a08

0800524c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005252:	f004 fbb7 	bl	80099c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005256:	f000 fb21 	bl	800589c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800525a:	f000 fde1 	bl	8005e20 <MX_GPIO_Init>
  MX_DMA_Init();
 800525e:	f000 fda1 	bl	8005da4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005262:	f000 fd4b 	bl	8005cfc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8005266:	f000 fcaf 	bl	8005bc8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800526a:	f000 fb89 	bl	8005980 <MX_ADC1_Init>
  MX_ADC2_Init();
 800526e:	f000 fbe7 	bl	8005a40 <MX_ADC2_Init>
  MX_SPI2_Init();
 8005272:	f000 fc73 	bl	8005b5c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8005276:	f000 fd6b 	bl	8005d50 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800527a:	f000 fc41 	bl	8005b00 <MX_I2C1_Init>
  MX_TIM3_Init();
 800527e:	f000 fcef 	bl	8005c60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  eeprom();	// Load values from EEPROM
 8005282:	f7ff fef1 	bl	8005068 <eeprom>

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8005286:	f7fd ff71 	bl	800316c <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 800528a:	2201      	movs	r2, #1
 800528c:	499d      	ldr	r1, [pc, #628]	; (8005504 <main+0x2b8>)
 800528e:	489e      	ldr	r0, [pc, #632]	; (8005508 <main+0x2bc>)
 8005290:	f009 f89f 	bl	800e3d2 <HAL_UART_Receive_IT>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <main+0x52>
    Error_Handler();
 800529a:	f000 fffb 	bl	8006294 <Error_Handler>
  }
#ifdef USE_WIFI
  // Start ESP UART receive via interrupt
  if (HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) != HAL_OK) {
 800529e:	2201      	movs	r2, #1
 80052a0:	499a      	ldr	r1, [pc, #616]	; (800550c <main+0x2c0>)
 80052a2:	489b      	ldr	r0, [pc, #620]	; (8005510 <main+0x2c4>)
 80052a4:	f009 f895 	bl	800e3d2 <HAL_UART_Receive_IT>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <main+0x66>
      Error_Handler();
 80052ae:	f000 fff1 	bl	8006294 <Error_Handler>
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80052b2:	4898      	ldr	r0, [pc, #608]	; (8005514 <main+0x2c8>)
 80052b4:	f008 fb7c 	bl	800d9b0 <HAL_TIM_Base_Start_IT>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <main+0x76>
     Error_Handler();
 80052be:	f000 ffe9 	bl	8006294 <Error_Handler>
  }

  // Start Timer for Energy integration
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 80052c2:	4895      	ldr	r0, [pc, #596]	; (8005518 <main+0x2cc>)
 80052c4:	f008 fb74 	bl	800d9b0 <HAL_TIM_Base_Start_IT>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <main+0x86>
       Error_Handler();
 80052ce:	f000 ffe1 	bl	8006294 <Error_Handler>
    }

  // Start ADCs
  start_adcs();
 80052d2:	f7ff fce9 	bl	8004ca8 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 80052d6:	f7fd ff6b 	bl	80031b0 <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 80052da:	f004 fbd9 	bl	8009a90 <HAL_GetTick>
 80052de:	4603      	mov	r3, r0
 80052e0:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80052e4:	4a8d      	ldr	r2, [pc, #564]	; (800551c <main+0x2d0>)
 80052e6:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 80052e8:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <main+0x2d4>)
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	2302      	movs	r3, #2
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	4a8c      	ldr	r2, [pc, #560]	; (8005524 <main+0x2d8>)
 80052f4:	498c      	ldr	r1, [pc, #560]	; (8005528 <main+0x2dc>)
 80052f6:	488d      	ldr	r0, [pc, #564]	; (800552c <main+0x2e0>)
 80052f8:	f00a fd5e 	bl	800fdb8 <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80052fc:	488b      	ldr	r0, [pc, #556]	; (800552c <main+0x2e0>)
 80052fe:	f7fa ffd7 	bl	80002b0 <strlen>
 8005302:	4603      	mov	r3, r0
 8005304:	b29a      	uxth	r2, r3
 8005306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800530a:	4988      	ldr	r1, [pc, #544]	; (800552c <main+0x2e0>)
 800530c:	487e      	ldr	r0, [pc, #504]	; (8005508 <main+0x2bc>)
 800530e:	f008 ffce 	bl	800e2ae <HAL_UART_Transmit>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <main+0xd0>
	  Error_Handler();
 8005318:	f000 ffbc 	bl	8006294 <Error_Handler>
  }

#ifdef USE_WIFI
  // Enable ESP 01
  HAL_GPIO_WritePin (ESP01_EN_GPIO_Port, ESP01_EN_Pin, GPIO_PIN_SET);
 800531c:	2201      	movs	r2, #1
 800531e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005322:	4883      	ldr	r0, [pc, #524]	; (8005530 <main+0x2e4>)
 8005324:	f005 fea8 	bl	800b078 <HAL_GPIO_WritePin>
  // Perform reset
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_RESET);
 8005328:	2200      	movs	r2, #0
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	4881      	ldr	r0, [pc, #516]	; (8005534 <main+0x2e8>)
 800532e:	f005 fea3 	bl	800b078 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005332:	2064      	movs	r0, #100	; 0x64
 8005334:	f004 fbb8 	bl	8009aa8 <HAL_Delay>
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_SET);
 8005338:	2201      	movs	r2, #1
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	487d      	ldr	r0, [pc, #500]	; (8005534 <main+0x2e8>)
 800533e:	f005 fe9b 	bl	800b078 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8005342:	f004 fba5 	bl	8009a90 <HAL_GetTick>
 8005346:	4603      	mov	r3, r0
 8005348:	3364      	adds	r3, #100	; 0x64
 800534a:	4a7b      	ldr	r2, [pc, #492]	; (8005538 <main+0x2ec>)
 800534c:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 800534e:	f004 fb9f 	bl	8009a90 <HAL_GetTick>
 8005352:	4603      	mov	r3, r0
 8005354:	3364      	adds	r3, #100	; 0x64
 8005356:	4a79      	ldr	r2, [pc, #484]	; (800553c <main+0x2f0>)
 8005358:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 800535a:	f004 fb99 	bl	8009a90 <HAL_GetTick>
 800535e:	4603      	mov	r3, r0
 8005360:	4a77      	ldr	r2, [pc, #476]	; (8005540 <main+0x2f4>)
 8005362:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 8005364:	4b76      	ldr	r3, [pc, #472]	; (8005540 <main+0x2f4>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b76      	ldr	r3, [pc, #472]	; (8005544 <main+0x2f8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d21b      	bcs.n	80053a8 <main+0x15c>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8005370:	4b73      	ldr	r3, [pc, #460]	; (8005540 <main+0x2f4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3364      	adds	r3, #100	; 0x64
 8005376:	4a70      	ldr	r2, [pc, #448]	; (8005538 <main+0x2ec>)
 8005378:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 800537a:	4b73      	ldr	r3, [pc, #460]	; (8005548 <main+0x2fc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <main+0x146>
 8005382:	4b6f      	ldr	r3, [pc, #444]	; (8005540 <main+0x2f4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800538a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800538e:	4a6e      	ldr	r2, [pc, #440]	; (8005548 <main+0x2fc>)
 8005390:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 8005392:	4b6b      	ldr	r3, [pc, #428]	; (8005540 <main+0x2f4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800539a:	4a6c      	ldr	r2, [pc, #432]	; (800554c <main+0x300>)
 800539c:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 800539e:	4b68      	ldr	r3, [pc, #416]	; (8005540 <main+0x2f4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3364      	adds	r3, #100	; 0x64
 80053a4:	4a65      	ldr	r2, [pc, #404]	; (800553c <main+0x2f0>)
 80053a6:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80053a8:	4b65      	ldr	r3, [pc, #404]	; (8005540 <main+0x2f4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a65      	ldr	r2, [pc, #404]	; (8005544 <main+0x2f8>)
 80053ae:	6013      	str	r3, [r2, #0]

	// perform measurements and update the display
	if ( now_ticks >= next_measurement_time ) {
 80053b0:	4b63      	ldr	r3, [pc, #396]	; (8005540 <main+0x2f4>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4b61      	ldr	r3, [pc, #388]	; (800553c <main+0x2f0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d330      	bcc.n	800541e <main+0x1d2>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80053bc:	4b5f      	ldr	r3, [pc, #380]	; (800553c <main+0x2f0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3364      	adds	r3, #100	; 0x64
 80053c2:	4a5e      	ldr	r2, [pc, #376]	; (800553c <main+0x2f0>)
 80053c4:	6013      	str	r3, [r2, #0]
#ifdef DEBUG
		measure_ticks = HAL_GetTick();
 80053c6:	f004 fb63 	bl	8009a90 <HAL_GetTick>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a60      	ldr	r2, [pc, #384]	; (8005550 <main+0x304>)
 80053ce:	6013      	str	r3, [r2, #0]
#endif
		calc_measurements();
 80053d0:	f7fc fb1e 	bl	8001a10 <calc_measurements>
#ifdef DEBUG
		calc_ticks = HAL_GetTick() - measure_ticks;		// calculation execution time
 80053d4:	f004 fb5c 	bl	8009a90 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	4b5d      	ldr	r3, [pc, #372]	; (8005550 <main+0x304>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	4a5c      	ldr	r2, [pc, #368]	; (8005554 <main+0x308>)
 80053e2:	6013      	str	r3, [r2, #0]
#endif

#ifdef USE_DISPLAY
		// update meter display, only if display is visible ( backlight on )
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 80053e4:	2140      	movs	r1, #64	; 0x40
 80053e6:	4852      	ldr	r0, [pc, #328]	; (8005530 <main+0x2e4>)
 80053e8:	f005 fe2e 	bl	800b048 <HAL_GPIO_ReadPin>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d115      	bne.n	800541e <main+0x1d2>
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <main+0x30c>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d011      	beq.n	800541e <main+0x1d2>
#ifdef DEBUG
			measure_ticks = HAL_GetTick();
 80053fa:	f004 fb49 	bl	8009a90 <HAL_GetTick>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a53      	ldr	r2, [pc, #332]	; (8005550 <main+0x304>)
 8005402:	6013      	str	r3, [r2, #0]
#endif
			display_update_meter(display_screen);
 8005404:	4b54      	ldr	r3, [pc, #336]	; (8005558 <main+0x30c>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fe fc83 	bl	8003d14 <display_update_meter>
#ifdef DEBUG
			display_ticks = HAL_GetTick() - measure_ticks;		// display update execution time
 800540e:	f004 fb3f 	bl	8009a90 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	4b4e      	ldr	r3, [pc, #312]	; (8005550 <main+0x304>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	4a50      	ldr	r2, [pc, #320]	; (800555c <main+0x310>)
 800541c:	6013      	str	r3, [r2, #0]
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 800541e:	4b48      	ldr	r3, [pc, #288]	; (8005540 <main+0x2f4>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <main+0x2ec>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	f0c0 81ab 	bcc.w	8005782 <main+0x536>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 800542c:	4b44      	ldr	r3, [pc, #272]	; (8005540 <main+0x2f4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3364      	adds	r3, #100	; 0x64
 8005432:	4a41      	ldr	r2, [pc, #260]	; (8005538 <main+0x2ec>)
 8005434:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <main+0x2d0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <main+0x21a>
			if (now_ticks >= display_splash_ticks) {
 800543e:	4b40      	ldr	r3, [pc, #256]	; (8005540 <main+0x2f4>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <main+0x2d0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d30d      	bcc.n	8005466 <main+0x21a>
				display_splash_ticks = 0;
 800544a:	4b34      	ldr	r3, [pc, #208]	; (800551c <main+0x2d0>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8005450:	4b41      	ldr	r3, [pc, #260]	; (8005558 <main+0x30c>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8005456:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <main+0x2f4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800545e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8005462:	4a39      	ldr	r2, [pc, #228]	; (8005548 <main+0x2fc>)
 8005464:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8005466:	4b3e      	ldr	r3, [pc, #248]	; (8005560 <main+0x314>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d032      	beq.n	80054d6 <main+0x28a>
			if (esp_mode) {
 8005470:	4b3c      	ldr	r3, [pc, #240]	; (8005564 <main+0x318>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d025      	beq.n	80054c4 <main+0x278>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 8005478:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <main+0x31c>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b7e      	cmp	r3, #126	; 0x7e
 8005480:	d106      	bne.n	8005490 <main+0x244>
					esp_mode = 0;
 8005482:	4b38      	ldr	r3, [pc, #224]	; (8005564 <main+0x318>)
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 8005488:	4838      	ldr	r0, [pc, #224]	; (800556c <main+0x320>)
 800548a:	f001 fb6d 	bl	8006b68 <term_print>
 800548e:	e01c      	b.n	80054ca <main+0x27e>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 8005490:	4a35      	ldr	r2, [pc, #212]	; (8005568 <main+0x31c>)
 8005492:	4937      	ldr	r1, [pc, #220]	; (8005570 <main+0x324>)
 8005494:	4825      	ldr	r0, [pc, #148]	; (800552c <main+0x2e0>)
 8005496:	f00a fc8f 	bl	800fdb8 <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 800549a:	4824      	ldr	r0, [pc, #144]	; (800552c <main+0x2e0>)
 800549c:	f7fa ff08 	bl	80002b0 <strlen>
 80054a0:	4603      	mov	r3, r0
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054a8:	4920      	ldr	r1, [pc, #128]	; (800552c <main+0x2e0>)
 80054aa:	4819      	ldr	r0, [pc, #100]	; (8005510 <main+0x2c4>)
 80054ac:	f008 feff 	bl	800e2ae <HAL_UART_Transmit>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <main+0x26e>
						Error_Handler();
 80054b6:	f000 feed 	bl	8006294 <Error_Handler>
					}
					term_print("%s", msg_buf);
 80054ba:	491c      	ldr	r1, [pc, #112]	; (800552c <main+0x2e0>)
 80054bc:	482d      	ldr	r0, [pc, #180]	; (8005574 <main+0x328>)
 80054be:	f001 fb53 	bl	8006b68 <term_print>
 80054c2:	e002      	b.n	80054ca <main+0x27e>
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 80054c4:	4828      	ldr	r0, [pc, #160]	; (8005568 <main+0x31c>)
 80054c6:	f7fd fe31 	bl	800312c <CMD_Handler>
			}
			cli_rx_count = 0;
 80054ca:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <main+0x32c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 80054d0:	4b23      	ldr	r3, [pc, #140]	; (8005560 <main+0x314>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
		}

#ifdef USE_WIFI
		// Handle ESP UART communication
		if (esp_rx_count > 0) {		// do we have any RX data from the ESP?
 80054d6:	4b29      	ldr	r3, [pc, #164]	; (800557c <main+0x330>)
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d063      	beq.n	80055a6 <main+0x35a>
			if (esp_rx_count_last != esp_rx_count) { 	// has the RX count changed since last iteration?
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <main+0x334>)
 80054e0:	881a      	ldrh	r2, [r3, #0]
 80054e2:	4b26      	ldr	r3, [pc, #152]	; (800557c <main+0x330>)
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d004      	beq.n	80054f4 <main+0x2a8>
				esp_rx_count_last = esp_rx_count;		// yes -> update last count, RX not finished yet
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <main+0x330>)
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	4b24      	ldr	r3, [pc, #144]	; (8005580 <main+0x334>)
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e058      	b.n	80055a6 <main+0x35a>
			} else {	// count hasn't changed since last iteration, we assume RX is completed
				if (!esp_mode) {
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <main+0x318>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d143      	bne.n	8005584 <main+0x338>
					wifi_handle_esp_rx_data();
 80054fc:	f001 fdc0 	bl	8007080 <wifi_handle_esp_rx_data>
 8005500:	e04a      	b.n	8005598 <main+0x34c>
 8005502:	bf00      	nop
 8005504:	20002552 	.word	0x20002552
 8005508:	200023c8 	.word	0x200023c8
 800550c:	200025d5 	.word	0x200025d5
 8005510:	2000240c 	.word	0x2000240c
 8005514:	20002338 	.word	0x20002338
 8005518:	20002380 	.word	0x20002380
 800551c:	20008204 	.word	0x20008204
 8005520:	08018ec4 	.word	0x08018ec4
 8005524:	08018ec0 	.word	0x08018ec0
 8005528:	08013a18 	.word	0x08013a18
 800552c:	20002450 	.word	0x20002450
 8005530:	40020000 	.word	0x40020000
 8005534:	40020400 	.word	0x40020400
 8005538:	20008218 	.word	0x20008218
 800553c:	20008214 	.word	0x20008214
 8005540:	2000820c 	.word	0x2000820c
 8005544:	20008210 	.word	0x20008210
 8005548:	200081fc 	.word	0x200081fc
 800554c:	20008208 	.word	0x20008208
 8005550:	20008234 	.word	0x20008234
 8005554:	20008238 	.word	0x20008238
 8005558:	20002608 	.word	0x20002608
 800555c:	2000823c 	.word	0x2000823c
 8005560:	200025d4 	.word	0x200025d4
 8005564:	20002602 	.word	0x20002602
 8005568:	20002554 	.word	0x20002554
 800556c:	08013a2c 	.word	0x08013a2c
 8005570:	08013a48 	.word	0x08013a48
 8005574:	08013a50 	.word	0x08013a50
 8005578:	20002550 	.word	0x20002550
 800557c:	20008ac4 	.word	0x20008ac4
 8005580:	200025d6 	.word	0x200025d6
				} else {		// ESP in terminal mode
					esp_rx_buf[esp_rx_count] = 0;	// Set EOS
 8005584:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <main+0x4e4>)
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b6a      	ldr	r3, [pc, #424]	; (8005734 <main+0x4e8>)
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]
					term_print("%s", esp_rx_buf);
 8005590:	4968      	ldr	r1, [pc, #416]	; (8005734 <main+0x4e8>)
 8005592:	4869      	ldr	r0, [pc, #420]	; (8005738 <main+0x4ec>)
 8005594:	f001 fae8 	bl	8006b68 <term_print>
				}
				esp_rx_count = 0;
 8005598:	4b65      	ldr	r3, [pc, #404]	; (8005730 <main+0x4e4>)
 800559a:	2200      	movs	r2, #0
 800559c:	801a      	strh	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
 800559e:	4b64      	ldr	r3, [pc, #400]	; (8005730 <main+0x4e4>)
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	4b66      	ldr	r3, [pc, #408]	; (800573c <main+0x4f0>)
 80055a4:	801a      	strh	r2, [r3, #0]
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 80055a6:	4b66      	ldr	r3, [pc, #408]	; (8005740 <main+0x4f4>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <main+0x36c>
			adc_restart = 0;
 80055ae:	4b64      	ldr	r3, [pc, #400]	; (8005740 <main+0x4f4>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
			start_adcs();
 80055b4:	f7ff fb78 	bl	8004ca8 <start_adcs>
		}

		if (new_time_period) {
 80055b8:	4b62      	ldr	r3, [pc, #392]	; (8005744 <main+0x4f8>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <main+0x386>
			// change timer period to new value
			adjust_TIM2_period(new_time_period, 1);
 80055c0:	4b60      	ldr	r3, [pc, #384]	; (8005744 <main+0x4f8>)
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	2101      	movs	r1, #1
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fb9a 	bl	8004d00 <adjust_TIM2_period>
			new_time_period = 0;
 80055cc:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <main+0x4f8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	801a      	strh	r2, [r3, #0]
		}

		if (new_energy_time_period) {
 80055d2:	4b5d      	ldr	r3, [pc, #372]	; (8005748 <main+0x4fc>)
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <main+0x3a0>
			adjust_TIM3_period(new_energy_time_period, 1);
 80055da:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <main+0x4fc>)
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fbe3 	bl	8004dac <adjust_TIM3_period>
			new_energy_time_period = 0;
 80055e6:	4b58      	ldr	r3, [pc, #352]	; (8005748 <main+0x4fc>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	801a      	strh	r2, [r3, #0]
		}

		if (modbus_addr_change) {
 80055ec:	4b57      	ldr	r3, [pc, #348]	; (800574c <main+0x500>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <main+0x3ba>
			set_modbus_address(modbus_addr_change, 1);
 80055f4:	4b55      	ldr	r3, [pc, #340]	; (800574c <main+0x500>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2101      	movs	r1, #1
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fc2e 	bl	8004e5c <set_modbus_address>
			modbus_addr_change = 0;
 8005600:	4b52      	ldr	r3, [pc, #328]	; (800574c <main+0x500>)
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8005606:	4b52      	ldr	r3, [pc, #328]	; (8005750 <main+0x504>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d018      	beq.n	8005642 <main+0x3f6>
			display_screen++;
 8005610:	4b50      	ldr	r3, [pc, #320]	; (8005754 <main+0x508>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	4b4e      	ldr	r3, [pc, #312]	; (8005754 <main+0x508>)
 800561a:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 800561c:	4b4d      	ldr	r3, [pc, #308]	; (8005754 <main+0x508>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b05      	cmp	r3, #5
 8005622:	d902      	bls.n	800562a <main+0x3de>
				display_screen = 1;
 8005624:	4b4b      	ldr	r3, [pc, #300]	; (8005754 <main+0x508>)
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 800562a:	4b49      	ldr	r3, [pc, #292]	; (8005750 <main+0x504>)
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;	// restart screen saver
 8005630:	f004 fa2e 	bl	8009a90 <HAL_GetTick>
 8005634:	4603      	mov	r3, r0
 8005636:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800563a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800563e:	4a46      	ldr	r2, [pc, #280]	; (8005758 <main+0x50c>)
 8005640:	6013      	str	r3, [r2, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 8005642:	4b45      	ldr	r3, [pc, #276]	; (8005758 <main+0x50c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <main+0x416>
 800564a:	4b44      	ldr	r3, [pc, #272]	; (800575c <main+0x510>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <main+0x50c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d305      	bcc.n	8005662 <main+0x416>
			Displ_BackLight('0');
 8005656:	2030      	movs	r0, #48	; 0x30
 8005658:	f003 fc94 	bl	8008f84 <Displ_BackLight>
			display_off_ticks = 0;
 800565c:	4b3e      	ldr	r3, [pc, #248]	; (8005758 <main+0x50c>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
		}

		if (tft_display) {
 8005662:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <main+0x514>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d02b      	beq.n	80056c2 <main+0x476>
			if (tft_display == 9) {
 800566a:	4b3d      	ldr	r3, [pc, #244]	; (8005760 <main+0x514>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b09      	cmp	r3, #9
 8005670:	d10e      	bne.n	8005690 <main+0x444>
				term_print("Running TFT performance test ...\r\n");
 8005672:	483c      	ldr	r0, [pc, #240]	; (8005764 <main+0x518>)
 8005674:	f001 fa78 	bl	8006b68 <term_print>
				Displ_BackLight('1');
 8005678:	2031      	movs	r0, #49	; 0x31
 800567a:	f003 fc83 	bl	8008f84 <Displ_BackLight>
				Displ_TestAll();
 800567e:	f004 f94b 	bl	8009918 <Displ_TestAll>
				Displ_BackLight('0');
 8005682:	2030      	movs	r0, #48	; 0x30
 8005684:	f003 fc7e 	bl	8008f84 <Displ_BackLight>
				term_print("....completed\r\n");
 8005688:	4837      	ldr	r0, [pc, #220]	; (8005768 <main+0x51c>)
 800568a:	f001 fa6d 	bl	8006b68 <term_print>
 800568e:	e015      	b.n	80056bc <main+0x470>
			} else {
				if (tft_display == 1) {
 8005690:	4b33      	ldr	r3, [pc, #204]	; (8005760 <main+0x514>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d103      	bne.n	80056a0 <main+0x454>
					Displ_BackLight('0');
 8005698:	2030      	movs	r0, #48	; 0x30
 800569a:	f003 fc73 	bl	8008f84 <Displ_BackLight>
 800569e:	e00d      	b.n	80056bc <main+0x470>
				} else {
					Displ_BackLight('1');
 80056a0:	2031      	movs	r0, #49	; 0x31
 80056a2:	f003 fc6f 	bl	8008f84 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 80056a6:	f004 f9f3 	bl	8009a90 <HAL_GetTick>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80056b0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80056b4:	4a28      	ldr	r2, [pc, #160]	; (8005758 <main+0x50c>)
 80056b6:	6013      	str	r3, [r2, #0]
					display_update_mask();
 80056b8:	f7fe fb8a 	bl	8003dd0 <display_update_mask>
				}
			}
		tft_display = 0;
 80056bc:	4b28      	ldr	r3, [pc, #160]	; (8005760 <main+0x514>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 80056c2:	4b2a      	ldr	r3, [pc, #168]	; (800576c <main+0x520>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <main+0x4a2>
			display_activate = 0;
 80056cc:	4b27      	ldr	r3, [pc, #156]	; (800576c <main+0x520>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 80056d2:	f7fe fb7d 	bl	8003dd0 <display_update_mask>
			Displ_BackLight('1');
 80056d6:	2031      	movs	r0, #49	; 0x31
 80056d8:	f003 fc54 	bl	8008f84 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 80056dc:	f004 f9d8 	bl	8009a90 <HAL_GetTick>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80056e6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80056ea:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <main+0x50c>)
 80056ec:	6013      	str	r3, [r2, #0]
		}

		if (touch_action) {			// touch screen
 80056ee:	4b20      	ldr	r3, [pc, #128]	; (8005770 <main+0x524>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d044      	beq.n	8005782 <main+0x536>
			touch_action = 0;
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <main+0x524>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
			if (now_ticks < touch_debounce_ticks){
 80056fe:	4b17      	ldr	r3, [pc, #92]	; (800575c <main+0x510>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <main+0x528>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d33b      	bcc.n	8005782 <main+0x536>
				;	// do nothing
			} else {
				touch_debounce_ticks = HAL_GetTick() + TOUCH_DEBOUNCE_TIME;
 800570a:	f004 f9c1 	bl	8009a90 <HAL_GetTick>
 800570e:	4603      	mov	r3, r0
 8005710:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <main+0x528>)
 8005716:	6013      	str	r3, [r2, #0]
				// if Backlight is OFF
				if (HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_RESET) {
 8005718:	2140      	movs	r1, #64	; 0x40
 800571a:	4817      	ldr	r0, [pc, #92]	; (8005778 <main+0x52c>)
 800571c:	f005 fc94 	bl	800b048 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d12a      	bne.n	800577c <main+0x530>
					display_activate = 1;		// activate backlight
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <main+0x520>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e029      	b.n	8005782 <main+0x536>
 800572e:	bf00      	nop
 8005730:	20008ac4 	.word	0x20008ac4
 8005734:	20008644 	.word	0x20008644
 8005738:	08013a50 	.word	0x08013a50
 800573c:	200025d6 	.word	0x200025d6
 8005740:	20002600 	.word	0x20002600
 8005744:	20002604 	.word	0x20002604
 8005748:	20002606 	.word	0x20002606
 800574c:	20002603 	.word	0x20002603
 8005750:	200025fe 	.word	0x200025fe
 8005754:	20002608 	.word	0x20002608
 8005758:	200081fc 	.word	0x200081fc
 800575c:	2000820c 	.word	0x2000820c
 8005760:	20002601 	.word	0x20002601
 8005764:	08013a54 	.word	0x08013a54
 8005768:	08013a78 	.word	0x08013a78
 800576c:	200025fd 	.word	0x200025fd
 8005770:	200025ff 	.word	0x200025ff
 8005774:	20008200 	.word	0x20008200
 8005778:	40020000 	.word	0x40020000
				} else {		// backlight is already on -> change display
					display_change = 1;
 800577c:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <main+0x62c>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]

	}	// slow processing loop

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. serial terminal output or display)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8005782:	4b3e      	ldr	r3, [pc, #248]	; (800587c <main+0x630>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	dc0b      	bgt.n	80057a2 <main+0x556>
 800578a:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <main+0x634>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b01      	cmp	r3, #1
 8005790:	dc07      	bgt.n	80057a2 <main+0x556>
 8005792:	4b3c      	ldr	r3, [pc, #240]	; (8005884 <main+0x638>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b01      	cmp	r3, #1
 8005798:	dc03      	bgt.n	80057a2 <main+0x556>
 800579a:	4b3b      	ldr	r3, [pc, #236]	; (8005888 <main+0x63c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	dd1b      	ble.n	80057da <main+0x58e>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) adc1_dma_l_count = 1;
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <main+0x630>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	dd02      	ble.n	80057b0 <main+0x564>
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <main+0x630>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) adc1_dma_h_count = 1;
 80057b0:	4b33      	ldr	r3, [pc, #204]	; (8005880 <main+0x634>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	dd02      	ble.n	80057be <main+0x572>
 80057b8:	4b31      	ldr	r3, [pc, #196]	; (8005880 <main+0x634>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) adc2_dma_l_count = 1;
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <main+0x638>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	dd02      	ble.n	80057cc <main+0x580>
 80057c6:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <main+0x638>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) adc2_dma_h_count = 1;
 80057cc:	4b2e      	ldr	r3, [pc, #184]	; (8005888 <main+0x63c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	dd02      	ble.n	80057da <main+0x58e>
 80057d4:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <main+0x63c>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 80057da:	4b28      	ldr	r3, [pc, #160]	; (800587c <main+0x630>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	dd0e      	ble.n	8005800 <main+0x5b4>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80057e2:	2100      	movs	r1, #0
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fb fc3d 	bl	8001064 <calc_process_dma_buffer>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <main+0x5aa>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 80057f0:	4826      	ldr	r0, [pc, #152]	; (800588c <main+0x640>)
 80057f2:	f001 f9b9 	bl	8006b68 <term_print>
			}
			adc1_dma_l_count--;
 80057f6:	4b21      	ldr	r3, [pc, #132]	; (800587c <main+0x630>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <main+0x630>)
 80057fe:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <main+0x634>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dd0e      	ble.n	8005826 <main+0x5da>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8005808:	2100      	movs	r1, #0
 800580a:	2001      	movs	r0, #1
 800580c:	f7fb fc2a 	bl	8001064 <calc_process_dma_buffer>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <main+0x5d0>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8005816:	481e      	ldr	r0, [pc, #120]	; (8005890 <main+0x644>)
 8005818:	f001 f9a6 	bl	8006b68 <term_print>
			}
			adc1_dma_h_count--;
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <main+0x634>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3b01      	subs	r3, #1
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <main+0x634>)
 8005824:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8005826:	4b17      	ldr	r3, [pc, #92]	; (8005884 <main+0x638>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	dd0e      	ble.n	800584c <main+0x600>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 800582e:	2101      	movs	r1, #1
 8005830:	2000      	movs	r0, #0
 8005832:	f7fb fc17 	bl	8001064 <calc_process_dma_buffer>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <main+0x5f6>
				term_print("Processing ADC2 DMA 1st half failed\r\n");
 800583c:	4815      	ldr	r0, [pc, #84]	; (8005894 <main+0x648>)
 800583e:	f001 f993 	bl	8006b68 <term_print>
			}
			adc2_dma_l_count--;
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <main+0x638>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3b01      	subs	r3, #1
 8005848:	4a0e      	ldr	r2, [pc, #56]	; (8005884 <main+0x638>)
 800584a:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <main+0x63c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f77f ad82 	ble.w	800535a <main+0x10e>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8005856:	2101      	movs	r1, #1
 8005858:	2001      	movs	r0, #1
 800585a:	f7fb fc03 	bl	8001064 <calc_process_dma_buffer>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <main+0x61e>
				term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8005864:	480c      	ldr	r0, [pc, #48]	; (8005898 <main+0x64c>)
 8005866:	f001 f97f 	bl	8006b68 <term_print>
			}
			adc2_dma_h_count--;
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <main+0x63c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a05      	ldr	r2, [pc, #20]	; (8005888 <main+0x63c>)
 8005872:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8005874:	e571      	b.n	800535a <main+0x10e>
 8005876:	bf00      	nop
 8005878:	200025fe 	.word	0x200025fe
 800587c:	2000260c 	.word	0x2000260c
 8005880:	20002610 	.word	0x20002610
 8005884:	20002614 	.word	0x20002614
 8005888:	20002618 	.word	0x20002618
 800588c:	08013a88 	.word	0x08013a88
 8005890:	08013ab0 	.word	0x08013ab0
 8005894:	08013ad8 	.word	0x08013ad8
 8005898:	08013b00 	.word	0x08013b00

0800589c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b094      	sub	sp, #80	; 0x50
 80058a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058a2:	f107 031c 	add.w	r3, r7, #28
 80058a6:	2234      	movs	r2, #52	; 0x34
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f00a fd02 	bl	80102b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058b0:	f107 0308 	add.w	r3, r7, #8
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058c0:	2300      	movs	r3, #0
 80058c2:	607b      	str	r3, [r7, #4]
 80058c4:	4b2c      	ldr	r3, [pc, #176]	; (8005978 <SystemClock_Config+0xdc>)
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <SystemClock_Config+0xdc>)
 80058ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ce:	6413      	str	r3, [r2, #64]	; 0x40
 80058d0:	4b29      	ldr	r3, [pc, #164]	; (8005978 <SystemClock_Config+0xdc>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058dc:	2300      	movs	r3, #0
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <SystemClock_Config+0xe0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a25      	ldr	r2, [pc, #148]	; (800597c <SystemClock_Config+0xe0>)
 80058e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <SystemClock_Config+0xe0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058f8:	2302      	movs	r3, #2
 80058fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058fc:	2301      	movs	r3, #1
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005900:	2310      	movs	r3, #16
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005904:	2302      	movs	r3, #2
 8005906:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005908:	2300      	movs	r3, #0
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800590c:	2308      	movs	r3, #8
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005910:	23b4      	movs	r3, #180	; 0xb4
 8005912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005914:	2302      	movs	r3, #2
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005918:	2302      	movs	r3, #2
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800591c:	2302      	movs	r3, #2
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	4618      	mov	r0, r3
 8005926:	f007 f87b 	bl	800ca20 <HAL_RCC_OscConfig>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005930:	f000 fcb0 	bl	8006294 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005934:	f006 fcda 	bl	800c2ec <HAL_PWREx_EnableOverDrive>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800593e:	f000 fca9 	bl	8006294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005942:	230f      	movs	r3, #15
 8005944:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005946:	2302      	movs	r3, #2
 8005948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800594e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005958:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	2105      	movs	r1, #5
 8005960:	4618      	mov	r0, r3
 8005962:	f006 fd13 	bl	800c38c <HAL_RCC_ClockConfig>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800596c:	f000 fc92 	bl	8006294 <Error_Handler>
  }
}
 8005970:	bf00      	nop
 8005972:	3750      	adds	r7, #80	; 0x50
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	40007000 	.word	0x40007000

08005980 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005986:	463b      	mov	r3, r7
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	609a      	str	r2, [r3, #8]
 8005990:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005992:	4b29      	ldr	r3, [pc, #164]	; (8005a38 <MX_ADC1_Init+0xb8>)
 8005994:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <MX_ADC1_Init+0xbc>)
 8005996:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <MX_ADC1_Init+0xb8>)
 800599a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800599e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80059a6:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80059ac:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80059b2:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80059ba:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80059c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059d2:	2202      	movs	r2, #2
 80059d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80059d6:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80059de:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80059e4:	4814      	ldr	r0, [pc, #80]	; (8005a38 <MX_ADC1_Init+0xb8>)
 80059e6:	f004 f883 	bl	8009af0 <HAL_ADC_Init>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80059f0:	f000 fc50 	bl	8006294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80059f8:	2301      	movs	r3, #1
 80059fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80059fc:	2303      	movs	r3, #3
 80059fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a00:	463b      	mov	r3, r7
 8005a02:	4619      	mov	r1, r3
 8005a04:	480c      	ldr	r0, [pc, #48]	; (8005a38 <MX_ADC1_Init+0xb8>)
 8005a06:	f004 f9c7 	bl	8009d98 <HAL_ADC_ConfigChannel>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005a10:	f000 fc40 	bl	8006294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005a14:	230a      	movs	r3, #10
 8005a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4805      	ldr	r0, [pc, #20]	; (8005a38 <MX_ADC1_Init+0xb8>)
 8005a22:	f004 f9b9 	bl	8009d98 <HAL_ADC_ConfigChannel>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8005a2c:	f000 fc32 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	200020dc 	.word	0x200020dc
 8005a3c:	40012000 	.word	0x40012000

08005a40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a46:	463b      	mov	r3, r7
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <MX_ADC2_Init+0xbc>)
 8005a56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005a58:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005a66:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005a6c:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005a72:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005a7a:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a84:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a92:	2202      	movs	r2, #2
 8005a94:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005aa4:	4814      	ldr	r0, [pc, #80]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005aa6:	f004 f823 	bl	8009af0 <HAL_ADC_Init>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005ab0:	f000 fbf0 	bl	8006294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005abc:	2303      	movs	r3, #3
 8005abe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	480c      	ldr	r0, [pc, #48]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005ac6:	f004 f967 	bl	8009d98 <HAL_ADC_ConfigChannel>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8005ad0:	f000 fbe0 	bl	8006294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005ad4:	230b      	movs	r3, #11
 8005ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005adc:	463b      	mov	r3, r7
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4805      	ldr	r0, [pc, #20]	; (8005af8 <MX_ADC2_Init+0xb8>)
 8005ae2:	f004 f959 	bl	8009d98 <HAL_ADC_ConfigChannel>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8005aec:	f000 fbd2 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20002124 	.word	0x20002124
 8005afc:	40012100 	.word	0x40012100

08005b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b06:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <MX_I2C1_Init+0x54>)
 8005b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b0c:	4a12      	ldr	r2, [pc, #72]	; (8005b58 <MX_I2C1_Init+0x58>)
 8005b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b36:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b3c:	4804      	ldr	r0, [pc, #16]	; (8005b50 <MX_I2C1_Init+0x50>)
 8005b3e:	f005 fae7 	bl	800b110 <HAL_I2C_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b48:	f000 fba4 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b4c:	bf00      	nop
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	2000222c 	.word	0x2000222c
 8005b54:	40005400 	.word	0x40005400
 8005b58:	00061a80 	.word	0x00061a80

08005b5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005b60:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <MX_SPI2_Init+0x68>)
 8005b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005b6e:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b86:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005ba8:	220a      	movs	r2, #10
 8005baa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005bac:	4804      	ldr	r0, [pc, #16]	; (8005bc0 <MX_SPI2_Init+0x64>)
 8005bae:	f007 f9d5 	bl	800cf5c <HAL_SPI_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005bb8:	f000 fb6c 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005bbc:	bf00      	nop
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20002280 	.word	0x20002280
 8005bc4:	40003800 	.word	0x40003800

08005bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bdc:	463b      	mov	r3, r7
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005be4:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005bec:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 8005bf8:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005bfa:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8005bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c00:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c0c:	4813      	ldr	r0, [pc, #76]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005c0e:	f007 fe7f 	bl	800d910 <HAL_TIM_Base_Init>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005c18:	f000 fb3c 	bl	8006294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	4619      	mov	r1, r3
 8005c28:	480c      	ldr	r0, [pc, #48]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005c2a:	f008 f839 	bl	800dca0 <HAL_TIM_ConfigClockSource>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005c34:	f000 fb2e 	bl	8006294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005c38:	2320      	movs	r3, #32
 8005c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c40:	463b      	mov	r3, r7
 8005c42:	4619      	mov	r1, r3
 8005c44:	4805      	ldr	r0, [pc, #20]	; (8005c5c <MX_TIM2_Init+0x94>)
 8005c46:	f008 fa55 	bl	800e0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005c50:	f000 fb20 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20002338 	.word	0x20002338

08005c60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c74:	463b      	mov	r3, r7
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <MX_TIM3_Init+0x98>)
 8005c80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005c84:	f242 3228 	movw	r2, #9000	; 0x2328
 8005c88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005c90:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c98:	4b16      	ldr	r3, [pc, #88]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c9e:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ca4:	4813      	ldr	r0, [pc, #76]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005ca6:	f007 fe33 	bl	800d910 <HAL_TIM_Base_Init>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005cb0:	f000 faf0 	bl	8006294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005cc2:	f007 ffed 	bl	800dca0 <HAL_TIM_ConfigClockSource>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005ccc:	f000 fae2 	bl	8006294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005cd8:	463b      	mov	r3, r7
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <MX_TIM3_Init+0x94>)
 8005cde:	f008 fa09 	bl	800e0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005ce8:	f000 fad4 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005cec:	bf00      	nop
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20002380 	.word	0x20002380
 8005cf8:	40000400 	.word	0x40000400

08005cfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d02:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <MX_USART2_UART_Init+0x50>)
 8005d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d22:	220c      	movs	r2, #12
 8005d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d26:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d32:	4805      	ldr	r0, [pc, #20]	; (8005d48 <MX_USART2_UART_Init+0x4c>)
 8005d34:	f008 fa6e 	bl	800e214 <HAL_UART_Init>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005d3e:	f000 faa9 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	200023c8 	.word	0x200023c8
 8005d4c:	40004400 	.word	0x40004400

08005d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005d54:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d56:	4a12      	ldr	r2, [pc, #72]	; (8005da0 <MX_USART3_UART_Init+0x50>)
 8005d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005d5a:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d74:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d76:	220c      	movs	r2, #12
 8005d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d80:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d86:	4805      	ldr	r0, [pc, #20]	; (8005d9c <MX_USART3_UART_Init+0x4c>)
 8005d88:	f008 fa44 	bl	800e214 <HAL_UART_Init>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005d92:	f000 fa7f 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005d96:	bf00      	nop
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	2000240c 	.word	0x2000240c
 8005da0:	40004800 	.word	0x40004800

08005da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <MX_DMA_Init+0x78>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <MX_DMA_Init+0x78>)
 8005db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005db8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dba:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <MX_DMA_Init+0x78>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc2:	607b      	str	r3, [r7, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <MX_DMA_Init+0x78>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <MX_DMA_Init+0x78>)
 8005dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <MX_DMA_Init+0x78>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005de2:	2200      	movs	r2, #0
 8005de4:	2100      	movs	r1, #0
 8005de6:	200f      	movs	r0, #15
 8005de8:	f004 fb61 	bl	800a4ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005dec:	200f      	movs	r0, #15
 8005dee:	f004 fb7a 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005df2:	2200      	movs	r2, #0
 8005df4:	2100      	movs	r1, #0
 8005df6:	2038      	movs	r0, #56	; 0x38
 8005df8:	f004 fb59 	bl	800a4ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005dfc:	2038      	movs	r0, #56	; 0x38
 8005dfe:	f004 fb72 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005e02:	2200      	movs	r2, #0
 8005e04:	2100      	movs	r1, #0
 8005e06:	203a      	movs	r0, #58	; 0x3a
 8005e08:	f004 fb51 	bl	800a4ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005e0c:	203a      	movs	r0, #58	; 0x3a
 8005e0e:	f004 fb6a 	bl	800a4e6 <HAL_NVIC_EnableIRQ>

}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800

08005e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	609a      	str	r2, [r3, #8]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	4b68      	ldr	r3, [pc, #416]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	4a67      	ldr	r2, [pc, #412]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e40:	f043 0304 	orr.w	r3, r3, #4
 8005e44:	6313      	str	r3, [r2, #48]	; 0x30
 8005e46:	4b65      	ldr	r3, [pc, #404]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	4a60      	ldr	r2, [pc, #384]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	6313      	str	r3, [r2, #48]	; 0x30
 8005e62:	4b5e      	ldr	r3, [pc, #376]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	4b5a      	ldr	r3, [pc, #360]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a59      	ldr	r2, [pc, #356]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b57      	ldr	r3, [pc, #348]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	4b53      	ldr	r3, [pc, #332]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	4a52      	ldr	r2, [pc, #328]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e94:	f043 0302 	orr.w	r3, r3, #2
 8005e98:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9a:	4b50      	ldr	r3, [pc, #320]	; (8005fdc <MX_GPIO_Init+0x1bc>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8005eac:	484c      	ldr	r0, [pc, #304]	; (8005fe0 <MX_GPIO_Init+0x1c0>)
 8005eae:	f005 f8e3 	bl	800b078 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	484b      	ldr	r0, [pc, #300]	; (8005fe4 <MX_GPIO_Init+0x1c4>)
 8005eb8:	f005 f8de 	bl	800b078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ec2:	4847      	ldr	r0, [pc, #284]	; (8005fe0 <MX_GPIO_Init+0x1c0>)
 8005ec4:	f005 f8d8 	bl	800b078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_TUNE_Pin|DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	21e0      	movs	r1, #224	; 0xe0
 8005ecc:	4846      	ldr	r0, [pc, #280]	; (8005fe8 <MX_GPIO_Init+0x1c8>)
 8005ece:	f005 f8d3 	bl	800b078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ed8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005ee2:	f107 0314 	add.w	r3, r7, #20
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	483e      	ldr	r0, [pc, #248]	; (8005fe4 <MX_GPIO_Init+0x1c4>)
 8005eea:	f004 ff19 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8005eee:	f248 4360 	movw	r3, #33888	; 0x8460
 8005ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efc:	2300      	movs	r3, #0
 8005efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	4619      	mov	r1, r3
 8005f06:	4836      	ldr	r0, [pc, #216]	; (8005fe0 <MX_GPIO_Init+0x1c0>)
 8005f08:	f004 ff0a 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f10:	2301      	movs	r3, #1
 8005f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8005f1c:	f107 0314 	add.w	r3, r7, #20
 8005f20:	4619      	mov	r1, r3
 8005f22:	482f      	ldr	r0, [pc, #188]	; (8005fe0 <MX_GPIO_Init+0x1c0>)
 8005f24:	f004 fefc 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f34:	2303      	movs	r3, #3
 8005f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4829      	ldr	r0, [pc, #164]	; (8005fe4 <MX_GPIO_Init+0x1c4>)
 8005f40:	f004 feee 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8005f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f52:	2303      	movs	r3, #3
 8005f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8005f56:	f107 0314 	add.w	r3, r7, #20
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4820      	ldr	r0, [pc, #128]	; (8005fe0 <MX_GPIO_Init+0x1c0>)
 8005f5e:	f004 fedf 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005f62:	2310      	movs	r3, #16
 8005f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005f70:	f107 0314 	add.w	r3, r7, #20
 8005f74:	4619      	mov	r1, r3
 8005f76:	481c      	ldr	r0, [pc, #112]	; (8005fe8 <MX_GPIO_Init+0x1c8>)
 8005f78:	f004 fed2 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_TUNE_Pin */
  GPIO_InitStruct.Pin = CLK_TUNE_Pin;
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f80:	2301      	movs	r3, #1
 8005f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CLK_TUNE_GPIO_Port, &GPIO_InitStruct);
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4619      	mov	r1, r3
 8005f92:	4815      	ldr	r0, [pc, #84]	; (8005fe8 <MX_GPIO_Init+0x1c8>)
 8005f94:	f004 fec4 	bl	800ad20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8005f98:	23c0      	movs	r3, #192	; 0xc0
 8005f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	4619      	mov	r1, r3
 8005fae:	480e      	ldr	r0, [pc, #56]	; (8005fe8 <MX_GPIO_Init+0x1c8>)
 8005fb0:	f004 feb6 	bl	800ad20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	200a      	movs	r0, #10
 8005fba:	f004 fa78 	bl	800a4ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005fbe:	200a      	movs	r0, #10
 8005fc0:	f004 fa91 	bl	800a4e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	2028      	movs	r0, #40	; 0x28
 8005fca:	f004 fa70 	bl	800a4ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005fce:	2028      	movs	r0, #40	; 0x28
 8005fd0:	f004 fa89 	bl	800a4e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005fd4:	bf00      	nop
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40020000 	.word	0x40020000
 8005fe4:	40020800 	.word	0x40020800
 8005fe8:	40020400 	.word	0x40020400

08005fec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a06      	ldr	r2, [pc, #24]	; (8006010 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d105      	bne.n	8006008 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin (CLK_TUNE_GPIO_Port, CLK_TUNE_Pin);
 8005ffc:	2120      	movs	r1, #32
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006000:	f005 f853 	bl	800b0aa <HAL_GPIO_TogglePin>
		calc_update_energy_totals();
 8006004:	f7fc fd1c 	bl	8002a40 <calc_update_energy_totals>
	}
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20002380 	.word	0x20002380
 8006014:	40020400 	.word	0x40020400

08006018 <HAL_GPIO_EXTI_Callback>:
	ee24_read_done = true;
}

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b10      	cmp	r3, #16
 8006026:	d003      	beq.n	8006030 <HAL_GPIO_EXTI_Callback+0x18>
 8006028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602c:	d004      	beq.n	8006038 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 800602e:	e007      	b.n	8006040 <HAL_GPIO_EXTI_Callback+0x28>
		touch_action = 1;
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <HAL_GPIO_EXTI_Callback+0x34>)
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
		break;
 8006036:	e003      	b.n	8006040 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_GPIO_EXTI_Callback+0x38>)
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
		break;
 800603e:	bf00      	nop
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	200025ff 	.word	0x200025ff
 8006050:	200025fe 	.word	0x200025fe

08006054 <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <HAL_ADC_ConvCpltCallback+0x34>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d105      	bne.n	8006070 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <HAL_ADC_ConvCpltCallback+0x38>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	4a08      	ldr	r2, [pc, #32]	; (800608c <HAL_ADC_ConvCpltCallback+0x38>)
 800606c:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 800606e:	e004      	b.n	800607a <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <HAL_ADC_ConvCpltCallback+0x3c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	4a06      	ldr	r2, [pc, #24]	; (8006090 <HAL_ADC_ConvCpltCallback+0x3c>)
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	200020dc 	.word	0x200020dc
 800608c:	20002610 	.word	0x20002610
 8006090:	20002618 	.word	0x20002618

08006094 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d105      	bne.n	80060b0 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	4a08      	ldr	r2, [pc, #32]	; (80060cc <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80060ac:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80060ae:	e004      	b.n	80060ba <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80060b8:	6013      	str	r3, [r2, #0]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	200020dc 	.word	0x200020dc
 80060cc:	2000260c 	.word	0x2000260c
 80060d0:	20002614 	.word	0x20002614

080060d4 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <HAL_ADC_ErrorCallback+0x94>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d102      	bne.n	80060ea <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 80060e4:	2301      	movs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	e001      	b.n	80060ee <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 80060ea:	2302      	movs	r3, #2
 80060ec:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d82c      	bhi.n	8006150 <HAL_ADC_ErrorCallback+0x7c>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <HAL_ADC_ErrorCallback+0x28>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006111 	.word	0x08006111
 8006100:	08006121 	.word	0x08006121
 8006104:	08006131 	.word	0x08006131
 8006108:	08006151 	.word	0x08006151
 800610c:	08006141 	.word	0x08006141
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006114:	461a      	mov	r2, r3
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	4814      	ldr	r0, [pc, #80]	; (800616c <HAL_ADC_ErrorCallback+0x98>)
 800611a:	f000 fd25 	bl	8006b68 <term_print>
		break;
 800611e:	e01e      	b.n	800615e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	461a      	mov	r2, r3
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	4811      	ldr	r0, [pc, #68]	; (8006170 <HAL_ADC_ErrorCallback+0x9c>)
 800612a:	f000 fd1d 	bl	8006b68 <term_print>
		break;
 800612e:	e016      	b.n	800615e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	461a      	mov	r2, r3
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	480e      	ldr	r0, [pc, #56]	; (8006174 <HAL_ADC_ErrorCallback+0xa0>)
 800613a:	f000 fd15 	bl	8006b68 <term_print>
		break;
 800613e:	e00e      	b.n	800615e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	461a      	mov	r2, r3
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	480b      	ldr	r0, [pc, #44]	; (8006178 <HAL_ADC_ErrorCallback+0xa4>)
 800614a:	f000 fd0d 	bl	8006b68 <term_print>
		break;
 800614e:	e006      	b.n	800615e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006154:	4619      	mov	r1, r3
 8006156:	4809      	ldr	r0, [pc, #36]	; (800617c <HAL_ADC_ErrorCallback+0xa8>)
 8006158:	f000 fd06 	bl	8006b68 <term_print>
	}
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200020dc 	.word	0x200020dc
 800616c:	08013b28 	.word	0x08013b28
 8006170:	08013b44 	.word	0x08013b44
 8006174:	08013b68 	.word	0x08013b68
 8006178:	08013b88 	.word	0x08013b88
 800617c:	08013ba4 	.word	0x08013ba4

08006180 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a37      	ldr	r2, [pc, #220]	; (8006268 <HAL_UART_RxCpltCallback+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d13b      	bne.n	8006208 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 8006190:	4b36      	ldr	r3, [pc, #216]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b7f      	cmp	r3, #127	; 0x7f
 8006198:	d902      	bls.n	80061a0 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 800619c:	2200      	movs	r2, #0
 800619e:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80061a0:	2201      	movs	r2, #1
 80061a2:	4933      	ldr	r1, [pc, #204]	; (8006270 <HAL_UART_RxCpltCallback+0xf0>)
 80061a4:	4830      	ldr	r0, [pc, #192]	; (8006268 <HAL_UART_RxCpltCallback+0xe8>)
 80061a6:	f008 f914 	bl	800e3d2 <HAL_UART_Receive_IT>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d156      	bne.n	800625e <HAL_UART_RxCpltCallback+0xde>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 80061b0:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <HAL_UART_RxCpltCallback+0xf0>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b0a      	cmp	r3, #10
 80061b8:	d012      	beq.n	80061e0 <HAL_UART_RxCpltCallback+0x60>
 80061ba:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <HAL_UART_RxCpltCallback+0xf0>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b0d      	cmp	r3, #13
 80061c2:	d00d      	beq.n	80061e0 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 80061c4:	4b29      	ldr	r3, [pc, #164]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	b291      	uxth	r1, r2
 80061ce:	4a27      	ldr	r2, [pc, #156]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 80061d0:	8011      	strh	r1, [r2, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b26      	ldr	r3, [pc, #152]	; (8006270 <HAL_UART_RxCpltCallback+0xf0>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	b2d9      	uxtb	r1, r3
 80061da:	4b26      	ldr	r3, [pc, #152]	; (8006274 <HAL_UART_RxCpltCallback+0xf4>)
 80061dc:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 80061de:	e03e      	b.n	800625e <HAL_UART_RxCpltCallback+0xde>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 80061e0:	4b22      	ldr	r3, [pc, #136]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d039      	beq.n	800625e <HAL_UART_RxCpltCallback+0xde>
					cli_rx_cmd_ready = 1;
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <HAL_UART_RxCpltCallback+0xf8>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 80061f0:	4b1e      	ldr	r3, [pc, #120]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	b291      	uxth	r1, r2
 80061fa:	4a1c      	ldr	r2, [pc, #112]	; (800626c <HAL_UART_RxCpltCallback+0xec>)
 80061fc:	8011      	strh	r1, [r2, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <HAL_UART_RxCpltCallback+0xf4>)
 8006202:	2100      	movs	r1, #0
 8006204:	5499      	strb	r1, [r3, r2]
		return;
 8006206:	e02a      	b.n	800625e <HAL_UART_RxCpltCallback+0xde>
	}
#ifdef USE_WIFI
	// receive data from ESP
	if (huart == &ESP_UART) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1c      	ldr	r2, [pc, #112]	; (800627c <HAL_UART_RxCpltCallback+0xfc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d127      	bne.n	8006260 <HAL_UART_RxCpltCallback+0xe0>
		if ( HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8006210:	2201      	movs	r2, #1
 8006212:	491b      	ldr	r1, [pc, #108]	; (8006280 <HAL_UART_RxCpltCallback+0x100>)
 8006214:	4819      	ldr	r0, [pc, #100]	; (800627c <HAL_UART_RxCpltCallback+0xfc>)
 8006216:	f008 f8dc 	bl	800e3d2 <HAL_UART_Receive_IT>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d117      	bne.n	8006250 <HAL_UART_RxCpltCallback+0xd0>
			if (esp_rx_count >= ESP_RX_BUF_SIZE) {		// prevent RX buffer overrun
 8006220:	4b18      	ldr	r3, [pc, #96]	; (8006284 <HAL_UART_RxCpltCallback+0x104>)
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d305      	bcc.n	8006236 <HAL_UART_RxCpltCallback+0xb6>
				esp_rx_count = 0;
 800622a:	4b16      	ldr	r3, [pc, #88]	; (8006284 <HAL_UART_RxCpltCallback+0x104>)
 800622c:	2200      	movs	r2, #0
 800622e:	801a      	strh	r2, [r3, #0]
				esp_rx_buffer_overflow = true;				// set error flag
 8006230:	4b15      	ldr	r3, [pc, #84]	; (8006288 <HAL_UART_RxCpltCallback+0x108>)
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
			}
			esp_rx_buf[esp_rx_count++] = esp_rx_byte;		// add received byte to RX buffer
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_UART_RxCpltCallback+0x104>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	b291      	uxth	r1, r2
 800623e:	4a11      	ldr	r2, [pc, #68]	; (8006284 <HAL_UART_RxCpltCallback+0x104>)
 8006240:	8011      	strh	r1, [r2, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <HAL_UART_RxCpltCallback+0x100>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b2d9      	uxtb	r1, r3
 800624a:	4b10      	ldr	r3, [pc, #64]	; (800628c <HAL_UART_RxCpltCallback+0x10c>)
 800624c:	5499      	strb	r1, [r3, r2]
 800624e:	e007      	b.n	8006260 <HAL_UART_RxCpltCallback+0xe0>
		} else {	// this should never happen
			esp_rx_error_count++;
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <HAL_UART_RxCpltCallback+0x110>)
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <HAL_UART_RxCpltCallback+0x110>)
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e000      	b.n	8006260 <HAL_UART_RxCpltCallback+0xe0>
		return;
 800625e:	bf00      	nop
		}
	}
#endif
}
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	200023c8 	.word	0x200023c8
 800626c:	20002550 	.word	0x20002550
 8006270:	20002552 	.word	0x20002552
 8006274:	20002554 	.word	0x20002554
 8006278:	200025d4 	.word	0x200025d4
 800627c:	2000240c 	.word	0x2000240c
 8006280:	200025d5 	.word	0x200025d5
 8006284:	20008ac4 	.word	0x20008ac4
 8006288:	20008ac8 	.word	0x20008ac8
 800628c:	20008644 	.word	0x20008644
 8006290:	20008ac6 	.word	0x20008ac6

08006294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8006298:	4802      	ldr	r0, [pc, #8]	; (80062a4 <Error_Handler+0x10>)
 800629a:	f009 ffa9 	bl	80101f0 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800629e:	b672      	cpsid	i
}
 80062a0:	bf00      	nop
    __disable_irq();
    while (1)
 80062a2:	e7fe      	b.n	80062a2 <Error_Handler+0xe>
 80062a4:	08013bc4 	.word	0x08013bc4

080062a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <HAL_MspInit+0x4c>)
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	4a0f      	ldr	r2, [pc, #60]	; (80062f4 <HAL_MspInit+0x4c>)
 80062b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062bc:	6453      	str	r3, [r2, #68]	; 0x44
 80062be:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <HAL_MspInit+0x4c>)
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c6:	607b      	str	r3, [r7, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062ca:	2300      	movs	r3, #0
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <HAL_MspInit+0x4c>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <HAL_MspInit+0x4c>)
 80062d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6413      	str	r3, [r2, #64]	; 0x40
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_MspInit+0x4c>)
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80062e6:	2007      	movs	r0, #7
 80062e8:	f004 f8d6 	bl	800a498 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40023800 	.word	0x40023800

080062f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08e      	sub	sp, #56	; 0x38
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a79      	ldr	r2, [pc, #484]	; (80064fc <HAL_ADC_MspInit+0x204>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d173      	bne.n	8006402 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	4b78      	ldr	r3, [pc, #480]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	4a77      	ldr	r2, [pc, #476]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	6453      	str	r3, [r2, #68]	; 0x44
 800632a:	4b75      	ldr	r3, [pc, #468]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	4b71      	ldr	r3, [pc, #452]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	4a70      	ldr	r2, [pc, #448]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006340:	f043 0304 	orr.w	r3, r3, #4
 8006344:	6313      	str	r3, [r2, #48]	; 0x30
 8006346:	4b6e      	ldr	r3, [pc, #440]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	4b6a      	ldr	r3, [pc, #424]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	4a69      	ldr	r2, [pc, #420]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	6313      	str	r3, [r2, #48]	; 0x30
 8006362:	4b67      	ldr	r3, [pc, #412]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800636e:	2301      	movs	r3, #1
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006372:	2303      	movs	r3, #3
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006376:	2300      	movs	r3, #0
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800637a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800637e:	4619      	mov	r1, r3
 8006380:	4860      	ldr	r0, [pc, #384]	; (8006504 <HAL_ADC_MspInit+0x20c>)
 8006382:	f004 fccd 	bl	800ad20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006386:	2301      	movs	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800638a:	2303      	movs	r3, #3
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	2300      	movs	r3, #0
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006396:	4619      	mov	r1, r3
 8006398:	485b      	ldr	r0, [pc, #364]	; (8006508 <HAL_ADC_MspInit+0x210>)
 800639a:	f004 fcc1 	bl	800ad20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800639e:	4b5b      	ldr	r3, [pc, #364]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063a0:	4a5b      	ldr	r2, [pc, #364]	; (8006510 <HAL_ADC_MspInit+0x218>)
 80063a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80063a4:	4b59      	ldr	r3, [pc, #356]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063aa:	4b58      	ldr	r3, [pc, #352]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063b0:	4b56      	ldr	r3, [pc, #344]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80063b6:	4b55      	ldr	r3, [pc, #340]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063be:	4b53      	ldr	r3, [pc, #332]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80063c6:	4b51      	ldr	r3, [pc, #324]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80063ce:	4b4f      	ldr	r3, [pc, #316]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80063d6:	4b4d      	ldr	r3, [pc, #308]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80063dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063de:	4b4b      	ldr	r3, [pc, #300]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80063e4:	4849      	ldr	r0, [pc, #292]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063e6:	f004 f899 	bl	800a51c <HAL_DMA_Init>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80063f0:	f7ff ff50 	bl	8006294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a45      	ldr	r2, [pc, #276]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
 80063fa:	4a44      	ldr	r2, [pc, #272]	; (800650c <HAL_ADC_MspInit+0x214>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006400:	e078      	b.n	80064f4 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a43      	ldr	r2, [pc, #268]	; (8006514 <HAL_ADC_MspInit+0x21c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d173      	bne.n	80064f4 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	4a3a      	ldr	r2, [pc, #232]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800641a:	6453      	str	r3, [r2, #68]	; 0x44
 800641c:	4b38      	ldr	r3, [pc, #224]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	4a33      	ldr	r2, [pc, #204]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006432:	f043 0304 	orr.w	r3, r3, #4
 8006436:	6313      	str	r3, [r2, #48]	; 0x30
 8006438:	4b31      	ldr	r3, [pc, #196]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	4a2c      	ldr	r2, [pc, #176]	; (8006500 <HAL_ADC_MspInit+0x208>)
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	6313      	str	r3, [r2, #48]	; 0x30
 8006454:	4b2a      	ldr	r3, [pc, #168]	; (8006500 <HAL_ADC_MspInit+0x208>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006460:	2302      	movs	r3, #2
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006464:	2303      	movs	r3, #3
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800646c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006470:	4619      	mov	r1, r3
 8006472:	4824      	ldr	r0, [pc, #144]	; (8006504 <HAL_ADC_MspInit+0x20c>)
 8006474:	f004 fc54 	bl	800ad20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006478:	2302      	movs	r3, #2
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800647c:	2303      	movs	r3, #3
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006488:	4619      	mov	r1, r3
 800648a:	481f      	ldr	r0, [pc, #124]	; (8006508 <HAL_ADC_MspInit+0x210>)
 800648c:	f004 fc48 	bl	800ad20 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006490:	4b21      	ldr	r3, [pc, #132]	; (8006518 <HAL_ADC_MspInit+0x220>)
 8006492:	4a22      	ldr	r2, [pc, #136]	; (800651c <HAL_ADC_MspInit+0x224>)
 8006494:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006496:	4b20      	ldr	r3, [pc, #128]	; (8006518 <HAL_ADC_MspInit+0x220>)
 8006498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800649c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800649e:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80064a4:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80064aa:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064b0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064b2:	4b19      	ldr	r3, [pc, #100]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064ba:	4b17      	ldr	r3, [pc, #92]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80064d0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064d2:	4b11      	ldr	r3, [pc, #68]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80064d8:	480f      	ldr	r0, [pc, #60]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064da:	f004 f81f 	bl	800a51c <HAL_DMA_Init>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 80064e4:	f7ff fed6 	bl	8006294 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a0b      	ldr	r2, [pc, #44]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
 80064ee:	4a0a      	ldr	r2, [pc, #40]	; (8006518 <HAL_ADC_MspInit+0x220>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80064f4:	bf00      	nop
 80064f6:	3738      	adds	r7, #56	; 0x38
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40012000 	.word	0x40012000
 8006500:	40023800 	.word	0x40023800
 8006504:	40020800 	.word	0x40020800
 8006508:	40020000 	.word	0x40020000
 800650c:	2000216c 	.word	0x2000216c
 8006510:	40026410 	.word	0x40026410
 8006514:	40012100 	.word	0x40012100
 8006518:	200021cc 	.word	0x200021cc
 800651c:	40026440 	.word	0x40026440

08006520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	609a      	str	r2, [r3, #8]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_I2C_MspInit+0x84>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d12c      	bne.n	800659c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	6313      	str	r3, [r2, #48]	; 0x30
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800655e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006564:	2312      	movs	r3, #18
 8006566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800656c:	2303      	movs	r3, #3
 800656e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006570:	2304      	movs	r3, #4
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006574:	f107 0314 	add.w	r3, r7, #20
 8006578:	4619      	mov	r1, r3
 800657a:	480c      	ldr	r0, [pc, #48]	; (80065ac <HAL_I2C_MspInit+0x8c>)
 800657c:	f004 fbd0 	bl	800ad20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	4a07      	ldr	r2, [pc, #28]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 800658a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658e:	6413      	str	r3, [r2, #64]	; 0x40
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800659c:	bf00      	nop
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40005400 	.word	0x40005400
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40020400 	.word	0x40020400

080065b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b8:	f107 0314 	add.w	r3, r7, #20
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a43      	ldr	r2, [pc, #268]	; (80066dc <HAL_SPI_MspInit+0x12c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d17f      	bne.n	80066d2 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	4b42      	ldr	r3, [pc, #264]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	4a41      	ldr	r2, [pc, #260]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 80065dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065e0:	6413      	str	r3, [r2, #64]	; 0x40
 80065e2:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	4b3b      	ldr	r3, [pc, #236]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	4a3a      	ldr	r2, [pc, #232]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 80065f8:	f043 0304 	orr.w	r3, r3, #4
 80065fc:	6313      	str	r3, [r2, #48]	; 0x30
 80065fe:	4b38      	ldr	r3, [pc, #224]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800660a:	2300      	movs	r3, #0
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	4b34      	ldr	r3, [pc, #208]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	4a33      	ldr	r2, [pc, #204]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	6313      	str	r3, [r2, #48]	; 0x30
 800661a:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <HAL_SPI_MspInit+0x130>)
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	60bb      	str	r3, [r7, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8006626:	230c      	movs	r3, #12
 8006628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662a:	2302      	movs	r3, #2
 800662c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006632:	2303      	movs	r3, #3
 8006634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006636:	2305      	movs	r3, #5
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800663a:	f107 0314 	add.w	r3, r7, #20
 800663e:	4619      	mov	r1, r3
 8006640:	4828      	ldr	r0, [pc, #160]	; (80066e4 <HAL_SPI_MspInit+0x134>)
 8006642:	f004 fb6d 	bl	800ad20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8006646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664c:	2302      	movs	r3, #2
 800664e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006654:	2303      	movs	r3, #3
 8006656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006658:	2305      	movs	r3, #5
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	4619      	mov	r1, r3
 8006662:	4821      	ldr	r0, [pc, #132]	; (80066e8 <HAL_SPI_MspInit+0x138>)
 8006664:	f004 fb5c 	bl	800ad20 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 800666a:	4a21      	ldr	r2, [pc, #132]	; (80066f0 <HAL_SPI_MspInit+0x140>)
 800666c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800666e:	4b1f      	ldr	r3, [pc, #124]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 8006670:	2200      	movs	r2, #0
 8006672:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800667a:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 800667c:	2200      	movs	r2, #0
 800667e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 8006682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006686:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006688:	4b18      	ldr	r3, [pc, #96]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 800668a:	2200      	movs	r2, #0
 800668c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800668e:	4b17      	ldr	r3, [pc, #92]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 8006690:	2200      	movs	r2, #0
 8006692:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006694:	4b15      	ldr	r3, [pc, #84]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 8006696:	2200      	movs	r2, #0
 8006698:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 800669c:	2200      	movs	r2, #0
 800669e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066a0:	4b12      	ldr	r3, [pc, #72]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80066a6:	4811      	ldr	r0, [pc, #68]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 80066a8:	f003 ff38 	bl	800a51c <HAL_DMA_Init>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80066b2:	f7ff fdef 	bl	8006294 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a0c      	ldr	r2, [pc, #48]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 80066ba:	649a      	str	r2, [r3, #72]	; 0x48
 80066bc:	4a0b      	ldr	r2, [pc, #44]	; (80066ec <HAL_SPI_MspInit+0x13c>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80066c2:	2200      	movs	r2, #0
 80066c4:	2100      	movs	r1, #0
 80066c6:	2024      	movs	r0, #36	; 0x24
 80066c8:	f003 fef1 	bl	800a4ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80066cc:	2024      	movs	r0, #36	; 0x24
 80066ce:	f003 ff0a 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80066d2:	bf00      	nop
 80066d4:	3728      	adds	r7, #40	; 0x28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40003800 	.word	0x40003800
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40020800 	.word	0x40020800
 80066e8:	40020400 	.word	0x40020400
 80066ec:	200022d8 	.word	0x200022d8
 80066f0:	40026070 	.word	0x40026070

080066f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006704:	d116      	bne.n	8006734 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4b1a      	ldr	r3, [pc, #104]	; (8006774 <HAL_TIM_Base_MspInit+0x80>)
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	4a19      	ldr	r2, [pc, #100]	; (8006774 <HAL_TIM_Base_MspInit+0x80>)
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	6413      	str	r3, [r2, #64]	; 0x40
 8006716:	4b17      	ldr	r3, [pc, #92]	; (8006774 <HAL_TIM_Base_MspInit+0x80>)
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006722:	2200      	movs	r2, #0
 8006724:	2100      	movs	r1, #0
 8006726:	201c      	movs	r0, #28
 8006728:	f003 fec1 	bl	800a4ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800672c:	201c      	movs	r0, #28
 800672e:	f003 feda 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006732:	e01a      	b.n	800676a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <HAL_TIM_Base_MspInit+0x84>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d115      	bne.n	800676a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <HAL_TIM_Base_MspInit+0x80>)
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	4a0b      	ldr	r2, [pc, #44]	; (8006774 <HAL_TIM_Base_MspInit+0x80>)
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	6413      	str	r3, [r2, #64]	; 0x40
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <HAL_TIM_Base_MspInit+0x80>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	60bb      	str	r3, [r7, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	201d      	movs	r0, #29
 8006760:	f003 fea5 	bl	800a4ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006764:	201d      	movs	r0, #29
 8006766:	f003 febe 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40000400 	.word	0x40000400

0800677c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	; 0x30
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006784:	f107 031c 	add.w	r3, r7, #28
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	605a      	str	r2, [r3, #4]
 800678e:	609a      	str	r2, [r3, #8]
 8006790:	60da      	str	r2, [r3, #12]
 8006792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a3a      	ldr	r2, [pc, #232]	; (8006884 <HAL_UART_MspInit+0x108>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d134      	bne.n	8006808 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800679e:	2300      	movs	r3, #0
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <HAL_UART_MspInit+0x10c>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	4a38      	ldr	r2, [pc, #224]	; (8006888 <HAL_UART_MspInit+0x10c>)
 80067a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ac:	6413      	str	r3, [r2, #64]	; 0x40
 80067ae:	4b36      	ldr	r3, [pc, #216]	; (8006888 <HAL_UART_MspInit+0x10c>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	4b32      	ldr	r3, [pc, #200]	; (8006888 <HAL_UART_MspInit+0x10c>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	4a31      	ldr	r2, [pc, #196]	; (8006888 <HAL_UART_MspInit+0x10c>)
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ca:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <HAL_UART_MspInit+0x10c>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80067d6:	230c      	movs	r3, #12
 80067d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067da:	2302      	movs	r3, #2
 80067dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067e2:	2303      	movs	r3, #3
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80067e6:	2307      	movs	r3, #7
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067ea:	f107 031c 	add.w	r3, r7, #28
 80067ee:	4619      	mov	r1, r3
 80067f0:	4826      	ldr	r0, [pc, #152]	; (800688c <HAL_UART_MspInit+0x110>)
 80067f2:	f004 fa95 	bl	800ad20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80067f6:	2200      	movs	r2, #0
 80067f8:	2100      	movs	r1, #0
 80067fa:	2026      	movs	r0, #38	; 0x26
 80067fc:	f003 fe57 	bl	800a4ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006800:	2026      	movs	r0, #38	; 0x26
 8006802:	f003 fe70 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006806:	e039      	b.n	800687c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a20      	ldr	r2, [pc, #128]	; (8006890 <HAL_UART_MspInit+0x114>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d134      	bne.n	800687c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <HAL_UART_MspInit+0x10c>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_UART_MspInit+0x10c>)
 800681c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
 8006822:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_UART_MspInit+0x10c>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <HAL_UART_MspInit+0x10c>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	4a14      	ldr	r2, [pc, #80]	; (8006888 <HAL_UART_MspInit+0x10c>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	6313      	str	r3, [r2, #48]	; 0x30
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_UART_MspInit+0x10c>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800684a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800684e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006850:	2302      	movs	r3, #2
 8006852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006854:	2300      	movs	r3, #0
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006858:	2303      	movs	r3, #3
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800685c:	2307      	movs	r3, #7
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006860:	f107 031c 	add.w	r3, r7, #28
 8006864:	4619      	mov	r1, r3
 8006866:	480b      	ldr	r0, [pc, #44]	; (8006894 <HAL_UART_MspInit+0x118>)
 8006868:	f004 fa5a 	bl	800ad20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800686c:	2200      	movs	r2, #0
 800686e:	2100      	movs	r1, #0
 8006870:	2027      	movs	r0, #39	; 0x27
 8006872:	f003 fe1c 	bl	800a4ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006876:	2027      	movs	r0, #39	; 0x27
 8006878:	f003 fe35 	bl	800a4e6 <HAL_NVIC_EnableIRQ>
}
 800687c:	bf00      	nop
 800687e:	3730      	adds	r7, #48	; 0x30
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40004400 	.word	0x40004400
 8006888:	40023800 	.word	0x40023800
 800688c:	40020000 	.word	0x40020000
 8006890:	40004800 	.word	0x40004800
 8006894:	40020800 	.word	0x40020800

08006898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800689c:	e7fe      	b.n	800689c <NMI_Handler+0x4>

0800689e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800689e:	b480      	push	{r7}
 80068a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068a2:	e7fe      	b.n	80068a2 <HardFault_Handler+0x4>

080068a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068a8:	e7fe      	b.n	80068a8 <MemManage_Handler+0x4>

080068aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068aa:	b480      	push	{r7}
 80068ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068ae:	e7fe      	b.n	80068ae <BusFault_Handler+0x4>

080068b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068b4:	e7fe      	b.n	80068b4 <UsageFault_Handler+0x4>

080068b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068ba:	bf00      	nop
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068d2:	b480      	push	{r7}
 80068d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068d6:	bf00      	nop
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068e4:	f003 f8c0 	bl	8009a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068e8:	bf00      	nop
 80068ea:	bd80      	pop	{r7, pc}

080068ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 80068f0:	2010      	movs	r0, #16
 80068f2:	f004 fbf5 	bl	800b0e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006900:	4802      	ldr	r0, [pc, #8]	; (800690c <DMA1_Stream4_IRQHandler+0x10>)
 8006902:	f003 ffa3 	bl	800a84c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200022d8 	.word	0x200022d8

08006910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006914:	4804      	ldr	r0, [pc, #16]	; (8006928 <TIM2_IRQHandler+0x18>)
 8006916:	f007 f8bb 	bl	800da90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 800691a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800691e:	4803      	ldr	r0, [pc, #12]	; (800692c <TIM2_IRQHandler+0x1c>)
 8006920:	f004 fbc3 	bl	800b0aa <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8006924:	bf00      	nop
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20002338 	.word	0x20002338
 800692c:	40020000 	.word	0x40020000

08006930 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006934:	4802      	ldr	r0, [pc, #8]	; (8006940 <TIM3_IRQHandler+0x10>)
 8006936:	f007 f8ab 	bl	800da90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800693a:	bf00      	nop
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20002380 	.word	0x20002380

08006944 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006948:	4802      	ldr	r0, [pc, #8]	; (8006954 <SPI2_IRQHandler+0x10>)
 800694a:	f006 fd83 	bl	800d454 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800694e:	bf00      	nop
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20002280 	.word	0x20002280

08006958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800695c:	4802      	ldr	r0, [pc, #8]	; (8006968 <USART2_IRQHandler+0x10>)
 800695e:	f007 fd69 	bl	800e434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	200023c8 	.word	0x200023c8

0800696c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <USART3_IRQHandler+0x10>)
 8006972:	f007 fd5f 	bl	800e434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006976:	bf00      	nop
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	2000240c 	.word	0x2000240c

08006980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006984:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006988:	f004 fbaa 	bl	800b0e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800698c:	bf00      	nop
 800698e:	bd80      	pop	{r7, pc}

08006990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006994:	4802      	ldr	r0, [pc, #8]	; (80069a0 <DMA2_Stream0_IRQHandler+0x10>)
 8006996:	f003 ff59 	bl	800a84c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800699a:	bf00      	nop
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	2000216c 	.word	0x2000216c

080069a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80069a8:	4802      	ldr	r0, [pc, #8]	; (80069b4 <DMA2_Stream2_IRQHandler+0x10>)
 80069aa:	f003 ff4f 	bl	800a84c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200021cc 	.word	0x200021cc

080069b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return 1;
 80069bc:	2301      	movs	r3, #1
}
 80069be:	4618      	mov	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <_kill>:

int _kill(int pid, int sig)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80069d2:	f009 fcd1 	bl	8010378 <__errno>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2216      	movs	r2, #22
 80069da:	601a      	str	r2, [r3, #0]
  return -1;
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_exit>:

void _exit (int status)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80069f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ffe7 	bl	80069c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80069fa:	e7fe      	b.n	80069fa <_exit+0x12>

080069fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e00a      	b.n	8006a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006a0e:	f3af 8000 	nop.w
 8006a12:	4601      	mov	r1, r0
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	60ba      	str	r2, [r7, #8]
 8006a1a:	b2ca      	uxtb	r2, r1
 8006a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	3301      	adds	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	dbf0      	blt.n	8006a0e <_read+0x12>
  }

  return len;
 8006a2c:	687b      	ldr	r3, [r7, #4]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e009      	b.n	8006a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	60ba      	str	r2, [r7, #8]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	dbf1      	blt.n	8006a48 <_write+0x12>
  }
  return len;
 8006a64:	687b      	ldr	r3, [r7, #4]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <_close>:

int _close(int file)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a96:	605a      	str	r2, [r3, #4]
  return 0;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <_isatty>:

int _isatty(int file)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006aae:	2301      	movs	r3, #1
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ae0:	4a14      	ldr	r2, [pc, #80]	; (8006b34 <_sbrk+0x5c>)
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <_sbrk+0x60>)
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <_sbrk+0x64>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006af4:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <_sbrk+0x64>)
 8006af6:	4a12      	ldr	r2, [pc, #72]	; (8006b40 <_sbrk+0x68>)
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <_sbrk+0x64>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d207      	bcs.n	8006b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b08:	f009 fc36 	bl	8010378 <__errno>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	220c      	movs	r2, #12
 8006b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b16:	e009      	b.n	8006b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <_sbrk+0x64>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <_sbrk+0x64>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <_sbrk+0x64>)
 8006b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20020000 	.word	0x20020000
 8006b38:	00000400 	.word	0x00000400
 8006b3c:	20008240 	.word	0x20008240
 8006b40:	2000a040 	.word	0x2000a040

08006b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <SystemInit+0x20>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <SystemInit+0x20>)
 8006b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	e000ed00 	.word	0xe000ed00

08006b68 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8006b68:	b40f      	push	{r0, r1, r2, r3}
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8006b70:	f107 0314 	add.w	r3, r7, #20
 8006b74:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b7e:	480b      	ldr	r0, [pc, #44]	; (8006bac <term_print+0x44>)
 8006b80:	f009 fb28 	bl	80101d4 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <term_print+0x44>)
 8006b86:	f7f9 fb93 	bl	80002b0 <strlen>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b92:	4906      	ldr	r1, [pc, #24]	; (8006bac <term_print+0x44>)
 8006b94:	4806      	ldr	r0, [pc, #24]	; (8006bb0 <term_print+0x48>)
 8006b96:	f007 fb8a 	bl	800e2ae <HAL_UART_Transmit>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ba6:	b004      	add	sp, #16
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20008244 	.word	0x20008244
 8006bb0:	200023c8 	.word	0x200023c8

08006bb4 <term_print_hex>:
 * Print buffer content in hexadecimal format
 * parameter buf: buffer
 * parameter len: buffer length
 * parameter per_line: number of values to print per line (0=default)
 */
void term_print_hex(uint8_t* buf, unsigned len, uint8_t per_line) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]
	if (per_line < 4) { per_line = 16; }
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d801      	bhi.n	8006bd0 <term_print_hex+0x1c>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < len; i++) {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	e016      	b.n	8006c04 <term_print_hex+0x50>
		term_print("%02X ", buf[i]);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	4619      	mov	r1, r3
 8006be0:	480d      	ldr	r0, [pc, #52]	; (8006c18 <term_print_hex+0x64>)
 8006be2:	f7ff ffc1 	bl	8006b68 <term_print>
		if (++count >= per_line) {
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	3301      	adds	r3, #1
 8006bea:	75fb      	strb	r3, [r7, #23]
 8006bec:	7dfa      	ldrb	r2, [r7, #23]
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d304      	bcc.n	8006bfe <term_print_hex+0x4a>
			term_print("\r\n");
 8006bf4:	4809      	ldr	r0, [pc, #36]	; (8006c1c <term_print_hex+0x68>)
 8006bf6:	f7ff ffb7 	bl	8006b68 <term_print>
			count = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < len; i++) {
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3301      	adds	r3, #1
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d8e4      	bhi.n	8006bd6 <term_print_hex+0x22>
		}
	}
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	08013bf8 	.word	0x08013bf8
 8006c1c:	08013c00 	.word	0x08013c00

08006c20 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d838      	bhi.n	8006caa <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	481d      	ldr	r0, [pc, #116]	; (8006cb4 <term_show_buffer+0x94>)
 8006c3e:	f7ff ff93 	bl	8006b68 <term_print>
	term_print("%3d: ", 0);
 8006c42:	2100      	movs	r1, #0
 8006c44:	481c      	ldr	r0, [pc, #112]	; (8006cb8 <term_show_buffer+0x98>)
 8006c46:	f7ff ff8f 	bl	8006b68 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e020      	b.n	8006c92 <term_show_buffer+0x72>
		if (count >= 20) {
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b13      	cmp	r3, #19
 8006c54:	dd06      	ble.n	8006c64 <term_show_buffer+0x44>
			count =0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8006c5a:	8a7b      	ldrh	r3, [r7, #18]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4817      	ldr	r0, [pc, #92]	; (8006cbc <term_show_buffer+0x9c>)
 8006c60:	f7ff ff82 	bl	8006b68 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	4916      	ldr	r1, [pc, #88]	; (8006cc0 <term_show_buffer+0xa0>)
 8006c68:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006c6c:	fb03 f202 	mul.w	r2, r3, r2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4812      	ldr	r0, [pc, #72]	; (8006cc4 <term_show_buffer+0xa4>)
 8006c7c:	f7ff ff74 	bl	8006b68 <term_print>
		count++; address++;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3301      	adds	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	8a7b      	ldrh	r3, [r7, #18]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8006c98:	d3da      	bcc.n	8006c50 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8006c9a:	480b      	ldr	r0, [pc, #44]	; (8006cc8 <term_show_buffer+0xa8>)
 8006c9c:	f7ff ff64 	bl	8006b68 <term_print>
	term_show_channel(bufnum);
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 f8f6 	bl	8006e94 <term_show_channel>
 8006ca8:	e000      	b.n	8006cac <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006caa:	bf00      	nop
}
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08013c04 	.word	0x08013c04
 8006cb8:	08013c10 	.word	0x08013c10
 8006cbc:	08013c18 	.word	0x08013c18
 8006cc0:	200074dc 	.word	0x200074dc
 8006cc4:	08013c20 	.word	0x08013c20
 8006cc8:	08013c00 	.word	0x08013c00
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <term_show_measurements>:

void term_show_measurements() {
 8006cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd4:	b090      	sub	sp, #64	; 0x40
 8006cd6:	af0c      	add	r7, sp, #48	; 0x30
			term_print(" invalid readings\r\n");
			return;
		}
	}
	*/
	term_print("%.1fV \r\nI%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", v_filtered, I1+1, i_filtered[I1], va_filtered[I1], w_filtered[I1], pf_filtered[I1], acos(pf_filtered[I1]) * (180.0 / 3.14159265) );
 8006cd8:	4b67      	ldr	r3, [pc, #412]	; (8006e78 <term_show_measurements+0x1a8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7f9 fc53 	bl	8000588 <__aeabi_f2d>
 8006ce2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006ce6:	4b65      	ldr	r3, [pc, #404]	; (8006e7c <term_show_measurements+0x1ac>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7f9 fc4c 	bl	8000588 <__aeabi_f2d>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	4b62      	ldr	r3, [pc, #392]	; (8006e80 <term_show_measurements+0x1b0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7f9 fc45 	bl	8000588 <__aeabi_f2d>
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	4b60      	ldr	r3, [pc, #384]	; (8006e84 <term_show_measurements+0x1b4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7f9 fc3e 	bl	8000588 <__aeabi_f2d>
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	468b      	mov	fp, r1
 8006d10:	4b5d      	ldr	r3, [pc, #372]	; (8006e88 <term_show_measurements+0x1b8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7f9 fc37 	bl	8000588 <__aeabi_f2d>
 8006d1a:	e9c7 0100 	strd	r0, r1, [r7]
 8006d1e:	4b5a      	ldr	r3, [pc, #360]	; (8006e88 <term_show_measurements+0x1b8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7f9 fc30 	bl	8000588 <__aeabi_f2d>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	ec43 2b10 	vmov	d0, r2, r3
 8006d30:	f00b ff18 	bl	8012b64 <acos>
 8006d34:	ec51 0b10 	vmov	r0, r1, d0
 8006d38:	a34d      	add	r3, pc, #308	; (adr r3, 8006e70 <term_show_measurements+0x1a0>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fc7b 	bl	8000638 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d4a:	ed97 7b00 	vldr	d7, [r7]
 8006d4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006d52:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8006d56:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006d5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d66:	4849      	ldr	r0, [pc, #292]	; (8006e8c <term_show_measurements+0x1bc>)
 8006d68:	f7ff fefe 	bl	8006b68 <term_print>
	term_print("I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", I2+1, i_filtered[I2], va_filtered[I2], w_filtered[I2], pf_filtered[I2], acos(pf_filtered[I2]) * (180.0 / 3.14159265) );
 8006d6c:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <term_show_measurements+0x1ac>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7f9 fc09 	bl	8000588 <__aeabi_f2d>
 8006d76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006d7a:	4b41      	ldr	r3, [pc, #260]	; (8006e80 <term_show_measurements+0x1b0>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7f9 fc02 	bl	8000588 <__aeabi_f2d>
 8006d84:	4604      	mov	r4, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <term_show_measurements+0x1b4>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7f9 fbfb 	bl	8000588 <__aeabi_f2d>
 8006d92:	4680      	mov	r8, r0
 8006d94:	4689      	mov	r9, r1
 8006d96:	4b3c      	ldr	r3, [pc, #240]	; (8006e88 <term_show_measurements+0x1b8>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7f9 fbf4 	bl	8000588 <__aeabi_f2d>
 8006da0:	4682      	mov	sl, r0
 8006da2:	468b      	mov	fp, r1
 8006da4:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <term_show_measurements+0x1b8>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7f9 fbed 	bl	8000588 <__aeabi_f2d>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	ec43 2b10 	vmov	d0, r2, r3
 8006db6:	f00b fed5 	bl	8012b64 <acos>
 8006dba:	ec51 0b10 	vmov	r0, r1, d0
 8006dbe:	a32c      	add	r3, pc, #176	; (adr r3, 8006e70 <term_show_measurements+0x1a0>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dd0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006dd4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006dd8:	e9cd 4500 	strd	r4, r5, [sp]
 8006ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006de0:	2102      	movs	r1, #2
 8006de2:	482b      	ldr	r0, [pc, #172]	; (8006e90 <term_show_measurements+0x1c0>)
 8006de4:	f7ff fec0 	bl	8006b68 <term_print>
	term_print("I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", I3+1, i_filtered[I3], va_filtered[I3], w_filtered[I3], pf_filtered[I3], acos(pf_filtered[I3]) * (180.0 / 3.14159265) );
 8006de8:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <term_show_measurements+0x1ac>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7f9 fbcb 	bl	8000588 <__aeabi_f2d>
 8006df2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006df6:	4b22      	ldr	r3, [pc, #136]	; (8006e80 <term_show_measurements+0x1b0>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7f9 fbc4 	bl	8000588 <__aeabi_f2d>
 8006e00:	4604      	mov	r4, r0
 8006e02:	460d      	mov	r5, r1
 8006e04:	4b1f      	ldr	r3, [pc, #124]	; (8006e84 <term_show_measurements+0x1b4>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7f9 fbbd 	bl	8000588 <__aeabi_f2d>
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4689      	mov	r9, r1
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <term_show_measurements+0x1b8>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7f9 fbb6 	bl	8000588 <__aeabi_f2d>
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	468b      	mov	fp, r1
 8006e20:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <term_show_measurements+0x1b8>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 fbaf 	bl	8000588 <__aeabi_f2d>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	ec43 2b10 	vmov	d0, r2, r3
 8006e32:	f00b fe97 	bl	8012b64 <acos>
 8006e36:	ec51 0b10 	vmov	r0, r1, d0
 8006e3a:	a30d      	add	r3, pc, #52	; (adr r3, 8006e70 <term_show_measurements+0x1a0>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fbfa 	bl	8000638 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e4c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006e50:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006e54:	e9cd 4500 	strd	r4, r5, [sp]
 8006e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e5c:	2103      	movs	r1, #3
 8006e5e:	480c      	ldr	r0, [pc, #48]	; (8006e90 <term_show_measurements+0x1c0>)
 8006e60:	f7ff fe82 	bl	8006b68 <term_print>
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6e:	bf00      	nop
 8006e70:	1af05a77 	.word	0x1af05a77
 8006e74:	404ca5dc 	.word	0x404ca5dc
 8006e78:	200003c4 	.word	0x200003c4
 8006e7c:	200003c8 	.word	0x200003c8
 8006e80:	200003d4 	.word	0x200003d4
 8006e84:	200003e0 	.word	0x200003e0
 8006e88:	200003ec 	.word	0x200003ec
 8006e8c:	08013c28 	.word	0x08013c28
 8006e90:	08013c5c 	.word	0x08013c5c

08006e94 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8006e94:	b5b0      	push	{r4, r5, r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	f200 80a5 	bhi.w	8006ff0 <term_show_channel+0x15c>
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4853      	ldr	r0, [pc, #332]	; (8006ff8 <term_show_channel+0x164>)
 8006eac:	f7ff fe5c 	bl	8006b68 <term_print>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8006eb0:	79fa      	ldrb	r2, [r7, #7]
 8006eb2:	4952      	ldr	r1, [pc, #328]	; (8006ffc <term_show_channel+0x168>)
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d004      	beq.n	8006ed0 <term_show_channel+0x3c>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	484d      	ldr	r0, [pc, #308]	; (8007000 <term_show_channel+0x16c>)
 8006ecc:	f7ff fe4c 	bl	8006b68 <term_print>
		//term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
		//return;
	}

	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8006ed0:	79fa      	ldrb	r2, [r7, #7]
 8006ed2:	494a      	ldr	r1, [pc, #296]	; (8006ffc <term_show_channel+0x168>)
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	3302      	adds	r3, #2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	79fa      	ldrb	r2, [r7, #7]
 8006ee6:	4945      	ldr	r1, [pc, #276]	; (8006ffc <term_show_channel+0x168>)
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	1ac3      	subs	r3, r0, r3
 8006ef6:	60fb      	str	r3, [r7, #12]
	term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, pp_reading );
 8006ef8:	79fa      	ldrb	r2, [r7, #7]
 8006efa:	4940      	ldr	r1, [pc, #256]	; (8006ffc <term_show_channel+0x168>)
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	79fa      	ldrb	r2, [r7, #7]
 8006f0c:	493b      	ldr	r1, [pc, #236]	; (8006ffc <term_show_channel+0x168>)
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	3302      	adds	r3, #2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4601      	mov	r1, r0
 8006f22:	4838      	ldr	r0, [pc, #224]	; (8007004 <term_show_channel+0x170>)
 8006f24:	f7ff fe20 	bl	8006b68 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8006f28:	79fa      	ldrb	r2, [r7, #7]
 8006f2a:	4934      	ldr	r1, [pc, #208]	; (8006ffc <term_show_channel+0x168>)
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3310      	adds	r3, #16
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	b21b      	sxth	r3, r3
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fb fe5f 	bl	8002c00 <calc_adc_raw_to_mv_int>
 8006f42:	4604      	mov	r4, r0
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	b21b      	sxth	r3, r3
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fb fe59 	bl	8002c00 <calc_adc_raw_to_mv_int>
 8006f4e:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2 + sample_buf_meta[bufnum].min) );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	0fda      	lsrs	r2, r3, #31
 8006f54:	4413      	add	r3, r2
 8006f56:	105b      	asrs	r3, r3, #1
 8006f58:	b299      	uxth	r1, r3
 8006f5a:	79fa      	ldrb	r2, [r7, #7]
 8006f5c:	4827      	ldr	r0, [pc, #156]	; (8006ffc <term_show_channel+0x168>)
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4403      	add	r3, r0
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	b29b      	uxth	r3, r3
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8006f6e:	b21b      	sxth	r3, r3
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fb fe45 	bl	8002c00 <calc_adc_raw_to_mv_int>
 8006f76:	4603      	mov	r3, r0
 8006f78:	462a      	mov	r2, r5
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4822      	ldr	r0, [pc, #136]	; (8007008 <term_show_channel+0x174>)
 8006f7e:	f7ff fdf3 	bl	8006b68 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8006f82:	79fa      	ldrb	r2, [r7, #7]
 8006f84:	491d      	ldr	r1, [pc, #116]	; (8006ffc <term_show_channel+0x168>)
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b21b      	sxth	r3, r3
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fb fe33 	bl	8002c00 <calc_adc_raw_to_mv_int>
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	79fa      	ldrb	r2, [r7, #7]
 8006f9e:	4917      	ldr	r1, [pc, #92]	; (8006ffc <term_show_channel+0x168>)
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3302      	adds	r3, #2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b21b      	sxth	r3, r3
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fb fe25 	bl	8002c00 <calc_adc_raw_to_mv_int>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4813      	ldr	r0, [pc, #76]	; (800700c <term_show_channel+0x178>)
 8006fbe:	f7ff fdd3 	bl	8006b68 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8006fc2:	79fa      	ldrb	r2, [r7, #7]
 8006fc4:	490d      	ldr	r1, [pc, #52]	; (8006ffc <term_show_channel+0x168>)
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	79fa      	ldrb	r2, [r7, #7]
 8006fd6:	4809      	ldr	r0, [pc, #36]	; (8006ffc <term_show_channel+0x168>)
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4403      	add	r3, r0
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4809      	ldr	r0, [pc, #36]	; (8007010 <term_show_channel+0x17c>)
 8006fea:	f7ff fdbd 	bl	8006b68 <term_print>
 8006fee:	e000      	b.n	8006ff2 <term_show_channel+0x15e>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006ff0:	bf00      	nop
}
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff8:	08013c88 	.word	0x08013c88
 8006ffc:	2000026c 	.word	0x2000026c
 8007000:	08013ca4 	.word	0x08013ca4
 8007004:	08013cc4 	.word	0x08013cc4
 8007008:	08013cdc 	.word	0x08013cdc
 800700c:	08013d00 	.word	0x08013d00
 8007010:	08013d18 	.word	0x08013d18

08007014 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2b03      	cmp	r3, #3
 8007022:	d821      	bhi.n	8007068 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	4619      	mov	r1, r3
 8007028:	4811      	ldr	r0, [pc, #68]	; (8007070 <term_csv_buffer+0x5c>)
 800702a:	f7ff fd9d 	bl	8006b68 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e011      	b.n	8007058 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	490f      	ldr	r1, [pc, #60]	; (8007074 <term_csv_buffer+0x60>)
 8007038:	f44f 7252 	mov.w	r2, #840	; 0x348
 800703c:	fb03 f202 	mul.w	r2, r3, r2
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007048:	461a      	mov	r2, r3
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	480a      	ldr	r0, [pc, #40]	; (8007078 <term_csv_buffer+0x64>)
 800704e:	f7ff fd8b 	bl	8006b68 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3301      	adds	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800705e:	d3e9      	bcc.n	8007034 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8007060:	4806      	ldr	r0, [pc, #24]	; (800707c <term_csv_buffer+0x68>)
 8007062:	f7ff fd81 	bl	8006b68 <term_print>
 8007066:	e000      	b.n	800706a <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8007068:	bf00      	nop
}
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	08013c04 	.word	0x08013c04
 8007074:	20005a9c 	.word	0x20005a9c
 8007078:	08013d38 	.word	0x08013d38
 800707c:	08013d40 	.word	0x08013d40

08007080 <wifi_handle_esp_rx_data>:
 * @brief  Handle data received from ESP-01
 * @note   The first lot of data received from the ESP after reset is received with a different
 * 	       baudrate (76800) and is therefore unreadable. This function ignores the first RX.
 *         The ESP is init sequence is initiated as soon as the first lot of data is received.
 */
void wifi_handle_esp_rx_data() {
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0

	if (esp_rx_error_count) {
 8007084:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <wifi_handle_esp_rx_data+0x84>)
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00d      	beq.n	80070aa <wifi_handle_esp_rx_data+0x2a>
		term_print("\r\nrx:%d error:%d\r\n", esp_rx_count, esp_rx_error_count);
 800708e:	4b1e      	ldr	r3, [pc, #120]	; (8007108 <wifi_handle_esp_rx_data+0x88>)
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	4619      	mov	r1, r3
 8007096:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <wifi_handle_esp_rx_data+0x84>)
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	481b      	ldr	r0, [pc, #108]	; (800710c <wifi_handle_esp_rx_data+0x8c>)
 80070a0:	f7ff fd62 	bl	8006b68 <term_print>
		esp_rx_error_count = 0;
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <wifi_handle_esp_rx_data+0x84>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	801a      	strh	r2, [r3, #0]
	}
	if (esp_rx_buffer_overflow) {
 80070aa:	4b19      	ldr	r3, [pc, #100]	; (8007110 <wifi_handle_esp_rx_data+0x90>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <wifi_handle_esp_rx_data+0x40>
		term_print("\r\nESP RX buffer overflow\r\n");
 80070b4:	4817      	ldr	r0, [pc, #92]	; (8007114 <wifi_handle_esp_rx_data+0x94>)
 80070b6:	f7ff fd57 	bl	8006b68 <term_print>
		esp_rx_buffer_overflow = false;
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <wifi_handle_esp_rx_data+0x90>)
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
	}
	if (!esp_first_rx) {
 80070c0:	4b15      	ldr	r3, [pc, #84]	; (8007118 <wifi_handle_esp_rx_data+0x98>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f083 0301 	eor.w	r3, r3, #1
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <wifi_handle_esp_rx_data+0x62>
		//term_print("\r\nESP first RX\r\n");
		esp_first_rx = true;
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <wifi_handle_esp_rx_data+0x98>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 80070d4:	2032      	movs	r0, #50	; 0x32
 80070d6:	f002 fce7 	bl	8009aa8 <HAL_Delay>
		at_echo(false);		// turn echo off
 80070da:	2000      	movs	r0, #0
 80070dc:	f000 f87e 	bl	80071dc <at_echo>
	} else {
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
		//term_print("\r\n%s() - <%s>\r\n", __FUNCTION__, esp_rx_buf);
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
	}
}
 80070e0:	e00d      	b.n	80070fe <wifi_handle_esp_rx_data+0x7e>
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <wifi_handle_esp_rx_data+0x88>)
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	4b0c      	ldr	r3, [pc, #48]	; (800711c <wifi_handle_esp_rx_data+0x9c>)
 80070ec:	2100      	movs	r1, #0
 80070ee:	5499      	strb	r1, [r3, r2]
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
 80070f0:	4b05      	ldr	r3, [pc, #20]	; (8007108 <wifi_handle_esp_rx_data+0x88>)
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	4808      	ldr	r0, [pc, #32]	; (800711c <wifi_handle_esp_rx_data+0x9c>)
 80070fa:	f000 fb99 	bl	8007830 <evaluate_esp_response>
}
 80070fe:	bf00      	nop
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20008ac6 	.word	0x20008ac6
 8007108:	20008ac4 	.word	0x20008ac4
 800710c:	08013d58 	.word	0x08013d58
 8007110:	20008ac8 	.word	0x20008ac8
 8007114:	08013d6c 	.word	0x08013d6c
 8007118:	20008ecc 	.word	0x20008ecc
 800711c:	20008644 	.word	0x20008644

08007120 <cmd_sequence>:
 * @brief  ESP-01 init sequence commands
 * @note   Each step decrements the init step number.
 *         Command sent = step--
 *         OK response = step--
 */
void cmd_sequence() {
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
#ifdef WIFI_DEBUG
	term_print( "%s() - step: %d\r\n", __FUNCTION__, esp_cmd_step );
#endif
	switch (esp_cmd_step) {
 8007124:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <cmd_sequence+0xa4>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b06      	cmp	r3, #6
 800712a:	d006      	beq.n	800713a <cmd_sequence+0x1a>
 800712c:	2b06      	cmp	r3, #6
 800712e:	dc47      	bgt.n	80071c0 <cmd_sequence+0xa0>
 8007130:	2b02      	cmp	r3, #2
 8007132:	d02e      	beq.n	8007192 <cmd_sequence+0x72>
 8007134:	2b04      	cmp	r3, #4
 8007136:	d016      	beq.n	8007166 <cmd_sequence+0x46>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
		esp_cmd_step --;
		break;
	default:
	}
}
 8007138:	e042      	b.n	80071c0 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIFSR\r\n");		// get IP address
 800713a:	4923      	ldr	r1, [pc, #140]	; (80071c8 <cmd_sequence+0xa8>)
 800713c:	4823      	ldr	r0, [pc, #140]	; (80071cc <cmd_sequence+0xac>)
 800713e:	f008 fe3b 	bl	800fdb8 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 8007142:	4822      	ldr	r0, [pc, #136]	; (80071cc <cmd_sequence+0xac>)
 8007144:	f7f9 f8b4 	bl	80002b0 <strlen>
 8007148:	4603      	mov	r3, r0
 800714a:	b29a      	uxth	r2, r3
 800714c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007150:	491e      	ldr	r1, [pc, #120]	; (80071cc <cmd_sequence+0xac>)
 8007152:	481f      	ldr	r0, [pc, #124]	; (80071d0 <cmd_sequence+0xb0>)
 8007154:	f007 f8ab 	bl	800e2ae <HAL_UART_Transmit>
		esp_cmd_step --;
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <cmd_sequence+0xa4>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	3b01      	subs	r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <cmd_sequence+0xa4>)
 8007162:	701a      	strb	r2, [r3, #0]
		break;
 8007164:	e02c      	b.n	80071c0 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIPMUX=1\r\n");	// start server
 8007166:	491b      	ldr	r1, [pc, #108]	; (80071d4 <cmd_sequence+0xb4>)
 8007168:	4818      	ldr	r0, [pc, #96]	; (80071cc <cmd_sequence+0xac>)
 800716a:	f008 fe25 	bl	800fdb8 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 800716e:	4817      	ldr	r0, [pc, #92]	; (80071cc <cmd_sequence+0xac>)
 8007170:	f7f9 f89e 	bl	80002b0 <strlen>
 8007174:	4603      	mov	r3, r0
 8007176:	b29a      	uxth	r2, r3
 8007178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800717c:	4913      	ldr	r1, [pc, #76]	; (80071cc <cmd_sequence+0xac>)
 800717e:	4814      	ldr	r0, [pc, #80]	; (80071d0 <cmd_sequence+0xb0>)
 8007180:	f007 f895 	bl	800e2ae <HAL_UART_Transmit>
		esp_cmd_step --;
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <cmd_sequence+0xa4>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <cmd_sequence+0xa4>)
 800718e:	701a      	strb	r2, [r3, #0]
		break;
 8007190:	e016      	b.n	80071c0 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIPSERVER=1,%d\r\n", MODBUS_SERVER_PORT);	// start server
 8007192:	2250      	movs	r2, #80	; 0x50
 8007194:	4910      	ldr	r1, [pc, #64]	; (80071d8 <cmd_sequence+0xb8>)
 8007196:	480d      	ldr	r0, [pc, #52]	; (80071cc <cmd_sequence+0xac>)
 8007198:	f008 fe0e 	bl	800fdb8 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 800719c:	480b      	ldr	r0, [pc, #44]	; (80071cc <cmd_sequence+0xac>)
 800719e:	f7f9 f887 	bl	80002b0 <strlen>
 80071a2:	4603      	mov	r3, r0
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071aa:	4908      	ldr	r1, [pc, #32]	; (80071cc <cmd_sequence+0xac>)
 80071ac:	4808      	ldr	r0, [pc, #32]	; (80071d0 <cmd_sequence+0xb0>)
 80071ae:	f007 f87e 	bl	800e2ae <HAL_UART_Transmit>
		esp_cmd_step --;
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <cmd_sequence+0xa4>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <cmd_sequence+0xa4>)
 80071bc:	701a      	strb	r2, [r3, #0]
		break;
 80071be:	bf00      	nop
}
 80071c0:	bf00      	nop
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20008ed0 	.word	0x20008ed0
 80071c8:	08013d98 	.word	0x08013d98
 80071cc:	20008a44 	.word	0x20008a44
 80071d0:	2000240c 	.word	0x2000240c
 80071d4:	08013da4 	.word	0x08013da4
 80071d8:	08013db4 	.word	0x08013db4

080071dc <at_echo>:

/*
 * @brief  disable echo
 * @para   on_off  true to enable echo, false to disable
 */
void at_echo(bool on_off) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
	if (on_off == true) {
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <at_echo+0x1a>
		sprintf((char*)esp_tx_buf, "ATE1\r\n");	// enable echo
 80071ec:	490b      	ldr	r1, [pc, #44]	; (800721c <at_echo+0x40>)
 80071ee:	480c      	ldr	r0, [pc, #48]	; (8007220 <at_echo+0x44>)
 80071f0:	f008 fde2 	bl	800fdb8 <siprintf>
 80071f4:	e003      	b.n	80071fe <at_echo+0x22>
	} else {
		sprintf((char*)esp_tx_buf, "ATE0\r\n");	// disable echo
 80071f6:	490b      	ldr	r1, [pc, #44]	; (8007224 <at_echo+0x48>)
 80071f8:	4809      	ldr	r0, [pc, #36]	; (8007220 <at_echo+0x44>)
 80071fa:	f008 fddd 	bl	800fdb8 <siprintf>
	}
	HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <at_echo+0x44>)
 8007200:	f7f9 f856 	bl	80002b0 <strlen>
 8007204:	4603      	mov	r3, r0
 8007206:	b29a      	uxth	r2, r3
 8007208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800720c:	4904      	ldr	r1, [pc, #16]	; (8007220 <at_echo+0x44>)
 800720e:	4806      	ldr	r0, [pc, #24]	; (8007228 <at_echo+0x4c>)
 8007210:	f007 f84d 	bl	800e2ae <HAL_UART_Transmit>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08013dc8 	.word	0x08013dc8
 8007220:	20008a44 	.word	0x20008a44
 8007224:	08013dd0 	.word	0x08013dd0
 8007228:	2000240c 	.word	0x2000240c

0800722c <on_link>:

/*
 * @brief  perform functions on TCP Link Up/Down
 * @para   up_down  true = up, false = down
 */
void on_link(bool up_down) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]
	if (up_down == true) {
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <on_link+0x26>
#ifdef WIFI_DEBUG
		term_print("%s() - LINK UP\r\n", __FUNCTION__);
#endif
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800723c:	2201      	movs	r2, #1
 800723e:	2120      	movs	r1, #32
 8007240:	480b      	ldr	r0, [pc, #44]	; (8007270 <on_link+0x44>)
 8007242:	f003 ff19 	bl	800b078 <HAL_GPIO_WritePin>
		esp_cmd_step = 6;	// kick off commands
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <on_link+0x48>)
 8007248:	2206      	movs	r2, #6
 800724a:	701a      	strb	r2, [r3, #0]
		cmd_sequence();
 800724c:	f7ff ff68 	bl	8007120 <cmd_sequence>
		strcpy(ip_addr_str, empty_ip);
#ifdef WIFI_DEBUG
		term_print("%s() - LINK DOWN\r\n", __FUNCTION__);
#endif
	}
}
 8007250:	e00a      	b.n	8007268 <on_link+0x3c>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007252:	2200      	movs	r2, #0
 8007254:	2120      	movs	r1, #32
 8007256:	4806      	ldr	r0, [pc, #24]	; (8007270 <on_link+0x44>)
 8007258:	f003 ff0e 	bl	800b078 <HAL_GPIO_WritePin>
		strcpy(ip_addr_str, empty_ip);
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <on_link+0x4c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4619      	mov	r1, r3
 8007262:	4806      	ldr	r0, [pc, #24]	; (800727c <on_link+0x50>)
 8007264:	f009 f8c3 	bl	80103ee <strcpy>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40020000 	.word	0x40020000
 8007274:	20008ed0 	.word	0x20008ed0
 8007278:	20000040 	.word	0x20000040
 800727c:	20000044 	.word	0x20000044

08007280 <set_connection_status>:

/*
 * @brief  Update connection status
 * @para   new_status  new connection status
 */
void set_connection_status(uint8_t new_status) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	71fb      	strb	r3, [r7, #7]
	bool new_con = false;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
	if (new_status == 2) { new_con = true; }
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d101      	bne.n	8007298 <set_connection_status+0x18>
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]

	if (new_con != esp_con_is_up) {
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <set_connection_status+0x38>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	7bfa      	ldrb	r2, [r7, #15]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d006      	beq.n	80072b0 <set_connection_status+0x30>
		esp_con_is_up = new_con;
 80072a2:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <set_connection_status+0x38>)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	7013      	strb	r3, [r2, #0]
		on_link( new_con );
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff ffbe 	bl	800722c <on_link>
	}
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20008ecf 	.word	0x20008ecf

080072bc <esp_client_connection>:
/*
 * @brief   Client connection messsage
 * @para    token  0,CONNECT or 0,DISCONNECT
 * @retval  -1 on failure
 */
int esp_client_connection(char* token) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	uint8_t client_num;
	if (token[1] != ',') { return -1; }
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3301      	adds	r3, #1
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b2c      	cmp	r3, #44	; 0x2c
 80072cc:	d002      	beq.n	80072d4 <esp_client_connection+0x18>
 80072ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d2:	e034      	b.n	800733e <esp_client_connection+0x82>
	client_num = token[0] - '0';
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	3b30      	subs	r3, #48	; 0x30
 80072da:	73fb      	strb	r3, [r7, #15]
	if (token[2] !=  'C') { return -1; }
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3302      	adds	r3, #2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b43      	cmp	r3, #67	; 0x43
 80072e4:	d002      	beq.n	80072ec <esp_client_connection+0x30>
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ea:	e028      	b.n	800733e <esp_client_connection+0x82>
	if (token[3] ==  'O') {		// CONNECT
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3303      	adds	r3, #3
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b4f      	cmp	r3, #79	; 0x4f
 80072f4:	d10a      	bne.n	800730c <esp_client_connection+0x50>
		client_connection[client_num] = true;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	4a13      	ldr	r2, [pc, #76]	; (8007348 <esp_client_connection+0x8c>)
 80072fa:	2101      	movs	r1, #1
 80072fc:	54d1      	strb	r1, [r2, r3]
		term_print("%s() - Client %d Connected\r\n", __FUNCTION__, client_num);
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	461a      	mov	r2, r3
 8007302:	4912      	ldr	r1, [pc, #72]	; (800734c <esp_client_connection+0x90>)
 8007304:	4812      	ldr	r0, [pc, #72]	; (8007350 <esp_client_connection+0x94>)
 8007306:	f7ff fc2f 	bl	8006b68 <term_print>
 800730a:	e017      	b.n	800733c <esp_client_connection+0x80>
	} else if (token[3] == 'L') {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3303      	adds	r3, #3
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b4c      	cmp	r3, #76	; 0x4c
 8007314:	d10a      	bne.n	800732c <esp_client_connection+0x70>
		client_connection[client_num] = false;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	4a0b      	ldr	r2, [pc, #44]	; (8007348 <esp_client_connection+0x8c>)
 800731a:	2100      	movs	r1, #0
 800731c:	54d1      	strb	r1, [r2, r3]
		term_print("%s() - Client %d Disconnected\r\n", __FUNCTION__, client_num);
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	461a      	mov	r2, r3
 8007322:	490a      	ldr	r1, [pc, #40]	; (800734c <esp_client_connection+0x90>)
 8007324:	480b      	ldr	r0, [pc, #44]	; (8007354 <esp_client_connection+0x98>)
 8007326:	f7ff fc1f 	bl	8006b68 <term_print>
 800732a:	e007      	b.n	800733c <esp_client_connection+0x80>
	} else {
		term_print("%s() - Error:<<%s>>\r\n", __FUNCTION__, token);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4907      	ldr	r1, [pc, #28]	; (800734c <esp_client_connection+0x90>)
 8007330:	4809      	ldr	r0, [pc, #36]	; (8007358 <esp_client_connection+0x9c>)
 8007332:	f7ff fc19 	bl	8006b68 <term_print>
		return -1;
 8007336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800733a:	e000      	b.n	800733e <esp_client_connection+0x82>
	}

	return 0;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20008ed4 	.word	0x20008ed4
 800734c:	08018f68 	.word	0x08018f68
 8007350:	08013dd8 	.word	0x08013dd8
 8007354:	08013df8 	.word	0x08013df8
 8007358:	08013e18 	.word	0x08013e18

0800735c <esp_client_disconnect>:

int esp_client_disconnect(uint8_t connection) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	71fb      	strb	r3, [r7, #7]
	// Disconnect client
	sprintf((char*)esp_tx_buf, "AT+CIPCLOSE=%d\r\n", connection);	// start server
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	461a      	mov	r2, r3
 800736a:	490a      	ldr	r1, [pc, #40]	; (8007394 <esp_client_disconnect+0x38>)
 800736c:	480a      	ldr	r0, [pc, #40]	; (8007398 <esp_client_disconnect+0x3c>)
 800736e:	f008 fd23 	bl	800fdb8 <siprintf>
	HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 8007372:	4809      	ldr	r0, [pc, #36]	; (8007398 <esp_client_disconnect+0x3c>)
 8007374:	f7f8 ff9c 	bl	80002b0 <strlen>
 8007378:	4603      	mov	r3, r0
 800737a:	b29a      	uxth	r2, r3
 800737c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007380:	4905      	ldr	r1, [pc, #20]	; (8007398 <esp_client_disconnect+0x3c>)
 8007382:	4806      	ldr	r0, [pc, #24]	; (800739c <esp_client_disconnect+0x40>)
 8007384:	f006 ff93 	bl	800e2ae <HAL_UART_Transmit>
	return 0;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08013e30 	.word	0x08013e30
 8007398:	20008a44 	.word	0x20008a44
 800739c:	2000240c 	.word	0x2000240c

080073a0 <process_incoming_data>:
 * @param   data        buffer containing received data
 * @param   len         length of data buffer
 * @param   connection  the origin connection
 * @retval  0 on success
 */
int process_incoming_data(uint8_t *data, unsigned len, uint8_t connection) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71fb      	strb	r3, [r7, #7]

	term_print("%s() - %d bytes from connection %d\r\n", __FUNCTION__, len, connection);
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	490a      	ldr	r1, [pc, #40]	; (80073dc <process_incoming_data+0x3c>)
 80073b4:	480a      	ldr	r0, [pc, #40]	; (80073e0 <process_incoming_data+0x40>)
 80073b6:	f7ff fbd7 	bl	8006b68 <term_print>
	term_print_hex(data, len, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff fbf8 	bl	8006bb4 <term_print_hex>
	term_print("\r\n");
 80073c4:	4807      	ldr	r0, [pc, #28]	; (80073e4 <process_incoming_data+0x44>)
 80073c6:	f7ff fbcf 	bl	8006b68 <term_print>

	// Disconnect client
	esp_client_disconnect(connection);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff ffc5 	bl	800735c <esp_client_disconnect>

	return 0;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	08018f80 	.word	0x08018f80
 80073e0:	08013e44 	.word	0x08013e44
 80073e4:	08013e6c 	.word	0x08013e6c

080073e8 <process_esp_response_ipd>:
 * @brief  Process the ESP response containing data from a connected client
 * @param  response  ESP receive buffer
 * @param  len       length of receive buffer
 * @retval 0 on successful
 */
int process_esp_response_ipd(char* response, int len) {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	uint8_t *data_start;
	char* token;
	char* token_ptr;
	int data_len = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
	uint8_t con;

	token = strtok_r(response, ",", &token_ptr);	// +IPD
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	461a      	mov	r2, r3
 80073fc:	4922      	ldr	r1, [pc, #136]	; (8007488 <process_esp_response_ipd+0xa0>)
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f008 ff55 	bl	80102ae <strtok_r>
 8007404:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <process_esp_response_ipd+0x2a>
 800740c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007410:	e036      	b.n	8007480 <process_esp_response_ipd+0x98>
	token = strtok_r(NULL,",", &token_ptr);	// connection number
 8007412:	f107 030c 	add.w	r3, r7, #12
 8007416:	461a      	mov	r2, r3
 8007418:	491b      	ldr	r1, [pc, #108]	; (8007488 <process_esp_response_ipd+0xa0>)
 800741a:	2000      	movs	r0, #0
 800741c:	f008 ff47 	bl	80102ae <strtok_r>
 8007420:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <process_esp_response_ipd+0x46>
 8007428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800742c:	e028      	b.n	8007480 <process_esp_response_ipd+0x98>
	else { con = token[0] - '0'; }
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	75fb      	strb	r3, [r7, #23]
	token = strtok_r(NULL, ":", &token_ptr);	// data length
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	461a      	mov	r2, r3
 800743c:	4913      	ldr	r1, [pc, #76]	; (800748c <process_esp_response_ipd+0xa4>)
 800743e:	2000      	movs	r0, #0
 8007440:	f008 ff35 	bl	80102ae <strtok_r>
 8007444:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <process_esp_response_ipd+0x6a>
 800744c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007450:	e016      	b.n	8007480 <process_esp_response_ipd+0x98>
	data_len = atoi(token);
 8007452:	69b8      	ldr	r0, [r7, #24]
 8007454:	f007 ff56 	bl	800f304 <atoi>
 8007458:	61f8      	str	r0, [r7, #28]
	if ((data_len <= 0) || (data_len >= len)) { return -1; }	// sanity check on data length
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd03      	ble.n	8007468 <process_esp_response_ipd+0x80>
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	db02      	blt.n	800746e <process_esp_response_ipd+0x86>
 8007468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800746c:	e008      	b.n	8007480 <process_esp_response_ipd+0x98>
	//We have valid data
	data_start = (uint8_t*) token_ptr;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	613b      	str	r3, [r7, #16]
	return (process_incoming_data(data_start, data_len, con));
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	7dfa      	ldrb	r2, [r7, #23]
 8007476:	4619      	mov	r1, r3
 8007478:	6938      	ldr	r0, [r7, #16]
 800747a:	f7ff ff91 	bl	80073a0 <process_incoming_data>
 800747e:	4603      	mov	r3, r0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	08013e70 	.word	0x08013e70
 800748c:	08013e74 	.word	0x08013e74

08007490 <process_esp_response_wifi>:
 * @brief   Process ESP responses starting with "WIFI ....."
 * @para    token      the token (word) which comes after "WIFI" in the ESP response
 * @para    token_num  the number if the token in the ESP response (WIFI=1)
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_wifi(char* token, uint8_t token_num) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
#ifdef WIFI_DEBUG
	term_print( "%s() - token%d = <%s>\r\n", __FUNCTION__, token_num, token );
#endif
	uint8_t con_status = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
	int retval = -1;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a4:	60bb      	str	r3, [r7, #8]
	if (strncmp(token, "CONNECTED", 9)==0) {	// "WIFI CONNECTED"
 80074a6:	2209      	movs	r2, #9
 80074a8:	4922      	ldr	r1, [pc, #136]	; (8007534 <process_esp_response_wifi+0xa4>)
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f008 feb2 	bl	8010214 <strncmp>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <process_esp_response_wifi+0x32>
		//term_print( "%s() - CON\r\n", __FUNCTION__);
		retval = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]
		esp_wifi_connected = true;
 80074ba:	4b1f      	ldr	r3, [pc, #124]	; (8007538 <process_esp_response_wifi+0xa8>)
 80074bc:	2201      	movs	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e01f      	b.n	8007502 <process_esp_response_wifi+0x72>
	} else if(strncmp(token, "GOT", 3)==0) {		// "WIFI GOT IP"
 80074c2:	2203      	movs	r2, #3
 80074c4:	491d      	ldr	r1, [pc, #116]	; (800753c <process_esp_response_wifi+0xac>)
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f008 fea4 	bl	8010214 <strncmp>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <process_esp_response_wifi+0x4e>
		//term_print( "%s() - GOT\r\n", __FUNCTION__);
		retval = 1;		// ignore next token "IP"
 80074d2:	2301      	movs	r3, #1
 80074d4:	60bb      	str	r3, [r7, #8]
		esp_wifi_got_ip = true;
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <process_esp_response_wifi+0xb0>)
 80074d8:	2201      	movs	r2, #1
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e011      	b.n	8007502 <process_esp_response_wifi+0x72>
	} else if(strncmp(token, "DISCONNECTED", 12)==0) { // "WIFI DISCONNECTED"
 80074de:	220c      	movs	r2, #12
 80074e0:	4918      	ldr	r1, [pc, #96]	; (8007544 <process_esp_response_wifi+0xb4>)
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f008 fe96 	bl	8010214 <strncmp>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <process_esp_response_wifi+0x72>
		retval = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]
		esp_wifi_connected = false;
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <process_esp_response_wifi+0xa8>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
		esp_wifi_got_ip = false;
 80074f8:	4b11      	ldr	r3, [pc, #68]	; (8007540 <process_esp_response_wifi+0xb0>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
		con_status = 4;
 80074fe:	2304      	movs	r3, #4
 8007500:	73fb      	strb	r3, [r7, #15]
	}
	if (esp_wifi_connected == true) {
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <process_esp_response_wifi+0xa8>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <process_esp_response_wifi+0x8c>
		if (esp_wifi_got_ip == true) {
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <process_esp_response_wifi+0xb0>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <process_esp_response_wifi+0x88>
			con_status = 2;
 8007512:	2302      	movs	r3, #2
 8007514:	73fb      	strb	r3, [r7, #15]
 8007516:	e001      	b.n	800751c <process_esp_response_wifi+0x8c>
		} else {
			con_status = 3;
 8007518:	2303      	movs	r3, #3
 800751a:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (con_status != 0) {
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <process_esp_response_wifi+0x9a>
		set_connection_status(con_status);
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff feab 	bl	8007280 <set_connection_status>
	}
	//term_print( "%s() - CONNECTED=%d GOT IP=%d (retval=%d)\r\n", __FUNCTION__, esp_wifi_connected, esp_wifi_got_ip, retval );
	return retval;
 800752a:	68bb      	ldr	r3, [r7, #8]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	08013e78 	.word	0x08013e78
 8007538:	20008ecd 	.word	0x20008ecd
 800753c:	08013e84 	.word	0x08013e84
 8007540:	20008ece 	.word	0x20008ece
 8007544:	08013e88 	.word	0x08013e88

08007548 <process_esp_response_status>:
 * @brief   Process ESP status response "STATUS:2"
 * @para    token      the token (word) which starts with the word "STATUS"
 * @para    token_num  the number if the token in the ESP response, normally 1 for STATUS
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_status(char* token, uint8_t token_num) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
	int retval = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
	uint8_t con_status = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	72fb      	strb	r3, [r7, #11]
	if (strlen(token) != 8) { return -1; }
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7f8 fea7 	bl	80002b0 <strlen>
 8007562:	4603      	mov	r3, r0
 8007564:	2b08      	cmp	r3, #8
 8007566:	d002      	beq.n	800756e <process_esp_response_status+0x26>
 8007568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800756c:	e036      	b.n	80075dc <process_esp_response_status+0x94>
	if (token[6] != ':') { return -1; }
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3306      	adds	r3, #6
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b3a      	cmp	r3, #58	; 0x3a
 8007576:	d002      	beq.n	800757e <process_esp_response_status+0x36>
 8007578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800757c:	e02e      	b.n	80075dc <process_esp_response_status+0x94>
	switch(token[7]) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3307      	adds	r3, #7
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b34      	cmp	r3, #52	; 0x34
 8007586:	d015      	beq.n	80075b4 <process_esp_response_status+0x6c>
 8007588:	2b34      	cmp	r3, #52	; 0x34
 800758a:	dc1c      	bgt.n	80075c6 <process_esp_response_status+0x7e>
 800758c:	2b32      	cmp	r3, #50	; 0x32
 800758e:	d002      	beq.n	8007596 <process_esp_response_status+0x4e>
 8007590:	2b33      	cmp	r3, #51	; 0x33
 8007592:	d009      	beq.n	80075a8 <process_esp_response_status+0x60>
 8007594:	e017      	b.n	80075c6 <process_esp_response_status+0x7e>
	case '2':		// GOT IP
		esp_wifi_got_ip = true;
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <process_esp_response_status+0x9c>)
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = true;
 800759c:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <process_esp_response_status+0xa0>)
 800759e:	2201      	movs	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]
		con_status = 2;
 80075a2:	2302      	movs	r3, #2
 80075a4:	72fb      	strb	r3, [r7, #11]
		break;
 80075a6:	e011      	b.n	80075cc <process_esp_response_status+0x84>
	case '3':		// CONNECTED
		esp_wifi_connected = true;
 80075a8:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <process_esp_response_status+0xa0>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
		con_status = 3;
 80075ae:	2303      	movs	r3, #3
 80075b0:	72fb      	strb	r3, [r7, #11]
		break;
 80075b2:	e00b      	b.n	80075cc <process_esp_response_status+0x84>
	case '4':		// DISCONNECTED
		esp_wifi_got_ip = false;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <process_esp_response_status+0x9c>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = false;
 80075ba:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <process_esp_response_status+0xa0>)
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
		con_status = 4;
 80075c0:	2304      	movs	r3, #4
 80075c2:	72fb      	strb	r3, [r7, #11]
		break;
 80075c4:	e002      	b.n	80075cc <process_esp_response_status+0x84>
	default:		// unknown status
		retval = -1;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ca:	60fb      	str	r3, [r7, #12]
	}
	// advise connection status
	if (retval == 0) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <process_esp_response_status+0x92>
		set_connection_status(con_status);
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fe53 	bl	8007280 <set_connection_status>
	}
	return retval;
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20008ece 	.word	0x20008ece
 80075e8:	20008ecd 	.word	0x20008ecd

080075ec <process_esp_repsonse_plus>:
/*
 * @brief   Process line starting with '+'
 * @para    line     the response line
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_repsonse_plus(char* line) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f8:	617b      	str	r3, [r7, #20]
	int len;
#ifdef WIFI_DEBUG
	term_print( "%s() - <%s>\r\n", __FUNCTION__, line);
#endif

	token = strtok_r(line, ",", &token_ptr);
 80075fa:	f107 0308 	add.w	r3, r7, #8
 80075fe:	461a      	mov	r2, r3
 8007600:	4927      	ldr	r1, [pc, #156]	; (80076a0 <process_esp_repsonse_plus+0xb4>)
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f008 fe53 	bl	80102ae <strtok_r>
 8007608:	6138      	str	r0, [r7, #16]
	if (strncmp(token, "+CIFSR", 6)==0) {
 800760a:	2206      	movs	r2, #6
 800760c:	4925      	ldr	r1, [pc, #148]	; (80076a4 <process_esp_repsonse_plus+0xb8>)
 800760e:	6938      	ldr	r0, [r7, #16]
 8007610:	f008 fe00 	bl	8010214 <strncmp>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d13c      	bne.n	8007694 <process_esp_repsonse_plus+0xa8>
		if (line[10] == 'I') { 			// +CIFSR:STAIP,"192.168.0.xxx"
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	330a      	adds	r3, #10
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b49      	cmp	r3, #73	; 0x49
 8007622:	d119      	bne.n	8007658 <process_esp_repsonse_plus+0x6c>
			len = strlen(token_ptr);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4618      	mov	r0, r3
 8007628:	f7f8 fe42 	bl	80002b0 <strlen>
 800762c:	4603      	mov	r3, r0
 800762e:	60fb      	str	r3, [r7, #12]
			token_ptr[len-1] = 0;	// remove " at end of string
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b01      	subs	r3, #1
 8007636:	4413      	add	r3, r2
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
			token_ptr[0] = 0;		// remove " at start of string
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
			token_ptr++;			// advance ptr to start of IP string
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	3301      	adds	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
			strcpy(ip_addr_str, token_ptr);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4619      	mov	r1, r3
 800764c:	4816      	ldr	r0, [pc, #88]	; (80076a8 <process_esp_repsonse_plus+0xbc>)
 800764e:	f008 fece 	bl	80103ee <strcpy>
#ifdef WIFI_DEBUG
			term_print( "%s() - IP=<%s>\r\n", __FUNCTION__, ip_addr_str);
#endif
			retval = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e01d      	b.n	8007694 <process_esp_repsonse_plus+0xa8>
		} else if (line[10] == 'M') {	// +CIFSR:STAMAC,"bc:dd:c2:a1:25:79"
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	330a      	adds	r3, #10
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b4d      	cmp	r3, #77	; 0x4d
 8007660:	d118      	bne.n	8007694 <process_esp_repsonse_plus+0xa8>
			len = strlen(token_ptr);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4618      	mov	r0, r3
 8007666:	f7f8 fe23 	bl	80002b0 <strlen>
 800766a:	4603      	mov	r3, r0
 800766c:	60fb      	str	r3, [r7, #12]
			token_ptr[len-1] = 0;	// remove " at end of string
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3b01      	subs	r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
			token_ptr[0] = 0;		// remove " at start of string
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
			token_ptr++;			// advance ptr to start of MAC string
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3301      	adds	r3, #1
 8007684:	60bb      	str	r3, [r7, #8]
			strcpy(mac_addr_str, token_ptr);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	4619      	mov	r1, r3
 800768a:	4808      	ldr	r0, [pc, #32]	; (80076ac <process_esp_repsonse_plus+0xc0>)
 800768c:	f008 feaf 	bl	80103ee <strcpy>
#ifdef WIFI_DEBUG
			term_print( "%s() - MAC=<%s>\r\n", __FUNCTION__, mac_addr_str);
#endif
			retval = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
		}
	}
	return retval;
 8007694:	697b      	ldr	r3, [r7, #20]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	08013e70 	.word	0x08013e70
 80076a4:	08013e98 	.word	0x08013e98
 80076a8:	20000044 	.word	0x20000044
 80076ac:	20000054 	.word	0x20000054

080076b0 <process_esp_response_line>:
 * @brief   Process ESP response line"
 * @para    line     the response line
 * @para    line_num the line number
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_response_line(char* line, uint8_t line_num) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
	int retval = -1;
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076c0:	61fb      	str	r3, [r7, #28]
	char* token;
	char* token_ptr;
	uint8_t token_count = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
	const char s[1] = {' '};	// token separator
 80076c6:	2320      	movs	r3, #32
 80076c8:	723b      	strb	r3, [r7, #8]
	int ignore_tokens = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]

#ifdef WIFI_DEBUG
	term_print( "%s() - %d:<%s>\r\n", __FUNCTION__, line_num, line);
#endif
	if (line[0] == '+') {	// IP related info
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b2b      	cmp	r3, #43	; 0x2b
 80076d4:	d104      	bne.n	80076e0 <process_esp_response_line+0x30>
		return process_esp_repsonse_plus(line);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff ff88 	bl	80075ec <process_esp_repsonse_plus>
 80076dc:	4603      	mov	r3, r0
 80076de:	e094      	b.n	800780a <process_esp_response_line+0x15a>
	}

	// evaluate all tokens
	token = strtok_r(line, s, &token_ptr);
 80076e0:	f107 020c 	add.w	r2, r7, #12
 80076e4:	f107 0308 	add.w	r3, r7, #8
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f008 fddf 	bl	80102ae <strtok_r>
 80076f0:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 80076f2:	e085      	b.n	8007800 <process_esp_response_line+0x150>
		token_count++;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	3301      	adds	r3, #1
 80076f8:	75fb      	strb	r3, [r7, #23]
		//term_print( "%s() - token %d = <%s>\r\n", __FUNCTION__, token_count, token);
		if (ignore_tokens > 0) {
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd03      	ble.n	8007708 <process_esp_response_line+0x58>
			ignore_tokens--;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	3b01      	subs	r3, #1
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	e072      	b.n	80077ee <process_esp_response_line+0x13e>
		} else {
			if (strncmp(token,"WIFI",4)==0) {
 8007708:	2204      	movs	r2, #4
 800770a:	4942      	ldr	r1, [pc, #264]	; (8007814 <process_esp_response_line+0x164>)
 800770c:	69b8      	ldr	r0, [r7, #24]
 800770e:	f008 fd81 	bl	8010214 <strncmp>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11a      	bne.n	800774e <process_esp_response_line+0x9e>
				//term_print( "%s() - found WIFI\r\n", __FUNCTION__);
				token = strtok_r(NULL, s, &token_ptr);
 8007718:	f107 020c 	add.w	r2, r7, #12
 800771c:	f107 0308 	add.w	r3, r7, #8
 8007720:	4619      	mov	r1, r3
 8007722:	2000      	movs	r0, #0
 8007724:	f008 fdc3 	bl	80102ae <strtok_r>
 8007728:	61b8      	str	r0, [r7, #24]
				if (token != NULL) {
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d05e      	beq.n	80077ee <process_esp_response_line+0x13e>
					token_count++;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	3301      	adds	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
					ignore_tokens = process_esp_response_wifi(token, token_count);
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	4619      	mov	r1, r3
 800773a:	69b8      	ldr	r0, [r7, #24]
 800773c:	f7ff fea8 	bl	8007490 <process_esp_response_wifi>
 8007740:	6138      	str	r0, [r7, #16]
					if (ignore_tokens >= 0) { retval = 0; }
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	db52      	blt.n	80077ee <process_esp_response_line+0x13e>
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e04f      	b.n	80077ee <process_esp_response_line+0x13e>
				}
			} else if (strncmp(token,"STATUS",6)==0){
 800774e:	2206      	movs	r2, #6
 8007750:	4931      	ldr	r1, [pc, #196]	; (8007818 <process_esp_response_line+0x168>)
 8007752:	69b8      	ldr	r0, [r7, #24]
 8007754:	f008 fd5e 	bl	8010214 <strncmp>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <process_esp_response_line+0xc6>
				ignore_tokens = process_esp_response_status(token, token_count);
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	4619      	mov	r1, r3
 8007762:	69b8      	ldr	r0, [r7, #24]
 8007764:	f7ff fef0 	bl	8007548 <process_esp_response_status>
 8007768:	6138      	str	r0, [r7, #16]
				if (ignore_tokens >= 0) { retval = 1; }		// OK to follow
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	db3e      	blt.n	80077ee <process_esp_response_line+0x13e>
 8007770:	2301      	movs	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e03b      	b.n	80077ee <process_esp_response_line+0x13e>
			} else if (strncmp(token,"OK",2)==0) {
 8007776:	2202      	movs	r2, #2
 8007778:	4928      	ldr	r1, [pc, #160]	; (800781c <process_esp_response_line+0x16c>)
 800777a:	69b8      	ldr	r0, [r7, #24]
 800777c:	f008 fd4a 	bl	8010214 <strncmp>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d115      	bne.n	80077b2 <process_esp_response_line+0x102>
				//term_print( "%s() - found OK\r\n", __FUNCTION__);
				if (esp_cmd_step) {
 8007786:	4b26      	ldr	r3, [pc, #152]	; (8007820 <process_esp_response_line+0x170>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <process_esp_response_line+0xf6>
					if (--esp_cmd_step) {
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <process_esp_response_line+0x170>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	3b01      	subs	r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	4b22      	ldr	r3, [pc, #136]	; (8007820 <process_esp_response_line+0x170>)
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	4b21      	ldr	r3, [pc, #132]	; (8007820 <process_esp_response_line+0x170>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <process_esp_response_line+0xf6>
						cmd_sequence();
 80077a2:	f7ff fcbd 	bl	8007120 <cmd_sequence>
					}
				}
				if (token_count == 1) {
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d120      	bne.n	80077ee <process_esp_response_line+0x13e>
					retval = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	e01d      	b.n	80077ee <process_esp_response_line+0x13e>
				}
			} else if (strncmp(token,"ATE0",4)==0) {		// echo of ATE0 command
 80077b2:	2204      	movs	r2, #4
 80077b4:	491b      	ldr	r1, [pc, #108]	; (8007824 <process_esp_response_line+0x174>)
 80077b6:	69b8      	ldr	r0, [r7, #24]
 80077b8:	f008 fd2c 	bl	8010214 <strncmp>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <process_esp_response_line+0x118>
				retval = 0;		// init_squence() will be triggered by OK
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	e012      	b.n	80077ee <process_esp_response_line+0x13e>
				//if (--esp_init_step) {
				//	init_sequence();
				//}
			} else if ((token[0]>='0') && (token[0]<='9')) {	// 0,CONNECT
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b2f      	cmp	r3, #47	; 0x2f
 80077ce:	d908      	bls.n	80077e2 <process_esp_response_line+0x132>
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b39      	cmp	r3, #57	; 0x39
 80077d6:	d804      	bhi.n	80077e2 <process_esp_response_line+0x132>
				retval = esp_client_connection(token);
 80077d8:	69b8      	ldr	r0, [r7, #24]
 80077da:	f7ff fd6f 	bl	80072bc <esp_client_connection>
 80077de:	61f8      	str	r0, [r7, #28]
 80077e0:	e005      	b.n	80077ee <process_esp_response_line+0x13e>
			} else {
				term_print( "%s() - unknown token%d=%s\r\n", __FUNCTION__, token_count, token);
 80077e2:	7dfa      	ldrb	r2, [r7, #23]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	4910      	ldr	r1, [pc, #64]	; (8007828 <process_esp_response_line+0x178>)
 80077e8:	4810      	ldr	r0, [pc, #64]	; (800782c <process_esp_response_line+0x17c>)
 80077ea:	f7ff f9bd 	bl	8006b68 <term_print>
			}
		}
		token = strtok_r(NULL, s, &token_ptr);
 80077ee:	f107 020c 	add.w	r2, r7, #12
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	4619      	mov	r1, r3
 80077f8:	2000      	movs	r0, #0
 80077fa:	f008 fd58 	bl	80102ae <strtok_r>
 80077fe:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b00      	cmp	r3, #0
 8007804:	f47f af76 	bne.w	80076f4 <process_esp_response_line+0x44>
	}
	//term_print( "%s() - retval=%d\r\n", __FUNCTION__, retval);
	return retval;
 8007808:	69fb      	ldr	r3, [r7, #28]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	08013ea0 	.word	0x08013ea0
 8007818:	08013ea8 	.word	0x08013ea8
 800781c:	08013eb0 	.word	0x08013eb0
 8007820:	20008ed0 	.word	0x20008ed0
 8007824:	08013eb4 	.word	0x08013eb4
 8007828:	08018f98 	.word	0x08018f98
 800782c:	08013ebc 	.word	0x08013ebc

08007830 <evaluate_esp_response>:

void evaluate_esp_response(char* response, int len) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	char *line;
	char *resp;
	char *token_ptr;
	uint8_t line_count = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	76fb      	strb	r3, [r7, #27]
	const char s[2] = {0x0D, 0x0A};		// line separator
 800783e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8007842:	813b      	strh	r3, [r7, #8]
	int ignore_lines = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]

	// copy response to our own buffer
	resp = malloc(len+1);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	3301      	adds	r3, #1
 800784c:	4618      	mov	r0, r3
 800784e:	f008 f833 	bl	800f8b8 <malloc>
 8007852:	4603      	mov	r3, r0
 8007854:	613b      	str	r3, [r7, #16]
	strncpy(resp, response, len);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	6938      	ldr	r0, [r7, #16]
 800785e:	f008 fceb 	bl	8010238 <strncpy>
	resp[len] = 0;		// EOS
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4413      	add	r3, r2
 8007868:	2200      	movs	r2, #0
 800786a:	701a      	strb	r2, [r3, #0]
	term_print("%s() - %d bytes: %s\r\n", __FUNCTION__, strlen(resp), resp);
	term_print_hex((uint8_t*)resp, len, 0);
	term_print("\r\n");
#endif
	// did we receive data from a connected client? (CR LF +IPD,0,5:xxxxx)
	if ((resp[2]=='+')&&(resp[3]=='I')&&(resp[4]=='P')) {
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3302      	adds	r3, #2
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b2b      	cmp	r3, #43	; 0x2b
 8007874:	d10e      	bne.n	8007894 <evaluate_esp_response+0x64>
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3303      	adds	r3, #3
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b49      	cmp	r3, #73	; 0x49
 800787e:	d109      	bne.n	8007894 <evaluate_esp_response+0x64>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3304      	adds	r3, #4
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b50      	cmp	r3, #80	; 0x50
 8007888:	d104      	bne.n	8007894 <evaluate_esp_response+0x64>
		process_esp_response_ipd(resp, len);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6938      	ldr	r0, [r7, #16]
 800788e:	f7ff fdab 	bl	80073e8 <process_esp_response_ipd>
 8007892:	e035      	b.n	8007900 <evaluate_esp_response+0xd0>
		return;
	}

	// get first line from ESP response buffer
	line = strtok_r(resp, s, &token_ptr);
 8007894:	f107 020c 	add.w	r2, r7, #12
 8007898:	f107 0308 	add.w	r3, r7, #8
 800789c:	4619      	mov	r1, r3
 800789e:	6938      	ldr	r0, [r7, #16]
 80078a0:	f008 fd05 	bl	80102ae <strtok_r>
 80078a4:	61f8      	str	r0, [r7, #28]

	// iterate through lines
	while( line != NULL ) {
 80078a6:	e025      	b.n	80078f4 <evaluate_esp_response+0xc4>
		line_count++;
 80078a8:	7efb      	ldrb	r3, [r7, #27]
 80078aa:	3301      	adds	r3, #1
 80078ac:	76fb      	strb	r3, [r7, #27]
		//term_print( "%s() - %d:<%s>\r\n", __FUNCTION__, line_count, line);
		if (ignore_lines > 0) {
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dd03      	ble.n	80078bc <evaluate_esp_response+0x8c>
			ignore_lines--;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e012      	b.n	80078e2 <evaluate_esp_response+0xb2>
		} else {
			strcpy((char*)line_buf, line);
 80078bc:	69f9      	ldr	r1, [r7, #28]
 80078be:	4812      	ldr	r0, [pc, #72]	; (8007908 <evaluate_esp_response+0xd8>)
 80078c0:	f008 fd95 	bl	80103ee <strcpy>
			ignore_lines = process_esp_response_line(line_buf, line_count);
 80078c4:	7efb      	ldrb	r3, [r7, #27]
 80078c6:	4619      	mov	r1, r3
 80078c8:	480f      	ldr	r0, [pc, #60]	; (8007908 <evaluate_esp_response+0xd8>)
 80078ca:	f7ff fef1 	bl	80076b0 <process_esp_response_line>
 80078ce:	6178      	str	r0, [r7, #20]
			if (ignore_lines < 0) {
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da05      	bge.n	80078e2 <evaluate_esp_response+0xb2>
				term_print( "%s() - Error[%d] <<%s>>\r\n", __FUNCTION__, line_count, line_buf);
 80078d6:	7efa      	ldrb	r2, [r7, #27]
 80078d8:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <evaluate_esp_response+0xd8>)
 80078da:	490c      	ldr	r1, [pc, #48]	; (800790c <evaluate_esp_response+0xdc>)
 80078dc:	480c      	ldr	r0, [pc, #48]	; (8007910 <evaluate_esp_response+0xe0>)
 80078de:	f7ff f943 	bl	8006b68 <term_print>
			} else {
				//term_print( "%s() - Line%d ignore_lines=%d\r\n", __FUNCTION__, line_count, ignore_lines);
			}
		}
		line = strtok_r(NULL, s, &token_ptr);	// get next line
 80078e2:	f107 020c 	add.w	r2, r7, #12
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	4619      	mov	r1, r3
 80078ec:	2000      	movs	r0, #0
 80078ee:	f008 fcde 	bl	80102ae <strtok_r>
 80078f2:	61f8      	str	r0, [r7, #28]
	while( line != NULL ) {
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1d6      	bne.n	80078a8 <evaluate_esp_response+0x78>
	}
	//term_print( "%s() - %d lines found\r\n", __FUNCTION__, line_count);
	free(resp);
 80078fa:	6938      	ldr	r0, [r7, #16]
 80078fc:	f007 ffe4 	bl	800f8c8 <free>
}
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20008acc 	.word	0x20008acc
 800790c:	08018fb4 	.word	0x08018fb4
 8007910:	08013ed8 	.word	0x08013ed8

08007914 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8007918:	2180      	movs	r1, #128	; 0x80
 800791a:	480f      	ldr	r0, [pc, #60]	; (8007958 <Displ_Select+0x44>)
 800791c:	f003 fb94 	bl	800b048 <HAL_GPIO_ReadPin>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d015      	beq.n	8007952 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8007926:	2201      	movs	r2, #1
 8007928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800792c:	480b      	ldr	r0, [pc, #44]	; (800795c <Displ_Select+0x48>)
 800792e:	f003 fba3 	bl	800b078 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <Displ_Select+0x4c>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	490a      	ldr	r1, [pc, #40]	; (8007960 <Displ_Select+0x4c>)
 8007938:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 800793c:	4013      	ands	r3, r2
 800793e:	600b      	str	r3, [r1, #0]
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <Displ_Select+0x4c>)
 8007942:	4a07      	ldr	r2, [pc, #28]	; (8007960 <Displ_Select+0x4c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8007948:	2200      	movs	r2, #0
 800794a:	2180      	movs	r1, #128	; 0x80
 800794c:	4802      	ldr	r0, [pc, #8]	; (8007958 <Displ_Select+0x44>)
 800794e:	f003 fb93 	bl	800b078 <HAL_GPIO_WritePin>
		}
	}
}
 8007952:	bf00      	nop
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	40020800 	.word	0x40020800
 800795c:	40020000 	.word	0x40020000
 8007960:	40003800 	.word	0x40003800

08007964 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6039      	str	r1, [r7, #0]
 800796c:	4611      	mov	r1, r2
 800796e:	461a      	mov	r2, r3
 8007970:	4603      	mov	r3, r0
 8007972:	71fb      	strb	r3, [r7, #7]
 8007974:	460b      	mov	r3, r1
 8007976:	80bb      	strh	r3, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 800797c:	bf00      	nop
 800797e:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <Displ_Transmit+0xa4>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0fa      	beq.n	800797e <Displ_Transmit+0x1a>

	Displ_Select();
 8007988:	f7ff ffc4 	bl	8007914 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	461a      	mov	r2, r3
 8007990:	2180      	movs	r1, #128	; 0x80
 8007992:	481e      	ldr	r0, [pc, #120]	; (8007a0c <Displ_Transmit+0xa8>)
 8007994:	f003 fb70 	bl	800b078 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8007998:	79bb      	ldrb	r3, [r7, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d016      	beq.n	80079cc <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 800799e:	88bb      	ldrh	r3, [r7, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e00b      	b.n	80079c4 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	ba5b      	rev16	r3, r3
 80079b6:	60bb      	str	r3, [r7, #8]
  return result;
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	3304      	adds	r3, #4
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d3ef      	bcc.n	80079ac <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 80079cc:	88bb      	ldrh	r3, [r7, #4]
 80079ce:	2b13      	cmp	r3, #19
 80079d0:	d80d      	bhi.n	80079ee <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 80079d2:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <Displ_Transmit+0xa4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80079d8:	88ba      	ldrh	r2, [r7, #4]
 80079da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	480b      	ldr	r0, [pc, #44]	; (8007a10 <Displ_Transmit+0xac>)
 80079e2:	f005 fb44 	bl	800d06e <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <Displ_Transmit+0xa4>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 80079ec:	e008      	b.n	8007a00 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <Displ_Transmit+0xa4>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80079f4:	88bb      	ldrh	r3, [r7, #4]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	4805      	ldr	r0, [pc, #20]	; (8007a10 <Displ_Transmit+0xac>)
 80079fc:	f005 fc74 	bl	800d2e8 <HAL_SPI_Transmit_DMA>
	}
 8007a00:	bf00      	nop
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20000066 	.word	0x20000066
 8007a0c:	40020000 	.word	0x40020000
 8007a10:	20002280 	.word	0x20002280

08007a14 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8007a1e:	1df9      	adds	r1, r7, #7
 8007a20:	2300      	movs	r3, #0
 8007a22:	2201      	movs	r2, #1
 8007a24:	2000      	movs	r0, #0
 8007a26:	f7ff ff9d 	bl	8007964 <Displ_Transmit>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	2001      	movs	r0, #1
 8007a50:	f7ff ff88 	bl	8007964 <Displ_Transmit>
 8007a54:	e000      	b.n	8007a58 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8007a56:	bf00      	nop
}
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	Displ_Select();
 8007a64:	f7ff ff56 	bl	8007914 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2140      	movs	r1, #64	; 0x40
 8007a6c:	4819      	ldr	r0, [pc, #100]	; (8007ad4 <ILI9XXX_Init+0x74>)
 8007a6e:	f003 fb03 	bl	800b078 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007a72:	2001      	movs	r0, #1
 8007a74:	f002 f818 	bl	8009aa8 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8007a78:	2201      	movs	r2, #1
 8007a7a:	2140      	movs	r1, #64	; 0x40
 8007a7c:	4815      	ldr	r0, [pc, #84]	; (8007ad4 <ILI9XXX_Init+0x74>)
 8007a7e:	f003 fafb 	bl	800b078 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8007a82:	20a5      	movs	r0, #165	; 0xa5
 8007a84:	f002 f810 	bl	8009aa8 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8007a88:	203a      	movs	r0, #58	; 0x3a
 8007a8a:	f7ff ffc3 	bl	8007a14 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2101      	movs	r1, #1
 8007a92:	4811      	ldr	r0, [pc, #68]	; (8007ad8 <ILI9XXX_Init+0x78>)
 8007a94:	f7ff ffcd 	bl	8007a32 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8007a98:	20b0      	movs	r0, #176	; 0xb0
 8007a9a:	f7ff ffbb 	bl	8007a14 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	480e      	ldr	r0, [pc, #56]	; (8007adc <ILI9XXX_Init+0x7c>)
 8007aa4:	f7ff ffc5 	bl	8007a32 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8007aa8:	20b0      	movs	r0, #176	; 0xb0
 8007aaa:	f7ff ffb3 	bl	8007a14 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	480a      	ldr	r0, [pc, #40]	; (8007adc <ILI9XXX_Init+0x7c>)
 8007ab4:	f7ff ffbd 	bl	8007a32 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8007ab8:	2011      	movs	r0, #17
 8007aba:	f7ff ffab 	bl	8007a14 <Displ_WriteCommand>
	HAL_Delay(120);
 8007abe:	2078      	movs	r0, #120	; 0x78
 8007ac0:	f001 fff2 	bl	8009aa8 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8007ac4:	2029      	movs	r0, #41	; 0x29
 8007ac6:	f7ff ffa5 	bl	8007a14 <Displ_WriteCommand>
	HAL_Delay(5);
 8007aca:	2005      	movs	r0, #5
 8007acc:	f001 ffec 	bl	8009aa8 <HAL_Delay>

}
 8007ad0:	bf00      	nop
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40020400 	.word	0x40020400
 8007ad8:	08013ef4 	.word	0x08013ef4
 8007adc:	08013ef8 	.word	0x08013ef8

08007ae0 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	461a      	mov	r2, r3
 8007aee:	4623      	mov	r3, r4
 8007af0:	80fb      	strh	r3, [r7, #6]
 8007af2:	4603      	mov	r3, r0
 8007af4:	80bb      	strh	r3, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	807b      	strh	r3, [r7, #2]
 8007afa:	4613      	mov	r3, r2
 8007afc:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	061a      	lsls	r2, r3, #24
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	88fa      	ldrh	r2, [r7, #6]
 8007b16:	0a12      	lsrs	r2, r2, #8
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <Displ_SetAddressWindow+0x90>)
 8007b1e:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8007b20:	202a      	movs	r0, #42	; 0x2a
 8007b22:	f7ff ff77 	bl	8007a14 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8007b26:	2200      	movs	r2, #0
 8007b28:	2104      	movs	r1, #4
 8007b2a:	4811      	ldr	r0, [pc, #68]	; (8007b70 <Displ_SetAddressWindow+0x90>)
 8007b2c:	f7ff ff81 	bl	8007a32 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8007b30:	883b      	ldrh	r3, [r7, #0]
 8007b32:	061a      	lsls	r2, r3, #24
 8007b34:	883b      	ldrh	r3, [r7, #0]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	88bb      	ldrh	r3, [r7, #4]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	4313      	orrs	r3, r2
 8007b46:	88ba      	ldrh	r2, [r7, #4]
 8007b48:	0a12      	lsrs	r2, r2, #8
 8007b4a:	b292      	uxth	r2, r2
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	4b08      	ldr	r3, [pc, #32]	; (8007b70 <Displ_SetAddressWindow+0x90>)
 8007b50:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8007b52:	202b      	movs	r0, #43	; 0x2b
 8007b54:	f7ff ff5e 	bl	8007a14 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2104      	movs	r1, #4
 8007b5c:	4804      	ldr	r0, [pc, #16]	; (8007b70 <Displ_SetAddressWindow+0x90>)
 8007b5e:	f7ff ff68 	bl	8007a32 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8007b62:	202c      	movs	r0, #44	; 0x2c
 8007b64:	f7ff ff56 	bl	8007a14 <Displ_WriteCommand>
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd90      	pop	{r4, r7, pc}
 8007b70:	20009ee4 	.word	0x20009ee4

08007b74 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	2180      	movs	r1, #128	; 0x80
 8007b82:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <Displ_Init+0x34>)
 8007b84:	f003 fa78 	bl	800b078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b8e:	4807      	ldr	r0, [pc, #28]	; (8007bac <Displ_Init+0x38>)
 8007b90:	f003 fa72 	bl	800b078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8007b94:	f7ff ff64 	bl	8007a60 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f808 	bl	8007bb0 <Displ_Orientation>
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	40020800 	.word	0x40020800
 8007bac:	40020000 	.word	0x40020000

08007bb0 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d837      	bhi.n	8007c30 <Displ_Orientation+0x80>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <Displ_Orientation+0x18>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007bef 	.word	0x08007bef
 8007bd0:	08007c05 	.word	0x08007c05
 8007bd4:	08007c1b 	.word	0x08007c1b
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8007bd8:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <Displ_Orientation+0xa0>)
 8007bda:	2288      	movs	r2, #136	; 0x88
 8007bdc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <Displ_Orientation+0xa4>)
 8007be0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007be4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8007be6:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <Displ_Orientation+0xa8>)
 8007be8:	22f0      	movs	r2, #240	; 0xf0
 8007bea:	801a      	strh	r2, [r3, #0]
			break;
 8007bec:	e020      	b.n	8007c30 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8007bee:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <Displ_Orientation+0xa0>)
 8007bf0:	22e8      	movs	r2, #232	; 0xe8
 8007bf2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8007bf4:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <Displ_Orientation+0xa4>)
 8007bf6:	22f0      	movs	r2, #240	; 0xf0
 8007bf8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8007bfa:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <Displ_Orientation+0xa8>)
 8007bfc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c00:	801a      	strh	r2, [r3, #0]
			break;
 8007c02:	e015      	b.n	8007c30 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8007c04:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <Displ_Orientation+0xa0>)
 8007c06:	2248      	movs	r2, #72	; 0x48
 8007c08:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <Displ_Orientation+0xa4>)
 8007c0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c10:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8007c12:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <Displ_Orientation+0xa8>)
 8007c14:	22f0      	movs	r2, #240	; 0xf0
 8007c16:	801a      	strh	r2, [r3, #0]
			break;
 8007c18:	e00a      	b.n	8007c30 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <Displ_Orientation+0xa0>)
 8007c1c:	2228      	movs	r2, #40	; 0x28
 8007c1e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8007c20:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <Displ_Orientation+0xa4>)
 8007c22:	22f0      	movs	r2, #240	; 0xf0
 8007c24:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <Displ_Orientation+0xa8>)
 8007c28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c2c:	801a      	strh	r2, [r3, #0]
			break;
 8007c2e:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8007c30:	2036      	movs	r0, #54	; 0x36
 8007c32:	f7ff feef 	bl	8007a14 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8007c36:	2200      	movs	r2, #0
 8007c38:	2101      	movs	r1, #1
 8007c3a:	4805      	ldr	r0, [pc, #20]	; (8007c50 <Displ_Orientation+0xa0>)
 8007c3c:	f7ff fef9 	bl	8007a32 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8007c40:	4a06      	ldr	r2, [pc, #24]	; (8007c5c <Displ_Orientation+0xac>)
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	7013      	strb	r3, [r2, #0]
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20009ee8 	.word	0x20009ee8
 8007c54:	20008ee2 	.word	0x20008ee2
 8007c58:	20008ee0 	.word	0x20008ee0
 8007c5c:	20008ede 	.word	0x20008ede

08007c60 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a05      	ldr	r2, [pc, #20]	; (8007c84 <HAL_SPI_ErrorCallback+0x24>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d102      	bne.n	8007c78 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_SPI_ErrorCallback+0x28>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
	}
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40003800 	.word	0x40003800
 8007c88:	20000066 	.word	0x20000066

08007c8c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a05      	ldr	r2, [pc, #20]	; (8007cb0 <HAL_SPI_TxCpltCallback+0x24>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d102      	bne.n	8007ca4 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <HAL_SPI_TxCpltCallback+0x28>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40003800 	.word	0x40003800
 8007cb4:	20000066 	.word	0x20000066

08007cb8 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8007cb8:	b590      	push	{r4, r7, lr}
 8007cba:	b08b      	sub	sp, #44	; 0x2c
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	80fb      	strh	r3, [r7, #6]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	80bb      	strh	r3, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	807b      	strh	r3, [r7, #2]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	4a4f      	ldr	r2, [pc, #316]	; (8007e18 <Displ_FillArea+0x160>)
 8007cda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	f280 8096 	bge.w	8007e10 <Displ_FillArea+0x158>
 8007ce4:	88bb      	ldrh	r3, [r7, #4]
 8007ce6:	4a4d      	ldr	r2, [pc, #308]	; (8007e1c <Displ_FillArea+0x164>)
 8007ce8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	f280 808f 	bge.w	8007e10 <Displ_FillArea+0x158>
 8007cf2:	887b      	ldrh	r3, [r7, #2]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 808b 	beq.w	8007e10 <Displ_FillArea+0x158>
 8007cfa:	883b      	ldrh	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8087 	beq.w	8007e10 <Displ_FillArea+0x158>

	x1=x + w - 1;
 8007d02:	88fa      	ldrh	r2, [r7, #6]
 8007d04:	887b      	ldrh	r3, [r7, #2]
 8007d06:	4413      	add	r3, r2
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8007d0c:	4b42      	ldr	r3, [pc, #264]	; (8007e18 <Displ_FillArea+0x160>)
 8007d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d12:	461a      	mov	r2, r3
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d903      	bls.n	8007d22 <Displ_FillArea+0x6a>
		x1=_width;
 8007d1a:	4b3f      	ldr	r3, [pc, #252]	; (8007e18 <Displ_FillArea+0x160>)
 8007d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d20:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8007d22:	88ba      	ldrh	r2, [r7, #4]
 8007d24:	883b      	ldrh	r3, [r7, #0]
 8007d26:	4413      	add	r3, r2
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8007d2c:	4b3b      	ldr	r3, [pc, #236]	; (8007e1c <Displ_FillArea+0x164>)
 8007d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d32:	461a      	mov	r2, r3
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d903      	bls.n	8007d42 <Displ_FillArea+0x8a>
		y1=_height;
 8007d3a:	4b38      	ldr	r3, [pc, #224]	; (8007e1c <Displ_FillArea+0x164>)
 8007d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d40:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8007d42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8007d58:	88bb      	ldrh	r3, [r7, #4]
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	3301      	adds	r3, #1
 8007d60:	88fa      	ldrh	r2, [r7, #6]
 8007d62:	6a39      	ldr	r1, [r7, #32]
 8007d64:	1a8a      	subs	r2, r1, r2
 8007d66:	3201      	adds	r2, #1
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <Displ_FillArea+0x168>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7a:	d204      	bcs.n	8007d86 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	085b      	lsrs	r3, r3, #1
 8007d80:	3301      	adds	r3, #1
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e002      	b.n	8007d8c <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8007d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d90:	e007      	b.n	8007da2 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	617a      	str	r2, [r7, #20]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	3301      	adds	r3, #1
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
 8007da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d3f3      	bcc.n	8007d92 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	88b9      	ldrh	r1, [r7, #4]
 8007db4:	88f8      	ldrh	r0, [r7, #6]
 8007db6:	f7ff fe93 	bl	8007ae0 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	0a9b      	lsrs	r3, r3, #10
 8007dbe:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc4:	e00a      	b.n	8007ddc <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <Displ_FillArea+0x168>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff fe2e 	bl	8007a32 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	3301      	adds	r3, #1
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d3f0      	bcc.n	8007dc6 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8007de4:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <Displ_FillArea+0x168>)
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	005a      	lsls	r2, r3, #1
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	02db      	lsls	r3, r3, #11
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2200      	movs	r2, #0
 8007df4:	4619      	mov	r1, r3
 8007df6:	f7ff fe1c 	bl	8007a32 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <Displ_FillArea+0x168>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <Displ_FillArea+0x16c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d101      	bne.n	8007e08 <Displ_FillArea+0x150>
 8007e04:	4b08      	ldr	r3, [pc, #32]	; (8007e28 <Displ_FillArea+0x170>)
 8007e06:	e000      	b.n	8007e0a <Displ_FillArea+0x152>
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <Displ_FillArea+0x16c>)
 8007e0a:	4a05      	ldr	r2, [pc, #20]	; (8007e20 <Displ_FillArea+0x168>)
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e000      	b.n	8007e12 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8007e10:	bf00      	nop

}
 8007e12:	372c      	adds	r7, #44	; 0x2c
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd90      	pop	{r4, r7, pc}
 8007e18:	20008ee0 	.word	0x20008ee0
 8007e1c:	20008ee2 	.word	0x20008ee2
 8007e20:	20000068 	.word	0x20000068
 8007e24:	20008ee4 	.word	0x20008ee4
 8007e28:	200096e4 	.word	0x200096e4

08007e2c <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	4603      	mov	r3, r0
 8007e34:	80fb      	strh	r3, [r7, #6]
 8007e36:	460b      	mov	r3, r1
 8007e38:	80bb      	strh	r3, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8007e3e:	88fb      	ldrh	r3, [r7, #6]
 8007e40:	4a0b      	ldr	r2, [pc, #44]	; (8007e70 <Displ_Pixel+0x44>)
 8007e42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007e46:	4293      	cmp	r3, r2
 8007e48:	da0e      	bge.n	8007e68 <Displ_Pixel+0x3c>
 8007e4a:	88bb      	ldrh	r3, [r7, #4]
 8007e4c:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <Displ_Pixel+0x48>)
 8007e4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007e52:	4293      	cmp	r3, r2
 8007e54:	da08      	bge.n	8007e68 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8007e56:	88b9      	ldrh	r1, [r7, #4]
 8007e58:	88f8      	ldrh	r0, [r7, #6]
 8007e5a:	887b      	ldrh	r3, [r7, #2]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	2301      	movs	r3, #1
 8007e60:	2201      	movs	r2, #1
 8007e62:	f7ff ff29 	bl	8007cb8 <Displ_FillArea>
 8007e66:	e000      	b.n	8007e6a <Displ_Pixel+0x3e>
        return;
 8007e68:	bf00      	nop

}
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20008ee0 	.word	0x20008ee0
 8007e74:	20008ee2 	.word	0x20008ee2

08007e78 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	4623      	mov	r3, r4
 8007e88:	80fb      	strh	r3, [r7, #6]
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	80bb      	strh	r3, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	807b      	strh	r3, [r7, #2]
 8007e92:	4613      	mov	r3, r2
 8007e94:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8007e96:	887b      	ldrh	r3, [r7, #2]
 8007e98:	f1c3 0301 	rsb	r3, r3, #1
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8007ea4:	887b      	ldrh	r3, [r7, #2]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	03d2      	lsls	r2, r2, #15
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8007eba:	88f8      	ldrh	r0, [r7, #6]
 8007ebc:	88ba      	ldrh	r2, [r7, #4]
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	883a      	ldrh	r2, [r7, #0]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	f7ff ffb0 	bl	8007e2c <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8007ecc:	88f8      	ldrh	r0, [r7, #6]
 8007ece:	88ba      	ldrh	r2, [r7, #4]
 8007ed0:	887b      	ldrh	r3, [r7, #2]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	883a      	ldrh	r2, [r7, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f7ff ffa7 	bl	8007e2c <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	887b      	ldrh	r3, [r7, #2]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	88b9      	ldrh	r1, [r7, #4]
 8007ee8:	883a      	ldrh	r2, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff ff9e 	bl	8007e2c <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	887b      	ldrh	r3, [r7, #2]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	88b9      	ldrh	r1, [r7, #4]
 8007efa:	883a      	ldrh	r2, [r7, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff95 	bl	8007e2c <Displ_Pixel>

    while (x<y) {
 8007f02:	e081      	b.n	8008008 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8007f04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db0e      	blt.n	8007f2a <Displ_drawCircle+0xb2>
            y--;
 8007f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8007f18:	8a7b      	ldrh	r3, [r7, #18]
 8007f1a:	3302      	adds	r3, #2
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8007f20:	8afa      	ldrh	r2, [r7, #22]
 8007f22:	8a7b      	ldrh	r3, [r7, #18]
 8007f24:	4413      	add	r3, r2
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8007f2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3301      	adds	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8007f36:	8abb      	ldrh	r3, [r7, #20]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8007f3e:	8afa      	ldrh	r2, [r7, #22]
 8007f40:	8abb      	ldrh	r3, [r7, #20]
 8007f42:	4413      	add	r3, r2
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	8a3b      	ldrh	r3, [r7, #16]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	b298      	uxth	r0, r3
 8007f50:	88ba      	ldrh	r2, [r7, #4]
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	4413      	add	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	883a      	ldrh	r2, [r7, #0]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f7ff ff66 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	8a3b      	ldrh	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	b298      	uxth	r0, r3
 8007f68:	88ba      	ldrh	r2, [r7, #4]
 8007f6a:	89fb      	ldrh	r3, [r7, #14]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	883a      	ldrh	r2, [r7, #0]
 8007f72:	4619      	mov	r1, r3
 8007f74:	f7ff ff5a 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	8a3b      	ldrh	r3, [r7, #16]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	b298      	uxth	r0, r3
 8007f80:	88ba      	ldrh	r2, [r7, #4]
 8007f82:	89fb      	ldrh	r3, [r7, #14]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	883a      	ldrh	r2, [r7, #0]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	f7ff ff4e 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	8a3b      	ldrh	r3, [r7, #16]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	b298      	uxth	r0, r3
 8007f98:	88ba      	ldrh	r2, [r7, #4]
 8007f9a:	89fb      	ldrh	r3, [r7, #14]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	883a      	ldrh	r2, [r7, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f7ff ff42 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8007fa8:	88fa      	ldrh	r2, [r7, #6]
 8007faa:	89fb      	ldrh	r3, [r7, #14]
 8007fac:	4413      	add	r3, r2
 8007fae:	b298      	uxth	r0, r3
 8007fb0:	88ba      	ldrh	r2, [r7, #4]
 8007fb2:	8a3b      	ldrh	r3, [r7, #16]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	883a      	ldrh	r2, [r7, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f7ff ff36 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	89fb      	ldrh	r3, [r7, #14]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	b298      	uxth	r0, r3
 8007fc8:	88ba      	ldrh	r2, [r7, #4]
 8007fca:	8a3b      	ldrh	r3, [r7, #16]
 8007fcc:	4413      	add	r3, r2
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	883a      	ldrh	r2, [r7, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f7ff ff2a 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8007fd8:	88fa      	ldrh	r2, [r7, #6]
 8007fda:	89fb      	ldrh	r3, [r7, #14]
 8007fdc:	4413      	add	r3, r2
 8007fde:	b298      	uxth	r0, r3
 8007fe0:	88ba      	ldrh	r2, [r7, #4]
 8007fe2:	8a3b      	ldrh	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	883a      	ldrh	r2, [r7, #0]
 8007fea:	4619      	mov	r1, r3
 8007fec:	f7ff ff1e 	bl	8007e2c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8007ff0:	88fa      	ldrh	r2, [r7, #6]
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	b298      	uxth	r0, r3
 8007ff8:	88ba      	ldrh	r2, [r7, #4]
 8007ffa:	8a3b      	ldrh	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	883a      	ldrh	r2, [r7, #0]
 8008002:	4619      	mov	r1, r3
 8008004:	f7ff ff12 	bl	8007e2c <Displ_Pixel>
    while (x<y) {
 8008008:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800800c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008010:	429a      	cmp	r2, r3
 8008012:	f6ff af77 	blt.w	8007f04 <Displ_drawCircle+0x8c>
    }
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	bd90      	pop	{r4, r7, pc}

08008020 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af02      	add	r7, sp, #8
 8008026:	4603      	mov	r3, r0
 8008028:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <Displ_CLS+0x30>)
 800802c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008030:	b29a      	uxth	r2, r3
 8008032:	4b08      	ldr	r3, [pc, #32]	; (8008054 <Displ_CLS+0x34>)
 8008034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008038:	b299      	uxth	r1, r3
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	460b      	mov	r3, r1
 8008040:	2100      	movs	r1, #0
 8008042:	2000      	movs	r0, #0
 8008044:	f7ff fe38 	bl	8007cb8 <Displ_FillArea>
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20008ee0 	.word	0x20008ee0
 8008054:	20008ee2 	.word	0x20008ee2

08008058 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8008058:	b590      	push	{r4, r7, lr}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	461a      	mov	r2, r3
 8008066:	4623      	mov	r3, r4
 8008068:	80fb      	strh	r3, [r7, #6]
 800806a:	4603      	mov	r3, r0
 800806c:	80bb      	strh	r3, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	807b      	strh	r3, [r7, #2]
 8008072:	4613      	mov	r3, r2
 8008074:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	f1c3 0301 	rsb	r3, r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8008080:	2301      	movs	r3, #1
 8008082:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8008084:	887b      	ldrh	r3, [r7, #2]
 8008086:	461a      	mov	r2, r3
 8008088:	03d2      	lsls	r2, r2, #15
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	b29b      	uxth	r3, r3
 8008090:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8008096:	887b      	ldrh	r3, [r7, #2]
 8008098:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800809a:	e095      	b.n	80081c8 <drawCircleHelper+0x170>
        if (f >= 0) {
 800809c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db0e      	blt.n	80080c2 <drawCircleHelper+0x6a>
            y--;
 80080a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80080b0:	8a7b      	ldrh	r3, [r7, #18]
 80080b2:	3302      	adds	r3, #2
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80080b8:	8afa      	ldrh	r2, [r7, #22]
 80080ba:	8a7b      	ldrh	r3, [r7, #18]
 80080bc:	4413      	add	r3, r2
 80080be:	b29b      	uxth	r3, r3
 80080c0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80080c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3301      	adds	r3, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80080ce:	8abb      	ldrh	r3, [r7, #20]
 80080d0:	3302      	adds	r3, #2
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80080d6:	8afa      	ldrh	r2, [r7, #22]
 80080d8:	8abb      	ldrh	r3, [r7, #20]
 80080da:	4413      	add	r3, r2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80080e0:	787b      	ldrb	r3, [r7, #1]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d017      	beq.n	800811a <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	8a3b      	ldrh	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	b298      	uxth	r0, r3
 80080f2:	88ba      	ldrh	r2, [r7, #4]
 80080f4:	89fb      	ldrh	r3, [r7, #14]
 80080f6:	4413      	add	r3, r2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80080fc:	4619      	mov	r1, r3
 80080fe:	f7ff fe95 	bl	8007e2c <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8008102:	88fa      	ldrh	r2, [r7, #6]
 8008104:	89fb      	ldrh	r3, [r7, #14]
 8008106:	4413      	add	r3, r2
 8008108:	b298      	uxth	r0, r3
 800810a:	88ba      	ldrh	r2, [r7, #4]
 800810c:	8a3b      	ldrh	r3, [r7, #16]
 800810e:	4413      	add	r3, r2
 8008110:	b29b      	uxth	r3, r3
 8008112:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008114:	4619      	mov	r1, r3
 8008116:	f7ff fe89 	bl	8007e2c <Displ_Pixel>
        }
        if (cornername & 0x2) {
 800811a:	787b      	ldrb	r3, [r7, #1]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d017      	beq.n	8008154 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	8a3b      	ldrh	r3, [r7, #16]
 8008128:	4413      	add	r3, r2
 800812a:	b298      	uxth	r0, r3
 800812c:	88ba      	ldrh	r2, [r7, #4]
 800812e:	89fb      	ldrh	r3, [r7, #14]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	b29b      	uxth	r3, r3
 8008134:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008136:	4619      	mov	r1, r3
 8008138:	f7ff fe78 	bl	8007e2c <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	89fb      	ldrh	r3, [r7, #14]
 8008140:	4413      	add	r3, r2
 8008142:	b298      	uxth	r0, r3
 8008144:	88ba      	ldrh	r2, [r7, #4]
 8008146:	8a3b      	ldrh	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	b29b      	uxth	r3, r3
 800814c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800814e:	4619      	mov	r1, r3
 8008150:	f7ff fe6c 	bl	8007e2c <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8008154:	787b      	ldrb	r3, [r7, #1]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d017      	beq.n	800818e <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 800815e:	88fa      	ldrh	r2, [r7, #6]
 8008160:	89fb      	ldrh	r3, [r7, #14]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	b298      	uxth	r0, r3
 8008166:	88ba      	ldrh	r2, [r7, #4]
 8008168:	8a3b      	ldrh	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	b29b      	uxth	r3, r3
 800816e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008170:	4619      	mov	r1, r3
 8008172:	f7ff fe5b 	bl	8007e2c <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	8a3b      	ldrh	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	b298      	uxth	r0, r3
 800817e:	88ba      	ldrh	r2, [r7, #4]
 8008180:	89fb      	ldrh	r3, [r7, #14]
 8008182:	4413      	add	r3, r2
 8008184:	b29b      	uxth	r3, r3
 8008186:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008188:	4619      	mov	r1, r3
 800818a:	f7ff fe4f 	bl	8007e2c <Displ_Pixel>
        }
        if (cornername & 0x1) {
 800818e:	787b      	ldrb	r3, [r7, #1]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d017      	beq.n	80081c8 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8008198:	88fa      	ldrh	r2, [r7, #6]
 800819a:	89fb      	ldrh	r3, [r7, #14]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	b298      	uxth	r0, r3
 80081a0:	88ba      	ldrh	r2, [r7, #4]
 80081a2:	8a3b      	ldrh	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7ff fe3e 	bl	8007e2c <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 80081b0:	88fa      	ldrh	r2, [r7, #6]
 80081b2:	8a3b      	ldrh	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	b298      	uxth	r0, r3
 80081b8:	88ba      	ldrh	r2, [r7, #4]
 80081ba:	89fb      	ldrh	r3, [r7, #14]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	b29b      	uxth	r3, r3
 80081c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081c2:	4619      	mov	r1, r3
 80081c4:	f7ff fe32 	bl	8007e2c <Displ_Pixel>
    while (x<y) {
 80081c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80081cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	f6ff af63 	blt.w	800809c <drawCircleHelper+0x44>
        }
    }
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd90      	pop	{r4, r7, pc}

080081e0 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80081e0:	b590      	push	{r4, r7, lr}
 80081e2:	b089      	sub	sp, #36	; 0x24
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	4623      	mov	r3, r4
 80081f0:	80fb      	strh	r3, [r7, #6]
 80081f2:	4603      	mov	r3, r0
 80081f4:	80bb      	strh	r3, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	807b      	strh	r3, [r7, #2]
 80081fa:	4613      	mov	r3, r2
 80081fc:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80081fe:	887b      	ldrh	r3, [r7, #2]
 8008200:	f1c3 0301 	rsb	r3, r3, #1
 8008204:	b29b      	uxth	r3, r3
 8008206:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8008208:	2301      	movs	r3, #1
 800820a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800820c:	887b      	ldrh	r3, [r7, #2]
 800820e:	461a      	mov	r2, r3
 8008210:	03d2      	lsls	r2, r2, #15
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	b29b      	uxth	r3, r3
 8008218:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 800821e:	887b      	ldrh	r3, [r7, #2]
 8008220:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8008222:	e0a7      	b.n	8008374 <fillCircleHelper+0x194>
    if (f >= 0) {
 8008224:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db0e      	blt.n	800824a <fillCircleHelper+0x6a>
      y--;
 800822c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8008238:	8a7b      	ldrh	r3, [r7, #18]
 800823a:	3302      	adds	r3, #2
 800823c:	b29b      	uxth	r3, r3
 800823e:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8008240:	8afa      	ldrh	r2, [r7, #22]
 8008242:	8a7b      	ldrh	r3, [r7, #18]
 8008244:	4413      	add	r3, r2
 8008246:	b29b      	uxth	r3, r3
 8008248:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800824a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800824e:	b29b      	uxth	r3, r3
 8008250:	3301      	adds	r3, #1
 8008252:	b29b      	uxth	r3, r3
 8008254:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8008256:	8abb      	ldrh	r3, [r7, #20]
 8008258:	3302      	adds	r3, #2
 800825a:	b29b      	uxth	r3, r3
 800825c:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800825e:	8afa      	ldrh	r2, [r7, #22]
 8008260:	8abb      	ldrh	r3, [r7, #20]
 8008262:	4413      	add	r3, r2
 8008264:	b29b      	uxth	r3, r3
 8008266:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8008268:	787b      	ldrb	r3, [r7, #1]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d03d      	beq.n	80082ee <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8008272:	88fa      	ldrh	r2, [r7, #6]
 8008274:	8a3b      	ldrh	r3, [r7, #16]
 8008276:	4413      	add	r3, r2
 8008278:	b29b      	uxth	r3, r3
 800827a:	b218      	sxth	r0, r3
 800827c:	88ba      	ldrh	r2, [r7, #4]
 800827e:	89fb      	ldrh	r3, [r7, #14]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	b29b      	uxth	r3, r3
 8008284:	b219      	sxth	r1, r3
 8008286:	88fa      	ldrh	r2, [r7, #6]
 8008288:	8a3b      	ldrh	r3, [r7, #16]
 800828a:	4413      	add	r3, r2
 800828c:	b29b      	uxth	r3, r3
 800828e:	b21c      	sxth	r4, r3
 8008290:	88ba      	ldrh	r2, [r7, #4]
 8008292:	89fb      	ldrh	r3, [r7, #14]
 8008294:	4413      	add	r3, r2
 8008296:	b29a      	uxth	r2, r3
 8008298:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800829a:	4413      	add	r3, r2
 800829c:	b29b      	uxth	r3, r3
 800829e:	3301      	adds	r3, #1
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	b21a      	sxth	r2, r3
 80082a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	4613      	mov	r3, r2
 80082aa:	4622      	mov	r2, r4
 80082ac:	f000 f8a1 	bl	80083f2 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	4413      	add	r3, r2
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	b218      	sxth	r0, r3
 80082ba:	88ba      	ldrh	r2, [r7, #4]
 80082bc:	8a3b      	ldrh	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	b219      	sxth	r1, r3
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	89fb      	ldrh	r3, [r7, #14]
 80082c8:	4413      	add	r3, r2
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	b21c      	sxth	r4, r3
 80082ce:	88ba      	ldrh	r2, [r7, #4]
 80082d0:	8a3b      	ldrh	r3, [r7, #16]
 80082d2:	4413      	add	r3, r2
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082d8:	4413      	add	r3, r2
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3301      	adds	r3, #1
 80082de:	b29b      	uxth	r3, r3
 80082e0:	b21a      	sxth	r2, r3
 80082e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	4613      	mov	r3, r2
 80082e8:	4622      	mov	r2, r4
 80082ea:	f000 f882 	bl	80083f2 <Displ_Line>
    }
    if (cornername & 0x2) {
 80082ee:	787b      	ldrb	r3, [r7, #1]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d03d      	beq.n	8008374 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	8a3b      	ldrh	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	b29b      	uxth	r3, r3
 8008300:	b218      	sxth	r0, r3
 8008302:	88ba      	ldrh	r2, [r7, #4]
 8008304:	89fb      	ldrh	r3, [r7, #14]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	b29b      	uxth	r3, r3
 800830a:	b219      	sxth	r1, r3
 800830c:	88fa      	ldrh	r2, [r7, #6]
 800830e:	8a3b      	ldrh	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	b29b      	uxth	r3, r3
 8008314:	b21c      	sxth	r4, r3
 8008316:	88ba      	ldrh	r2, [r7, #4]
 8008318:	89fb      	ldrh	r3, [r7, #14]
 800831a:	4413      	add	r3, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008320:	4413      	add	r3, r2
 8008322:	b29b      	uxth	r3, r3
 8008324:	3301      	adds	r3, #1
 8008326:	b29b      	uxth	r3, r3
 8008328:	b21a      	sxth	r2, r3
 800832a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4613      	mov	r3, r2
 8008330:	4622      	mov	r2, r4
 8008332:	f000 f85e 	bl	80083f2 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8008336:	88fa      	ldrh	r2, [r7, #6]
 8008338:	89fb      	ldrh	r3, [r7, #14]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	b29b      	uxth	r3, r3
 800833e:	b218      	sxth	r0, r3
 8008340:	88ba      	ldrh	r2, [r7, #4]
 8008342:	8a3b      	ldrh	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	b29b      	uxth	r3, r3
 8008348:	b219      	sxth	r1, r3
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	b29b      	uxth	r3, r3
 8008352:	b21c      	sxth	r4, r3
 8008354:	88ba      	ldrh	r2, [r7, #4]
 8008356:	8a3b      	ldrh	r3, [r7, #16]
 8008358:	4413      	add	r3, r2
 800835a:	b29a      	uxth	r2, r3
 800835c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800835e:	4413      	add	r3, r2
 8008360:	b29b      	uxth	r3, r3
 8008362:	3301      	adds	r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	b21a      	sxth	r2, r3
 8008368:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	4613      	mov	r3, r2
 800836e:	4622      	mov	r2, r4
 8008370:	f000 f83f 	bl	80083f2 <Displ_Line>
  while (x<y) {
 8008374:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008378:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800837c:	429a      	cmp	r2, r3
 800837e:	f6ff af51 	blt.w	8008224 <fillCircleHelper+0x44>
    }
  }
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	bd90      	pop	{r4, r7, pc}

0800838c <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b085      	sub	sp, #20
 8008390:	af02      	add	r7, sp, #8
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	4611      	mov	r1, r2
 8008398:	461a      	mov	r2, r3
 800839a:	4623      	mov	r3, r4
 800839c:	80fb      	strh	r3, [r7, #6]
 800839e:	4603      	mov	r3, r0
 80083a0:	80bb      	strh	r3, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	807b      	strh	r3, [r7, #2]
 80083a6:	4613      	mov	r3, r2
 80083a8:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 80083aa:	88ba      	ldrh	r2, [r7, #4]
 80083ac:	887b      	ldrh	r3, [r7, #2]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b219      	sxth	r1, r3
 80083b4:	88ba      	ldrh	r2, [r7, #4]
 80083b6:	887b      	ldrh	r3, [r7, #2]
 80083b8:	4413      	add	r3, r2
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	b21c      	sxth	r4, r3
 80083be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80083c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80083c6:	883b      	ldrh	r3, [r7, #0]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	4623      	mov	r3, r4
 80083cc:	f000 f811 	bl	80083f2 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 80083d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80083d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80083d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80083dc:	883b      	ldrh	r3, [r7, #0]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	2300      	movs	r3, #0
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	2303      	movs	r3, #3
 80083e6:	f7ff fefb 	bl	80081e0 <fillCircleHelper>
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd90      	pop	{r4, r7, pc}

080083f2 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80083f2:	b590      	push	{r4, r7, lr}
 80083f4:	b08b      	sub	sp, #44	; 0x2c
 80083f6:	af02      	add	r7, sp, #8
 80083f8:	4604      	mov	r4, r0
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	4623      	mov	r3, r4
 8008402:	80fb      	strh	r3, [r7, #6]
 8008404:	4603      	mov	r3, r0
 8008406:	80bb      	strh	r3, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	807b      	strh	r3, [r7, #2]
 800840c:	4613      	mov	r3, r2
 800840e:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8008410:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008414:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008418:	429a      	cmp	r2, r3
 800841a:	d123      	bne.n	8008464 <Displ_Line+0x72>
    	if (y1>y0){
 800841c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	dd0e      	ble.n	8008446 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8008428:	88f8      	ldrh	r0, [r7, #6]
 800842a:	88b9      	ldrh	r1, [r7, #4]
 800842c:	883a      	ldrh	r2, [r7, #0]
 800842e:	88bb      	ldrh	r3, [r7, #4]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	b29b      	uxth	r3, r3
 8008434:	3301      	adds	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4613      	mov	r3, r2
 800843e:	2201      	movs	r2, #1
 8008440:	f7ff fc3a 	bl	8007cb8 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8008444:	e103      	b.n	800864e <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8008446:	88f8      	ldrh	r0, [r7, #6]
 8008448:	8839      	ldrh	r1, [r7, #0]
 800844a:	88ba      	ldrh	r2, [r7, #4]
 800844c:	883b      	ldrh	r3, [r7, #0]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	b29b      	uxth	r3, r3
 8008452:	3301      	adds	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4613      	mov	r3, r2
 800845c:	2201      	movs	r2, #1
 800845e:	f7ff fc2b 	bl	8007cb8 <Displ_FillArea>
    	return;
 8008462:	e0f4      	b.n	800864e <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8008464:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008468:	f9b7 3000 	ldrsh.w	r3, [r7]
 800846c:	429a      	cmp	r2, r3
 800846e:	d121      	bne.n	80084b4 <Displ_Line+0xc2>
    	if (x1>x0)
 8008470:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008478:	429a      	cmp	r2, r3
 800847a:	dd0d      	ble.n	8008498 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800847c:	88f8      	ldrh	r0, [r7, #6]
 800847e:	88b9      	ldrh	r1, [r7, #4]
 8008480:	887a      	ldrh	r2, [r7, #2]
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	b29b      	uxth	r3, r3
 8008488:	3301      	adds	r3, #1
 800848a:	b29a      	uxth	r2, r3
 800848c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	2301      	movs	r3, #1
 8008492:	f7ff fc11 	bl	8007cb8 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8008496:	e0da      	b.n	800864e <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8008498:	8878      	ldrh	r0, [r7, #2]
 800849a:	8839      	ldrh	r1, [r7, #0]
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	887b      	ldrh	r3, [r7, #2]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	3301      	adds	r3, #1
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	2301      	movs	r3, #1
 80084ae:	f7ff fc03 	bl	8007cb8 <Displ_FillArea>
    	return;
 80084b2:	e0cc      	b.n	800864e <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80084b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80084b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80084bc:	429a      	cmp	r2, r3
 80084be:	dd05      	ble.n	80084cc <Displ_Line+0xda>
 80084c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80084c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80084c8:	1ad2      	subs	r2, r2, r3
 80084ca:	e004      	b.n	80084d6 <Displ_Line+0xe4>
 80084cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80084d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80084da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084de:	4299      	cmp	r1, r3
 80084e0:	dd05      	ble.n	80084ee <Displ_Line+0xfc>
 80084e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80084e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084ea:	1acb      	subs	r3, r1, r3
 80084ec:	e004      	b.n	80084f8 <Displ_Line+0x106>
 80084ee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80084f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084f6:	1acb      	subs	r3, r1, r3
 80084f8:	429a      	cmp	r2, r3
 80084fa:	bfcc      	ite	gt
 80084fc:	2301      	movgt	r3, #1
 80084fe:	2300      	movle	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8008504:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	827b      	strh	r3, [r7, #18]
 8008510:	88bb      	ldrh	r3, [r7, #4]
 8008512:	80fb      	strh	r3, [r7, #6]
 8008514:	8a7b      	ldrh	r3, [r7, #18]
 8008516:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8008518:	887b      	ldrh	r3, [r7, #2]
 800851a:	823b      	strh	r3, [r7, #16]
 800851c:	883b      	ldrh	r3, [r7, #0]
 800851e:	807b      	strh	r3, [r7, #2]
 8008520:	8a3b      	ldrh	r3, [r7, #16]
 8008522:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8008524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800852c:	429a      	cmp	r2, r3
 800852e:	dd0b      	ble.n	8008548 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	81fb      	strh	r3, [r7, #14]
 8008534:	887b      	ldrh	r3, [r7, #2]
 8008536:	80fb      	strh	r3, [r7, #6]
 8008538:	89fb      	ldrh	r3, [r7, #14]
 800853a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800853c:	88bb      	ldrh	r3, [r7, #4]
 800853e:	81bb      	strh	r3, [r7, #12]
 8008540:	883b      	ldrh	r3, [r7, #0]
 8008542:	80bb      	strh	r3, [r7, #4]
 8008544:	89bb      	ldrh	r3, [r7, #12]
 8008546:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8008548:	887a      	ldrh	r2, [r7, #2]
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	b29b      	uxth	r3, r3
 8008550:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8008552:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008556:	105b      	asrs	r3, r3, #1
 8008558:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 800855a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800855e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008562:	429a      	cmp	r2, r3
 8008564:	da07      	bge.n	8008576 <Displ_Line+0x184>
        dy = y1-y0;
 8008566:	883a      	ldrh	r2, [r7, #0]
 8008568:	88bb      	ldrh	r3, [r7, #4]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	b29b      	uxth	r3, r3
 800856e:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8008570:	2301      	movs	r3, #1
 8008572:	837b      	strh	r3, [r7, #26]
 8008574:	e007      	b.n	8008586 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8008576:	88ba      	ldrh	r2, [r7, #4]
 8008578:	883b      	ldrh	r3, [r7, #0]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	b29b      	uxth	r3, r3
 800857e:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8008580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008584:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8008586:	2300      	movs	r3, #0
 8008588:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	83bb      	strh	r3, [r7, #28]
 800858e:	e03a      	b.n	8008606 <Displ_Line+0x214>
    	l++;
 8008590:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008594:	b29b      	uxth	r3, r3
 8008596:	3301      	adds	r3, #1
 8008598:	b29b      	uxth	r3, r3
 800859a:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800859c:	8b3a      	ldrh	r2, [r7, #24]
 800859e:	8afb      	ldrh	r3, [r7, #22]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80085a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da25      	bge.n	80085fa <Displ_Line+0x208>
        	if (steep) {
 80085ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 80085b6:	88b8      	ldrh	r0, [r7, #4]
 80085b8:	88f9      	ldrh	r1, [r7, #6]
 80085ba:	8bfa      	ldrh	r2, [r7, #30]
 80085bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4613      	mov	r3, r2
 80085c2:	2201      	movs	r2, #1
 80085c4:	f7ff fb78 	bl	8007cb8 <Displ_FillArea>
 80085c8:	e007      	b.n	80085da <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 80085ca:	88f8      	ldrh	r0, [r7, #6]
 80085cc:	88b9      	ldrh	r1, [r7, #4]
 80085ce:	8bfa      	ldrh	r2, [r7, #30]
 80085d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2301      	movs	r3, #1
 80085d6:	f7ff fb6f 	bl	8007cb8 <Displ_FillArea>
            }
            y0 += ystep;
 80085da:	88ba      	ldrh	r2, [r7, #4]
 80085dc:	8b7b      	ldrh	r3, [r7, #26]
 80085de:	4413      	add	r3, r2
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	80bb      	strh	r3, [r7, #4]
            l=0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80085e8:	8bbb      	ldrh	r3, [r7, #28]
 80085ea:	3301      	adds	r3, #1
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80085f0:	8b3a      	ldrh	r2, [r7, #24]
 80085f2:	897b      	ldrh	r3, [r7, #10]
 80085f4:	4413      	add	r3, r2
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80085fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3301      	adds	r3, #1
 8008602:	b29b      	uxth	r3, r3
 8008604:	83bb      	strh	r3, [r7, #28]
 8008606:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800860a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800860e:	429a      	cmp	r2, r3
 8008610:	ddbe      	ble.n	8008590 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8008612:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d019      	beq.n	800864e <Displ_Line+0x25c>
    	if (steep) {
 800861a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8008622:	88b8      	ldrh	r0, [r7, #4]
 8008624:	88f9      	ldrh	r1, [r7, #6]
 8008626:	8bfb      	ldrh	r3, [r7, #30]
 8008628:	3b01      	subs	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4613      	mov	r3, r2
 8008632:	2201      	movs	r2, #1
 8008634:	f7ff fb40 	bl	8007cb8 <Displ_FillArea>
 8008638:	e009      	b.n	800864e <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 800863a:	88f8      	ldrh	r0, [r7, #6]
 800863c:	88b9      	ldrh	r1, [r7, #4]
 800863e:	8bfb      	ldrh	r3, [r7, #30]
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	2301      	movs	r3, #1
 800864a:	f7ff fb35 	bl	8007cb8 <Displ_FillArea>
    	}
    }
}
 800864e:	3724      	adds	r7, #36	; 0x24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd90      	pop	{r4, r7, pc}

08008654 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b085      	sub	sp, #20
 8008658:	af02      	add	r7, sp, #8
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	4611      	mov	r1, r2
 8008660:	461a      	mov	r2, r3
 8008662:	4623      	mov	r3, r4
 8008664:	80fb      	strh	r3, [r7, #6]
 8008666:	4603      	mov	r3, r0
 8008668:	80bb      	strh	r3, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	807b      	strh	r3, [r7, #2]
 800866e:	4613      	mov	r3, r2
 8008670:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8008672:	88f8      	ldrh	r0, [r7, #6]
 8008674:	88b9      	ldrh	r1, [r7, #4]
 8008676:	887a      	ldrh	r2, [r7, #2]
 8008678:	8b3c      	ldrh	r4, [r7, #24]
 800867a:	8bbb      	ldrh	r3, [r7, #28]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	4623      	mov	r3, r4
 8008680:	f7ff fb1a 	bl	8007cb8 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8008684:	88f8      	ldrh	r0, [r7, #6]
 8008686:	88ba      	ldrh	r2, [r7, #4]
 8008688:	883b      	ldrh	r3, [r7, #0]
 800868a:	4413      	add	r3, r2
 800868c:	b29a      	uxth	r2, r3
 800868e:	8b3b      	ldrh	r3, [r7, #24]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	b299      	uxth	r1, r3
 8008694:	887a      	ldrh	r2, [r7, #2]
 8008696:	8b3c      	ldrh	r4, [r7, #24]
 8008698:	8bbb      	ldrh	r3, [r7, #28]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	4623      	mov	r3, r4
 800869e:	f7ff fb0b 	bl	8007cb8 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 80086a2:	88f8      	ldrh	r0, [r7, #6]
 80086a4:	88b9      	ldrh	r1, [r7, #4]
 80086a6:	8b3a      	ldrh	r2, [r7, #24]
 80086a8:	883c      	ldrh	r4, [r7, #0]
 80086aa:	8bbb      	ldrh	r3, [r7, #28]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4623      	mov	r3, r4
 80086b0:	f7ff fb02 	bl	8007cb8 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	887b      	ldrh	r3, [r7, #2]
 80086b8:	4413      	add	r3, r2
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	8b3b      	ldrh	r3, [r7, #24]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	b298      	uxth	r0, r3
 80086c2:	88b9      	ldrh	r1, [r7, #4]
 80086c4:	8b3a      	ldrh	r2, [r7, #24]
 80086c6:	883c      	ldrh	r4, [r7, #0]
 80086c8:	8bbb      	ldrh	r3, [r7, #28]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4623      	mov	r3, r4
 80086ce:	f7ff faf3 	bl	8007cb8 <Displ_FillArea>
}
 80086d2:	bf00      	nop
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd90      	pop	{r4, r7, pc}

080086da <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80086da:	b590      	push	{r4, r7, lr}
 80086dc:	b085      	sub	sp, #20
 80086de:	af02      	add	r7, sp, #8
 80086e0:	4604      	mov	r4, r0
 80086e2:	4608      	mov	r0, r1
 80086e4:	4611      	mov	r1, r2
 80086e6:	461a      	mov	r2, r3
 80086e8:	4623      	mov	r3, r4
 80086ea:	80fb      	strh	r3, [r7, #6]
 80086ec:	4603      	mov	r3, r0
 80086ee:	80bb      	strh	r3, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	807b      	strh	r3, [r7, #2]
 80086f4:	4613      	mov	r3, r2
 80086f6:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 80086f8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80086fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008700:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008704:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008708:	8c3b      	ldrh	r3, [r7, #32]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	4623      	mov	r3, r4
 800870e:	f7ff fe70 	bl	80083f2 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8008712:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8008716:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800871a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800871e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8008722:	8c3b      	ldrh	r3, [r7, #32]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4623      	mov	r3, r4
 8008728:	f7ff fe63 	bl	80083f2 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 800872c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008730:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008734:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8008738:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800873c:	8c3b      	ldrh	r3, [r7, #32]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	4623      	mov	r3, r4
 8008742:	f7ff fe56 	bl	80083f2 <Displ_Line>
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	bd90      	pop	{r4, r7, pc}

0800874e <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800874e:	b590      	push	{r4, r7, lr}
 8008750:	b091      	sub	sp, #68	; 0x44
 8008752:	af02      	add	r7, sp, #8
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	461a      	mov	r2, r3
 800875c:	4623      	mov	r3, r4
 800875e:	80fb      	strh	r3, [r7, #6]
 8008760:	4603      	mov	r3, r0
 8008762:	80bb      	strh	r3, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	807b      	strh	r3, [r7, #2]
 8008768:	4613      	mov	r3, r2
 800876a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800876c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008770:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008774:	429a      	cmp	r2, r3
 8008776:	dd0b      	ble.n	8008790 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8008778:	88bb      	ldrh	r3, [r7, #4]
 800877a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800877c:	883b      	ldrh	r3, [r7, #0]
 800877e:	80bb      	strh	r3, [r7, #4]
 8008780:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008782:	803b      	strh	r3, [r7, #0]
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008788:	887b      	ldrh	r3, [r7, #2]
 800878a:	80fb      	strh	r3, [r7, #6]
 800878c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800878e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8008790:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8008798:	429a      	cmp	r2, r3
 800879a:	dd0f      	ble.n	80087bc <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800879c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80087a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80087a2:	883b      	ldrh	r3, [r7, #0]
 80087a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80087a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087aa:	803b      	strh	r3, [r7, #0]
 80087ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80087b0:	843b      	strh	r3, [r7, #32]
 80087b2:	887b      	ldrh	r3, [r7, #2]
 80087b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80087b8:	8c3b      	ldrh	r3, [r7, #32]
 80087ba:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80087bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80087c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	dd0b      	ble.n	80087e0 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80087c8:	88bb      	ldrh	r3, [r7, #4]
 80087ca:	83fb      	strh	r3, [r7, #30]
 80087cc:	883b      	ldrh	r3, [r7, #0]
 80087ce:	80bb      	strh	r3, [r7, #4]
 80087d0:	8bfb      	ldrh	r3, [r7, #30]
 80087d2:	803b      	strh	r3, [r7, #0]
 80087d4:	88fb      	ldrh	r3, [r7, #6]
 80087d6:	83bb      	strh	r3, [r7, #28]
 80087d8:	887b      	ldrh	r3, [r7, #2]
 80087da:	80fb      	strh	r3, [r7, #6]
 80087dc:	8bbb      	ldrh	r3, [r7, #28]
 80087de:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80087e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80087e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d136      	bne.n	800885a <Displ_fillTriangle+0x10c>
        a = b = x0;
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80087f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80087f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80087fc:	429a      	cmp	r2, r3
 80087fe:	da02      	bge.n	8008806 <Displ_fillTriangle+0xb8>
 8008800:	887b      	ldrh	r3, [r7, #2]
 8008802:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008804:	e007      	b.n	8008816 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8008806:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800880a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800880e:	429a      	cmp	r2, r3
 8008810:	dd01      	ble.n	8008816 <Displ_fillTriangle+0xc8>
 8008812:	887b      	ldrh	r3, [r7, #2]
 8008814:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8008816:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800881a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800881e:	429a      	cmp	r2, r3
 8008820:	da03      	bge.n	800882a <Displ_fillTriangle+0xdc>
 8008822:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008826:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008828:	e008      	b.n	800883c <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800882a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800882e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8008832:	429a      	cmp	r2, r3
 8008834:	dd02      	ble.n	800883c <Displ_fillTriangle+0xee>
 8008836:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800883a:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 800883c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008840:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8008844:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008848:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800884c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	4623      	mov	r3, r4
 8008854:	f7ff fdcd 	bl	80083f2 <Displ_Line>
        return;
 8008858:	e0d2      	b.n	8008a00 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 800885a:	887a      	ldrh	r2, [r7, #2]
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	b29b      	uxth	r3, r3
 8008862:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8008864:	883a      	ldrh	r2, [r7, #0]
 8008866:	88bb      	ldrh	r3, [r7, #4]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	b29b      	uxth	r3, r3
 800886c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800886e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	b29b      	uxth	r3, r3
 8008878:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800887a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800887e:	88bb      	ldrh	r3, [r7, #4]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	b29b      	uxth	r3, r3
 8008884:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8008886:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	b29b      	uxth	r3, r3
 8008890:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8008892:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008896:	883b      	ldrh	r3, [r7, #0]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	b29b      	uxth	r3, r3
 800889c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800889e:	2300      	movs	r3, #0
 80088a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80088a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80088aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d102      	bne.n	80088b8 <Displ_fillTriangle+0x16a>
 80088b2:	883b      	ldrh	r3, [r7, #0]
 80088b4:	863b      	strh	r3, [r7, #48]	; 0x30
 80088b6:	e003      	b.n	80088c0 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80088b8:	883b      	ldrh	r3, [r7, #0]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80088c0:	88bb      	ldrh	r3, [r7, #4]
 80088c2:	867b      	strh	r3, [r7, #50]	; 0x32
 80088c4:	e03d      	b.n	8008942 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80088c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80088ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	4413      	add	r3, r2
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80088da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	4413      	add	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80088ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80088f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f4:	4413      	add	r3, r2
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80088f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80088fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088fe:	4413      	add	r3, r2
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8008902:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8008906:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800890a:	429a      	cmp	r2, r3
 800890c:	dd05      	ble.n	800891a <Displ_fillTriangle+0x1cc>
 800890e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008910:	81bb      	strh	r3, [r7, #12]
 8008912:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008914:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008916:	89bb      	ldrh	r3, [r7, #12]
 8008918:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800891a:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800891e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8008922:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008926:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800892a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	4623      	mov	r3, r4
 8008932:	f7ff fd5e 	bl	80083f2 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8008936:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800893a:	b29b      	uxth	r3, r3
 800893c:	3301      	adds	r3, #1
 800893e:	b29b      	uxth	r3, r3
 8008940:	867b      	strh	r3, [r7, #50]	; 0x32
 8008942:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8008946:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800894a:	429a      	cmp	r2, r3
 800894c:	ddbb      	ble.n	80088c6 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800894e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008952:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008956:	f9b7 2000 	ldrsh.w	r2, [r7]
 800895a:	1a8a      	subs	r2, r1, r2
 800895c:	fb02 f303 	mul.w	r3, r2, r3
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8008962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008966:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800896a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800896e:	1a8a      	subs	r2, r1, r2
 8008970:	fb02 f303 	mul.w	r3, r2, r3
 8008974:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8008976:	e03d      	b.n	80089f4 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8008978:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800897c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897e:	fb92 f3f3 	sdiv	r3, r2, r3
 8008982:	b29a      	uxth	r2, r3
 8008984:	887b      	ldrh	r3, [r7, #2]
 8008986:	4413      	add	r3, r2
 8008988:	b29b      	uxth	r3, r3
 800898a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800898c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008992:	fb92 f3f3 	sdiv	r3, r2, r3
 8008996:	b29a      	uxth	r2, r3
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	4413      	add	r3, r2
 800899c:	b29b      	uxth	r3, r3
 800899e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80089a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a6:	4413      	add	r3, r2
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80089aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80089ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089b0:	4413      	add	r3, r2
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80089b4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80089b8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80089bc:	429a      	cmp	r2, r3
 80089be:	dd05      	ble.n	80089cc <Displ_fillTriangle+0x27e>
 80089c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089c2:	81fb      	strh	r3, [r7, #14]
 80089c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80089c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80089cc:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80089d0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80089d4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80089d8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80089dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	4623      	mov	r3, r4
 80089e4:	f7ff fd05 	bl	80083f2 <Displ_Line>
    for(; y<=y2; y++) {
 80089e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3301      	adds	r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	867b      	strh	r3, [r7, #50]	; 0x32
 80089f4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80089f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	ddbb      	ble.n	8008978 <Displ_fillTriangle+0x22a>
    }
}
 8008a00:	373c      	adds	r7, #60	; 0x3c
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}
	...

08008a08 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8008a08:	b082      	sub	sp, #8
 8008a0a:	b590      	push	{r4, r7, lr}
 8008a0c:	b08f      	sub	sp, #60	; 0x3c
 8008a0e:	af02      	add	r7, sp, #8
 8008a10:	647b      	str	r3, [r7, #68]	; 0x44
 8008a12:	4603      	mov	r3, r0
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	460b      	mov	r3, r1
 8008a18:	80bb      	strh	r3, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8008a1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a22:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8008a24:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d102      	bne.n	8008a32 <Displ_WChar+0x2a>
		wsize<<= 1;
 8008a2c:	7efb      	ldrb	r3, [r7, #27]
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8008a36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008a3a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
 8008a42:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8008a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	3b20      	subs	r3, #32
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8008a56:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d005      	beq.n	8008a6a <Displ_WChar+0x62>
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d107      	bne.n	8008a72 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8008a62:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a66:	61fb      	str	r3, [r7, #28]
			break;
 8008a68:	e005      	b.n	8008a76 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8008a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6e:	61fb      	str	r3, [r7, #28]
			break;
 8008a70:	e001      	b.n	8008a76 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8008a72:	2380      	movs	r3, #128	; 0x80
 8008a74:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8008a76:	4b68      	ldr	r3, [pc, #416]	; (8008c18 <Displ_WChar+0x210>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8008a7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b21a      	sxth	r2, r3
 8008a84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b21b      	sxth	r3, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	b21b      	sxth	r3, r3
 8008a92:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8008a94:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	b21a      	sxth	r2, r3
 8008a9c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	b21b      	sxth	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b21b      	sxth	r3, r3
 8008aaa:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8008aac:	2300      	movs	r3, #0
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab0:	e06f      	b.n	8008b92 <Displ_WChar+0x18a>
		b=0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8008ab6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d015      	beq.n	8008aea <Displ_WChar+0xe2>
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d120      	bne.n	8008b04 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	4413      	add	r3, r2
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	041a      	lsls	r2, r3, #16
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	3301      	adds	r3, #1
 8008ad0:	6939      	ldr	r1, [r7, #16]
 8008ad2:	440b      	add	r3, r1
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008adc:	3202      	adds	r2, #2
 8008ade:	6939      	ldr	r1, [r7, #16]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8008ae8:	e011      	b.n	8008b0e <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	4413      	add	r3, r2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af6:	3201      	adds	r2, #1
 8008af8:	6939      	ldr	r1, [r7, #16]
 8008afa:	440a      	add	r2, r1
 8008afc:	7812      	ldrb	r2, [r2, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8008b02:	e004      	b.n	8008b0e <Displ_WChar+0x106>
			default:
				b=pos[i];
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	4413      	add	r3, r2
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8008b0e:	2300      	movs	r3, #0
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
 8008b12:	e032      	b.n	8008b7a <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8008b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	409a      	lsls	r2, r3
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d014      	beq.n	8008b4c <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	623a      	str	r2, [r7, #32]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	897a      	ldrh	r2, [r7, #10]
 8008b30:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8008b32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d11c      	bne.n	8008b74 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	623a      	str	r2, [r7, #32]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	897a      	ldrh	r2, [r7, #10]
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	e013      	b.n	8008b74 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	623a      	str	r2, [r7, #32]
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4413      	add	r3, r2
 8008b58:	893a      	ldrh	r2, [r7, #8]
 8008b5a:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8008b5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d107      	bne.n	8008b74 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	623a      	str	r2, [r7, #32]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	893a      	ldrh	r2, [r7, #8]
 8008b72:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	3301      	adds	r3, #1
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d3c6      	bcc.n	8008b14 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8008b86:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	4413      	add	r3, r2
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d38b      	bcc.n	8008ab2 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8008ba0:	7efb      	ldrb	r3, [r7, #27]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	88fb      	ldrh	r3, [r7, #6]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29c      	uxth	r4, r3
 8008bae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8008bb2:	88bb      	ldrh	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	88b9      	ldrh	r1, [r7, #4]
 8008bbe:	88f8      	ldrh	r0, [r7, #6]
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	f7fe ff8d 	bl	8007ae0 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bcc:	d90b      	bls.n	8008be6 <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8008bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	f240 33ad 	movw	r3, #941	; 0x3ad
 8008bdc:	4a0f      	ldr	r2, [pc, #60]	; (8008c1c <Displ_WChar+0x214>)
 8008bde:	4910      	ldr	r1, [pc, #64]	; (8008c20 <Displ_WChar+0x218>)
 8008be0:	4810      	ldr	r0, [pc, #64]	; (8008c24 <Displ_WChar+0x21c>)
 8008be2:	f7fd ffc1 	bl	8006b68 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <Displ_WChar+0x210>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2200      	movs	r2, #0
 8008bec:	6a39      	ldr	r1, [r7, #32]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe ff1f 	bl	8007a32 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8008bf4:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <Displ_WChar+0x210>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a0b      	ldr	r2, [pc, #44]	; (8008c28 <Displ_WChar+0x220>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d101      	bne.n	8008c02 <Displ_WChar+0x1fa>
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <Displ_WChar+0x224>)
 8008c00:	e000      	b.n	8008c04 <Displ_WChar+0x1fc>
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <Displ_WChar+0x220>)
 8008c04:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <Displ_WChar+0x210>)
 8008c06:	6013      	str	r3, [r2, #0]

}
 8008c08:	bf00      	nop
 8008c0a:	3734      	adds	r7, #52	; 0x34
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008c12:	b002      	add	sp, #8
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000068 	.word	0x20000068
 8008c1c:	08018fcc 	.word	0x08018fcc
 8008c20:	08013efc 	.word	0x08013efc
 8008c24:	08013f1c 	.word	0x08013f1c
 8008c28:	20008ee4 	.word	0x20008ee4
 8008c2c:	200096e4 	.word	0x200096e4

08008c30 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	4604      	mov	r4, r0
 8008c38:	4608      	mov	r0, r1
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4623      	mov	r3, r4
 8008c40:	80fb      	strh	r3, [r7, #6]
 8008c42:	4603      	mov	r3, r0
 8008c44:	80bb      	strh	r3, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	807b      	strh	r3, [r7, #2]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8008c4e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008c52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c56:	4293      	cmp	r3, r2
 8008c58:	bfa8      	it	ge
 8008c5a:	4613      	movge	r3, r2
 8008c5c:	b21b      	sxth	r3, r3
 8008c5e:	0fda      	lsrs	r2, r3, #31
 8008c60:	4413      	add	r3, r2
 8008c62:	105b      	asrs	r3, r3, #1
 8008c64:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8008c66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	dd01      	ble.n	8008c76 <Displ_drawRoundRect+0x46>
 8008c72:	89fb      	ldrh	r3, [r7, #14]
 8008c74:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	8c3b      	ldrh	r3, [r7, #32]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	b218      	sxth	r0, r3
 8008c80:	88fa      	ldrh	r2, [r7, #6]
 8008c82:	887b      	ldrh	r3, [r7, #2]
 8008c84:	4413      	add	r3, r2
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	8c3b      	ldrh	r3, [r7, #32]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	b21a      	sxth	r2, r3
 8008c94:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008c98:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4623      	mov	r3, r4
 8008ca2:	f7ff fba6 	bl	80083f2 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8008ca6:	88fa      	ldrh	r2, [r7, #6]
 8008ca8:	8c3b      	ldrh	r3, [r7, #32]
 8008caa:	4413      	add	r3, r2
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	b218      	sxth	r0, r3
 8008cb0:	88ba      	ldrh	r2, [r7, #4]
 8008cb2:	883b      	ldrh	r3, [r7, #0]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	b219      	sxth	r1, r3
 8008cbe:	88fa      	ldrh	r2, [r7, #6]
 8008cc0:	887b      	ldrh	r3, [r7, #2]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	8c3b      	ldrh	r3, [r7, #32]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	b21c      	sxth	r4, r3
 8008cd2:	88ba      	ldrh	r2, [r7, #4]
 8008cd4:	883b      	ldrh	r3, [r7, #0]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	b21a      	sxth	r2, r3
 8008ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	f7ff fb83 	bl	80083f2 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8008cec:	88ba      	ldrh	r2, [r7, #4]
 8008cee:	8c3b      	ldrh	r3, [r7, #32]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	b219      	sxth	r1, r3
 8008cf6:	88ba      	ldrh	r2, [r7, #4]
 8008cf8:	883b      	ldrh	r3, [r7, #0]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	8c3b      	ldrh	r3, [r7, #32]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	b21c      	sxth	r4, r3
 8008d0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	4623      	mov	r3, r4
 8008d18:	f7ff fb6b 	bl	80083f2 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8008d1c:	88fa      	ldrh	r2, [r7, #6]
 8008d1e:	887b      	ldrh	r3, [r7, #2]
 8008d20:	4413      	add	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	b218      	sxth	r0, r3
 8008d2a:	88ba      	ldrh	r2, [r7, #4]
 8008d2c:	8c3b      	ldrh	r3, [r7, #32]
 8008d2e:	4413      	add	r3, r2
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	b219      	sxth	r1, r3
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	887b      	ldrh	r3, [r7, #2]
 8008d38:	4413      	add	r3, r2
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	b21c      	sxth	r4, r3
 8008d42:	88ba      	ldrh	r2, [r7, #4]
 8008d44:	883b      	ldrh	r3, [r7, #0]
 8008d46:	4413      	add	r3, r2
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	8c3b      	ldrh	r3, [r7, #32]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	b21a      	sxth	r2, r3
 8008d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	f7ff fb48 	bl	80083f2 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	8c3b      	ldrh	r3, [r7, #32]
 8008d66:	4413      	add	r3, r2
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	b218      	sxth	r0, r3
 8008d6c:	88ba      	ldrh	r2, [r7, #4]
 8008d6e:	8c3b      	ldrh	r3, [r7, #32]
 8008d70:	4413      	add	r3, r2
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	b219      	sxth	r1, r3
 8008d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f7ff f96a 	bl	8008058 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8008d84:	88fa      	ldrh	r2, [r7, #6]
 8008d86:	887b      	ldrh	r3, [r7, #2]
 8008d88:	4413      	add	r3, r2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	8c3b      	ldrh	r3, [r7, #32]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	b218      	sxth	r0, r3
 8008d98:	88ba      	ldrh	r2, [r7, #4]
 8008d9a:	8c3b      	ldrh	r3, [r7, #32]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	b219      	sxth	r1, r3
 8008da2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	2302      	movs	r3, #2
 8008dac:	f7ff f954 	bl	8008058 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	4413      	add	r3, r2
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	8c3b      	ldrh	r3, [r7, #32]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	b218      	sxth	r0, r3
 8008dc4:	88ba      	ldrh	r2, [r7, #4]
 8008dc6:	883b      	ldrh	r3, [r7, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	8c3b      	ldrh	r3, [r7, #32]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	b219      	sxth	r1, r3
 8008dd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	2304      	movs	r3, #4
 8008de2:	f7ff f939 	bl	8008058 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8008de6:	88fa      	ldrh	r2, [r7, #6]
 8008de8:	8c3b      	ldrh	r3, [r7, #32]
 8008dea:	4413      	add	r3, r2
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	b218      	sxth	r0, r3
 8008df0:	88ba      	ldrh	r2, [r7, #4]
 8008df2:	883b      	ldrh	r3, [r7, #0]
 8008df4:	4413      	add	r3, r2
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	8c3b      	ldrh	r3, [r7, #32]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	b219      	sxth	r1, r3
 8008e04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f7ff f923 	bl	8008058 <drawCircleHelper>
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd90      	pop	{r4, r7, pc}

08008e1a <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8008e1a:	b590      	push	{r4, r7, lr}
 8008e1c:	b087      	sub	sp, #28
 8008e1e:	af02      	add	r7, sp, #8
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	461a      	mov	r2, r3
 8008e28:	4623      	mov	r3, r4
 8008e2a:	80fb      	strh	r3, [r7, #6]
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	80bb      	strh	r3, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	807b      	strh	r3, [r7, #2]
 8008e34:	4613      	mov	r3, r2
 8008e36:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8008e38:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008e3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bfa8      	it	ge
 8008e44:	4613      	movge	r3, r2
 8008e46:	b21b      	sxth	r3, r3
 8008e48:	0fda      	lsrs	r2, r3, #31
 8008e4a:	4413      	add	r3, r2
 8008e4c:	105b      	asrs	r3, r3, #1
 8008e4e:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8008e50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008e54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	dd01      	ble.n	8008e60 <Displ_fillRoundRect+0x46>
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8008e60:	88fa      	ldrh	r2, [r7, #6]
 8008e62:	8c3b      	ldrh	r3, [r7, #32]
 8008e64:	4413      	add	r3, r2
 8008e66:	b298      	uxth	r0, r3
 8008e68:	88b9      	ldrh	r1, [r7, #4]
 8008e6a:	887a      	ldrh	r2, [r7, #2]
 8008e6c:	8c3b      	ldrh	r3, [r7, #32]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	883c      	ldrh	r4, [r7, #0]
 8008e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	f7fe ff1b 	bl	8007cb8 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	887b      	ldrh	r3, [r7, #2]
 8008e86:	4413      	add	r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	8c3b      	ldrh	r3, [r7, #32]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	b218      	sxth	r0, r3
 8008e96:	88ba      	ldrh	r2, [r7, #4]
 8008e98:	8c3b      	ldrh	r3, [r7, #32]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	b219      	sxth	r1, r3
 8008ea0:	883a      	ldrh	r2, [r7, #0]
 8008ea2:	8c3b      	ldrh	r3, [r7, #32]
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	b21b      	sxth	r3, r3
 8008eb2:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8008eb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008eb8:	9201      	str	r2, [sp, #4]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	f7ff f98e 	bl	80081e0 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	8c3b      	ldrh	r3, [r7, #32]
 8008ec8:	4413      	add	r3, r2
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	b218      	sxth	r0, r3
 8008ece:	88ba      	ldrh	r2, [r7, #4]
 8008ed0:	8c3b      	ldrh	r3, [r7, #32]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	b219      	sxth	r1, r3
 8008ed8:	883a      	ldrh	r2, [r7, #0]
 8008eda:	8c3b      	ldrh	r3, [r7, #32]
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	b21b      	sxth	r3, r3
 8008eea:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8008eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ef0:	9201      	str	r2, [sp, #4]
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	f7ff f972 	bl	80081e0 <fillCircleHelper>
}
 8008efc:	bf00      	nop
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd90      	pop	{r4, r7, pc}

08008f04 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8008f04:	b082      	sub	sp, #8
 8008f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f08:	b08b      	sub	sp, #44	; 0x2c
 8008f0a:	af06      	add	r7, sp, #24
 8008f0c:	603a      	str	r2, [r7, #0]
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f10:	4603      	mov	r3, r0
 8008f12:	80fb      	strh	r3, [r7, #6]
 8008f14:	460b      	mov	r3, r1
 8008f16:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8008f18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f1a:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8008f1c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d922      	bls.n	8008f6a <Displ_WString+0x66>
		delta<<=1;
 8008f24:	89fb      	ldrh	r3, [r7, #14]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8008f2a:	e01e      	b.n	8008f6a <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	88bd      	ldrh	r5, [r7, #4]
 8008f32:	88fc      	ldrh	r4, [r7, #6]
 8008f34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008f3c:	9303      	str	r3, [sp, #12]
 8008f3e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	466e      	mov	r6, sp
 8008f46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f4e:	e886 0003 	stmia.w	r6, {r0, r1}
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	4629      	mov	r1, r5
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff fd56 	bl	8008a08 <Displ_WChar>
        x += delta;
 8008f5c:	88fa      	ldrh	r2, [r7, #6]
 8008f5e:	89fb      	ldrh	r3, [r7, #14]
 8008f60:	4413      	add	r3, r2
 8008f62:	80fb      	strh	r3, [r7, #6]
        str++;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	603b      	str	r3, [r7, #0]
    while(*str) {
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1dc      	bne.n	8008f2c <Displ_WString+0x28>
    }
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008f7e:	b002      	add	sp, #8
 8008f80:	4770      	bx	lr
	...

08008f84 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	2b51      	cmp	r3, #81	; 0x51
 8008f92:	d00a      	beq.n	8008faa <Displ_BackLight+0x26>
 8008f94:	2b51      	cmp	r3, #81	; 0x51
 8008f96:	dc16      	bgt.n	8008fc6 <Displ_BackLight+0x42>
 8008f98:	2b46      	cmp	r3, #70	; 0x46
 8008f9a:	d008      	beq.n	8008fae <Displ_BackLight+0x2a>
 8008f9c:	2b46      	cmp	r3, #70	; 0x46
 8008f9e:	dc12      	bgt.n	8008fc6 <Displ_BackLight+0x42>
 8008fa0:	2b30      	cmp	r3, #48	; 0x30
 8008fa2:	d00a      	beq.n	8008fba <Displ_BackLight+0x36>
 8008fa4:	2b31      	cmp	r3, #49	; 0x31
 8008fa6:	d002      	beq.n	8008fae <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8008fa8:	e00d      	b.n	8008fc6 <Displ_BackLight+0x42>
		__NOP();
 8008faa:	bf00      	nop
		break;
 8008fac:	e00c      	b.n	8008fc8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8008fae:	2201      	movs	r2, #1
 8008fb0:	2140      	movs	r1, #64	; 0x40
 8008fb2:	480a      	ldr	r0, [pc, #40]	; (8008fdc <Displ_BackLight+0x58>)
 8008fb4:	f002 f860 	bl	800b078 <HAL_GPIO_WritePin>
		break;
 8008fb8:	e006      	b.n	8008fc8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2140      	movs	r1, #64	; 0x40
 8008fbe:	4807      	ldr	r0, [pc, #28]	; (8008fdc <Displ_BackLight+0x58>)
 8008fc0:	f002 f85a 	bl	800b078 <HAL_GPIO_WritePin>
		break;
 8008fc4:	e000      	b.n	8008fc8 <Displ_BackLight+0x44>
		break;
 8008fc6:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8008fc8:	2140      	movs	r1, #64	; 0x40
 8008fca:	4804      	ldr	r0, [pc, #16]	; (8008fdc <Displ_BackLight+0x58>)
 8008fcc:	f002 f83c 	bl	800b048 <HAL_GPIO_ReadPin>
 8008fd0:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40020000 	.word	0x40020000

08008fe0 <testLines>:




void testLines(uint16_t color)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b08b      	sub	sp, #44	; 0x2c
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8008fea:	4b7c      	ldr	r3, [pc, #496]	; (80091dc <testLines+0x1fc>)
 8008fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ff0:	617b      	str	r3, [r7, #20]
                  h = _height;
 8008ff2:	4b7b      	ldr	r3, [pc, #492]	; (80091e0 <testLines+0x200>)
 8008ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ff8:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f7ff f810 	bl	8008020 <Displ_CLS>

    x1 = y1 = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3b01      	subs	r3, #1
 800900c:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	e00f      	b.n	8009034 <testLines+0x54>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	b218      	sxth	r0, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	b219      	sxth	r1, r3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	b21a      	sxth	r2, r3
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	b21c      	sxth	r4, r3
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4623      	mov	r3, r4
 800902a:	f7ff f9e2 	bl	80083f2 <Displ_Line>
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	3306      	adds	r3, #6
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	429a      	cmp	r2, r3
 800903a:	dbeb      	blt.n	8009014 <testLines+0x34>
    x2    = w - 1;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	3b01      	subs	r3, #1
 8009040:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8009042:	2300      	movs	r3, #0
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e00f      	b.n	8009068 <testLines+0x88>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	b218      	sxth	r0, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	b219      	sxth	r1, r3
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	b21a      	sxth	r2, r3
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	b21c      	sxth	r4, r3
 8009058:	88fb      	ldrh	r3, [r7, #6]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	4623      	mov	r3, r4
 800905e:	f7ff f9c8 	bl	80083f2 <Displ_Line>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	3306      	adds	r3, #6
 8009066:	61bb      	str	r3, [r7, #24]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	429a      	cmp	r2, r3
 800906e:	dbeb      	blt.n	8009048 <testLines+0x68>

    Displ_CLS(BLACK);
 8009070:	2000      	movs	r0, #0
 8009072:	f7fe ffd5 	bl	8008020 <Displ_CLS>

    x1    = w - 1;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	3b01      	subs	r3, #1
 800907a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3b01      	subs	r3, #1
 8009084:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8009086:	2300      	movs	r3, #0
 8009088:	61fb      	str	r3, [r7, #28]
 800908a:	e00f      	b.n	80090ac <testLines+0xcc>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	b218      	sxth	r0, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	b219      	sxth	r1, r3
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	b21a      	sxth	r2, r3
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	b21c      	sxth	r4, r3
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	4623      	mov	r3, r4
 80090a2:	f7ff f9a6 	bl	80083f2 <Displ_Line>
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	3306      	adds	r3, #6
 80090aa:	61fb      	str	r3, [r7, #28]
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	dbeb      	blt.n	800908c <testLines+0xac>
    x2    = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	e00f      	b.n	80090de <testLines+0xfe>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	b218      	sxth	r0, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	b219      	sxth	r1, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	b21a      	sxth	r2, r3
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	b21c      	sxth	r4, r3
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4623      	mov	r3, r4
 80090d4:	f7ff f98d 	bl	80083f2 <Displ_Line>
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	3306      	adds	r3, #6
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	dbeb      	blt.n	80090be <testLines+0xde>

    Displ_CLS(BLACK);
 80090e6:	2000      	movs	r0, #0
 80090e8:	f7fe ff9a 	bl	8008020 <Displ_CLS>

    x1    = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	e00f      	b.n	8009120 <testLines+0x140>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	b218      	sxth	r0, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	b219      	sxth	r1, r3
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	b21a      	sxth	r2, r3
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	b21c      	sxth	r4, r3
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	4623      	mov	r3, r4
 8009116:	f7ff f96c 	bl	80083f2 <Displ_Line>
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	3306      	adds	r3, #6
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	429a      	cmp	r2, r3
 8009126:	dbeb      	blt.n	8009100 <testLines+0x120>
    x2    = w - 1;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	3b01      	subs	r3, #1
 800912c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800912e:	2300      	movs	r3, #0
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	e00f      	b.n	8009154 <testLines+0x174>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	b218      	sxth	r0, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	b219      	sxth	r1, r3
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	b21a      	sxth	r2, r3
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	b21c      	sxth	r4, r3
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	4623      	mov	r3, r4
 800914a:	f7ff f952 	bl	80083f2 <Displ_Line>
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	3306      	adds	r3, #6
 8009152:	61bb      	str	r3, [r7, #24]
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	429a      	cmp	r2, r3
 800915a:	dbeb      	blt.n	8009134 <testLines+0x154>

    Displ_CLS(BLACK);
 800915c:	2000      	movs	r0, #0
 800915e:	f7fe ff5f 	bl	8008020 <Displ_CLS>

    x1    = w - 1;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3b01      	subs	r3, #1
 8009166:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	3b01      	subs	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	e00f      	b.n	8009198 <testLines+0x1b8>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	b218      	sxth	r0, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	b219      	sxth	r1, r3
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	b21a      	sxth	r2, r3
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	b21c      	sxth	r4, r3
 8009188:	88fb      	ldrh	r3, [r7, #6]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4623      	mov	r3, r4
 800918e:	f7ff f930 	bl	80083f2 <Displ_Line>
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	3306      	adds	r3, #6
 8009196:	61fb      	str	r3, [r7, #28]
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	429a      	cmp	r2, r3
 800919e:	dbeb      	blt.n	8009178 <testLines+0x198>
    x2    = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	e00f      	b.n	80091ca <testLines+0x1ea>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	b218      	sxth	r0, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	b219      	sxth	r1, r3
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	b21a      	sxth	r2, r3
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	b21c      	sxth	r4, r3
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	4623      	mov	r3, r4
 80091c0:	f7ff f917 	bl	80083f2 <Displ_Line>
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	3306      	adds	r3, #6
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	dbeb      	blt.n	80091aa <testLines+0x1ca>

}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	3724      	adds	r7, #36	; 0x24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd90      	pop	{r4, r7, pc}
 80091dc:	20008ee0 	.word	0x20008ee0
 80091e0:	20008ee2 	.word	0x20008ee2

080091e4 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	4603      	mov	r3, r0
 80091ec:	460a      	mov	r2, r1
 80091ee:	80fb      	strh	r3, [r7, #6]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80091f4:	4b20      	ldr	r3, [pc, #128]	; (8009278 <testFastLines+0x94>)
 80091f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	4b1f      	ldr	r3, [pc, #124]	; (800927c <testFastLines+0x98>)
 80091fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009202:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8009204:	2000      	movs	r0, #0
 8009206:	f7fe ff0b 	bl	8008020 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 800920a:	2300      	movs	r3, #0
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	e011      	b.n	8009234 <testFastLines+0x50>
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	b219      	sxth	r1, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	b29b      	uxth	r3, r3
 8009218:	3b01      	subs	r3, #1
 800921a:	b29b      	uxth	r3, r3
 800921c:	b21a      	sxth	r2, r3
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	b218      	sxth	r0, r3
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4603      	mov	r3, r0
 8009228:	2000      	movs	r0, #0
 800922a:	f7ff f8e2 	bl	80083f2 <Displ_Line>
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	3305      	adds	r3, #5
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	429a      	cmp	r2, r3
 800923a:	dbe9      	blt.n	8009210 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e011      	b.n	8009266 <testFastLines+0x82>
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	b218      	sxth	r0, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	b21a      	sxth	r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29b      	uxth	r3, r3
 8009252:	b219      	sxth	r1, r3
 8009254:	88bb      	ldrh	r3, [r7, #4]
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	460b      	mov	r3, r1
 800925a:	2100      	movs	r1, #0
 800925c:	f7ff f8c9 	bl	80083f2 <Displ_Line>
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3305      	adds	r3, #5
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	429a      	cmp	r2, r3
 800926c:	dbe9      	blt.n	8009242 <testFastLines+0x5e>
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20008ee0 	.word	0x20008ee0
 800927c:	20008ee2 	.word	0x20008ee2

08009280 <testRects>:




void testRects(uint16_t color)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b08b      	sub	sp, #44	; 0x2c
 8009284:	af02      	add	r7, sp, #8
 8009286:	4603      	mov	r3, r0
 8009288:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 800928a:	4b25      	ldr	r3, [pc, #148]	; (8009320 <testRects+0xa0>)
 800928c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009290:	0fda      	lsrs	r2, r3, #31
 8009292:	4413      	add	r3, r2
 8009294:	105b      	asrs	r3, r3, #1
 8009296:	b21b      	sxth	r3, r3
 8009298:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 800929a:	4b22      	ldr	r3, [pc, #136]	; (8009324 <testRects+0xa4>)
 800929c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092a0:	0fda      	lsrs	r2, r3, #31
 80092a2:	4413      	add	r3, r2
 80092a4:	105b      	asrs	r3, r3, #1
 80092a6:	b21b      	sxth	r3, r3
 80092a8:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80092aa:	2000      	movs	r0, #0
 80092ac:	f7fe feb8 	bl	8008020 <Displ_CLS>
	n     = min(_width, _height);
 80092b0:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <testRects+0xa4>)
 80092b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80092b6:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <testRects+0xa0>)
 80092b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092bc:	4293      	cmp	r3, r2
 80092be:	bfa8      	it	ge
 80092c0:	4613      	movge	r3, r2
 80092c2:	b21b      	sxth	r3, r3
 80092c4:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80092c6:	2302      	movs	r3, #2
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e020      	b.n	800930e <testRects+0x8e>
		i2 = i / 2;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	0fda      	lsrs	r2, r3, #31
 80092d0:	4413      	add	r3, r2
 80092d2:	105b      	asrs	r3, r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	b218      	sxth	r0, r3
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	b219      	sxth	r1, r3
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	b21a      	sxth	r2, r3
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	b21c      	sxth	r4, r3
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2301      	movs	r3, #1
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4623      	mov	r3, r4
 8009304:	f7ff f9a6 	bl	8008654 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	3306      	adds	r3, #6
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	429a      	cmp	r2, r3
 8009314:	dbda      	blt.n	80092cc <testRects+0x4c>
	}
}
 8009316:	bf00      	nop
 8009318:	bf00      	nop
 800931a:	3724      	adds	r7, #36	; 0x24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd90      	pop	{r4, r7, pc}
 8009320:	20008ee0 	.word	0x20008ee0
 8009324:	20008ee2 	.word	0x20008ee2

08009328 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b08b      	sub	sp, #44	; 0x2c
 800932c:	af02      	add	r7, sp, #8
 800932e:	4603      	mov	r3, r0
 8009330:	460a      	mov	r2, r1
 8009332:	80fb      	strh	r3, [r7, #6]
 8009334:	4613      	mov	r3, r2
 8009336:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8009338:	4b30      	ldr	r3, [pc, #192]	; (80093fc <testFilledRects+0xd4>)
 800933a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800933e:	0fda      	lsrs	r2, r3, #31
 8009340:	4413      	add	r3, r2
 8009342:	105b      	asrs	r3, r3, #1
 8009344:	b21b      	sxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 800934a:	4b2d      	ldr	r3, [pc, #180]	; (8009400 <testFilledRects+0xd8>)
 800934c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009350:	0fda      	lsrs	r2, r3, #31
 8009352:	4413      	add	r3, r2
 8009354:	105b      	asrs	r3, r3, #1
 8009356:	b21b      	sxth	r3, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800935c:	2000      	movs	r0, #0
 800935e:	f7fe fe5f 	bl	8008020 <Displ_CLS>
	n = min(_width, _height);
 8009362:	4b27      	ldr	r3, [pc, #156]	; (8009400 <testFilledRects+0xd8>)
 8009364:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <testFilledRects+0xd4>)
 800936a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800936e:	4293      	cmp	r3, r2
 8009370:	bfa8      	it	ge
 8009372:	4613      	movge	r3, r2
 8009374:	b21b      	sxth	r3, r3
 8009376:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	e035      	b.n	80093ea <testFilledRects+0xc2>
		i2    = i / 2;
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	0fda      	lsrs	r2, r3, #31
 8009382:	4413      	add	r3, r2
 8009384:	105b      	asrs	r3, r3, #1
 8009386:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	b29b      	uxth	r3, r3
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	b298      	uxth	r0, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	b29a      	uxth	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	b29b      	uxth	r3, r3
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	b299      	uxth	r1, r3
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	b29c      	uxth	r4, r3
 80093a8:	88fb      	ldrh	r3, [r7, #6]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4623      	mov	r3, r4
 80093ae:	f7fe fc83 	bl	8007cb8 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	b29b      	uxth	r3, r3
 80093be:	b218      	sxth	r0, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	b219      	sxth	r1, r3
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	b21a      	sxth	r2, r3
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	b21c      	sxth	r4, r3
 80093d6:	88bb      	ldrh	r3, [r7, #4]
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	2301      	movs	r3, #1
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	4623      	mov	r3, r4
 80093e0:	f7ff f938 	bl	8008654 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	3b06      	subs	r3, #6
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dcc6      	bgt.n	800937e <testFilledRects+0x56>
	}
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	3724      	adds	r7, #36	; 0x24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd90      	pop	{r4, r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20008ee0 	.word	0x20008ee0
 8009400:	20008ee2 	.word	0x20008ee2

08009404 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	460a      	mov	r2, r1
 800940e:	71fb      	strb	r3, [r7, #7]
 8009410:	4613      	mov	r3, r2
 8009412:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8009414:	4b18      	ldr	r3, [pc, #96]	; (8009478 <testFilledCircles+0x74>)
 8009416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	4b17      	ldr	r3, [pc, #92]	; (800947c <testFilledCircles+0x78>)
 800941e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 800942a:	2000      	movs	r0, #0
 800942c:	f7fe fdf8 	bl	8008020 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e017      	b.n	8009466 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	e00c      	b.n	8009456 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	b218      	sxth	r0, r3
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	b219      	sxth	r1, r3
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	b21a      	sxth	r2, r3
 8009448:	88bb      	ldrh	r3, [r7, #4]
 800944a:	f7fe ff9f 	bl	800838c <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	61bb      	str	r3, [r7, #24]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	429a      	cmp	r2, r3
 800945c:	dbee      	blt.n	800943c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800945e:	69fa      	ldr	r2, [r7, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	61fb      	str	r3, [r7, #28]
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	429a      	cmp	r2, r3
 800946c:	dbe3      	blt.n	8009436 <testFilledCircles+0x32>
        }
    }
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20008ee0 	.word	0x20008ee0
 800947c:	20008ee2 	.word	0x20008ee2

08009480 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	460a      	mov	r2, r1
 800948a:	71fb      	strb	r3, [r7, #7]
 800948c:	4613      	mov	r3, r2
 800948e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8009496:	4b19      	ldr	r3, [pc, #100]	; (80094fc <testCircles+0x7c>)
 8009498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800949c:	461a      	mov	r2, r3
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	4413      	add	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80094a4:	4b16      	ldr	r3, [pc, #88]	; (8009500 <testCircles+0x80>)
 80094a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094aa:	461a      	mov	r2, r3
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4413      	add	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	e017      	b.n	80094e8 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80094b8:	2300      	movs	r3, #0
 80094ba:	61bb      	str	r3, [r7, #24]
 80094bc:	e00c      	b.n	80094d8 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	b218      	sxth	r0, r3
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	b219      	sxth	r1, r3
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	b21a      	sxth	r2, r3
 80094ca:	88bb      	ldrh	r3, [r7, #4]
 80094cc:	f7fe fcd4 	bl	8007e78 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	4413      	add	r3, r2
 80094d6:	61bb      	str	r3, [r7, #24]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	dbee      	blt.n	80094be <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	4413      	add	r3, r2
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	dbe3      	blt.n	80094b8 <testCircles+0x38>
        }
    }
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20008ee0 	.word	0x20008ee0
 8009500:	20008ee2 	.word	0x20008ee2

08009504 <testTriangles>:




void testTriangles()
{
 8009504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009506:	b089      	sub	sp, #36	; 0x24
 8009508:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800950a:	4b2e      	ldr	r3, [pc, #184]	; (80095c4 <testTriangles+0xc0>)
 800950c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009510:	0fda      	lsrs	r2, r3, #31
 8009512:	4413      	add	r3, r2
 8009514:	105b      	asrs	r3, r3, #1
 8009516:	b21b      	sxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 800951c:	4b2a      	ldr	r3, [pc, #168]	; (80095c8 <testTriangles+0xc4>)
 800951e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009522:	0fda      	lsrs	r2, r3, #31
 8009524:	4413      	add	r3, r2
 8009526:	105b      	asrs	r3, r3, #1
 8009528:	b21b      	sxth	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800952e:	2000      	movs	r0, #0
 8009530:	f7fe fd76 	bl	8008020 <Displ_CLS>
    n     = min(cx, cy);
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	4293      	cmp	r3, r2
 800953a:	bfa8      	it	ge
 800953c:	4613      	movge	r3, r2
 800953e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e035      	b.n	80095b2 <testTriangles+0xae>
    	Displ_drawTriangle(
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	b29b      	uxth	r3, r3
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8009556:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	b29a      	uxth	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	b29b      	uxth	r3, r3
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8009564:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	b29b      	uxth	r3, r3
 800956e:	4413      	add	r3, r2
 8009570:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8009572:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	b29b      	uxth	r3, r3
 800957c:	4413      	add	r3, r2
 800957e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8009580:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	b291      	uxth	r1, r2
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	b292      	uxth	r2, r2
 800958a:	440a      	add	r2, r1
 800958c:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800958e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8009590:	68f9      	ldr	r1, [r7, #12]
 8009592:	10c9      	asrs	r1, r1, #3
 8009594:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8009596:	f001 011f 	and.w	r1, r1, #31
 800959a:	b289      	uxth	r1, r1
 800959c:	9102      	str	r1, [sp, #8]
 800959e:	9201      	str	r2, [sp, #4]
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	4633      	mov	r3, r6
 80095a4:	462a      	mov	r2, r5
 80095a6:	4621      	mov	r1, r4
 80095a8:	f7ff f897 	bl	80086da <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3305      	adds	r3, #5
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	dbc5      	blt.n	8009546 <testTriangles+0x42>
    }
}
 80095ba:	bf00      	nop
 80095bc:	bf00      	nop
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c4:	20008ee0 	.word	0x20008ee0
 80095c8:	20008ee2 	.word	0x20008ee2

080095cc <testFilledTriangles>:





void testFilledTriangles() {
 80095cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ce:	b089      	sub	sp, #36	; 0x24
 80095d0:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80095d2:	4b53      	ldr	r3, [pc, #332]	; (8009720 <testFilledTriangles+0x154>)
 80095d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095d8:	0fda      	lsrs	r2, r3, #31
 80095da:	4413      	add	r3, r2
 80095dc:	105b      	asrs	r3, r3, #1
 80095de:	b21b      	sxth	r3, r3
 80095e0:	3b01      	subs	r3, #1
 80095e2:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80095e4:	4b4f      	ldr	r3, [pc, #316]	; (8009724 <testFilledTriangles+0x158>)
 80095e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095ea:	0fda      	lsrs	r2, r3, #31
 80095ec:	4413      	add	r3, r2
 80095ee:	105b      	asrs	r3, r3, #1
 80095f0:	b21b      	sxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7fe fd12 	bl	8008020 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4293      	cmp	r3, r2
 8009602:	bfa8      	it	ge
 8009604:	4613      	movge	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e080      	b.n	800970c <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	b21c      	sxth	r4, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	b29b      	uxth	r3, r3
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	b29b      	uxth	r3, r3
 800961a:	b21d      	sxth	r5, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	b29b      	uxth	r3, r3
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	b29b      	uxth	r3, r3
 8009628:	b21e      	sxth	r6, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	b29b      	uxth	r3, r3
 8009632:	4413      	add	r3, r2
 8009634:	b29b      	uxth	r3, r3
 8009636:	fa0f fc83 	sxth.w	ip, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	b29b      	uxth	r3, r3
 8009642:	4413      	add	r3, r2
 8009644:	b29b      	uxth	r3, r3
 8009646:	b21b      	sxth	r3, r3
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	b291      	uxth	r1, r2
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	b292      	uxth	r2, r2
 8009650:	440a      	add	r2, r1
 8009652:	b292      	uxth	r2, r2
 8009654:	b212      	sxth	r2, r2
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	00c9      	lsls	r1, r1, #3
 800965a:	b209      	sxth	r1, r1
 800965c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8009660:	b208      	sxth	r0, r1
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	10c9      	asrs	r1, r1, #3
 8009666:	b209      	sxth	r1, r1
 8009668:	f001 011f 	and.w	r1, r1, #31
 800966c:	b209      	sxth	r1, r1
 800966e:	4301      	orrs	r1, r0
 8009670:	b209      	sxth	r1, r1
 8009672:	b289      	uxth	r1, r1
 8009674:	9102      	str	r1, [sp, #8]
 8009676:	9201      	str	r2, [sp, #4]
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	4663      	mov	r3, ip
 800967c:	4632      	mov	r2, r6
 800967e:	4629      	mov	r1, r5
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff f864 	bl	800874e <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	b21c      	sxth	r4, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	b29b      	uxth	r3, r3
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	b29b      	uxth	r3, r3
 8009696:	b21d      	sxth	r5, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21e      	sxth	r6, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4413      	add	r3, r2
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	fa0f fc83 	sxth.w	ip, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	4413      	add	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	b21a      	sxth	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	b299      	uxth	r1, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	440b      	add	r3, r1
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	b219      	sxth	r1, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096dc:	f023 0307 	bic.w	r3, r3, #7
 80096e0:	b218      	sxth	r0, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	4303      	orrs	r3, r0
 80096f0:	b21b      	sxth	r3, r3
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	9101      	str	r1, [sp, #4]
 80096f8:	9200      	str	r2, [sp, #0]
 80096fa:	4663      	mov	r3, ip
 80096fc:	4632      	mov	r2, r6
 80096fe:	4629      	mov	r1, r5
 8009700:	4620      	mov	r0, r4
 8009702:	f7fe ffea 	bl	80086da <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3b05      	subs	r3, #5
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b0a      	cmp	r3, #10
 8009710:	f73f af7b 	bgt.w	800960a <testFilledTriangles+0x3e>
    }
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971e:	bf00      	nop
 8009720:	20008ee0 	.word	0x20008ee0
 8009724:	20008ee2 	.word	0x20008ee2

08009728 <testRoundRects>:





void testRoundRects() {
 8009728:	b5b0      	push	{r4, r5, r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800972e:	4b33      	ldr	r3, [pc, #204]	; (80097fc <testRoundRects+0xd4>)
 8009730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009734:	0fda      	lsrs	r2, r3, #31
 8009736:	4413      	add	r3, r2
 8009738:	105b      	asrs	r3, r3, #1
 800973a:	b21b      	sxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8009740:	4b2f      	ldr	r3, [pc, #188]	; (8009800 <testRoundRects+0xd8>)
 8009742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009746:	0fda      	lsrs	r2, r3, #31
 8009748:	4413      	add	r3, r2
 800974a:	105b      	asrs	r3, r3, #1
 800974c:	b21b      	sxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8009752:	2000      	movs	r0, #0
 8009754:	f7fe fc64 	bl	8008020 <Displ_CLS>
    w     = min(_width, _height);
 8009758:	4b29      	ldr	r3, [pc, #164]	; (8009800 <testRoundRects+0xd8>)
 800975a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800975e:	4b27      	ldr	r3, [pc, #156]	; (80097fc <testRoundRects+0xd4>)
 8009760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009764:	4293      	cmp	r3, r2
 8009766:	bfa8      	it	ge
 8009768:	4613      	movge	r3, r2
 800976a:	b21b      	sxth	r3, r3
 800976c:	60fb      	str	r3, [r7, #12]
    red = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8009772:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	fb92 f3f3 	sdiv	r3, r2, r3
 800977c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	e031      	b.n	80097e8 <testRoundRects+0xc0>
        i2 = i / 2;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	0fda      	lsrs	r2, r3, #31
 8009788:	4413      	add	r3, r2
 800978a:	105b      	asrs	r3, r3, #1
 800978c:	607b      	str	r3, [r7, #4]
        red += step;
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	4413      	add	r3, r2
 8009794:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	b29a      	uxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	b29b      	uxth	r3, r3
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	b218      	sxth	r0, r3
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	b219      	sxth	r1, r3
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	b21c      	sxth	r4, r3
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	b21d      	sxth	r5, r3
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	da00      	bge.n	80097c2 <testRoundRects+0x9a>
 80097c0:	3307      	adds	r3, #7
 80097c2:	10db      	asrs	r3, r3, #3
 80097c4:	b21a      	sxth	r2, r3
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80097d0:	f023 0307 	bic.w	r3, r3, #7
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	9200      	str	r2, [sp, #0]
 80097da:	462b      	mov	r3, r5
 80097dc:	4622      	mov	r2, r4
 80097de:	f7ff fa27 	bl	8008c30 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	3306      	adds	r3, #6
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	dbc9      	blt.n	8009784 <testRoundRects+0x5c>
    }
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bdb0      	pop	{r4, r5, r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20008ee0 	.word	0x20008ee0
 8009800:	20008ee2 	.word	0x20008ee2

08009804 <testFilledRoundRects>:





void testFilledRoundRects() {
 8009804:	b5b0      	push	{r4, r5, r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 800980a:	4b36      	ldr	r3, [pc, #216]	; (80098e4 <testFilledRoundRects+0xe0>)
 800980c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009810:	0fda      	lsrs	r2, r3, #31
 8009812:	4413      	add	r3, r2
 8009814:	105b      	asrs	r3, r3, #1
 8009816:	b21b      	sxth	r3, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 800981c:	4b32      	ldr	r3, [pc, #200]	; (80098e8 <testFilledRoundRects+0xe4>)
 800981e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009822:	0fda      	lsrs	r2, r3, #31
 8009824:	4413      	add	r3, r2
 8009826:	105b      	asrs	r3, r3, #1
 8009828:	b21b      	sxth	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800982e:	2000      	movs	r0, #0
 8009830:	f7fe fbf6 	bl	8008020 <Displ_CLS>
    green = 256;
 8009834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009838:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 800983a:	4b2b      	ldr	r3, [pc, #172]	; (80098e8 <testFilledRoundRects+0xe4>)
 800983c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009840:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <testFilledRoundRects+0xe0>)
 8009842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009846:	4293      	cmp	r3, r2
 8009848:	bfa8      	it	ge
 800984a:	4613      	movge	r3, r2
 800984c:	b21b      	sxth	r3, r3
 800984e:	461a      	mov	r2, r3
 8009850:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009854:	fb93 f3f2 	sdiv	r3, r3, r2
 8009858:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 800985a:	4b23      	ldr	r3, [pc, #140]	; (80098e8 <testFilledRoundRects+0xe4>)
 800985c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009860:	4b20      	ldr	r3, [pc, #128]	; (80098e4 <testFilledRoundRects+0xe0>)
 8009862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009866:	4293      	cmp	r3, r2
 8009868:	bfa8      	it	ge
 800986a:	4613      	movge	r3, r2
 800986c:	b21b      	sxth	r3, r3
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e02f      	b.n	80098d2 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	0fda      	lsrs	r2, r3, #31
 8009876:	4413      	add	r3, r2
 8009878:	105b      	asrs	r3, r3, #1
 800987a:	603b      	str	r3, [r7, #0]
        green -= step;
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	b29a      	uxth	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	b29b      	uxth	r3, r3
 8009890:	b218      	sxth	r0, r3
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	b29a      	uxth	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	b29b      	uxth	r3, r3
 800989e:	b219      	sxth	r1, r3
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	b21c      	sxth	r4, r3
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	b21d      	sxth	r5, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da00      	bge.n	80098b0 <testFilledRoundRects+0xac>
 80098ae:	3307      	adds	r3, #7
 80098b0:	10db      	asrs	r3, r3, #3
 80098b2:	b21b      	sxth	r3, r3
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	00d2      	lsls	r2, r2, #3
 80098b8:	b292      	uxth	r2, r2
 80098ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80098be:	b292      	uxth	r2, r2
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	462b      	mov	r3, r5
 80098c6:	4622      	mov	r2, r4
 80098c8:	f7ff faa7 	bl	8008e1a <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	3b06      	subs	r3, #6
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b14      	cmp	r3, #20
 80098d6:	dccc      	bgt.n	8009872 <testFilledRoundRects+0x6e>
    }
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bdb0      	pop	{r4, r5, r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20008ee0 	.word	0x20008ee0
 80098e8:	20008ee2 	.word	0x20008ee2

080098ec <testFillScreen>:




void testFillScreen()
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 80098f0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80098f4:	f7fe fb94 	bl	8008020 <Displ_CLS>
	Displ_CLS(GREEN);
 80098f8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80098fc:	f7fe fb90 	bl	8008020 <Displ_CLS>
	Displ_CLS(BLUE);
 8009900:	201f      	movs	r0, #31
 8009902:	f7fe fb8d 	bl	8008020 <Displ_CLS>
	Displ_CLS(YELLOW);
 8009906:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800990a:	f7fe fb89 	bl	8008020 <Displ_CLS>
	Displ_CLS(BLACK);
 800990e:	2000      	movs	r0, #0
 8009910:	f7fe fb86 	bl	8008020 <Displ_CLS>
}
 8009914:	bf00      	nop
 8009916:	bd80      	pop	{r7, pc}

08009918 <Displ_TestAll>:





void Displ_TestAll (){
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
	testFillScreen();
 800991c:	f7ff ffe6 	bl	80098ec <testFillScreen>
	testLines(CYAN);
 8009920:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8009924:	f7ff fb5c 	bl	8008fe0 <testLines>
	testFastLines(RED, BLUE);
 8009928:	211f      	movs	r1, #31
 800992a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800992e:	f7ff fc59 	bl	80091e4 <testFastLines>
	testRects(GREEN);
 8009932:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8009936:	f7ff fca3 	bl	8009280 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 800993a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800993e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8009942:	f7ff fcf1 	bl	8009328 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8009946:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800994a:	200a      	movs	r0, #10
 800994c:	f7ff fd5a 	bl	8009404 <testFilledCircles>
	testCircles(10, WHITE);
 8009950:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009954:	200a      	movs	r0, #10
 8009956:	f7ff fd93 	bl	8009480 <testCircles>
	testTriangles();
 800995a:	f7ff fdd3 	bl	8009504 <testTriangles>
	testFilledTriangles();
 800995e:	f7ff fe35 	bl	80095cc <testFilledTriangles>
	testRoundRects();
 8009962:	f7ff fee1 	bl	8009728 <testRoundRects>
	testFilledRoundRects();
 8009966:	f7ff ff4d 	bl	8009804 <testFilledRoundRects>
}
 800996a:	bf00      	nop
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <Reset_Handler>:
 8009970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80099a8 <LoopFillZerobss+0x12>
 8009974:	480d      	ldr	r0, [pc, #52]	; (80099ac <LoopFillZerobss+0x16>)
 8009976:	490e      	ldr	r1, [pc, #56]	; (80099b0 <LoopFillZerobss+0x1a>)
 8009978:	4a0e      	ldr	r2, [pc, #56]	; (80099b4 <LoopFillZerobss+0x1e>)
 800997a:	2300      	movs	r3, #0
 800997c:	e002      	b.n	8009984 <LoopCopyDataInit>

0800997e <CopyDataInit>:
 800997e:	58d4      	ldr	r4, [r2, r3]
 8009980:	50c4      	str	r4, [r0, r3]
 8009982:	3304      	adds	r3, #4

08009984 <LoopCopyDataInit>:
 8009984:	18c4      	adds	r4, r0, r3
 8009986:	428c      	cmp	r4, r1
 8009988:	d3f9      	bcc.n	800997e <CopyDataInit>
 800998a:	4a0b      	ldr	r2, [pc, #44]	; (80099b8 <LoopFillZerobss+0x22>)
 800998c:	4c0b      	ldr	r4, [pc, #44]	; (80099bc <LoopFillZerobss+0x26>)
 800998e:	2300      	movs	r3, #0
 8009990:	e001      	b.n	8009996 <LoopFillZerobss>

08009992 <FillZerobss>:
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	3204      	adds	r2, #4

08009996 <LoopFillZerobss>:
 8009996:	42a2      	cmp	r2, r4
 8009998:	d3fb      	bcc.n	8009992 <FillZerobss>
 800999a:	f7fd f8d3 	bl	8006b44 <SystemInit>
 800999e:	f006 fcf1 	bl	8010384 <__libc_init_array>
 80099a2:	f7fb fc53 	bl	800524c <main>
 80099a6:	4770      	bx	lr
 80099a8:	20020000 	.word	0x20020000
 80099ac:	20000000 	.word	0x20000000
 80099b0:	20000250 	.word	0x20000250
 80099b4:	08019380 	.word	0x08019380
 80099b8:	20000250 	.word	0x20000250
 80099bc:	2000a03c 	.word	0x2000a03c

080099c0 <ADC_IRQHandler>:
 80099c0:	e7fe      	b.n	80099c0 <ADC_IRQHandler>
	...

080099c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80099c8:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <HAL_Init+0x40>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <HAL_Init+0x40>)
 80099ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <HAL_Init+0x40>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <HAL_Init+0x40>)
 80099da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80099e0:	4b08      	ldr	r3, [pc, #32]	; (8009a04 <HAL_Init+0x40>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <HAL_Init+0x40>)
 80099e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80099ec:	2003      	movs	r0, #3
 80099ee:	f000 fd53 	bl	800a498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80099f2:	2000      	movs	r0, #0
 80099f4:	f000 f808 	bl	8009a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80099f8:	f7fc fc56 	bl	80062a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	40023c00 	.word	0x40023c00

08009a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009a10:	4b12      	ldr	r3, [pc, #72]	; (8009a5c <HAL_InitTick+0x54>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <HAL_InitTick+0x58>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fd6b 	bl	800a502 <HAL_SYSTICK_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e00e      	b.n	8009a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b0f      	cmp	r3, #15
 8009a3a:	d80a      	bhi.n	8009a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a44:	f000 fd33 	bl	800a4ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009a48:	4a06      	ldr	r2, [pc, #24]	; (8009a64 <HAL_InitTick+0x5c>)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e000      	b.n	8009a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	2000003c 	.word	0x2000003c
 8009a60:	20000070 	.word	0x20000070
 8009a64:	2000006c 	.word	0x2000006c

08009a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <HAL_IncTick+0x20>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <HAL_IncTick+0x24>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4413      	add	r3, r2
 8009a78:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <HAL_IncTick+0x24>)
 8009a7a:	6013      	str	r3, [r2, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20000070 	.word	0x20000070
 8009a8c:	20009eec 	.word	0x20009eec

08009a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
  return uwTick;
 8009a94:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <HAL_GetTick+0x14>)
 8009a96:	681b      	ldr	r3, [r3, #0]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20009eec 	.word	0x20009eec

08009aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ab0:	f7ff ffee 	bl	8009a90 <HAL_GetTick>
 8009ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ac0:	d005      	beq.n	8009ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ac2:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <HAL_Delay+0x44>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009ace:	bf00      	nop
 8009ad0:	f7ff ffde 	bl	8009a90 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d8f7      	bhi.n	8009ad0 <HAL_Delay+0x28>
  {
  }
}
 8009ae0:	bf00      	nop
 8009ae2:	bf00      	nop
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000070 	.word	0x20000070

08009af0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e033      	b.n	8009b6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d109      	bne.n	8009b22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fc fbf2 	bl	80062f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	f003 0310 	and.w	r3, r3, #16
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d118      	bne.n	8009b60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009b36:	f023 0302 	bic.w	r3, r3, #2
 8009b3a:	f043 0202 	orr.w	r2, r3, #2
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa5a 	bl	8009ffc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	f043 0201 	orr.w	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8009b5e:	e001      	b.n	8009b64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_ADC_Start_DMA+0x1e>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e0e9      	b.n	8009d6a <HAL_ADC_Start_DMA+0x1f2>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d018      	beq.n	8009bde <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009bbc:	4b6d      	ldr	r3, [pc, #436]	; (8009d74 <HAL_ADC_Start_DMA+0x1fc>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a6d      	ldr	r2, [pc, #436]	; (8009d78 <HAL_ADC_Start_DMA+0x200>)
 8009bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc6:	0c9a      	lsrs	r2, r3, #18
 8009bc8:	4613      	mov	r3, r2
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	4413      	add	r3, r2
 8009bce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009bd0:	e002      	b.n	8009bd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1f9      	bne.n	8009bd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bec:	d107      	bne.n	8009bfe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	f040 80a1 	bne.w	8009d50 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009c16:	f023 0301 	bic.w	r3, r3, #1
 8009c1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009c38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4c:	d106      	bne.n	8009c5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c52:	f023 0206 	bic.w	r2, r3, #6
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	645a      	str	r2, [r3, #68]	; 0x44
 8009c5a:	e002      	b.n	8009c62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009c6a:	4b44      	ldr	r3, [pc, #272]	; (8009d7c <HAL_ADC_Start_DMA+0x204>)
 8009c6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c72:	4a43      	ldr	r2, [pc, #268]	; (8009d80 <HAL_ADC_Start_DMA+0x208>)
 8009c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	4a42      	ldr	r2, [pc, #264]	; (8009d84 <HAL_ADC_Start_DMA+0x20c>)
 8009c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	4a41      	ldr	r2, [pc, #260]	; (8009d88 <HAL_ADC_Start_DMA+0x210>)
 8009c84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009c8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009c9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689a      	ldr	r2, [r3, #8]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	334c      	adds	r3, #76	; 0x4c
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f000 fcda 	bl	800a678 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f003 031f 	and.w	r3, r3, #31
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d12a      	bne.n	8009d26 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a2d      	ldr	r2, [pc, #180]	; (8009d8c <HAL_ADC_Start_DMA+0x214>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d015      	beq.n	8009d06 <HAL_ADC_Start_DMA+0x18e>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a2c      	ldr	r2, [pc, #176]	; (8009d90 <HAL_ADC_Start_DMA+0x218>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d105      	bne.n	8009cf0 <HAL_ADC_Start_DMA+0x178>
 8009ce4:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <HAL_ADC_Start_DMA+0x204>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f003 031f 	and.w	r3, r3, #31
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00a      	beq.n	8009d06 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a27      	ldr	r2, [pc, #156]	; (8009d94 <HAL_ADC_Start_DMA+0x21c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d136      	bne.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
 8009cfa:	4b20      	ldr	r3, [pc, #128]	; (8009d7c <HAL_ADC_Start_DMA+0x204>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f003 0310 	and.w	r3, r3, #16
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d130      	bne.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d129      	bne.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009d22:	609a      	str	r2, [r3, #8]
 8009d24:	e020      	b.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a18      	ldr	r2, [pc, #96]	; (8009d8c <HAL_ADC_Start_DMA+0x214>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d11b      	bne.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d114      	bne.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009d4c:	609a      	str	r2, [r3, #8]
 8009d4e:	e00b      	b.n	8009d68 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d54:	f043 0210 	orr.w	r2, r3, #16
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d60:	f043 0201 	orr.w	r2, r3, #1
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	2000003c 	.word	0x2000003c
 8009d78:	431bde83 	.word	0x431bde83
 8009d7c:	40012300 	.word	0x40012300
 8009d80:	0800a1f5 	.word	0x0800a1f5
 8009d84:	0800a2af 	.word	0x0800a2af
 8009d88:	0800a2cb 	.word	0x0800a2cb
 8009d8c:	40012000 	.word	0x40012000
 8009d90:	40012100 	.word	0x40012100
 8009d94:	40012200 	.word	0x40012200

08009d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d101      	bne.n	8009db4 <HAL_ADC_ConfigChannel+0x1c>
 8009db0:	2302      	movs	r3, #2
 8009db2:	e113      	b.n	8009fdc <HAL_ADC_ConfigChannel+0x244>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d925      	bls.n	8009e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68d9      	ldr	r1, [r3, #12]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4413      	add	r3, r2
 8009dd8:	3b1e      	subs	r3, #30
 8009dda:	2207      	movs	r2, #7
 8009ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8009de0:	43da      	mvns	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	400a      	ands	r2, r1
 8009de8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68d9      	ldr	r1, [r3, #12]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	4403      	add	r3, r0
 8009e02:	3b1e      	subs	r3, #30
 8009e04:	409a      	lsls	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	60da      	str	r2, [r3, #12]
 8009e0e:	e022      	b.n	8009e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6919      	ldr	r1, [r3, #16]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4613      	mov	r3, r2
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	4413      	add	r3, r2
 8009e24:	2207      	movs	r2, #7
 8009e26:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2a:	43da      	mvns	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	400a      	ands	r2, r1
 8009e32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6919      	ldr	r1, [r3, #16]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	4618      	mov	r0, r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	4403      	add	r3, r0
 8009e4c:	409a      	lsls	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2b06      	cmp	r3, #6
 8009e5c:	d824      	bhi.n	8009ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	3b05      	subs	r3, #5
 8009e70:	221f      	movs	r2, #31
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	43da      	mvns	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	400a      	ands	r2, r1
 8009e7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	3b05      	subs	r3, #5
 8009e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8009ea6:	e04c      	b.n	8009f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	2b0c      	cmp	r3, #12
 8009eae:	d824      	bhi.n	8009efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	3b23      	subs	r3, #35	; 0x23
 8009ec2:	221f      	movs	r2, #31
 8009ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec8:	43da      	mvns	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	400a      	ands	r2, r1
 8009ed0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	4618      	mov	r0, r3
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	3b23      	subs	r3, #35	; 0x23
 8009eec:	fa00 f203 	lsl.w	r2, r0, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8009ef8:	e023      	b.n	8009f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	3b41      	subs	r3, #65	; 0x41
 8009f0c:	221f      	movs	r2, #31
 8009f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f12:	43da      	mvns	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	400a      	ands	r2, r1
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	4618      	mov	r0, r3
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	3b41      	subs	r3, #65	; 0x41
 8009f36:	fa00 f203 	lsl.w	r2, r0, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009f42:	4b29      	ldr	r3, [pc, #164]	; (8009fe8 <HAL_ADC_ConfigChannel+0x250>)
 8009f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a28      	ldr	r2, [pc, #160]	; (8009fec <HAL_ADC_ConfigChannel+0x254>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d10f      	bne.n	8009f70 <HAL_ADC_ConfigChannel+0x1d8>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b12      	cmp	r3, #18
 8009f56:	d10b      	bne.n	8009f70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1d      	ldr	r2, [pc, #116]	; (8009fec <HAL_ADC_ConfigChannel+0x254>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d12b      	bne.n	8009fd2 <HAL_ADC_ConfigChannel+0x23a>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ff0 <HAL_ADC_ConfigChannel+0x258>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d003      	beq.n	8009f8c <HAL_ADC_ConfigChannel+0x1f4>
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b11      	cmp	r3, #17
 8009f8a:	d122      	bne.n	8009fd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a11      	ldr	r2, [pc, #68]	; (8009ff0 <HAL_ADC_ConfigChannel+0x258>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d111      	bne.n	8009fd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <HAL_ADC_ConfigChannel+0x25c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a11      	ldr	r2, [pc, #68]	; (8009ff8 <HAL_ADC_ConfigChannel+0x260>)
 8009fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb8:	0c9a      	lsrs	r2, r3, #18
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009fc4:	e002      	b.n	8009fcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f9      	bne.n	8009fc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	40012300 	.word	0x40012300
 8009fec:	40012000 	.word	0x40012000
 8009ff0:	10000012 	.word	0x10000012
 8009ff4:	2000003c 	.word	0x2000003c
 8009ff8:	431bde83 	.word	0x431bde83

08009ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a004:	4b79      	ldr	r3, [pc, #484]	; (800a1ec <ADC_Init+0x1f0>)
 800a006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	431a      	orrs	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6859      	ldr	r1, [r3, #4]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	021a      	lsls	r2, r3, #8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6859      	ldr	r1, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6899      	ldr	r1, [r3, #8]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68da      	ldr	r2, [r3, #12]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	4a58      	ldr	r2, [pc, #352]	; (800a1f0 <ADC_Init+0x1f4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d022      	beq.n	800a0da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	689a      	ldr	r2, [r3, #8]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a0a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6899      	ldr	r1, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a0c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6899      	ldr	r1, [r3, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	609a      	str	r2, [r3, #8]
 800a0d8:	e00f      	b.n	800a0fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a0e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a0f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0202 	bic.w	r2, r2, #2
 800a108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6899      	ldr	r1, [r3, #8]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	7e1b      	ldrb	r3, [r3, #24]
 800a114:	005a      	lsls	r2, r3, #1
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01b      	beq.n	800a160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6859      	ldr	r1, [r3, #4]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	3b01      	subs	r3, #1
 800a154:	035a      	lsls	r2, r3, #13
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	e007      	b.n	800a170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a16e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	051a      	lsls	r2, r3, #20
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a1a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6899      	ldr	r1, [r3, #8]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1b2:	025a      	lsls	r2, r3, #9
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689a      	ldr	r2, [r3, #8]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6899      	ldr	r1, [r3, #8]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	029a      	lsls	r2, r3, #10
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	609a      	str	r2, [r3, #8]
}
 800a1e0:	bf00      	nop
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	40012300 	.word	0x40012300
 800a1f0:	0f000001 	.word	0x0f000001

0800a1f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a200:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d13c      	bne.n	800a288 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d12b      	bne.n	800a280 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d127      	bne.n	800a280 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d119      	bne.n	800a280 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0220 	bic.w	r2, r2, #32
 800a25a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d105      	bne.n	800a280 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a278:	f043 0201 	orr.w	r2, r3, #1
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7fb fee7 	bl	8006054 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a286:	e00e      	b.n	800a2a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28c:	f003 0310 	and.w	r3, r3, #16
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7fb ff1d 	bl	80060d4 <HAL_ADC_ErrorCallback>
}
 800a29a:	e004      	b.n	800a2a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b084      	sub	sp, #16
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7fb fee9 	bl	8006094 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2240      	movs	r2, #64	; 0x40
 800a2dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e2:	f043 0204 	orr.w	r2, r3, #4
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7fb fef2 	bl	80060d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a308:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <__NVIC_SetPriorityGrouping+0x44>)
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a314:	4013      	ands	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a32a:	4a04      	ldr	r2, [pc, #16]	; (800a33c <__NVIC_SetPriorityGrouping+0x44>)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	60d3      	str	r3, [r2, #12]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	e000ed00 	.word	0xe000ed00

0800a340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <__NVIC_GetPriorityGrouping+0x18>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	0a1b      	lsrs	r3, r3, #8
 800a34a:	f003 0307 	and.w	r3, r3, #7
}
 800a34e:	4618      	mov	r0, r3
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	e000ed00 	.word	0xe000ed00

0800a35c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	db0b      	blt.n	800a386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	f003 021f 	and.w	r2, r3, #31
 800a374:	4907      	ldr	r1, [pc, #28]	; (800a394 <__NVIC_EnableIRQ+0x38>)
 800a376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37a:	095b      	lsrs	r3, r3, #5
 800a37c:	2001      	movs	r0, #1
 800a37e:	fa00 f202 	lsl.w	r2, r0, r2
 800a382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	e000e100 	.word	0xe000e100

0800a398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	db0a      	blt.n	800a3c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	490c      	ldr	r1, [pc, #48]	; (800a3e4 <__NVIC_SetPriority+0x4c>)
 800a3b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b6:	0112      	lsls	r2, r2, #4
 800a3b8:	b2d2      	uxtb	r2, r2
 800a3ba:	440b      	add	r3, r1
 800a3bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a3c0:	e00a      	b.n	800a3d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	4908      	ldr	r1, [pc, #32]	; (800a3e8 <__NVIC_SetPriority+0x50>)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	3b04      	subs	r3, #4
 800a3d0:	0112      	lsls	r2, r2, #4
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	440b      	add	r3, r1
 800a3d6:	761a      	strb	r2, [r3, #24]
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	e000e100 	.word	0xe000e100
 800a3e8:	e000ed00 	.word	0xe000ed00

0800a3ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b089      	sub	sp, #36	; 0x24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	f1c3 0307 	rsb	r3, r3, #7
 800a406:	2b04      	cmp	r3, #4
 800a408:	bf28      	it	cs
 800a40a:	2304      	movcs	r3, #4
 800a40c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	3304      	adds	r3, #4
 800a412:	2b06      	cmp	r3, #6
 800a414:	d902      	bls.n	800a41c <NVIC_EncodePriority+0x30>
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	3b03      	subs	r3, #3
 800a41a:	e000      	b.n	800a41e <NVIC_EncodePriority+0x32>
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	fa02 f303 	lsl.w	r3, r2, r3
 800a42a:	43da      	mvns	r2, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	401a      	ands	r2, r3
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	fa01 f303 	lsl.w	r3, r1, r3
 800a43e:	43d9      	mvns	r1, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a444:	4313      	orrs	r3, r2
         );
}
 800a446:	4618      	mov	r0, r3
 800a448:	3724      	adds	r7, #36	; 0x24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
	...

0800a454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3b01      	subs	r3, #1
 800a460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a464:	d301      	bcc.n	800a46a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a466:	2301      	movs	r3, #1
 800a468:	e00f      	b.n	800a48a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a46a:	4a0a      	ldr	r2, [pc, #40]	; (800a494 <SysTick_Config+0x40>)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3b01      	subs	r3, #1
 800a470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a472:	210f      	movs	r1, #15
 800a474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a478:	f7ff ff8e 	bl	800a398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a47c:	4b05      	ldr	r3, [pc, #20]	; (800a494 <SysTick_Config+0x40>)
 800a47e:	2200      	movs	r2, #0
 800a480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a482:	4b04      	ldr	r3, [pc, #16]	; (800a494 <SysTick_Config+0x40>)
 800a484:	2207      	movs	r2, #7
 800a486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	e000e010 	.word	0xe000e010

0800a498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ff29 	bl	800a2f8 <__NVIC_SetPriorityGrouping>
}
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b086      	sub	sp, #24
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	607a      	str	r2, [r7, #4]
 800a4ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a4c0:	f7ff ff3e 	bl	800a340 <__NVIC_GetPriorityGrouping>
 800a4c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	6978      	ldr	r0, [r7, #20]
 800a4cc:	f7ff ff8e 	bl	800a3ec <NVIC_EncodePriority>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff ff5d 	bl	800a398 <__NVIC_SetPriority>
}
 800a4de:	bf00      	nop
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a4f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff ff31 	bl	800a35c <__NVIC_EnableIRQ>
}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7ff ffa2 	bl	800a454 <SysTick_Config>
 800a510:	4603      	mov	r3, r0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a528:	f7ff fab2 	bl	8009a90 <HAL_GetTick>
 800a52c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e099      	b.n	800a66c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0201 	bic.w	r2, r2, #1
 800a556:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a558:	e00f      	b.n	800a57a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a55a:	f7ff fa99 	bl	8009a90 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b05      	cmp	r3, #5
 800a566:	d908      	bls.n	800a57a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2220      	movs	r2, #32
 800a56c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2203      	movs	r2, #3
 800a572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e078      	b.n	800a66c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1e8      	bne.n	800a55a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	4b38      	ldr	r3, [pc, #224]	; (800a674 <HAL_DMA_Init+0x158>)
 800a594:	4013      	ands	r3, r2
 800a596:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a5a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a5b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a5be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d107      	bne.n	800a5e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	4313      	orrs	r3, r2
 800a604:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d117      	bne.n	800a63e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00e      	beq.n	800a63e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fb01 	bl	800ac28 <DMA_CheckFifoParam>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2240      	movs	r2, #64	; 0x40
 800a630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a63a:	2301      	movs	r3, #1
 800a63c:	e016      	b.n	800a66c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fab8 	bl	800abbc <DMA_CalcBaseAndBitshift>
 800a64c:	4603      	mov	r3, r0
 800a64e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a654:	223f      	movs	r2, #63	; 0x3f
 800a656:	409a      	lsls	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	f010803f 	.word	0xf010803f

0800a678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <HAL_DMA_Start_IT+0x26>
 800a69a:	2302      	movs	r3, #2
 800a69c:	e040      	b.n	800a720 <HAL_DMA_Start_IT+0xa8>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d12f      	bne.n	800a712 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 fa4a 	bl	800ab60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d0:	223f      	movs	r2, #63	; 0x3f
 800a6d2:	409a      	lsls	r2, r3
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0216 	orr.w	r2, r2, #22
 800a6e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0208 	orr.w	r2, r2, #8
 800a6fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e005      	b.n	800a71e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a71a:	2302      	movs	r3, #2
 800a71c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a734:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a736:	f7ff f9ab 	bl	8009a90 <HAL_GetTick>
 800a73a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d008      	beq.n	800a75a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e052      	b.n	800a800 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0216 	bic.w	r2, r2, #22
 800a768:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695a      	ldr	r2, [r3, #20]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a778:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d103      	bne.n	800a78a <HAL_DMA_Abort+0x62>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a786:	2b00      	cmp	r3, #0
 800a788:	d007      	beq.n	800a79a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0208 	bic.w	r2, r2, #8
 800a798:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f022 0201 	bic.w	r2, r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7aa:	e013      	b.n	800a7d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a7ac:	f7ff f970 	bl	8009a90 <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b05      	cmp	r3, #5
 800a7b8:	d90c      	bls.n	800a7d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2203      	movs	r2, #3
 800a7c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e015      	b.n	800a800 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e4      	bne.n	800a7ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e6:	223f      	movs	r2, #63	; 0x3f
 800a7e8:	409a      	lsls	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d004      	beq.n	800a826 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2280      	movs	r2, #128	; 0x80
 800a820:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e00c      	b.n	800a840 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2205      	movs	r2, #5
 800a82a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0201 	bic.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a858:	4b8e      	ldr	r3, [pc, #568]	; (800aa94 <HAL_DMA_IRQHandler+0x248>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a8e      	ldr	r2, [pc, #568]	; (800aa98 <HAL_DMA_IRQHandler+0x24c>)
 800a85e:	fba2 2303 	umull	r2, r3, r2, r3
 800a862:	0a9b      	lsrs	r3, r3, #10
 800a864:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a876:	2208      	movs	r2, #8
 800a878:	409a      	lsls	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4013      	ands	r3, r2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01a      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d013      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0204 	bic.w	r2, r2, #4
 800a89e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b0:	f043 0201 	orr.w	r2, r3, #1
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8bc:	2201      	movs	r2, #1
 800a8be:	409a      	lsls	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d012      	beq.n	800a8ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8da:	2201      	movs	r2, #1
 800a8dc:	409a      	lsls	r2, r3
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	f043 0202 	orr.w	r2, r3, #2
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	409a      	lsls	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d012      	beq.n	800a924 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00b      	beq.n	800a924 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a910:	2204      	movs	r2, #4
 800a912:	409a      	lsls	r2, r3
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91c:	f043 0204 	orr.w	r2, r3, #4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a928:	2210      	movs	r2, #16
 800a92a:	409a      	lsls	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4013      	ands	r3, r2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d043      	beq.n	800a9bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d03c      	beq.n	800a9bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a946:	2210      	movs	r2, #16
 800a948:	409a      	lsls	r2, r3
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d018      	beq.n	800a98e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d108      	bne.n	800a97c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d024      	beq.n	800a9bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
 800a97a:	e01f      	b.n	800a9bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a980:	2b00      	cmp	r3, #0
 800a982:	d01b      	beq.n	800a9bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	4798      	blx	r3
 800a98c:	e016      	b.n	800a9bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d107      	bne.n	800a9ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0208 	bic.w	r2, r2, #8
 800a9aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	409a      	lsls	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 808f 	beq.w	800aaec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0310 	and.w	r3, r3, #16
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 8087 	beq.w	800aaec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	409a      	lsls	r2, r3
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	d136      	bne.n	800aa64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f022 0216 	bic.w	r2, r2, #22
 800aa04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695a      	ldr	r2, [r3, #20]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <HAL_DMA_IRQHandler+0x1da>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d007      	beq.n	800aa36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0208 	bic.w	r2, r2, #8
 800aa34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3a:	223f      	movs	r2, #63	; 0x3f
 800aa3c:	409a      	lsls	r2, r3
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d07e      	beq.n	800ab58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	4798      	blx	r3
        }
        return;
 800aa62:	e079      	b.n	800ab58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01d      	beq.n	800aaae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10d      	bne.n	800aa9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d031      	beq.n	800aaec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	4798      	blx	r3
 800aa90:	e02c      	b.n	800aaec <HAL_DMA_IRQHandler+0x2a0>
 800aa92:	bf00      	nop
 800aa94:	2000003c 	.word	0x2000003c
 800aa98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d023      	beq.n	800aaec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	4798      	blx	r3
 800aaac:	e01e      	b.n	800aaec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10f      	bne.n	800aadc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f022 0210 	bic.w	r2, r2, #16
 800aaca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d032      	beq.n	800ab5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d022      	beq.n	800ab46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2205      	movs	r2, #5
 800ab04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 0201 	bic.w	r2, r2, #1
 800ab16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	60bb      	str	r3, [r7, #8]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d307      	bcc.n	800ab34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f2      	bne.n	800ab18 <HAL_DMA_IRQHandler+0x2cc>
 800ab32:	e000      	b.n	800ab36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ab34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	4798      	blx	r3
 800ab56:	e000      	b.n	800ab5a <HAL_DMA_IRQHandler+0x30e>
        return;
 800ab58:	bf00      	nop
    }
  }
}
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	2b40      	cmp	r3, #64	; 0x40
 800ab8c:	d108      	bne.n	800aba0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ab9e:	e007      	b.n	800abb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	60da      	str	r2, [r3, #12]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	3b10      	subs	r3, #16
 800abcc:	4a14      	ldr	r2, [pc, #80]	; (800ac20 <DMA_CalcBaseAndBitshift+0x64>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	091b      	lsrs	r3, r3, #4
 800abd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800abd6:	4a13      	ldr	r2, [pc, #76]	; (800ac24 <DMA_CalcBaseAndBitshift+0x68>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d909      	bls.n	800abfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	1d1a      	adds	r2, r3, #4
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	659a      	str	r2, [r3, #88]	; 0x58
 800abfc:	e007      	b.n	800ac0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	aaaaaaab 	.word	0xaaaaaaab
 800ac24:	08018fd8 	.word	0x08018fd8

0800ac28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d11f      	bne.n	800ac82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d856      	bhi.n	800acf6 <DMA_CheckFifoParam+0xce>
 800ac48:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <DMA_CheckFifoParam+0x28>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800ac61 	.word	0x0800ac61
 800ac54:	0800ac73 	.word	0x0800ac73
 800ac58:	0800ac61 	.word	0x0800ac61
 800ac5c:	0800acf7 	.word	0x0800acf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d046      	beq.n	800acfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac70:	e043      	b.n	800acfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ac7a:	d140      	bne.n	800acfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac80:	e03d      	b.n	800acfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac8a:	d121      	bne.n	800acd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d837      	bhi.n	800ad02 <DMA_CheckFifoParam+0xda>
 800ac92:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <DMA_CheckFifoParam+0x70>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800aca9 	.word	0x0800aca9
 800ac9c:	0800acaf 	.word	0x0800acaf
 800aca0:	0800aca9 	.word	0x0800aca9
 800aca4:	0800acc1 	.word	0x0800acc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	73fb      	strb	r3, [r7, #15]
      break;
 800acac:	e030      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d025      	beq.n	800ad06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800acbe:	e022      	b.n	800ad06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800acc8:	d11f      	bne.n	800ad0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800acce:	e01c      	b.n	800ad0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d903      	bls.n	800acde <DMA_CheckFifoParam+0xb6>
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d003      	beq.n	800ace4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800acdc:	e018      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	73fb      	strb	r3, [r7, #15]
      break;
 800ace2:	e015      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00e      	beq.n	800ad0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
      break;
 800acf4:	e00b      	b.n	800ad0e <DMA_CheckFifoParam+0xe6>
      break;
 800acf6:	bf00      	nop
 800acf8:	e00a      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      break;
 800acfa:	bf00      	nop
 800acfc:	e008      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      break;
 800acfe:	bf00      	nop
 800ad00:	e006      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      break;
 800ad02:	bf00      	nop
 800ad04:	e004      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      break;
 800ad06:	bf00      	nop
 800ad08:	e002      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      break;   
 800ad0a:	bf00      	nop
 800ad0c:	e000      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
      break;
 800ad0e:	bf00      	nop
    }
  } 
  
  return status; 
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop

0800ad20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b089      	sub	sp, #36	; 0x24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ad36:	2300      	movs	r3, #0
 800ad38:	61fb      	str	r3, [r7, #28]
 800ad3a:	e165      	b.n	800b008 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	fa02 f303 	lsl.w	r3, r2, r3
 800ad44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	f040 8154 	bne.w	800b002 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d005      	beq.n	800ad72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d130      	bne.n	800add4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad82:	43db      	mvns	r3, r3
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	4013      	ands	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	fa02 f303 	lsl.w	r3, r2, r3
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ada8:	2201      	movs	r2, #1
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	fa02 f303 	lsl.w	r3, r2, r3
 800adb0:	43db      	mvns	r3, r3
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	4013      	ands	r3, r2
 800adb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	091b      	lsrs	r3, r3, #4
 800adbe:	f003 0201 	and.w	r2, r3, #1
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	fa02 f303 	lsl.w	r3, r2, r3
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	4313      	orrs	r3, r2
 800adcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f003 0303 	and.w	r3, r3, #3
 800addc:	2b03      	cmp	r3, #3
 800adde:	d017      	beq.n	800ae10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	2203      	movs	r2, #3
 800adec:	fa02 f303 	lsl.w	r3, r2, r3
 800adf0:	43db      	mvns	r3, r3
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	4013      	ands	r3, r2
 800adf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	fa02 f303 	lsl.w	r3, r2, r3
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f003 0303 	and.w	r3, r3, #3
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d123      	bne.n	800ae64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	08da      	lsrs	r2, r3, #3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3208      	adds	r2, #8
 800ae24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	f003 0307 	and.w	r3, r3, #7
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	220f      	movs	r2, #15
 800ae34:	fa02 f303 	lsl.w	r3, r2, r3
 800ae38:	43db      	mvns	r3, r3
 800ae3a:	69ba      	ldr	r2, [r7, #24]
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	08da      	lsrs	r2, r3, #3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3208      	adds	r2, #8
 800ae5e:	69b9      	ldr	r1, [r7, #24]
 800ae60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	2203      	movs	r2, #3
 800ae70:	fa02 f303 	lsl.w	r3, r2, r3
 800ae74:	43db      	mvns	r3, r3
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f003 0203 	and.w	r2, r3, #3
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 80ae 	beq.w	800b002 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	4b5d      	ldr	r3, [pc, #372]	; (800b020 <HAL_GPIO_Init+0x300>)
 800aeac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeae:	4a5c      	ldr	r2, [pc, #368]	; (800b020 <HAL_GPIO_Init+0x300>)
 800aeb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aeb4:	6453      	str	r3, [r2, #68]	; 0x44
 800aeb6:	4b5a      	ldr	r3, [pc, #360]	; (800b020 <HAL_GPIO_Init+0x300>)
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aec2:	4a58      	ldr	r2, [pc, #352]	; (800b024 <HAL_GPIO_Init+0x304>)
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	089b      	lsrs	r3, r3, #2
 800aec8:	3302      	adds	r3, #2
 800aeca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	220f      	movs	r2, #15
 800aeda:	fa02 f303 	lsl.w	r3, r2, r3
 800aede:	43db      	mvns	r3, r3
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	4013      	ands	r3, r2
 800aee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a4f      	ldr	r2, [pc, #316]	; (800b028 <HAL_GPIO_Init+0x308>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d025      	beq.n	800af3a <HAL_GPIO_Init+0x21a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a4e      	ldr	r2, [pc, #312]	; (800b02c <HAL_GPIO_Init+0x30c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d01f      	beq.n	800af36 <HAL_GPIO_Init+0x216>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a4d      	ldr	r2, [pc, #308]	; (800b030 <HAL_GPIO_Init+0x310>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d019      	beq.n	800af32 <HAL_GPIO_Init+0x212>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a4c      	ldr	r2, [pc, #304]	; (800b034 <HAL_GPIO_Init+0x314>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d013      	beq.n	800af2e <HAL_GPIO_Init+0x20e>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a4b      	ldr	r2, [pc, #300]	; (800b038 <HAL_GPIO_Init+0x318>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d00d      	beq.n	800af2a <HAL_GPIO_Init+0x20a>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a4a      	ldr	r2, [pc, #296]	; (800b03c <HAL_GPIO_Init+0x31c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d007      	beq.n	800af26 <HAL_GPIO_Init+0x206>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a49      	ldr	r2, [pc, #292]	; (800b040 <HAL_GPIO_Init+0x320>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d101      	bne.n	800af22 <HAL_GPIO_Init+0x202>
 800af1e:	2306      	movs	r3, #6
 800af20:	e00c      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af22:	2307      	movs	r3, #7
 800af24:	e00a      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af26:	2305      	movs	r3, #5
 800af28:	e008      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af2a:	2304      	movs	r3, #4
 800af2c:	e006      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af2e:	2303      	movs	r3, #3
 800af30:	e004      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af32:	2302      	movs	r3, #2
 800af34:	e002      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af36:	2301      	movs	r3, #1
 800af38:	e000      	b.n	800af3c <HAL_GPIO_Init+0x21c>
 800af3a:	2300      	movs	r3, #0
 800af3c:	69fa      	ldr	r2, [r7, #28]
 800af3e:	f002 0203 	and.w	r2, r2, #3
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	4093      	lsls	r3, r2
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	4313      	orrs	r3, r2
 800af4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af4c:	4935      	ldr	r1, [pc, #212]	; (800b024 <HAL_GPIO_Init+0x304>)
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	089b      	lsrs	r3, r3, #2
 800af52:	3302      	adds	r3, #2
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800af5a:	4b3a      	ldr	r3, [pc, #232]	; (800b044 <HAL_GPIO_Init+0x324>)
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	43db      	mvns	r3, r3
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	4013      	ands	r3, r2
 800af68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800af7e:	4a31      	ldr	r2, [pc, #196]	; (800b044 <HAL_GPIO_Init+0x324>)
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800af84:	4b2f      	ldr	r3, [pc, #188]	; (800b044 <HAL_GPIO_Init+0x324>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	43db      	mvns	r3, r3
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	4013      	ands	r3, r2
 800af92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800afa8:	4a26      	ldr	r2, [pc, #152]	; (800b044 <HAL_GPIO_Init+0x324>)
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800afae:	4b25      	ldr	r3, [pc, #148]	; (800b044 <HAL_GPIO_Init+0x324>)
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	43db      	mvns	r3, r3
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	4013      	ands	r3, r2
 800afbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	4313      	orrs	r3, r2
 800afd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800afd2:	4a1c      	ldr	r2, [pc, #112]	; (800b044 <HAL_GPIO_Init+0x324>)
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800afd8:	4b1a      	ldr	r3, [pc, #104]	; (800b044 <HAL_GPIO_Init+0x324>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	4013      	ands	r3, r2
 800afe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800aff4:	69ba      	ldr	r2, [r7, #24]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	4313      	orrs	r3, r2
 800affa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800affc:	4a11      	ldr	r2, [pc, #68]	; (800b044 <HAL_GPIO_Init+0x324>)
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	3301      	adds	r3, #1
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	2b0f      	cmp	r3, #15
 800b00c:	f67f ae96 	bls.w	800ad3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b010:	bf00      	nop
 800b012:	bf00      	nop
 800b014:	3724      	adds	r7, #36	; 0x24
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	40023800 	.word	0x40023800
 800b024:	40013800 	.word	0x40013800
 800b028:	40020000 	.word	0x40020000
 800b02c:	40020400 	.word	0x40020400
 800b030:	40020800 	.word	0x40020800
 800b034:	40020c00 	.word	0x40020c00
 800b038:	40021000 	.word	0x40021000
 800b03c:	40021400 	.word	0x40021400
 800b040:	40021800 	.word	0x40021800
 800b044:	40013c00 	.word	0x40013c00

0800b048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	887b      	ldrh	r3, [r7, #2]
 800b05a:	4013      	ands	r3, r2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
 800b064:	e001      	b.n	800b06a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	807b      	strh	r3, [r7, #2]
 800b084:	4613      	mov	r3, r2
 800b086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b088:	787b      	ldrb	r3, [r7, #1]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b08e:	887a      	ldrh	r2, [r7, #2]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b094:	e003      	b.n	800b09e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b096:	887b      	ldrh	r3, [r7, #2]
 800b098:	041a      	lsls	r2, r3, #16
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	619a      	str	r2, [r3, #24]
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0bc:	887a      	ldrh	r2, [r7, #2]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	041a      	lsls	r2, r3, #16
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	43d9      	mvns	r1, r3
 800b0c8:	887b      	ldrh	r3, [r7, #2]
 800b0ca:	400b      	ands	r3, r1
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	619a      	str	r2, [r3, #24]
}
 800b0d2:	bf00      	nop
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b0ea:	4b08      	ldr	r3, [pc, #32]	; (800b10c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b0ec:	695a      	ldr	r2, [r3, #20]
 800b0ee:	88fb      	ldrh	r3, [r7, #6]
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d006      	beq.n	800b104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b0f6:	4a05      	ldr	r2, [pc, #20]	; (800b10c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fa ff8a 	bl	8006018 <HAL_GPIO_EXTI_Callback>
  }
}
 800b104:	bf00      	nop
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	40013c00 	.word	0x40013c00

0800b110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e12b      	b.n	800b37a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7fb f9f2 	bl	8006520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2224      	movs	r2, #36	; 0x24
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f022 0201 	bic.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b174:	f001 f9fc 	bl	800c570 <HAL_RCC_GetPCLK1Freq>
 800b178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4a81      	ldr	r2, [pc, #516]	; (800b384 <HAL_I2C_Init+0x274>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d807      	bhi.n	800b194 <HAL_I2C_Init+0x84>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	4a80      	ldr	r2, [pc, #512]	; (800b388 <HAL_I2C_Init+0x278>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	bf94      	ite	ls
 800b18c:	2301      	movls	r3, #1
 800b18e:	2300      	movhi	r3, #0
 800b190:	b2db      	uxtb	r3, r3
 800b192:	e006      	b.n	800b1a2 <HAL_I2C_Init+0x92>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4a7d      	ldr	r2, [pc, #500]	; (800b38c <HAL_I2C_Init+0x27c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	bf94      	ite	ls
 800b19c:	2301      	movls	r3, #1
 800b19e:	2300      	movhi	r3, #0
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e0e7      	b.n	800b37a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	4a78      	ldr	r2, [pc, #480]	; (800b390 <HAL_I2C_Init+0x280>)
 800b1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b2:	0c9b      	lsrs	r3, r3, #18
 800b1b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	4a6a      	ldr	r2, [pc, #424]	; (800b384 <HAL_I2C_Init+0x274>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d802      	bhi.n	800b1e4 <HAL_I2C_Init+0xd4>
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	e009      	b.n	800b1f8 <HAL_I2C_Init+0xe8>
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b1ea:	fb02 f303 	mul.w	r3, r2, r3
 800b1ee:	4a69      	ldr	r2, [pc, #420]	; (800b394 <HAL_I2C_Init+0x284>)
 800b1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f4:	099b      	lsrs	r3, r3, #6
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	6812      	ldr	r2, [r2, #0]
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b20a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	495c      	ldr	r1, [pc, #368]	; (800b384 <HAL_I2C_Init+0x274>)
 800b214:	428b      	cmp	r3, r1
 800b216:	d819      	bhi.n	800b24c <HAL_I2C_Init+0x13c>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	1e59      	subs	r1, r3, #1
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	fbb1 f3f3 	udiv	r3, r1, r3
 800b226:	1c59      	adds	r1, r3, #1
 800b228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b22c:	400b      	ands	r3, r1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00a      	beq.n	800b248 <HAL_I2C_Init+0x138>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	1e59      	subs	r1, r3, #1
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b240:	3301      	adds	r3, #1
 800b242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b246:	e051      	b.n	800b2ec <HAL_I2C_Init+0x1dc>
 800b248:	2304      	movs	r3, #4
 800b24a:	e04f      	b.n	800b2ec <HAL_I2C_Init+0x1dc>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d111      	bne.n	800b278 <HAL_I2C_Init+0x168>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	1e58      	subs	r0, r3, #1
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6859      	ldr	r1, [r3, #4]
 800b25c:	460b      	mov	r3, r1
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	440b      	add	r3, r1
 800b262:	fbb0 f3f3 	udiv	r3, r0, r3
 800b266:	3301      	adds	r3, #1
 800b268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bf0c      	ite	eq
 800b270:	2301      	moveq	r3, #1
 800b272:	2300      	movne	r3, #0
 800b274:	b2db      	uxtb	r3, r3
 800b276:	e012      	b.n	800b29e <HAL_I2C_Init+0x18e>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	1e58      	subs	r0, r3, #1
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6859      	ldr	r1, [r3, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	0099      	lsls	r1, r3, #2
 800b288:	440b      	add	r3, r1
 800b28a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b28e:	3301      	adds	r3, #1
 800b290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b294:	2b00      	cmp	r3, #0
 800b296:	bf0c      	ite	eq
 800b298:	2301      	moveq	r3, #1
 800b29a:	2300      	movne	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <HAL_I2C_Init+0x196>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e022      	b.n	800b2ec <HAL_I2C_Init+0x1dc>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10e      	bne.n	800b2cc <HAL_I2C_Init+0x1bc>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	1e58      	subs	r0, r3, #1
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6859      	ldr	r1, [r3, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	440b      	add	r3, r1
 800b2bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ca:	e00f      	b.n	800b2ec <HAL_I2C_Init+0x1dc>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	1e58      	subs	r0, r3, #1
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6859      	ldr	r1, [r3, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	440b      	add	r3, r1
 800b2da:	0099      	lsls	r1, r3, #2
 800b2dc:	440b      	add	r3, r1
 800b2de:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	6809      	ldr	r1, [r1, #0]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	69da      	ldr	r2, [r3, #28]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b31a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6911      	ldr	r1, [r2, #16]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	68d2      	ldr	r2, [r2, #12]
 800b326:	4311      	orrs	r1, r2
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	6812      	ldr	r2, [r2, #0]
 800b32c:	430b      	orrs	r3, r1
 800b32e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695a      	ldr	r2, [r3, #20]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	431a      	orrs	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f042 0201 	orr.w	r2, r2, #1
 800b35a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2220      	movs	r2, #32
 800b366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	000186a0 	.word	0x000186a0
 800b388:	001e847f 	.word	0x001e847f
 800b38c:	003d08ff 	.word	0x003d08ff
 800b390:	431bde83 	.word	0x431bde83
 800b394:	10624dd3 	.word	0x10624dd3

0800b398 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	817b      	strh	r3, [r7, #10]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	813b      	strh	r3, [r7, #8]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b3b2:	f7fe fb6d 	bl	8009a90 <HAL_GetTick>
 800b3b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b20      	cmp	r3, #32
 800b3c2:	f040 80d9 	bne.w	800b578 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	2319      	movs	r3, #25
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	496d      	ldr	r1, [pc, #436]	; (800b584 <HAL_I2C_Mem_Write+0x1ec>)
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 fdad 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e0cc      	b.n	800b57a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d101      	bne.n	800b3ee <HAL_I2C_Mem_Write+0x56>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e0c5      	b.n	800b57a <HAL_I2C_Mem_Write+0x1e2>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	2b01      	cmp	r3, #1
 800b402:	d007      	beq.n	800b414 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0201 	orr.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2221      	movs	r2, #33	; 0x21
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2240      	movs	r2, #64	; 0x40
 800b430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6a3a      	ldr	r2, [r7, #32]
 800b43e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4a4d      	ldr	r2, [pc, #308]	; (800b588 <HAL_I2C_Mem_Write+0x1f0>)
 800b454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b456:	88f8      	ldrh	r0, [r7, #6]
 800b458:	893a      	ldrh	r2, [r7, #8]
 800b45a:	8979      	ldrh	r1, [r7, #10]
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	4603      	mov	r3, r0
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 fbe4 	bl	800bc34 <I2C_RequestMemoryWrite>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d052      	beq.n	800b518 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e081      	b.n	800b57a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 fe2e 	bl	800c0dc <I2C_WaitOnTXEFlagUntilTimeout>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00d      	beq.n	800b4a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	d107      	bne.n	800b49e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b49c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e06b      	b.n	800b57a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	781a      	ldrb	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	d11b      	bne.n	800b518 <HAL_I2C_Mem_Write+0x180>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d017      	beq.n	800b518 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	781a      	ldrb	r2, [r3, #0]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b502:	3b01      	subs	r3, #1
 800b504:	b29a      	uxth	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b50e:	b29b      	uxth	r3, r3
 800b510:	3b01      	subs	r3, #1
 800b512:	b29a      	uxth	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1aa      	bne.n	800b476 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f000 fe1a 	bl	800c15e <I2C_WaitOnBTFFlagUntilTimeout>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00d      	beq.n	800b54c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b534:	2b04      	cmp	r3, #4
 800b536:	d107      	bne.n	800b548 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e016      	b.n	800b57a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b55a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2220      	movs	r2, #32
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	e000      	b.n	800b57a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b578:	2302      	movs	r3, #2
  }
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	00100002 	.word	0x00100002
 800b588:	ffff0000 	.word	0xffff0000

0800b58c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08c      	sub	sp, #48	; 0x30
 800b590:	af02      	add	r7, sp, #8
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	4608      	mov	r0, r1
 800b596:	4611      	mov	r1, r2
 800b598:	461a      	mov	r2, r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	817b      	strh	r3, [r7, #10]
 800b59e:	460b      	mov	r3, r1
 800b5a0:	813b      	strh	r3, [r7, #8]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b5a6:	f7fe fa73 	bl	8009a90 <HAL_GetTick>
 800b5aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	f040 8208 	bne.w	800b9ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	2319      	movs	r3, #25
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	497b      	ldr	r1, [pc, #492]	; (800b7b0 <HAL_I2C_Mem_Read+0x224>)
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 fcb3 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e1fb      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d101      	bne.n	800b5e2 <HAL_I2C_Mem_Read+0x56>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e1f4      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d007      	beq.n	800b608 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0201 	orr.w	r2, r2, #1
 800b606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2222      	movs	r2, #34	; 0x22
 800b61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2240      	movs	r2, #64	; 0x40
 800b624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b63e:	b29a      	uxth	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4a5b      	ldr	r2, [pc, #364]	; (800b7b4 <HAL_I2C_Mem_Read+0x228>)
 800b648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b64a:	88f8      	ldrh	r0, [r7, #6]
 800b64c:	893a      	ldrh	r2, [r7, #8]
 800b64e:	8979      	ldrh	r1, [r7, #10]
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	4603      	mov	r3, r0
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 fb80 	bl	800bd60 <I2C_RequestMemoryRead>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e1b0      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d113      	bne.n	800b69a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b672:	2300      	movs	r3, #0
 800b674:	623b      	str	r3, [r7, #32]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	623b      	str	r3, [r7, #32]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	623b      	str	r3, [r7, #32]
 800b686:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	e184      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d11b      	bne.n	800b6da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	61fb      	str	r3, [r7, #28]
 800b6c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	e164      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d11b      	bne.n	800b71a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b702:	2300      	movs	r3, #0
 800b704:	61bb      	str	r3, [r7, #24]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	61bb      	str	r3, [r7, #24]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	61bb      	str	r3, [r7, #24]
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	e144      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	617b      	str	r3, [r7, #20]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	617b      	str	r3, [r7, #20]
 800b72e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b730:	e138      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b736:	2b03      	cmp	r3, #3
 800b738:	f200 80f1 	bhi.w	800b91e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b740:	2b01      	cmp	r3, #1
 800b742:	d123      	bne.n	800b78c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f000 fd49 	bl	800c1e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e139      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	691a      	ldr	r2, [r3, #16]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b780:	b29b      	uxth	r3, r3
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b78a:	e10b      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b790:	2b02      	cmp	r3, #2
 800b792:	d14e      	bne.n	800b832 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79a:	2200      	movs	r2, #0
 800b79c:	4906      	ldr	r1, [pc, #24]	; (800b7b8 <HAL_I2C_Mem_Read+0x22c>)
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 fbc6 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d008      	beq.n	800b7bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e10e      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
 800b7ae:	bf00      	nop
 800b7b0:	00100002 	.word	0x00100002
 800b7b4:	ffff0000 	.word	0xffff0000
 800b7b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	691a      	ldr	r2, [r3, #16]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	691a      	ldr	r2, [r3, #16]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	b2d2      	uxtb	r2, r2
 800b80a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b81a:	3b01      	subs	r3, #1
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b826:	b29b      	uxth	r3, r3
 800b828:	3b01      	subs	r3, #1
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b830:	e0b8      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	2200      	movs	r2, #0
 800b83a:	4966      	ldr	r1, [pc, #408]	; (800b9d4 <HAL_I2C_Mem_Read+0x448>)
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fb77 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e0bf      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b85a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	691a      	ldr	r2, [r3, #16]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b878:	3b01      	subs	r3, #1
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b884:	b29b      	uxth	r3, r3
 800b886:	3b01      	subs	r3, #1
 800b888:	b29a      	uxth	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	2200      	movs	r2, #0
 800b896:	494f      	ldr	r1, [pc, #316]	; (800b9d4 <HAL_I2C_Mem_Read+0x448>)
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fb49 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e091      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	691a      	ldr	r2, [r3, #16]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	b2d2      	uxtb	r2, r2
 800b8c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	b2d2      	uxtb	r2, r2
 800b8f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b906:	3b01      	subs	r3, #1
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b912:	b29b      	uxth	r3, r3
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b91c:	e042      	b.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b920:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 fc5c 	bl	800c1e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e04c      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	691a      	ldr	r2, [r3, #16]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94e:	3b01      	subs	r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3b01      	subs	r3, #1
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	f003 0304 	and.w	r3, r3, #4
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d118      	bne.n	800b9a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	691a      	ldr	r2, [r3, #16]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	b2d2      	uxtb	r2, r2
 800b97e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	3b01      	subs	r3, #1
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f47f aec2 	bne.w	800b732 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2220      	movs	r2, #32
 800b9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e000      	b.n	800b9cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b9ca:	2302      	movs	r3, #2
  }
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3728      	adds	r7, #40	; 0x28
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	00010004 	.word	0x00010004

0800b9d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	607a      	str	r2, [r7, #4]
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800b9e8:	f7fe f852 	bl	8009a90 <HAL_GetTick>
 800b9ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	f040 8111 	bne.w	800bc22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	2319      	movs	r3, #25
 800ba06:	2201      	movs	r2, #1
 800ba08:	4988      	ldr	r1, [pc, #544]	; (800bc2c <HAL_I2C_IsDeviceReady+0x254>)
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 fa90 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800ba16:	2302      	movs	r3, #2
 800ba18:	e104      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_I2C_IsDeviceReady+0x50>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e0fd      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d007      	beq.n	800ba4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0201 	orr.w	r2, r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2224      	movs	r2, #36	; 0x24
 800ba62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4a70      	ldr	r2, [pc, #448]	; (800bc30 <HAL_I2C_IsDeviceReady+0x258>)
 800ba70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 fa4e 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00d      	beq.n	800bab6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baa8:	d103      	bne.n	800bab2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bab0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800bab2:	2303      	movs	r3, #3
 800bab4:	e0b6      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bab6:	897b      	ldrh	r3, [r7, #10]
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	461a      	mov	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bac4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800bac6:	f7fd ffe3 	bl	8009a90 <HAL_GetTick>
 800baca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	bf0c      	ite	eq
 800bada:	2301      	moveq	r3, #1
 800badc:	2300      	movne	r3, #0
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baf0:	bf0c      	ite	eq
 800baf2:	2301      	moveq	r3, #1
 800baf4:	2300      	movne	r3, #0
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800bafa:	e025      	b.n	800bb48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bafc:	f7fd ffc8 	bl	8009a90 <HAL_GetTick>
 800bb00:	4602      	mov	r2, r0
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d302      	bcc.n	800bb12 <HAL_I2C_IsDeviceReady+0x13a>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d103      	bne.n	800bb1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	22a0      	movs	r2, #160	; 0xa0
 800bb16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	bf0c      	ite	eq
 800bb28:	2301      	moveq	r3, #1
 800bb2a:	2300      	movne	r3, #0
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb3e:	bf0c      	ite	eq
 800bb40:	2301      	moveq	r3, #1
 800bb42:	2300      	movne	r3, #0
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2ba0      	cmp	r3, #160	; 0xa0
 800bb52:	d005      	beq.n	800bb60 <HAL_I2C_IsDeviceReady+0x188>
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d102      	bne.n	800bb60 <HAL_I2C_IsDeviceReady+0x188>
 800bb5a:	7dbb      	ldrb	r3, [r7, #22]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0cd      	beq.n	800bafc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	f003 0302 	and.w	r3, r3, #2
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d129      	bne.n	800bbca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb86:	2300      	movs	r3, #0
 800bb88:	613b      	str	r3, [r7, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2319      	movs	r3, #25
 800bba2:	2201      	movs	r2, #1
 800bba4:	4921      	ldr	r1, [pc, #132]	; (800bc2c <HAL_I2C_IsDeviceReady+0x254>)
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 f9c2 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e036      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e02c      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbe2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	2319      	movs	r3, #25
 800bbea:	2201      	movs	r2, #1
 800bbec:	490f      	ldr	r1, [pc, #60]	; (800bc2c <HAL_I2C_IsDeviceReady+0x254>)
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f000 f99e 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e012      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	3301      	adds	r3, #1
 800bc02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	f4ff af32 	bcc.w	800ba72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2220      	movs	r2, #32
 800bc12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800bc22:	2302      	movs	r3, #2
  }
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3720      	adds	r7, #32
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	00100002 	.word	0x00100002
 800bc30:	ffff0000 	.word	0xffff0000

0800bc34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	4611      	mov	r1, r2
 800bc40:	461a      	mov	r2, r3
 800bc42:	4603      	mov	r3, r0
 800bc44:	817b      	strh	r3, [r7, #10]
 800bc46:	460b      	mov	r3, r1
 800bc48:	813b      	strh	r3, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 f960 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00d      	beq.n	800bc92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc84:	d103      	bne.n	800bc8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e05f      	b.n	800bd52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bc92:	897b      	ldrh	r3, [r7, #10]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	461a      	mov	r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca4:	6a3a      	ldr	r2, [r7, #32]
 800bca6:	492d      	ldr	r1, [pc, #180]	; (800bd5c <I2C_RequestMemoryWrite+0x128>)
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 f998 	bl	800bfde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e04c      	b.n	800bd52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bcb8:	2300      	movs	r3, #0
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd0:	6a39      	ldr	r1, [r7, #32]
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f000 fa02 	bl	800c0dc <I2C_WaitOnTXEFlagUntilTimeout>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00d      	beq.n	800bcfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d107      	bne.n	800bcf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e02b      	b.n	800bd52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcfa:	88fb      	ldrh	r3, [r7, #6]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d105      	bne.n	800bd0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bd00:	893b      	ldrh	r3, [r7, #8]
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	611a      	str	r2, [r3, #16]
 800bd0a:	e021      	b.n	800bd50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bd0c:	893b      	ldrh	r3, [r7, #8]
 800bd0e:	0a1b      	lsrs	r3, r3, #8
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1c:	6a39      	ldr	r1, [r7, #32]
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f9dc 	bl	800c0dc <I2C_WaitOnTXEFlagUntilTimeout>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00d      	beq.n	800bd46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d107      	bne.n	800bd42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e005      	b.n	800bd52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bd46:	893b      	ldrh	r3, [r7, #8]
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	00010002 	.word	0x00010002

0800bd60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	4608      	mov	r0, r1
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4603      	mov	r3, r0
 800bd70:	817b      	strh	r3, [r7, #10]
 800bd72:	460b      	mov	r3, r1
 800bd74:	813b      	strh	r3, [r7, #8]
 800bd76:	4613      	mov	r3, r2
 800bd78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f000 f8c2 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00d      	beq.n	800bdce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc0:	d103      	bne.n	800bdca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e0aa      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdce:	897b      	ldrh	r3, [r7, #10]
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	6a3a      	ldr	r2, [r7, #32]
 800bde2:	4952      	ldr	r1, [pc, #328]	; (800bf2c <I2C_RequestMemoryRead+0x1cc>)
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 f8fa 	bl	800bfde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e097      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	617b      	str	r3, [r7, #20]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0c:	6a39      	ldr	r1, [r7, #32]
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f000 f964 	bl	800c0dc <I2C_WaitOnTXEFlagUntilTimeout>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00d      	beq.n	800be36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d107      	bne.n	800be32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e076      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be36:	88fb      	ldrh	r3, [r7, #6]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d105      	bne.n	800be48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be3c:	893b      	ldrh	r3, [r7, #8]
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	611a      	str	r2, [r3, #16]
 800be46:	e021      	b.n	800be8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800be48:	893b      	ldrh	r3, [r7, #8]
 800be4a:	0a1b      	lsrs	r3, r3, #8
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be58:	6a39      	ldr	r1, [r7, #32]
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f000 f93e 	bl	800c0dc <I2C_WaitOnTXEFlagUntilTimeout>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00d      	beq.n	800be82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	d107      	bne.n	800be7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e050      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be82:	893b      	ldrh	r3, [r7, #8]
 800be84:	b2da      	uxtb	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8e:	6a39      	ldr	r1, [r7, #32]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 f923 	bl	800c0dc <I2C_WaitOnTXEFlagUntilTimeout>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00d      	beq.n	800beb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d107      	bne.n	800beb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800beb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e035      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bec6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	6a3b      	ldr	r3, [r7, #32]
 800bece:	2200      	movs	r2, #0
 800bed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f82b 	bl	800bf30 <I2C_WaitOnFlagUntilTimeout>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00d      	beq.n	800befc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beee:	d103      	bne.n	800bef8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e013      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800befc:	897b      	ldrh	r3, [r7, #10]
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	f043 0301 	orr.w	r3, r3, #1
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	6a3a      	ldr	r2, [r7, #32]
 800bf10:	4906      	ldr	r1, [pc, #24]	; (800bf2c <I2C_RequestMemoryRead+0x1cc>)
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f000 f863 	bl	800bfde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	00010002 	.word	0x00010002

0800bf30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf40:	e025      	b.n	800bf8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf48:	d021      	beq.n	800bf8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf4a:	f7fd fda1 	bl	8009a90 <HAL_GetTick>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d302      	bcc.n	800bf60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d116      	bne.n	800bf8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f043 0220 	orr.w	r2, r3, #32
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e023      	b.n	800bfd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	0c1b      	lsrs	r3, r3, #16
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d10d      	bne.n	800bfb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	43da      	mvns	r2, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	bf0c      	ite	eq
 800bfaa:	2301      	moveq	r3, #1
 800bfac:	2300      	movne	r3, #0
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	e00c      	b.n	800bfce <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	43da      	mvns	r2, r3
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	bf0c      	ite	eq
 800bfc6:	2301      	moveq	r3, #1
 800bfc8:	2300      	movne	r3, #0
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	461a      	mov	r2, r3
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d0b6      	beq.n	800bf42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
 800bfea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bfec:	e051      	b.n	800c092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	695b      	ldr	r3, [r3, #20]
 800bff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bffc:	d123      	bne.n	800c046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c00c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2220      	movs	r2, #32
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	f043 0204 	orr.w	r2, r3, #4
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e046      	b.n	800c0d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c04c:	d021      	beq.n	800c092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c04e:	f7fd fd1f 	bl	8009a90 <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d302      	bcc.n	800c064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d116      	bne.n	800c092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2220      	movs	r2, #32
 800c06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07e:	f043 0220 	orr.w	r2, r3, #32
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e020      	b.n	800c0d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	0c1b      	lsrs	r3, r3, #16
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d10c      	bne.n	800c0b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	43da      	mvns	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bf14      	ite	ne
 800c0ae:	2301      	movne	r3, #1
 800c0b0:	2300      	moveq	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	e00b      	b.n	800c0ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	43da      	mvns	r2, r3
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	bf14      	ite	ne
 800c0c8:	2301      	movne	r3, #1
 800c0ca:	2300      	moveq	r3, #0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d18d      	bne.n	800bfee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c0e8:	e02d      	b.n	800c146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f000 f8ce 	bl	800c28c <I2C_IsAcknowledgeFailed>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e02d      	b.n	800c156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c100:	d021      	beq.n	800c146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c102:	f7fd fcc5 	bl	8009a90 <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d302      	bcc.n	800c118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d116      	bne.n	800c146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2220      	movs	r2, #32
 800c122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c132:	f043 0220 	orr.w	r2, r3, #32
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e007      	b.n	800c156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c150:	2b80      	cmp	r3, #128	; 0x80
 800c152:	d1ca      	bne.n	800c0ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c16a:	e02d      	b.n	800c1c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 f88d 	bl	800c28c <I2C_IsAcknowledgeFailed>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e02d      	b.n	800c1d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c182:	d021      	beq.n	800c1c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c184:	f7fd fc84 	bl	8009a90 <HAL_GetTick>
 800c188:	4602      	mov	r2, r0
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	429a      	cmp	r2, r3
 800c192:	d302      	bcc.n	800c19a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d116      	bne.n	800c1c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b4:	f043 0220 	orr.w	r2, r3, #32
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e007      	b.n	800c1d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	f003 0304 	and.w	r3, r3, #4
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	d1ca      	bne.n	800c16c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c1ec:	e042      	b.n	800c274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f003 0310 	and.w	r3, r3, #16
 800c1f8:	2b10      	cmp	r3, #16
 800c1fa:	d119      	bne.n	800c230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f06f 0210 	mvn.w	r2, #16
 800c204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2220      	movs	r2, #32
 800c210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e029      	b.n	800c284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c230:	f7fd fc2e 	bl	8009a90 <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d302      	bcc.n	800c246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d116      	bne.n	800c274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2220      	movs	r2, #32
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c260:	f043 0220 	orr.w	r2, r3, #32
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e007      	b.n	800c284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27e:	2b40      	cmp	r3, #64	; 0x40
 800c280:	d1b5      	bne.n	800c1ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a2:	d11b      	bne.n	800c2dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c2ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c8:	f043 0204 	orr.w	r2, r3, #4
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e000      	b.n	800c2de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
	...

0800c2ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	603b      	str	r3, [r7, #0]
 800c2fa:	4b20      	ldr	r3, [pc, #128]	; (800c37c <HAL_PWREx_EnableOverDrive+0x90>)
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	4a1f      	ldr	r2, [pc, #124]	; (800c37c <HAL_PWREx_EnableOverDrive+0x90>)
 800c300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c304:	6413      	str	r3, [r2, #64]	; 0x40
 800c306:	4b1d      	ldr	r3, [pc, #116]	; (800c37c <HAL_PWREx_EnableOverDrive+0x90>)
 800c308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c312:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <HAL_PWREx_EnableOverDrive+0x94>)
 800c314:	2201      	movs	r2, #1
 800c316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c318:	f7fd fbba 	bl	8009a90 <HAL_GetTick>
 800c31c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c31e:	e009      	b.n	800c334 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c320:	f7fd fbb6 	bl	8009a90 <HAL_GetTick>
 800c324:	4602      	mov	r2, r0
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c32e:	d901      	bls.n	800c334 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e01f      	b.n	800c374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c334:	4b13      	ldr	r3, [pc, #76]	; (800c384 <HAL_PWREx_EnableOverDrive+0x98>)
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c340:	d1ee      	bne.n	800c320 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c342:	4b11      	ldr	r3, [pc, #68]	; (800c388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c344:	2201      	movs	r2, #1
 800c346:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c348:	f7fd fba2 	bl	8009a90 <HAL_GetTick>
 800c34c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c34e:	e009      	b.n	800c364 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c350:	f7fd fb9e 	bl	8009a90 <HAL_GetTick>
 800c354:	4602      	mov	r2, r0
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c35e:	d901      	bls.n	800c364 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c360:	2303      	movs	r3, #3
 800c362:	e007      	b.n	800c374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c364:	4b07      	ldr	r3, [pc, #28]	; (800c384 <HAL_PWREx_EnableOverDrive+0x98>)
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c36c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c370:	d1ee      	bne.n	800c350 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	40023800 	.word	0x40023800
 800c380:	420e0040 	.word	0x420e0040
 800c384:	40007000 	.word	0x40007000
 800c388:	420e0044 	.word	0x420e0044

0800c38c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	e0cc      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c3a0:	4b68      	ldr	r3, [pc, #416]	; (800c544 <HAL_RCC_ClockConfig+0x1b8>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 030f 	and.w	r3, r3, #15
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d90c      	bls.n	800c3c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ae:	4b65      	ldr	r3, [pc, #404]	; (800c544 <HAL_RCC_ClockConfig+0x1b8>)
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3b6:	4b63      	ldr	r3, [pc, #396]	; (800c544 <HAL_RCC_ClockConfig+0x1b8>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 030f 	and.w	r3, r3, #15
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d001      	beq.n	800c3c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e0b8      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0302 	and.w	r3, r3, #2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d020      	beq.n	800c416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d005      	beq.n	800c3ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c3e0:	4b59      	ldr	r3, [pc, #356]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	4a58      	ldr	r2, [pc, #352]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c3e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c3ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0308 	and.w	r3, r3, #8
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d005      	beq.n	800c404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c3f8:	4b53      	ldr	r3, [pc, #332]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	4a52      	ldr	r2, [pc, #328]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c3fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c404:	4b50      	ldr	r3, [pc, #320]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	494d      	ldr	r1, [pc, #308]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c412:	4313      	orrs	r3, r2
 800c414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d044      	beq.n	800c4ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d107      	bne.n	800c43a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c42a:	4b47      	ldr	r3, [pc, #284]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d119      	bne.n	800c46a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e07f      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d003      	beq.n	800c44a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c446:	2b03      	cmp	r3, #3
 800c448:	d107      	bne.n	800c45a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c44a:	4b3f      	ldr	r3, [pc, #252]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d109      	bne.n	800c46a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e06f      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c45a:	4b3b      	ldr	r3, [pc, #236]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e067      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c46a:	4b37      	ldr	r3, [pc, #220]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f023 0203 	bic.w	r2, r3, #3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	4934      	ldr	r1, [pc, #208]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c47c:	f7fd fb08 	bl	8009a90 <HAL_GetTick>
 800c480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c482:	e00a      	b.n	800c49a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c484:	f7fd fb04 	bl	8009a90 <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c492:	4293      	cmp	r3, r2
 800c494:	d901      	bls.n	800c49a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c496:	2303      	movs	r3, #3
 800c498:	e04f      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c49a:	4b2b      	ldr	r3, [pc, #172]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	f003 020c 	and.w	r2, r3, #12
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d1eb      	bne.n	800c484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c4ac:	4b25      	ldr	r3, [pc, #148]	; (800c544 <HAL_RCC_ClockConfig+0x1b8>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 030f 	and.w	r3, r3, #15
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d20c      	bcs.n	800c4d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4ba:	4b22      	ldr	r3, [pc, #136]	; (800c544 <HAL_RCC_ClockConfig+0x1b8>)
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4c2:	4b20      	ldr	r3, [pc, #128]	; (800c544 <HAL_RCC_ClockConfig+0x1b8>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 030f 	and.w	r3, r3, #15
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d001      	beq.n	800c4d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e032      	b.n	800c53a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d008      	beq.n	800c4f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c4e0:	4b19      	ldr	r3, [pc, #100]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	4916      	ldr	r1, [pc, #88]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 0308 	and.w	r3, r3, #8
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d009      	beq.n	800c512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c4fe:	4b12      	ldr	r3, [pc, #72]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	490e      	ldr	r1, [pc, #56]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c50e:	4313      	orrs	r3, r2
 800c510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c512:	f000 f855 	bl	800c5c0 <HAL_RCC_GetSysClockFreq>
 800c516:	4602      	mov	r2, r0
 800c518:	4b0b      	ldr	r3, [pc, #44]	; (800c548 <HAL_RCC_ClockConfig+0x1bc>)
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	091b      	lsrs	r3, r3, #4
 800c51e:	f003 030f 	and.w	r3, r3, #15
 800c522:	490a      	ldr	r1, [pc, #40]	; (800c54c <HAL_RCC_ClockConfig+0x1c0>)
 800c524:	5ccb      	ldrb	r3, [r1, r3]
 800c526:	fa22 f303 	lsr.w	r3, r2, r3
 800c52a:	4a09      	ldr	r2, [pc, #36]	; (800c550 <HAL_RCC_ClockConfig+0x1c4>)
 800c52c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c52e:	4b09      	ldr	r3, [pc, #36]	; (800c554 <HAL_RCC_ClockConfig+0x1c8>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4618      	mov	r0, r3
 800c534:	f7fd fa68 	bl	8009a08 <HAL_InitTick>

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	40023c00 	.word	0x40023c00
 800c548:	40023800 	.word	0x40023800
 800c54c:	08018f50 	.word	0x08018f50
 800c550:	2000003c 	.word	0x2000003c
 800c554:	2000006c 	.word	0x2000006c

0800c558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c558:	b480      	push	{r7}
 800c55a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c55c:	4b03      	ldr	r3, [pc, #12]	; (800c56c <HAL_RCC_GetHCLKFreq+0x14>)
 800c55e:	681b      	ldr	r3, [r3, #0]
}
 800c560:	4618      	mov	r0, r3
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	2000003c 	.word	0x2000003c

0800c570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c574:	f7ff fff0 	bl	800c558 <HAL_RCC_GetHCLKFreq>
 800c578:	4602      	mov	r2, r0
 800c57a:	4b05      	ldr	r3, [pc, #20]	; (800c590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	0a9b      	lsrs	r3, r3, #10
 800c580:	f003 0307 	and.w	r3, r3, #7
 800c584:	4903      	ldr	r1, [pc, #12]	; (800c594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c586:	5ccb      	ldrb	r3, [r1, r3]
 800c588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	40023800 	.word	0x40023800
 800c594:	08018f60 	.word	0x08018f60

0800c598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c59c:	f7ff ffdc 	bl	800c558 <HAL_RCC_GetHCLKFreq>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4b05      	ldr	r3, [pc, #20]	; (800c5b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	0b5b      	lsrs	r3, r3, #13
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	4903      	ldr	r1, [pc, #12]	; (800c5bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5ae:	5ccb      	ldrb	r3, [r1, r3]
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	40023800 	.word	0x40023800
 800c5bc:	08018f60 	.word	0x08018f60

0800c5c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5c4:	b0ae      	sub	sp, #184	; 0xb8
 800c5c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5e6:	4bcb      	ldr	r3, [pc, #812]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f003 030c 	and.w	r3, r3, #12
 800c5ee:	2b0c      	cmp	r3, #12
 800c5f0:	f200 8206 	bhi.w	800ca00 <HAL_RCC_GetSysClockFreq+0x440>
 800c5f4:	a201      	add	r2, pc, #4	; (adr r2, 800c5fc <HAL_RCC_GetSysClockFreq+0x3c>)
 800c5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fa:	bf00      	nop
 800c5fc:	0800c631 	.word	0x0800c631
 800c600:	0800ca01 	.word	0x0800ca01
 800c604:	0800ca01 	.word	0x0800ca01
 800c608:	0800ca01 	.word	0x0800ca01
 800c60c:	0800c639 	.word	0x0800c639
 800c610:	0800ca01 	.word	0x0800ca01
 800c614:	0800ca01 	.word	0x0800ca01
 800c618:	0800ca01 	.word	0x0800ca01
 800c61c:	0800c641 	.word	0x0800c641
 800c620:	0800ca01 	.word	0x0800ca01
 800c624:	0800ca01 	.word	0x0800ca01
 800c628:	0800ca01 	.word	0x0800ca01
 800c62c:	0800c831 	.word	0x0800c831
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c630:	4bb9      	ldr	r3, [pc, #740]	; (800c918 <HAL_RCC_GetSysClockFreq+0x358>)
 800c632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c636:	e1e7      	b.n	800ca08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c638:	4bb8      	ldr	r3, [pc, #736]	; (800c91c <HAL_RCC_GetSysClockFreq+0x35c>)
 800c63a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c63e:	e1e3      	b.n	800ca08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c640:	4bb4      	ldr	r3, [pc, #720]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c64c:	4bb1      	ldr	r3, [pc, #708]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d071      	beq.n	800c73c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c658:	4bae      	ldr	r3, [pc, #696]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	099b      	lsrs	r3, r3, #6
 800c65e:	2200      	movs	r2, #0
 800c660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c664:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c66c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c674:	2300      	movs	r3, #0
 800c676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c67a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f04f 0100 	mov.w	r1, #0
 800c68a:	0159      	lsls	r1, r3, #5
 800c68c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c690:	0150      	lsls	r0, r2, #5
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4621      	mov	r1, r4
 800c698:	1a51      	subs	r1, r2, r1
 800c69a:	6439      	str	r1, [r7, #64]	; 0x40
 800c69c:	4629      	mov	r1, r5
 800c69e:	eb63 0301 	sbc.w	r3, r3, r1
 800c6a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	018b      	lsls	r3, r1, #6
 800c6b4:	4641      	mov	r1, r8
 800c6b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c6ba:	4641      	mov	r1, r8
 800c6bc:	018a      	lsls	r2, r1, #6
 800c6be:	4641      	mov	r1, r8
 800c6c0:	1a51      	subs	r1, r2, r1
 800c6c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	eb63 0301 	sbc.w	r3, r3, r1
 800c6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6cc:	f04f 0200 	mov.w	r2, #0
 800c6d0:	f04f 0300 	mov.w	r3, #0
 800c6d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c6d8:	4649      	mov	r1, r9
 800c6da:	00cb      	lsls	r3, r1, #3
 800c6dc:	4641      	mov	r1, r8
 800c6de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	00ca      	lsls	r2, r1, #3
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	189b      	adds	r3, r3, r2
 800c6f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	eb42 0303 	adc.w	r3, r2, r3
 800c6fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c6fc:	f04f 0200 	mov.w	r2, #0
 800c700:	f04f 0300 	mov.w	r3, #0
 800c704:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c708:	4629      	mov	r1, r5
 800c70a:	024b      	lsls	r3, r1, #9
 800c70c:	4621      	mov	r1, r4
 800c70e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c712:	4621      	mov	r1, r4
 800c714:	024a      	lsls	r2, r1, #9
 800c716:	4610      	mov	r0, r2
 800c718:	4619      	mov	r1, r3
 800c71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c71e:	2200      	movs	r2, #0
 800c720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c728:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c72c:	f7f4 fb1c 	bl	8000d68 <__aeabi_uldivmod>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4613      	mov	r3, r2
 800c736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c73a:	e067      	b.n	800c80c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c73c:	4b75      	ldr	r3, [pc, #468]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	099b      	lsrs	r3, r3, #6
 800c742:	2200      	movs	r2, #0
 800c744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c748:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c74c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c754:	67bb      	str	r3, [r7, #120]	; 0x78
 800c756:	2300      	movs	r3, #0
 800c758:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c75a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	f04f 0000 	mov.w	r0, #0
 800c766:	f04f 0100 	mov.w	r1, #0
 800c76a:	0159      	lsls	r1, r3, #5
 800c76c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c770:	0150      	lsls	r0, r2, #5
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4621      	mov	r1, r4
 800c778:	1a51      	subs	r1, r2, r1
 800c77a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c77c:	4629      	mov	r1, r5
 800c77e:	eb63 0301 	sbc.w	r3, r3, r1
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c784:	f04f 0200 	mov.w	r2, #0
 800c788:	f04f 0300 	mov.w	r3, #0
 800c78c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c790:	4649      	mov	r1, r9
 800c792:	018b      	lsls	r3, r1, #6
 800c794:	4641      	mov	r1, r8
 800c796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c79a:	4641      	mov	r1, r8
 800c79c:	018a      	lsls	r2, r1, #6
 800c79e:	4641      	mov	r1, r8
 800c7a0:	ebb2 0a01 	subs.w	sl, r2, r1
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	eb63 0b01 	sbc.w	fp, r3, r1
 800c7aa:	f04f 0200 	mov.w	r2, #0
 800c7ae:	f04f 0300 	mov.w	r3, #0
 800c7b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c7b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c7ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7be:	4692      	mov	sl, r2
 800c7c0:	469b      	mov	fp, r3
 800c7c2:	4623      	mov	r3, r4
 800c7c4:	eb1a 0303 	adds.w	r3, sl, r3
 800c7c8:	623b      	str	r3, [r7, #32]
 800c7ca:	462b      	mov	r3, r5
 800c7cc:	eb4b 0303 	adc.w	r3, fp, r3
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	f04f 0300 	mov.w	r3, #0
 800c7da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c7de:	4629      	mov	r1, r5
 800c7e0:	028b      	lsls	r3, r1, #10
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	028a      	lsls	r2, r1, #10
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	673b      	str	r3, [r7, #112]	; 0x70
 800c7f8:	677a      	str	r2, [r7, #116]	; 0x74
 800c7fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c7fe:	f7f4 fab3 	bl	8000d68 <__aeabi_uldivmod>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4613      	mov	r3, r2
 800c808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c80c:	4b41      	ldr	r3, [pc, #260]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	0c1b      	lsrs	r3, r3, #16
 800c812:	f003 0303 	and.w	r3, r3, #3
 800c816:	3301      	adds	r3, #1
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c81e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c826:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c82e:	e0eb      	b.n	800ca08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c830:	4b38      	ldr	r3, [pc, #224]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c83c:	4b35      	ldr	r3, [pc, #212]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d06b      	beq.n	800c920 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c848:	4b32      	ldr	r3, [pc, #200]	; (800c914 <HAL_RCC_GetSysClockFreq+0x354>)
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	099b      	lsrs	r3, r3, #6
 800c84e:	2200      	movs	r2, #0
 800c850:	66bb      	str	r3, [r7, #104]	; 0x68
 800c852:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c85a:	663b      	str	r3, [r7, #96]	; 0x60
 800c85c:	2300      	movs	r3, #0
 800c85e:	667b      	str	r3, [r7, #100]	; 0x64
 800c860:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c864:	4622      	mov	r2, r4
 800c866:	462b      	mov	r3, r5
 800c868:	f04f 0000 	mov.w	r0, #0
 800c86c:	f04f 0100 	mov.w	r1, #0
 800c870:	0159      	lsls	r1, r3, #5
 800c872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c876:	0150      	lsls	r0, r2, #5
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4621      	mov	r1, r4
 800c87e:	1a51      	subs	r1, r2, r1
 800c880:	61b9      	str	r1, [r7, #24]
 800c882:	4629      	mov	r1, r5
 800c884:	eb63 0301 	sbc.w	r3, r3, r1
 800c888:	61fb      	str	r3, [r7, #28]
 800c88a:	f04f 0200 	mov.w	r2, #0
 800c88e:	f04f 0300 	mov.w	r3, #0
 800c892:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c896:	4659      	mov	r1, fp
 800c898:	018b      	lsls	r3, r1, #6
 800c89a:	4651      	mov	r1, sl
 800c89c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c8a0:	4651      	mov	r1, sl
 800c8a2:	018a      	lsls	r2, r1, #6
 800c8a4:	4651      	mov	r1, sl
 800c8a6:	ebb2 0801 	subs.w	r8, r2, r1
 800c8aa:	4659      	mov	r1, fp
 800c8ac:	eb63 0901 	sbc.w	r9, r3, r1
 800c8b0:	f04f 0200 	mov.w	r2, #0
 800c8b4:	f04f 0300 	mov.w	r3, #0
 800c8b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	4699      	mov	r9, r3
 800c8c8:	4623      	mov	r3, r4
 800c8ca:	eb18 0303 	adds.w	r3, r8, r3
 800c8ce:	613b      	str	r3, [r7, #16]
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	eb49 0303 	adc.w	r3, r9, r3
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	f04f 0200 	mov.w	r2, #0
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	024b      	lsls	r3, r1, #9
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	024a      	lsls	r2, r1, #9
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c904:	f7f4 fa30 	bl	8000d68 <__aeabi_uldivmod>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4613      	mov	r3, r2
 800c90e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c912:	e065      	b.n	800c9e0 <HAL_RCC_GetSysClockFreq+0x420>
 800c914:	40023800 	.word	0x40023800
 800c918:	00f42400 	.word	0x00f42400
 800c91c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c920:	4b3d      	ldr	r3, [pc, #244]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x458>)
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	099b      	lsrs	r3, r3, #6
 800c926:	2200      	movs	r2, #0
 800c928:	4618      	mov	r0, r3
 800c92a:	4611      	mov	r1, r2
 800c92c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c930:	653b      	str	r3, [r7, #80]	; 0x50
 800c932:	2300      	movs	r3, #0
 800c934:	657b      	str	r3, [r7, #84]	; 0x54
 800c936:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c93a:	4642      	mov	r2, r8
 800c93c:	464b      	mov	r3, r9
 800c93e:	f04f 0000 	mov.w	r0, #0
 800c942:	f04f 0100 	mov.w	r1, #0
 800c946:	0159      	lsls	r1, r3, #5
 800c948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c94c:	0150      	lsls	r0, r2, #5
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4641      	mov	r1, r8
 800c954:	1a51      	subs	r1, r2, r1
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	4649      	mov	r1, r9
 800c95a:	eb63 0301 	sbc.w	r3, r3, r1
 800c95e:	60fb      	str	r3, [r7, #12]
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c96c:	4659      	mov	r1, fp
 800c96e:	018b      	lsls	r3, r1, #6
 800c970:	4651      	mov	r1, sl
 800c972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c976:	4651      	mov	r1, sl
 800c978:	018a      	lsls	r2, r1, #6
 800c97a:	4651      	mov	r1, sl
 800c97c:	1a54      	subs	r4, r2, r1
 800c97e:	4659      	mov	r1, fp
 800c980:	eb63 0501 	sbc.w	r5, r3, r1
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	00eb      	lsls	r3, r5, #3
 800c98e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c992:	00e2      	lsls	r2, r4, #3
 800c994:	4614      	mov	r4, r2
 800c996:	461d      	mov	r5, r3
 800c998:	4643      	mov	r3, r8
 800c99a:	18e3      	adds	r3, r4, r3
 800c99c:	603b      	str	r3, [r7, #0]
 800c99e:	464b      	mov	r3, r9
 800c9a0:	eb45 0303 	adc.w	r3, r5, r3
 800c9a4:	607b      	str	r3, [r7, #4]
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	f04f 0300 	mov.w	r3, #0
 800c9ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	028b      	lsls	r3, r1, #10
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c9bc:	4621      	mov	r1, r4
 800c9be:	028a      	lsls	r2, r1, #10
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c9ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c9d2:	f7f4 f9c9 	bl	8000d68 <__aeabi_uldivmod>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4613      	mov	r3, r2
 800c9dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x458>)
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	0f1b      	lsrs	r3, r3, #28
 800c9e6:	f003 0307 	and.w	r3, r3, #7
 800c9ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c9ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c9f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c9fe:	e003      	b.n	800ca08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ca00:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <HAL_RCC_GetSysClockFreq+0x45c>)
 800ca02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ca06:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ca08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	37b8      	adds	r7, #184	; 0xb8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca16:	bf00      	nop
 800ca18:	40023800 	.word	0x40023800
 800ca1c:	00f42400 	.word	0x00f42400

0800ca20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e28d      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0301 	and.w	r3, r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 8083 	beq.w	800cb46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ca40:	4b94      	ldr	r3, [pc, #592]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f003 030c 	and.w	r3, r3, #12
 800ca48:	2b04      	cmp	r3, #4
 800ca4a:	d019      	beq.n	800ca80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ca4c:	4b91      	ldr	r3, [pc, #580]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ca54:	2b08      	cmp	r3, #8
 800ca56:	d106      	bne.n	800ca66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ca58:	4b8e      	ldr	r3, [pc, #568]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca64:	d00c      	beq.n	800ca80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca66:	4b8b      	ldr	r3, [pc, #556]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ca6e:	2b0c      	cmp	r3, #12
 800ca70:	d112      	bne.n	800ca98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca72:	4b88      	ldr	r3, [pc, #544]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca7e:	d10b      	bne.n	800ca98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca80:	4b84      	ldr	r3, [pc, #528]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d05b      	beq.n	800cb44 <HAL_RCC_OscConfig+0x124>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d157      	bne.n	800cb44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e25a      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caa0:	d106      	bne.n	800cab0 <HAL_RCC_OscConfig+0x90>
 800caa2:	4b7c      	ldr	r3, [pc, #496]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a7b      	ldr	r2, [pc, #492]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800caa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	e01d      	b.n	800caec <HAL_RCC_OscConfig+0xcc>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cab8:	d10c      	bne.n	800cad4 <HAL_RCC_OscConfig+0xb4>
 800caba:	4b76      	ldr	r3, [pc, #472]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a75      	ldr	r2, [pc, #468]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	4b73      	ldr	r3, [pc, #460]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a72      	ldr	r2, [pc, #456]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cacc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	e00b      	b.n	800caec <HAL_RCC_OscConfig+0xcc>
 800cad4:	4b6f      	ldr	r3, [pc, #444]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a6e      	ldr	r2, [pc, #440]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	4b6c      	ldr	r3, [pc, #432]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a6b      	ldr	r2, [pc, #428]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800caea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d013      	beq.n	800cb1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf4:	f7fc ffcc 	bl	8009a90 <HAL_GetTick>
 800caf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cafa:	e008      	b.n	800cb0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cafc:	f7fc ffc8 	bl	8009a90 <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b64      	cmp	r3, #100	; 0x64
 800cb08:	d901      	bls.n	800cb0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e21f      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb0e:	4b61      	ldr	r3, [pc, #388]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d0f0      	beq.n	800cafc <HAL_RCC_OscConfig+0xdc>
 800cb1a:	e014      	b.n	800cb46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb1c:	f7fc ffb8 	bl	8009a90 <HAL_GetTick>
 800cb20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb22:	e008      	b.n	800cb36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb24:	f7fc ffb4 	bl	8009a90 <HAL_GetTick>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	2b64      	cmp	r3, #100	; 0x64
 800cb30:	d901      	bls.n	800cb36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800cb32:	2303      	movs	r3, #3
 800cb34:	e20b      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb36:	4b57      	ldr	r3, [pc, #348]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f0      	bne.n	800cb24 <HAL_RCC_OscConfig+0x104>
 800cb42:	e000      	b.n	800cb46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 0302 	and.w	r3, r3, #2
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d06f      	beq.n	800cc32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cb52:	4b50      	ldr	r3, [pc, #320]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f003 030c 	and.w	r3, r3, #12
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d017      	beq.n	800cb8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cb5e:	4b4d      	ldr	r3, [pc, #308]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cb66:	2b08      	cmp	r3, #8
 800cb68:	d105      	bne.n	800cb76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cb6a:	4b4a      	ldr	r3, [pc, #296]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00b      	beq.n	800cb8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb76:	4b47      	ldr	r3, [pc, #284]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cb7e:	2b0c      	cmp	r3, #12
 800cb80:	d11c      	bne.n	800cbbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb82:	4b44      	ldr	r3, [pc, #272]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d116      	bne.n	800cbbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb8e:	4b41      	ldr	r3, [pc, #260]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 0302 	and.w	r3, r3, #2
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <HAL_RCC_OscConfig+0x186>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d001      	beq.n	800cba6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e1d3      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cba6:	4b3b      	ldr	r3, [pc, #236]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	4937      	ldr	r1, [pc, #220]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbba:	e03a      	b.n	800cc32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d020      	beq.n	800cc06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cbc4:	4b34      	ldr	r3, [pc, #208]	; (800cc98 <HAL_RCC_OscConfig+0x278>)
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbca:	f7fc ff61 	bl	8009a90 <HAL_GetTick>
 800cbce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbd0:	e008      	b.n	800cbe4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbd2:	f7fc ff5d 	bl	8009a90 <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d901      	bls.n	800cbe4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e1b4      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbe4:	4b2b      	ldr	r3, [pc, #172]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0f0      	beq.n	800cbd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbf0:	4b28      	ldr	r3, [pc, #160]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	4925      	ldr	r1, [pc, #148]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cc00:	4313      	orrs	r3, r2
 800cc02:	600b      	str	r3, [r1, #0]
 800cc04:	e015      	b.n	800cc32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc06:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <HAL_RCC_OscConfig+0x278>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc0c:	f7fc ff40 	bl	8009a90 <HAL_GetTick>
 800cc10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc12:	e008      	b.n	800cc26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc14:	f7fc ff3c 	bl	8009a90 <HAL_GetTick>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d901      	bls.n	800cc26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e193      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc26:	4b1b      	ldr	r3, [pc, #108]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1f0      	bne.n	800cc14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0308 	and.w	r3, r3, #8
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d036      	beq.n	800ccac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d016      	beq.n	800cc74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc46:	4b15      	ldr	r3, [pc, #84]	; (800cc9c <HAL_RCC_OscConfig+0x27c>)
 800cc48:	2201      	movs	r2, #1
 800cc4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc4c:	f7fc ff20 	bl	8009a90 <HAL_GetTick>
 800cc50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc52:	e008      	b.n	800cc66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc54:	f7fc ff1c 	bl	8009a90 <HAL_GetTick>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d901      	bls.n	800cc66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800cc62:	2303      	movs	r3, #3
 800cc64:	e173      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc66:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <HAL_RCC_OscConfig+0x274>)
 800cc68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0f0      	beq.n	800cc54 <HAL_RCC_OscConfig+0x234>
 800cc72:	e01b      	b.n	800ccac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <HAL_RCC_OscConfig+0x27c>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc7a:	f7fc ff09 	bl	8009a90 <HAL_GetTick>
 800cc7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc80:	e00e      	b.n	800cca0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc82:	f7fc ff05 	bl	8009a90 <HAL_GetTick>
 800cc86:	4602      	mov	r2, r0
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d907      	bls.n	800cca0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cc90:	2303      	movs	r3, #3
 800cc92:	e15c      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
 800cc94:	40023800 	.word	0x40023800
 800cc98:	42470000 	.word	0x42470000
 800cc9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cca0:	4b8a      	ldr	r3, [pc, #552]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca4:	f003 0302 	and.w	r3, r3, #2
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1ea      	bne.n	800cc82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 8097 	beq.w	800cde8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccbe:	4b83      	ldr	r3, [pc, #524]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10f      	bne.n	800ccea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccca:	2300      	movs	r3, #0
 800cccc:	60bb      	str	r3, [r7, #8]
 800ccce:	4b7f      	ldr	r3, [pc, #508]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ccd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd2:	4a7e      	ldr	r2, [pc, #504]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ccd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccd8:	6413      	str	r3, [r2, #64]	; 0x40
 800ccda:	4b7c      	ldr	r3, [pc, #496]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ccdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cce2:	60bb      	str	r3, [r7, #8]
 800cce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cce6:	2301      	movs	r3, #1
 800cce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccea:	4b79      	ldr	r3, [pc, #484]	; (800ced0 <HAL_RCC_OscConfig+0x4b0>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d118      	bne.n	800cd28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ccf6:	4b76      	ldr	r3, [pc, #472]	; (800ced0 <HAL_RCC_OscConfig+0x4b0>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a75      	ldr	r2, [pc, #468]	; (800ced0 <HAL_RCC_OscConfig+0x4b0>)
 800ccfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd02:	f7fc fec5 	bl	8009a90 <HAL_GetTick>
 800cd06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd08:	e008      	b.n	800cd1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd0a:	f7fc fec1 	bl	8009a90 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d901      	bls.n	800cd1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e118      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd1c:	4b6c      	ldr	r3, [pc, #432]	; (800ced0 <HAL_RCC_OscConfig+0x4b0>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0f0      	beq.n	800cd0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d106      	bne.n	800cd3e <HAL_RCC_OscConfig+0x31e>
 800cd30:	4b66      	ldr	r3, [pc, #408]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd34:	4a65      	ldr	r2, [pc, #404]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd36:	f043 0301 	orr.w	r3, r3, #1
 800cd3a:	6713      	str	r3, [r2, #112]	; 0x70
 800cd3c:	e01c      	b.n	800cd78 <HAL_RCC_OscConfig+0x358>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	2b05      	cmp	r3, #5
 800cd44:	d10c      	bne.n	800cd60 <HAL_RCC_OscConfig+0x340>
 800cd46:	4b61      	ldr	r3, [pc, #388]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4a:	4a60      	ldr	r2, [pc, #384]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd4c:	f043 0304 	orr.w	r3, r3, #4
 800cd50:	6713      	str	r3, [r2, #112]	; 0x70
 800cd52:	4b5e      	ldr	r3, [pc, #376]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd56:	4a5d      	ldr	r2, [pc, #372]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd58:	f043 0301 	orr.w	r3, r3, #1
 800cd5c:	6713      	str	r3, [r2, #112]	; 0x70
 800cd5e:	e00b      	b.n	800cd78 <HAL_RCC_OscConfig+0x358>
 800cd60:	4b5a      	ldr	r3, [pc, #360]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd64:	4a59      	ldr	r2, [pc, #356]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd66:	f023 0301 	bic.w	r3, r3, #1
 800cd6a:	6713      	str	r3, [r2, #112]	; 0x70
 800cd6c:	4b57      	ldr	r3, [pc, #348]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd70:	4a56      	ldr	r2, [pc, #344]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cd72:	f023 0304 	bic.w	r3, r3, #4
 800cd76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d015      	beq.n	800cdac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd80:	f7fc fe86 	bl	8009a90 <HAL_GetTick>
 800cd84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd86:	e00a      	b.n	800cd9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd88:	f7fc fe82 	bl	8009a90 <HAL_GetTick>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d901      	bls.n	800cd9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e0d7      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd9e:	4b4b      	ldr	r3, [pc, #300]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cda0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda2:	f003 0302 	and.w	r3, r3, #2
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0ee      	beq.n	800cd88 <HAL_RCC_OscConfig+0x368>
 800cdaa:	e014      	b.n	800cdd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdac:	f7fc fe70 	bl	8009a90 <HAL_GetTick>
 800cdb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdb2:	e00a      	b.n	800cdca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdb4:	f7fc fe6c 	bl	8009a90 <HAL_GetTick>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d901      	bls.n	800cdca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e0c1      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdca:	4b40      	ldr	r3, [pc, #256]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1ee      	bne.n	800cdb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d105      	bne.n	800cde8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cddc:	4b3b      	ldr	r3, [pc, #236]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde0:	4a3a      	ldr	r2, [pc, #232]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cde2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cde6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	699b      	ldr	r3, [r3, #24]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 80ad 	beq.w	800cf4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cdf2:	4b36      	ldr	r3, [pc, #216]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	f003 030c 	and.w	r3, r3, #12
 800cdfa:	2b08      	cmp	r3, #8
 800cdfc:	d060      	beq.n	800cec0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d145      	bne.n	800ce92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce06:	4b33      	ldr	r3, [pc, #204]	; (800ced4 <HAL_RCC_OscConfig+0x4b4>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce0c:	f7fc fe40 	bl	8009a90 <HAL_GetTick>
 800ce10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce12:	e008      	b.n	800ce26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce14:	f7fc fe3c 	bl	8009a90 <HAL_GetTick>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d901      	bls.n	800ce26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ce22:	2303      	movs	r3, #3
 800ce24:	e093      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce26:	4b29      	ldr	r3, [pc, #164]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1f0      	bne.n	800ce14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	69da      	ldr	r2, [r3, #28]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	019b      	lsls	r3, r3, #6
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce48:	085b      	lsrs	r3, r3, #1
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	041b      	lsls	r3, r3, #16
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce54:	061b      	lsls	r3, r3, #24
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5c:	071b      	lsls	r3, r3, #28
 800ce5e:	491b      	ldr	r1, [pc, #108]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce64:	4b1b      	ldr	r3, [pc, #108]	; (800ced4 <HAL_RCC_OscConfig+0x4b4>)
 800ce66:	2201      	movs	r2, #1
 800ce68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce6a:	f7fc fe11 	bl	8009a90 <HAL_GetTick>
 800ce6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce70:	e008      	b.n	800ce84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce72:	f7fc fe0d 	bl	8009a90 <HAL_GetTick>
 800ce76:	4602      	mov	r2, r0
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d901      	bls.n	800ce84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ce80:	2303      	movs	r3, #3
 800ce82:	e064      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce84:	4b11      	ldr	r3, [pc, #68]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d0f0      	beq.n	800ce72 <HAL_RCC_OscConfig+0x452>
 800ce90:	e05c      	b.n	800cf4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce92:	4b10      	ldr	r3, [pc, #64]	; (800ced4 <HAL_RCC_OscConfig+0x4b4>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce98:	f7fc fdfa 	bl	8009a90 <HAL_GetTick>
 800ce9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce9e:	e008      	b.n	800ceb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cea0:	f7fc fdf6 	bl	8009a90 <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e04d      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ceb2:	4b06      	ldr	r3, [pc, #24]	; (800cecc <HAL_RCC_OscConfig+0x4ac>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f0      	bne.n	800cea0 <HAL_RCC_OscConfig+0x480>
 800cebe:	e045      	b.n	800cf4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	699b      	ldr	r3, [r3, #24]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d107      	bne.n	800ced8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e040      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
 800cecc:	40023800 	.word	0x40023800
 800ced0:	40007000 	.word	0x40007000
 800ced4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ced8:	4b1f      	ldr	r3, [pc, #124]	; (800cf58 <HAL_RCC_OscConfig+0x538>)
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d030      	beq.n	800cf48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d129      	bne.n	800cf48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d122      	bne.n	800cf48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cf08:	4013      	ands	r3, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cf0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d119      	bne.n	800cf48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1e:	085b      	lsrs	r3, r3, #1
 800cf20:	3b01      	subs	r3, #1
 800cf22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d10f      	bne.n	800cf48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d107      	bne.n	800cf48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d001      	beq.n	800cf4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e000      	b.n	800cf4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	40023800 	.word	0x40023800

0800cf5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e07b      	b.n	800d066 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d108      	bne.n	800cf88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf7e:	d009      	beq.n	800cf94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	61da      	str	r2, [r3, #28]
 800cf86:	e005      	b.n	800cf94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d106      	bne.n	800cfb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7f9 fafe 	bl	80065b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cfdc:	431a      	orrs	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	431a      	orrs	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	431a      	orrs	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d004:	431a      	orrs	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	69db      	ldr	r3, [r3, #28]
 800d00a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6a1b      	ldr	r3, [r3, #32]
 800d014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d018:	ea42 0103 	orr.w	r1, r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d020:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	430a      	orrs	r2, r1
 800d02a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	0c1b      	lsrs	r3, r3, #16
 800d032:	f003 0104 	and.w	r1, r3, #4
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03a:	f003 0210 	and.w	r2, r3, #16
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	430a      	orrs	r2, r1
 800d044:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	69da      	ldr	r2, [r3, #28]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d054:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b088      	sub	sp, #32
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	603b      	str	r3, [r7, #0]
 800d07a:	4613      	mov	r3, r2
 800d07c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d101      	bne.n	800d090 <HAL_SPI_Transmit+0x22>
 800d08c:	2302      	movs	r3, #2
 800d08e:	e126      	b.n	800d2de <HAL_SPI_Transmit+0x270>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d098:	f7fc fcfa 	bl	8009a90 <HAL_GetTick>
 800d09c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d09e:	88fb      	ldrh	r3, [r7, #6]
 800d0a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d002      	beq.n	800d0b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0b2:	e10b      	b.n	800d2cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <HAL_SPI_Transmit+0x52>
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0c4:	e102      	b.n	800d2cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	88fa      	ldrh	r2, [r7, #6]
 800d0de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	88fa      	ldrh	r2, [r7, #6]
 800d0e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d10c:	d10f      	bne.n	800d12e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d11c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d12c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d138:	2b40      	cmp	r3, #64	; 0x40
 800d13a:	d007      	beq.n	800d14c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d14a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d154:	d14b      	bne.n	800d1ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <HAL_SPI_Transmit+0xf6>
 800d15e:	8afb      	ldrh	r3, [r7, #22]
 800d160:	2b01      	cmp	r3, #1
 800d162:	d13e      	bne.n	800d1e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d168:	881a      	ldrh	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d174:	1c9a      	adds	r2, r3, #2
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d17e:	b29b      	uxth	r3, r3
 800d180:	3b01      	subs	r3, #1
 800d182:	b29a      	uxth	r2, r3
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d188:	e02b      	b.n	800d1e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	f003 0302 	and.w	r3, r3, #2
 800d194:	2b02      	cmp	r3, #2
 800d196:	d112      	bne.n	800d1be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19c:	881a      	ldrh	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a8:	1c9a      	adds	r2, r3, #2
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	86da      	strh	r2, [r3, #54]	; 0x36
 800d1bc:	e011      	b.n	800d1e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1be:	f7fc fc67 	bl	8009a90 <HAL_GetTick>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d803      	bhi.n	800d1d6 <HAL_SPI_Transmit+0x168>
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1d4:	d102      	bne.n	800d1dc <HAL_SPI_Transmit+0x16e>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d102      	bne.n	800d1e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d1e0:	e074      	b.n	800d2cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1ce      	bne.n	800d18a <HAL_SPI_Transmit+0x11c>
 800d1ec:	e04c      	b.n	800d288 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d002      	beq.n	800d1fc <HAL_SPI_Transmit+0x18e>
 800d1f6:	8afb      	ldrh	r3, [r7, #22]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d140      	bne.n	800d27e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	330c      	adds	r3, #12
 800d206:	7812      	ldrb	r2, [r2, #0]
 800d208:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d222:	e02c      	b.n	800d27e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f003 0302 	and.w	r3, r3, #2
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d113      	bne.n	800d25a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	330c      	adds	r3, #12
 800d23c:	7812      	ldrb	r2, [r2, #0]
 800d23e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d24e:	b29b      	uxth	r3, r3
 800d250:	3b01      	subs	r3, #1
 800d252:	b29a      	uxth	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	86da      	strh	r2, [r3, #54]	; 0x36
 800d258:	e011      	b.n	800d27e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d25a:	f7fc fc19 	bl	8009a90 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	d803      	bhi.n	800d272 <HAL_SPI_Transmit+0x204>
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d270:	d102      	bne.n	800d278 <HAL_SPI_Transmit+0x20a>
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d102      	bne.n	800d27e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d278:	2303      	movs	r3, #3
 800d27a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d27c:	e026      	b.n	800d2cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d282:	b29b      	uxth	r3, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1cd      	bne.n	800d224 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d288:	69ba      	ldr	r2, [r7, #24]
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f000 fafd 	bl	800d88c <SPI_EndRxTxTransaction>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d002      	beq.n	800d29e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2220      	movs	r2, #32
 800d29c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10a      	bne.n	800d2bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	613b      	str	r3, [r7, #16]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	613b      	str	r3, [r7, #16]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	613b      	str	r3, [r7, #16]
 800d2ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	77fb      	strb	r3, [r7, #31]
 800d2c8:	e000      	b.n	800d2cc <HAL_SPI_Transmit+0x25e>
  }

error:
 800d2ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d2dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3720      	adds	r7, #32
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d300:	2b01      	cmp	r3, #1
 800d302:	d101      	bne.n	800d308 <HAL_SPI_Transmit_DMA+0x20>
 800d304:	2302      	movs	r3, #2
 800d306:	e09b      	b.n	800d440 <HAL_SPI_Transmit_DMA+0x158>
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d002      	beq.n	800d322 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d31c:	2302      	movs	r3, #2
 800d31e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d320:	e089      	b.n	800d436 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <HAL_SPI_Transmit_DMA+0x46>
 800d328:	88fb      	ldrh	r3, [r7, #6]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d332:	e080      	b.n	800d436 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2203      	movs	r2, #3
 800d338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	88fa      	ldrh	r2, [r7, #6]
 800d34c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	88fa      	ldrh	r2, [r7, #6]
 800d352:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d37a:	d10f      	bne.n	800d39c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d38a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d39a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a0:	4a29      	ldr	r2, [pc, #164]	; (800d448 <HAL_SPI_Transmit_DMA+0x160>)
 800d3a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a8:	4a28      	ldr	r2, [pc, #160]	; (800d44c <HAL_SPI_Transmit_DMA+0x164>)
 800d3aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b0:	4a27      	ldr	r2, [pc, #156]	; (800d450 <HAL_SPI_Transmit_DMA+0x168>)
 800d3b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	330c      	adds	r3, #12
 800d3cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d3d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d3d4:	f7fd f950 	bl	800a678 <HAL_DMA_Start_IT>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00c      	beq.n	800d3f8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e2:	f043 0210 	orr.w	r2, r3, #16
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d3f6:	e01e      	b.n	800d436 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d402:	2b40      	cmp	r3, #64	; 0x40
 800d404:	d007      	beq.n	800d416 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d414:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f042 0220 	orr.w	r2, r2, #32
 800d424:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f042 0202 	orr.w	r2, r2, #2
 800d434:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	0800d6f9 	.word	0x0800d6f9
 800d44c:	0800d651 	.word	0x0800d651
 800d450:	0800d715 	.word	0x0800d715

0800d454 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10e      	bne.n	800d494 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d009      	beq.n	800d494 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d486:	2b00      	cmp	r3, #0
 800d488:	d004      	beq.n	800d494 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	4798      	blx	r3
    return;
 800d492:	e0ce      	b.n	800d632 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d009      	beq.n	800d4b2 <HAL_SPI_IRQHandler+0x5e>
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	4798      	blx	r3
    return;
 800d4b0:	e0bf      	b.n	800d632 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	f003 0320 	and.w	r3, r3, #32
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10a      	bne.n	800d4d2 <HAL_SPI_IRQHandler+0x7e>
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d105      	bne.n	800d4d2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 80b0 	beq.w	800d632 <HAL_SPI_IRQHandler+0x1de>
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	f003 0320 	and.w	r3, r3, #32
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 80aa 	beq.w	800d632 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d023      	beq.n	800d530 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d011      	beq.n	800d518 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f8:	f043 0204 	orr.w	r2, r3, #4
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d500:	2300      	movs	r3, #0
 800d502:	617b      	str	r3, [r7, #20]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	617b      	str	r3, [r7, #20]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	617b      	str	r3, [r7, #20]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	e00b      	b.n	800d530 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d518:	2300      	movs	r3, #0
 800d51a:	613b      	str	r3, [r7, #16]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	613b      	str	r3, [r7, #16]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	613b      	str	r3, [r7, #16]
 800d52c:	693b      	ldr	r3, [r7, #16]
        return;
 800d52e:	e080      	b.n	800d632 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	f003 0320 	and.w	r3, r3, #32
 800d536:	2b00      	cmp	r3, #0
 800d538:	d014      	beq.n	800d564 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d53e:	f043 0201 	orr.w	r2, r3, #1
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d546:	2300      	movs	r3, #0
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00c      	beq.n	800d588 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d572:	f043 0208 	orr.w	r2, r3, #8
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d57a:	2300      	movs	r3, #0
 800d57c:	60bb      	str	r3, [r7, #8]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	60bb      	str	r3, [r7, #8]
 800d586:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d04f      	beq.n	800d630 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d59e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d104      	bne.n	800d5bc <HAL_SPI_IRQHandler+0x168>
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d034      	beq.n	800d626 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685a      	ldr	r2, [r3, #4]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f022 0203 	bic.w	r2, r2, #3
 800d5ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d011      	beq.n	800d5f8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5d8:	4a17      	ldr	r2, [pc, #92]	; (800d638 <HAL_SPI_IRQHandler+0x1e4>)
 800d5da:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd f911 	bl	800a808 <HAL_DMA_Abort_IT>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d005      	beq.n	800d5f8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d016      	beq.n	800d62e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d604:	4a0c      	ldr	r2, [pc, #48]	; (800d638 <HAL_SPI_IRQHandler+0x1e4>)
 800d606:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fd f8fb 	bl	800a808 <HAL_DMA_Abort_IT>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00a      	beq.n	800d62e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d61c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d624:	e003      	b.n	800d62e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7fa fb1a 	bl	8007c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d62c:	e000      	b.n	800d630 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d62e:	bf00      	nop
    return;
 800d630:	bf00      	nop
  }
}
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	0800d755 	.word	0x0800d755

0800d63c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d65e:	f7fc fa17 	bl	8009a90 <HAL_GetTick>
 800d662:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d672:	d03b      	beq.n	800d6ec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f022 0220 	bic.w	r2, r2, #32
 800d682:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f022 0202 	bic.w	r2, r2, #2
 800d692:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	2164      	movs	r1, #100	; 0x64
 800d698:	6978      	ldr	r0, [r7, #20]
 800d69a:	f000 f8f7 	bl	800d88c <SPI_EndRxTxTransaction>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d005      	beq.n	800d6b0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6a8:	f043 0220 	orr.w	r2, r3, #32
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10a      	bne.n	800d6ce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d6e4:	6978      	ldr	r0, [r7, #20]
 800d6e6:	f7fa fabb 	bl	8007c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d6ea:	e002      	b.n	800d6f2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d6ec:	6978      	ldr	r0, [r7, #20]
 800d6ee:	f7fa facd 	bl	8007c8c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d6f2:	3718      	adds	r7, #24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d704:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7ff ff98 	bl	800d63c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d70c:	bf00      	nop
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	685a      	ldr	r2, [r3, #4]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 0203 	bic.w	r2, r2, #3
 800d730:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d736:	f043 0210 	orr.w	r2, r3, #16
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f7fa fa8a 	bl	8007c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d74c:	bf00      	nop
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d760:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f7fa fa76 	bl	8007c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d774:	bf00      	nop
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	4613      	mov	r3, r2
 800d78a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d78c:	f7fc f980 	bl	8009a90 <HAL_GetTick>
 800d790:	4602      	mov	r2, r0
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	1a9b      	subs	r3, r3, r2
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	4413      	add	r3, r2
 800d79a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d79c:	f7fc f978 	bl	8009a90 <HAL_GetTick>
 800d7a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d7a2:	4b39      	ldr	r3, [pc, #228]	; (800d888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	015b      	lsls	r3, r3, #5
 800d7a8:	0d1b      	lsrs	r3, r3, #20
 800d7aa:	69fa      	ldr	r2, [r7, #28]
 800d7ac:	fb02 f303 	mul.w	r3, r2, r3
 800d7b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d7b2:	e054      	b.n	800d85e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ba:	d050      	beq.n	800d85e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d7bc:	f7fc f968 	bl	8009a90 <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	69fa      	ldr	r2, [r7, #28]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d902      	bls.n	800d7d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d13d      	bne.n	800d84e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d7e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7ea:	d111      	bne.n	800d810 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7f4:	d004      	beq.n	800d800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7fe:	d107      	bne.n	800d810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d80e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d818:	d10f      	bne.n	800d83a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d84a:	2303      	movs	r3, #3
 800d84c:	e017      	b.n	800d87e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d854:	2300      	movs	r3, #0
 800d856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	3b01      	subs	r3, #1
 800d85c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689a      	ldr	r2, [r3, #8]
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4013      	ands	r3, r2
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	bf0c      	ite	eq
 800d86e:	2301      	moveq	r3, #1
 800d870:	2300      	movne	r3, #0
 800d872:	b2db      	uxtb	r3, r3
 800d874:	461a      	mov	r2, r3
 800d876:	79fb      	ldrb	r3, [r7, #7]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d19b      	bne.n	800d7b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3720      	adds	r7, #32
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	2000003c 	.word	0x2000003c

0800d88c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af02      	add	r7, sp, #8
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d898:	4b1b      	ldr	r3, [pc, #108]	; (800d908 <SPI_EndRxTxTransaction+0x7c>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a1b      	ldr	r2, [pc, #108]	; (800d90c <SPI_EndRxTxTransaction+0x80>)
 800d89e:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a2:	0d5b      	lsrs	r3, r3, #21
 800d8a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8a8:	fb02 f303 	mul.w	r3, r2, r3
 800d8ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8b6:	d112      	bne.n	800d8de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2180      	movs	r1, #128	; 0x80
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f7ff ff5a 	bl	800d77c <SPI_WaitFlagStateUntilTimeout>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d016      	beq.n	800d8fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d2:	f043 0220 	orr.w	r2, r3, #32
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d8da:	2303      	movs	r3, #3
 800d8dc:	e00f      	b.n	800d8fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f4:	2b80      	cmp	r3, #128	; 0x80
 800d8f6:	d0f2      	beq.n	800d8de <SPI_EndRxTxTransaction+0x52>
 800d8f8:	e000      	b.n	800d8fc <SPI_EndRxTxTransaction+0x70>
        break;
 800d8fa:	bf00      	nop
  }

  return HAL_OK;
 800d8fc:	2300      	movs	r3, #0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	2000003c 	.word	0x2000003c
 800d90c:	165e9f81 	.word	0x165e9f81

0800d910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e041      	b.n	800d9a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d106      	bne.n	800d93c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7f8 fedc 	bl	80066f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2202      	movs	r2, #2
 800d940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4619      	mov	r1, r3
 800d94e:	4610      	mov	r0, r2
 800d950:	f000 fa96 	bl	800de80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2201      	movs	r2, #1
 800d970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
	...

0800d9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d001      	beq.n	800d9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e04e      	b.n	800da66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f042 0201 	orr.w	r2, r2, #1
 800d9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a23      	ldr	r2, [pc, #140]	; (800da74 <HAL_TIM_Base_Start_IT+0xc4>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d022      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9f2:	d01d      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a1f      	ldr	r2, [pc, #124]	; (800da78 <HAL_TIM_Base_Start_IT+0xc8>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d018      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a1e      	ldr	r2, [pc, #120]	; (800da7c <HAL_TIM_Base_Start_IT+0xcc>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d013      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a1c      	ldr	r2, [pc, #112]	; (800da80 <HAL_TIM_Base_Start_IT+0xd0>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d00e      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a1b      	ldr	r2, [pc, #108]	; (800da84 <HAL_TIM_Base_Start_IT+0xd4>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d009      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a19      	ldr	r2, [pc, #100]	; (800da88 <HAL_TIM_Base_Start_IT+0xd8>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d004      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a18      	ldr	r2, [pc, #96]	; (800da8c <HAL_TIM_Base_Start_IT+0xdc>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d111      	bne.n	800da54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b06      	cmp	r3, #6
 800da40:	d010      	beq.n	800da64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f042 0201 	orr.w	r2, r2, #1
 800da50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da52:	e007      	b.n	800da64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f042 0201 	orr.w	r2, r2, #1
 800da62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	40010000 	.word	0x40010000
 800da78:	40000400 	.word	0x40000400
 800da7c:	40000800 	.word	0x40000800
 800da80:	40000c00 	.word	0x40000c00
 800da84:	40010400 	.word	0x40010400
 800da88:	40014000 	.word	0x40014000
 800da8c:	40001800 	.word	0x40001800

0800da90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d122      	bne.n	800daec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	f003 0302 	and.w	r3, r3, #2
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d11b      	bne.n	800daec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f06f 0202 	mvn.w	r2, #2
 800dabc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	f003 0303 	and.w	r3, r3, #3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f9b5 	bl	800de42 <HAL_TIM_IC_CaptureCallback>
 800dad8:	e005      	b.n	800dae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f9a7 	bl	800de2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 f9b8 	bl	800de56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	f003 0304 	and.w	r3, r3, #4
 800daf6:	2b04      	cmp	r3, #4
 800daf8:	d122      	bne.n	800db40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	f003 0304 	and.w	r3, r3, #4
 800db04:	2b04      	cmp	r3, #4
 800db06:	d11b      	bne.n	800db40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f06f 0204 	mvn.w	r2, #4
 800db10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2202      	movs	r2, #2
 800db16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f98b 	bl	800de42 <HAL_TIM_IC_CaptureCallback>
 800db2c:	e005      	b.n	800db3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f97d 	bl	800de2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 f98e 	bl	800de56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	f003 0308 	and.w	r3, r3, #8
 800db4a:	2b08      	cmp	r3, #8
 800db4c:	d122      	bne.n	800db94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	f003 0308 	and.w	r3, r3, #8
 800db58:	2b08      	cmp	r3, #8
 800db5a:	d11b      	bne.n	800db94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f06f 0208 	mvn.w	r2, #8
 800db64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2204      	movs	r2, #4
 800db6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	69db      	ldr	r3, [r3, #28]
 800db72:	f003 0303 	and.w	r3, r3, #3
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f961 	bl	800de42 <HAL_TIM_IC_CaptureCallback>
 800db80:	e005      	b.n	800db8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f953 	bl	800de2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f964 	bl	800de56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	f003 0310 	and.w	r3, r3, #16
 800db9e:	2b10      	cmp	r3, #16
 800dba0:	d122      	bne.n	800dbe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	f003 0310 	and.w	r3, r3, #16
 800dbac:	2b10      	cmp	r3, #16
 800dbae:	d11b      	bne.n	800dbe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f06f 0210 	mvn.w	r2, #16
 800dbb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2208      	movs	r2, #8
 800dbbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	69db      	ldr	r3, [r3, #28]
 800dbc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d003      	beq.n	800dbd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f937 	bl	800de42 <HAL_TIM_IC_CaptureCallback>
 800dbd4:	e005      	b.n	800dbe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f929 	bl	800de2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f93a 	bl	800de56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d10e      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	f003 0301 	and.w	r3, r3, #1
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d107      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f06f 0201 	mvn.w	r2, #1
 800dc0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7f8 f9ec 	bl	8005fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc1e:	2b80      	cmp	r3, #128	; 0x80
 800dc20:	d10e      	bne.n	800dc40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc2c:	2b80      	cmp	r3, #128	; 0x80
 800dc2e:	d107      	bne.n	800dc40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 fae0 	bl	800e200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4a:	2b40      	cmp	r3, #64	; 0x40
 800dc4c:	d10e      	bne.n	800dc6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc58:	2b40      	cmp	r3, #64	; 0x40
 800dc5a:	d107      	bne.n	800dc6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f8ff 	bl	800de6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	f003 0320 	and.w	r3, r3, #32
 800dc76:	2b20      	cmp	r3, #32
 800dc78:	d10e      	bne.n	800dc98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	f003 0320 	and.w	r3, r3, #32
 800dc84:	2b20      	cmp	r3, #32
 800dc86:	d107      	bne.n	800dc98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f06f 0220 	mvn.w	r2, #32
 800dc90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 faaa 	bl	800e1ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d101      	bne.n	800dcbc <HAL_TIM_ConfigClockSource+0x1c>
 800dcb8:	2302      	movs	r3, #2
 800dcba:	e0b4      	b.n	800de26 <HAL_TIM_ConfigClockSource+0x186>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dcda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68ba      	ldr	r2, [r7, #8]
 800dcea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcf4:	d03e      	beq.n	800dd74 <HAL_TIM_ConfigClockSource+0xd4>
 800dcf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcfa:	f200 8087 	bhi.w	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dcfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd02:	f000 8086 	beq.w	800de12 <HAL_TIM_ConfigClockSource+0x172>
 800dd06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd0a:	d87f      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd0c:	2b70      	cmp	r3, #112	; 0x70
 800dd0e:	d01a      	beq.n	800dd46 <HAL_TIM_ConfigClockSource+0xa6>
 800dd10:	2b70      	cmp	r3, #112	; 0x70
 800dd12:	d87b      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd14:	2b60      	cmp	r3, #96	; 0x60
 800dd16:	d050      	beq.n	800ddba <HAL_TIM_ConfigClockSource+0x11a>
 800dd18:	2b60      	cmp	r3, #96	; 0x60
 800dd1a:	d877      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd1c:	2b50      	cmp	r3, #80	; 0x50
 800dd1e:	d03c      	beq.n	800dd9a <HAL_TIM_ConfigClockSource+0xfa>
 800dd20:	2b50      	cmp	r3, #80	; 0x50
 800dd22:	d873      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd24:	2b40      	cmp	r3, #64	; 0x40
 800dd26:	d058      	beq.n	800ddda <HAL_TIM_ConfigClockSource+0x13a>
 800dd28:	2b40      	cmp	r3, #64	; 0x40
 800dd2a:	d86f      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd2c:	2b30      	cmp	r3, #48	; 0x30
 800dd2e:	d064      	beq.n	800ddfa <HAL_TIM_ConfigClockSource+0x15a>
 800dd30:	2b30      	cmp	r3, #48	; 0x30
 800dd32:	d86b      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd34:	2b20      	cmp	r3, #32
 800dd36:	d060      	beq.n	800ddfa <HAL_TIM_ConfigClockSource+0x15a>
 800dd38:	2b20      	cmp	r3, #32
 800dd3a:	d867      	bhi.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d05c      	beq.n	800ddfa <HAL_TIM_ConfigClockSource+0x15a>
 800dd40:	2b10      	cmp	r3, #16
 800dd42:	d05a      	beq.n	800ddfa <HAL_TIM_ConfigClockSource+0x15a>
 800dd44:	e062      	b.n	800de0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6818      	ldr	r0, [r3, #0]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	6899      	ldr	r1, [r3, #8]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	685a      	ldr	r2, [r3, #4]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	f000 f9ad 	bl	800e0b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dd68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	609a      	str	r2, [r3, #8]
      break;
 800dd72:	e04f      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6818      	ldr	r0, [r3, #0]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	6899      	ldr	r1, [r3, #8]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	f000 f996 	bl	800e0b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	689a      	ldr	r2, [r3, #8]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd96:	609a      	str	r2, [r3, #8]
      break;
 800dd98:	e03c      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6818      	ldr	r0, [r3, #0]
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	6859      	ldr	r1, [r3, #4]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	461a      	mov	r2, r3
 800dda8:	f000 f90a 	bl	800dfc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2150      	movs	r1, #80	; 0x50
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 f963 	bl	800e07e <TIM_ITRx_SetConfig>
      break;
 800ddb8:	e02c      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6818      	ldr	r0, [r3, #0]
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	6859      	ldr	r1, [r3, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f000 f929 	bl	800e01e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2160      	movs	r1, #96	; 0x60
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 f953 	bl	800e07e <TIM_ITRx_SetConfig>
      break;
 800ddd8:	e01c      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	6859      	ldr	r1, [r3, #4]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	461a      	mov	r2, r3
 800dde8:	f000 f8ea 	bl	800dfc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2140      	movs	r1, #64	; 0x40
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f000 f943 	bl	800e07e <TIM_ITRx_SetConfig>
      break;
 800ddf8:	e00c      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4619      	mov	r1, r3
 800de04:	4610      	mov	r0, r2
 800de06:	f000 f93a 	bl	800e07e <TIM_ITRx_SetConfig>
      break;
 800de0a:	e003      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	73fb      	strb	r3, [r7, #15]
      break;
 800de10:	e000      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800de12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800de24:	7bfb      	ldrb	r3, [r7, #15]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de2e:	b480      	push	{r7}
 800de30:	b083      	sub	sp, #12
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de36:	bf00      	nop
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de42:	b480      	push	{r7}
 800de44:	b083      	sub	sp, #12
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de4a:	bf00      	nop
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de56:	b480      	push	{r7}
 800de58:	b083      	sub	sp, #12
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de5e:	bf00      	nop
 800de60:	370c      	adds	r7, #12
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b083      	sub	sp, #12
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de72:	bf00      	nop
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
	...

0800de80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a40      	ldr	r2, [pc, #256]	; (800df94 <TIM_Base_SetConfig+0x114>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d013      	beq.n	800dec0 <TIM_Base_SetConfig+0x40>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de9e:	d00f      	beq.n	800dec0 <TIM_Base_SetConfig+0x40>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a3d      	ldr	r2, [pc, #244]	; (800df98 <TIM_Base_SetConfig+0x118>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d00b      	beq.n	800dec0 <TIM_Base_SetConfig+0x40>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a3c      	ldr	r2, [pc, #240]	; (800df9c <TIM_Base_SetConfig+0x11c>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d007      	beq.n	800dec0 <TIM_Base_SetConfig+0x40>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a3b      	ldr	r2, [pc, #236]	; (800dfa0 <TIM_Base_SetConfig+0x120>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d003      	beq.n	800dec0 <TIM_Base_SetConfig+0x40>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a3a      	ldr	r2, [pc, #232]	; (800dfa4 <TIM_Base_SetConfig+0x124>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d108      	bne.n	800ded2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	4313      	orrs	r3, r2
 800ded0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a2f      	ldr	r2, [pc, #188]	; (800df94 <TIM_Base_SetConfig+0x114>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d02b      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dee0:	d027      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a2c      	ldr	r2, [pc, #176]	; (800df98 <TIM_Base_SetConfig+0x118>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d023      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a2b      	ldr	r2, [pc, #172]	; (800df9c <TIM_Base_SetConfig+0x11c>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d01f      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a2a      	ldr	r2, [pc, #168]	; (800dfa0 <TIM_Base_SetConfig+0x120>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d01b      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a29      	ldr	r2, [pc, #164]	; (800dfa4 <TIM_Base_SetConfig+0x124>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d017      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a28      	ldr	r2, [pc, #160]	; (800dfa8 <TIM_Base_SetConfig+0x128>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d013      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4a27      	ldr	r2, [pc, #156]	; (800dfac <TIM_Base_SetConfig+0x12c>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d00f      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a26      	ldr	r2, [pc, #152]	; (800dfb0 <TIM_Base_SetConfig+0x130>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d00b      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a25      	ldr	r2, [pc, #148]	; (800dfb4 <TIM_Base_SetConfig+0x134>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d007      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a24      	ldr	r2, [pc, #144]	; (800dfb8 <TIM_Base_SetConfig+0x138>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d003      	beq.n	800df32 <TIM_Base_SetConfig+0xb2>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4a23      	ldr	r2, [pc, #140]	; (800dfbc <TIM_Base_SetConfig+0x13c>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d108      	bne.n	800df44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	4313      	orrs	r3, r2
 800df42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	4313      	orrs	r3, r2
 800df50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	689a      	ldr	r2, [r3, #8]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a0a      	ldr	r2, [pc, #40]	; (800df94 <TIM_Base_SetConfig+0x114>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d003      	beq.n	800df78 <TIM_Base_SetConfig+0xf8>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4a0c      	ldr	r2, [pc, #48]	; (800dfa4 <TIM_Base_SetConfig+0x124>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d103      	bne.n	800df80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	691a      	ldr	r2, [r3, #16]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	615a      	str	r2, [r3, #20]
}
 800df86:	bf00      	nop
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	40010000 	.word	0x40010000
 800df98:	40000400 	.word	0x40000400
 800df9c:	40000800 	.word	0x40000800
 800dfa0:	40000c00 	.word	0x40000c00
 800dfa4:	40010400 	.word	0x40010400
 800dfa8:	40014000 	.word	0x40014000
 800dfac:	40014400 	.word	0x40014400
 800dfb0:	40014800 	.word	0x40014800
 800dfb4:	40001800 	.word	0x40001800
 800dfb8:	40001c00 	.word	0x40001c00
 800dfbc:	40002000 	.word	0x40002000

0800dfc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b087      	sub	sp, #28
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	f023 0201 	bic.w	r2, r3, #1
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	011b      	lsls	r3, r3, #4
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	f023 030a 	bic.w	r3, r3, #10
 800dffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	4313      	orrs	r3, r2
 800e004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	621a      	str	r2, [r3, #32]
}
 800e012:	bf00      	nop
 800e014:	371c      	adds	r7, #28
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e01e:	b480      	push	{r7}
 800e020:	b087      	sub	sp, #28
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	f023 0210 	bic.w	r2, r3, #16
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	699b      	ldr	r3, [r3, #24]
 800e03a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6a1b      	ldr	r3, [r3, #32]
 800e040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	031b      	lsls	r3, r3, #12
 800e04e:	697a      	ldr	r2, [r7, #20]
 800e050:	4313      	orrs	r3, r2
 800e052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e05a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	011b      	lsls	r3, r3, #4
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	4313      	orrs	r3, r2
 800e064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	621a      	str	r2, [r3, #32]
}
 800e072:	bf00      	nop
 800e074:	371c      	adds	r7, #28
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e07e:	b480      	push	{r7}
 800e080:	b085      	sub	sp, #20
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f043 0307 	orr.w	r3, r3, #7
 800e0a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	609a      	str	r2, [r3, #8]
}
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b087      	sub	sp, #28
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e0ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	021a      	lsls	r2, r3, #8
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	431a      	orrs	r2, r3
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	609a      	str	r2, [r3, #8]
}
 800e0e8:	bf00      	nop
 800e0ea:	371c      	adds	r7, #28
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e104:	2b01      	cmp	r3, #1
 800e106:	d101      	bne.n	800e10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e108:	2302      	movs	r3, #2
 800e10a:	e05a      	b.n	800e1c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2202      	movs	r2, #2
 800e118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a21      	ldr	r2, [pc, #132]	; (800e1d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d022      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e158:	d01d      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a1d      	ldr	r2, [pc, #116]	; (800e1d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d018      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a1b      	ldr	r2, [pc, #108]	; (800e1d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d013      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a1a      	ldr	r2, [pc, #104]	; (800e1dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d00e      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a18      	ldr	r2, [pc, #96]	; (800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d009      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a17      	ldr	r2, [pc, #92]	; (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d004      	beq.n	800e196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a15      	ldr	r2, [pc, #84]	; (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d10c      	bne.n	800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e19c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3714      	adds	r7, #20
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	40010000 	.word	0x40010000
 800e1d4:	40000400 	.word	0x40000400
 800e1d8:	40000800 	.word	0x40000800
 800e1dc:	40000c00 	.word	0x40000c00
 800e1e0:	40010400 	.word	0x40010400
 800e1e4:	40014000 	.word	0x40014000
 800e1e8:	40001800 	.word	0x40001800

0800e1ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e03f      	b.n	800e2a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7f8 fa9e 	bl	800677c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2224      	movs	r2, #36	; 0x24
 800e244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	68da      	ldr	r2, [r3, #12]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fddf 	bl	800ee1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	691a      	ldr	r2, [r3, #16]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e26c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	695a      	ldr	r2, [r3, #20]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e27c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68da      	ldr	r2, [r3, #12]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e28c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2220      	movs	r2, #32
 800e298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2220      	movs	r2, #32
 800e2a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b08a      	sub	sp, #40	; 0x28
 800e2b2:	af02      	add	r7, sp, #8
 800e2b4:	60f8      	str	r0, [r7, #12]
 800e2b6:	60b9      	str	r1, [r7, #8]
 800e2b8:	603b      	str	r3, [r7, #0]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b20      	cmp	r3, #32
 800e2cc:	d17c      	bne.n	800e3c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <HAL_UART_Transmit+0x2c>
 800e2d4:	88fb      	ldrh	r3, [r7, #6]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e075      	b.n	800e3ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d101      	bne.n	800e2ec <HAL_UART_Transmit+0x3e>
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	e06e      	b.n	800e3ca <HAL_UART_Transmit+0x11c>
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2221      	movs	r2, #33	; 0x21
 800e2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e302:	f7fb fbc5 	bl	8009a90 <HAL_GetTick>
 800e306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	88fa      	ldrh	r2, [r7, #6]
 800e30c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	88fa      	ldrh	r2, [r7, #6]
 800e312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e31c:	d108      	bne.n	800e330 <HAL_UART_Transmit+0x82>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d104      	bne.n	800e330 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e326:	2300      	movs	r3, #0
 800e328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	61bb      	str	r3, [r7, #24]
 800e32e:	e003      	b.n	800e338 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e334:	2300      	movs	r3, #0
 800e336:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e340:	e02a      	b.n	800e398 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2200      	movs	r2, #0
 800e34a:	2180      	movs	r1, #128	; 0x80
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 fb1f 	bl	800e990 <UART_WaitOnFlagUntilTimeout>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e358:	2303      	movs	r3, #3
 800e35a:	e036      	b.n	800e3ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10b      	bne.n	800e37a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	3302      	adds	r3, #2
 800e376:	61bb      	str	r3, [r7, #24]
 800e378:	e007      	b.n	800e38a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	781a      	ldrb	r2, [r3, #0]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	3301      	adds	r3, #1
 800e388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e38e:	b29b      	uxth	r3, r3
 800e390:	3b01      	subs	r3, #1
 800e392:	b29a      	uxth	r2, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1cf      	bne.n	800e342 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	2140      	movs	r1, #64	; 0x40
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 faef 	bl	800e990 <UART_WaitOnFlagUntilTimeout>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	e006      	b.n	800e3ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2220      	movs	r2, #32
 800e3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e000      	b.n	800e3ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e3c8:	2302      	movs	r3, #2
  }
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3720      	adds	r7, #32
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	60f8      	str	r0, [r7, #12]
 800e3da:	60b9      	str	r1, [r7, #8]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b20      	cmp	r3, #32
 800e3ea:	d11d      	bne.n	800e428 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <HAL_UART_Receive_IT+0x26>
 800e3f2:	88fb      	ldrh	r3, [r7, #6]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e016      	b.n	800e42a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e402:	2b01      	cmp	r3, #1
 800e404:	d101      	bne.n	800e40a <HAL_UART_Receive_IT+0x38>
 800e406:	2302      	movs	r3, #2
 800e408:	e00f      	b.n	800e42a <HAL_UART_Receive_IT+0x58>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e418:	88fb      	ldrh	r3, [r7, #6]
 800e41a:	461a      	mov	r2, r3
 800e41c:	68b9      	ldr	r1, [r7, #8]
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f000 fb24 	bl	800ea6c <UART_Start_Receive_IT>
 800e424:	4603      	mov	r3, r0
 800e426:	e000      	b.n	800e42a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e428:	2302      	movs	r3, #2
  }
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b0ba      	sub	sp, #232	; 0xe8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e45a:	2300      	movs	r3, #0
 800e45c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e460:	2300      	movs	r3, #0
 800e462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e46a:	f003 030f 	and.w	r3, r3, #15
 800e46e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e476:	2b00      	cmp	r3, #0
 800e478:	d10f      	bne.n	800e49a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e47e:	f003 0320 	and.w	r3, r3, #32
 800e482:	2b00      	cmp	r3, #0
 800e484:	d009      	beq.n	800e49a <HAL_UART_IRQHandler+0x66>
 800e486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e48a:	f003 0320 	and.w	r3, r3, #32
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 fc07 	bl	800eca6 <UART_Receive_IT>
      return;
 800e498:	e256      	b.n	800e948 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e49a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f000 80de 	beq.w	800e660 <HAL_UART_IRQHandler+0x22c>
 800e4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4a8:	f003 0301 	and.w	r3, r3, #1
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d106      	bne.n	800e4be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f000 80d1 	beq.w	800e660 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00b      	beq.n	800e4e2 <HAL_UART_IRQHandler+0xae>
 800e4ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d005      	beq.n	800e4e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4da:	f043 0201 	orr.w	r2, r3, #1
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00b      	beq.n	800e506 <HAL_UART_IRQHandler+0xd2>
 800e4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d005      	beq.n	800e506 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4fe:	f043 0202 	orr.w	r2, r3, #2
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00b      	beq.n	800e52a <HAL_UART_IRQHandler+0xf6>
 800e512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d005      	beq.n	800e52a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e522:	f043 0204 	orr.w	r2, r3, #4
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e52e:	f003 0308 	and.w	r3, r3, #8
 800e532:	2b00      	cmp	r3, #0
 800e534:	d011      	beq.n	800e55a <HAL_UART_IRQHandler+0x126>
 800e536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e53a:	f003 0320 	and.w	r3, r3, #32
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d105      	bne.n	800e54e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d005      	beq.n	800e55a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e552:	f043 0208 	orr.w	r2, r3, #8
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 81ed 	beq.w	800e93e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e568:	f003 0320 	and.w	r3, r3, #32
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d008      	beq.n	800e582 <HAL_UART_IRQHandler+0x14e>
 800e570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e574:	f003 0320 	and.w	r3, r3, #32
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fb92 	bl	800eca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	695b      	ldr	r3, [r3, #20]
 800e588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e58c:	2b40      	cmp	r3, #64	; 0x40
 800e58e:	bf0c      	ite	eq
 800e590:	2301      	moveq	r3, #1
 800e592:	2300      	movne	r3, #0
 800e594:	b2db      	uxtb	r3, r3
 800e596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59e:	f003 0308 	and.w	r3, r3, #8
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d103      	bne.n	800e5ae <HAL_UART_IRQHandler+0x17a>
 800e5a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d04f      	beq.n	800e64e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fa9a 	bl	800eae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5be:	2b40      	cmp	r3, #64	; 0x40
 800e5c0:	d141      	bne.n	800e646 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3314      	adds	r3, #20
 800e5c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5d0:	e853 3f00 	ldrex	r3, [r3]
 800e5d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e5d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	3314      	adds	r3, #20
 800e5ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e5ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e5f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e5fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e5fe:	e841 2300 	strex	r3, r2, [r1]
 800e602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1d9      	bne.n	800e5c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e612:	2b00      	cmp	r3, #0
 800e614:	d013      	beq.n	800e63e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	4a7d      	ldr	r2, [pc, #500]	; (800e810 <HAL_UART_IRQHandler+0x3dc>)
 800e61c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e622:	4618      	mov	r0, r3
 800e624:	f7fc f8f0 	bl	800a808 <HAL_DMA_Abort_IT>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d016      	beq.n	800e65c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e638:	4610      	mov	r0, r2
 800e63a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e63c:	e00e      	b.n	800e65c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f990 	bl	800e964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e644:	e00a      	b.n	800e65c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f98c 	bl	800e964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e64c:	e006      	b.n	800e65c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 f988 	bl	800e964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e65a:	e170      	b.n	800e93e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e65c:	bf00      	nop
    return;
 800e65e:	e16e      	b.n	800e93e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e664:	2b01      	cmp	r3, #1
 800e666:	f040 814a 	bne.w	800e8fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e66e:	f003 0310 	and.w	r3, r3, #16
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 8143 	beq.w	800e8fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e67c:	f003 0310 	and.w	r3, r3, #16
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 813c 	beq.w	800e8fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e686:	2300      	movs	r3, #0
 800e688:	60bb      	str	r3, [r7, #8]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	60bb      	str	r3, [r7, #8]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	60bb      	str	r3, [r7, #8]
 800e69a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a6:	2b40      	cmp	r3, #64	; 0x40
 800e6a8:	f040 80b4 	bne.w	800e814 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e6b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8140 	beq.w	800e942 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e6c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	f080 8139 	bcs.w	800e942 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e6d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6dc:	69db      	ldr	r3, [r3, #28]
 800e6de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6e2:	f000 8088 	beq.w	800e7f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	330c      	adds	r3, #12
 800e6ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6f4:	e853 3f00 	ldrex	r3, [r3]
 800e6f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e6fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	330c      	adds	r3, #12
 800e70e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e71e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e722:	e841 2300 	strex	r3, r2, [r1]
 800e726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e72a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1d9      	bne.n	800e6e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3314      	adds	r3, #20
 800e738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e73c:	e853 3f00 	ldrex	r3, [r3]
 800e740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e744:	f023 0301 	bic.w	r3, r3, #1
 800e748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3314      	adds	r3, #20
 800e752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e756:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e75a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e75e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1e1      	bne.n	800e732 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3314      	adds	r3, #20
 800e774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e778:	e853 3f00 	ldrex	r3, [r3]
 800e77c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e77e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3314      	adds	r3, #20
 800e78e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e792:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e7a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1e3      	bne.n	800e76e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	330c      	adds	r3, #12
 800e7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7be:	e853 3f00 	ldrex	r3, [r3]
 800e7c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e7c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7c6:	f023 0310 	bic.w	r3, r3, #16
 800e7ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	330c      	adds	r3, #12
 800e7d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e7d8:	65ba      	str	r2, [r7, #88]	; 0x58
 800e7da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7e0:	e841 2300 	strex	r3, r2, [r1]
 800e7e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1e3      	bne.n	800e7b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fb ff99 	bl	800a728 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	b29b      	uxth	r3, r3
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f8b6 	bl	800e978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e80c:	e099      	b.n	800e942 <HAL_UART_IRQHandler+0x50e>
 800e80e:	bf00      	nop
 800e810:	0800ebaf 	.word	0x0800ebaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e828:	b29b      	uxth	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 808b 	beq.w	800e946 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 8086 	beq.w	800e946 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	330c      	adds	r3, #12
 800e840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	e853 3f00 	ldrex	r3, [r3]
 800e848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e84c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	330c      	adds	r3, #12
 800e85a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e85e:	647a      	str	r2, [r7, #68]	; 0x44
 800e860:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e866:	e841 2300 	strex	r3, r2, [r1]
 800e86a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1e3      	bne.n	800e83a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	3314      	adds	r3, #20
 800e878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	e853 3f00 	ldrex	r3, [r3]
 800e880:	623b      	str	r3, [r7, #32]
   return(result);
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	f023 0301 	bic.w	r3, r3, #1
 800e888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3314      	adds	r3, #20
 800e892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e896:	633a      	str	r2, [r7, #48]	; 0x30
 800e898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e3      	bne.n	800e872 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2220      	movs	r2, #32
 800e8ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	330c      	adds	r3, #12
 800e8be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	e853 3f00 	ldrex	r3, [r3]
 800e8c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f023 0310 	bic.w	r3, r3, #16
 800e8ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	330c      	adds	r3, #12
 800e8d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e8dc:	61fa      	str	r2, [r7, #28]
 800e8de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e0:	69b9      	ldr	r1, [r7, #24]
 800e8e2:	69fa      	ldr	r2, [r7, #28]
 800e8e4:	e841 2300 	strex	r3, r2, [r1]
 800e8e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1e3      	bne.n	800e8b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e8f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f83e 	bl	800e978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e8fc:	e023      	b.n	800e946 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e8fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e906:	2b00      	cmp	r3, #0
 800e908:	d009      	beq.n	800e91e <HAL_UART_IRQHandler+0x4ea>
 800e90a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f95d 	bl	800ebd6 <UART_Transmit_IT>
    return;
 800e91c:	e014      	b.n	800e948 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00e      	beq.n	800e948 <HAL_UART_IRQHandler+0x514>
 800e92a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e932:	2b00      	cmp	r3, #0
 800e934:	d008      	beq.n	800e948 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 f99d 	bl	800ec76 <UART_EndTransmit_IT>
    return;
 800e93c:	e004      	b.n	800e948 <HAL_UART_IRQHandler+0x514>
    return;
 800e93e:	bf00      	nop
 800e940:	e002      	b.n	800e948 <HAL_UART_IRQHandler+0x514>
      return;
 800e942:	bf00      	nop
 800e944:	e000      	b.n	800e948 <HAL_UART_IRQHandler+0x514>
      return;
 800e946:	bf00      	nop
  }
}
 800e948:	37e8      	adds	r7, #232	; 0xe8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop

0800e950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e958:	bf00      	nop
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b090      	sub	sp, #64	; 0x40
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	4613      	mov	r3, r2
 800e99e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9a0:	e050      	b.n	800ea44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a8:	d04c      	beq.n	800ea44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d007      	beq.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800e9b0:	f7fb f86e 	bl	8009a90 <HAL_GetTick>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d241      	bcs.n	800ea44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	330c      	adds	r3, #12
 800e9c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	e853 3f00 	ldrex	r3, [r3]
 800e9ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	330c      	adds	r3, #12
 800e9de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9e0:	637a      	str	r2, [r7, #52]	; 0x34
 800e9e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9e8:	e841 2300 	strex	r3, r2, [r1]
 800e9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1e5      	bne.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	3314      	adds	r3, #20
 800e9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	e853 3f00 	ldrex	r3, [r3]
 800ea02:	613b      	str	r3, [r7, #16]
   return(result);
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	f023 0301 	bic.w	r3, r3, #1
 800ea0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3314      	adds	r3, #20
 800ea12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea14:	623a      	str	r2, [r7, #32]
 800ea16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea18:	69f9      	ldr	r1, [r7, #28]
 800ea1a:	6a3a      	ldr	r2, [r7, #32]
 800ea1c:	e841 2300 	strex	r3, r2, [r1]
 800ea20:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1e5      	bne.n	800e9f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2220      	movs	r2, #32
 800ea2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2220      	movs	r2, #32
 800ea34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ea40:	2303      	movs	r3, #3
 800ea42:	e00f      	b.n	800ea64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	4013      	ands	r3, r2
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	bf0c      	ite	eq
 800ea54:	2301      	moveq	r3, #1
 800ea56:	2300      	movne	r3, #0
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d09f      	beq.n	800e9a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3740      	adds	r7, #64	; 0x40
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	4613      	mov	r3, r2
 800ea78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	88fa      	ldrh	r2, [r7, #6]
 800ea84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	88fa      	ldrh	r2, [r7, #6]
 800ea8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2222      	movs	r2, #34	; 0x22
 800ea96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d007      	beq.n	800eaba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	68da      	ldr	r2, [r3, #12]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eab8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	695a      	ldr	r2, [r3, #20]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f042 0201 	orr.w	r2, r2, #1
 800eac8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68da      	ldr	r2, [r3, #12]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f042 0220 	orr.w	r2, r2, #32
 800ead8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b095      	sub	sp, #84	; 0x54
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	330c      	adds	r3, #12
 800eaf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eafa:	e853 3f00 	ldrex	r3, [r3]
 800eafe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	330c      	adds	r3, #12
 800eb0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb10:	643a      	str	r2, [r7, #64]	; 0x40
 800eb12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb18:	e841 2300 	strex	r3, r2, [r1]
 800eb1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1e5      	bne.n	800eaf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	3314      	adds	r3, #20
 800eb2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2c:	6a3b      	ldr	r3, [r7, #32]
 800eb2e:	e853 3f00 	ldrex	r3, [r3]
 800eb32:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	f023 0301 	bic.w	r3, r3, #1
 800eb3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	3314      	adds	r3, #20
 800eb42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb4c:	e841 2300 	strex	r3, r2, [r1]
 800eb50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1e5      	bne.n	800eb24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d119      	bne.n	800eb94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	330c      	adds	r3, #12
 800eb66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	f023 0310 	bic.w	r3, r3, #16
 800eb76:	647b      	str	r3, [r7, #68]	; 0x44
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	330c      	adds	r3, #12
 800eb7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb80:	61ba      	str	r2, [r7, #24]
 800eb82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb84:	6979      	ldr	r1, [r7, #20]
 800eb86:	69ba      	ldr	r2, [r7, #24]
 800eb88:	e841 2300 	strex	r3, r2, [r1]
 800eb8c:	613b      	str	r3, [r7, #16]
   return(result);
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1e5      	bne.n	800eb60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2220      	movs	r2, #32
 800eb98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800eba2:	bf00      	nop
 800eba4:	3754      	adds	r7, #84	; 0x54
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b084      	sub	sp, #16
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f7ff fecb 	bl	800e964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebce:	bf00      	nop
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b085      	sub	sp, #20
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	2b21      	cmp	r3, #33	; 0x21
 800ebe8:	d13e      	bne.n	800ec68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebf2:	d114      	bne.n	800ec1e <UART_Transmit_IT+0x48>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d110      	bne.n	800ec1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a1b      	ldr	r3, [r3, #32]
 800ec00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	881b      	ldrh	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	1c9a      	adds	r2, r3, #2
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	621a      	str	r2, [r3, #32]
 800ec1c:	e008      	b.n	800ec30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	1c59      	adds	r1, r3, #1
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	6211      	str	r1, [r2, #32]
 800ec28:	781a      	ldrb	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	3b01      	subs	r3, #1
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10f      	bne.n	800ec64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68da      	ldr	r2, [r3, #12]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec64:	2300      	movs	r3, #0
 800ec66:	e000      	b.n	800ec6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ec68:	2302      	movs	r3, #2
  }
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	68da      	ldr	r2, [r3, #12]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2220      	movs	r2, #32
 800ec92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff fe5a 	bl	800e950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b08c      	sub	sp, #48	; 0x30
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	2b22      	cmp	r3, #34	; 0x22
 800ecb8:	f040 80ab 	bne.w	800ee12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecc4:	d117      	bne.n	800ecf6 <UART_Receive_IT+0x50>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d113      	bne.n	800ecf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecee:	1c9a      	adds	r2, r3, #2
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	629a      	str	r2, [r3, #40]	; 0x28
 800ecf4:	e026      	b.n	800ed44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed08:	d007      	beq.n	800ed1a <UART_Receive_IT+0x74>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d10a      	bne.n	800ed28 <UART_Receive_IT+0x82>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d106      	bne.n	800ed28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	b2da      	uxtb	r2, r3
 800ed22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed24:	701a      	strb	r2, [r3, #0]
 800ed26:	e008      	b.n	800ed3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3e:	1c5a      	adds	r2, r3, #1
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	4619      	mov	r1, r3
 800ed52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d15a      	bne.n	800ee0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f022 0220 	bic.w	r2, r2, #32
 800ed66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68da      	ldr	r2, [r3, #12]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	695a      	ldr	r2, [r3, #20]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f022 0201 	bic.w	r2, r2, #1
 800ed86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2220      	movs	r2, #32
 800ed8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d135      	bne.n	800ee04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	330c      	adds	r3, #12
 800eda4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	e853 3f00 	ldrex	r3, [r3]
 800edac:	613b      	str	r3, [r7, #16]
   return(result);
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	f023 0310 	bic.w	r3, r3, #16
 800edb4:	627b      	str	r3, [r7, #36]	; 0x24
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	330c      	adds	r3, #12
 800edbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edbe:	623a      	str	r2, [r7, #32]
 800edc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc2:	69f9      	ldr	r1, [r7, #28]
 800edc4:	6a3a      	ldr	r2, [r7, #32]
 800edc6:	e841 2300 	strex	r3, r2, [r1]
 800edca:	61bb      	str	r3, [r7, #24]
   return(result);
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1e5      	bne.n	800ed9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 0310 	and.w	r3, r3, #16
 800eddc:	2b10      	cmp	r3, #16
 800edde:	d10a      	bne.n	800edf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	60fb      	str	r3, [r7, #12]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff fdbb 	bl	800e978 <HAL_UARTEx_RxEventCallback>
 800ee02:	e002      	b.n	800ee0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7f7 f9bb 	bl	8006180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e002      	b.n	800ee14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e000      	b.n	800ee14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ee12:	2302      	movs	r3, #2
  }
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3730      	adds	r7, #48	; 0x30
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee20:	b0c0      	sub	sp, #256	; 0x100
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	691b      	ldr	r3, [r3, #16]
 800ee30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ee34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee38:	68d9      	ldr	r1, [r3, #12]
 800ee3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	ea40 0301 	orr.w	r3, r0, r1
 800ee44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ee46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee4a:	689a      	ldr	r2, [r3, #8]
 800ee4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	431a      	orrs	r2, r3
 800ee54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee58:	695b      	ldr	r3, [r3, #20]
 800ee5a:	431a      	orrs	r2, r3
 800ee5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee60:	69db      	ldr	r3, [r3, #28]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ee68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ee74:	f021 010c 	bic.w	r1, r1, #12
 800ee78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee82:	430b      	orrs	r3, r1
 800ee84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ee86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	695b      	ldr	r3, [r3, #20]
 800ee8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ee92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee96:	6999      	ldr	r1, [r3, #24]
 800ee98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	ea40 0301 	orr.w	r3, r0, r1
 800eea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800eea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	4b8f      	ldr	r3, [pc, #572]	; (800f0e8 <UART_SetConfig+0x2cc>)
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d005      	beq.n	800eebc <UART_SetConfig+0xa0>
 800eeb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	4b8d      	ldr	r3, [pc, #564]	; (800f0ec <UART_SetConfig+0x2d0>)
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d104      	bne.n	800eec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eebc:	f7fd fb6c 	bl	800c598 <HAL_RCC_GetPCLK2Freq>
 800eec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800eec4:	e003      	b.n	800eece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eec6:	f7fd fb53 	bl	800c570 <HAL_RCC_GetPCLK1Freq>
 800eeca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eed8:	f040 810c 	bne.w	800f0f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eedc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eee0:	2200      	movs	r2, #0
 800eee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800eeea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800eeee:	4622      	mov	r2, r4
 800eef0:	462b      	mov	r3, r5
 800eef2:	1891      	adds	r1, r2, r2
 800eef4:	65b9      	str	r1, [r7, #88]	; 0x58
 800eef6:	415b      	adcs	r3, r3
 800eef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eefa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800eefe:	4621      	mov	r1, r4
 800ef00:	eb12 0801 	adds.w	r8, r2, r1
 800ef04:	4629      	mov	r1, r5
 800ef06:	eb43 0901 	adc.w	r9, r3, r1
 800ef0a:	f04f 0200 	mov.w	r2, #0
 800ef0e:	f04f 0300 	mov.w	r3, #0
 800ef12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ef16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ef1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ef1e:	4690      	mov	r8, r2
 800ef20:	4699      	mov	r9, r3
 800ef22:	4623      	mov	r3, r4
 800ef24:	eb18 0303 	adds.w	r3, r8, r3
 800ef28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef2c:	462b      	mov	r3, r5
 800ef2e:	eb49 0303 	adc.w	r3, r9, r3
 800ef32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ef36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ef46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	18db      	adds	r3, r3, r3
 800ef4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ef50:	4613      	mov	r3, r2
 800ef52:	eb42 0303 	adc.w	r3, r2, r3
 800ef56:	657b      	str	r3, [r7, #84]	; 0x54
 800ef58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ef5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ef60:	f7f1 ff02 	bl	8000d68 <__aeabi_uldivmod>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4b61      	ldr	r3, [pc, #388]	; (800f0f0 <UART_SetConfig+0x2d4>)
 800ef6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ef6e:	095b      	lsrs	r3, r3, #5
 800ef70:	011c      	lsls	r4, r3, #4
 800ef72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ef80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ef84:	4642      	mov	r2, r8
 800ef86:	464b      	mov	r3, r9
 800ef88:	1891      	adds	r1, r2, r2
 800ef8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ef8c:	415b      	adcs	r3, r3
 800ef8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef94:	4641      	mov	r1, r8
 800ef96:	eb12 0a01 	adds.w	sl, r2, r1
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	eb43 0b01 	adc.w	fp, r3, r1
 800efa0:	f04f 0200 	mov.w	r2, #0
 800efa4:	f04f 0300 	mov.w	r3, #0
 800efa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800efac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800efb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efb4:	4692      	mov	sl, r2
 800efb6:	469b      	mov	fp, r3
 800efb8:	4643      	mov	r3, r8
 800efba:	eb1a 0303 	adds.w	r3, sl, r3
 800efbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efc2:	464b      	mov	r3, r9
 800efc4:	eb4b 0303 	adc.w	r3, fp, r3
 800efc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800efcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800efd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800efdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800efe0:	460b      	mov	r3, r1
 800efe2:	18db      	adds	r3, r3, r3
 800efe4:	643b      	str	r3, [r7, #64]	; 0x40
 800efe6:	4613      	mov	r3, r2
 800efe8:	eb42 0303 	adc.w	r3, r2, r3
 800efec:	647b      	str	r3, [r7, #68]	; 0x44
 800efee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800eff6:	f7f1 feb7 	bl	8000d68 <__aeabi_uldivmod>
 800effa:	4602      	mov	r2, r0
 800effc:	460b      	mov	r3, r1
 800effe:	4611      	mov	r1, r2
 800f000:	4b3b      	ldr	r3, [pc, #236]	; (800f0f0 <UART_SetConfig+0x2d4>)
 800f002:	fba3 2301 	umull	r2, r3, r3, r1
 800f006:	095b      	lsrs	r3, r3, #5
 800f008:	2264      	movs	r2, #100	; 0x64
 800f00a:	fb02 f303 	mul.w	r3, r2, r3
 800f00e:	1acb      	subs	r3, r1, r3
 800f010:	00db      	lsls	r3, r3, #3
 800f012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f016:	4b36      	ldr	r3, [pc, #216]	; (800f0f0 <UART_SetConfig+0x2d4>)
 800f018:	fba3 2302 	umull	r2, r3, r3, r2
 800f01c:	095b      	lsrs	r3, r3, #5
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f024:	441c      	add	r4, r3
 800f026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f02a:	2200      	movs	r2, #0
 800f02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f038:	4642      	mov	r2, r8
 800f03a:	464b      	mov	r3, r9
 800f03c:	1891      	adds	r1, r2, r2
 800f03e:	63b9      	str	r1, [r7, #56]	; 0x38
 800f040:	415b      	adcs	r3, r3
 800f042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f048:	4641      	mov	r1, r8
 800f04a:	1851      	adds	r1, r2, r1
 800f04c:	6339      	str	r1, [r7, #48]	; 0x30
 800f04e:	4649      	mov	r1, r9
 800f050:	414b      	adcs	r3, r1
 800f052:	637b      	str	r3, [r7, #52]	; 0x34
 800f054:	f04f 0200 	mov.w	r2, #0
 800f058:	f04f 0300 	mov.w	r3, #0
 800f05c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f060:	4659      	mov	r1, fp
 800f062:	00cb      	lsls	r3, r1, #3
 800f064:	4651      	mov	r1, sl
 800f066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f06a:	4651      	mov	r1, sl
 800f06c:	00ca      	lsls	r2, r1, #3
 800f06e:	4610      	mov	r0, r2
 800f070:	4619      	mov	r1, r3
 800f072:	4603      	mov	r3, r0
 800f074:	4642      	mov	r2, r8
 800f076:	189b      	adds	r3, r3, r2
 800f078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f07c:	464b      	mov	r3, r9
 800f07e:	460a      	mov	r2, r1
 800f080:	eb42 0303 	adc.w	r3, r2, r3
 800f084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f09c:	460b      	mov	r3, r1
 800f09e:	18db      	adds	r3, r3, r3
 800f0a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	eb42 0303 	adc.w	r3, r2, r3
 800f0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f0ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f0b2:	f7f1 fe59 	bl	8000d68 <__aeabi_uldivmod>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4b0d      	ldr	r3, [pc, #52]	; (800f0f0 <UART_SetConfig+0x2d4>)
 800f0bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f0c0:	095b      	lsrs	r3, r3, #5
 800f0c2:	2164      	movs	r1, #100	; 0x64
 800f0c4:	fb01 f303 	mul.w	r3, r1, r3
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	3332      	adds	r3, #50	; 0x32
 800f0ce:	4a08      	ldr	r2, [pc, #32]	; (800f0f0 <UART_SetConfig+0x2d4>)
 800f0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f0d4:	095b      	lsrs	r3, r3, #5
 800f0d6:	f003 0207 	and.w	r2, r3, #7
 800f0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4422      	add	r2, r4
 800f0e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f0e4:	e106      	b.n	800f2f4 <UART_SetConfig+0x4d8>
 800f0e6:	bf00      	nop
 800f0e8:	40011000 	.word	0x40011000
 800f0ec:	40011400 	.word	0x40011400
 800f0f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f0fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f106:	4642      	mov	r2, r8
 800f108:	464b      	mov	r3, r9
 800f10a:	1891      	adds	r1, r2, r2
 800f10c:	6239      	str	r1, [r7, #32]
 800f10e:	415b      	adcs	r3, r3
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
 800f112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f116:	4641      	mov	r1, r8
 800f118:	1854      	adds	r4, r2, r1
 800f11a:	4649      	mov	r1, r9
 800f11c:	eb43 0501 	adc.w	r5, r3, r1
 800f120:	f04f 0200 	mov.w	r2, #0
 800f124:	f04f 0300 	mov.w	r3, #0
 800f128:	00eb      	lsls	r3, r5, #3
 800f12a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f12e:	00e2      	lsls	r2, r4, #3
 800f130:	4614      	mov	r4, r2
 800f132:	461d      	mov	r5, r3
 800f134:	4643      	mov	r3, r8
 800f136:	18e3      	adds	r3, r4, r3
 800f138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f13c:	464b      	mov	r3, r9
 800f13e:	eb45 0303 	adc.w	r3, r5, r3
 800f142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f156:	f04f 0200 	mov.w	r2, #0
 800f15a:	f04f 0300 	mov.w	r3, #0
 800f15e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f162:	4629      	mov	r1, r5
 800f164:	008b      	lsls	r3, r1, #2
 800f166:	4621      	mov	r1, r4
 800f168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f16c:	4621      	mov	r1, r4
 800f16e:	008a      	lsls	r2, r1, #2
 800f170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f174:	f7f1 fdf8 	bl	8000d68 <__aeabi_uldivmod>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4b60      	ldr	r3, [pc, #384]	; (800f300 <UART_SetConfig+0x4e4>)
 800f17e:	fba3 2302 	umull	r2, r3, r3, r2
 800f182:	095b      	lsrs	r3, r3, #5
 800f184:	011c      	lsls	r4, r3, #4
 800f186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f198:	4642      	mov	r2, r8
 800f19a:	464b      	mov	r3, r9
 800f19c:	1891      	adds	r1, r2, r2
 800f19e:	61b9      	str	r1, [r7, #24]
 800f1a0:	415b      	adcs	r3, r3
 800f1a2:	61fb      	str	r3, [r7, #28]
 800f1a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f1a8:	4641      	mov	r1, r8
 800f1aa:	1851      	adds	r1, r2, r1
 800f1ac:	6139      	str	r1, [r7, #16]
 800f1ae:	4649      	mov	r1, r9
 800f1b0:	414b      	adcs	r3, r1
 800f1b2:	617b      	str	r3, [r7, #20]
 800f1b4:	f04f 0200 	mov.w	r2, #0
 800f1b8:	f04f 0300 	mov.w	r3, #0
 800f1bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f1c0:	4659      	mov	r1, fp
 800f1c2:	00cb      	lsls	r3, r1, #3
 800f1c4:	4651      	mov	r1, sl
 800f1c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f1ca:	4651      	mov	r1, sl
 800f1cc:	00ca      	lsls	r2, r1, #3
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	4642      	mov	r2, r8
 800f1d6:	189b      	adds	r3, r3, r2
 800f1d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1dc:	464b      	mov	r3, r9
 800f1de:	460a      	mov	r2, r1
 800f1e0:	eb42 0303 	adc.w	r3, r2, r3
 800f1e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f1f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f1f4:	f04f 0200 	mov.w	r2, #0
 800f1f8:	f04f 0300 	mov.w	r3, #0
 800f1fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f200:	4649      	mov	r1, r9
 800f202:	008b      	lsls	r3, r1, #2
 800f204:	4641      	mov	r1, r8
 800f206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f20a:	4641      	mov	r1, r8
 800f20c:	008a      	lsls	r2, r1, #2
 800f20e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f212:	f7f1 fda9 	bl	8000d68 <__aeabi_uldivmod>
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	4611      	mov	r1, r2
 800f21c:	4b38      	ldr	r3, [pc, #224]	; (800f300 <UART_SetConfig+0x4e4>)
 800f21e:	fba3 2301 	umull	r2, r3, r3, r1
 800f222:	095b      	lsrs	r3, r3, #5
 800f224:	2264      	movs	r2, #100	; 0x64
 800f226:	fb02 f303 	mul.w	r3, r2, r3
 800f22a:	1acb      	subs	r3, r1, r3
 800f22c:	011b      	lsls	r3, r3, #4
 800f22e:	3332      	adds	r3, #50	; 0x32
 800f230:	4a33      	ldr	r2, [pc, #204]	; (800f300 <UART_SetConfig+0x4e4>)
 800f232:	fba2 2303 	umull	r2, r3, r2, r3
 800f236:	095b      	lsrs	r3, r3, #5
 800f238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f23c:	441c      	add	r4, r3
 800f23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f242:	2200      	movs	r2, #0
 800f244:	673b      	str	r3, [r7, #112]	; 0x70
 800f246:	677a      	str	r2, [r7, #116]	; 0x74
 800f248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f24c:	4642      	mov	r2, r8
 800f24e:	464b      	mov	r3, r9
 800f250:	1891      	adds	r1, r2, r2
 800f252:	60b9      	str	r1, [r7, #8]
 800f254:	415b      	adcs	r3, r3
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f25c:	4641      	mov	r1, r8
 800f25e:	1851      	adds	r1, r2, r1
 800f260:	6039      	str	r1, [r7, #0]
 800f262:	4649      	mov	r1, r9
 800f264:	414b      	adcs	r3, r1
 800f266:	607b      	str	r3, [r7, #4]
 800f268:	f04f 0200 	mov.w	r2, #0
 800f26c:	f04f 0300 	mov.w	r3, #0
 800f270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f274:	4659      	mov	r1, fp
 800f276:	00cb      	lsls	r3, r1, #3
 800f278:	4651      	mov	r1, sl
 800f27a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f27e:	4651      	mov	r1, sl
 800f280:	00ca      	lsls	r2, r1, #3
 800f282:	4610      	mov	r0, r2
 800f284:	4619      	mov	r1, r3
 800f286:	4603      	mov	r3, r0
 800f288:	4642      	mov	r2, r8
 800f28a:	189b      	adds	r3, r3, r2
 800f28c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f28e:	464b      	mov	r3, r9
 800f290:	460a      	mov	r2, r1
 800f292:	eb42 0303 	adc.w	r3, r2, r3
 800f296:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	663b      	str	r3, [r7, #96]	; 0x60
 800f2a2:	667a      	str	r2, [r7, #100]	; 0x64
 800f2a4:	f04f 0200 	mov.w	r2, #0
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f2b0:	4649      	mov	r1, r9
 800f2b2:	008b      	lsls	r3, r1, #2
 800f2b4:	4641      	mov	r1, r8
 800f2b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f2ba:	4641      	mov	r1, r8
 800f2bc:	008a      	lsls	r2, r1, #2
 800f2be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f2c2:	f7f1 fd51 	bl	8000d68 <__aeabi_uldivmod>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <UART_SetConfig+0x4e4>)
 800f2cc:	fba3 1302 	umull	r1, r3, r3, r2
 800f2d0:	095b      	lsrs	r3, r3, #5
 800f2d2:	2164      	movs	r1, #100	; 0x64
 800f2d4:	fb01 f303 	mul.w	r3, r1, r3
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	011b      	lsls	r3, r3, #4
 800f2dc:	3332      	adds	r3, #50	; 0x32
 800f2de:	4a08      	ldr	r2, [pc, #32]	; (800f300 <UART_SetConfig+0x4e4>)
 800f2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f2e4:	095b      	lsrs	r3, r3, #5
 800f2e6:	f003 020f 	and.w	r2, r3, #15
 800f2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4422      	add	r2, r4
 800f2f2:	609a      	str	r2, [r3, #8]
}
 800f2f4:	bf00      	nop
 800f2f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f300:	51eb851f 	.word	0x51eb851f

0800f304 <atoi>:
 800f304:	220a      	movs	r2, #10
 800f306:	2100      	movs	r1, #0
 800f308:	f000 bf10 	b.w	801012c <strtol>

0800f30c <__cvt>:
 800f30c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f310:	ec55 4b10 	vmov	r4, r5, d0
 800f314:	2d00      	cmp	r5, #0
 800f316:	460e      	mov	r6, r1
 800f318:	4619      	mov	r1, r3
 800f31a:	462b      	mov	r3, r5
 800f31c:	bfbb      	ittet	lt
 800f31e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f322:	461d      	movlt	r5, r3
 800f324:	2300      	movge	r3, #0
 800f326:	232d      	movlt	r3, #45	; 0x2d
 800f328:	700b      	strb	r3, [r1, #0]
 800f32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f32c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f330:	4691      	mov	r9, r2
 800f332:	f023 0820 	bic.w	r8, r3, #32
 800f336:	bfbc      	itt	lt
 800f338:	4622      	movlt	r2, r4
 800f33a:	4614      	movlt	r4, r2
 800f33c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f340:	d005      	beq.n	800f34e <__cvt+0x42>
 800f342:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f346:	d100      	bne.n	800f34a <__cvt+0x3e>
 800f348:	3601      	adds	r6, #1
 800f34a:	2102      	movs	r1, #2
 800f34c:	e000      	b.n	800f350 <__cvt+0x44>
 800f34e:	2103      	movs	r1, #3
 800f350:	ab03      	add	r3, sp, #12
 800f352:	9301      	str	r3, [sp, #4]
 800f354:	ab02      	add	r3, sp, #8
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	ec45 4b10 	vmov	d0, r4, r5
 800f35c:	4653      	mov	r3, sl
 800f35e:	4632      	mov	r2, r6
 800f360:	f001 f8f6 	bl	8010550 <_dtoa_r>
 800f364:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f368:	4607      	mov	r7, r0
 800f36a:	d102      	bne.n	800f372 <__cvt+0x66>
 800f36c:	f019 0f01 	tst.w	r9, #1
 800f370:	d022      	beq.n	800f3b8 <__cvt+0xac>
 800f372:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f376:	eb07 0906 	add.w	r9, r7, r6
 800f37a:	d110      	bne.n	800f39e <__cvt+0x92>
 800f37c:	783b      	ldrb	r3, [r7, #0]
 800f37e:	2b30      	cmp	r3, #48	; 0x30
 800f380:	d10a      	bne.n	800f398 <__cvt+0x8c>
 800f382:	2200      	movs	r2, #0
 800f384:	2300      	movs	r3, #0
 800f386:	4620      	mov	r0, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	f7f1 fbbd 	bl	8000b08 <__aeabi_dcmpeq>
 800f38e:	b918      	cbnz	r0, 800f398 <__cvt+0x8c>
 800f390:	f1c6 0601 	rsb	r6, r6, #1
 800f394:	f8ca 6000 	str.w	r6, [sl]
 800f398:	f8da 3000 	ldr.w	r3, [sl]
 800f39c:	4499      	add	r9, r3
 800f39e:	2200      	movs	r2, #0
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	f7f1 fbaf 	bl	8000b08 <__aeabi_dcmpeq>
 800f3aa:	b108      	cbz	r0, 800f3b0 <__cvt+0xa4>
 800f3ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800f3b0:	2230      	movs	r2, #48	; 0x30
 800f3b2:	9b03      	ldr	r3, [sp, #12]
 800f3b4:	454b      	cmp	r3, r9
 800f3b6:	d307      	bcc.n	800f3c8 <__cvt+0xbc>
 800f3b8:	9b03      	ldr	r3, [sp, #12]
 800f3ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3bc:	1bdb      	subs	r3, r3, r7
 800f3be:	4638      	mov	r0, r7
 800f3c0:	6013      	str	r3, [r2, #0]
 800f3c2:	b004      	add	sp, #16
 800f3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3c8:	1c59      	adds	r1, r3, #1
 800f3ca:	9103      	str	r1, [sp, #12]
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	e7f0      	b.n	800f3b2 <__cvt+0xa6>

0800f3d0 <__exponent>:
 800f3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2900      	cmp	r1, #0
 800f3d6:	bfb8      	it	lt
 800f3d8:	4249      	neglt	r1, r1
 800f3da:	f803 2b02 	strb.w	r2, [r3], #2
 800f3de:	bfb4      	ite	lt
 800f3e0:	222d      	movlt	r2, #45	; 0x2d
 800f3e2:	222b      	movge	r2, #43	; 0x2b
 800f3e4:	2909      	cmp	r1, #9
 800f3e6:	7042      	strb	r2, [r0, #1]
 800f3e8:	dd2a      	ble.n	800f440 <__exponent+0x70>
 800f3ea:	f10d 0207 	add.w	r2, sp, #7
 800f3ee:	4617      	mov	r7, r2
 800f3f0:	260a      	movs	r6, #10
 800f3f2:	4694      	mov	ip, r2
 800f3f4:	fb91 f5f6 	sdiv	r5, r1, r6
 800f3f8:	fb06 1415 	mls	r4, r6, r5, r1
 800f3fc:	3430      	adds	r4, #48	; 0x30
 800f3fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f402:	460c      	mov	r4, r1
 800f404:	2c63      	cmp	r4, #99	; 0x63
 800f406:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f40a:	4629      	mov	r1, r5
 800f40c:	dcf1      	bgt.n	800f3f2 <__exponent+0x22>
 800f40e:	3130      	adds	r1, #48	; 0x30
 800f410:	f1ac 0402 	sub.w	r4, ip, #2
 800f414:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f418:	1c41      	adds	r1, r0, #1
 800f41a:	4622      	mov	r2, r4
 800f41c:	42ba      	cmp	r2, r7
 800f41e:	d30a      	bcc.n	800f436 <__exponent+0x66>
 800f420:	f10d 0209 	add.w	r2, sp, #9
 800f424:	eba2 020c 	sub.w	r2, r2, ip
 800f428:	42bc      	cmp	r4, r7
 800f42a:	bf88      	it	hi
 800f42c:	2200      	movhi	r2, #0
 800f42e:	4413      	add	r3, r2
 800f430:	1a18      	subs	r0, r3, r0
 800f432:	b003      	add	sp, #12
 800f434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f436:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f43a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f43e:	e7ed      	b.n	800f41c <__exponent+0x4c>
 800f440:	2330      	movs	r3, #48	; 0x30
 800f442:	3130      	adds	r1, #48	; 0x30
 800f444:	7083      	strb	r3, [r0, #2]
 800f446:	70c1      	strb	r1, [r0, #3]
 800f448:	1d03      	adds	r3, r0, #4
 800f44a:	e7f1      	b.n	800f430 <__exponent+0x60>

0800f44c <_printf_float>:
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	ed2d 8b02 	vpush	{d8}
 800f454:	b08d      	sub	sp, #52	; 0x34
 800f456:	460c      	mov	r4, r1
 800f458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f45c:	4616      	mov	r6, r2
 800f45e:	461f      	mov	r7, r3
 800f460:	4605      	mov	r5, r0
 800f462:	f000 ff2f 	bl	80102c4 <_localeconv_r>
 800f466:	f8d0 a000 	ldr.w	sl, [r0]
 800f46a:	4650      	mov	r0, sl
 800f46c:	f7f0 ff20 	bl	80002b0 <strlen>
 800f470:	2300      	movs	r3, #0
 800f472:	930a      	str	r3, [sp, #40]	; 0x28
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	9305      	str	r3, [sp, #20]
 800f478:	f8d8 3000 	ldr.w	r3, [r8]
 800f47c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f480:	3307      	adds	r3, #7
 800f482:	f023 0307 	bic.w	r3, r3, #7
 800f486:	f103 0208 	add.w	r2, r3, #8
 800f48a:	f8c8 2000 	str.w	r2, [r8]
 800f48e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f496:	9307      	str	r3, [sp, #28]
 800f498:	f8cd 8018 	str.w	r8, [sp, #24]
 800f49c:	ee08 0a10 	vmov	s16, r0
 800f4a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f4a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4a8:	4b9e      	ldr	r3, [pc, #632]	; (800f724 <_printf_float+0x2d8>)
 800f4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4ae:	f7f1 fb5d 	bl	8000b6c <__aeabi_dcmpun>
 800f4b2:	bb88      	cbnz	r0, 800f518 <_printf_float+0xcc>
 800f4b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4b8:	4b9a      	ldr	r3, [pc, #616]	; (800f724 <_printf_float+0x2d8>)
 800f4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4be:	f7f1 fb37 	bl	8000b30 <__aeabi_dcmple>
 800f4c2:	bb48      	cbnz	r0, 800f518 <_printf_float+0xcc>
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	4640      	mov	r0, r8
 800f4ca:	4649      	mov	r1, r9
 800f4cc:	f7f1 fb26 	bl	8000b1c <__aeabi_dcmplt>
 800f4d0:	b110      	cbz	r0, 800f4d8 <_printf_float+0x8c>
 800f4d2:	232d      	movs	r3, #45	; 0x2d
 800f4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4d8:	4a93      	ldr	r2, [pc, #588]	; (800f728 <_printf_float+0x2dc>)
 800f4da:	4b94      	ldr	r3, [pc, #592]	; (800f72c <_printf_float+0x2e0>)
 800f4dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f4e0:	bf94      	ite	ls
 800f4e2:	4690      	movls	r8, r2
 800f4e4:	4698      	movhi	r8, r3
 800f4e6:	2303      	movs	r3, #3
 800f4e8:	6123      	str	r3, [r4, #16]
 800f4ea:	9b05      	ldr	r3, [sp, #20]
 800f4ec:	f023 0304 	bic.w	r3, r3, #4
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	f04f 0900 	mov.w	r9, #0
 800f4f6:	9700      	str	r7, [sp, #0]
 800f4f8:	4633      	mov	r3, r6
 800f4fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	4628      	mov	r0, r5
 800f500:	f000 fa8a 	bl	800fa18 <_printf_common>
 800f504:	3001      	adds	r0, #1
 800f506:	f040 8090 	bne.w	800f62a <_printf_float+0x1de>
 800f50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f50e:	b00d      	add	sp, #52	; 0x34
 800f510:	ecbd 8b02 	vpop	{d8}
 800f514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f518:	4642      	mov	r2, r8
 800f51a:	464b      	mov	r3, r9
 800f51c:	4640      	mov	r0, r8
 800f51e:	4649      	mov	r1, r9
 800f520:	f7f1 fb24 	bl	8000b6c <__aeabi_dcmpun>
 800f524:	b140      	cbz	r0, 800f538 <_printf_float+0xec>
 800f526:	464b      	mov	r3, r9
 800f528:	2b00      	cmp	r3, #0
 800f52a:	bfbc      	itt	lt
 800f52c:	232d      	movlt	r3, #45	; 0x2d
 800f52e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f532:	4a7f      	ldr	r2, [pc, #508]	; (800f730 <_printf_float+0x2e4>)
 800f534:	4b7f      	ldr	r3, [pc, #508]	; (800f734 <_printf_float+0x2e8>)
 800f536:	e7d1      	b.n	800f4dc <_printf_float+0x90>
 800f538:	6863      	ldr	r3, [r4, #4]
 800f53a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f53e:	9206      	str	r2, [sp, #24]
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	d13f      	bne.n	800f5c4 <_printf_float+0x178>
 800f544:	2306      	movs	r3, #6
 800f546:	6063      	str	r3, [r4, #4]
 800f548:	9b05      	ldr	r3, [sp, #20]
 800f54a:	6861      	ldr	r1, [r4, #4]
 800f54c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f550:	2300      	movs	r3, #0
 800f552:	9303      	str	r3, [sp, #12]
 800f554:	ab0a      	add	r3, sp, #40	; 0x28
 800f556:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f55a:	ab09      	add	r3, sp, #36	; 0x24
 800f55c:	ec49 8b10 	vmov	d0, r8, r9
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	6022      	str	r2, [r4, #0]
 800f564:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f568:	4628      	mov	r0, r5
 800f56a:	f7ff fecf 	bl	800f30c <__cvt>
 800f56e:	9b06      	ldr	r3, [sp, #24]
 800f570:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f572:	2b47      	cmp	r3, #71	; 0x47
 800f574:	4680      	mov	r8, r0
 800f576:	d108      	bne.n	800f58a <_printf_float+0x13e>
 800f578:	1cc8      	adds	r0, r1, #3
 800f57a:	db02      	blt.n	800f582 <_printf_float+0x136>
 800f57c:	6863      	ldr	r3, [r4, #4]
 800f57e:	4299      	cmp	r1, r3
 800f580:	dd41      	ble.n	800f606 <_printf_float+0x1ba>
 800f582:	f1ab 0302 	sub.w	r3, fp, #2
 800f586:	fa5f fb83 	uxtb.w	fp, r3
 800f58a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f58e:	d820      	bhi.n	800f5d2 <_printf_float+0x186>
 800f590:	3901      	subs	r1, #1
 800f592:	465a      	mov	r2, fp
 800f594:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f598:	9109      	str	r1, [sp, #36]	; 0x24
 800f59a:	f7ff ff19 	bl	800f3d0 <__exponent>
 800f59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5a0:	1813      	adds	r3, r2, r0
 800f5a2:	2a01      	cmp	r2, #1
 800f5a4:	4681      	mov	r9, r0
 800f5a6:	6123      	str	r3, [r4, #16]
 800f5a8:	dc02      	bgt.n	800f5b0 <_printf_float+0x164>
 800f5aa:	6822      	ldr	r2, [r4, #0]
 800f5ac:	07d2      	lsls	r2, r2, #31
 800f5ae:	d501      	bpl.n	800f5b4 <_printf_float+0x168>
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	6123      	str	r3, [r4, #16]
 800f5b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d09c      	beq.n	800f4f6 <_printf_float+0xaa>
 800f5bc:	232d      	movs	r3, #45	; 0x2d
 800f5be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5c2:	e798      	b.n	800f4f6 <_printf_float+0xaa>
 800f5c4:	9a06      	ldr	r2, [sp, #24]
 800f5c6:	2a47      	cmp	r2, #71	; 0x47
 800f5c8:	d1be      	bne.n	800f548 <_printf_float+0xfc>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1bc      	bne.n	800f548 <_printf_float+0xfc>
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e7b9      	b.n	800f546 <_printf_float+0xfa>
 800f5d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f5d6:	d118      	bne.n	800f60a <_printf_float+0x1be>
 800f5d8:	2900      	cmp	r1, #0
 800f5da:	6863      	ldr	r3, [r4, #4]
 800f5dc:	dd0b      	ble.n	800f5f6 <_printf_float+0x1aa>
 800f5de:	6121      	str	r1, [r4, #16]
 800f5e0:	b913      	cbnz	r3, 800f5e8 <_printf_float+0x19c>
 800f5e2:	6822      	ldr	r2, [r4, #0]
 800f5e4:	07d0      	lsls	r0, r2, #31
 800f5e6:	d502      	bpl.n	800f5ee <_printf_float+0x1a2>
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	440b      	add	r3, r1
 800f5ec:	6123      	str	r3, [r4, #16]
 800f5ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800f5f0:	f04f 0900 	mov.w	r9, #0
 800f5f4:	e7de      	b.n	800f5b4 <_printf_float+0x168>
 800f5f6:	b913      	cbnz	r3, 800f5fe <_printf_float+0x1b2>
 800f5f8:	6822      	ldr	r2, [r4, #0]
 800f5fa:	07d2      	lsls	r2, r2, #31
 800f5fc:	d501      	bpl.n	800f602 <_printf_float+0x1b6>
 800f5fe:	3302      	adds	r3, #2
 800f600:	e7f4      	b.n	800f5ec <_printf_float+0x1a0>
 800f602:	2301      	movs	r3, #1
 800f604:	e7f2      	b.n	800f5ec <_printf_float+0x1a0>
 800f606:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f60c:	4299      	cmp	r1, r3
 800f60e:	db05      	blt.n	800f61c <_printf_float+0x1d0>
 800f610:	6823      	ldr	r3, [r4, #0]
 800f612:	6121      	str	r1, [r4, #16]
 800f614:	07d8      	lsls	r0, r3, #31
 800f616:	d5ea      	bpl.n	800f5ee <_printf_float+0x1a2>
 800f618:	1c4b      	adds	r3, r1, #1
 800f61a:	e7e7      	b.n	800f5ec <_printf_float+0x1a0>
 800f61c:	2900      	cmp	r1, #0
 800f61e:	bfd4      	ite	le
 800f620:	f1c1 0202 	rsble	r2, r1, #2
 800f624:	2201      	movgt	r2, #1
 800f626:	4413      	add	r3, r2
 800f628:	e7e0      	b.n	800f5ec <_printf_float+0x1a0>
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	055a      	lsls	r2, r3, #21
 800f62e:	d407      	bmi.n	800f640 <_printf_float+0x1f4>
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	4642      	mov	r2, r8
 800f634:	4631      	mov	r1, r6
 800f636:	4628      	mov	r0, r5
 800f638:	47b8      	blx	r7
 800f63a:	3001      	adds	r0, #1
 800f63c:	d12c      	bne.n	800f698 <_printf_float+0x24c>
 800f63e:	e764      	b.n	800f50a <_printf_float+0xbe>
 800f640:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f644:	f240 80e0 	bls.w	800f808 <_printf_float+0x3bc>
 800f648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f64c:	2200      	movs	r2, #0
 800f64e:	2300      	movs	r3, #0
 800f650:	f7f1 fa5a 	bl	8000b08 <__aeabi_dcmpeq>
 800f654:	2800      	cmp	r0, #0
 800f656:	d034      	beq.n	800f6c2 <_printf_float+0x276>
 800f658:	4a37      	ldr	r2, [pc, #220]	; (800f738 <_printf_float+0x2ec>)
 800f65a:	2301      	movs	r3, #1
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	f43f af51 	beq.w	800f50a <_printf_float+0xbe>
 800f668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f66c:	429a      	cmp	r2, r3
 800f66e:	db02      	blt.n	800f676 <_printf_float+0x22a>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	07d8      	lsls	r0, r3, #31
 800f674:	d510      	bpl.n	800f698 <_printf_float+0x24c>
 800f676:	ee18 3a10 	vmov	r3, s16
 800f67a:	4652      	mov	r2, sl
 800f67c:	4631      	mov	r1, r6
 800f67e:	4628      	mov	r0, r5
 800f680:	47b8      	blx	r7
 800f682:	3001      	adds	r0, #1
 800f684:	f43f af41 	beq.w	800f50a <_printf_float+0xbe>
 800f688:	f04f 0800 	mov.w	r8, #0
 800f68c:	f104 091a 	add.w	r9, r4, #26
 800f690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f692:	3b01      	subs	r3, #1
 800f694:	4543      	cmp	r3, r8
 800f696:	dc09      	bgt.n	800f6ac <_printf_float+0x260>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	079b      	lsls	r3, r3, #30
 800f69c:	f100 8107 	bmi.w	800f8ae <_printf_float+0x462>
 800f6a0:	68e0      	ldr	r0, [r4, #12]
 800f6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6a4:	4298      	cmp	r0, r3
 800f6a6:	bfb8      	it	lt
 800f6a8:	4618      	movlt	r0, r3
 800f6aa:	e730      	b.n	800f50e <_printf_float+0xc2>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	464a      	mov	r2, r9
 800f6b0:	4631      	mov	r1, r6
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	47b8      	blx	r7
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	f43f af27 	beq.w	800f50a <_printf_float+0xbe>
 800f6bc:	f108 0801 	add.w	r8, r8, #1
 800f6c0:	e7e6      	b.n	800f690 <_printf_float+0x244>
 800f6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	dc39      	bgt.n	800f73c <_printf_float+0x2f0>
 800f6c8:	4a1b      	ldr	r2, [pc, #108]	; (800f738 <_printf_float+0x2ec>)
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	47b8      	blx	r7
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	f43f af19 	beq.w	800f50a <_printf_float+0xbe>
 800f6d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	d102      	bne.n	800f6e6 <_printf_float+0x29a>
 800f6e0:	6823      	ldr	r3, [r4, #0]
 800f6e2:	07d9      	lsls	r1, r3, #31
 800f6e4:	d5d8      	bpl.n	800f698 <_printf_float+0x24c>
 800f6e6:	ee18 3a10 	vmov	r3, s16
 800f6ea:	4652      	mov	r2, sl
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	47b8      	blx	r7
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	f43f af09 	beq.w	800f50a <_printf_float+0xbe>
 800f6f8:	f04f 0900 	mov.w	r9, #0
 800f6fc:	f104 0a1a 	add.w	sl, r4, #26
 800f700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f702:	425b      	negs	r3, r3
 800f704:	454b      	cmp	r3, r9
 800f706:	dc01      	bgt.n	800f70c <_printf_float+0x2c0>
 800f708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f70a:	e792      	b.n	800f632 <_printf_float+0x1e6>
 800f70c:	2301      	movs	r3, #1
 800f70e:	4652      	mov	r2, sl
 800f710:	4631      	mov	r1, r6
 800f712:	4628      	mov	r0, r5
 800f714:	47b8      	blx	r7
 800f716:	3001      	adds	r0, #1
 800f718:	f43f aef7 	beq.w	800f50a <_printf_float+0xbe>
 800f71c:	f109 0901 	add.w	r9, r9, #1
 800f720:	e7ee      	b.n	800f700 <_printf_float+0x2b4>
 800f722:	bf00      	nop
 800f724:	7fefffff 	.word	0x7fefffff
 800f728:	08018fe0 	.word	0x08018fe0
 800f72c:	08018fe4 	.word	0x08018fe4
 800f730:	08018fe8 	.word	0x08018fe8
 800f734:	08018fec 	.word	0x08018fec
 800f738:	08019203 	.word	0x08019203
 800f73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f73e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f740:	429a      	cmp	r2, r3
 800f742:	bfa8      	it	ge
 800f744:	461a      	movge	r2, r3
 800f746:	2a00      	cmp	r2, #0
 800f748:	4691      	mov	r9, r2
 800f74a:	dc37      	bgt.n	800f7bc <_printf_float+0x370>
 800f74c:	f04f 0b00 	mov.w	fp, #0
 800f750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f754:	f104 021a 	add.w	r2, r4, #26
 800f758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f75a:	9305      	str	r3, [sp, #20]
 800f75c:	eba3 0309 	sub.w	r3, r3, r9
 800f760:	455b      	cmp	r3, fp
 800f762:	dc33      	bgt.n	800f7cc <_printf_float+0x380>
 800f764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f768:	429a      	cmp	r2, r3
 800f76a:	db3b      	blt.n	800f7e4 <_printf_float+0x398>
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	07da      	lsls	r2, r3, #31
 800f770:	d438      	bmi.n	800f7e4 <_printf_float+0x398>
 800f772:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f776:	eba2 0903 	sub.w	r9, r2, r3
 800f77a:	9b05      	ldr	r3, [sp, #20]
 800f77c:	1ad2      	subs	r2, r2, r3
 800f77e:	4591      	cmp	r9, r2
 800f780:	bfa8      	it	ge
 800f782:	4691      	movge	r9, r2
 800f784:	f1b9 0f00 	cmp.w	r9, #0
 800f788:	dc35      	bgt.n	800f7f6 <_printf_float+0x3aa>
 800f78a:	f04f 0800 	mov.w	r8, #0
 800f78e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f792:	f104 0a1a 	add.w	sl, r4, #26
 800f796:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	eba3 0309 	sub.w	r3, r3, r9
 800f7a0:	4543      	cmp	r3, r8
 800f7a2:	f77f af79 	ble.w	800f698 <_printf_float+0x24c>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	4652      	mov	r2, sl
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	47b8      	blx	r7
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	f43f aeaa 	beq.w	800f50a <_printf_float+0xbe>
 800f7b6:	f108 0801 	add.w	r8, r8, #1
 800f7ba:	e7ec      	b.n	800f796 <_printf_float+0x34a>
 800f7bc:	4613      	mov	r3, r2
 800f7be:	4631      	mov	r1, r6
 800f7c0:	4642      	mov	r2, r8
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	47b8      	blx	r7
 800f7c6:	3001      	adds	r0, #1
 800f7c8:	d1c0      	bne.n	800f74c <_printf_float+0x300>
 800f7ca:	e69e      	b.n	800f50a <_printf_float+0xbe>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	4631      	mov	r1, r6
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	9205      	str	r2, [sp, #20]
 800f7d4:	47b8      	blx	r7
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	f43f ae97 	beq.w	800f50a <_printf_float+0xbe>
 800f7dc:	9a05      	ldr	r2, [sp, #20]
 800f7de:	f10b 0b01 	add.w	fp, fp, #1
 800f7e2:	e7b9      	b.n	800f758 <_printf_float+0x30c>
 800f7e4:	ee18 3a10 	vmov	r3, s16
 800f7e8:	4652      	mov	r2, sl
 800f7ea:	4631      	mov	r1, r6
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	47b8      	blx	r7
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d1be      	bne.n	800f772 <_printf_float+0x326>
 800f7f4:	e689      	b.n	800f50a <_printf_float+0xbe>
 800f7f6:	9a05      	ldr	r2, [sp, #20]
 800f7f8:	464b      	mov	r3, r9
 800f7fa:	4442      	add	r2, r8
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	4628      	mov	r0, r5
 800f800:	47b8      	blx	r7
 800f802:	3001      	adds	r0, #1
 800f804:	d1c1      	bne.n	800f78a <_printf_float+0x33e>
 800f806:	e680      	b.n	800f50a <_printf_float+0xbe>
 800f808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f80a:	2a01      	cmp	r2, #1
 800f80c:	dc01      	bgt.n	800f812 <_printf_float+0x3c6>
 800f80e:	07db      	lsls	r3, r3, #31
 800f810:	d53a      	bpl.n	800f888 <_printf_float+0x43c>
 800f812:	2301      	movs	r3, #1
 800f814:	4642      	mov	r2, r8
 800f816:	4631      	mov	r1, r6
 800f818:	4628      	mov	r0, r5
 800f81a:	47b8      	blx	r7
 800f81c:	3001      	adds	r0, #1
 800f81e:	f43f ae74 	beq.w	800f50a <_printf_float+0xbe>
 800f822:	ee18 3a10 	vmov	r3, s16
 800f826:	4652      	mov	r2, sl
 800f828:	4631      	mov	r1, r6
 800f82a:	4628      	mov	r0, r5
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f ae6b 	beq.w	800f50a <_printf_float+0xbe>
 800f834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f838:	2200      	movs	r2, #0
 800f83a:	2300      	movs	r3, #0
 800f83c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f840:	f7f1 f962 	bl	8000b08 <__aeabi_dcmpeq>
 800f844:	b9d8      	cbnz	r0, 800f87e <_printf_float+0x432>
 800f846:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f84a:	f108 0201 	add.w	r2, r8, #1
 800f84e:	4631      	mov	r1, r6
 800f850:	4628      	mov	r0, r5
 800f852:	47b8      	blx	r7
 800f854:	3001      	adds	r0, #1
 800f856:	d10e      	bne.n	800f876 <_printf_float+0x42a>
 800f858:	e657      	b.n	800f50a <_printf_float+0xbe>
 800f85a:	2301      	movs	r3, #1
 800f85c:	4652      	mov	r2, sl
 800f85e:	4631      	mov	r1, r6
 800f860:	4628      	mov	r0, r5
 800f862:	47b8      	blx	r7
 800f864:	3001      	adds	r0, #1
 800f866:	f43f ae50 	beq.w	800f50a <_printf_float+0xbe>
 800f86a:	f108 0801 	add.w	r8, r8, #1
 800f86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f870:	3b01      	subs	r3, #1
 800f872:	4543      	cmp	r3, r8
 800f874:	dcf1      	bgt.n	800f85a <_printf_float+0x40e>
 800f876:	464b      	mov	r3, r9
 800f878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f87c:	e6da      	b.n	800f634 <_printf_float+0x1e8>
 800f87e:	f04f 0800 	mov.w	r8, #0
 800f882:	f104 0a1a 	add.w	sl, r4, #26
 800f886:	e7f2      	b.n	800f86e <_printf_float+0x422>
 800f888:	2301      	movs	r3, #1
 800f88a:	4642      	mov	r2, r8
 800f88c:	e7df      	b.n	800f84e <_printf_float+0x402>
 800f88e:	2301      	movs	r3, #1
 800f890:	464a      	mov	r2, r9
 800f892:	4631      	mov	r1, r6
 800f894:	4628      	mov	r0, r5
 800f896:	47b8      	blx	r7
 800f898:	3001      	adds	r0, #1
 800f89a:	f43f ae36 	beq.w	800f50a <_printf_float+0xbe>
 800f89e:	f108 0801 	add.w	r8, r8, #1
 800f8a2:	68e3      	ldr	r3, [r4, #12]
 800f8a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8a6:	1a5b      	subs	r3, r3, r1
 800f8a8:	4543      	cmp	r3, r8
 800f8aa:	dcf0      	bgt.n	800f88e <_printf_float+0x442>
 800f8ac:	e6f8      	b.n	800f6a0 <_printf_float+0x254>
 800f8ae:	f04f 0800 	mov.w	r8, #0
 800f8b2:	f104 0919 	add.w	r9, r4, #25
 800f8b6:	e7f4      	b.n	800f8a2 <_printf_float+0x456>

0800f8b8 <malloc>:
 800f8b8:	4b02      	ldr	r3, [pc, #8]	; (800f8c4 <malloc+0xc>)
 800f8ba:	4601      	mov	r1, r0
 800f8bc:	6818      	ldr	r0, [r3, #0]
 800f8be:	f000 b82b 	b.w	800f918 <_malloc_r>
 800f8c2:	bf00      	nop
 800f8c4:	200000cc 	.word	0x200000cc

0800f8c8 <free>:
 800f8c8:	4b02      	ldr	r3, [pc, #8]	; (800f8d4 <free+0xc>)
 800f8ca:	4601      	mov	r1, r0
 800f8cc:	6818      	ldr	r0, [r3, #0]
 800f8ce:	f001 bc31 	b.w	8011134 <_free_r>
 800f8d2:	bf00      	nop
 800f8d4:	200000cc 	.word	0x200000cc

0800f8d8 <sbrk_aligned>:
 800f8d8:	b570      	push	{r4, r5, r6, lr}
 800f8da:	4e0e      	ldr	r6, [pc, #56]	; (800f914 <sbrk_aligned+0x3c>)
 800f8dc:	460c      	mov	r4, r1
 800f8de:	6831      	ldr	r1, [r6, #0]
 800f8e0:	4605      	mov	r5, r0
 800f8e2:	b911      	cbnz	r1, 800f8ea <sbrk_aligned+0x12>
 800f8e4:	f000 fd26 	bl	8010334 <_sbrk_r>
 800f8e8:	6030      	str	r0, [r6, #0]
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f000 fd21 	bl	8010334 <_sbrk_r>
 800f8f2:	1c43      	adds	r3, r0, #1
 800f8f4:	d00a      	beq.n	800f90c <sbrk_aligned+0x34>
 800f8f6:	1cc4      	adds	r4, r0, #3
 800f8f8:	f024 0403 	bic.w	r4, r4, #3
 800f8fc:	42a0      	cmp	r0, r4
 800f8fe:	d007      	beq.n	800f910 <sbrk_aligned+0x38>
 800f900:	1a21      	subs	r1, r4, r0
 800f902:	4628      	mov	r0, r5
 800f904:	f000 fd16 	bl	8010334 <_sbrk_r>
 800f908:	3001      	adds	r0, #1
 800f90a:	d101      	bne.n	800f910 <sbrk_aligned+0x38>
 800f90c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f910:	4620      	mov	r0, r4
 800f912:	bd70      	pop	{r4, r5, r6, pc}
 800f914:	20009ef4 	.word	0x20009ef4

0800f918 <_malloc_r>:
 800f918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f91c:	1ccd      	adds	r5, r1, #3
 800f91e:	f025 0503 	bic.w	r5, r5, #3
 800f922:	3508      	adds	r5, #8
 800f924:	2d0c      	cmp	r5, #12
 800f926:	bf38      	it	cc
 800f928:	250c      	movcc	r5, #12
 800f92a:	2d00      	cmp	r5, #0
 800f92c:	4607      	mov	r7, r0
 800f92e:	db01      	blt.n	800f934 <_malloc_r+0x1c>
 800f930:	42a9      	cmp	r1, r5
 800f932:	d905      	bls.n	800f940 <_malloc_r+0x28>
 800f934:	230c      	movs	r3, #12
 800f936:	603b      	str	r3, [r7, #0]
 800f938:	2600      	movs	r6, #0
 800f93a:	4630      	mov	r0, r6
 800f93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f940:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fa14 <_malloc_r+0xfc>
 800f944:	f000 fa2c 	bl	800fda0 <__malloc_lock>
 800f948:	f8d8 3000 	ldr.w	r3, [r8]
 800f94c:	461c      	mov	r4, r3
 800f94e:	bb5c      	cbnz	r4, 800f9a8 <_malloc_r+0x90>
 800f950:	4629      	mov	r1, r5
 800f952:	4638      	mov	r0, r7
 800f954:	f7ff ffc0 	bl	800f8d8 <sbrk_aligned>
 800f958:	1c43      	adds	r3, r0, #1
 800f95a:	4604      	mov	r4, r0
 800f95c:	d155      	bne.n	800fa0a <_malloc_r+0xf2>
 800f95e:	f8d8 4000 	ldr.w	r4, [r8]
 800f962:	4626      	mov	r6, r4
 800f964:	2e00      	cmp	r6, #0
 800f966:	d145      	bne.n	800f9f4 <_malloc_r+0xdc>
 800f968:	2c00      	cmp	r4, #0
 800f96a:	d048      	beq.n	800f9fe <_malloc_r+0xe6>
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	4631      	mov	r1, r6
 800f970:	4638      	mov	r0, r7
 800f972:	eb04 0903 	add.w	r9, r4, r3
 800f976:	f000 fcdd 	bl	8010334 <_sbrk_r>
 800f97a:	4581      	cmp	r9, r0
 800f97c:	d13f      	bne.n	800f9fe <_malloc_r+0xe6>
 800f97e:	6821      	ldr	r1, [r4, #0]
 800f980:	1a6d      	subs	r5, r5, r1
 800f982:	4629      	mov	r1, r5
 800f984:	4638      	mov	r0, r7
 800f986:	f7ff ffa7 	bl	800f8d8 <sbrk_aligned>
 800f98a:	3001      	adds	r0, #1
 800f98c:	d037      	beq.n	800f9fe <_malloc_r+0xe6>
 800f98e:	6823      	ldr	r3, [r4, #0]
 800f990:	442b      	add	r3, r5
 800f992:	6023      	str	r3, [r4, #0]
 800f994:	f8d8 3000 	ldr.w	r3, [r8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d038      	beq.n	800fa0e <_malloc_r+0xf6>
 800f99c:	685a      	ldr	r2, [r3, #4]
 800f99e:	42a2      	cmp	r2, r4
 800f9a0:	d12b      	bne.n	800f9fa <_malloc_r+0xe2>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	605a      	str	r2, [r3, #4]
 800f9a6:	e00f      	b.n	800f9c8 <_malloc_r+0xb0>
 800f9a8:	6822      	ldr	r2, [r4, #0]
 800f9aa:	1b52      	subs	r2, r2, r5
 800f9ac:	d41f      	bmi.n	800f9ee <_malloc_r+0xd6>
 800f9ae:	2a0b      	cmp	r2, #11
 800f9b0:	d917      	bls.n	800f9e2 <_malloc_r+0xca>
 800f9b2:	1961      	adds	r1, r4, r5
 800f9b4:	42a3      	cmp	r3, r4
 800f9b6:	6025      	str	r5, [r4, #0]
 800f9b8:	bf18      	it	ne
 800f9ba:	6059      	strne	r1, [r3, #4]
 800f9bc:	6863      	ldr	r3, [r4, #4]
 800f9be:	bf08      	it	eq
 800f9c0:	f8c8 1000 	streq.w	r1, [r8]
 800f9c4:	5162      	str	r2, [r4, r5]
 800f9c6:	604b      	str	r3, [r1, #4]
 800f9c8:	4638      	mov	r0, r7
 800f9ca:	f104 060b 	add.w	r6, r4, #11
 800f9ce:	f000 f9ed 	bl	800fdac <__malloc_unlock>
 800f9d2:	f026 0607 	bic.w	r6, r6, #7
 800f9d6:	1d23      	adds	r3, r4, #4
 800f9d8:	1af2      	subs	r2, r6, r3
 800f9da:	d0ae      	beq.n	800f93a <_malloc_r+0x22>
 800f9dc:	1b9b      	subs	r3, r3, r6
 800f9de:	50a3      	str	r3, [r4, r2]
 800f9e0:	e7ab      	b.n	800f93a <_malloc_r+0x22>
 800f9e2:	42a3      	cmp	r3, r4
 800f9e4:	6862      	ldr	r2, [r4, #4]
 800f9e6:	d1dd      	bne.n	800f9a4 <_malloc_r+0x8c>
 800f9e8:	f8c8 2000 	str.w	r2, [r8]
 800f9ec:	e7ec      	b.n	800f9c8 <_malloc_r+0xb0>
 800f9ee:	4623      	mov	r3, r4
 800f9f0:	6864      	ldr	r4, [r4, #4]
 800f9f2:	e7ac      	b.n	800f94e <_malloc_r+0x36>
 800f9f4:	4634      	mov	r4, r6
 800f9f6:	6876      	ldr	r6, [r6, #4]
 800f9f8:	e7b4      	b.n	800f964 <_malloc_r+0x4c>
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	e7cc      	b.n	800f998 <_malloc_r+0x80>
 800f9fe:	230c      	movs	r3, #12
 800fa00:	603b      	str	r3, [r7, #0]
 800fa02:	4638      	mov	r0, r7
 800fa04:	f000 f9d2 	bl	800fdac <__malloc_unlock>
 800fa08:	e797      	b.n	800f93a <_malloc_r+0x22>
 800fa0a:	6025      	str	r5, [r4, #0]
 800fa0c:	e7dc      	b.n	800f9c8 <_malloc_r+0xb0>
 800fa0e:	605b      	str	r3, [r3, #4]
 800fa10:	deff      	udf	#255	; 0xff
 800fa12:	bf00      	nop
 800fa14:	20009ef0 	.word	0x20009ef0

0800fa18 <_printf_common>:
 800fa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa1c:	4616      	mov	r6, r2
 800fa1e:	4699      	mov	r9, r3
 800fa20:	688a      	ldr	r2, [r1, #8]
 800fa22:	690b      	ldr	r3, [r1, #16]
 800fa24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	bfb8      	it	lt
 800fa2c:	4613      	movlt	r3, r2
 800fa2e:	6033      	str	r3, [r6, #0]
 800fa30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa34:	4607      	mov	r7, r0
 800fa36:	460c      	mov	r4, r1
 800fa38:	b10a      	cbz	r2, 800fa3e <_printf_common+0x26>
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	6033      	str	r3, [r6, #0]
 800fa3e:	6823      	ldr	r3, [r4, #0]
 800fa40:	0699      	lsls	r1, r3, #26
 800fa42:	bf42      	ittt	mi
 800fa44:	6833      	ldrmi	r3, [r6, #0]
 800fa46:	3302      	addmi	r3, #2
 800fa48:	6033      	strmi	r3, [r6, #0]
 800fa4a:	6825      	ldr	r5, [r4, #0]
 800fa4c:	f015 0506 	ands.w	r5, r5, #6
 800fa50:	d106      	bne.n	800fa60 <_printf_common+0x48>
 800fa52:	f104 0a19 	add.w	sl, r4, #25
 800fa56:	68e3      	ldr	r3, [r4, #12]
 800fa58:	6832      	ldr	r2, [r6, #0]
 800fa5a:	1a9b      	subs	r3, r3, r2
 800fa5c:	42ab      	cmp	r3, r5
 800fa5e:	dc26      	bgt.n	800faae <_printf_common+0x96>
 800fa60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa64:	1e13      	subs	r3, r2, #0
 800fa66:	6822      	ldr	r2, [r4, #0]
 800fa68:	bf18      	it	ne
 800fa6a:	2301      	movne	r3, #1
 800fa6c:	0692      	lsls	r2, r2, #26
 800fa6e:	d42b      	bmi.n	800fac8 <_printf_common+0xb0>
 800fa70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa74:	4649      	mov	r1, r9
 800fa76:	4638      	mov	r0, r7
 800fa78:	47c0      	blx	r8
 800fa7a:	3001      	adds	r0, #1
 800fa7c:	d01e      	beq.n	800fabc <_printf_common+0xa4>
 800fa7e:	6823      	ldr	r3, [r4, #0]
 800fa80:	6922      	ldr	r2, [r4, #16]
 800fa82:	f003 0306 	and.w	r3, r3, #6
 800fa86:	2b04      	cmp	r3, #4
 800fa88:	bf02      	ittt	eq
 800fa8a:	68e5      	ldreq	r5, [r4, #12]
 800fa8c:	6833      	ldreq	r3, [r6, #0]
 800fa8e:	1aed      	subeq	r5, r5, r3
 800fa90:	68a3      	ldr	r3, [r4, #8]
 800fa92:	bf0c      	ite	eq
 800fa94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa98:	2500      	movne	r5, #0
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	bfc4      	itt	gt
 800fa9e:	1a9b      	subgt	r3, r3, r2
 800faa0:	18ed      	addgt	r5, r5, r3
 800faa2:	2600      	movs	r6, #0
 800faa4:	341a      	adds	r4, #26
 800faa6:	42b5      	cmp	r5, r6
 800faa8:	d11a      	bne.n	800fae0 <_printf_common+0xc8>
 800faaa:	2000      	movs	r0, #0
 800faac:	e008      	b.n	800fac0 <_printf_common+0xa8>
 800faae:	2301      	movs	r3, #1
 800fab0:	4652      	mov	r2, sl
 800fab2:	4649      	mov	r1, r9
 800fab4:	4638      	mov	r0, r7
 800fab6:	47c0      	blx	r8
 800fab8:	3001      	adds	r0, #1
 800faba:	d103      	bne.n	800fac4 <_printf_common+0xac>
 800fabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac4:	3501      	adds	r5, #1
 800fac6:	e7c6      	b.n	800fa56 <_printf_common+0x3e>
 800fac8:	18e1      	adds	r1, r4, r3
 800faca:	1c5a      	adds	r2, r3, #1
 800facc:	2030      	movs	r0, #48	; 0x30
 800face:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fad2:	4422      	add	r2, r4
 800fad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fadc:	3302      	adds	r3, #2
 800fade:	e7c7      	b.n	800fa70 <_printf_common+0x58>
 800fae0:	2301      	movs	r3, #1
 800fae2:	4622      	mov	r2, r4
 800fae4:	4649      	mov	r1, r9
 800fae6:	4638      	mov	r0, r7
 800fae8:	47c0      	blx	r8
 800faea:	3001      	adds	r0, #1
 800faec:	d0e6      	beq.n	800fabc <_printf_common+0xa4>
 800faee:	3601      	adds	r6, #1
 800faf0:	e7d9      	b.n	800faa6 <_printf_common+0x8e>
	...

0800faf4 <_printf_i>:
 800faf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800faf8:	7e0f      	ldrb	r7, [r1, #24]
 800fafa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fafc:	2f78      	cmp	r7, #120	; 0x78
 800fafe:	4691      	mov	r9, r2
 800fb00:	4680      	mov	r8, r0
 800fb02:	460c      	mov	r4, r1
 800fb04:	469a      	mov	sl, r3
 800fb06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb0a:	d807      	bhi.n	800fb1c <_printf_i+0x28>
 800fb0c:	2f62      	cmp	r7, #98	; 0x62
 800fb0e:	d80a      	bhi.n	800fb26 <_printf_i+0x32>
 800fb10:	2f00      	cmp	r7, #0
 800fb12:	f000 80d4 	beq.w	800fcbe <_printf_i+0x1ca>
 800fb16:	2f58      	cmp	r7, #88	; 0x58
 800fb18:	f000 80c0 	beq.w	800fc9c <_printf_i+0x1a8>
 800fb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb24:	e03a      	b.n	800fb9c <_printf_i+0xa8>
 800fb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb2a:	2b15      	cmp	r3, #21
 800fb2c:	d8f6      	bhi.n	800fb1c <_printf_i+0x28>
 800fb2e:	a101      	add	r1, pc, #4	; (adr r1, 800fb34 <_printf_i+0x40>)
 800fb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb34:	0800fb8d 	.word	0x0800fb8d
 800fb38:	0800fba1 	.word	0x0800fba1
 800fb3c:	0800fb1d 	.word	0x0800fb1d
 800fb40:	0800fb1d 	.word	0x0800fb1d
 800fb44:	0800fb1d 	.word	0x0800fb1d
 800fb48:	0800fb1d 	.word	0x0800fb1d
 800fb4c:	0800fba1 	.word	0x0800fba1
 800fb50:	0800fb1d 	.word	0x0800fb1d
 800fb54:	0800fb1d 	.word	0x0800fb1d
 800fb58:	0800fb1d 	.word	0x0800fb1d
 800fb5c:	0800fb1d 	.word	0x0800fb1d
 800fb60:	0800fca5 	.word	0x0800fca5
 800fb64:	0800fbcd 	.word	0x0800fbcd
 800fb68:	0800fc5f 	.word	0x0800fc5f
 800fb6c:	0800fb1d 	.word	0x0800fb1d
 800fb70:	0800fb1d 	.word	0x0800fb1d
 800fb74:	0800fcc7 	.word	0x0800fcc7
 800fb78:	0800fb1d 	.word	0x0800fb1d
 800fb7c:	0800fbcd 	.word	0x0800fbcd
 800fb80:	0800fb1d 	.word	0x0800fb1d
 800fb84:	0800fb1d 	.word	0x0800fb1d
 800fb88:	0800fc67 	.word	0x0800fc67
 800fb8c:	682b      	ldr	r3, [r5, #0]
 800fb8e:	1d1a      	adds	r2, r3, #4
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	602a      	str	r2, [r5, #0]
 800fb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e09f      	b.n	800fce0 <_printf_i+0x1ec>
 800fba0:	6820      	ldr	r0, [r4, #0]
 800fba2:	682b      	ldr	r3, [r5, #0]
 800fba4:	0607      	lsls	r7, r0, #24
 800fba6:	f103 0104 	add.w	r1, r3, #4
 800fbaa:	6029      	str	r1, [r5, #0]
 800fbac:	d501      	bpl.n	800fbb2 <_printf_i+0xbe>
 800fbae:	681e      	ldr	r6, [r3, #0]
 800fbb0:	e003      	b.n	800fbba <_printf_i+0xc6>
 800fbb2:	0646      	lsls	r6, r0, #25
 800fbb4:	d5fb      	bpl.n	800fbae <_printf_i+0xba>
 800fbb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fbba:	2e00      	cmp	r6, #0
 800fbbc:	da03      	bge.n	800fbc6 <_printf_i+0xd2>
 800fbbe:	232d      	movs	r3, #45	; 0x2d
 800fbc0:	4276      	negs	r6, r6
 800fbc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbc6:	485a      	ldr	r0, [pc, #360]	; (800fd30 <_printf_i+0x23c>)
 800fbc8:	230a      	movs	r3, #10
 800fbca:	e012      	b.n	800fbf2 <_printf_i+0xfe>
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	6820      	ldr	r0, [r4, #0]
 800fbd0:	1d19      	adds	r1, r3, #4
 800fbd2:	6029      	str	r1, [r5, #0]
 800fbd4:	0605      	lsls	r5, r0, #24
 800fbd6:	d501      	bpl.n	800fbdc <_printf_i+0xe8>
 800fbd8:	681e      	ldr	r6, [r3, #0]
 800fbda:	e002      	b.n	800fbe2 <_printf_i+0xee>
 800fbdc:	0641      	lsls	r1, r0, #25
 800fbde:	d5fb      	bpl.n	800fbd8 <_printf_i+0xe4>
 800fbe0:	881e      	ldrh	r6, [r3, #0]
 800fbe2:	4853      	ldr	r0, [pc, #332]	; (800fd30 <_printf_i+0x23c>)
 800fbe4:	2f6f      	cmp	r7, #111	; 0x6f
 800fbe6:	bf0c      	ite	eq
 800fbe8:	2308      	moveq	r3, #8
 800fbea:	230a      	movne	r3, #10
 800fbec:	2100      	movs	r1, #0
 800fbee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbf2:	6865      	ldr	r5, [r4, #4]
 800fbf4:	60a5      	str	r5, [r4, #8]
 800fbf6:	2d00      	cmp	r5, #0
 800fbf8:	bfa2      	ittt	ge
 800fbfa:	6821      	ldrge	r1, [r4, #0]
 800fbfc:	f021 0104 	bicge.w	r1, r1, #4
 800fc00:	6021      	strge	r1, [r4, #0]
 800fc02:	b90e      	cbnz	r6, 800fc08 <_printf_i+0x114>
 800fc04:	2d00      	cmp	r5, #0
 800fc06:	d04b      	beq.n	800fca0 <_printf_i+0x1ac>
 800fc08:	4615      	mov	r5, r2
 800fc0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc0e:	fb03 6711 	mls	r7, r3, r1, r6
 800fc12:	5dc7      	ldrb	r7, [r0, r7]
 800fc14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc18:	4637      	mov	r7, r6
 800fc1a:	42bb      	cmp	r3, r7
 800fc1c:	460e      	mov	r6, r1
 800fc1e:	d9f4      	bls.n	800fc0a <_printf_i+0x116>
 800fc20:	2b08      	cmp	r3, #8
 800fc22:	d10b      	bne.n	800fc3c <_printf_i+0x148>
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	07de      	lsls	r6, r3, #31
 800fc28:	d508      	bpl.n	800fc3c <_printf_i+0x148>
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	6861      	ldr	r1, [r4, #4]
 800fc2e:	4299      	cmp	r1, r3
 800fc30:	bfde      	ittt	le
 800fc32:	2330      	movle	r3, #48	; 0x30
 800fc34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fc3c:	1b52      	subs	r2, r2, r5
 800fc3e:	6122      	str	r2, [r4, #16]
 800fc40:	f8cd a000 	str.w	sl, [sp]
 800fc44:	464b      	mov	r3, r9
 800fc46:	aa03      	add	r2, sp, #12
 800fc48:	4621      	mov	r1, r4
 800fc4a:	4640      	mov	r0, r8
 800fc4c:	f7ff fee4 	bl	800fa18 <_printf_common>
 800fc50:	3001      	adds	r0, #1
 800fc52:	d14a      	bne.n	800fcea <_printf_i+0x1f6>
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc58:	b004      	add	sp, #16
 800fc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	f043 0320 	orr.w	r3, r3, #32
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	4833      	ldr	r0, [pc, #204]	; (800fd34 <_printf_i+0x240>)
 800fc68:	2778      	movs	r7, #120	; 0x78
 800fc6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	6829      	ldr	r1, [r5, #0]
 800fc72:	061f      	lsls	r7, r3, #24
 800fc74:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc78:	d402      	bmi.n	800fc80 <_printf_i+0x18c>
 800fc7a:	065f      	lsls	r7, r3, #25
 800fc7c:	bf48      	it	mi
 800fc7e:	b2b6      	uxthmi	r6, r6
 800fc80:	07df      	lsls	r7, r3, #31
 800fc82:	bf48      	it	mi
 800fc84:	f043 0320 	orrmi.w	r3, r3, #32
 800fc88:	6029      	str	r1, [r5, #0]
 800fc8a:	bf48      	it	mi
 800fc8c:	6023      	strmi	r3, [r4, #0]
 800fc8e:	b91e      	cbnz	r6, 800fc98 <_printf_i+0x1a4>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	f023 0320 	bic.w	r3, r3, #32
 800fc96:	6023      	str	r3, [r4, #0]
 800fc98:	2310      	movs	r3, #16
 800fc9a:	e7a7      	b.n	800fbec <_printf_i+0xf8>
 800fc9c:	4824      	ldr	r0, [pc, #144]	; (800fd30 <_printf_i+0x23c>)
 800fc9e:	e7e4      	b.n	800fc6a <_printf_i+0x176>
 800fca0:	4615      	mov	r5, r2
 800fca2:	e7bd      	b.n	800fc20 <_printf_i+0x12c>
 800fca4:	682b      	ldr	r3, [r5, #0]
 800fca6:	6826      	ldr	r6, [r4, #0]
 800fca8:	6961      	ldr	r1, [r4, #20]
 800fcaa:	1d18      	adds	r0, r3, #4
 800fcac:	6028      	str	r0, [r5, #0]
 800fcae:	0635      	lsls	r5, r6, #24
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	d501      	bpl.n	800fcb8 <_printf_i+0x1c4>
 800fcb4:	6019      	str	r1, [r3, #0]
 800fcb6:	e002      	b.n	800fcbe <_printf_i+0x1ca>
 800fcb8:	0670      	lsls	r0, r6, #25
 800fcba:	d5fb      	bpl.n	800fcb4 <_printf_i+0x1c0>
 800fcbc:	8019      	strh	r1, [r3, #0]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	4615      	mov	r5, r2
 800fcc4:	e7bc      	b.n	800fc40 <_printf_i+0x14c>
 800fcc6:	682b      	ldr	r3, [r5, #0]
 800fcc8:	1d1a      	adds	r2, r3, #4
 800fcca:	602a      	str	r2, [r5, #0]
 800fccc:	681d      	ldr	r5, [r3, #0]
 800fcce:	6862      	ldr	r2, [r4, #4]
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f7f0 fa9c 	bl	8000210 <memchr>
 800fcd8:	b108      	cbz	r0, 800fcde <_printf_i+0x1ea>
 800fcda:	1b40      	subs	r0, r0, r5
 800fcdc:	6060      	str	r0, [r4, #4]
 800fcde:	6863      	ldr	r3, [r4, #4]
 800fce0:	6123      	str	r3, [r4, #16]
 800fce2:	2300      	movs	r3, #0
 800fce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce8:	e7aa      	b.n	800fc40 <_printf_i+0x14c>
 800fcea:	6923      	ldr	r3, [r4, #16]
 800fcec:	462a      	mov	r2, r5
 800fcee:	4649      	mov	r1, r9
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	47d0      	blx	sl
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d0ad      	beq.n	800fc54 <_printf_i+0x160>
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	079b      	lsls	r3, r3, #30
 800fcfc:	d413      	bmi.n	800fd26 <_printf_i+0x232>
 800fcfe:	68e0      	ldr	r0, [r4, #12]
 800fd00:	9b03      	ldr	r3, [sp, #12]
 800fd02:	4298      	cmp	r0, r3
 800fd04:	bfb8      	it	lt
 800fd06:	4618      	movlt	r0, r3
 800fd08:	e7a6      	b.n	800fc58 <_printf_i+0x164>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	4632      	mov	r2, r6
 800fd0e:	4649      	mov	r1, r9
 800fd10:	4640      	mov	r0, r8
 800fd12:	47d0      	blx	sl
 800fd14:	3001      	adds	r0, #1
 800fd16:	d09d      	beq.n	800fc54 <_printf_i+0x160>
 800fd18:	3501      	adds	r5, #1
 800fd1a:	68e3      	ldr	r3, [r4, #12]
 800fd1c:	9903      	ldr	r1, [sp, #12]
 800fd1e:	1a5b      	subs	r3, r3, r1
 800fd20:	42ab      	cmp	r3, r5
 800fd22:	dcf2      	bgt.n	800fd0a <_printf_i+0x216>
 800fd24:	e7eb      	b.n	800fcfe <_printf_i+0x20a>
 800fd26:	2500      	movs	r5, #0
 800fd28:	f104 0619 	add.w	r6, r4, #25
 800fd2c:	e7f5      	b.n	800fd1a <_printf_i+0x226>
 800fd2e:	bf00      	nop
 800fd30:	08018ff0 	.word	0x08018ff0
 800fd34:	08019001 	.word	0x08019001

0800fd38 <sniprintf>:
 800fd38:	b40c      	push	{r2, r3}
 800fd3a:	b530      	push	{r4, r5, lr}
 800fd3c:	4b17      	ldr	r3, [pc, #92]	; (800fd9c <sniprintf+0x64>)
 800fd3e:	1e0c      	subs	r4, r1, #0
 800fd40:	681d      	ldr	r5, [r3, #0]
 800fd42:	b09d      	sub	sp, #116	; 0x74
 800fd44:	da08      	bge.n	800fd58 <sniprintf+0x20>
 800fd46:	238b      	movs	r3, #139	; 0x8b
 800fd48:	602b      	str	r3, [r5, #0]
 800fd4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd4e:	b01d      	add	sp, #116	; 0x74
 800fd50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd54:	b002      	add	sp, #8
 800fd56:	4770      	bx	lr
 800fd58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd60:	bf14      	ite	ne
 800fd62:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fd66:	4623      	moveq	r3, r4
 800fd68:	9304      	str	r3, [sp, #16]
 800fd6a:	9307      	str	r3, [sp, #28]
 800fd6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd70:	9002      	str	r0, [sp, #8]
 800fd72:	9006      	str	r0, [sp, #24]
 800fd74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd7a:	ab21      	add	r3, sp, #132	; 0x84
 800fd7c:	a902      	add	r1, sp, #8
 800fd7e:	4628      	mov	r0, r5
 800fd80:	9301      	str	r3, [sp, #4]
 800fd82:	f001 fa7d 	bl	8011280 <_svfiprintf_r>
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	bfbc      	itt	lt
 800fd8a:	238b      	movlt	r3, #139	; 0x8b
 800fd8c:	602b      	strlt	r3, [r5, #0]
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	d0dd      	beq.n	800fd4e <sniprintf+0x16>
 800fd92:	9b02      	ldr	r3, [sp, #8]
 800fd94:	2200      	movs	r2, #0
 800fd96:	701a      	strb	r2, [r3, #0]
 800fd98:	e7d9      	b.n	800fd4e <sniprintf+0x16>
 800fd9a:	bf00      	nop
 800fd9c:	200000cc 	.word	0x200000cc

0800fda0 <__malloc_lock>:
 800fda0:	4801      	ldr	r0, [pc, #4]	; (800fda8 <__malloc_lock+0x8>)
 800fda2:	f000 bb14 	b.w	80103ce <__retarget_lock_acquire_recursive>
 800fda6:	bf00      	nop
 800fda8:	2000a038 	.word	0x2000a038

0800fdac <__malloc_unlock>:
 800fdac:	4801      	ldr	r0, [pc, #4]	; (800fdb4 <__malloc_unlock+0x8>)
 800fdae:	f000 bb0f 	b.w	80103d0 <__retarget_lock_release_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	2000a038 	.word	0x2000a038

0800fdb8 <siprintf>:
 800fdb8:	b40e      	push	{r1, r2, r3}
 800fdba:	b500      	push	{lr}
 800fdbc:	b09c      	sub	sp, #112	; 0x70
 800fdbe:	ab1d      	add	r3, sp, #116	; 0x74
 800fdc0:	9002      	str	r0, [sp, #8]
 800fdc2:	9006      	str	r0, [sp, #24]
 800fdc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fdc8:	4809      	ldr	r0, [pc, #36]	; (800fdf0 <siprintf+0x38>)
 800fdca:	9107      	str	r1, [sp, #28]
 800fdcc:	9104      	str	r1, [sp, #16]
 800fdce:	4909      	ldr	r1, [pc, #36]	; (800fdf4 <siprintf+0x3c>)
 800fdd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdd4:	9105      	str	r1, [sp, #20]
 800fdd6:	6800      	ldr	r0, [r0, #0]
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	a902      	add	r1, sp, #8
 800fddc:	f001 fa50 	bl	8011280 <_svfiprintf_r>
 800fde0:	9b02      	ldr	r3, [sp, #8]
 800fde2:	2200      	movs	r2, #0
 800fde4:	701a      	strb	r2, [r3, #0]
 800fde6:	b01c      	add	sp, #112	; 0x70
 800fde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdec:	b003      	add	sp, #12
 800fdee:	4770      	bx	lr
 800fdf0:	200000cc 	.word	0x200000cc
 800fdf4:	ffff0208 	.word	0xffff0208

0800fdf8 <siscanf>:
 800fdf8:	b40e      	push	{r1, r2, r3}
 800fdfa:	b510      	push	{r4, lr}
 800fdfc:	b09f      	sub	sp, #124	; 0x7c
 800fdfe:	ac21      	add	r4, sp, #132	; 0x84
 800fe00:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fe04:	f854 2b04 	ldr.w	r2, [r4], #4
 800fe08:	9201      	str	r2, [sp, #4]
 800fe0a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fe0e:	9004      	str	r0, [sp, #16]
 800fe10:	9008      	str	r0, [sp, #32]
 800fe12:	f7f0 fa4d 	bl	80002b0 <strlen>
 800fe16:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <siscanf+0x50>)
 800fe18:	9005      	str	r0, [sp, #20]
 800fe1a:	9009      	str	r0, [sp, #36]	; 0x24
 800fe1c:	930d      	str	r3, [sp, #52]	; 0x34
 800fe1e:	480b      	ldr	r0, [pc, #44]	; (800fe4c <siscanf+0x54>)
 800fe20:	9a01      	ldr	r2, [sp, #4]
 800fe22:	6800      	ldr	r0, [r0, #0]
 800fe24:	9403      	str	r4, [sp, #12]
 800fe26:	2300      	movs	r3, #0
 800fe28:	9311      	str	r3, [sp, #68]	; 0x44
 800fe2a:	9316      	str	r3, [sp, #88]	; 0x58
 800fe2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe30:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fe34:	a904      	add	r1, sp, #16
 800fe36:	4623      	mov	r3, r4
 800fe38:	f001 fb7a 	bl	8011530 <__ssvfiscanf_r>
 800fe3c:	b01f      	add	sp, #124	; 0x7c
 800fe3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe42:	b003      	add	sp, #12
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	0800fe73 	.word	0x0800fe73
 800fe4c:	200000cc 	.word	0x200000cc

0800fe50 <__sread>:
 800fe50:	b510      	push	{r4, lr}
 800fe52:	460c      	mov	r4, r1
 800fe54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe58:	f000 fa5a 	bl	8010310 <_read_r>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	bfab      	itete	ge
 800fe60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe62:	89a3      	ldrhlt	r3, [r4, #12]
 800fe64:	181b      	addge	r3, r3, r0
 800fe66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe6a:	bfac      	ite	ge
 800fe6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe6e:	81a3      	strhlt	r3, [r4, #12]
 800fe70:	bd10      	pop	{r4, pc}

0800fe72 <__seofread>:
 800fe72:	2000      	movs	r0, #0
 800fe74:	4770      	bx	lr

0800fe76 <__swrite>:
 800fe76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7a:	461f      	mov	r7, r3
 800fe7c:	898b      	ldrh	r3, [r1, #12]
 800fe7e:	05db      	lsls	r3, r3, #23
 800fe80:	4605      	mov	r5, r0
 800fe82:	460c      	mov	r4, r1
 800fe84:	4616      	mov	r6, r2
 800fe86:	d505      	bpl.n	800fe94 <__swrite+0x1e>
 800fe88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f000 fa2c 	bl	80102ec <_lseek_r>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe9e:	81a3      	strh	r3, [r4, #12]
 800fea0:	4632      	mov	r2, r6
 800fea2:	463b      	mov	r3, r7
 800fea4:	4628      	mov	r0, r5
 800fea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	f000 ba53 	b.w	8010354 <_write_r>

0800feae <__sseek>:
 800feae:	b510      	push	{r4, lr}
 800feb0:	460c      	mov	r4, r1
 800feb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb6:	f000 fa19 	bl	80102ec <_lseek_r>
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	bf15      	itete	ne
 800fec0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800feca:	81a3      	strheq	r3, [r4, #12]
 800fecc:	bf18      	it	ne
 800fece:	81a3      	strhne	r3, [r4, #12]
 800fed0:	bd10      	pop	{r4, pc}

0800fed2 <__sclose>:
 800fed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed6:	f000 b9f9 	b.w	80102cc <_close_r>
	...

0800fedc <std>:
 800fedc:	2300      	movs	r3, #0
 800fede:	b510      	push	{r4, lr}
 800fee0:	4604      	mov	r4, r0
 800fee2:	e9c0 3300 	strd	r3, r3, [r0]
 800fee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800feea:	6083      	str	r3, [r0, #8]
 800feec:	8181      	strh	r1, [r0, #12]
 800feee:	6643      	str	r3, [r0, #100]	; 0x64
 800fef0:	81c2      	strh	r2, [r0, #14]
 800fef2:	6183      	str	r3, [r0, #24]
 800fef4:	4619      	mov	r1, r3
 800fef6:	2208      	movs	r2, #8
 800fef8:	305c      	adds	r0, #92	; 0x5c
 800fefa:	f000 f9db 	bl	80102b4 <memset>
 800fefe:	4b0d      	ldr	r3, [pc, #52]	; (800ff34 <std+0x58>)
 800ff00:	6263      	str	r3, [r4, #36]	; 0x24
 800ff02:	4b0d      	ldr	r3, [pc, #52]	; (800ff38 <std+0x5c>)
 800ff04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff06:	4b0d      	ldr	r3, [pc, #52]	; (800ff3c <std+0x60>)
 800ff08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff0a:	4b0d      	ldr	r3, [pc, #52]	; (800ff40 <std+0x64>)
 800ff0c:	6323      	str	r3, [r4, #48]	; 0x30
 800ff0e:	4b0d      	ldr	r3, [pc, #52]	; (800ff44 <std+0x68>)
 800ff10:	6224      	str	r4, [r4, #32]
 800ff12:	429c      	cmp	r4, r3
 800ff14:	d006      	beq.n	800ff24 <std+0x48>
 800ff16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ff1a:	4294      	cmp	r4, r2
 800ff1c:	d002      	beq.n	800ff24 <std+0x48>
 800ff1e:	33d0      	adds	r3, #208	; 0xd0
 800ff20:	429c      	cmp	r4, r3
 800ff22:	d105      	bne.n	800ff30 <std+0x54>
 800ff24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff2c:	f000 ba4e 	b.w	80103cc <__retarget_lock_init_recursive>
 800ff30:	bd10      	pop	{r4, pc}
 800ff32:	bf00      	nop
 800ff34:	0800fe51 	.word	0x0800fe51
 800ff38:	0800fe77 	.word	0x0800fe77
 800ff3c:	0800feaf 	.word	0x0800feaf
 800ff40:	0800fed3 	.word	0x0800fed3
 800ff44:	20009ef8 	.word	0x20009ef8

0800ff48 <stdio_exit_handler>:
 800ff48:	4a02      	ldr	r2, [pc, #8]	; (800ff54 <stdio_exit_handler+0xc>)
 800ff4a:	4903      	ldr	r1, [pc, #12]	; (800ff58 <stdio_exit_handler+0x10>)
 800ff4c:	4803      	ldr	r0, [pc, #12]	; (800ff5c <stdio_exit_handler+0x14>)
 800ff4e:	f000 b8f7 	b.w	8010140 <_fwalk_sglue>
 800ff52:	bf00      	nop
 800ff54:	20000074 	.word	0x20000074
 800ff58:	08011ec5 	.word	0x08011ec5
 800ff5c:	20000080 	.word	0x20000080

0800ff60 <cleanup_stdio>:
 800ff60:	6841      	ldr	r1, [r0, #4]
 800ff62:	4b0c      	ldr	r3, [pc, #48]	; (800ff94 <cleanup_stdio+0x34>)
 800ff64:	4299      	cmp	r1, r3
 800ff66:	b510      	push	{r4, lr}
 800ff68:	4604      	mov	r4, r0
 800ff6a:	d001      	beq.n	800ff70 <cleanup_stdio+0x10>
 800ff6c:	f001 ffaa 	bl	8011ec4 <_fflush_r>
 800ff70:	68a1      	ldr	r1, [r4, #8]
 800ff72:	4b09      	ldr	r3, [pc, #36]	; (800ff98 <cleanup_stdio+0x38>)
 800ff74:	4299      	cmp	r1, r3
 800ff76:	d002      	beq.n	800ff7e <cleanup_stdio+0x1e>
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f001 ffa3 	bl	8011ec4 <_fflush_r>
 800ff7e:	68e1      	ldr	r1, [r4, #12]
 800ff80:	4b06      	ldr	r3, [pc, #24]	; (800ff9c <cleanup_stdio+0x3c>)
 800ff82:	4299      	cmp	r1, r3
 800ff84:	d004      	beq.n	800ff90 <cleanup_stdio+0x30>
 800ff86:	4620      	mov	r0, r4
 800ff88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff8c:	f001 bf9a 	b.w	8011ec4 <_fflush_r>
 800ff90:	bd10      	pop	{r4, pc}
 800ff92:	bf00      	nop
 800ff94:	20009ef8 	.word	0x20009ef8
 800ff98:	20009f60 	.word	0x20009f60
 800ff9c:	20009fc8 	.word	0x20009fc8

0800ffa0 <global_stdio_init.part.0>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	4b0b      	ldr	r3, [pc, #44]	; (800ffd0 <global_stdio_init.part.0+0x30>)
 800ffa4:	4c0b      	ldr	r4, [pc, #44]	; (800ffd4 <global_stdio_init.part.0+0x34>)
 800ffa6:	4a0c      	ldr	r2, [pc, #48]	; (800ffd8 <global_stdio_init.part.0+0x38>)
 800ffa8:	601a      	str	r2, [r3, #0]
 800ffaa:	4620      	mov	r0, r4
 800ffac:	2200      	movs	r2, #0
 800ffae:	2104      	movs	r1, #4
 800ffb0:	f7ff ff94 	bl	800fedc <std>
 800ffb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ffb8:	2201      	movs	r2, #1
 800ffba:	2109      	movs	r1, #9
 800ffbc:	f7ff ff8e 	bl	800fedc <std>
 800ffc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ffc4:	2202      	movs	r2, #2
 800ffc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffca:	2112      	movs	r1, #18
 800ffcc:	f7ff bf86 	b.w	800fedc <std>
 800ffd0:	2000a030 	.word	0x2000a030
 800ffd4:	20009ef8 	.word	0x20009ef8
 800ffd8:	0800ff49 	.word	0x0800ff49

0800ffdc <__sfp_lock_acquire>:
 800ffdc:	4801      	ldr	r0, [pc, #4]	; (800ffe4 <__sfp_lock_acquire+0x8>)
 800ffde:	f000 b9f6 	b.w	80103ce <__retarget_lock_acquire_recursive>
 800ffe2:	bf00      	nop
 800ffe4:	2000a039 	.word	0x2000a039

0800ffe8 <__sfp_lock_release>:
 800ffe8:	4801      	ldr	r0, [pc, #4]	; (800fff0 <__sfp_lock_release+0x8>)
 800ffea:	f000 b9f1 	b.w	80103d0 <__retarget_lock_release_recursive>
 800ffee:	bf00      	nop
 800fff0:	2000a039 	.word	0x2000a039

0800fff4 <__sinit>:
 800fff4:	b510      	push	{r4, lr}
 800fff6:	4604      	mov	r4, r0
 800fff8:	f7ff fff0 	bl	800ffdc <__sfp_lock_acquire>
 800fffc:	6a23      	ldr	r3, [r4, #32]
 800fffe:	b11b      	cbz	r3, 8010008 <__sinit+0x14>
 8010000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010004:	f7ff bff0 	b.w	800ffe8 <__sfp_lock_release>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__sinit+0x28>)
 801000a:	6223      	str	r3, [r4, #32]
 801000c:	4b04      	ldr	r3, [pc, #16]	; (8010020 <__sinit+0x2c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1f5      	bne.n	8010000 <__sinit+0xc>
 8010014:	f7ff ffc4 	bl	800ffa0 <global_stdio_init.part.0>
 8010018:	e7f2      	b.n	8010000 <__sinit+0xc>
 801001a:	bf00      	nop
 801001c:	0800ff61 	.word	0x0800ff61
 8010020:	2000a030 	.word	0x2000a030

08010024 <_strtol_l.constprop.0>:
 8010024:	2b01      	cmp	r3, #1
 8010026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801002a:	d001      	beq.n	8010030 <_strtol_l.constprop.0+0xc>
 801002c:	2b24      	cmp	r3, #36	; 0x24
 801002e:	d906      	bls.n	801003e <_strtol_l.constprop.0+0x1a>
 8010030:	f000 f9a2 	bl	8010378 <__errno>
 8010034:	2316      	movs	r3, #22
 8010036:	6003      	str	r3, [r0, #0]
 8010038:	2000      	movs	r0, #0
 801003a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801003e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010124 <_strtol_l.constprop.0+0x100>
 8010042:	460d      	mov	r5, r1
 8010044:	462e      	mov	r6, r5
 8010046:	f815 4b01 	ldrb.w	r4, [r5], #1
 801004a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801004e:	f017 0708 	ands.w	r7, r7, #8
 8010052:	d1f7      	bne.n	8010044 <_strtol_l.constprop.0+0x20>
 8010054:	2c2d      	cmp	r4, #45	; 0x2d
 8010056:	d132      	bne.n	80100be <_strtol_l.constprop.0+0x9a>
 8010058:	782c      	ldrb	r4, [r5, #0]
 801005a:	2701      	movs	r7, #1
 801005c:	1cb5      	adds	r5, r6, #2
 801005e:	2b00      	cmp	r3, #0
 8010060:	d05b      	beq.n	801011a <_strtol_l.constprop.0+0xf6>
 8010062:	2b10      	cmp	r3, #16
 8010064:	d109      	bne.n	801007a <_strtol_l.constprop.0+0x56>
 8010066:	2c30      	cmp	r4, #48	; 0x30
 8010068:	d107      	bne.n	801007a <_strtol_l.constprop.0+0x56>
 801006a:	782c      	ldrb	r4, [r5, #0]
 801006c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010070:	2c58      	cmp	r4, #88	; 0x58
 8010072:	d14d      	bne.n	8010110 <_strtol_l.constprop.0+0xec>
 8010074:	786c      	ldrb	r4, [r5, #1]
 8010076:	2310      	movs	r3, #16
 8010078:	3502      	adds	r5, #2
 801007a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801007e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010082:	f04f 0e00 	mov.w	lr, #0
 8010086:	fbb8 f9f3 	udiv	r9, r8, r3
 801008a:	4676      	mov	r6, lr
 801008c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010090:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010094:	f1bc 0f09 	cmp.w	ip, #9
 8010098:	d816      	bhi.n	80100c8 <_strtol_l.constprop.0+0xa4>
 801009a:	4664      	mov	r4, ip
 801009c:	42a3      	cmp	r3, r4
 801009e:	dd24      	ble.n	80100ea <_strtol_l.constprop.0+0xc6>
 80100a0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80100a4:	d008      	beq.n	80100b8 <_strtol_l.constprop.0+0x94>
 80100a6:	45b1      	cmp	r9, r6
 80100a8:	d31c      	bcc.n	80100e4 <_strtol_l.constprop.0+0xc0>
 80100aa:	d101      	bne.n	80100b0 <_strtol_l.constprop.0+0x8c>
 80100ac:	45a2      	cmp	sl, r4
 80100ae:	db19      	blt.n	80100e4 <_strtol_l.constprop.0+0xc0>
 80100b0:	fb06 4603 	mla	r6, r6, r3, r4
 80100b4:	f04f 0e01 	mov.w	lr, #1
 80100b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100bc:	e7e8      	b.n	8010090 <_strtol_l.constprop.0+0x6c>
 80100be:	2c2b      	cmp	r4, #43	; 0x2b
 80100c0:	bf04      	itt	eq
 80100c2:	782c      	ldrbeq	r4, [r5, #0]
 80100c4:	1cb5      	addeq	r5, r6, #2
 80100c6:	e7ca      	b.n	801005e <_strtol_l.constprop.0+0x3a>
 80100c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80100cc:	f1bc 0f19 	cmp.w	ip, #25
 80100d0:	d801      	bhi.n	80100d6 <_strtol_l.constprop.0+0xb2>
 80100d2:	3c37      	subs	r4, #55	; 0x37
 80100d4:	e7e2      	b.n	801009c <_strtol_l.constprop.0+0x78>
 80100d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80100da:	f1bc 0f19 	cmp.w	ip, #25
 80100de:	d804      	bhi.n	80100ea <_strtol_l.constprop.0+0xc6>
 80100e0:	3c57      	subs	r4, #87	; 0x57
 80100e2:	e7db      	b.n	801009c <_strtol_l.constprop.0+0x78>
 80100e4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80100e8:	e7e6      	b.n	80100b8 <_strtol_l.constprop.0+0x94>
 80100ea:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80100ee:	d105      	bne.n	80100fc <_strtol_l.constprop.0+0xd8>
 80100f0:	2322      	movs	r3, #34	; 0x22
 80100f2:	6003      	str	r3, [r0, #0]
 80100f4:	4646      	mov	r6, r8
 80100f6:	b942      	cbnz	r2, 801010a <_strtol_l.constprop.0+0xe6>
 80100f8:	4630      	mov	r0, r6
 80100fa:	e79e      	b.n	801003a <_strtol_l.constprop.0+0x16>
 80100fc:	b107      	cbz	r7, 8010100 <_strtol_l.constprop.0+0xdc>
 80100fe:	4276      	negs	r6, r6
 8010100:	2a00      	cmp	r2, #0
 8010102:	d0f9      	beq.n	80100f8 <_strtol_l.constprop.0+0xd4>
 8010104:	f1be 0f00 	cmp.w	lr, #0
 8010108:	d000      	beq.n	801010c <_strtol_l.constprop.0+0xe8>
 801010a:	1e69      	subs	r1, r5, #1
 801010c:	6011      	str	r1, [r2, #0]
 801010e:	e7f3      	b.n	80100f8 <_strtol_l.constprop.0+0xd4>
 8010110:	2430      	movs	r4, #48	; 0x30
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1b1      	bne.n	801007a <_strtol_l.constprop.0+0x56>
 8010116:	2308      	movs	r3, #8
 8010118:	e7af      	b.n	801007a <_strtol_l.constprop.0+0x56>
 801011a:	2c30      	cmp	r4, #48	; 0x30
 801011c:	d0a5      	beq.n	801006a <_strtol_l.constprop.0+0x46>
 801011e:	230a      	movs	r3, #10
 8010120:	e7ab      	b.n	801007a <_strtol_l.constprop.0+0x56>
 8010122:	bf00      	nop
 8010124:	08019013 	.word	0x08019013

08010128 <_strtol_r>:
 8010128:	f7ff bf7c 	b.w	8010024 <_strtol_l.constprop.0>

0801012c <strtol>:
 801012c:	4613      	mov	r3, r2
 801012e:	460a      	mov	r2, r1
 8010130:	4601      	mov	r1, r0
 8010132:	4802      	ldr	r0, [pc, #8]	; (801013c <strtol+0x10>)
 8010134:	6800      	ldr	r0, [r0, #0]
 8010136:	f7ff bf75 	b.w	8010024 <_strtol_l.constprop.0>
 801013a:	bf00      	nop
 801013c:	200000cc 	.word	0x200000cc

08010140 <_fwalk_sglue>:
 8010140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010144:	4607      	mov	r7, r0
 8010146:	4688      	mov	r8, r1
 8010148:	4614      	mov	r4, r2
 801014a:	2600      	movs	r6, #0
 801014c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010150:	f1b9 0901 	subs.w	r9, r9, #1
 8010154:	d505      	bpl.n	8010162 <_fwalk_sglue+0x22>
 8010156:	6824      	ldr	r4, [r4, #0]
 8010158:	2c00      	cmp	r4, #0
 801015a:	d1f7      	bne.n	801014c <_fwalk_sglue+0xc>
 801015c:	4630      	mov	r0, r6
 801015e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010162:	89ab      	ldrh	r3, [r5, #12]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d907      	bls.n	8010178 <_fwalk_sglue+0x38>
 8010168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801016c:	3301      	adds	r3, #1
 801016e:	d003      	beq.n	8010178 <_fwalk_sglue+0x38>
 8010170:	4629      	mov	r1, r5
 8010172:	4638      	mov	r0, r7
 8010174:	47c0      	blx	r8
 8010176:	4306      	orrs	r6, r0
 8010178:	3568      	adds	r5, #104	; 0x68
 801017a:	e7e9      	b.n	8010150 <_fwalk_sglue+0x10>

0801017c <_vsniprintf_r>:
 801017c:	b530      	push	{r4, r5, lr}
 801017e:	4614      	mov	r4, r2
 8010180:	2c00      	cmp	r4, #0
 8010182:	b09b      	sub	sp, #108	; 0x6c
 8010184:	4605      	mov	r5, r0
 8010186:	461a      	mov	r2, r3
 8010188:	da05      	bge.n	8010196 <_vsniprintf_r+0x1a>
 801018a:	238b      	movs	r3, #139	; 0x8b
 801018c:	6003      	str	r3, [r0, #0]
 801018e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010192:	b01b      	add	sp, #108	; 0x6c
 8010194:	bd30      	pop	{r4, r5, pc}
 8010196:	f44f 7302 	mov.w	r3, #520	; 0x208
 801019a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801019e:	bf14      	ite	ne
 80101a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80101a4:	4623      	moveq	r3, r4
 80101a6:	9302      	str	r3, [sp, #8]
 80101a8:	9305      	str	r3, [sp, #20]
 80101aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101ae:	9100      	str	r1, [sp, #0]
 80101b0:	9104      	str	r1, [sp, #16]
 80101b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80101b6:	4669      	mov	r1, sp
 80101b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80101ba:	f001 f861 	bl	8011280 <_svfiprintf_r>
 80101be:	1c43      	adds	r3, r0, #1
 80101c0:	bfbc      	itt	lt
 80101c2:	238b      	movlt	r3, #139	; 0x8b
 80101c4:	602b      	strlt	r3, [r5, #0]
 80101c6:	2c00      	cmp	r4, #0
 80101c8:	d0e3      	beq.n	8010192 <_vsniprintf_r+0x16>
 80101ca:	9b00      	ldr	r3, [sp, #0]
 80101cc:	2200      	movs	r2, #0
 80101ce:	701a      	strb	r2, [r3, #0]
 80101d0:	e7df      	b.n	8010192 <_vsniprintf_r+0x16>
	...

080101d4 <vsniprintf>:
 80101d4:	b507      	push	{r0, r1, r2, lr}
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	4613      	mov	r3, r2
 80101da:	460a      	mov	r2, r1
 80101dc:	4601      	mov	r1, r0
 80101de:	4803      	ldr	r0, [pc, #12]	; (80101ec <vsniprintf+0x18>)
 80101e0:	6800      	ldr	r0, [r0, #0]
 80101e2:	f7ff ffcb 	bl	801017c <_vsniprintf_r>
 80101e6:	b003      	add	sp, #12
 80101e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80101ec:	200000cc 	.word	0x200000cc

080101f0 <iprintf>:
 80101f0:	b40f      	push	{r0, r1, r2, r3}
 80101f2:	b507      	push	{r0, r1, r2, lr}
 80101f4:	4906      	ldr	r1, [pc, #24]	; (8010210 <iprintf+0x20>)
 80101f6:	ab04      	add	r3, sp, #16
 80101f8:	6808      	ldr	r0, [r1, #0]
 80101fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80101fe:	6881      	ldr	r1, [r0, #8]
 8010200:	9301      	str	r3, [sp, #4]
 8010202:	f001 fb37 	bl	8011874 <_vfiprintf_r>
 8010206:	b003      	add	sp, #12
 8010208:	f85d eb04 	ldr.w	lr, [sp], #4
 801020c:	b004      	add	sp, #16
 801020e:	4770      	bx	lr
 8010210:	200000cc 	.word	0x200000cc

08010214 <strncmp>:
 8010214:	b510      	push	{r4, lr}
 8010216:	b16a      	cbz	r2, 8010234 <strncmp+0x20>
 8010218:	3901      	subs	r1, #1
 801021a:	1884      	adds	r4, r0, r2
 801021c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010220:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010224:	429a      	cmp	r2, r3
 8010226:	d103      	bne.n	8010230 <strncmp+0x1c>
 8010228:	42a0      	cmp	r0, r4
 801022a:	d001      	beq.n	8010230 <strncmp+0x1c>
 801022c:	2a00      	cmp	r2, #0
 801022e:	d1f5      	bne.n	801021c <strncmp+0x8>
 8010230:	1ad0      	subs	r0, r2, r3
 8010232:	bd10      	pop	{r4, pc}
 8010234:	4610      	mov	r0, r2
 8010236:	e7fc      	b.n	8010232 <strncmp+0x1e>

08010238 <strncpy>:
 8010238:	b510      	push	{r4, lr}
 801023a:	3901      	subs	r1, #1
 801023c:	4603      	mov	r3, r0
 801023e:	b132      	cbz	r2, 801024e <strncpy+0x16>
 8010240:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010244:	f803 4b01 	strb.w	r4, [r3], #1
 8010248:	3a01      	subs	r2, #1
 801024a:	2c00      	cmp	r4, #0
 801024c:	d1f7      	bne.n	801023e <strncpy+0x6>
 801024e:	441a      	add	r2, r3
 8010250:	2100      	movs	r1, #0
 8010252:	4293      	cmp	r3, r2
 8010254:	d100      	bne.n	8010258 <strncpy+0x20>
 8010256:	bd10      	pop	{r4, pc}
 8010258:	f803 1b01 	strb.w	r1, [r3], #1
 801025c:	e7f9      	b.n	8010252 <strncpy+0x1a>

0801025e <__strtok_r>:
 801025e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010260:	b908      	cbnz	r0, 8010266 <__strtok_r+0x8>
 8010262:	6810      	ldr	r0, [r2, #0]
 8010264:	b188      	cbz	r0, 801028a <__strtok_r+0x2c>
 8010266:	4604      	mov	r4, r0
 8010268:	4620      	mov	r0, r4
 801026a:	f814 5b01 	ldrb.w	r5, [r4], #1
 801026e:	460f      	mov	r7, r1
 8010270:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010274:	b91e      	cbnz	r6, 801027e <__strtok_r+0x20>
 8010276:	b965      	cbnz	r5, 8010292 <__strtok_r+0x34>
 8010278:	6015      	str	r5, [r2, #0]
 801027a:	4628      	mov	r0, r5
 801027c:	e005      	b.n	801028a <__strtok_r+0x2c>
 801027e:	42b5      	cmp	r5, r6
 8010280:	d1f6      	bne.n	8010270 <__strtok_r+0x12>
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1f0      	bne.n	8010268 <__strtok_r+0xa>
 8010286:	6014      	str	r4, [r2, #0]
 8010288:	7003      	strb	r3, [r0, #0]
 801028a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801028c:	461c      	mov	r4, r3
 801028e:	e00c      	b.n	80102aa <__strtok_r+0x4c>
 8010290:	b915      	cbnz	r5, 8010298 <__strtok_r+0x3a>
 8010292:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010296:	460e      	mov	r6, r1
 8010298:	f816 5b01 	ldrb.w	r5, [r6], #1
 801029c:	42ab      	cmp	r3, r5
 801029e:	d1f7      	bne.n	8010290 <__strtok_r+0x32>
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d0f3      	beq.n	801028c <__strtok_r+0x2e>
 80102a4:	2300      	movs	r3, #0
 80102a6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80102aa:	6014      	str	r4, [r2, #0]
 80102ac:	e7ed      	b.n	801028a <__strtok_r+0x2c>

080102ae <strtok_r>:
 80102ae:	2301      	movs	r3, #1
 80102b0:	f7ff bfd5 	b.w	801025e <__strtok_r>

080102b4 <memset>:
 80102b4:	4402      	add	r2, r0
 80102b6:	4603      	mov	r3, r0
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d100      	bne.n	80102be <memset+0xa>
 80102bc:	4770      	bx	lr
 80102be:	f803 1b01 	strb.w	r1, [r3], #1
 80102c2:	e7f9      	b.n	80102b8 <memset+0x4>

080102c4 <_localeconv_r>:
 80102c4:	4800      	ldr	r0, [pc, #0]	; (80102c8 <_localeconv_r+0x4>)
 80102c6:	4770      	bx	lr
 80102c8:	200001c0 	.word	0x200001c0

080102cc <_close_r>:
 80102cc:	b538      	push	{r3, r4, r5, lr}
 80102ce:	4d06      	ldr	r5, [pc, #24]	; (80102e8 <_close_r+0x1c>)
 80102d0:	2300      	movs	r3, #0
 80102d2:	4604      	mov	r4, r0
 80102d4:	4608      	mov	r0, r1
 80102d6:	602b      	str	r3, [r5, #0]
 80102d8:	f7f6 fbc9 	bl	8006a6e <_close>
 80102dc:	1c43      	adds	r3, r0, #1
 80102de:	d102      	bne.n	80102e6 <_close_r+0x1a>
 80102e0:	682b      	ldr	r3, [r5, #0]
 80102e2:	b103      	cbz	r3, 80102e6 <_close_r+0x1a>
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	bd38      	pop	{r3, r4, r5, pc}
 80102e8:	2000a034 	.word	0x2000a034

080102ec <_lseek_r>:
 80102ec:	b538      	push	{r3, r4, r5, lr}
 80102ee:	4d07      	ldr	r5, [pc, #28]	; (801030c <_lseek_r+0x20>)
 80102f0:	4604      	mov	r4, r0
 80102f2:	4608      	mov	r0, r1
 80102f4:	4611      	mov	r1, r2
 80102f6:	2200      	movs	r2, #0
 80102f8:	602a      	str	r2, [r5, #0]
 80102fa:	461a      	mov	r2, r3
 80102fc:	f7f6 fbde 	bl	8006abc <_lseek>
 8010300:	1c43      	adds	r3, r0, #1
 8010302:	d102      	bne.n	801030a <_lseek_r+0x1e>
 8010304:	682b      	ldr	r3, [r5, #0]
 8010306:	b103      	cbz	r3, 801030a <_lseek_r+0x1e>
 8010308:	6023      	str	r3, [r4, #0]
 801030a:	bd38      	pop	{r3, r4, r5, pc}
 801030c:	2000a034 	.word	0x2000a034

08010310 <_read_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4d07      	ldr	r5, [pc, #28]	; (8010330 <_read_r+0x20>)
 8010314:	4604      	mov	r4, r0
 8010316:	4608      	mov	r0, r1
 8010318:	4611      	mov	r1, r2
 801031a:	2200      	movs	r2, #0
 801031c:	602a      	str	r2, [r5, #0]
 801031e:	461a      	mov	r2, r3
 8010320:	f7f6 fb6c 	bl	80069fc <_read>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d102      	bne.n	801032e <_read_r+0x1e>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	b103      	cbz	r3, 801032e <_read_r+0x1e>
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	bd38      	pop	{r3, r4, r5, pc}
 8010330:	2000a034 	.word	0x2000a034

08010334 <_sbrk_r>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	4d06      	ldr	r5, [pc, #24]	; (8010350 <_sbrk_r+0x1c>)
 8010338:	2300      	movs	r3, #0
 801033a:	4604      	mov	r4, r0
 801033c:	4608      	mov	r0, r1
 801033e:	602b      	str	r3, [r5, #0]
 8010340:	f7f6 fbca 	bl	8006ad8 <_sbrk>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	d102      	bne.n	801034e <_sbrk_r+0x1a>
 8010348:	682b      	ldr	r3, [r5, #0]
 801034a:	b103      	cbz	r3, 801034e <_sbrk_r+0x1a>
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	2000a034 	.word	0x2000a034

08010354 <_write_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4d07      	ldr	r5, [pc, #28]	; (8010374 <_write_r+0x20>)
 8010358:	4604      	mov	r4, r0
 801035a:	4608      	mov	r0, r1
 801035c:	4611      	mov	r1, r2
 801035e:	2200      	movs	r2, #0
 8010360:	602a      	str	r2, [r5, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	f7f6 fb67 	bl	8006a36 <_write>
 8010368:	1c43      	adds	r3, r0, #1
 801036a:	d102      	bne.n	8010372 <_write_r+0x1e>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	b103      	cbz	r3, 8010372 <_write_r+0x1e>
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd38      	pop	{r3, r4, r5, pc}
 8010374:	2000a034 	.word	0x2000a034

08010378 <__errno>:
 8010378:	4b01      	ldr	r3, [pc, #4]	; (8010380 <__errno+0x8>)
 801037a:	6818      	ldr	r0, [r3, #0]
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	200000cc 	.word	0x200000cc

08010384 <__libc_init_array>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	4d0d      	ldr	r5, [pc, #52]	; (80103bc <__libc_init_array+0x38>)
 8010388:	4c0d      	ldr	r4, [pc, #52]	; (80103c0 <__libc_init_array+0x3c>)
 801038a:	1b64      	subs	r4, r4, r5
 801038c:	10a4      	asrs	r4, r4, #2
 801038e:	2600      	movs	r6, #0
 8010390:	42a6      	cmp	r6, r4
 8010392:	d109      	bne.n	80103a8 <__libc_init_array+0x24>
 8010394:	4d0b      	ldr	r5, [pc, #44]	; (80103c4 <__libc_init_array+0x40>)
 8010396:	4c0c      	ldr	r4, [pc, #48]	; (80103c8 <__libc_init_array+0x44>)
 8010398:	f003 f816 	bl	80133c8 <_init>
 801039c:	1b64      	subs	r4, r4, r5
 801039e:	10a4      	asrs	r4, r4, #2
 80103a0:	2600      	movs	r6, #0
 80103a2:	42a6      	cmp	r6, r4
 80103a4:	d105      	bne.n	80103b2 <__libc_init_array+0x2e>
 80103a6:	bd70      	pop	{r4, r5, r6, pc}
 80103a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ac:	4798      	blx	r3
 80103ae:	3601      	adds	r6, #1
 80103b0:	e7ee      	b.n	8010390 <__libc_init_array+0xc>
 80103b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103b6:	4798      	blx	r3
 80103b8:	3601      	adds	r6, #1
 80103ba:	e7f2      	b.n	80103a2 <__libc_init_array+0x1e>
 80103bc:	08019378 	.word	0x08019378
 80103c0:	08019378 	.word	0x08019378
 80103c4:	08019378 	.word	0x08019378
 80103c8:	0801937c 	.word	0x0801937c

080103cc <__retarget_lock_init_recursive>:
 80103cc:	4770      	bx	lr

080103ce <__retarget_lock_acquire_recursive>:
 80103ce:	4770      	bx	lr

080103d0 <__retarget_lock_release_recursive>:
 80103d0:	4770      	bx	lr

080103d2 <memcpy>:
 80103d2:	440a      	add	r2, r1
 80103d4:	4291      	cmp	r1, r2
 80103d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80103da:	d100      	bne.n	80103de <memcpy+0xc>
 80103dc:	4770      	bx	lr
 80103de:	b510      	push	{r4, lr}
 80103e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103e8:	4291      	cmp	r1, r2
 80103ea:	d1f9      	bne.n	80103e0 <memcpy+0xe>
 80103ec:	bd10      	pop	{r4, pc}

080103ee <strcpy>:
 80103ee:	4603      	mov	r3, r0
 80103f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103f4:	f803 2b01 	strb.w	r2, [r3], #1
 80103f8:	2a00      	cmp	r2, #0
 80103fa:	d1f9      	bne.n	80103f0 <strcpy+0x2>
 80103fc:	4770      	bx	lr
	...

08010400 <__assert_func>:
 8010400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010402:	4614      	mov	r4, r2
 8010404:	461a      	mov	r2, r3
 8010406:	4b09      	ldr	r3, [pc, #36]	; (801042c <__assert_func+0x2c>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4605      	mov	r5, r0
 801040c:	68d8      	ldr	r0, [r3, #12]
 801040e:	b14c      	cbz	r4, 8010424 <__assert_func+0x24>
 8010410:	4b07      	ldr	r3, [pc, #28]	; (8010430 <__assert_func+0x30>)
 8010412:	9100      	str	r1, [sp, #0]
 8010414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010418:	4906      	ldr	r1, [pc, #24]	; (8010434 <__assert_func+0x34>)
 801041a:	462b      	mov	r3, r5
 801041c:	f002 f8f6 	bl	801260c <fiprintf>
 8010420:	f002 fb18 	bl	8012a54 <abort>
 8010424:	4b04      	ldr	r3, [pc, #16]	; (8010438 <__assert_func+0x38>)
 8010426:	461c      	mov	r4, r3
 8010428:	e7f3      	b.n	8010412 <__assert_func+0x12>
 801042a:	bf00      	nop
 801042c:	200000cc 	.word	0x200000cc
 8010430:	08019113 	.word	0x08019113
 8010434:	08019120 	.word	0x08019120
 8010438:	0801914e 	.word	0x0801914e

0801043c <quorem>:
 801043c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	6903      	ldr	r3, [r0, #16]
 8010442:	690c      	ldr	r4, [r1, #16]
 8010444:	42a3      	cmp	r3, r4
 8010446:	4607      	mov	r7, r0
 8010448:	db7e      	blt.n	8010548 <quorem+0x10c>
 801044a:	3c01      	subs	r4, #1
 801044c:	f101 0814 	add.w	r8, r1, #20
 8010450:	f100 0514 	add.w	r5, r0, #20
 8010454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010458:	9301      	str	r3, [sp, #4]
 801045a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801045e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010462:	3301      	adds	r3, #1
 8010464:	429a      	cmp	r2, r3
 8010466:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801046a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801046e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010472:	d331      	bcc.n	80104d8 <quorem+0x9c>
 8010474:	f04f 0e00 	mov.w	lr, #0
 8010478:	4640      	mov	r0, r8
 801047a:	46ac      	mov	ip, r5
 801047c:	46f2      	mov	sl, lr
 801047e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010482:	b293      	uxth	r3, r2
 8010484:	fb06 e303 	mla	r3, r6, r3, lr
 8010488:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801048c:	0c1a      	lsrs	r2, r3, #16
 801048e:	b29b      	uxth	r3, r3
 8010490:	ebaa 0303 	sub.w	r3, sl, r3
 8010494:	f8dc a000 	ldr.w	sl, [ip]
 8010498:	fa13 f38a 	uxtah	r3, r3, sl
 801049c:	fb06 220e 	mla	r2, r6, lr, r2
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	9b00      	ldr	r3, [sp, #0]
 80104a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104a8:	b292      	uxth	r2, r2
 80104aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80104ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80104b6:	4581      	cmp	r9, r0
 80104b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104bc:	f84c 3b04 	str.w	r3, [ip], #4
 80104c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80104c4:	d2db      	bcs.n	801047e <quorem+0x42>
 80104c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80104ca:	b92b      	cbnz	r3, 80104d8 <quorem+0x9c>
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	3b04      	subs	r3, #4
 80104d0:	429d      	cmp	r5, r3
 80104d2:	461a      	mov	r2, r3
 80104d4:	d32c      	bcc.n	8010530 <quorem+0xf4>
 80104d6:	613c      	str	r4, [r7, #16]
 80104d8:	4638      	mov	r0, r7
 80104da:	f001 ff97 	bl	801240c <__mcmp>
 80104de:	2800      	cmp	r0, #0
 80104e0:	db22      	blt.n	8010528 <quorem+0xec>
 80104e2:	3601      	adds	r6, #1
 80104e4:	4629      	mov	r1, r5
 80104e6:	2000      	movs	r0, #0
 80104e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80104ec:	f8d1 c000 	ldr.w	ip, [r1]
 80104f0:	b293      	uxth	r3, r2
 80104f2:	1ac3      	subs	r3, r0, r3
 80104f4:	0c12      	lsrs	r2, r2, #16
 80104f6:	fa13 f38c 	uxtah	r3, r3, ip
 80104fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80104fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010502:	b29b      	uxth	r3, r3
 8010504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010508:	45c1      	cmp	r9, r8
 801050a:	f841 3b04 	str.w	r3, [r1], #4
 801050e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010512:	d2e9      	bcs.n	80104e8 <quorem+0xac>
 8010514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801051c:	b922      	cbnz	r2, 8010528 <quorem+0xec>
 801051e:	3b04      	subs	r3, #4
 8010520:	429d      	cmp	r5, r3
 8010522:	461a      	mov	r2, r3
 8010524:	d30a      	bcc.n	801053c <quorem+0x100>
 8010526:	613c      	str	r4, [r7, #16]
 8010528:	4630      	mov	r0, r6
 801052a:	b003      	add	sp, #12
 801052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010530:	6812      	ldr	r2, [r2, #0]
 8010532:	3b04      	subs	r3, #4
 8010534:	2a00      	cmp	r2, #0
 8010536:	d1ce      	bne.n	80104d6 <quorem+0x9a>
 8010538:	3c01      	subs	r4, #1
 801053a:	e7c9      	b.n	80104d0 <quorem+0x94>
 801053c:	6812      	ldr	r2, [r2, #0]
 801053e:	3b04      	subs	r3, #4
 8010540:	2a00      	cmp	r2, #0
 8010542:	d1f0      	bne.n	8010526 <quorem+0xea>
 8010544:	3c01      	subs	r4, #1
 8010546:	e7eb      	b.n	8010520 <quorem+0xe4>
 8010548:	2000      	movs	r0, #0
 801054a:	e7ee      	b.n	801052a <quorem+0xee>
 801054c:	0000      	movs	r0, r0
	...

08010550 <_dtoa_r>:
 8010550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010554:	ed2d 8b04 	vpush	{d8-d9}
 8010558:	69c5      	ldr	r5, [r0, #28]
 801055a:	b093      	sub	sp, #76	; 0x4c
 801055c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010560:	ec57 6b10 	vmov	r6, r7, d0
 8010564:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010568:	9107      	str	r1, [sp, #28]
 801056a:	4604      	mov	r4, r0
 801056c:	920a      	str	r2, [sp, #40]	; 0x28
 801056e:	930d      	str	r3, [sp, #52]	; 0x34
 8010570:	b975      	cbnz	r5, 8010590 <_dtoa_r+0x40>
 8010572:	2010      	movs	r0, #16
 8010574:	f7ff f9a0 	bl	800f8b8 <malloc>
 8010578:	4602      	mov	r2, r0
 801057a:	61e0      	str	r0, [r4, #28]
 801057c:	b920      	cbnz	r0, 8010588 <_dtoa_r+0x38>
 801057e:	4bae      	ldr	r3, [pc, #696]	; (8010838 <_dtoa_r+0x2e8>)
 8010580:	21ef      	movs	r1, #239	; 0xef
 8010582:	48ae      	ldr	r0, [pc, #696]	; (801083c <_dtoa_r+0x2ec>)
 8010584:	f7ff ff3c 	bl	8010400 <__assert_func>
 8010588:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801058c:	6005      	str	r5, [r0, #0]
 801058e:	60c5      	str	r5, [r0, #12]
 8010590:	69e3      	ldr	r3, [r4, #28]
 8010592:	6819      	ldr	r1, [r3, #0]
 8010594:	b151      	cbz	r1, 80105ac <_dtoa_r+0x5c>
 8010596:	685a      	ldr	r2, [r3, #4]
 8010598:	604a      	str	r2, [r1, #4]
 801059a:	2301      	movs	r3, #1
 801059c:	4093      	lsls	r3, r2
 801059e:	608b      	str	r3, [r1, #8]
 80105a0:	4620      	mov	r0, r4
 80105a2:	f001 fcf7 	bl	8011f94 <_Bfree>
 80105a6:	69e3      	ldr	r3, [r4, #28]
 80105a8:	2200      	movs	r2, #0
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	1e3b      	subs	r3, r7, #0
 80105ae:	bfbb      	ittet	lt
 80105b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80105b4:	9303      	strlt	r3, [sp, #12]
 80105b6:	2300      	movge	r3, #0
 80105b8:	2201      	movlt	r2, #1
 80105ba:	bfac      	ite	ge
 80105bc:	f8c8 3000 	strge.w	r3, [r8]
 80105c0:	f8c8 2000 	strlt.w	r2, [r8]
 80105c4:	4b9e      	ldr	r3, [pc, #632]	; (8010840 <_dtoa_r+0x2f0>)
 80105c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80105ca:	ea33 0308 	bics.w	r3, r3, r8
 80105ce:	d11b      	bne.n	8010608 <_dtoa_r+0xb8>
 80105d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80105d6:	6013      	str	r3, [r2, #0]
 80105d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80105dc:	4333      	orrs	r3, r6
 80105de:	f000 8593 	beq.w	8011108 <_dtoa_r+0xbb8>
 80105e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105e4:	b963      	cbnz	r3, 8010600 <_dtoa_r+0xb0>
 80105e6:	4b97      	ldr	r3, [pc, #604]	; (8010844 <_dtoa_r+0x2f4>)
 80105e8:	e027      	b.n	801063a <_dtoa_r+0xea>
 80105ea:	4b97      	ldr	r3, [pc, #604]	; (8010848 <_dtoa_r+0x2f8>)
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	3308      	adds	r3, #8
 80105f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80105f2:	6013      	str	r3, [r2, #0]
 80105f4:	9800      	ldr	r0, [sp, #0]
 80105f6:	b013      	add	sp, #76	; 0x4c
 80105f8:	ecbd 8b04 	vpop	{d8-d9}
 80105fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010600:	4b90      	ldr	r3, [pc, #576]	; (8010844 <_dtoa_r+0x2f4>)
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	3303      	adds	r3, #3
 8010606:	e7f3      	b.n	80105f0 <_dtoa_r+0xa0>
 8010608:	ed9d 7b02 	vldr	d7, [sp, #8]
 801060c:	2200      	movs	r2, #0
 801060e:	ec51 0b17 	vmov	r0, r1, d7
 8010612:	eeb0 8a47 	vmov.f32	s16, s14
 8010616:	eef0 8a67 	vmov.f32	s17, s15
 801061a:	2300      	movs	r3, #0
 801061c:	f7f0 fa74 	bl	8000b08 <__aeabi_dcmpeq>
 8010620:	4681      	mov	r9, r0
 8010622:	b160      	cbz	r0, 801063e <_dtoa_r+0xee>
 8010624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010626:	2301      	movs	r3, #1
 8010628:	6013      	str	r3, [r2, #0]
 801062a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 8568 	beq.w	8011102 <_dtoa_r+0xbb2>
 8010632:	4b86      	ldr	r3, [pc, #536]	; (801084c <_dtoa_r+0x2fc>)
 8010634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010636:	6013      	str	r3, [r2, #0]
 8010638:	3b01      	subs	r3, #1
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	e7da      	b.n	80105f4 <_dtoa_r+0xa4>
 801063e:	aa10      	add	r2, sp, #64	; 0x40
 8010640:	a911      	add	r1, sp, #68	; 0x44
 8010642:	4620      	mov	r0, r4
 8010644:	eeb0 0a48 	vmov.f32	s0, s16
 8010648:	eef0 0a68 	vmov.f32	s1, s17
 801064c:	f001 ff84 	bl	8012558 <__d2b>
 8010650:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010654:	4682      	mov	sl, r0
 8010656:	2d00      	cmp	r5, #0
 8010658:	d07f      	beq.n	801075a <_dtoa_r+0x20a>
 801065a:	ee18 3a90 	vmov	r3, s17
 801065e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010662:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010666:	ec51 0b18 	vmov	r0, r1, d8
 801066a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801066e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010672:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010676:	4619      	mov	r1, r3
 8010678:	2200      	movs	r2, #0
 801067a:	4b75      	ldr	r3, [pc, #468]	; (8010850 <_dtoa_r+0x300>)
 801067c:	f7ef fe24 	bl	80002c8 <__aeabi_dsub>
 8010680:	a367      	add	r3, pc, #412	; (adr r3, 8010820 <_dtoa_r+0x2d0>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f7ef ffd7 	bl	8000638 <__aeabi_dmul>
 801068a:	a367      	add	r3, pc, #412	; (adr r3, 8010828 <_dtoa_r+0x2d8>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fe1c 	bl	80002cc <__adddf3>
 8010694:	4606      	mov	r6, r0
 8010696:	4628      	mov	r0, r5
 8010698:	460f      	mov	r7, r1
 801069a:	f7ef ff63 	bl	8000564 <__aeabi_i2d>
 801069e:	a364      	add	r3, pc, #400	; (adr r3, 8010830 <_dtoa_r+0x2e0>)
 80106a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a4:	f7ef ffc8 	bl	8000638 <__aeabi_dmul>
 80106a8:	4602      	mov	r2, r0
 80106aa:	460b      	mov	r3, r1
 80106ac:	4630      	mov	r0, r6
 80106ae:	4639      	mov	r1, r7
 80106b0:	f7ef fe0c 	bl	80002cc <__adddf3>
 80106b4:	4606      	mov	r6, r0
 80106b6:	460f      	mov	r7, r1
 80106b8:	f7f0 fa6e 	bl	8000b98 <__aeabi_d2iz>
 80106bc:	2200      	movs	r2, #0
 80106be:	4683      	mov	fp, r0
 80106c0:	2300      	movs	r3, #0
 80106c2:	4630      	mov	r0, r6
 80106c4:	4639      	mov	r1, r7
 80106c6:	f7f0 fa29 	bl	8000b1c <__aeabi_dcmplt>
 80106ca:	b148      	cbz	r0, 80106e0 <_dtoa_r+0x190>
 80106cc:	4658      	mov	r0, fp
 80106ce:	f7ef ff49 	bl	8000564 <__aeabi_i2d>
 80106d2:	4632      	mov	r2, r6
 80106d4:	463b      	mov	r3, r7
 80106d6:	f7f0 fa17 	bl	8000b08 <__aeabi_dcmpeq>
 80106da:	b908      	cbnz	r0, 80106e0 <_dtoa_r+0x190>
 80106dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80106e0:	f1bb 0f16 	cmp.w	fp, #22
 80106e4:	d857      	bhi.n	8010796 <_dtoa_r+0x246>
 80106e6:	4b5b      	ldr	r3, [pc, #364]	; (8010854 <_dtoa_r+0x304>)
 80106e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80106ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f0:	ec51 0b18 	vmov	r0, r1, d8
 80106f4:	f7f0 fa12 	bl	8000b1c <__aeabi_dcmplt>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d04e      	beq.n	801079a <_dtoa_r+0x24a>
 80106fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010700:	2300      	movs	r3, #0
 8010702:	930c      	str	r3, [sp, #48]	; 0x30
 8010704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010706:	1b5b      	subs	r3, r3, r5
 8010708:	1e5a      	subs	r2, r3, #1
 801070a:	bf45      	ittet	mi
 801070c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010710:	9305      	strmi	r3, [sp, #20]
 8010712:	2300      	movpl	r3, #0
 8010714:	2300      	movmi	r3, #0
 8010716:	9206      	str	r2, [sp, #24]
 8010718:	bf54      	ite	pl
 801071a:	9305      	strpl	r3, [sp, #20]
 801071c:	9306      	strmi	r3, [sp, #24]
 801071e:	f1bb 0f00 	cmp.w	fp, #0
 8010722:	db3c      	blt.n	801079e <_dtoa_r+0x24e>
 8010724:	9b06      	ldr	r3, [sp, #24]
 8010726:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801072a:	445b      	add	r3, fp
 801072c:	9306      	str	r3, [sp, #24]
 801072e:	2300      	movs	r3, #0
 8010730:	9308      	str	r3, [sp, #32]
 8010732:	9b07      	ldr	r3, [sp, #28]
 8010734:	2b09      	cmp	r3, #9
 8010736:	d868      	bhi.n	801080a <_dtoa_r+0x2ba>
 8010738:	2b05      	cmp	r3, #5
 801073a:	bfc4      	itt	gt
 801073c:	3b04      	subgt	r3, #4
 801073e:	9307      	strgt	r3, [sp, #28]
 8010740:	9b07      	ldr	r3, [sp, #28]
 8010742:	f1a3 0302 	sub.w	r3, r3, #2
 8010746:	bfcc      	ite	gt
 8010748:	2500      	movgt	r5, #0
 801074a:	2501      	movle	r5, #1
 801074c:	2b03      	cmp	r3, #3
 801074e:	f200 8085 	bhi.w	801085c <_dtoa_r+0x30c>
 8010752:	e8df f003 	tbb	[pc, r3]
 8010756:	3b2e      	.short	0x3b2e
 8010758:	5839      	.short	0x5839
 801075a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801075e:	441d      	add	r5, r3
 8010760:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010764:	2b20      	cmp	r3, #32
 8010766:	bfc1      	itttt	gt
 8010768:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801076c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010770:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010774:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010778:	bfd6      	itet	le
 801077a:	f1c3 0320 	rsble	r3, r3, #32
 801077e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010782:	fa06 f003 	lslle.w	r0, r6, r3
 8010786:	f7ef fedd 	bl	8000544 <__aeabi_ui2d>
 801078a:	2201      	movs	r2, #1
 801078c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010790:	3d01      	subs	r5, #1
 8010792:	920e      	str	r2, [sp, #56]	; 0x38
 8010794:	e76f      	b.n	8010676 <_dtoa_r+0x126>
 8010796:	2301      	movs	r3, #1
 8010798:	e7b3      	b.n	8010702 <_dtoa_r+0x1b2>
 801079a:	900c      	str	r0, [sp, #48]	; 0x30
 801079c:	e7b2      	b.n	8010704 <_dtoa_r+0x1b4>
 801079e:	9b05      	ldr	r3, [sp, #20]
 80107a0:	eba3 030b 	sub.w	r3, r3, fp
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	f1cb 0300 	rsb	r3, fp, #0
 80107aa:	9308      	str	r3, [sp, #32]
 80107ac:	2300      	movs	r3, #0
 80107ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80107b0:	e7bf      	b.n	8010732 <_dtoa_r+0x1e2>
 80107b2:	2300      	movs	r3, #0
 80107b4:	9309      	str	r3, [sp, #36]	; 0x24
 80107b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	dc52      	bgt.n	8010862 <_dtoa_r+0x312>
 80107bc:	2301      	movs	r3, #1
 80107be:	9301      	str	r3, [sp, #4]
 80107c0:	9304      	str	r3, [sp, #16]
 80107c2:	461a      	mov	r2, r3
 80107c4:	920a      	str	r2, [sp, #40]	; 0x28
 80107c6:	e00b      	b.n	80107e0 <_dtoa_r+0x290>
 80107c8:	2301      	movs	r3, #1
 80107ca:	e7f3      	b.n	80107b4 <_dtoa_r+0x264>
 80107cc:	2300      	movs	r3, #0
 80107ce:	9309      	str	r3, [sp, #36]	; 0x24
 80107d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d2:	445b      	add	r3, fp
 80107d4:	9301      	str	r3, [sp, #4]
 80107d6:	3301      	adds	r3, #1
 80107d8:	2b01      	cmp	r3, #1
 80107da:	9304      	str	r3, [sp, #16]
 80107dc:	bfb8      	it	lt
 80107de:	2301      	movlt	r3, #1
 80107e0:	69e0      	ldr	r0, [r4, #28]
 80107e2:	2100      	movs	r1, #0
 80107e4:	2204      	movs	r2, #4
 80107e6:	f102 0614 	add.w	r6, r2, #20
 80107ea:	429e      	cmp	r6, r3
 80107ec:	d93d      	bls.n	801086a <_dtoa_r+0x31a>
 80107ee:	6041      	str	r1, [r0, #4]
 80107f0:	4620      	mov	r0, r4
 80107f2:	f001 fb8f 	bl	8011f14 <_Balloc>
 80107f6:	9000      	str	r0, [sp, #0]
 80107f8:	2800      	cmp	r0, #0
 80107fa:	d139      	bne.n	8010870 <_dtoa_r+0x320>
 80107fc:	4b16      	ldr	r3, [pc, #88]	; (8010858 <_dtoa_r+0x308>)
 80107fe:	4602      	mov	r2, r0
 8010800:	f240 11af 	movw	r1, #431	; 0x1af
 8010804:	e6bd      	b.n	8010582 <_dtoa_r+0x32>
 8010806:	2301      	movs	r3, #1
 8010808:	e7e1      	b.n	80107ce <_dtoa_r+0x27e>
 801080a:	2501      	movs	r5, #1
 801080c:	2300      	movs	r3, #0
 801080e:	9307      	str	r3, [sp, #28]
 8010810:	9509      	str	r5, [sp, #36]	; 0x24
 8010812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010816:	9301      	str	r3, [sp, #4]
 8010818:	9304      	str	r3, [sp, #16]
 801081a:	2200      	movs	r2, #0
 801081c:	2312      	movs	r3, #18
 801081e:	e7d1      	b.n	80107c4 <_dtoa_r+0x274>
 8010820:	636f4361 	.word	0x636f4361
 8010824:	3fd287a7 	.word	0x3fd287a7
 8010828:	8b60c8b3 	.word	0x8b60c8b3
 801082c:	3fc68a28 	.word	0x3fc68a28
 8010830:	509f79fb 	.word	0x509f79fb
 8010834:	3fd34413 	.word	0x3fd34413
 8010838:	0801915c 	.word	0x0801915c
 801083c:	08019173 	.word	0x08019173
 8010840:	7ff00000 	.word	0x7ff00000
 8010844:	08019158 	.word	0x08019158
 8010848:	0801914f 	.word	0x0801914f
 801084c:	08019204 	.word	0x08019204
 8010850:	3ff80000 	.word	0x3ff80000
 8010854:	08019290 	.word	0x08019290
 8010858:	080191cb 	.word	0x080191cb
 801085c:	2301      	movs	r3, #1
 801085e:	9309      	str	r3, [sp, #36]	; 0x24
 8010860:	e7d7      	b.n	8010812 <_dtoa_r+0x2c2>
 8010862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010864:	9301      	str	r3, [sp, #4]
 8010866:	9304      	str	r3, [sp, #16]
 8010868:	e7ba      	b.n	80107e0 <_dtoa_r+0x290>
 801086a:	3101      	adds	r1, #1
 801086c:	0052      	lsls	r2, r2, #1
 801086e:	e7ba      	b.n	80107e6 <_dtoa_r+0x296>
 8010870:	69e3      	ldr	r3, [r4, #28]
 8010872:	9a00      	ldr	r2, [sp, #0]
 8010874:	601a      	str	r2, [r3, #0]
 8010876:	9b04      	ldr	r3, [sp, #16]
 8010878:	2b0e      	cmp	r3, #14
 801087a:	f200 80a8 	bhi.w	80109ce <_dtoa_r+0x47e>
 801087e:	2d00      	cmp	r5, #0
 8010880:	f000 80a5 	beq.w	80109ce <_dtoa_r+0x47e>
 8010884:	f1bb 0f00 	cmp.w	fp, #0
 8010888:	dd38      	ble.n	80108fc <_dtoa_r+0x3ac>
 801088a:	4bc0      	ldr	r3, [pc, #768]	; (8010b8c <_dtoa_r+0x63c>)
 801088c:	f00b 020f 	and.w	r2, fp, #15
 8010890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010894:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010898:	e9d3 6700 	ldrd	r6, r7, [r3]
 801089c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80108a0:	d019      	beq.n	80108d6 <_dtoa_r+0x386>
 80108a2:	4bbb      	ldr	r3, [pc, #748]	; (8010b90 <_dtoa_r+0x640>)
 80108a4:	ec51 0b18 	vmov	r0, r1, d8
 80108a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108ac:	f7ef ffee 	bl	800088c <__aeabi_ddiv>
 80108b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108b4:	f008 080f 	and.w	r8, r8, #15
 80108b8:	2503      	movs	r5, #3
 80108ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010b90 <_dtoa_r+0x640>
 80108be:	f1b8 0f00 	cmp.w	r8, #0
 80108c2:	d10a      	bne.n	80108da <_dtoa_r+0x38a>
 80108c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108c8:	4632      	mov	r2, r6
 80108ca:	463b      	mov	r3, r7
 80108cc:	f7ef ffde 	bl	800088c <__aeabi_ddiv>
 80108d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108d4:	e02b      	b.n	801092e <_dtoa_r+0x3de>
 80108d6:	2502      	movs	r5, #2
 80108d8:	e7ef      	b.n	80108ba <_dtoa_r+0x36a>
 80108da:	f018 0f01 	tst.w	r8, #1
 80108de:	d008      	beq.n	80108f2 <_dtoa_r+0x3a2>
 80108e0:	4630      	mov	r0, r6
 80108e2:	4639      	mov	r1, r7
 80108e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80108e8:	f7ef fea6 	bl	8000638 <__aeabi_dmul>
 80108ec:	3501      	adds	r5, #1
 80108ee:	4606      	mov	r6, r0
 80108f0:	460f      	mov	r7, r1
 80108f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80108f6:	f109 0908 	add.w	r9, r9, #8
 80108fa:	e7e0      	b.n	80108be <_dtoa_r+0x36e>
 80108fc:	f000 809f 	beq.w	8010a3e <_dtoa_r+0x4ee>
 8010900:	f1cb 0600 	rsb	r6, fp, #0
 8010904:	4ba1      	ldr	r3, [pc, #644]	; (8010b8c <_dtoa_r+0x63c>)
 8010906:	4fa2      	ldr	r7, [pc, #648]	; (8010b90 <_dtoa_r+0x640>)
 8010908:	f006 020f 	and.w	r2, r6, #15
 801090c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010914:	ec51 0b18 	vmov	r0, r1, d8
 8010918:	f7ef fe8e 	bl	8000638 <__aeabi_dmul>
 801091c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010920:	1136      	asrs	r6, r6, #4
 8010922:	2300      	movs	r3, #0
 8010924:	2502      	movs	r5, #2
 8010926:	2e00      	cmp	r6, #0
 8010928:	d17e      	bne.n	8010a28 <_dtoa_r+0x4d8>
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1d0      	bne.n	80108d0 <_dtoa_r+0x380>
 801092e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010930:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	f000 8084 	beq.w	8010a42 <_dtoa_r+0x4f2>
 801093a:	4b96      	ldr	r3, [pc, #600]	; (8010b94 <_dtoa_r+0x644>)
 801093c:	2200      	movs	r2, #0
 801093e:	4640      	mov	r0, r8
 8010940:	4649      	mov	r1, r9
 8010942:	f7f0 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8010946:	2800      	cmp	r0, #0
 8010948:	d07b      	beq.n	8010a42 <_dtoa_r+0x4f2>
 801094a:	9b04      	ldr	r3, [sp, #16]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d078      	beq.n	8010a42 <_dtoa_r+0x4f2>
 8010950:	9b01      	ldr	r3, [sp, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	dd39      	ble.n	80109ca <_dtoa_r+0x47a>
 8010956:	4b90      	ldr	r3, [pc, #576]	; (8010b98 <_dtoa_r+0x648>)
 8010958:	2200      	movs	r2, #0
 801095a:	4640      	mov	r0, r8
 801095c:	4649      	mov	r1, r9
 801095e:	f7ef fe6b 	bl	8000638 <__aeabi_dmul>
 8010962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010966:	9e01      	ldr	r6, [sp, #4]
 8010968:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801096c:	3501      	adds	r5, #1
 801096e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010972:	4628      	mov	r0, r5
 8010974:	f7ef fdf6 	bl	8000564 <__aeabi_i2d>
 8010978:	4642      	mov	r2, r8
 801097a:	464b      	mov	r3, r9
 801097c:	f7ef fe5c 	bl	8000638 <__aeabi_dmul>
 8010980:	4b86      	ldr	r3, [pc, #536]	; (8010b9c <_dtoa_r+0x64c>)
 8010982:	2200      	movs	r2, #0
 8010984:	f7ef fca2 	bl	80002cc <__adddf3>
 8010988:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801098c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010990:	9303      	str	r3, [sp, #12]
 8010992:	2e00      	cmp	r6, #0
 8010994:	d158      	bne.n	8010a48 <_dtoa_r+0x4f8>
 8010996:	4b82      	ldr	r3, [pc, #520]	; (8010ba0 <_dtoa_r+0x650>)
 8010998:	2200      	movs	r2, #0
 801099a:	4640      	mov	r0, r8
 801099c:	4649      	mov	r1, r9
 801099e:	f7ef fc93 	bl	80002c8 <__aeabi_dsub>
 80109a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109a6:	4680      	mov	r8, r0
 80109a8:	4689      	mov	r9, r1
 80109aa:	f7f0 f8d5 	bl	8000b58 <__aeabi_dcmpgt>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	f040 8296 	bne.w	8010ee0 <_dtoa_r+0x990>
 80109b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80109b8:	4640      	mov	r0, r8
 80109ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109be:	4649      	mov	r1, r9
 80109c0:	f7f0 f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	f040 8289 	bne.w	8010edc <_dtoa_r+0x98c>
 80109ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80109ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f2c0 814e 	blt.w	8010c72 <_dtoa_r+0x722>
 80109d6:	f1bb 0f0e 	cmp.w	fp, #14
 80109da:	f300 814a 	bgt.w	8010c72 <_dtoa_r+0x722>
 80109de:	4b6b      	ldr	r3, [pc, #428]	; (8010b8c <_dtoa_r+0x63c>)
 80109e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80109e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f280 80dc 	bge.w	8010ba8 <_dtoa_r+0x658>
 80109f0:	9b04      	ldr	r3, [sp, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f300 80d8 	bgt.w	8010ba8 <_dtoa_r+0x658>
 80109f8:	f040 826f 	bne.w	8010eda <_dtoa_r+0x98a>
 80109fc:	4b68      	ldr	r3, [pc, #416]	; (8010ba0 <_dtoa_r+0x650>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	4640      	mov	r0, r8
 8010a02:	4649      	mov	r1, r9
 8010a04:	f7ef fe18 	bl	8000638 <__aeabi_dmul>
 8010a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a0c:	f7f0 f89a 	bl	8000b44 <__aeabi_dcmpge>
 8010a10:	9e04      	ldr	r6, [sp, #16]
 8010a12:	4637      	mov	r7, r6
 8010a14:	2800      	cmp	r0, #0
 8010a16:	f040 8245 	bne.w	8010ea4 <_dtoa_r+0x954>
 8010a1a:	9d00      	ldr	r5, [sp, #0]
 8010a1c:	2331      	movs	r3, #49	; 0x31
 8010a1e:	f805 3b01 	strb.w	r3, [r5], #1
 8010a22:	f10b 0b01 	add.w	fp, fp, #1
 8010a26:	e241      	b.n	8010eac <_dtoa_r+0x95c>
 8010a28:	07f2      	lsls	r2, r6, #31
 8010a2a:	d505      	bpl.n	8010a38 <_dtoa_r+0x4e8>
 8010a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a30:	f7ef fe02 	bl	8000638 <__aeabi_dmul>
 8010a34:	3501      	adds	r5, #1
 8010a36:	2301      	movs	r3, #1
 8010a38:	1076      	asrs	r6, r6, #1
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	e773      	b.n	8010926 <_dtoa_r+0x3d6>
 8010a3e:	2502      	movs	r5, #2
 8010a40:	e775      	b.n	801092e <_dtoa_r+0x3de>
 8010a42:	9e04      	ldr	r6, [sp, #16]
 8010a44:	465f      	mov	r7, fp
 8010a46:	e792      	b.n	801096e <_dtoa_r+0x41e>
 8010a48:	9900      	ldr	r1, [sp, #0]
 8010a4a:	4b50      	ldr	r3, [pc, #320]	; (8010b8c <_dtoa_r+0x63c>)
 8010a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a50:	4431      	add	r1, r6
 8010a52:	9102      	str	r1, [sp, #8]
 8010a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a56:	eeb0 9a47 	vmov.f32	s18, s14
 8010a5a:	eef0 9a67 	vmov.f32	s19, s15
 8010a5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a66:	2900      	cmp	r1, #0
 8010a68:	d044      	beq.n	8010af4 <_dtoa_r+0x5a4>
 8010a6a:	494e      	ldr	r1, [pc, #312]	; (8010ba4 <_dtoa_r+0x654>)
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	f7ef ff0d 	bl	800088c <__aeabi_ddiv>
 8010a72:	ec53 2b19 	vmov	r2, r3, d9
 8010a76:	f7ef fc27 	bl	80002c8 <__aeabi_dsub>
 8010a7a:	9d00      	ldr	r5, [sp, #0]
 8010a7c:	ec41 0b19 	vmov	d9, r0, r1
 8010a80:	4649      	mov	r1, r9
 8010a82:	4640      	mov	r0, r8
 8010a84:	f7f0 f888 	bl	8000b98 <__aeabi_d2iz>
 8010a88:	4606      	mov	r6, r0
 8010a8a:	f7ef fd6b 	bl	8000564 <__aeabi_i2d>
 8010a8e:	4602      	mov	r2, r0
 8010a90:	460b      	mov	r3, r1
 8010a92:	4640      	mov	r0, r8
 8010a94:	4649      	mov	r1, r9
 8010a96:	f7ef fc17 	bl	80002c8 <__aeabi_dsub>
 8010a9a:	3630      	adds	r6, #48	; 0x30
 8010a9c:	f805 6b01 	strb.w	r6, [r5], #1
 8010aa0:	ec53 2b19 	vmov	r2, r3, d9
 8010aa4:	4680      	mov	r8, r0
 8010aa6:	4689      	mov	r9, r1
 8010aa8:	f7f0 f838 	bl	8000b1c <__aeabi_dcmplt>
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d164      	bne.n	8010b7a <_dtoa_r+0x62a>
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	4937      	ldr	r1, [pc, #220]	; (8010b94 <_dtoa_r+0x644>)
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	f7ef fc06 	bl	80002c8 <__aeabi_dsub>
 8010abc:	ec53 2b19 	vmov	r2, r3, d9
 8010ac0:	f7f0 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	f040 80b6 	bne.w	8010c36 <_dtoa_r+0x6e6>
 8010aca:	9b02      	ldr	r3, [sp, #8]
 8010acc:	429d      	cmp	r5, r3
 8010ace:	f43f af7c 	beq.w	80109ca <_dtoa_r+0x47a>
 8010ad2:	4b31      	ldr	r3, [pc, #196]	; (8010b98 <_dtoa_r+0x648>)
 8010ad4:	ec51 0b19 	vmov	r0, r1, d9
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f7ef fdad 	bl	8000638 <__aeabi_dmul>
 8010ade:	4b2e      	ldr	r3, [pc, #184]	; (8010b98 <_dtoa_r+0x648>)
 8010ae0:	ec41 0b19 	vmov	d9, r0, r1
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	4640      	mov	r0, r8
 8010ae8:	4649      	mov	r1, r9
 8010aea:	f7ef fda5 	bl	8000638 <__aeabi_dmul>
 8010aee:	4680      	mov	r8, r0
 8010af0:	4689      	mov	r9, r1
 8010af2:	e7c5      	b.n	8010a80 <_dtoa_r+0x530>
 8010af4:	ec51 0b17 	vmov	r0, r1, d7
 8010af8:	f7ef fd9e 	bl	8000638 <__aeabi_dmul>
 8010afc:	9b02      	ldr	r3, [sp, #8]
 8010afe:	9d00      	ldr	r5, [sp, #0]
 8010b00:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b02:	ec41 0b19 	vmov	d9, r0, r1
 8010b06:	4649      	mov	r1, r9
 8010b08:	4640      	mov	r0, r8
 8010b0a:	f7f0 f845 	bl	8000b98 <__aeabi_d2iz>
 8010b0e:	4606      	mov	r6, r0
 8010b10:	f7ef fd28 	bl	8000564 <__aeabi_i2d>
 8010b14:	3630      	adds	r6, #48	; 0x30
 8010b16:	4602      	mov	r2, r0
 8010b18:	460b      	mov	r3, r1
 8010b1a:	4640      	mov	r0, r8
 8010b1c:	4649      	mov	r1, r9
 8010b1e:	f7ef fbd3 	bl	80002c8 <__aeabi_dsub>
 8010b22:	f805 6b01 	strb.w	r6, [r5], #1
 8010b26:	9b02      	ldr	r3, [sp, #8]
 8010b28:	429d      	cmp	r5, r3
 8010b2a:	4680      	mov	r8, r0
 8010b2c:	4689      	mov	r9, r1
 8010b2e:	f04f 0200 	mov.w	r2, #0
 8010b32:	d124      	bne.n	8010b7e <_dtoa_r+0x62e>
 8010b34:	4b1b      	ldr	r3, [pc, #108]	; (8010ba4 <_dtoa_r+0x654>)
 8010b36:	ec51 0b19 	vmov	r0, r1, d9
 8010b3a:	f7ef fbc7 	bl	80002cc <__adddf3>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	460b      	mov	r3, r1
 8010b42:	4640      	mov	r0, r8
 8010b44:	4649      	mov	r1, r9
 8010b46:	f7f0 f807 	bl	8000b58 <__aeabi_dcmpgt>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d173      	bne.n	8010c36 <_dtoa_r+0x6e6>
 8010b4e:	ec53 2b19 	vmov	r2, r3, d9
 8010b52:	4914      	ldr	r1, [pc, #80]	; (8010ba4 <_dtoa_r+0x654>)
 8010b54:	2000      	movs	r0, #0
 8010b56:	f7ef fbb7 	bl	80002c8 <__aeabi_dsub>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	4640      	mov	r0, r8
 8010b60:	4649      	mov	r1, r9
 8010b62:	f7ef ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	f43f af2f 	beq.w	80109ca <_dtoa_r+0x47a>
 8010b6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010b6e:	1e6b      	subs	r3, r5, #1
 8010b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b76:	2b30      	cmp	r3, #48	; 0x30
 8010b78:	d0f8      	beq.n	8010b6c <_dtoa_r+0x61c>
 8010b7a:	46bb      	mov	fp, r7
 8010b7c:	e04a      	b.n	8010c14 <_dtoa_r+0x6c4>
 8010b7e:	4b06      	ldr	r3, [pc, #24]	; (8010b98 <_dtoa_r+0x648>)
 8010b80:	f7ef fd5a 	bl	8000638 <__aeabi_dmul>
 8010b84:	4680      	mov	r8, r0
 8010b86:	4689      	mov	r9, r1
 8010b88:	e7bd      	b.n	8010b06 <_dtoa_r+0x5b6>
 8010b8a:	bf00      	nop
 8010b8c:	08019290 	.word	0x08019290
 8010b90:	08019268 	.word	0x08019268
 8010b94:	3ff00000 	.word	0x3ff00000
 8010b98:	40240000 	.word	0x40240000
 8010b9c:	401c0000 	.word	0x401c0000
 8010ba0:	40140000 	.word	0x40140000
 8010ba4:	3fe00000 	.word	0x3fe00000
 8010ba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010bac:	9d00      	ldr	r5, [sp, #0]
 8010bae:	4642      	mov	r2, r8
 8010bb0:	464b      	mov	r3, r9
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	4639      	mov	r1, r7
 8010bb6:	f7ef fe69 	bl	800088c <__aeabi_ddiv>
 8010bba:	f7ef ffed 	bl	8000b98 <__aeabi_d2iz>
 8010bbe:	9001      	str	r0, [sp, #4]
 8010bc0:	f7ef fcd0 	bl	8000564 <__aeabi_i2d>
 8010bc4:	4642      	mov	r2, r8
 8010bc6:	464b      	mov	r3, r9
 8010bc8:	f7ef fd36 	bl	8000638 <__aeabi_dmul>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	460b      	mov	r3, r1
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	f7ef fb78 	bl	80002c8 <__aeabi_dsub>
 8010bd8:	9e01      	ldr	r6, [sp, #4]
 8010bda:	9f04      	ldr	r7, [sp, #16]
 8010bdc:	3630      	adds	r6, #48	; 0x30
 8010bde:	f805 6b01 	strb.w	r6, [r5], #1
 8010be2:	9e00      	ldr	r6, [sp, #0]
 8010be4:	1bae      	subs	r6, r5, r6
 8010be6:	42b7      	cmp	r7, r6
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	d134      	bne.n	8010c58 <_dtoa_r+0x708>
 8010bee:	f7ef fb6d 	bl	80002cc <__adddf3>
 8010bf2:	4642      	mov	r2, r8
 8010bf4:	464b      	mov	r3, r9
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	460f      	mov	r7, r1
 8010bfa:	f7ef ffad 	bl	8000b58 <__aeabi_dcmpgt>
 8010bfe:	b9c8      	cbnz	r0, 8010c34 <_dtoa_r+0x6e4>
 8010c00:	4642      	mov	r2, r8
 8010c02:	464b      	mov	r3, r9
 8010c04:	4630      	mov	r0, r6
 8010c06:	4639      	mov	r1, r7
 8010c08:	f7ef ff7e 	bl	8000b08 <__aeabi_dcmpeq>
 8010c0c:	b110      	cbz	r0, 8010c14 <_dtoa_r+0x6c4>
 8010c0e:	9b01      	ldr	r3, [sp, #4]
 8010c10:	07db      	lsls	r3, r3, #31
 8010c12:	d40f      	bmi.n	8010c34 <_dtoa_r+0x6e4>
 8010c14:	4651      	mov	r1, sl
 8010c16:	4620      	mov	r0, r4
 8010c18:	f001 f9bc 	bl	8011f94 <_Bfree>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c20:	702b      	strb	r3, [r5, #0]
 8010c22:	f10b 0301 	add.w	r3, fp, #1
 8010c26:	6013      	str	r3, [r2, #0]
 8010c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f43f ace2 	beq.w	80105f4 <_dtoa_r+0xa4>
 8010c30:	601d      	str	r5, [r3, #0]
 8010c32:	e4df      	b.n	80105f4 <_dtoa_r+0xa4>
 8010c34:	465f      	mov	r7, fp
 8010c36:	462b      	mov	r3, r5
 8010c38:	461d      	mov	r5, r3
 8010c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c3e:	2a39      	cmp	r2, #57	; 0x39
 8010c40:	d106      	bne.n	8010c50 <_dtoa_r+0x700>
 8010c42:	9a00      	ldr	r2, [sp, #0]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d1f7      	bne.n	8010c38 <_dtoa_r+0x6e8>
 8010c48:	9900      	ldr	r1, [sp, #0]
 8010c4a:	2230      	movs	r2, #48	; 0x30
 8010c4c:	3701      	adds	r7, #1
 8010c4e:	700a      	strb	r2, [r1, #0]
 8010c50:	781a      	ldrb	r2, [r3, #0]
 8010c52:	3201      	adds	r2, #1
 8010c54:	701a      	strb	r2, [r3, #0]
 8010c56:	e790      	b.n	8010b7a <_dtoa_r+0x62a>
 8010c58:	4ba3      	ldr	r3, [pc, #652]	; (8010ee8 <_dtoa_r+0x998>)
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f7ef fcec 	bl	8000638 <__aeabi_dmul>
 8010c60:	2200      	movs	r2, #0
 8010c62:	2300      	movs	r3, #0
 8010c64:	4606      	mov	r6, r0
 8010c66:	460f      	mov	r7, r1
 8010c68:	f7ef ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d09e      	beq.n	8010bae <_dtoa_r+0x65e>
 8010c70:	e7d0      	b.n	8010c14 <_dtoa_r+0x6c4>
 8010c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	f000 80ca 	beq.w	8010e0e <_dtoa_r+0x8be>
 8010c7a:	9a07      	ldr	r2, [sp, #28]
 8010c7c:	2a01      	cmp	r2, #1
 8010c7e:	f300 80ad 	bgt.w	8010ddc <_dtoa_r+0x88c>
 8010c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c84:	2a00      	cmp	r2, #0
 8010c86:	f000 80a5 	beq.w	8010dd4 <_dtoa_r+0x884>
 8010c8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010c8e:	9e08      	ldr	r6, [sp, #32]
 8010c90:	9d05      	ldr	r5, [sp, #20]
 8010c92:	9a05      	ldr	r2, [sp, #20]
 8010c94:	441a      	add	r2, r3
 8010c96:	9205      	str	r2, [sp, #20]
 8010c98:	9a06      	ldr	r2, [sp, #24]
 8010c9a:	2101      	movs	r1, #1
 8010c9c:	441a      	add	r2, r3
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	9206      	str	r2, [sp, #24]
 8010ca2:	f001 fa2d 	bl	8012100 <__i2b>
 8010ca6:	4607      	mov	r7, r0
 8010ca8:	b165      	cbz	r5, 8010cc4 <_dtoa_r+0x774>
 8010caa:	9b06      	ldr	r3, [sp, #24]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	dd09      	ble.n	8010cc4 <_dtoa_r+0x774>
 8010cb0:	42ab      	cmp	r3, r5
 8010cb2:	9a05      	ldr	r2, [sp, #20]
 8010cb4:	bfa8      	it	ge
 8010cb6:	462b      	movge	r3, r5
 8010cb8:	1ad2      	subs	r2, r2, r3
 8010cba:	9205      	str	r2, [sp, #20]
 8010cbc:	9a06      	ldr	r2, [sp, #24]
 8010cbe:	1aed      	subs	r5, r5, r3
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	9306      	str	r3, [sp, #24]
 8010cc4:	9b08      	ldr	r3, [sp, #32]
 8010cc6:	b1f3      	cbz	r3, 8010d06 <_dtoa_r+0x7b6>
 8010cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f000 80a3 	beq.w	8010e16 <_dtoa_r+0x8c6>
 8010cd0:	2e00      	cmp	r6, #0
 8010cd2:	dd10      	ble.n	8010cf6 <_dtoa_r+0x7a6>
 8010cd4:	4639      	mov	r1, r7
 8010cd6:	4632      	mov	r2, r6
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f001 fad1 	bl	8012280 <__pow5mult>
 8010cde:	4652      	mov	r2, sl
 8010ce0:	4601      	mov	r1, r0
 8010ce2:	4607      	mov	r7, r0
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f001 fa21 	bl	801212c <__multiply>
 8010cea:	4651      	mov	r1, sl
 8010cec:	4680      	mov	r8, r0
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f001 f950 	bl	8011f94 <_Bfree>
 8010cf4:	46c2      	mov	sl, r8
 8010cf6:	9b08      	ldr	r3, [sp, #32]
 8010cf8:	1b9a      	subs	r2, r3, r6
 8010cfa:	d004      	beq.n	8010d06 <_dtoa_r+0x7b6>
 8010cfc:	4651      	mov	r1, sl
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f001 fabe 	bl	8012280 <__pow5mult>
 8010d04:	4682      	mov	sl, r0
 8010d06:	2101      	movs	r1, #1
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f001 f9f9 	bl	8012100 <__i2b>
 8010d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	4606      	mov	r6, r0
 8010d14:	f340 8081 	ble.w	8010e1a <_dtoa_r+0x8ca>
 8010d18:	461a      	mov	r2, r3
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f001 faaf 	bl	8012280 <__pow5mult>
 8010d22:	9b07      	ldr	r3, [sp, #28]
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	4606      	mov	r6, r0
 8010d28:	dd7a      	ble.n	8010e20 <_dtoa_r+0x8d0>
 8010d2a:	f04f 0800 	mov.w	r8, #0
 8010d2e:	6933      	ldr	r3, [r6, #16]
 8010d30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010d34:	6918      	ldr	r0, [r3, #16]
 8010d36:	f001 f995 	bl	8012064 <__hi0bits>
 8010d3a:	f1c0 0020 	rsb	r0, r0, #32
 8010d3e:	9b06      	ldr	r3, [sp, #24]
 8010d40:	4418      	add	r0, r3
 8010d42:	f010 001f 	ands.w	r0, r0, #31
 8010d46:	f000 8094 	beq.w	8010e72 <_dtoa_r+0x922>
 8010d4a:	f1c0 0320 	rsb	r3, r0, #32
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	f340 8085 	ble.w	8010e5e <_dtoa_r+0x90e>
 8010d54:	9b05      	ldr	r3, [sp, #20]
 8010d56:	f1c0 001c 	rsb	r0, r0, #28
 8010d5a:	4403      	add	r3, r0
 8010d5c:	9305      	str	r3, [sp, #20]
 8010d5e:	9b06      	ldr	r3, [sp, #24]
 8010d60:	4403      	add	r3, r0
 8010d62:	4405      	add	r5, r0
 8010d64:	9306      	str	r3, [sp, #24]
 8010d66:	9b05      	ldr	r3, [sp, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	dd05      	ble.n	8010d78 <_dtoa_r+0x828>
 8010d6c:	4651      	mov	r1, sl
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4620      	mov	r0, r4
 8010d72:	f001 fadf 	bl	8012334 <__lshift>
 8010d76:	4682      	mov	sl, r0
 8010d78:	9b06      	ldr	r3, [sp, #24]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	dd05      	ble.n	8010d8a <_dtoa_r+0x83a>
 8010d7e:	4631      	mov	r1, r6
 8010d80:	461a      	mov	r2, r3
 8010d82:	4620      	mov	r0, r4
 8010d84:	f001 fad6 	bl	8012334 <__lshift>
 8010d88:	4606      	mov	r6, r0
 8010d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d072      	beq.n	8010e76 <_dtoa_r+0x926>
 8010d90:	4631      	mov	r1, r6
 8010d92:	4650      	mov	r0, sl
 8010d94:	f001 fb3a 	bl	801240c <__mcmp>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	da6c      	bge.n	8010e76 <_dtoa_r+0x926>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4651      	mov	r1, sl
 8010da0:	220a      	movs	r2, #10
 8010da2:	4620      	mov	r0, r4
 8010da4:	f001 f918 	bl	8011fd8 <__multadd>
 8010da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010daa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010dae:	4682      	mov	sl, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f000 81b0 	beq.w	8011116 <_dtoa_r+0xbc6>
 8010db6:	2300      	movs	r3, #0
 8010db8:	4639      	mov	r1, r7
 8010dba:	220a      	movs	r2, #10
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f001 f90b 	bl	8011fd8 <__multadd>
 8010dc2:	9b01      	ldr	r3, [sp, #4]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	4607      	mov	r7, r0
 8010dc8:	f300 8096 	bgt.w	8010ef8 <_dtoa_r+0x9a8>
 8010dcc:	9b07      	ldr	r3, [sp, #28]
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	dc59      	bgt.n	8010e86 <_dtoa_r+0x936>
 8010dd2:	e091      	b.n	8010ef8 <_dtoa_r+0x9a8>
 8010dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010dda:	e758      	b.n	8010c8e <_dtoa_r+0x73e>
 8010ddc:	9b04      	ldr	r3, [sp, #16]
 8010dde:	1e5e      	subs	r6, r3, #1
 8010de0:	9b08      	ldr	r3, [sp, #32]
 8010de2:	42b3      	cmp	r3, r6
 8010de4:	bfbf      	itttt	lt
 8010de6:	9b08      	ldrlt	r3, [sp, #32]
 8010de8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010dea:	9608      	strlt	r6, [sp, #32]
 8010dec:	1af3      	sublt	r3, r6, r3
 8010dee:	bfb4      	ite	lt
 8010df0:	18d2      	addlt	r2, r2, r3
 8010df2:	1b9e      	subge	r6, r3, r6
 8010df4:	9b04      	ldr	r3, [sp, #16]
 8010df6:	bfbc      	itt	lt
 8010df8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010dfa:	2600      	movlt	r6, #0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	bfb7      	itett	lt
 8010e00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010e04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010e08:	1a9d      	sublt	r5, r3, r2
 8010e0a:	2300      	movlt	r3, #0
 8010e0c:	e741      	b.n	8010c92 <_dtoa_r+0x742>
 8010e0e:	9e08      	ldr	r6, [sp, #32]
 8010e10:	9d05      	ldr	r5, [sp, #20]
 8010e12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010e14:	e748      	b.n	8010ca8 <_dtoa_r+0x758>
 8010e16:	9a08      	ldr	r2, [sp, #32]
 8010e18:	e770      	b.n	8010cfc <_dtoa_r+0x7ac>
 8010e1a:	9b07      	ldr	r3, [sp, #28]
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	dc19      	bgt.n	8010e54 <_dtoa_r+0x904>
 8010e20:	9b02      	ldr	r3, [sp, #8]
 8010e22:	b9bb      	cbnz	r3, 8010e54 <_dtoa_r+0x904>
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e2a:	b99b      	cbnz	r3, 8010e54 <_dtoa_r+0x904>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e32:	0d1b      	lsrs	r3, r3, #20
 8010e34:	051b      	lsls	r3, r3, #20
 8010e36:	b183      	cbz	r3, 8010e5a <_dtoa_r+0x90a>
 8010e38:	9b05      	ldr	r3, [sp, #20]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	9305      	str	r3, [sp, #20]
 8010e3e:	9b06      	ldr	r3, [sp, #24]
 8010e40:	3301      	adds	r3, #1
 8010e42:	9306      	str	r3, [sp, #24]
 8010e44:	f04f 0801 	mov.w	r8, #1
 8010e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f47f af6f 	bne.w	8010d2e <_dtoa_r+0x7de>
 8010e50:	2001      	movs	r0, #1
 8010e52:	e774      	b.n	8010d3e <_dtoa_r+0x7ee>
 8010e54:	f04f 0800 	mov.w	r8, #0
 8010e58:	e7f6      	b.n	8010e48 <_dtoa_r+0x8f8>
 8010e5a:	4698      	mov	r8, r3
 8010e5c:	e7f4      	b.n	8010e48 <_dtoa_r+0x8f8>
 8010e5e:	d082      	beq.n	8010d66 <_dtoa_r+0x816>
 8010e60:	9a05      	ldr	r2, [sp, #20]
 8010e62:	331c      	adds	r3, #28
 8010e64:	441a      	add	r2, r3
 8010e66:	9205      	str	r2, [sp, #20]
 8010e68:	9a06      	ldr	r2, [sp, #24]
 8010e6a:	441a      	add	r2, r3
 8010e6c:	441d      	add	r5, r3
 8010e6e:	9206      	str	r2, [sp, #24]
 8010e70:	e779      	b.n	8010d66 <_dtoa_r+0x816>
 8010e72:	4603      	mov	r3, r0
 8010e74:	e7f4      	b.n	8010e60 <_dtoa_r+0x910>
 8010e76:	9b04      	ldr	r3, [sp, #16]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	dc37      	bgt.n	8010eec <_dtoa_r+0x99c>
 8010e7c:	9b07      	ldr	r3, [sp, #28]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	dd34      	ble.n	8010eec <_dtoa_r+0x99c>
 8010e82:	9b04      	ldr	r3, [sp, #16]
 8010e84:	9301      	str	r3, [sp, #4]
 8010e86:	9b01      	ldr	r3, [sp, #4]
 8010e88:	b963      	cbnz	r3, 8010ea4 <_dtoa_r+0x954>
 8010e8a:	4631      	mov	r1, r6
 8010e8c:	2205      	movs	r2, #5
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f001 f8a2 	bl	8011fd8 <__multadd>
 8010e94:	4601      	mov	r1, r0
 8010e96:	4606      	mov	r6, r0
 8010e98:	4650      	mov	r0, sl
 8010e9a:	f001 fab7 	bl	801240c <__mcmp>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	f73f adbb 	bgt.w	8010a1a <_dtoa_r+0x4ca>
 8010ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea6:	9d00      	ldr	r5, [sp, #0]
 8010ea8:	ea6f 0b03 	mvn.w	fp, r3
 8010eac:	f04f 0800 	mov.w	r8, #0
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f001 f86e 	bl	8011f94 <_Bfree>
 8010eb8:	2f00      	cmp	r7, #0
 8010eba:	f43f aeab 	beq.w	8010c14 <_dtoa_r+0x6c4>
 8010ebe:	f1b8 0f00 	cmp.w	r8, #0
 8010ec2:	d005      	beq.n	8010ed0 <_dtoa_r+0x980>
 8010ec4:	45b8      	cmp	r8, r7
 8010ec6:	d003      	beq.n	8010ed0 <_dtoa_r+0x980>
 8010ec8:	4641      	mov	r1, r8
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f001 f862 	bl	8011f94 <_Bfree>
 8010ed0:	4639      	mov	r1, r7
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f001 f85e 	bl	8011f94 <_Bfree>
 8010ed8:	e69c      	b.n	8010c14 <_dtoa_r+0x6c4>
 8010eda:	2600      	movs	r6, #0
 8010edc:	4637      	mov	r7, r6
 8010ede:	e7e1      	b.n	8010ea4 <_dtoa_r+0x954>
 8010ee0:	46bb      	mov	fp, r7
 8010ee2:	4637      	mov	r7, r6
 8010ee4:	e599      	b.n	8010a1a <_dtoa_r+0x4ca>
 8010ee6:	bf00      	nop
 8010ee8:	40240000 	.word	0x40240000
 8010eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f000 80c8 	beq.w	8011084 <_dtoa_r+0xb34>
 8010ef4:	9b04      	ldr	r3, [sp, #16]
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	2d00      	cmp	r5, #0
 8010efa:	dd05      	ble.n	8010f08 <_dtoa_r+0x9b8>
 8010efc:	4639      	mov	r1, r7
 8010efe:	462a      	mov	r2, r5
 8010f00:	4620      	mov	r0, r4
 8010f02:	f001 fa17 	bl	8012334 <__lshift>
 8010f06:	4607      	mov	r7, r0
 8010f08:	f1b8 0f00 	cmp.w	r8, #0
 8010f0c:	d05b      	beq.n	8010fc6 <_dtoa_r+0xa76>
 8010f0e:	6879      	ldr	r1, [r7, #4]
 8010f10:	4620      	mov	r0, r4
 8010f12:	f000 ffff 	bl	8011f14 <_Balloc>
 8010f16:	4605      	mov	r5, r0
 8010f18:	b928      	cbnz	r0, 8010f26 <_dtoa_r+0x9d6>
 8010f1a:	4b83      	ldr	r3, [pc, #524]	; (8011128 <_dtoa_r+0xbd8>)
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010f22:	f7ff bb2e 	b.w	8010582 <_dtoa_r+0x32>
 8010f26:	693a      	ldr	r2, [r7, #16]
 8010f28:	3202      	adds	r2, #2
 8010f2a:	0092      	lsls	r2, r2, #2
 8010f2c:	f107 010c 	add.w	r1, r7, #12
 8010f30:	300c      	adds	r0, #12
 8010f32:	f7ff fa4e 	bl	80103d2 <memcpy>
 8010f36:	2201      	movs	r2, #1
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f001 f9fa 	bl	8012334 <__lshift>
 8010f40:	9b00      	ldr	r3, [sp, #0]
 8010f42:	3301      	adds	r3, #1
 8010f44:	9304      	str	r3, [sp, #16]
 8010f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	9308      	str	r3, [sp, #32]
 8010f4e:	9b02      	ldr	r3, [sp, #8]
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	46b8      	mov	r8, r7
 8010f56:	9306      	str	r3, [sp, #24]
 8010f58:	4607      	mov	r7, r0
 8010f5a:	9b04      	ldr	r3, [sp, #16]
 8010f5c:	4631      	mov	r1, r6
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	4650      	mov	r0, sl
 8010f62:	9301      	str	r3, [sp, #4]
 8010f64:	f7ff fa6a 	bl	801043c <quorem>
 8010f68:	4641      	mov	r1, r8
 8010f6a:	9002      	str	r0, [sp, #8]
 8010f6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010f70:	4650      	mov	r0, sl
 8010f72:	f001 fa4b 	bl	801240c <__mcmp>
 8010f76:	463a      	mov	r2, r7
 8010f78:	9005      	str	r0, [sp, #20]
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f001 fa61 	bl	8012444 <__mdiff>
 8010f82:	68c2      	ldr	r2, [r0, #12]
 8010f84:	4605      	mov	r5, r0
 8010f86:	bb02      	cbnz	r2, 8010fca <_dtoa_r+0xa7a>
 8010f88:	4601      	mov	r1, r0
 8010f8a:	4650      	mov	r0, sl
 8010f8c:	f001 fa3e 	bl	801240c <__mcmp>
 8010f90:	4602      	mov	r2, r0
 8010f92:	4629      	mov	r1, r5
 8010f94:	4620      	mov	r0, r4
 8010f96:	9209      	str	r2, [sp, #36]	; 0x24
 8010f98:	f000 fffc 	bl	8011f94 <_Bfree>
 8010f9c:	9b07      	ldr	r3, [sp, #28]
 8010f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fa0:	9d04      	ldr	r5, [sp, #16]
 8010fa2:	ea43 0102 	orr.w	r1, r3, r2
 8010fa6:	9b06      	ldr	r3, [sp, #24]
 8010fa8:	4319      	orrs	r1, r3
 8010faa:	d110      	bne.n	8010fce <_dtoa_r+0xa7e>
 8010fac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fb0:	d029      	beq.n	8011006 <_dtoa_r+0xab6>
 8010fb2:	9b05      	ldr	r3, [sp, #20]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	dd02      	ble.n	8010fbe <_dtoa_r+0xa6e>
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010fbe:	9b01      	ldr	r3, [sp, #4]
 8010fc0:	f883 9000 	strb.w	r9, [r3]
 8010fc4:	e774      	b.n	8010eb0 <_dtoa_r+0x960>
 8010fc6:	4638      	mov	r0, r7
 8010fc8:	e7ba      	b.n	8010f40 <_dtoa_r+0x9f0>
 8010fca:	2201      	movs	r2, #1
 8010fcc:	e7e1      	b.n	8010f92 <_dtoa_r+0xa42>
 8010fce:	9b05      	ldr	r3, [sp, #20]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	db04      	blt.n	8010fde <_dtoa_r+0xa8e>
 8010fd4:	9907      	ldr	r1, [sp, #28]
 8010fd6:	430b      	orrs	r3, r1
 8010fd8:	9906      	ldr	r1, [sp, #24]
 8010fda:	430b      	orrs	r3, r1
 8010fdc:	d120      	bne.n	8011020 <_dtoa_r+0xad0>
 8010fde:	2a00      	cmp	r2, #0
 8010fe0:	dded      	ble.n	8010fbe <_dtoa_r+0xa6e>
 8010fe2:	4651      	mov	r1, sl
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	f001 f9a4 	bl	8012334 <__lshift>
 8010fec:	4631      	mov	r1, r6
 8010fee:	4682      	mov	sl, r0
 8010ff0:	f001 fa0c 	bl	801240c <__mcmp>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	dc03      	bgt.n	8011000 <_dtoa_r+0xab0>
 8010ff8:	d1e1      	bne.n	8010fbe <_dtoa_r+0xa6e>
 8010ffa:	f019 0f01 	tst.w	r9, #1
 8010ffe:	d0de      	beq.n	8010fbe <_dtoa_r+0xa6e>
 8011000:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011004:	d1d8      	bne.n	8010fb8 <_dtoa_r+0xa68>
 8011006:	9a01      	ldr	r2, [sp, #4]
 8011008:	2339      	movs	r3, #57	; 0x39
 801100a:	7013      	strb	r3, [r2, #0]
 801100c:	462b      	mov	r3, r5
 801100e:	461d      	mov	r5, r3
 8011010:	3b01      	subs	r3, #1
 8011012:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011016:	2a39      	cmp	r2, #57	; 0x39
 8011018:	d06c      	beq.n	80110f4 <_dtoa_r+0xba4>
 801101a:	3201      	adds	r2, #1
 801101c:	701a      	strb	r2, [r3, #0]
 801101e:	e747      	b.n	8010eb0 <_dtoa_r+0x960>
 8011020:	2a00      	cmp	r2, #0
 8011022:	dd07      	ble.n	8011034 <_dtoa_r+0xae4>
 8011024:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011028:	d0ed      	beq.n	8011006 <_dtoa_r+0xab6>
 801102a:	9a01      	ldr	r2, [sp, #4]
 801102c:	f109 0301 	add.w	r3, r9, #1
 8011030:	7013      	strb	r3, [r2, #0]
 8011032:	e73d      	b.n	8010eb0 <_dtoa_r+0x960>
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	9a08      	ldr	r2, [sp, #32]
 8011038:	f803 9c01 	strb.w	r9, [r3, #-1]
 801103c:	4293      	cmp	r3, r2
 801103e:	d043      	beq.n	80110c8 <_dtoa_r+0xb78>
 8011040:	4651      	mov	r1, sl
 8011042:	2300      	movs	r3, #0
 8011044:	220a      	movs	r2, #10
 8011046:	4620      	mov	r0, r4
 8011048:	f000 ffc6 	bl	8011fd8 <__multadd>
 801104c:	45b8      	cmp	r8, r7
 801104e:	4682      	mov	sl, r0
 8011050:	f04f 0300 	mov.w	r3, #0
 8011054:	f04f 020a 	mov.w	r2, #10
 8011058:	4641      	mov	r1, r8
 801105a:	4620      	mov	r0, r4
 801105c:	d107      	bne.n	801106e <_dtoa_r+0xb1e>
 801105e:	f000 ffbb 	bl	8011fd8 <__multadd>
 8011062:	4680      	mov	r8, r0
 8011064:	4607      	mov	r7, r0
 8011066:	9b04      	ldr	r3, [sp, #16]
 8011068:	3301      	adds	r3, #1
 801106a:	9304      	str	r3, [sp, #16]
 801106c:	e775      	b.n	8010f5a <_dtoa_r+0xa0a>
 801106e:	f000 ffb3 	bl	8011fd8 <__multadd>
 8011072:	4639      	mov	r1, r7
 8011074:	4680      	mov	r8, r0
 8011076:	2300      	movs	r3, #0
 8011078:	220a      	movs	r2, #10
 801107a:	4620      	mov	r0, r4
 801107c:	f000 ffac 	bl	8011fd8 <__multadd>
 8011080:	4607      	mov	r7, r0
 8011082:	e7f0      	b.n	8011066 <_dtoa_r+0xb16>
 8011084:	9b04      	ldr	r3, [sp, #16]
 8011086:	9301      	str	r3, [sp, #4]
 8011088:	9d00      	ldr	r5, [sp, #0]
 801108a:	4631      	mov	r1, r6
 801108c:	4650      	mov	r0, sl
 801108e:	f7ff f9d5 	bl	801043c <quorem>
 8011092:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011096:	9b00      	ldr	r3, [sp, #0]
 8011098:	f805 9b01 	strb.w	r9, [r5], #1
 801109c:	1aea      	subs	r2, r5, r3
 801109e:	9b01      	ldr	r3, [sp, #4]
 80110a0:	4293      	cmp	r3, r2
 80110a2:	dd07      	ble.n	80110b4 <_dtoa_r+0xb64>
 80110a4:	4651      	mov	r1, sl
 80110a6:	2300      	movs	r3, #0
 80110a8:	220a      	movs	r2, #10
 80110aa:	4620      	mov	r0, r4
 80110ac:	f000 ff94 	bl	8011fd8 <__multadd>
 80110b0:	4682      	mov	sl, r0
 80110b2:	e7ea      	b.n	801108a <_dtoa_r+0xb3a>
 80110b4:	9b01      	ldr	r3, [sp, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	bfc8      	it	gt
 80110ba:	461d      	movgt	r5, r3
 80110bc:	9b00      	ldr	r3, [sp, #0]
 80110be:	bfd8      	it	le
 80110c0:	2501      	movle	r5, #1
 80110c2:	441d      	add	r5, r3
 80110c4:	f04f 0800 	mov.w	r8, #0
 80110c8:	4651      	mov	r1, sl
 80110ca:	2201      	movs	r2, #1
 80110cc:	4620      	mov	r0, r4
 80110ce:	f001 f931 	bl	8012334 <__lshift>
 80110d2:	4631      	mov	r1, r6
 80110d4:	4682      	mov	sl, r0
 80110d6:	f001 f999 	bl	801240c <__mcmp>
 80110da:	2800      	cmp	r0, #0
 80110dc:	dc96      	bgt.n	801100c <_dtoa_r+0xabc>
 80110de:	d102      	bne.n	80110e6 <_dtoa_r+0xb96>
 80110e0:	f019 0f01 	tst.w	r9, #1
 80110e4:	d192      	bne.n	801100c <_dtoa_r+0xabc>
 80110e6:	462b      	mov	r3, r5
 80110e8:	461d      	mov	r5, r3
 80110ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110ee:	2a30      	cmp	r2, #48	; 0x30
 80110f0:	d0fa      	beq.n	80110e8 <_dtoa_r+0xb98>
 80110f2:	e6dd      	b.n	8010eb0 <_dtoa_r+0x960>
 80110f4:	9a00      	ldr	r2, [sp, #0]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d189      	bne.n	801100e <_dtoa_r+0xabe>
 80110fa:	f10b 0b01 	add.w	fp, fp, #1
 80110fe:	2331      	movs	r3, #49	; 0x31
 8011100:	e796      	b.n	8011030 <_dtoa_r+0xae0>
 8011102:	4b0a      	ldr	r3, [pc, #40]	; (801112c <_dtoa_r+0xbdc>)
 8011104:	f7ff ba99 	b.w	801063a <_dtoa_r+0xea>
 8011108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801110a:	2b00      	cmp	r3, #0
 801110c:	f47f aa6d 	bne.w	80105ea <_dtoa_r+0x9a>
 8011110:	4b07      	ldr	r3, [pc, #28]	; (8011130 <_dtoa_r+0xbe0>)
 8011112:	f7ff ba92 	b.w	801063a <_dtoa_r+0xea>
 8011116:	9b01      	ldr	r3, [sp, #4]
 8011118:	2b00      	cmp	r3, #0
 801111a:	dcb5      	bgt.n	8011088 <_dtoa_r+0xb38>
 801111c:	9b07      	ldr	r3, [sp, #28]
 801111e:	2b02      	cmp	r3, #2
 8011120:	f73f aeb1 	bgt.w	8010e86 <_dtoa_r+0x936>
 8011124:	e7b0      	b.n	8011088 <_dtoa_r+0xb38>
 8011126:	bf00      	nop
 8011128:	080191cb 	.word	0x080191cb
 801112c:	08019203 	.word	0x08019203
 8011130:	0801914f 	.word	0x0801914f

08011134 <_free_r>:
 8011134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011136:	2900      	cmp	r1, #0
 8011138:	d044      	beq.n	80111c4 <_free_r+0x90>
 801113a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801113e:	9001      	str	r0, [sp, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f1a1 0404 	sub.w	r4, r1, #4
 8011146:	bfb8      	it	lt
 8011148:	18e4      	addlt	r4, r4, r3
 801114a:	f7fe fe29 	bl	800fda0 <__malloc_lock>
 801114e:	4a1e      	ldr	r2, [pc, #120]	; (80111c8 <_free_r+0x94>)
 8011150:	9801      	ldr	r0, [sp, #4]
 8011152:	6813      	ldr	r3, [r2, #0]
 8011154:	b933      	cbnz	r3, 8011164 <_free_r+0x30>
 8011156:	6063      	str	r3, [r4, #4]
 8011158:	6014      	str	r4, [r2, #0]
 801115a:	b003      	add	sp, #12
 801115c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011160:	f7fe be24 	b.w	800fdac <__malloc_unlock>
 8011164:	42a3      	cmp	r3, r4
 8011166:	d908      	bls.n	801117a <_free_r+0x46>
 8011168:	6825      	ldr	r5, [r4, #0]
 801116a:	1961      	adds	r1, r4, r5
 801116c:	428b      	cmp	r3, r1
 801116e:	bf01      	itttt	eq
 8011170:	6819      	ldreq	r1, [r3, #0]
 8011172:	685b      	ldreq	r3, [r3, #4]
 8011174:	1949      	addeq	r1, r1, r5
 8011176:	6021      	streq	r1, [r4, #0]
 8011178:	e7ed      	b.n	8011156 <_free_r+0x22>
 801117a:	461a      	mov	r2, r3
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	b10b      	cbz	r3, 8011184 <_free_r+0x50>
 8011180:	42a3      	cmp	r3, r4
 8011182:	d9fa      	bls.n	801117a <_free_r+0x46>
 8011184:	6811      	ldr	r1, [r2, #0]
 8011186:	1855      	adds	r5, r2, r1
 8011188:	42a5      	cmp	r5, r4
 801118a:	d10b      	bne.n	80111a4 <_free_r+0x70>
 801118c:	6824      	ldr	r4, [r4, #0]
 801118e:	4421      	add	r1, r4
 8011190:	1854      	adds	r4, r2, r1
 8011192:	42a3      	cmp	r3, r4
 8011194:	6011      	str	r1, [r2, #0]
 8011196:	d1e0      	bne.n	801115a <_free_r+0x26>
 8011198:	681c      	ldr	r4, [r3, #0]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	6053      	str	r3, [r2, #4]
 801119e:	440c      	add	r4, r1
 80111a0:	6014      	str	r4, [r2, #0]
 80111a2:	e7da      	b.n	801115a <_free_r+0x26>
 80111a4:	d902      	bls.n	80111ac <_free_r+0x78>
 80111a6:	230c      	movs	r3, #12
 80111a8:	6003      	str	r3, [r0, #0]
 80111aa:	e7d6      	b.n	801115a <_free_r+0x26>
 80111ac:	6825      	ldr	r5, [r4, #0]
 80111ae:	1961      	adds	r1, r4, r5
 80111b0:	428b      	cmp	r3, r1
 80111b2:	bf04      	itt	eq
 80111b4:	6819      	ldreq	r1, [r3, #0]
 80111b6:	685b      	ldreq	r3, [r3, #4]
 80111b8:	6063      	str	r3, [r4, #4]
 80111ba:	bf04      	itt	eq
 80111bc:	1949      	addeq	r1, r1, r5
 80111be:	6021      	streq	r1, [r4, #0]
 80111c0:	6054      	str	r4, [r2, #4]
 80111c2:	e7ca      	b.n	801115a <_free_r+0x26>
 80111c4:	b003      	add	sp, #12
 80111c6:	bd30      	pop	{r4, r5, pc}
 80111c8:	20009ef0 	.word	0x20009ef0

080111cc <__ssputs_r>:
 80111cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d0:	688e      	ldr	r6, [r1, #8]
 80111d2:	461f      	mov	r7, r3
 80111d4:	42be      	cmp	r6, r7
 80111d6:	680b      	ldr	r3, [r1, #0]
 80111d8:	4682      	mov	sl, r0
 80111da:	460c      	mov	r4, r1
 80111dc:	4690      	mov	r8, r2
 80111de:	d82c      	bhi.n	801123a <__ssputs_r+0x6e>
 80111e0:	898a      	ldrh	r2, [r1, #12]
 80111e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111e6:	d026      	beq.n	8011236 <__ssputs_r+0x6a>
 80111e8:	6965      	ldr	r5, [r4, #20]
 80111ea:	6909      	ldr	r1, [r1, #16]
 80111ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111f0:	eba3 0901 	sub.w	r9, r3, r1
 80111f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111f8:	1c7b      	adds	r3, r7, #1
 80111fa:	444b      	add	r3, r9
 80111fc:	106d      	asrs	r5, r5, #1
 80111fe:	429d      	cmp	r5, r3
 8011200:	bf38      	it	cc
 8011202:	461d      	movcc	r5, r3
 8011204:	0553      	lsls	r3, r2, #21
 8011206:	d527      	bpl.n	8011258 <__ssputs_r+0x8c>
 8011208:	4629      	mov	r1, r5
 801120a:	f7fe fb85 	bl	800f918 <_malloc_r>
 801120e:	4606      	mov	r6, r0
 8011210:	b360      	cbz	r0, 801126c <__ssputs_r+0xa0>
 8011212:	6921      	ldr	r1, [r4, #16]
 8011214:	464a      	mov	r2, r9
 8011216:	f7ff f8dc 	bl	80103d2 <memcpy>
 801121a:	89a3      	ldrh	r3, [r4, #12]
 801121c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011224:	81a3      	strh	r3, [r4, #12]
 8011226:	6126      	str	r6, [r4, #16]
 8011228:	6165      	str	r5, [r4, #20]
 801122a:	444e      	add	r6, r9
 801122c:	eba5 0509 	sub.w	r5, r5, r9
 8011230:	6026      	str	r6, [r4, #0]
 8011232:	60a5      	str	r5, [r4, #8]
 8011234:	463e      	mov	r6, r7
 8011236:	42be      	cmp	r6, r7
 8011238:	d900      	bls.n	801123c <__ssputs_r+0x70>
 801123a:	463e      	mov	r6, r7
 801123c:	6820      	ldr	r0, [r4, #0]
 801123e:	4632      	mov	r2, r6
 8011240:	4641      	mov	r1, r8
 8011242:	f001 fbcb 	bl	80129dc <memmove>
 8011246:	68a3      	ldr	r3, [r4, #8]
 8011248:	1b9b      	subs	r3, r3, r6
 801124a:	60a3      	str	r3, [r4, #8]
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	4433      	add	r3, r6
 8011250:	6023      	str	r3, [r4, #0]
 8011252:	2000      	movs	r0, #0
 8011254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011258:	462a      	mov	r2, r5
 801125a:	f001 fa23 	bl	80126a4 <_realloc_r>
 801125e:	4606      	mov	r6, r0
 8011260:	2800      	cmp	r0, #0
 8011262:	d1e0      	bne.n	8011226 <__ssputs_r+0x5a>
 8011264:	6921      	ldr	r1, [r4, #16]
 8011266:	4650      	mov	r0, sl
 8011268:	f7ff ff64 	bl	8011134 <_free_r>
 801126c:	230c      	movs	r3, #12
 801126e:	f8ca 3000 	str.w	r3, [sl]
 8011272:	89a3      	ldrh	r3, [r4, #12]
 8011274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011278:	81a3      	strh	r3, [r4, #12]
 801127a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801127e:	e7e9      	b.n	8011254 <__ssputs_r+0x88>

08011280 <_svfiprintf_r>:
 8011280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	4698      	mov	r8, r3
 8011286:	898b      	ldrh	r3, [r1, #12]
 8011288:	061b      	lsls	r3, r3, #24
 801128a:	b09d      	sub	sp, #116	; 0x74
 801128c:	4607      	mov	r7, r0
 801128e:	460d      	mov	r5, r1
 8011290:	4614      	mov	r4, r2
 8011292:	d50e      	bpl.n	80112b2 <_svfiprintf_r+0x32>
 8011294:	690b      	ldr	r3, [r1, #16]
 8011296:	b963      	cbnz	r3, 80112b2 <_svfiprintf_r+0x32>
 8011298:	2140      	movs	r1, #64	; 0x40
 801129a:	f7fe fb3d 	bl	800f918 <_malloc_r>
 801129e:	6028      	str	r0, [r5, #0]
 80112a0:	6128      	str	r0, [r5, #16]
 80112a2:	b920      	cbnz	r0, 80112ae <_svfiprintf_r+0x2e>
 80112a4:	230c      	movs	r3, #12
 80112a6:	603b      	str	r3, [r7, #0]
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112ac:	e0d0      	b.n	8011450 <_svfiprintf_r+0x1d0>
 80112ae:	2340      	movs	r3, #64	; 0x40
 80112b0:	616b      	str	r3, [r5, #20]
 80112b2:	2300      	movs	r3, #0
 80112b4:	9309      	str	r3, [sp, #36]	; 0x24
 80112b6:	2320      	movs	r3, #32
 80112b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80112c0:	2330      	movs	r3, #48	; 0x30
 80112c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011468 <_svfiprintf_r+0x1e8>
 80112c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112ca:	f04f 0901 	mov.w	r9, #1
 80112ce:	4623      	mov	r3, r4
 80112d0:	469a      	mov	sl, r3
 80112d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112d6:	b10a      	cbz	r2, 80112dc <_svfiprintf_r+0x5c>
 80112d8:	2a25      	cmp	r2, #37	; 0x25
 80112da:	d1f9      	bne.n	80112d0 <_svfiprintf_r+0x50>
 80112dc:	ebba 0b04 	subs.w	fp, sl, r4
 80112e0:	d00b      	beq.n	80112fa <_svfiprintf_r+0x7a>
 80112e2:	465b      	mov	r3, fp
 80112e4:	4622      	mov	r2, r4
 80112e6:	4629      	mov	r1, r5
 80112e8:	4638      	mov	r0, r7
 80112ea:	f7ff ff6f 	bl	80111cc <__ssputs_r>
 80112ee:	3001      	adds	r0, #1
 80112f0:	f000 80a9 	beq.w	8011446 <_svfiprintf_r+0x1c6>
 80112f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112f6:	445a      	add	r2, fp
 80112f8:	9209      	str	r2, [sp, #36]	; 0x24
 80112fa:	f89a 3000 	ldrb.w	r3, [sl]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f000 80a1 	beq.w	8011446 <_svfiprintf_r+0x1c6>
 8011304:	2300      	movs	r3, #0
 8011306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801130a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801130e:	f10a 0a01 	add.w	sl, sl, #1
 8011312:	9304      	str	r3, [sp, #16]
 8011314:	9307      	str	r3, [sp, #28]
 8011316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801131a:	931a      	str	r3, [sp, #104]	; 0x68
 801131c:	4654      	mov	r4, sl
 801131e:	2205      	movs	r2, #5
 8011320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011324:	4850      	ldr	r0, [pc, #320]	; (8011468 <_svfiprintf_r+0x1e8>)
 8011326:	f7ee ff73 	bl	8000210 <memchr>
 801132a:	9a04      	ldr	r2, [sp, #16]
 801132c:	b9d8      	cbnz	r0, 8011366 <_svfiprintf_r+0xe6>
 801132e:	06d0      	lsls	r0, r2, #27
 8011330:	bf44      	itt	mi
 8011332:	2320      	movmi	r3, #32
 8011334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011338:	0711      	lsls	r1, r2, #28
 801133a:	bf44      	itt	mi
 801133c:	232b      	movmi	r3, #43	; 0x2b
 801133e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011342:	f89a 3000 	ldrb.w	r3, [sl]
 8011346:	2b2a      	cmp	r3, #42	; 0x2a
 8011348:	d015      	beq.n	8011376 <_svfiprintf_r+0xf6>
 801134a:	9a07      	ldr	r2, [sp, #28]
 801134c:	4654      	mov	r4, sl
 801134e:	2000      	movs	r0, #0
 8011350:	f04f 0c0a 	mov.w	ip, #10
 8011354:	4621      	mov	r1, r4
 8011356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801135a:	3b30      	subs	r3, #48	; 0x30
 801135c:	2b09      	cmp	r3, #9
 801135e:	d94d      	bls.n	80113fc <_svfiprintf_r+0x17c>
 8011360:	b1b0      	cbz	r0, 8011390 <_svfiprintf_r+0x110>
 8011362:	9207      	str	r2, [sp, #28]
 8011364:	e014      	b.n	8011390 <_svfiprintf_r+0x110>
 8011366:	eba0 0308 	sub.w	r3, r0, r8
 801136a:	fa09 f303 	lsl.w	r3, r9, r3
 801136e:	4313      	orrs	r3, r2
 8011370:	9304      	str	r3, [sp, #16]
 8011372:	46a2      	mov	sl, r4
 8011374:	e7d2      	b.n	801131c <_svfiprintf_r+0x9c>
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	1d19      	adds	r1, r3, #4
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	9103      	str	r1, [sp, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	bfbb      	ittet	lt
 8011382:	425b      	neglt	r3, r3
 8011384:	f042 0202 	orrlt.w	r2, r2, #2
 8011388:	9307      	strge	r3, [sp, #28]
 801138a:	9307      	strlt	r3, [sp, #28]
 801138c:	bfb8      	it	lt
 801138e:	9204      	strlt	r2, [sp, #16]
 8011390:	7823      	ldrb	r3, [r4, #0]
 8011392:	2b2e      	cmp	r3, #46	; 0x2e
 8011394:	d10c      	bne.n	80113b0 <_svfiprintf_r+0x130>
 8011396:	7863      	ldrb	r3, [r4, #1]
 8011398:	2b2a      	cmp	r3, #42	; 0x2a
 801139a:	d134      	bne.n	8011406 <_svfiprintf_r+0x186>
 801139c:	9b03      	ldr	r3, [sp, #12]
 801139e:	1d1a      	adds	r2, r3, #4
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	9203      	str	r2, [sp, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	bfb8      	it	lt
 80113a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80113ac:	3402      	adds	r4, #2
 80113ae:	9305      	str	r3, [sp, #20]
 80113b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011478 <_svfiprintf_r+0x1f8>
 80113b4:	7821      	ldrb	r1, [r4, #0]
 80113b6:	2203      	movs	r2, #3
 80113b8:	4650      	mov	r0, sl
 80113ba:	f7ee ff29 	bl	8000210 <memchr>
 80113be:	b138      	cbz	r0, 80113d0 <_svfiprintf_r+0x150>
 80113c0:	9b04      	ldr	r3, [sp, #16]
 80113c2:	eba0 000a 	sub.w	r0, r0, sl
 80113c6:	2240      	movs	r2, #64	; 0x40
 80113c8:	4082      	lsls	r2, r0
 80113ca:	4313      	orrs	r3, r2
 80113cc:	3401      	adds	r4, #1
 80113ce:	9304      	str	r3, [sp, #16]
 80113d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113d4:	4825      	ldr	r0, [pc, #148]	; (801146c <_svfiprintf_r+0x1ec>)
 80113d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113da:	2206      	movs	r2, #6
 80113dc:	f7ee ff18 	bl	8000210 <memchr>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	d038      	beq.n	8011456 <_svfiprintf_r+0x1d6>
 80113e4:	4b22      	ldr	r3, [pc, #136]	; (8011470 <_svfiprintf_r+0x1f0>)
 80113e6:	bb1b      	cbnz	r3, 8011430 <_svfiprintf_r+0x1b0>
 80113e8:	9b03      	ldr	r3, [sp, #12]
 80113ea:	3307      	adds	r3, #7
 80113ec:	f023 0307 	bic.w	r3, r3, #7
 80113f0:	3308      	adds	r3, #8
 80113f2:	9303      	str	r3, [sp, #12]
 80113f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f6:	4433      	add	r3, r6
 80113f8:	9309      	str	r3, [sp, #36]	; 0x24
 80113fa:	e768      	b.n	80112ce <_svfiprintf_r+0x4e>
 80113fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011400:	460c      	mov	r4, r1
 8011402:	2001      	movs	r0, #1
 8011404:	e7a6      	b.n	8011354 <_svfiprintf_r+0xd4>
 8011406:	2300      	movs	r3, #0
 8011408:	3401      	adds	r4, #1
 801140a:	9305      	str	r3, [sp, #20]
 801140c:	4619      	mov	r1, r3
 801140e:	f04f 0c0a 	mov.w	ip, #10
 8011412:	4620      	mov	r0, r4
 8011414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011418:	3a30      	subs	r2, #48	; 0x30
 801141a:	2a09      	cmp	r2, #9
 801141c:	d903      	bls.n	8011426 <_svfiprintf_r+0x1a6>
 801141e:	2b00      	cmp	r3, #0
 8011420:	d0c6      	beq.n	80113b0 <_svfiprintf_r+0x130>
 8011422:	9105      	str	r1, [sp, #20]
 8011424:	e7c4      	b.n	80113b0 <_svfiprintf_r+0x130>
 8011426:	fb0c 2101 	mla	r1, ip, r1, r2
 801142a:	4604      	mov	r4, r0
 801142c:	2301      	movs	r3, #1
 801142e:	e7f0      	b.n	8011412 <_svfiprintf_r+0x192>
 8011430:	ab03      	add	r3, sp, #12
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	462a      	mov	r2, r5
 8011436:	4b0f      	ldr	r3, [pc, #60]	; (8011474 <_svfiprintf_r+0x1f4>)
 8011438:	a904      	add	r1, sp, #16
 801143a:	4638      	mov	r0, r7
 801143c:	f7fe f806 	bl	800f44c <_printf_float>
 8011440:	1c42      	adds	r2, r0, #1
 8011442:	4606      	mov	r6, r0
 8011444:	d1d6      	bne.n	80113f4 <_svfiprintf_r+0x174>
 8011446:	89ab      	ldrh	r3, [r5, #12]
 8011448:	065b      	lsls	r3, r3, #25
 801144a:	f53f af2d 	bmi.w	80112a8 <_svfiprintf_r+0x28>
 801144e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011450:	b01d      	add	sp, #116	; 0x74
 8011452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011456:	ab03      	add	r3, sp, #12
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	462a      	mov	r2, r5
 801145c:	4b05      	ldr	r3, [pc, #20]	; (8011474 <_svfiprintf_r+0x1f4>)
 801145e:	a904      	add	r1, sp, #16
 8011460:	4638      	mov	r0, r7
 8011462:	f7fe fb47 	bl	800faf4 <_printf_i>
 8011466:	e7eb      	b.n	8011440 <_svfiprintf_r+0x1c0>
 8011468:	080191dc 	.word	0x080191dc
 801146c:	080191e6 	.word	0x080191e6
 8011470:	0800f44d 	.word	0x0800f44d
 8011474:	080111cd 	.word	0x080111cd
 8011478:	080191e2 	.word	0x080191e2

0801147c <_sungetc_r>:
 801147c:	b538      	push	{r3, r4, r5, lr}
 801147e:	1c4b      	adds	r3, r1, #1
 8011480:	4614      	mov	r4, r2
 8011482:	d103      	bne.n	801148c <_sungetc_r+0x10>
 8011484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011488:	4628      	mov	r0, r5
 801148a:	bd38      	pop	{r3, r4, r5, pc}
 801148c:	8993      	ldrh	r3, [r2, #12]
 801148e:	f023 0320 	bic.w	r3, r3, #32
 8011492:	8193      	strh	r3, [r2, #12]
 8011494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011496:	6852      	ldr	r2, [r2, #4]
 8011498:	b2cd      	uxtb	r5, r1
 801149a:	b18b      	cbz	r3, 80114c0 <_sungetc_r+0x44>
 801149c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801149e:	4293      	cmp	r3, r2
 80114a0:	dd08      	ble.n	80114b4 <_sungetc_r+0x38>
 80114a2:	6823      	ldr	r3, [r4, #0]
 80114a4:	1e5a      	subs	r2, r3, #1
 80114a6:	6022      	str	r2, [r4, #0]
 80114a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80114ac:	6863      	ldr	r3, [r4, #4]
 80114ae:	3301      	adds	r3, #1
 80114b0:	6063      	str	r3, [r4, #4]
 80114b2:	e7e9      	b.n	8011488 <_sungetc_r+0xc>
 80114b4:	4621      	mov	r1, r4
 80114b6:	f001 f8bb 	bl	8012630 <__submore>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d0f1      	beq.n	80114a2 <_sungetc_r+0x26>
 80114be:	e7e1      	b.n	8011484 <_sungetc_r+0x8>
 80114c0:	6921      	ldr	r1, [r4, #16]
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	b151      	cbz	r1, 80114dc <_sungetc_r+0x60>
 80114c6:	4299      	cmp	r1, r3
 80114c8:	d208      	bcs.n	80114dc <_sungetc_r+0x60>
 80114ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80114ce:	42a9      	cmp	r1, r5
 80114d0:	d104      	bne.n	80114dc <_sungetc_r+0x60>
 80114d2:	3b01      	subs	r3, #1
 80114d4:	3201      	adds	r2, #1
 80114d6:	6023      	str	r3, [r4, #0]
 80114d8:	6062      	str	r2, [r4, #4]
 80114da:	e7d5      	b.n	8011488 <_sungetc_r+0xc>
 80114dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80114e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e4:	6363      	str	r3, [r4, #52]	; 0x34
 80114e6:	2303      	movs	r3, #3
 80114e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80114ea:	4623      	mov	r3, r4
 80114ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	2301      	movs	r3, #1
 80114f4:	e7dc      	b.n	80114b0 <_sungetc_r+0x34>

080114f6 <__ssrefill_r>:
 80114f6:	b510      	push	{r4, lr}
 80114f8:	460c      	mov	r4, r1
 80114fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80114fc:	b169      	cbz	r1, 801151a <__ssrefill_r+0x24>
 80114fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011502:	4299      	cmp	r1, r3
 8011504:	d001      	beq.n	801150a <__ssrefill_r+0x14>
 8011506:	f7ff fe15 	bl	8011134 <_free_r>
 801150a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801150c:	6063      	str	r3, [r4, #4]
 801150e:	2000      	movs	r0, #0
 8011510:	6360      	str	r0, [r4, #52]	; 0x34
 8011512:	b113      	cbz	r3, 801151a <__ssrefill_r+0x24>
 8011514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011516:	6023      	str	r3, [r4, #0]
 8011518:	bd10      	pop	{r4, pc}
 801151a:	6923      	ldr	r3, [r4, #16]
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	2300      	movs	r3, #0
 8011520:	6063      	str	r3, [r4, #4]
 8011522:	89a3      	ldrh	r3, [r4, #12]
 8011524:	f043 0320 	orr.w	r3, r3, #32
 8011528:	81a3      	strh	r3, [r4, #12]
 801152a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801152e:	e7f3      	b.n	8011518 <__ssrefill_r+0x22>

08011530 <__ssvfiscanf_r>:
 8011530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011534:	460c      	mov	r4, r1
 8011536:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801153a:	2100      	movs	r1, #0
 801153c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011540:	49a6      	ldr	r1, [pc, #664]	; (80117dc <__ssvfiscanf_r+0x2ac>)
 8011542:	91a0      	str	r1, [sp, #640]	; 0x280
 8011544:	f10d 0804 	add.w	r8, sp, #4
 8011548:	49a5      	ldr	r1, [pc, #660]	; (80117e0 <__ssvfiscanf_r+0x2b0>)
 801154a:	4fa6      	ldr	r7, [pc, #664]	; (80117e4 <__ssvfiscanf_r+0x2b4>)
 801154c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80117e8 <__ssvfiscanf_r+0x2b8>
 8011550:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011554:	4606      	mov	r6, r0
 8011556:	91a1      	str	r1, [sp, #644]	; 0x284
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	7813      	ldrb	r3, [r2, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	f000 815a 	beq.w	8011816 <__ssvfiscanf_r+0x2e6>
 8011562:	5cf9      	ldrb	r1, [r7, r3]
 8011564:	f011 0108 	ands.w	r1, r1, #8
 8011568:	f102 0501 	add.w	r5, r2, #1
 801156c:	d019      	beq.n	80115a2 <__ssvfiscanf_r+0x72>
 801156e:	6863      	ldr	r3, [r4, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	dd0f      	ble.n	8011594 <__ssvfiscanf_r+0x64>
 8011574:	6823      	ldr	r3, [r4, #0]
 8011576:	781a      	ldrb	r2, [r3, #0]
 8011578:	5cba      	ldrb	r2, [r7, r2]
 801157a:	0712      	lsls	r2, r2, #28
 801157c:	d401      	bmi.n	8011582 <__ssvfiscanf_r+0x52>
 801157e:	462a      	mov	r2, r5
 8011580:	e7eb      	b.n	801155a <__ssvfiscanf_r+0x2a>
 8011582:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011584:	3201      	adds	r2, #1
 8011586:	9245      	str	r2, [sp, #276]	; 0x114
 8011588:	6862      	ldr	r2, [r4, #4]
 801158a:	3301      	adds	r3, #1
 801158c:	3a01      	subs	r2, #1
 801158e:	6062      	str	r2, [r4, #4]
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	e7ec      	b.n	801156e <__ssvfiscanf_r+0x3e>
 8011594:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011596:	4621      	mov	r1, r4
 8011598:	4630      	mov	r0, r6
 801159a:	4798      	blx	r3
 801159c:	2800      	cmp	r0, #0
 801159e:	d0e9      	beq.n	8011574 <__ssvfiscanf_r+0x44>
 80115a0:	e7ed      	b.n	801157e <__ssvfiscanf_r+0x4e>
 80115a2:	2b25      	cmp	r3, #37	; 0x25
 80115a4:	d012      	beq.n	80115cc <__ssvfiscanf_r+0x9c>
 80115a6:	469a      	mov	sl, r3
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f340 8091 	ble.w	80116d2 <__ssvfiscanf_r+0x1a2>
 80115b0:	6822      	ldr	r2, [r4, #0]
 80115b2:	7813      	ldrb	r3, [r2, #0]
 80115b4:	4553      	cmp	r3, sl
 80115b6:	f040 812e 	bne.w	8011816 <__ssvfiscanf_r+0x2e6>
 80115ba:	6863      	ldr	r3, [r4, #4]
 80115bc:	3b01      	subs	r3, #1
 80115be:	6063      	str	r3, [r4, #4]
 80115c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80115c2:	3201      	adds	r2, #1
 80115c4:	3301      	adds	r3, #1
 80115c6:	6022      	str	r2, [r4, #0]
 80115c8:	9345      	str	r3, [sp, #276]	; 0x114
 80115ca:	e7d8      	b.n	801157e <__ssvfiscanf_r+0x4e>
 80115cc:	9141      	str	r1, [sp, #260]	; 0x104
 80115ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80115d0:	7853      	ldrb	r3, [r2, #1]
 80115d2:	2b2a      	cmp	r3, #42	; 0x2a
 80115d4:	bf02      	ittt	eq
 80115d6:	2310      	moveq	r3, #16
 80115d8:	1c95      	addeq	r5, r2, #2
 80115da:	9341      	streq	r3, [sp, #260]	; 0x104
 80115dc:	220a      	movs	r2, #10
 80115de:	46aa      	mov	sl, r5
 80115e0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80115e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80115e8:	2b09      	cmp	r3, #9
 80115ea:	d91c      	bls.n	8011626 <__ssvfiscanf_r+0xf6>
 80115ec:	487e      	ldr	r0, [pc, #504]	; (80117e8 <__ssvfiscanf_r+0x2b8>)
 80115ee:	2203      	movs	r2, #3
 80115f0:	f7ee fe0e 	bl	8000210 <memchr>
 80115f4:	b138      	cbz	r0, 8011606 <__ssvfiscanf_r+0xd6>
 80115f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80115f8:	eba0 0009 	sub.w	r0, r0, r9
 80115fc:	2301      	movs	r3, #1
 80115fe:	4083      	lsls	r3, r0
 8011600:	4313      	orrs	r3, r2
 8011602:	9341      	str	r3, [sp, #260]	; 0x104
 8011604:	4655      	mov	r5, sl
 8011606:	f815 3b01 	ldrb.w	r3, [r5], #1
 801160a:	2b78      	cmp	r3, #120	; 0x78
 801160c:	d806      	bhi.n	801161c <__ssvfiscanf_r+0xec>
 801160e:	2b57      	cmp	r3, #87	; 0x57
 8011610:	d810      	bhi.n	8011634 <__ssvfiscanf_r+0x104>
 8011612:	2b25      	cmp	r3, #37	; 0x25
 8011614:	d0c7      	beq.n	80115a6 <__ssvfiscanf_r+0x76>
 8011616:	d857      	bhi.n	80116c8 <__ssvfiscanf_r+0x198>
 8011618:	2b00      	cmp	r3, #0
 801161a:	d065      	beq.n	80116e8 <__ssvfiscanf_r+0x1b8>
 801161c:	2303      	movs	r3, #3
 801161e:	9347      	str	r3, [sp, #284]	; 0x11c
 8011620:	230a      	movs	r3, #10
 8011622:	9342      	str	r3, [sp, #264]	; 0x108
 8011624:	e076      	b.n	8011714 <__ssvfiscanf_r+0x1e4>
 8011626:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011628:	fb02 1103 	mla	r1, r2, r3, r1
 801162c:	3930      	subs	r1, #48	; 0x30
 801162e:	9143      	str	r1, [sp, #268]	; 0x10c
 8011630:	4655      	mov	r5, sl
 8011632:	e7d4      	b.n	80115de <__ssvfiscanf_r+0xae>
 8011634:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011638:	2a20      	cmp	r2, #32
 801163a:	d8ef      	bhi.n	801161c <__ssvfiscanf_r+0xec>
 801163c:	a101      	add	r1, pc, #4	; (adr r1, 8011644 <__ssvfiscanf_r+0x114>)
 801163e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011642:	bf00      	nop
 8011644:	080116f7 	.word	0x080116f7
 8011648:	0801161d 	.word	0x0801161d
 801164c:	0801161d 	.word	0x0801161d
 8011650:	08011755 	.word	0x08011755
 8011654:	0801161d 	.word	0x0801161d
 8011658:	0801161d 	.word	0x0801161d
 801165c:	0801161d 	.word	0x0801161d
 8011660:	0801161d 	.word	0x0801161d
 8011664:	0801161d 	.word	0x0801161d
 8011668:	0801161d 	.word	0x0801161d
 801166c:	0801161d 	.word	0x0801161d
 8011670:	0801176b 	.word	0x0801176b
 8011674:	08011751 	.word	0x08011751
 8011678:	080116cf 	.word	0x080116cf
 801167c:	080116cf 	.word	0x080116cf
 8011680:	080116cf 	.word	0x080116cf
 8011684:	0801161d 	.word	0x0801161d
 8011688:	0801170d 	.word	0x0801170d
 801168c:	0801161d 	.word	0x0801161d
 8011690:	0801161d 	.word	0x0801161d
 8011694:	0801161d 	.word	0x0801161d
 8011698:	0801161d 	.word	0x0801161d
 801169c:	0801177b 	.word	0x0801177b
 80116a0:	08011749 	.word	0x08011749
 80116a4:	080116ef 	.word	0x080116ef
 80116a8:	0801161d 	.word	0x0801161d
 80116ac:	0801161d 	.word	0x0801161d
 80116b0:	08011777 	.word	0x08011777
 80116b4:	0801161d 	.word	0x0801161d
 80116b8:	08011751 	.word	0x08011751
 80116bc:	0801161d 	.word	0x0801161d
 80116c0:	0801161d 	.word	0x0801161d
 80116c4:	080116f7 	.word	0x080116f7
 80116c8:	3b45      	subs	r3, #69	; 0x45
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	d8a6      	bhi.n	801161c <__ssvfiscanf_r+0xec>
 80116ce:	2305      	movs	r3, #5
 80116d0:	e01f      	b.n	8011712 <__ssvfiscanf_r+0x1e2>
 80116d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80116d4:	4621      	mov	r1, r4
 80116d6:	4630      	mov	r0, r6
 80116d8:	4798      	blx	r3
 80116da:	2800      	cmp	r0, #0
 80116dc:	f43f af68 	beq.w	80115b0 <__ssvfiscanf_r+0x80>
 80116e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80116e2:	2800      	cmp	r0, #0
 80116e4:	f040 808d 	bne.w	8011802 <__ssvfiscanf_r+0x2d2>
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116ec:	e08f      	b.n	801180e <__ssvfiscanf_r+0x2de>
 80116ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80116f0:	f042 0220 	orr.w	r2, r2, #32
 80116f4:	9241      	str	r2, [sp, #260]	; 0x104
 80116f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80116f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116fc:	9241      	str	r2, [sp, #260]	; 0x104
 80116fe:	2210      	movs	r2, #16
 8011700:	2b6f      	cmp	r3, #111	; 0x6f
 8011702:	9242      	str	r2, [sp, #264]	; 0x108
 8011704:	bf34      	ite	cc
 8011706:	2303      	movcc	r3, #3
 8011708:	2304      	movcs	r3, #4
 801170a:	e002      	b.n	8011712 <__ssvfiscanf_r+0x1e2>
 801170c:	2300      	movs	r3, #0
 801170e:	9342      	str	r3, [sp, #264]	; 0x108
 8011710:	2303      	movs	r3, #3
 8011712:	9347      	str	r3, [sp, #284]	; 0x11c
 8011714:	6863      	ldr	r3, [r4, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	dd3d      	ble.n	8011796 <__ssvfiscanf_r+0x266>
 801171a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801171c:	0659      	lsls	r1, r3, #25
 801171e:	d404      	bmi.n	801172a <__ssvfiscanf_r+0x1fa>
 8011720:	6823      	ldr	r3, [r4, #0]
 8011722:	781a      	ldrb	r2, [r3, #0]
 8011724:	5cba      	ldrb	r2, [r7, r2]
 8011726:	0712      	lsls	r2, r2, #28
 8011728:	d43c      	bmi.n	80117a4 <__ssvfiscanf_r+0x274>
 801172a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801172c:	2b02      	cmp	r3, #2
 801172e:	dc4b      	bgt.n	80117c8 <__ssvfiscanf_r+0x298>
 8011730:	466b      	mov	r3, sp
 8011732:	4622      	mov	r2, r4
 8011734:	a941      	add	r1, sp, #260	; 0x104
 8011736:	4630      	mov	r0, r6
 8011738:	f000 f9b6 	bl	8011aa8 <_scanf_chars>
 801173c:	2801      	cmp	r0, #1
 801173e:	d06a      	beq.n	8011816 <__ssvfiscanf_r+0x2e6>
 8011740:	2802      	cmp	r0, #2
 8011742:	f47f af1c 	bne.w	801157e <__ssvfiscanf_r+0x4e>
 8011746:	e7cb      	b.n	80116e0 <__ssvfiscanf_r+0x1b0>
 8011748:	2308      	movs	r3, #8
 801174a:	9342      	str	r3, [sp, #264]	; 0x108
 801174c:	2304      	movs	r3, #4
 801174e:	e7e0      	b.n	8011712 <__ssvfiscanf_r+0x1e2>
 8011750:	220a      	movs	r2, #10
 8011752:	e7d5      	b.n	8011700 <__ssvfiscanf_r+0x1d0>
 8011754:	4629      	mov	r1, r5
 8011756:	4640      	mov	r0, r8
 8011758:	f000 faf4 	bl	8011d44 <__sccl>
 801175c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801175e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011762:	9341      	str	r3, [sp, #260]	; 0x104
 8011764:	4605      	mov	r5, r0
 8011766:	2301      	movs	r3, #1
 8011768:	e7d3      	b.n	8011712 <__ssvfiscanf_r+0x1e2>
 801176a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011770:	9341      	str	r3, [sp, #260]	; 0x104
 8011772:	2300      	movs	r3, #0
 8011774:	e7cd      	b.n	8011712 <__ssvfiscanf_r+0x1e2>
 8011776:	2302      	movs	r3, #2
 8011778:	e7cb      	b.n	8011712 <__ssvfiscanf_r+0x1e2>
 801177a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801177c:	06c3      	lsls	r3, r0, #27
 801177e:	f53f aefe 	bmi.w	801157e <__ssvfiscanf_r+0x4e>
 8011782:	9b00      	ldr	r3, [sp, #0]
 8011784:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011786:	1d19      	adds	r1, r3, #4
 8011788:	9100      	str	r1, [sp, #0]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	07c0      	lsls	r0, r0, #31
 801178e:	bf4c      	ite	mi
 8011790:	801a      	strhmi	r2, [r3, #0]
 8011792:	601a      	strpl	r2, [r3, #0]
 8011794:	e6f3      	b.n	801157e <__ssvfiscanf_r+0x4e>
 8011796:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011798:	4621      	mov	r1, r4
 801179a:	4630      	mov	r0, r6
 801179c:	4798      	blx	r3
 801179e:	2800      	cmp	r0, #0
 80117a0:	d0bb      	beq.n	801171a <__ssvfiscanf_r+0x1ea>
 80117a2:	e79d      	b.n	80116e0 <__ssvfiscanf_r+0x1b0>
 80117a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80117a6:	3201      	adds	r2, #1
 80117a8:	9245      	str	r2, [sp, #276]	; 0x114
 80117aa:	6862      	ldr	r2, [r4, #4]
 80117ac:	3a01      	subs	r2, #1
 80117ae:	2a00      	cmp	r2, #0
 80117b0:	6062      	str	r2, [r4, #4]
 80117b2:	dd02      	ble.n	80117ba <__ssvfiscanf_r+0x28a>
 80117b4:	3301      	adds	r3, #1
 80117b6:	6023      	str	r3, [r4, #0]
 80117b8:	e7b2      	b.n	8011720 <__ssvfiscanf_r+0x1f0>
 80117ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80117bc:	4621      	mov	r1, r4
 80117be:	4630      	mov	r0, r6
 80117c0:	4798      	blx	r3
 80117c2:	2800      	cmp	r0, #0
 80117c4:	d0ac      	beq.n	8011720 <__ssvfiscanf_r+0x1f0>
 80117c6:	e78b      	b.n	80116e0 <__ssvfiscanf_r+0x1b0>
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	dc0f      	bgt.n	80117ec <__ssvfiscanf_r+0x2bc>
 80117cc:	466b      	mov	r3, sp
 80117ce:	4622      	mov	r2, r4
 80117d0:	a941      	add	r1, sp, #260	; 0x104
 80117d2:	4630      	mov	r0, r6
 80117d4:	f000 f9c2 	bl	8011b5c <_scanf_i>
 80117d8:	e7b0      	b.n	801173c <__ssvfiscanf_r+0x20c>
 80117da:	bf00      	nop
 80117dc:	0801147d 	.word	0x0801147d
 80117e0:	080114f7 	.word	0x080114f7
 80117e4:	08019013 	.word	0x08019013
 80117e8:	080191e2 	.word	0x080191e2
 80117ec:	4b0b      	ldr	r3, [pc, #44]	; (801181c <__ssvfiscanf_r+0x2ec>)
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f43f aec5 	beq.w	801157e <__ssvfiscanf_r+0x4e>
 80117f4:	466b      	mov	r3, sp
 80117f6:	4622      	mov	r2, r4
 80117f8:	a941      	add	r1, sp, #260	; 0x104
 80117fa:	4630      	mov	r0, r6
 80117fc:	f3af 8000 	nop.w
 8011800:	e79c      	b.n	801173c <__ssvfiscanf_r+0x20c>
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011808:	bf18      	it	ne
 801180a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801180e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011816:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011818:	e7f9      	b.n	801180e <__ssvfiscanf_r+0x2de>
 801181a:	bf00      	nop
 801181c:	00000000 	.word	0x00000000

08011820 <__sfputc_r>:
 8011820:	6893      	ldr	r3, [r2, #8]
 8011822:	3b01      	subs	r3, #1
 8011824:	2b00      	cmp	r3, #0
 8011826:	b410      	push	{r4}
 8011828:	6093      	str	r3, [r2, #8]
 801182a:	da08      	bge.n	801183e <__sfputc_r+0x1e>
 801182c:	6994      	ldr	r4, [r2, #24]
 801182e:	42a3      	cmp	r3, r4
 8011830:	db01      	blt.n	8011836 <__sfputc_r+0x16>
 8011832:	290a      	cmp	r1, #10
 8011834:	d103      	bne.n	801183e <__sfputc_r+0x1e>
 8011836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801183a:	f000 bfd7 	b.w	80127ec <__swbuf_r>
 801183e:	6813      	ldr	r3, [r2, #0]
 8011840:	1c58      	adds	r0, r3, #1
 8011842:	6010      	str	r0, [r2, #0]
 8011844:	7019      	strb	r1, [r3, #0]
 8011846:	4608      	mov	r0, r1
 8011848:	f85d 4b04 	ldr.w	r4, [sp], #4
 801184c:	4770      	bx	lr

0801184e <__sfputs_r>:
 801184e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011850:	4606      	mov	r6, r0
 8011852:	460f      	mov	r7, r1
 8011854:	4614      	mov	r4, r2
 8011856:	18d5      	adds	r5, r2, r3
 8011858:	42ac      	cmp	r4, r5
 801185a:	d101      	bne.n	8011860 <__sfputs_r+0x12>
 801185c:	2000      	movs	r0, #0
 801185e:	e007      	b.n	8011870 <__sfputs_r+0x22>
 8011860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011864:	463a      	mov	r2, r7
 8011866:	4630      	mov	r0, r6
 8011868:	f7ff ffda 	bl	8011820 <__sfputc_r>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d1f3      	bne.n	8011858 <__sfputs_r+0xa>
 8011870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011874 <_vfiprintf_r>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	460d      	mov	r5, r1
 801187a:	b09d      	sub	sp, #116	; 0x74
 801187c:	4614      	mov	r4, r2
 801187e:	4698      	mov	r8, r3
 8011880:	4606      	mov	r6, r0
 8011882:	b118      	cbz	r0, 801188c <_vfiprintf_r+0x18>
 8011884:	6a03      	ldr	r3, [r0, #32]
 8011886:	b90b      	cbnz	r3, 801188c <_vfiprintf_r+0x18>
 8011888:	f7fe fbb4 	bl	800fff4 <__sinit>
 801188c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801188e:	07d9      	lsls	r1, r3, #31
 8011890:	d405      	bmi.n	801189e <_vfiprintf_r+0x2a>
 8011892:	89ab      	ldrh	r3, [r5, #12]
 8011894:	059a      	lsls	r2, r3, #22
 8011896:	d402      	bmi.n	801189e <_vfiprintf_r+0x2a>
 8011898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801189a:	f7fe fd98 	bl	80103ce <__retarget_lock_acquire_recursive>
 801189e:	89ab      	ldrh	r3, [r5, #12]
 80118a0:	071b      	lsls	r3, r3, #28
 80118a2:	d501      	bpl.n	80118a8 <_vfiprintf_r+0x34>
 80118a4:	692b      	ldr	r3, [r5, #16]
 80118a6:	b99b      	cbnz	r3, 80118d0 <_vfiprintf_r+0x5c>
 80118a8:	4629      	mov	r1, r5
 80118aa:	4630      	mov	r0, r6
 80118ac:	f000 ffdc 	bl	8012868 <__swsetup_r>
 80118b0:	b170      	cbz	r0, 80118d0 <_vfiprintf_r+0x5c>
 80118b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118b4:	07dc      	lsls	r4, r3, #31
 80118b6:	d504      	bpl.n	80118c2 <_vfiprintf_r+0x4e>
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118bc:	b01d      	add	sp, #116	; 0x74
 80118be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c2:	89ab      	ldrh	r3, [r5, #12]
 80118c4:	0598      	lsls	r0, r3, #22
 80118c6:	d4f7      	bmi.n	80118b8 <_vfiprintf_r+0x44>
 80118c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118ca:	f7fe fd81 	bl	80103d0 <__retarget_lock_release_recursive>
 80118ce:	e7f3      	b.n	80118b8 <_vfiprintf_r+0x44>
 80118d0:	2300      	movs	r3, #0
 80118d2:	9309      	str	r3, [sp, #36]	; 0x24
 80118d4:	2320      	movs	r3, #32
 80118d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118da:	f8cd 800c 	str.w	r8, [sp, #12]
 80118de:	2330      	movs	r3, #48	; 0x30
 80118e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011a94 <_vfiprintf_r+0x220>
 80118e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118e8:	f04f 0901 	mov.w	r9, #1
 80118ec:	4623      	mov	r3, r4
 80118ee:	469a      	mov	sl, r3
 80118f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118f4:	b10a      	cbz	r2, 80118fa <_vfiprintf_r+0x86>
 80118f6:	2a25      	cmp	r2, #37	; 0x25
 80118f8:	d1f9      	bne.n	80118ee <_vfiprintf_r+0x7a>
 80118fa:	ebba 0b04 	subs.w	fp, sl, r4
 80118fe:	d00b      	beq.n	8011918 <_vfiprintf_r+0xa4>
 8011900:	465b      	mov	r3, fp
 8011902:	4622      	mov	r2, r4
 8011904:	4629      	mov	r1, r5
 8011906:	4630      	mov	r0, r6
 8011908:	f7ff ffa1 	bl	801184e <__sfputs_r>
 801190c:	3001      	adds	r0, #1
 801190e:	f000 80a9 	beq.w	8011a64 <_vfiprintf_r+0x1f0>
 8011912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011914:	445a      	add	r2, fp
 8011916:	9209      	str	r2, [sp, #36]	; 0x24
 8011918:	f89a 3000 	ldrb.w	r3, [sl]
 801191c:	2b00      	cmp	r3, #0
 801191e:	f000 80a1 	beq.w	8011a64 <_vfiprintf_r+0x1f0>
 8011922:	2300      	movs	r3, #0
 8011924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801192c:	f10a 0a01 	add.w	sl, sl, #1
 8011930:	9304      	str	r3, [sp, #16]
 8011932:	9307      	str	r3, [sp, #28]
 8011934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011938:	931a      	str	r3, [sp, #104]	; 0x68
 801193a:	4654      	mov	r4, sl
 801193c:	2205      	movs	r2, #5
 801193e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011942:	4854      	ldr	r0, [pc, #336]	; (8011a94 <_vfiprintf_r+0x220>)
 8011944:	f7ee fc64 	bl	8000210 <memchr>
 8011948:	9a04      	ldr	r2, [sp, #16]
 801194a:	b9d8      	cbnz	r0, 8011984 <_vfiprintf_r+0x110>
 801194c:	06d1      	lsls	r1, r2, #27
 801194e:	bf44      	itt	mi
 8011950:	2320      	movmi	r3, #32
 8011952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011956:	0713      	lsls	r3, r2, #28
 8011958:	bf44      	itt	mi
 801195a:	232b      	movmi	r3, #43	; 0x2b
 801195c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011960:	f89a 3000 	ldrb.w	r3, [sl]
 8011964:	2b2a      	cmp	r3, #42	; 0x2a
 8011966:	d015      	beq.n	8011994 <_vfiprintf_r+0x120>
 8011968:	9a07      	ldr	r2, [sp, #28]
 801196a:	4654      	mov	r4, sl
 801196c:	2000      	movs	r0, #0
 801196e:	f04f 0c0a 	mov.w	ip, #10
 8011972:	4621      	mov	r1, r4
 8011974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011978:	3b30      	subs	r3, #48	; 0x30
 801197a:	2b09      	cmp	r3, #9
 801197c:	d94d      	bls.n	8011a1a <_vfiprintf_r+0x1a6>
 801197e:	b1b0      	cbz	r0, 80119ae <_vfiprintf_r+0x13a>
 8011980:	9207      	str	r2, [sp, #28]
 8011982:	e014      	b.n	80119ae <_vfiprintf_r+0x13a>
 8011984:	eba0 0308 	sub.w	r3, r0, r8
 8011988:	fa09 f303 	lsl.w	r3, r9, r3
 801198c:	4313      	orrs	r3, r2
 801198e:	9304      	str	r3, [sp, #16]
 8011990:	46a2      	mov	sl, r4
 8011992:	e7d2      	b.n	801193a <_vfiprintf_r+0xc6>
 8011994:	9b03      	ldr	r3, [sp, #12]
 8011996:	1d19      	adds	r1, r3, #4
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	9103      	str	r1, [sp, #12]
 801199c:	2b00      	cmp	r3, #0
 801199e:	bfbb      	ittet	lt
 80119a0:	425b      	neglt	r3, r3
 80119a2:	f042 0202 	orrlt.w	r2, r2, #2
 80119a6:	9307      	strge	r3, [sp, #28]
 80119a8:	9307      	strlt	r3, [sp, #28]
 80119aa:	bfb8      	it	lt
 80119ac:	9204      	strlt	r2, [sp, #16]
 80119ae:	7823      	ldrb	r3, [r4, #0]
 80119b0:	2b2e      	cmp	r3, #46	; 0x2e
 80119b2:	d10c      	bne.n	80119ce <_vfiprintf_r+0x15a>
 80119b4:	7863      	ldrb	r3, [r4, #1]
 80119b6:	2b2a      	cmp	r3, #42	; 0x2a
 80119b8:	d134      	bne.n	8011a24 <_vfiprintf_r+0x1b0>
 80119ba:	9b03      	ldr	r3, [sp, #12]
 80119bc:	1d1a      	adds	r2, r3, #4
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	9203      	str	r2, [sp, #12]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	bfb8      	it	lt
 80119c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80119ca:	3402      	adds	r4, #2
 80119cc:	9305      	str	r3, [sp, #20]
 80119ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011aa4 <_vfiprintf_r+0x230>
 80119d2:	7821      	ldrb	r1, [r4, #0]
 80119d4:	2203      	movs	r2, #3
 80119d6:	4650      	mov	r0, sl
 80119d8:	f7ee fc1a 	bl	8000210 <memchr>
 80119dc:	b138      	cbz	r0, 80119ee <_vfiprintf_r+0x17a>
 80119de:	9b04      	ldr	r3, [sp, #16]
 80119e0:	eba0 000a 	sub.w	r0, r0, sl
 80119e4:	2240      	movs	r2, #64	; 0x40
 80119e6:	4082      	lsls	r2, r0
 80119e8:	4313      	orrs	r3, r2
 80119ea:	3401      	adds	r4, #1
 80119ec:	9304      	str	r3, [sp, #16]
 80119ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119f2:	4829      	ldr	r0, [pc, #164]	; (8011a98 <_vfiprintf_r+0x224>)
 80119f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119f8:	2206      	movs	r2, #6
 80119fa:	f7ee fc09 	bl	8000210 <memchr>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d03f      	beq.n	8011a82 <_vfiprintf_r+0x20e>
 8011a02:	4b26      	ldr	r3, [pc, #152]	; (8011a9c <_vfiprintf_r+0x228>)
 8011a04:	bb1b      	cbnz	r3, 8011a4e <_vfiprintf_r+0x1da>
 8011a06:	9b03      	ldr	r3, [sp, #12]
 8011a08:	3307      	adds	r3, #7
 8011a0a:	f023 0307 	bic.w	r3, r3, #7
 8011a0e:	3308      	adds	r3, #8
 8011a10:	9303      	str	r3, [sp, #12]
 8011a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a14:	443b      	add	r3, r7
 8011a16:	9309      	str	r3, [sp, #36]	; 0x24
 8011a18:	e768      	b.n	80118ec <_vfiprintf_r+0x78>
 8011a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a1e:	460c      	mov	r4, r1
 8011a20:	2001      	movs	r0, #1
 8011a22:	e7a6      	b.n	8011972 <_vfiprintf_r+0xfe>
 8011a24:	2300      	movs	r3, #0
 8011a26:	3401      	adds	r4, #1
 8011a28:	9305      	str	r3, [sp, #20]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	f04f 0c0a 	mov.w	ip, #10
 8011a30:	4620      	mov	r0, r4
 8011a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a36:	3a30      	subs	r2, #48	; 0x30
 8011a38:	2a09      	cmp	r2, #9
 8011a3a:	d903      	bls.n	8011a44 <_vfiprintf_r+0x1d0>
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d0c6      	beq.n	80119ce <_vfiprintf_r+0x15a>
 8011a40:	9105      	str	r1, [sp, #20]
 8011a42:	e7c4      	b.n	80119ce <_vfiprintf_r+0x15a>
 8011a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a48:	4604      	mov	r4, r0
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e7f0      	b.n	8011a30 <_vfiprintf_r+0x1bc>
 8011a4e:	ab03      	add	r3, sp, #12
 8011a50:	9300      	str	r3, [sp, #0]
 8011a52:	462a      	mov	r2, r5
 8011a54:	4b12      	ldr	r3, [pc, #72]	; (8011aa0 <_vfiprintf_r+0x22c>)
 8011a56:	a904      	add	r1, sp, #16
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f7fd fcf7 	bl	800f44c <_printf_float>
 8011a5e:	4607      	mov	r7, r0
 8011a60:	1c78      	adds	r0, r7, #1
 8011a62:	d1d6      	bne.n	8011a12 <_vfiprintf_r+0x19e>
 8011a64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a66:	07d9      	lsls	r1, r3, #31
 8011a68:	d405      	bmi.n	8011a76 <_vfiprintf_r+0x202>
 8011a6a:	89ab      	ldrh	r3, [r5, #12]
 8011a6c:	059a      	lsls	r2, r3, #22
 8011a6e:	d402      	bmi.n	8011a76 <_vfiprintf_r+0x202>
 8011a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a72:	f7fe fcad 	bl	80103d0 <__retarget_lock_release_recursive>
 8011a76:	89ab      	ldrh	r3, [r5, #12]
 8011a78:	065b      	lsls	r3, r3, #25
 8011a7a:	f53f af1d 	bmi.w	80118b8 <_vfiprintf_r+0x44>
 8011a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a80:	e71c      	b.n	80118bc <_vfiprintf_r+0x48>
 8011a82:	ab03      	add	r3, sp, #12
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	462a      	mov	r2, r5
 8011a88:	4b05      	ldr	r3, [pc, #20]	; (8011aa0 <_vfiprintf_r+0x22c>)
 8011a8a:	a904      	add	r1, sp, #16
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f7fe f831 	bl	800faf4 <_printf_i>
 8011a92:	e7e4      	b.n	8011a5e <_vfiprintf_r+0x1ea>
 8011a94:	080191dc 	.word	0x080191dc
 8011a98:	080191e6 	.word	0x080191e6
 8011a9c:	0800f44d 	.word	0x0800f44d
 8011aa0:	0801184f 	.word	0x0801184f
 8011aa4:	080191e2 	.word	0x080191e2

08011aa8 <_scanf_chars>:
 8011aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aac:	4615      	mov	r5, r2
 8011aae:	688a      	ldr	r2, [r1, #8]
 8011ab0:	4680      	mov	r8, r0
 8011ab2:	460c      	mov	r4, r1
 8011ab4:	b932      	cbnz	r2, 8011ac4 <_scanf_chars+0x1c>
 8011ab6:	698a      	ldr	r2, [r1, #24]
 8011ab8:	2a00      	cmp	r2, #0
 8011aba:	bf0c      	ite	eq
 8011abc:	2201      	moveq	r2, #1
 8011abe:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8011ac2:	608a      	str	r2, [r1, #8]
 8011ac4:	6822      	ldr	r2, [r4, #0]
 8011ac6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011b58 <_scanf_chars+0xb0>
 8011aca:	06d1      	lsls	r1, r2, #27
 8011acc:	bf5f      	itttt	pl
 8011ace:	681a      	ldrpl	r2, [r3, #0]
 8011ad0:	1d11      	addpl	r1, r2, #4
 8011ad2:	6019      	strpl	r1, [r3, #0]
 8011ad4:	6816      	ldrpl	r6, [r2, #0]
 8011ad6:	2700      	movs	r7, #0
 8011ad8:	69a0      	ldr	r0, [r4, #24]
 8011ada:	b188      	cbz	r0, 8011b00 <_scanf_chars+0x58>
 8011adc:	2801      	cmp	r0, #1
 8011ade:	d107      	bne.n	8011af0 <_scanf_chars+0x48>
 8011ae0:	682a      	ldr	r2, [r5, #0]
 8011ae2:	7811      	ldrb	r1, [r2, #0]
 8011ae4:	6962      	ldr	r2, [r4, #20]
 8011ae6:	5c52      	ldrb	r2, [r2, r1]
 8011ae8:	b952      	cbnz	r2, 8011b00 <_scanf_chars+0x58>
 8011aea:	2f00      	cmp	r7, #0
 8011aec:	d031      	beq.n	8011b52 <_scanf_chars+0xaa>
 8011aee:	e022      	b.n	8011b36 <_scanf_chars+0x8e>
 8011af0:	2802      	cmp	r0, #2
 8011af2:	d120      	bne.n	8011b36 <_scanf_chars+0x8e>
 8011af4:	682b      	ldr	r3, [r5, #0]
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011afc:	071b      	lsls	r3, r3, #28
 8011afe:	d41a      	bmi.n	8011b36 <_scanf_chars+0x8e>
 8011b00:	6823      	ldr	r3, [r4, #0]
 8011b02:	06da      	lsls	r2, r3, #27
 8011b04:	bf5e      	ittt	pl
 8011b06:	682b      	ldrpl	r3, [r5, #0]
 8011b08:	781b      	ldrbpl	r3, [r3, #0]
 8011b0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011b0e:	682a      	ldr	r2, [r5, #0]
 8011b10:	686b      	ldr	r3, [r5, #4]
 8011b12:	3201      	adds	r2, #1
 8011b14:	602a      	str	r2, [r5, #0]
 8011b16:	68a2      	ldr	r2, [r4, #8]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	3a01      	subs	r2, #1
 8011b1c:	606b      	str	r3, [r5, #4]
 8011b1e:	3701      	adds	r7, #1
 8011b20:	60a2      	str	r2, [r4, #8]
 8011b22:	b142      	cbz	r2, 8011b36 <_scanf_chars+0x8e>
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dcd7      	bgt.n	8011ad8 <_scanf_chars+0x30>
 8011b28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4640      	mov	r0, r8
 8011b30:	4798      	blx	r3
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d0d0      	beq.n	8011ad8 <_scanf_chars+0x30>
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	f013 0310 	ands.w	r3, r3, #16
 8011b3c:	d105      	bne.n	8011b4a <_scanf_chars+0xa2>
 8011b3e:	68e2      	ldr	r2, [r4, #12]
 8011b40:	3201      	adds	r2, #1
 8011b42:	60e2      	str	r2, [r4, #12]
 8011b44:	69a2      	ldr	r2, [r4, #24]
 8011b46:	b102      	cbz	r2, 8011b4a <_scanf_chars+0xa2>
 8011b48:	7033      	strb	r3, [r6, #0]
 8011b4a:	6923      	ldr	r3, [r4, #16]
 8011b4c:	443b      	add	r3, r7
 8011b4e:	6123      	str	r3, [r4, #16]
 8011b50:	2000      	movs	r0, #0
 8011b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b56:	bf00      	nop
 8011b58:	08019013 	.word	0x08019013

08011b5c <_scanf_i>:
 8011b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b60:	4698      	mov	r8, r3
 8011b62:	4b74      	ldr	r3, [pc, #464]	; (8011d34 <_scanf_i+0x1d8>)
 8011b64:	460c      	mov	r4, r1
 8011b66:	4682      	mov	sl, r0
 8011b68:	4616      	mov	r6, r2
 8011b6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b6e:	b087      	sub	sp, #28
 8011b70:	ab03      	add	r3, sp, #12
 8011b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011b76:	4b70      	ldr	r3, [pc, #448]	; (8011d38 <_scanf_i+0x1dc>)
 8011b78:	69a1      	ldr	r1, [r4, #24]
 8011b7a:	4a70      	ldr	r2, [pc, #448]	; (8011d3c <_scanf_i+0x1e0>)
 8011b7c:	2903      	cmp	r1, #3
 8011b7e:	bf18      	it	ne
 8011b80:	461a      	movne	r2, r3
 8011b82:	68a3      	ldr	r3, [r4, #8]
 8011b84:	9201      	str	r2, [sp, #4]
 8011b86:	1e5a      	subs	r2, r3, #1
 8011b88:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011b8c:	bf88      	it	hi
 8011b8e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011b92:	4627      	mov	r7, r4
 8011b94:	bf82      	ittt	hi
 8011b96:	eb03 0905 	addhi.w	r9, r3, r5
 8011b9a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011b9e:	60a3      	strhi	r3, [r4, #8]
 8011ba0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011ba4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011ba8:	bf98      	it	ls
 8011baa:	f04f 0900 	movls.w	r9, #0
 8011bae:	6023      	str	r3, [r4, #0]
 8011bb0:	463d      	mov	r5, r7
 8011bb2:	f04f 0b00 	mov.w	fp, #0
 8011bb6:	6831      	ldr	r1, [r6, #0]
 8011bb8:	ab03      	add	r3, sp, #12
 8011bba:	7809      	ldrb	r1, [r1, #0]
 8011bbc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011bc0:	2202      	movs	r2, #2
 8011bc2:	f7ee fb25 	bl	8000210 <memchr>
 8011bc6:	b328      	cbz	r0, 8011c14 <_scanf_i+0xb8>
 8011bc8:	f1bb 0f01 	cmp.w	fp, #1
 8011bcc:	d159      	bne.n	8011c82 <_scanf_i+0x126>
 8011bce:	6862      	ldr	r2, [r4, #4]
 8011bd0:	b92a      	cbnz	r2, 8011bde <_scanf_i+0x82>
 8011bd2:	6822      	ldr	r2, [r4, #0]
 8011bd4:	2308      	movs	r3, #8
 8011bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011bda:	6063      	str	r3, [r4, #4]
 8011bdc:	6022      	str	r2, [r4, #0]
 8011bde:	6822      	ldr	r2, [r4, #0]
 8011be0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011be4:	6022      	str	r2, [r4, #0]
 8011be6:	68a2      	ldr	r2, [r4, #8]
 8011be8:	1e51      	subs	r1, r2, #1
 8011bea:	60a1      	str	r1, [r4, #8]
 8011bec:	b192      	cbz	r2, 8011c14 <_scanf_i+0xb8>
 8011bee:	6832      	ldr	r2, [r6, #0]
 8011bf0:	1c51      	adds	r1, r2, #1
 8011bf2:	6031      	str	r1, [r6, #0]
 8011bf4:	7812      	ldrb	r2, [r2, #0]
 8011bf6:	f805 2b01 	strb.w	r2, [r5], #1
 8011bfa:	6872      	ldr	r2, [r6, #4]
 8011bfc:	3a01      	subs	r2, #1
 8011bfe:	2a00      	cmp	r2, #0
 8011c00:	6072      	str	r2, [r6, #4]
 8011c02:	dc07      	bgt.n	8011c14 <_scanf_i+0xb8>
 8011c04:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011c08:	4631      	mov	r1, r6
 8011c0a:	4650      	mov	r0, sl
 8011c0c:	4790      	blx	r2
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	f040 8085 	bne.w	8011d1e <_scanf_i+0x1c2>
 8011c14:	f10b 0b01 	add.w	fp, fp, #1
 8011c18:	f1bb 0f03 	cmp.w	fp, #3
 8011c1c:	d1cb      	bne.n	8011bb6 <_scanf_i+0x5a>
 8011c1e:	6863      	ldr	r3, [r4, #4]
 8011c20:	b90b      	cbnz	r3, 8011c26 <_scanf_i+0xca>
 8011c22:	230a      	movs	r3, #10
 8011c24:	6063      	str	r3, [r4, #4]
 8011c26:	6863      	ldr	r3, [r4, #4]
 8011c28:	4945      	ldr	r1, [pc, #276]	; (8011d40 <_scanf_i+0x1e4>)
 8011c2a:	6960      	ldr	r0, [r4, #20]
 8011c2c:	1ac9      	subs	r1, r1, r3
 8011c2e:	f000 f889 	bl	8011d44 <__sccl>
 8011c32:	f04f 0b00 	mov.w	fp, #0
 8011c36:	68a3      	ldr	r3, [r4, #8]
 8011c38:	6822      	ldr	r2, [r4, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d03d      	beq.n	8011cba <_scanf_i+0x15e>
 8011c3e:	6831      	ldr	r1, [r6, #0]
 8011c40:	6960      	ldr	r0, [r4, #20]
 8011c42:	f891 c000 	ldrb.w	ip, [r1]
 8011c46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d035      	beq.n	8011cba <_scanf_i+0x15e>
 8011c4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011c52:	d124      	bne.n	8011c9e <_scanf_i+0x142>
 8011c54:	0510      	lsls	r0, r2, #20
 8011c56:	d522      	bpl.n	8011c9e <_scanf_i+0x142>
 8011c58:	f10b 0b01 	add.w	fp, fp, #1
 8011c5c:	f1b9 0f00 	cmp.w	r9, #0
 8011c60:	d003      	beq.n	8011c6a <_scanf_i+0x10e>
 8011c62:	3301      	adds	r3, #1
 8011c64:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011c68:	60a3      	str	r3, [r4, #8]
 8011c6a:	6873      	ldr	r3, [r6, #4]
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	6073      	str	r3, [r6, #4]
 8011c72:	dd1b      	ble.n	8011cac <_scanf_i+0x150>
 8011c74:	6833      	ldr	r3, [r6, #0]
 8011c76:	3301      	adds	r3, #1
 8011c78:	6033      	str	r3, [r6, #0]
 8011c7a:	68a3      	ldr	r3, [r4, #8]
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	60a3      	str	r3, [r4, #8]
 8011c80:	e7d9      	b.n	8011c36 <_scanf_i+0xda>
 8011c82:	f1bb 0f02 	cmp.w	fp, #2
 8011c86:	d1ae      	bne.n	8011be6 <_scanf_i+0x8a>
 8011c88:	6822      	ldr	r2, [r4, #0]
 8011c8a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011c8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011c92:	d1bf      	bne.n	8011c14 <_scanf_i+0xb8>
 8011c94:	2310      	movs	r3, #16
 8011c96:	6063      	str	r3, [r4, #4]
 8011c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011c9c:	e7a2      	b.n	8011be4 <_scanf_i+0x88>
 8011c9e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011ca2:	6022      	str	r2, [r4, #0]
 8011ca4:	780b      	ldrb	r3, [r1, #0]
 8011ca6:	f805 3b01 	strb.w	r3, [r5], #1
 8011caa:	e7de      	b.n	8011c6a <_scanf_i+0x10e>
 8011cac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011cb0:	4631      	mov	r1, r6
 8011cb2:	4650      	mov	r0, sl
 8011cb4:	4798      	blx	r3
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d0df      	beq.n	8011c7a <_scanf_i+0x11e>
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	05d9      	lsls	r1, r3, #23
 8011cbe:	d50d      	bpl.n	8011cdc <_scanf_i+0x180>
 8011cc0:	42bd      	cmp	r5, r7
 8011cc2:	d909      	bls.n	8011cd8 <_scanf_i+0x17c>
 8011cc4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ccc:	4632      	mov	r2, r6
 8011cce:	4650      	mov	r0, sl
 8011cd0:	4798      	blx	r3
 8011cd2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8011cd6:	464d      	mov	r5, r9
 8011cd8:	42bd      	cmp	r5, r7
 8011cda:	d028      	beq.n	8011d2e <_scanf_i+0x1d2>
 8011cdc:	6822      	ldr	r2, [r4, #0]
 8011cde:	f012 0210 	ands.w	r2, r2, #16
 8011ce2:	d113      	bne.n	8011d0c <_scanf_i+0x1b0>
 8011ce4:	702a      	strb	r2, [r5, #0]
 8011ce6:	6863      	ldr	r3, [r4, #4]
 8011ce8:	9e01      	ldr	r6, [sp, #4]
 8011cea:	4639      	mov	r1, r7
 8011cec:	4650      	mov	r0, sl
 8011cee:	47b0      	blx	r6
 8011cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8011cf4:	6821      	ldr	r1, [r4, #0]
 8011cf6:	1d1a      	adds	r2, r3, #4
 8011cf8:	f8c8 2000 	str.w	r2, [r8]
 8011cfc:	f011 0f20 	tst.w	r1, #32
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	d00f      	beq.n	8011d24 <_scanf_i+0x1c8>
 8011d04:	6018      	str	r0, [r3, #0]
 8011d06:	68e3      	ldr	r3, [r4, #12]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	60e3      	str	r3, [r4, #12]
 8011d0c:	6923      	ldr	r3, [r4, #16]
 8011d0e:	1bed      	subs	r5, r5, r7
 8011d10:	445d      	add	r5, fp
 8011d12:	442b      	add	r3, r5
 8011d14:	6123      	str	r3, [r4, #16]
 8011d16:	2000      	movs	r0, #0
 8011d18:	b007      	add	sp, #28
 8011d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1e:	f04f 0b00 	mov.w	fp, #0
 8011d22:	e7ca      	b.n	8011cba <_scanf_i+0x15e>
 8011d24:	07ca      	lsls	r2, r1, #31
 8011d26:	bf4c      	ite	mi
 8011d28:	8018      	strhmi	r0, [r3, #0]
 8011d2a:	6018      	strpl	r0, [r3, #0]
 8011d2c:	e7eb      	b.n	8011d06 <_scanf_i+0x1aa>
 8011d2e:	2001      	movs	r0, #1
 8011d30:	e7f2      	b.n	8011d18 <_scanf_i+0x1bc>
 8011d32:	bf00      	nop
 8011d34:	08013f5c 	.word	0x08013f5c
 8011d38:	080127e9 	.word	0x080127e9
 8011d3c:	08010129 	.word	0x08010129
 8011d40:	080191fd 	.word	0x080191fd

08011d44 <__sccl>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	780b      	ldrb	r3, [r1, #0]
 8011d48:	4604      	mov	r4, r0
 8011d4a:	2b5e      	cmp	r3, #94	; 0x5e
 8011d4c:	bf0b      	itete	eq
 8011d4e:	784b      	ldrbeq	r3, [r1, #1]
 8011d50:	1c4a      	addne	r2, r1, #1
 8011d52:	1c8a      	addeq	r2, r1, #2
 8011d54:	2100      	movne	r1, #0
 8011d56:	bf08      	it	eq
 8011d58:	2101      	moveq	r1, #1
 8011d5a:	3801      	subs	r0, #1
 8011d5c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011d60:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011d64:	42a8      	cmp	r0, r5
 8011d66:	d1fb      	bne.n	8011d60 <__sccl+0x1c>
 8011d68:	b90b      	cbnz	r3, 8011d6e <__sccl+0x2a>
 8011d6a:	1e50      	subs	r0, r2, #1
 8011d6c:	bd70      	pop	{r4, r5, r6, pc}
 8011d6e:	f081 0101 	eor.w	r1, r1, #1
 8011d72:	54e1      	strb	r1, [r4, r3]
 8011d74:	4610      	mov	r0, r2
 8011d76:	4602      	mov	r2, r0
 8011d78:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011d7c:	2d2d      	cmp	r5, #45	; 0x2d
 8011d7e:	d005      	beq.n	8011d8c <__sccl+0x48>
 8011d80:	2d5d      	cmp	r5, #93	; 0x5d
 8011d82:	d016      	beq.n	8011db2 <__sccl+0x6e>
 8011d84:	2d00      	cmp	r5, #0
 8011d86:	d0f1      	beq.n	8011d6c <__sccl+0x28>
 8011d88:	462b      	mov	r3, r5
 8011d8a:	e7f2      	b.n	8011d72 <__sccl+0x2e>
 8011d8c:	7846      	ldrb	r6, [r0, #1]
 8011d8e:	2e5d      	cmp	r6, #93	; 0x5d
 8011d90:	d0fa      	beq.n	8011d88 <__sccl+0x44>
 8011d92:	42b3      	cmp	r3, r6
 8011d94:	dcf8      	bgt.n	8011d88 <__sccl+0x44>
 8011d96:	3002      	adds	r0, #2
 8011d98:	461a      	mov	r2, r3
 8011d9a:	3201      	adds	r2, #1
 8011d9c:	4296      	cmp	r6, r2
 8011d9e:	54a1      	strb	r1, [r4, r2]
 8011da0:	dcfb      	bgt.n	8011d9a <__sccl+0x56>
 8011da2:	1af2      	subs	r2, r6, r3
 8011da4:	3a01      	subs	r2, #1
 8011da6:	1c5d      	adds	r5, r3, #1
 8011da8:	42b3      	cmp	r3, r6
 8011daa:	bfa8      	it	ge
 8011dac:	2200      	movge	r2, #0
 8011dae:	18ab      	adds	r3, r5, r2
 8011db0:	e7e1      	b.n	8011d76 <__sccl+0x32>
 8011db2:	4610      	mov	r0, r2
 8011db4:	e7da      	b.n	8011d6c <__sccl+0x28>
	...

08011db8 <__sflush_r>:
 8011db8:	898a      	ldrh	r2, [r1, #12]
 8011dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	0710      	lsls	r0, r2, #28
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	d458      	bmi.n	8011e78 <__sflush_r+0xc0>
 8011dc6:	684b      	ldr	r3, [r1, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	dc05      	bgt.n	8011dd8 <__sflush_r+0x20>
 8011dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	dc02      	bgt.n	8011dd8 <__sflush_r+0x20>
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dda:	2e00      	cmp	r6, #0
 8011ddc:	d0f9      	beq.n	8011dd2 <__sflush_r+0x1a>
 8011dde:	2300      	movs	r3, #0
 8011de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011de4:	682f      	ldr	r7, [r5, #0]
 8011de6:	6a21      	ldr	r1, [r4, #32]
 8011de8:	602b      	str	r3, [r5, #0]
 8011dea:	d032      	beq.n	8011e52 <__sflush_r+0x9a>
 8011dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	075a      	lsls	r2, r3, #29
 8011df2:	d505      	bpl.n	8011e00 <__sflush_r+0x48>
 8011df4:	6863      	ldr	r3, [r4, #4]
 8011df6:	1ac0      	subs	r0, r0, r3
 8011df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dfa:	b10b      	cbz	r3, 8011e00 <__sflush_r+0x48>
 8011dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dfe:	1ac0      	subs	r0, r0, r3
 8011e00:	2300      	movs	r3, #0
 8011e02:	4602      	mov	r2, r0
 8011e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e06:	6a21      	ldr	r1, [r4, #32]
 8011e08:	4628      	mov	r0, r5
 8011e0a:	47b0      	blx	r6
 8011e0c:	1c43      	adds	r3, r0, #1
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	d106      	bne.n	8011e20 <__sflush_r+0x68>
 8011e12:	6829      	ldr	r1, [r5, #0]
 8011e14:	291d      	cmp	r1, #29
 8011e16:	d82b      	bhi.n	8011e70 <__sflush_r+0xb8>
 8011e18:	4a29      	ldr	r2, [pc, #164]	; (8011ec0 <__sflush_r+0x108>)
 8011e1a:	410a      	asrs	r2, r1
 8011e1c:	07d6      	lsls	r6, r2, #31
 8011e1e:	d427      	bmi.n	8011e70 <__sflush_r+0xb8>
 8011e20:	2200      	movs	r2, #0
 8011e22:	6062      	str	r2, [r4, #4]
 8011e24:	04d9      	lsls	r1, r3, #19
 8011e26:	6922      	ldr	r2, [r4, #16]
 8011e28:	6022      	str	r2, [r4, #0]
 8011e2a:	d504      	bpl.n	8011e36 <__sflush_r+0x7e>
 8011e2c:	1c42      	adds	r2, r0, #1
 8011e2e:	d101      	bne.n	8011e34 <__sflush_r+0x7c>
 8011e30:	682b      	ldr	r3, [r5, #0]
 8011e32:	b903      	cbnz	r3, 8011e36 <__sflush_r+0x7e>
 8011e34:	6560      	str	r0, [r4, #84]	; 0x54
 8011e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e38:	602f      	str	r7, [r5, #0]
 8011e3a:	2900      	cmp	r1, #0
 8011e3c:	d0c9      	beq.n	8011dd2 <__sflush_r+0x1a>
 8011e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e42:	4299      	cmp	r1, r3
 8011e44:	d002      	beq.n	8011e4c <__sflush_r+0x94>
 8011e46:	4628      	mov	r0, r5
 8011e48:	f7ff f974 	bl	8011134 <_free_r>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8011e50:	e7c0      	b.n	8011dd4 <__sflush_r+0x1c>
 8011e52:	2301      	movs	r3, #1
 8011e54:	4628      	mov	r0, r5
 8011e56:	47b0      	blx	r6
 8011e58:	1c41      	adds	r1, r0, #1
 8011e5a:	d1c8      	bne.n	8011dee <__sflush_r+0x36>
 8011e5c:	682b      	ldr	r3, [r5, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d0c5      	beq.n	8011dee <__sflush_r+0x36>
 8011e62:	2b1d      	cmp	r3, #29
 8011e64:	d001      	beq.n	8011e6a <__sflush_r+0xb2>
 8011e66:	2b16      	cmp	r3, #22
 8011e68:	d101      	bne.n	8011e6e <__sflush_r+0xb6>
 8011e6a:	602f      	str	r7, [r5, #0]
 8011e6c:	e7b1      	b.n	8011dd2 <__sflush_r+0x1a>
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e74:	81a3      	strh	r3, [r4, #12]
 8011e76:	e7ad      	b.n	8011dd4 <__sflush_r+0x1c>
 8011e78:	690f      	ldr	r7, [r1, #16]
 8011e7a:	2f00      	cmp	r7, #0
 8011e7c:	d0a9      	beq.n	8011dd2 <__sflush_r+0x1a>
 8011e7e:	0793      	lsls	r3, r2, #30
 8011e80:	680e      	ldr	r6, [r1, #0]
 8011e82:	bf08      	it	eq
 8011e84:	694b      	ldreq	r3, [r1, #20]
 8011e86:	600f      	str	r7, [r1, #0]
 8011e88:	bf18      	it	ne
 8011e8a:	2300      	movne	r3, #0
 8011e8c:	eba6 0807 	sub.w	r8, r6, r7
 8011e90:	608b      	str	r3, [r1, #8]
 8011e92:	f1b8 0f00 	cmp.w	r8, #0
 8011e96:	dd9c      	ble.n	8011dd2 <__sflush_r+0x1a>
 8011e98:	6a21      	ldr	r1, [r4, #32]
 8011e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e9c:	4643      	mov	r3, r8
 8011e9e:	463a      	mov	r2, r7
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	47b0      	blx	r6
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	dc06      	bgt.n	8011eb6 <__sflush_r+0xfe>
 8011ea8:	89a3      	ldrh	r3, [r4, #12]
 8011eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eae:	81a3      	strh	r3, [r4, #12]
 8011eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011eb4:	e78e      	b.n	8011dd4 <__sflush_r+0x1c>
 8011eb6:	4407      	add	r7, r0
 8011eb8:	eba8 0800 	sub.w	r8, r8, r0
 8011ebc:	e7e9      	b.n	8011e92 <__sflush_r+0xda>
 8011ebe:	bf00      	nop
 8011ec0:	dfbffffe 	.word	0xdfbffffe

08011ec4 <_fflush_r>:
 8011ec4:	b538      	push	{r3, r4, r5, lr}
 8011ec6:	690b      	ldr	r3, [r1, #16]
 8011ec8:	4605      	mov	r5, r0
 8011eca:	460c      	mov	r4, r1
 8011ecc:	b913      	cbnz	r3, 8011ed4 <_fflush_r+0x10>
 8011ece:	2500      	movs	r5, #0
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	b118      	cbz	r0, 8011ede <_fflush_r+0x1a>
 8011ed6:	6a03      	ldr	r3, [r0, #32]
 8011ed8:	b90b      	cbnz	r3, 8011ede <_fflush_r+0x1a>
 8011eda:	f7fe f88b 	bl	800fff4 <__sinit>
 8011ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d0f3      	beq.n	8011ece <_fflush_r+0xa>
 8011ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ee8:	07d0      	lsls	r0, r2, #31
 8011eea:	d404      	bmi.n	8011ef6 <_fflush_r+0x32>
 8011eec:	0599      	lsls	r1, r3, #22
 8011eee:	d402      	bmi.n	8011ef6 <_fflush_r+0x32>
 8011ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ef2:	f7fe fa6c 	bl	80103ce <__retarget_lock_acquire_recursive>
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	4621      	mov	r1, r4
 8011efa:	f7ff ff5d 	bl	8011db8 <__sflush_r>
 8011efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f00:	07da      	lsls	r2, r3, #31
 8011f02:	4605      	mov	r5, r0
 8011f04:	d4e4      	bmi.n	8011ed0 <_fflush_r+0xc>
 8011f06:	89a3      	ldrh	r3, [r4, #12]
 8011f08:	059b      	lsls	r3, r3, #22
 8011f0a:	d4e1      	bmi.n	8011ed0 <_fflush_r+0xc>
 8011f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f0e:	f7fe fa5f 	bl	80103d0 <__retarget_lock_release_recursive>
 8011f12:	e7dd      	b.n	8011ed0 <_fflush_r+0xc>

08011f14 <_Balloc>:
 8011f14:	b570      	push	{r4, r5, r6, lr}
 8011f16:	69c6      	ldr	r6, [r0, #28]
 8011f18:	4604      	mov	r4, r0
 8011f1a:	460d      	mov	r5, r1
 8011f1c:	b976      	cbnz	r6, 8011f3c <_Balloc+0x28>
 8011f1e:	2010      	movs	r0, #16
 8011f20:	f7fd fcca 	bl	800f8b8 <malloc>
 8011f24:	4602      	mov	r2, r0
 8011f26:	61e0      	str	r0, [r4, #28]
 8011f28:	b920      	cbnz	r0, 8011f34 <_Balloc+0x20>
 8011f2a:	4b18      	ldr	r3, [pc, #96]	; (8011f8c <_Balloc+0x78>)
 8011f2c:	4818      	ldr	r0, [pc, #96]	; (8011f90 <_Balloc+0x7c>)
 8011f2e:	216b      	movs	r1, #107	; 0x6b
 8011f30:	f7fe fa66 	bl	8010400 <__assert_func>
 8011f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f38:	6006      	str	r6, [r0, #0]
 8011f3a:	60c6      	str	r6, [r0, #12]
 8011f3c:	69e6      	ldr	r6, [r4, #28]
 8011f3e:	68f3      	ldr	r3, [r6, #12]
 8011f40:	b183      	cbz	r3, 8011f64 <_Balloc+0x50>
 8011f42:	69e3      	ldr	r3, [r4, #28]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f4a:	b9b8      	cbnz	r0, 8011f7c <_Balloc+0x68>
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8011f52:	1d72      	adds	r2, r6, #5
 8011f54:	0092      	lsls	r2, r2, #2
 8011f56:	4620      	mov	r0, r4
 8011f58:	f000 fd83 	bl	8012a62 <_calloc_r>
 8011f5c:	b160      	cbz	r0, 8011f78 <_Balloc+0x64>
 8011f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f62:	e00e      	b.n	8011f82 <_Balloc+0x6e>
 8011f64:	2221      	movs	r2, #33	; 0x21
 8011f66:	2104      	movs	r1, #4
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f000 fd7a 	bl	8012a62 <_calloc_r>
 8011f6e:	69e3      	ldr	r3, [r4, #28]
 8011f70:	60f0      	str	r0, [r6, #12]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1e4      	bne.n	8011f42 <_Balloc+0x2e>
 8011f78:	2000      	movs	r0, #0
 8011f7a:	bd70      	pop	{r4, r5, r6, pc}
 8011f7c:	6802      	ldr	r2, [r0, #0]
 8011f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f82:	2300      	movs	r3, #0
 8011f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f88:	e7f7      	b.n	8011f7a <_Balloc+0x66>
 8011f8a:	bf00      	nop
 8011f8c:	0801915c 	.word	0x0801915c
 8011f90:	08019208 	.word	0x08019208

08011f94 <_Bfree>:
 8011f94:	b570      	push	{r4, r5, r6, lr}
 8011f96:	69c6      	ldr	r6, [r0, #28]
 8011f98:	4605      	mov	r5, r0
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	b976      	cbnz	r6, 8011fbc <_Bfree+0x28>
 8011f9e:	2010      	movs	r0, #16
 8011fa0:	f7fd fc8a 	bl	800f8b8 <malloc>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	61e8      	str	r0, [r5, #28]
 8011fa8:	b920      	cbnz	r0, 8011fb4 <_Bfree+0x20>
 8011faa:	4b09      	ldr	r3, [pc, #36]	; (8011fd0 <_Bfree+0x3c>)
 8011fac:	4809      	ldr	r0, [pc, #36]	; (8011fd4 <_Bfree+0x40>)
 8011fae:	218f      	movs	r1, #143	; 0x8f
 8011fb0:	f7fe fa26 	bl	8010400 <__assert_func>
 8011fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fb8:	6006      	str	r6, [r0, #0]
 8011fba:	60c6      	str	r6, [r0, #12]
 8011fbc:	b13c      	cbz	r4, 8011fce <_Bfree+0x3a>
 8011fbe:	69eb      	ldr	r3, [r5, #28]
 8011fc0:	6862      	ldr	r2, [r4, #4]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011fc8:	6021      	str	r1, [r4, #0]
 8011fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011fce:	bd70      	pop	{r4, r5, r6, pc}
 8011fd0:	0801915c 	.word	0x0801915c
 8011fd4:	08019208 	.word	0x08019208

08011fd8 <__multadd>:
 8011fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	690d      	ldr	r5, [r1, #16]
 8011fde:	4607      	mov	r7, r0
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	461e      	mov	r6, r3
 8011fe4:	f101 0c14 	add.w	ip, r1, #20
 8011fe8:	2000      	movs	r0, #0
 8011fea:	f8dc 3000 	ldr.w	r3, [ip]
 8011fee:	b299      	uxth	r1, r3
 8011ff0:	fb02 6101 	mla	r1, r2, r1, r6
 8011ff4:	0c1e      	lsrs	r6, r3, #16
 8011ff6:	0c0b      	lsrs	r3, r1, #16
 8011ff8:	fb02 3306 	mla	r3, r2, r6, r3
 8011ffc:	b289      	uxth	r1, r1
 8011ffe:	3001      	adds	r0, #1
 8012000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012004:	4285      	cmp	r5, r0
 8012006:	f84c 1b04 	str.w	r1, [ip], #4
 801200a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801200e:	dcec      	bgt.n	8011fea <__multadd+0x12>
 8012010:	b30e      	cbz	r6, 8012056 <__multadd+0x7e>
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	42ab      	cmp	r3, r5
 8012016:	dc19      	bgt.n	801204c <__multadd+0x74>
 8012018:	6861      	ldr	r1, [r4, #4]
 801201a:	4638      	mov	r0, r7
 801201c:	3101      	adds	r1, #1
 801201e:	f7ff ff79 	bl	8011f14 <_Balloc>
 8012022:	4680      	mov	r8, r0
 8012024:	b928      	cbnz	r0, 8012032 <__multadd+0x5a>
 8012026:	4602      	mov	r2, r0
 8012028:	4b0c      	ldr	r3, [pc, #48]	; (801205c <__multadd+0x84>)
 801202a:	480d      	ldr	r0, [pc, #52]	; (8012060 <__multadd+0x88>)
 801202c:	21ba      	movs	r1, #186	; 0xba
 801202e:	f7fe f9e7 	bl	8010400 <__assert_func>
 8012032:	6922      	ldr	r2, [r4, #16]
 8012034:	3202      	adds	r2, #2
 8012036:	f104 010c 	add.w	r1, r4, #12
 801203a:	0092      	lsls	r2, r2, #2
 801203c:	300c      	adds	r0, #12
 801203e:	f7fe f9c8 	bl	80103d2 <memcpy>
 8012042:	4621      	mov	r1, r4
 8012044:	4638      	mov	r0, r7
 8012046:	f7ff ffa5 	bl	8011f94 <_Bfree>
 801204a:	4644      	mov	r4, r8
 801204c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012050:	3501      	adds	r5, #1
 8012052:	615e      	str	r6, [r3, #20]
 8012054:	6125      	str	r5, [r4, #16]
 8012056:	4620      	mov	r0, r4
 8012058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801205c:	080191cb 	.word	0x080191cb
 8012060:	08019208 	.word	0x08019208

08012064 <__hi0bits>:
 8012064:	0c03      	lsrs	r3, r0, #16
 8012066:	041b      	lsls	r3, r3, #16
 8012068:	b9d3      	cbnz	r3, 80120a0 <__hi0bits+0x3c>
 801206a:	0400      	lsls	r0, r0, #16
 801206c:	2310      	movs	r3, #16
 801206e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012072:	bf04      	itt	eq
 8012074:	0200      	lsleq	r0, r0, #8
 8012076:	3308      	addeq	r3, #8
 8012078:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801207c:	bf04      	itt	eq
 801207e:	0100      	lsleq	r0, r0, #4
 8012080:	3304      	addeq	r3, #4
 8012082:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012086:	bf04      	itt	eq
 8012088:	0080      	lsleq	r0, r0, #2
 801208a:	3302      	addeq	r3, #2
 801208c:	2800      	cmp	r0, #0
 801208e:	db05      	blt.n	801209c <__hi0bits+0x38>
 8012090:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012094:	f103 0301 	add.w	r3, r3, #1
 8012098:	bf08      	it	eq
 801209a:	2320      	moveq	r3, #32
 801209c:	4618      	mov	r0, r3
 801209e:	4770      	bx	lr
 80120a0:	2300      	movs	r3, #0
 80120a2:	e7e4      	b.n	801206e <__hi0bits+0xa>

080120a4 <__lo0bits>:
 80120a4:	6803      	ldr	r3, [r0, #0]
 80120a6:	f013 0207 	ands.w	r2, r3, #7
 80120aa:	d00c      	beq.n	80120c6 <__lo0bits+0x22>
 80120ac:	07d9      	lsls	r1, r3, #31
 80120ae:	d422      	bmi.n	80120f6 <__lo0bits+0x52>
 80120b0:	079a      	lsls	r2, r3, #30
 80120b2:	bf49      	itett	mi
 80120b4:	085b      	lsrmi	r3, r3, #1
 80120b6:	089b      	lsrpl	r3, r3, #2
 80120b8:	6003      	strmi	r3, [r0, #0]
 80120ba:	2201      	movmi	r2, #1
 80120bc:	bf5c      	itt	pl
 80120be:	6003      	strpl	r3, [r0, #0]
 80120c0:	2202      	movpl	r2, #2
 80120c2:	4610      	mov	r0, r2
 80120c4:	4770      	bx	lr
 80120c6:	b299      	uxth	r1, r3
 80120c8:	b909      	cbnz	r1, 80120ce <__lo0bits+0x2a>
 80120ca:	0c1b      	lsrs	r3, r3, #16
 80120cc:	2210      	movs	r2, #16
 80120ce:	b2d9      	uxtb	r1, r3
 80120d0:	b909      	cbnz	r1, 80120d6 <__lo0bits+0x32>
 80120d2:	3208      	adds	r2, #8
 80120d4:	0a1b      	lsrs	r3, r3, #8
 80120d6:	0719      	lsls	r1, r3, #28
 80120d8:	bf04      	itt	eq
 80120da:	091b      	lsreq	r3, r3, #4
 80120dc:	3204      	addeq	r2, #4
 80120de:	0799      	lsls	r1, r3, #30
 80120e0:	bf04      	itt	eq
 80120e2:	089b      	lsreq	r3, r3, #2
 80120e4:	3202      	addeq	r2, #2
 80120e6:	07d9      	lsls	r1, r3, #31
 80120e8:	d403      	bmi.n	80120f2 <__lo0bits+0x4e>
 80120ea:	085b      	lsrs	r3, r3, #1
 80120ec:	f102 0201 	add.w	r2, r2, #1
 80120f0:	d003      	beq.n	80120fa <__lo0bits+0x56>
 80120f2:	6003      	str	r3, [r0, #0]
 80120f4:	e7e5      	b.n	80120c2 <__lo0bits+0x1e>
 80120f6:	2200      	movs	r2, #0
 80120f8:	e7e3      	b.n	80120c2 <__lo0bits+0x1e>
 80120fa:	2220      	movs	r2, #32
 80120fc:	e7e1      	b.n	80120c2 <__lo0bits+0x1e>
	...

08012100 <__i2b>:
 8012100:	b510      	push	{r4, lr}
 8012102:	460c      	mov	r4, r1
 8012104:	2101      	movs	r1, #1
 8012106:	f7ff ff05 	bl	8011f14 <_Balloc>
 801210a:	4602      	mov	r2, r0
 801210c:	b928      	cbnz	r0, 801211a <__i2b+0x1a>
 801210e:	4b05      	ldr	r3, [pc, #20]	; (8012124 <__i2b+0x24>)
 8012110:	4805      	ldr	r0, [pc, #20]	; (8012128 <__i2b+0x28>)
 8012112:	f240 1145 	movw	r1, #325	; 0x145
 8012116:	f7fe f973 	bl	8010400 <__assert_func>
 801211a:	2301      	movs	r3, #1
 801211c:	6144      	str	r4, [r0, #20]
 801211e:	6103      	str	r3, [r0, #16]
 8012120:	bd10      	pop	{r4, pc}
 8012122:	bf00      	nop
 8012124:	080191cb 	.word	0x080191cb
 8012128:	08019208 	.word	0x08019208

0801212c <__multiply>:
 801212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012130:	4691      	mov	r9, r2
 8012132:	690a      	ldr	r2, [r1, #16]
 8012134:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012138:	429a      	cmp	r2, r3
 801213a:	bfb8      	it	lt
 801213c:	460b      	movlt	r3, r1
 801213e:	460c      	mov	r4, r1
 8012140:	bfbc      	itt	lt
 8012142:	464c      	movlt	r4, r9
 8012144:	4699      	movlt	r9, r3
 8012146:	6927      	ldr	r7, [r4, #16]
 8012148:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801214c:	68a3      	ldr	r3, [r4, #8]
 801214e:	6861      	ldr	r1, [r4, #4]
 8012150:	eb07 060a 	add.w	r6, r7, sl
 8012154:	42b3      	cmp	r3, r6
 8012156:	b085      	sub	sp, #20
 8012158:	bfb8      	it	lt
 801215a:	3101      	addlt	r1, #1
 801215c:	f7ff feda 	bl	8011f14 <_Balloc>
 8012160:	b930      	cbnz	r0, 8012170 <__multiply+0x44>
 8012162:	4602      	mov	r2, r0
 8012164:	4b44      	ldr	r3, [pc, #272]	; (8012278 <__multiply+0x14c>)
 8012166:	4845      	ldr	r0, [pc, #276]	; (801227c <__multiply+0x150>)
 8012168:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801216c:	f7fe f948 	bl	8010400 <__assert_func>
 8012170:	f100 0514 	add.w	r5, r0, #20
 8012174:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012178:	462b      	mov	r3, r5
 801217a:	2200      	movs	r2, #0
 801217c:	4543      	cmp	r3, r8
 801217e:	d321      	bcc.n	80121c4 <__multiply+0x98>
 8012180:	f104 0314 	add.w	r3, r4, #20
 8012184:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012188:	f109 0314 	add.w	r3, r9, #20
 801218c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012190:	9202      	str	r2, [sp, #8]
 8012192:	1b3a      	subs	r2, r7, r4
 8012194:	3a15      	subs	r2, #21
 8012196:	f022 0203 	bic.w	r2, r2, #3
 801219a:	3204      	adds	r2, #4
 801219c:	f104 0115 	add.w	r1, r4, #21
 80121a0:	428f      	cmp	r7, r1
 80121a2:	bf38      	it	cc
 80121a4:	2204      	movcc	r2, #4
 80121a6:	9201      	str	r2, [sp, #4]
 80121a8:	9a02      	ldr	r2, [sp, #8]
 80121aa:	9303      	str	r3, [sp, #12]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d80c      	bhi.n	80121ca <__multiply+0x9e>
 80121b0:	2e00      	cmp	r6, #0
 80121b2:	dd03      	ble.n	80121bc <__multiply+0x90>
 80121b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d05b      	beq.n	8012274 <__multiply+0x148>
 80121bc:	6106      	str	r6, [r0, #16]
 80121be:	b005      	add	sp, #20
 80121c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c4:	f843 2b04 	str.w	r2, [r3], #4
 80121c8:	e7d8      	b.n	801217c <__multiply+0x50>
 80121ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80121ce:	f1ba 0f00 	cmp.w	sl, #0
 80121d2:	d024      	beq.n	801221e <__multiply+0xf2>
 80121d4:	f104 0e14 	add.w	lr, r4, #20
 80121d8:	46a9      	mov	r9, r5
 80121da:	f04f 0c00 	mov.w	ip, #0
 80121de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80121e2:	f8d9 1000 	ldr.w	r1, [r9]
 80121e6:	fa1f fb82 	uxth.w	fp, r2
 80121ea:	b289      	uxth	r1, r1
 80121ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80121f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80121f4:	f8d9 2000 	ldr.w	r2, [r9]
 80121f8:	4461      	add	r1, ip
 80121fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80121fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8012202:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012206:	b289      	uxth	r1, r1
 8012208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801220c:	4577      	cmp	r7, lr
 801220e:	f849 1b04 	str.w	r1, [r9], #4
 8012212:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012216:	d8e2      	bhi.n	80121de <__multiply+0xb2>
 8012218:	9a01      	ldr	r2, [sp, #4]
 801221a:	f845 c002 	str.w	ip, [r5, r2]
 801221e:	9a03      	ldr	r2, [sp, #12]
 8012220:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012224:	3304      	adds	r3, #4
 8012226:	f1b9 0f00 	cmp.w	r9, #0
 801222a:	d021      	beq.n	8012270 <__multiply+0x144>
 801222c:	6829      	ldr	r1, [r5, #0]
 801222e:	f104 0c14 	add.w	ip, r4, #20
 8012232:	46ae      	mov	lr, r5
 8012234:	f04f 0a00 	mov.w	sl, #0
 8012238:	f8bc b000 	ldrh.w	fp, [ip]
 801223c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012240:	fb09 220b 	mla	r2, r9, fp, r2
 8012244:	4452      	add	r2, sl
 8012246:	b289      	uxth	r1, r1
 8012248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801224c:	f84e 1b04 	str.w	r1, [lr], #4
 8012250:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012254:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012258:	f8be 1000 	ldrh.w	r1, [lr]
 801225c:	fb09 110a 	mla	r1, r9, sl, r1
 8012260:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012264:	4567      	cmp	r7, ip
 8012266:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801226a:	d8e5      	bhi.n	8012238 <__multiply+0x10c>
 801226c:	9a01      	ldr	r2, [sp, #4]
 801226e:	50a9      	str	r1, [r5, r2]
 8012270:	3504      	adds	r5, #4
 8012272:	e799      	b.n	80121a8 <__multiply+0x7c>
 8012274:	3e01      	subs	r6, #1
 8012276:	e79b      	b.n	80121b0 <__multiply+0x84>
 8012278:	080191cb 	.word	0x080191cb
 801227c:	08019208 	.word	0x08019208

08012280 <__pow5mult>:
 8012280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012284:	4615      	mov	r5, r2
 8012286:	f012 0203 	ands.w	r2, r2, #3
 801228a:	4606      	mov	r6, r0
 801228c:	460f      	mov	r7, r1
 801228e:	d007      	beq.n	80122a0 <__pow5mult+0x20>
 8012290:	4c25      	ldr	r4, [pc, #148]	; (8012328 <__pow5mult+0xa8>)
 8012292:	3a01      	subs	r2, #1
 8012294:	2300      	movs	r3, #0
 8012296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801229a:	f7ff fe9d 	bl	8011fd8 <__multadd>
 801229e:	4607      	mov	r7, r0
 80122a0:	10ad      	asrs	r5, r5, #2
 80122a2:	d03d      	beq.n	8012320 <__pow5mult+0xa0>
 80122a4:	69f4      	ldr	r4, [r6, #28]
 80122a6:	b97c      	cbnz	r4, 80122c8 <__pow5mult+0x48>
 80122a8:	2010      	movs	r0, #16
 80122aa:	f7fd fb05 	bl	800f8b8 <malloc>
 80122ae:	4602      	mov	r2, r0
 80122b0:	61f0      	str	r0, [r6, #28]
 80122b2:	b928      	cbnz	r0, 80122c0 <__pow5mult+0x40>
 80122b4:	4b1d      	ldr	r3, [pc, #116]	; (801232c <__pow5mult+0xac>)
 80122b6:	481e      	ldr	r0, [pc, #120]	; (8012330 <__pow5mult+0xb0>)
 80122b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80122bc:	f7fe f8a0 	bl	8010400 <__assert_func>
 80122c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122c4:	6004      	str	r4, [r0, #0]
 80122c6:	60c4      	str	r4, [r0, #12]
 80122c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80122cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122d0:	b94c      	cbnz	r4, 80122e6 <__pow5mult+0x66>
 80122d2:	f240 2171 	movw	r1, #625	; 0x271
 80122d6:	4630      	mov	r0, r6
 80122d8:	f7ff ff12 	bl	8012100 <__i2b>
 80122dc:	2300      	movs	r3, #0
 80122de:	f8c8 0008 	str.w	r0, [r8, #8]
 80122e2:	4604      	mov	r4, r0
 80122e4:	6003      	str	r3, [r0, #0]
 80122e6:	f04f 0900 	mov.w	r9, #0
 80122ea:	07eb      	lsls	r3, r5, #31
 80122ec:	d50a      	bpl.n	8012304 <__pow5mult+0x84>
 80122ee:	4639      	mov	r1, r7
 80122f0:	4622      	mov	r2, r4
 80122f2:	4630      	mov	r0, r6
 80122f4:	f7ff ff1a 	bl	801212c <__multiply>
 80122f8:	4639      	mov	r1, r7
 80122fa:	4680      	mov	r8, r0
 80122fc:	4630      	mov	r0, r6
 80122fe:	f7ff fe49 	bl	8011f94 <_Bfree>
 8012302:	4647      	mov	r7, r8
 8012304:	106d      	asrs	r5, r5, #1
 8012306:	d00b      	beq.n	8012320 <__pow5mult+0xa0>
 8012308:	6820      	ldr	r0, [r4, #0]
 801230a:	b938      	cbnz	r0, 801231c <__pow5mult+0x9c>
 801230c:	4622      	mov	r2, r4
 801230e:	4621      	mov	r1, r4
 8012310:	4630      	mov	r0, r6
 8012312:	f7ff ff0b 	bl	801212c <__multiply>
 8012316:	6020      	str	r0, [r4, #0]
 8012318:	f8c0 9000 	str.w	r9, [r0]
 801231c:	4604      	mov	r4, r0
 801231e:	e7e4      	b.n	80122ea <__pow5mult+0x6a>
 8012320:	4638      	mov	r0, r7
 8012322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012326:	bf00      	nop
 8012328:	08019358 	.word	0x08019358
 801232c:	0801915c 	.word	0x0801915c
 8012330:	08019208 	.word	0x08019208

08012334 <__lshift>:
 8012334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012338:	460c      	mov	r4, r1
 801233a:	6849      	ldr	r1, [r1, #4]
 801233c:	6923      	ldr	r3, [r4, #16]
 801233e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012342:	68a3      	ldr	r3, [r4, #8]
 8012344:	4607      	mov	r7, r0
 8012346:	4691      	mov	r9, r2
 8012348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801234c:	f108 0601 	add.w	r6, r8, #1
 8012350:	42b3      	cmp	r3, r6
 8012352:	db0b      	blt.n	801236c <__lshift+0x38>
 8012354:	4638      	mov	r0, r7
 8012356:	f7ff fddd 	bl	8011f14 <_Balloc>
 801235a:	4605      	mov	r5, r0
 801235c:	b948      	cbnz	r0, 8012372 <__lshift+0x3e>
 801235e:	4602      	mov	r2, r0
 8012360:	4b28      	ldr	r3, [pc, #160]	; (8012404 <__lshift+0xd0>)
 8012362:	4829      	ldr	r0, [pc, #164]	; (8012408 <__lshift+0xd4>)
 8012364:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012368:	f7fe f84a 	bl	8010400 <__assert_func>
 801236c:	3101      	adds	r1, #1
 801236e:	005b      	lsls	r3, r3, #1
 8012370:	e7ee      	b.n	8012350 <__lshift+0x1c>
 8012372:	2300      	movs	r3, #0
 8012374:	f100 0114 	add.w	r1, r0, #20
 8012378:	f100 0210 	add.w	r2, r0, #16
 801237c:	4618      	mov	r0, r3
 801237e:	4553      	cmp	r3, sl
 8012380:	db33      	blt.n	80123ea <__lshift+0xb6>
 8012382:	6920      	ldr	r0, [r4, #16]
 8012384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012388:	f104 0314 	add.w	r3, r4, #20
 801238c:	f019 091f 	ands.w	r9, r9, #31
 8012390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012394:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012398:	d02b      	beq.n	80123f2 <__lshift+0xbe>
 801239a:	f1c9 0e20 	rsb	lr, r9, #32
 801239e:	468a      	mov	sl, r1
 80123a0:	2200      	movs	r2, #0
 80123a2:	6818      	ldr	r0, [r3, #0]
 80123a4:	fa00 f009 	lsl.w	r0, r0, r9
 80123a8:	4310      	orrs	r0, r2
 80123aa:	f84a 0b04 	str.w	r0, [sl], #4
 80123ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80123b2:	459c      	cmp	ip, r3
 80123b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80123b8:	d8f3      	bhi.n	80123a2 <__lshift+0x6e>
 80123ba:	ebac 0304 	sub.w	r3, ip, r4
 80123be:	3b15      	subs	r3, #21
 80123c0:	f023 0303 	bic.w	r3, r3, #3
 80123c4:	3304      	adds	r3, #4
 80123c6:	f104 0015 	add.w	r0, r4, #21
 80123ca:	4584      	cmp	ip, r0
 80123cc:	bf38      	it	cc
 80123ce:	2304      	movcc	r3, #4
 80123d0:	50ca      	str	r2, [r1, r3]
 80123d2:	b10a      	cbz	r2, 80123d8 <__lshift+0xa4>
 80123d4:	f108 0602 	add.w	r6, r8, #2
 80123d8:	3e01      	subs	r6, #1
 80123da:	4638      	mov	r0, r7
 80123dc:	612e      	str	r6, [r5, #16]
 80123de:	4621      	mov	r1, r4
 80123e0:	f7ff fdd8 	bl	8011f94 <_Bfree>
 80123e4:	4628      	mov	r0, r5
 80123e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80123ee:	3301      	adds	r3, #1
 80123f0:	e7c5      	b.n	801237e <__lshift+0x4a>
 80123f2:	3904      	subs	r1, #4
 80123f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80123f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80123fc:	459c      	cmp	ip, r3
 80123fe:	d8f9      	bhi.n	80123f4 <__lshift+0xc0>
 8012400:	e7ea      	b.n	80123d8 <__lshift+0xa4>
 8012402:	bf00      	nop
 8012404:	080191cb 	.word	0x080191cb
 8012408:	08019208 	.word	0x08019208

0801240c <__mcmp>:
 801240c:	b530      	push	{r4, r5, lr}
 801240e:	6902      	ldr	r2, [r0, #16]
 8012410:	690c      	ldr	r4, [r1, #16]
 8012412:	1b12      	subs	r2, r2, r4
 8012414:	d10e      	bne.n	8012434 <__mcmp+0x28>
 8012416:	f100 0314 	add.w	r3, r0, #20
 801241a:	3114      	adds	r1, #20
 801241c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801242c:	42a5      	cmp	r5, r4
 801242e:	d003      	beq.n	8012438 <__mcmp+0x2c>
 8012430:	d305      	bcc.n	801243e <__mcmp+0x32>
 8012432:	2201      	movs	r2, #1
 8012434:	4610      	mov	r0, r2
 8012436:	bd30      	pop	{r4, r5, pc}
 8012438:	4283      	cmp	r3, r0
 801243a:	d3f3      	bcc.n	8012424 <__mcmp+0x18>
 801243c:	e7fa      	b.n	8012434 <__mcmp+0x28>
 801243e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012442:	e7f7      	b.n	8012434 <__mcmp+0x28>

08012444 <__mdiff>:
 8012444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012448:	460c      	mov	r4, r1
 801244a:	4606      	mov	r6, r0
 801244c:	4611      	mov	r1, r2
 801244e:	4620      	mov	r0, r4
 8012450:	4690      	mov	r8, r2
 8012452:	f7ff ffdb 	bl	801240c <__mcmp>
 8012456:	1e05      	subs	r5, r0, #0
 8012458:	d110      	bne.n	801247c <__mdiff+0x38>
 801245a:	4629      	mov	r1, r5
 801245c:	4630      	mov	r0, r6
 801245e:	f7ff fd59 	bl	8011f14 <_Balloc>
 8012462:	b930      	cbnz	r0, 8012472 <__mdiff+0x2e>
 8012464:	4b3a      	ldr	r3, [pc, #232]	; (8012550 <__mdiff+0x10c>)
 8012466:	4602      	mov	r2, r0
 8012468:	f240 2137 	movw	r1, #567	; 0x237
 801246c:	4839      	ldr	r0, [pc, #228]	; (8012554 <__mdiff+0x110>)
 801246e:	f7fd ffc7 	bl	8010400 <__assert_func>
 8012472:	2301      	movs	r3, #1
 8012474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247c:	bfa4      	itt	ge
 801247e:	4643      	movge	r3, r8
 8012480:	46a0      	movge	r8, r4
 8012482:	4630      	mov	r0, r6
 8012484:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012488:	bfa6      	itte	ge
 801248a:	461c      	movge	r4, r3
 801248c:	2500      	movge	r5, #0
 801248e:	2501      	movlt	r5, #1
 8012490:	f7ff fd40 	bl	8011f14 <_Balloc>
 8012494:	b920      	cbnz	r0, 80124a0 <__mdiff+0x5c>
 8012496:	4b2e      	ldr	r3, [pc, #184]	; (8012550 <__mdiff+0x10c>)
 8012498:	4602      	mov	r2, r0
 801249a:	f240 2145 	movw	r1, #581	; 0x245
 801249e:	e7e5      	b.n	801246c <__mdiff+0x28>
 80124a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80124a4:	6926      	ldr	r6, [r4, #16]
 80124a6:	60c5      	str	r5, [r0, #12]
 80124a8:	f104 0914 	add.w	r9, r4, #20
 80124ac:	f108 0514 	add.w	r5, r8, #20
 80124b0:	f100 0e14 	add.w	lr, r0, #20
 80124b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80124b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80124bc:	f108 0210 	add.w	r2, r8, #16
 80124c0:	46f2      	mov	sl, lr
 80124c2:	2100      	movs	r1, #0
 80124c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80124c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80124cc:	fa11 f88b 	uxtah	r8, r1, fp
 80124d0:	b299      	uxth	r1, r3
 80124d2:	0c1b      	lsrs	r3, r3, #16
 80124d4:	eba8 0801 	sub.w	r8, r8, r1
 80124d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80124dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80124e0:	fa1f f888 	uxth.w	r8, r8
 80124e4:	1419      	asrs	r1, r3, #16
 80124e6:	454e      	cmp	r6, r9
 80124e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80124ec:	f84a 3b04 	str.w	r3, [sl], #4
 80124f0:	d8e8      	bhi.n	80124c4 <__mdiff+0x80>
 80124f2:	1b33      	subs	r3, r6, r4
 80124f4:	3b15      	subs	r3, #21
 80124f6:	f023 0303 	bic.w	r3, r3, #3
 80124fa:	3304      	adds	r3, #4
 80124fc:	3415      	adds	r4, #21
 80124fe:	42a6      	cmp	r6, r4
 8012500:	bf38      	it	cc
 8012502:	2304      	movcc	r3, #4
 8012504:	441d      	add	r5, r3
 8012506:	4473      	add	r3, lr
 8012508:	469e      	mov	lr, r3
 801250a:	462e      	mov	r6, r5
 801250c:	4566      	cmp	r6, ip
 801250e:	d30e      	bcc.n	801252e <__mdiff+0xea>
 8012510:	f10c 0203 	add.w	r2, ip, #3
 8012514:	1b52      	subs	r2, r2, r5
 8012516:	f022 0203 	bic.w	r2, r2, #3
 801251a:	3d03      	subs	r5, #3
 801251c:	45ac      	cmp	ip, r5
 801251e:	bf38      	it	cc
 8012520:	2200      	movcc	r2, #0
 8012522:	4413      	add	r3, r2
 8012524:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012528:	b17a      	cbz	r2, 801254a <__mdiff+0x106>
 801252a:	6107      	str	r7, [r0, #16]
 801252c:	e7a4      	b.n	8012478 <__mdiff+0x34>
 801252e:	f856 8b04 	ldr.w	r8, [r6], #4
 8012532:	fa11 f288 	uxtah	r2, r1, r8
 8012536:	1414      	asrs	r4, r2, #16
 8012538:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801253c:	b292      	uxth	r2, r2
 801253e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012542:	f84e 2b04 	str.w	r2, [lr], #4
 8012546:	1421      	asrs	r1, r4, #16
 8012548:	e7e0      	b.n	801250c <__mdiff+0xc8>
 801254a:	3f01      	subs	r7, #1
 801254c:	e7ea      	b.n	8012524 <__mdiff+0xe0>
 801254e:	bf00      	nop
 8012550:	080191cb 	.word	0x080191cb
 8012554:	08019208 	.word	0x08019208

08012558 <__d2b>:
 8012558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801255c:	460f      	mov	r7, r1
 801255e:	2101      	movs	r1, #1
 8012560:	ec59 8b10 	vmov	r8, r9, d0
 8012564:	4616      	mov	r6, r2
 8012566:	f7ff fcd5 	bl	8011f14 <_Balloc>
 801256a:	4604      	mov	r4, r0
 801256c:	b930      	cbnz	r0, 801257c <__d2b+0x24>
 801256e:	4602      	mov	r2, r0
 8012570:	4b24      	ldr	r3, [pc, #144]	; (8012604 <__d2b+0xac>)
 8012572:	4825      	ldr	r0, [pc, #148]	; (8012608 <__d2b+0xb0>)
 8012574:	f240 310f 	movw	r1, #783	; 0x30f
 8012578:	f7fd ff42 	bl	8010400 <__assert_func>
 801257c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012584:	bb2d      	cbnz	r5, 80125d2 <__d2b+0x7a>
 8012586:	9301      	str	r3, [sp, #4]
 8012588:	f1b8 0300 	subs.w	r3, r8, #0
 801258c:	d026      	beq.n	80125dc <__d2b+0x84>
 801258e:	4668      	mov	r0, sp
 8012590:	9300      	str	r3, [sp, #0]
 8012592:	f7ff fd87 	bl	80120a4 <__lo0bits>
 8012596:	e9dd 1200 	ldrd	r1, r2, [sp]
 801259a:	b1e8      	cbz	r0, 80125d8 <__d2b+0x80>
 801259c:	f1c0 0320 	rsb	r3, r0, #32
 80125a0:	fa02 f303 	lsl.w	r3, r2, r3
 80125a4:	430b      	orrs	r3, r1
 80125a6:	40c2      	lsrs	r2, r0
 80125a8:	6163      	str	r3, [r4, #20]
 80125aa:	9201      	str	r2, [sp, #4]
 80125ac:	9b01      	ldr	r3, [sp, #4]
 80125ae:	61a3      	str	r3, [r4, #24]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	bf14      	ite	ne
 80125b4:	2202      	movne	r2, #2
 80125b6:	2201      	moveq	r2, #1
 80125b8:	6122      	str	r2, [r4, #16]
 80125ba:	b1bd      	cbz	r5, 80125ec <__d2b+0x94>
 80125bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80125c0:	4405      	add	r5, r0
 80125c2:	603d      	str	r5, [r7, #0]
 80125c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80125c8:	6030      	str	r0, [r6, #0]
 80125ca:	4620      	mov	r0, r4
 80125cc:	b003      	add	sp, #12
 80125ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125d6:	e7d6      	b.n	8012586 <__d2b+0x2e>
 80125d8:	6161      	str	r1, [r4, #20]
 80125da:	e7e7      	b.n	80125ac <__d2b+0x54>
 80125dc:	a801      	add	r0, sp, #4
 80125de:	f7ff fd61 	bl	80120a4 <__lo0bits>
 80125e2:	9b01      	ldr	r3, [sp, #4]
 80125e4:	6163      	str	r3, [r4, #20]
 80125e6:	3020      	adds	r0, #32
 80125e8:	2201      	movs	r2, #1
 80125ea:	e7e5      	b.n	80125b8 <__d2b+0x60>
 80125ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80125f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80125f4:	6038      	str	r0, [r7, #0]
 80125f6:	6918      	ldr	r0, [r3, #16]
 80125f8:	f7ff fd34 	bl	8012064 <__hi0bits>
 80125fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012600:	e7e2      	b.n	80125c8 <__d2b+0x70>
 8012602:	bf00      	nop
 8012604:	080191cb 	.word	0x080191cb
 8012608:	08019208 	.word	0x08019208

0801260c <fiprintf>:
 801260c:	b40e      	push	{r1, r2, r3}
 801260e:	b503      	push	{r0, r1, lr}
 8012610:	4601      	mov	r1, r0
 8012612:	ab03      	add	r3, sp, #12
 8012614:	4805      	ldr	r0, [pc, #20]	; (801262c <fiprintf+0x20>)
 8012616:	f853 2b04 	ldr.w	r2, [r3], #4
 801261a:	6800      	ldr	r0, [r0, #0]
 801261c:	9301      	str	r3, [sp, #4]
 801261e:	f7ff f929 	bl	8011874 <_vfiprintf_r>
 8012622:	b002      	add	sp, #8
 8012624:	f85d eb04 	ldr.w	lr, [sp], #4
 8012628:	b003      	add	sp, #12
 801262a:	4770      	bx	lr
 801262c:	200000cc 	.word	0x200000cc

08012630 <__submore>:
 8012630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012634:	460c      	mov	r4, r1
 8012636:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801263c:	4299      	cmp	r1, r3
 801263e:	d11d      	bne.n	801267c <__submore+0x4c>
 8012640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012644:	f7fd f968 	bl	800f918 <_malloc_r>
 8012648:	b918      	cbnz	r0, 8012652 <__submore+0x22>
 801264a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801264e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012656:	63a3      	str	r3, [r4, #56]	; 0x38
 8012658:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801265c:	6360      	str	r0, [r4, #52]	; 0x34
 801265e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8012662:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012666:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801266a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801266e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012672:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012676:	6020      	str	r0, [r4, #0]
 8012678:	2000      	movs	r0, #0
 801267a:	e7e8      	b.n	801264e <__submore+0x1e>
 801267c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801267e:	0077      	lsls	r7, r6, #1
 8012680:	463a      	mov	r2, r7
 8012682:	f000 f80f 	bl	80126a4 <_realloc_r>
 8012686:	4605      	mov	r5, r0
 8012688:	2800      	cmp	r0, #0
 801268a:	d0de      	beq.n	801264a <__submore+0x1a>
 801268c:	eb00 0806 	add.w	r8, r0, r6
 8012690:	4601      	mov	r1, r0
 8012692:	4632      	mov	r2, r6
 8012694:	4640      	mov	r0, r8
 8012696:	f7fd fe9c 	bl	80103d2 <memcpy>
 801269a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801269e:	f8c4 8000 	str.w	r8, [r4]
 80126a2:	e7e9      	b.n	8012678 <__submore+0x48>

080126a4 <_realloc_r>:
 80126a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a8:	4680      	mov	r8, r0
 80126aa:	4614      	mov	r4, r2
 80126ac:	460e      	mov	r6, r1
 80126ae:	b921      	cbnz	r1, 80126ba <_realloc_r+0x16>
 80126b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126b4:	4611      	mov	r1, r2
 80126b6:	f7fd b92f 	b.w	800f918 <_malloc_r>
 80126ba:	b92a      	cbnz	r2, 80126c8 <_realloc_r+0x24>
 80126bc:	f7fe fd3a 	bl	8011134 <_free_r>
 80126c0:	4625      	mov	r5, r4
 80126c2:	4628      	mov	r0, r5
 80126c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c8:	f000 f9f3 	bl	8012ab2 <_malloc_usable_size_r>
 80126cc:	4284      	cmp	r4, r0
 80126ce:	4607      	mov	r7, r0
 80126d0:	d802      	bhi.n	80126d8 <_realloc_r+0x34>
 80126d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80126d6:	d812      	bhi.n	80126fe <_realloc_r+0x5a>
 80126d8:	4621      	mov	r1, r4
 80126da:	4640      	mov	r0, r8
 80126dc:	f7fd f91c 	bl	800f918 <_malloc_r>
 80126e0:	4605      	mov	r5, r0
 80126e2:	2800      	cmp	r0, #0
 80126e4:	d0ed      	beq.n	80126c2 <_realloc_r+0x1e>
 80126e6:	42bc      	cmp	r4, r7
 80126e8:	4622      	mov	r2, r4
 80126ea:	4631      	mov	r1, r6
 80126ec:	bf28      	it	cs
 80126ee:	463a      	movcs	r2, r7
 80126f0:	f7fd fe6f 	bl	80103d2 <memcpy>
 80126f4:	4631      	mov	r1, r6
 80126f6:	4640      	mov	r0, r8
 80126f8:	f7fe fd1c 	bl	8011134 <_free_r>
 80126fc:	e7e1      	b.n	80126c2 <_realloc_r+0x1e>
 80126fe:	4635      	mov	r5, r6
 8012700:	e7df      	b.n	80126c2 <_realloc_r+0x1e>
	...

08012704 <_strtoul_l.constprop.0>:
 8012704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012708:	4f36      	ldr	r7, [pc, #216]	; (80127e4 <_strtoul_l.constprop.0+0xe0>)
 801270a:	4686      	mov	lr, r0
 801270c:	460d      	mov	r5, r1
 801270e:	4628      	mov	r0, r5
 8012710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012714:	5d3e      	ldrb	r6, [r7, r4]
 8012716:	f016 0608 	ands.w	r6, r6, #8
 801271a:	d1f8      	bne.n	801270e <_strtoul_l.constprop.0+0xa>
 801271c:	2c2d      	cmp	r4, #45	; 0x2d
 801271e:	d130      	bne.n	8012782 <_strtoul_l.constprop.0+0x7e>
 8012720:	782c      	ldrb	r4, [r5, #0]
 8012722:	2601      	movs	r6, #1
 8012724:	1c85      	adds	r5, r0, #2
 8012726:	2b00      	cmp	r3, #0
 8012728:	d057      	beq.n	80127da <_strtoul_l.constprop.0+0xd6>
 801272a:	2b10      	cmp	r3, #16
 801272c:	d109      	bne.n	8012742 <_strtoul_l.constprop.0+0x3e>
 801272e:	2c30      	cmp	r4, #48	; 0x30
 8012730:	d107      	bne.n	8012742 <_strtoul_l.constprop.0+0x3e>
 8012732:	7828      	ldrb	r0, [r5, #0]
 8012734:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012738:	2858      	cmp	r0, #88	; 0x58
 801273a:	d149      	bne.n	80127d0 <_strtoul_l.constprop.0+0xcc>
 801273c:	786c      	ldrb	r4, [r5, #1]
 801273e:	2310      	movs	r3, #16
 8012740:	3502      	adds	r5, #2
 8012742:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012746:	2700      	movs	r7, #0
 8012748:	fbb8 f8f3 	udiv	r8, r8, r3
 801274c:	fb03 f908 	mul.w	r9, r3, r8
 8012750:	ea6f 0909 	mvn.w	r9, r9
 8012754:	4638      	mov	r0, r7
 8012756:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801275a:	f1bc 0f09 	cmp.w	ip, #9
 801275e:	d815      	bhi.n	801278c <_strtoul_l.constprop.0+0x88>
 8012760:	4664      	mov	r4, ip
 8012762:	42a3      	cmp	r3, r4
 8012764:	dd23      	ble.n	80127ae <_strtoul_l.constprop.0+0xaa>
 8012766:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801276a:	d007      	beq.n	801277c <_strtoul_l.constprop.0+0x78>
 801276c:	4580      	cmp	r8, r0
 801276e:	d31b      	bcc.n	80127a8 <_strtoul_l.constprop.0+0xa4>
 8012770:	d101      	bne.n	8012776 <_strtoul_l.constprop.0+0x72>
 8012772:	45a1      	cmp	r9, r4
 8012774:	db18      	blt.n	80127a8 <_strtoul_l.constprop.0+0xa4>
 8012776:	fb00 4003 	mla	r0, r0, r3, r4
 801277a:	2701      	movs	r7, #1
 801277c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012780:	e7e9      	b.n	8012756 <_strtoul_l.constprop.0+0x52>
 8012782:	2c2b      	cmp	r4, #43	; 0x2b
 8012784:	bf04      	itt	eq
 8012786:	782c      	ldrbeq	r4, [r5, #0]
 8012788:	1c85      	addeq	r5, r0, #2
 801278a:	e7cc      	b.n	8012726 <_strtoul_l.constprop.0+0x22>
 801278c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012790:	f1bc 0f19 	cmp.w	ip, #25
 8012794:	d801      	bhi.n	801279a <_strtoul_l.constprop.0+0x96>
 8012796:	3c37      	subs	r4, #55	; 0x37
 8012798:	e7e3      	b.n	8012762 <_strtoul_l.constprop.0+0x5e>
 801279a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801279e:	f1bc 0f19 	cmp.w	ip, #25
 80127a2:	d804      	bhi.n	80127ae <_strtoul_l.constprop.0+0xaa>
 80127a4:	3c57      	subs	r4, #87	; 0x57
 80127a6:	e7dc      	b.n	8012762 <_strtoul_l.constprop.0+0x5e>
 80127a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80127ac:	e7e6      	b.n	801277c <_strtoul_l.constprop.0+0x78>
 80127ae:	1c7b      	adds	r3, r7, #1
 80127b0:	d106      	bne.n	80127c0 <_strtoul_l.constprop.0+0xbc>
 80127b2:	2322      	movs	r3, #34	; 0x22
 80127b4:	f8ce 3000 	str.w	r3, [lr]
 80127b8:	4638      	mov	r0, r7
 80127ba:	b932      	cbnz	r2, 80127ca <_strtoul_l.constprop.0+0xc6>
 80127bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127c0:	b106      	cbz	r6, 80127c4 <_strtoul_l.constprop.0+0xc0>
 80127c2:	4240      	negs	r0, r0
 80127c4:	2a00      	cmp	r2, #0
 80127c6:	d0f9      	beq.n	80127bc <_strtoul_l.constprop.0+0xb8>
 80127c8:	b107      	cbz	r7, 80127cc <_strtoul_l.constprop.0+0xc8>
 80127ca:	1e69      	subs	r1, r5, #1
 80127cc:	6011      	str	r1, [r2, #0]
 80127ce:	e7f5      	b.n	80127bc <_strtoul_l.constprop.0+0xb8>
 80127d0:	2430      	movs	r4, #48	; 0x30
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1b5      	bne.n	8012742 <_strtoul_l.constprop.0+0x3e>
 80127d6:	2308      	movs	r3, #8
 80127d8:	e7b3      	b.n	8012742 <_strtoul_l.constprop.0+0x3e>
 80127da:	2c30      	cmp	r4, #48	; 0x30
 80127dc:	d0a9      	beq.n	8012732 <_strtoul_l.constprop.0+0x2e>
 80127de:	230a      	movs	r3, #10
 80127e0:	e7af      	b.n	8012742 <_strtoul_l.constprop.0+0x3e>
 80127e2:	bf00      	nop
 80127e4:	08019013 	.word	0x08019013

080127e8 <_strtoul_r>:
 80127e8:	f7ff bf8c 	b.w	8012704 <_strtoul_l.constprop.0>

080127ec <__swbuf_r>:
 80127ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ee:	460e      	mov	r6, r1
 80127f0:	4614      	mov	r4, r2
 80127f2:	4605      	mov	r5, r0
 80127f4:	b118      	cbz	r0, 80127fe <__swbuf_r+0x12>
 80127f6:	6a03      	ldr	r3, [r0, #32]
 80127f8:	b90b      	cbnz	r3, 80127fe <__swbuf_r+0x12>
 80127fa:	f7fd fbfb 	bl	800fff4 <__sinit>
 80127fe:	69a3      	ldr	r3, [r4, #24]
 8012800:	60a3      	str	r3, [r4, #8]
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	071a      	lsls	r2, r3, #28
 8012806:	d525      	bpl.n	8012854 <__swbuf_r+0x68>
 8012808:	6923      	ldr	r3, [r4, #16]
 801280a:	b31b      	cbz	r3, 8012854 <__swbuf_r+0x68>
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	6922      	ldr	r2, [r4, #16]
 8012810:	1a98      	subs	r0, r3, r2
 8012812:	6963      	ldr	r3, [r4, #20]
 8012814:	b2f6      	uxtb	r6, r6
 8012816:	4283      	cmp	r3, r0
 8012818:	4637      	mov	r7, r6
 801281a:	dc04      	bgt.n	8012826 <__swbuf_r+0x3a>
 801281c:	4621      	mov	r1, r4
 801281e:	4628      	mov	r0, r5
 8012820:	f7ff fb50 	bl	8011ec4 <_fflush_r>
 8012824:	b9e0      	cbnz	r0, 8012860 <__swbuf_r+0x74>
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	3b01      	subs	r3, #1
 801282a:	60a3      	str	r3, [r4, #8]
 801282c:	6823      	ldr	r3, [r4, #0]
 801282e:	1c5a      	adds	r2, r3, #1
 8012830:	6022      	str	r2, [r4, #0]
 8012832:	701e      	strb	r6, [r3, #0]
 8012834:	6962      	ldr	r2, [r4, #20]
 8012836:	1c43      	adds	r3, r0, #1
 8012838:	429a      	cmp	r2, r3
 801283a:	d004      	beq.n	8012846 <__swbuf_r+0x5a>
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	07db      	lsls	r3, r3, #31
 8012840:	d506      	bpl.n	8012850 <__swbuf_r+0x64>
 8012842:	2e0a      	cmp	r6, #10
 8012844:	d104      	bne.n	8012850 <__swbuf_r+0x64>
 8012846:	4621      	mov	r1, r4
 8012848:	4628      	mov	r0, r5
 801284a:	f7ff fb3b 	bl	8011ec4 <_fflush_r>
 801284e:	b938      	cbnz	r0, 8012860 <__swbuf_r+0x74>
 8012850:	4638      	mov	r0, r7
 8012852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012854:	4621      	mov	r1, r4
 8012856:	4628      	mov	r0, r5
 8012858:	f000 f806 	bl	8012868 <__swsetup_r>
 801285c:	2800      	cmp	r0, #0
 801285e:	d0d5      	beq.n	801280c <__swbuf_r+0x20>
 8012860:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012864:	e7f4      	b.n	8012850 <__swbuf_r+0x64>
	...

08012868 <__swsetup_r>:
 8012868:	b538      	push	{r3, r4, r5, lr}
 801286a:	4b2a      	ldr	r3, [pc, #168]	; (8012914 <__swsetup_r+0xac>)
 801286c:	4605      	mov	r5, r0
 801286e:	6818      	ldr	r0, [r3, #0]
 8012870:	460c      	mov	r4, r1
 8012872:	b118      	cbz	r0, 801287c <__swsetup_r+0x14>
 8012874:	6a03      	ldr	r3, [r0, #32]
 8012876:	b90b      	cbnz	r3, 801287c <__swsetup_r+0x14>
 8012878:	f7fd fbbc 	bl	800fff4 <__sinit>
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012882:	0718      	lsls	r0, r3, #28
 8012884:	d422      	bmi.n	80128cc <__swsetup_r+0x64>
 8012886:	06d9      	lsls	r1, r3, #27
 8012888:	d407      	bmi.n	801289a <__swsetup_r+0x32>
 801288a:	2309      	movs	r3, #9
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012898:	e034      	b.n	8012904 <__swsetup_r+0x9c>
 801289a:	0758      	lsls	r0, r3, #29
 801289c:	d512      	bpl.n	80128c4 <__swsetup_r+0x5c>
 801289e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128a0:	b141      	cbz	r1, 80128b4 <__swsetup_r+0x4c>
 80128a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128a6:	4299      	cmp	r1, r3
 80128a8:	d002      	beq.n	80128b0 <__swsetup_r+0x48>
 80128aa:	4628      	mov	r0, r5
 80128ac:	f7fe fc42 	bl	8011134 <_free_r>
 80128b0:	2300      	movs	r3, #0
 80128b2:	6363      	str	r3, [r4, #52]	; 0x34
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80128ba:	81a3      	strh	r3, [r4, #12]
 80128bc:	2300      	movs	r3, #0
 80128be:	6063      	str	r3, [r4, #4]
 80128c0:	6923      	ldr	r3, [r4, #16]
 80128c2:	6023      	str	r3, [r4, #0]
 80128c4:	89a3      	ldrh	r3, [r4, #12]
 80128c6:	f043 0308 	orr.w	r3, r3, #8
 80128ca:	81a3      	strh	r3, [r4, #12]
 80128cc:	6923      	ldr	r3, [r4, #16]
 80128ce:	b94b      	cbnz	r3, 80128e4 <__swsetup_r+0x7c>
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128da:	d003      	beq.n	80128e4 <__swsetup_r+0x7c>
 80128dc:	4621      	mov	r1, r4
 80128de:	4628      	mov	r0, r5
 80128e0:	f000 f840 	bl	8012964 <__smakebuf_r>
 80128e4:	89a0      	ldrh	r0, [r4, #12]
 80128e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128ea:	f010 0301 	ands.w	r3, r0, #1
 80128ee:	d00a      	beq.n	8012906 <__swsetup_r+0x9e>
 80128f0:	2300      	movs	r3, #0
 80128f2:	60a3      	str	r3, [r4, #8]
 80128f4:	6963      	ldr	r3, [r4, #20]
 80128f6:	425b      	negs	r3, r3
 80128f8:	61a3      	str	r3, [r4, #24]
 80128fa:	6923      	ldr	r3, [r4, #16]
 80128fc:	b943      	cbnz	r3, 8012910 <__swsetup_r+0xa8>
 80128fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012902:	d1c4      	bne.n	801288e <__swsetup_r+0x26>
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	0781      	lsls	r1, r0, #30
 8012908:	bf58      	it	pl
 801290a:	6963      	ldrpl	r3, [r4, #20]
 801290c:	60a3      	str	r3, [r4, #8]
 801290e:	e7f4      	b.n	80128fa <__swsetup_r+0x92>
 8012910:	2000      	movs	r0, #0
 8012912:	e7f7      	b.n	8012904 <__swsetup_r+0x9c>
 8012914:	200000cc 	.word	0x200000cc

08012918 <__swhatbuf_r>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	460c      	mov	r4, r1
 801291c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012920:	2900      	cmp	r1, #0
 8012922:	b096      	sub	sp, #88	; 0x58
 8012924:	4615      	mov	r5, r2
 8012926:	461e      	mov	r6, r3
 8012928:	da0d      	bge.n	8012946 <__swhatbuf_r+0x2e>
 801292a:	89a3      	ldrh	r3, [r4, #12]
 801292c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012930:	f04f 0100 	mov.w	r1, #0
 8012934:	bf0c      	ite	eq
 8012936:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801293a:	2340      	movne	r3, #64	; 0x40
 801293c:	2000      	movs	r0, #0
 801293e:	6031      	str	r1, [r6, #0]
 8012940:	602b      	str	r3, [r5, #0]
 8012942:	b016      	add	sp, #88	; 0x58
 8012944:	bd70      	pop	{r4, r5, r6, pc}
 8012946:	466a      	mov	r2, sp
 8012948:	f000 f862 	bl	8012a10 <_fstat_r>
 801294c:	2800      	cmp	r0, #0
 801294e:	dbec      	blt.n	801292a <__swhatbuf_r+0x12>
 8012950:	9901      	ldr	r1, [sp, #4]
 8012952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801295a:	4259      	negs	r1, r3
 801295c:	4159      	adcs	r1, r3
 801295e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012962:	e7eb      	b.n	801293c <__swhatbuf_r+0x24>

08012964 <__smakebuf_r>:
 8012964:	898b      	ldrh	r3, [r1, #12]
 8012966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012968:	079d      	lsls	r5, r3, #30
 801296a:	4606      	mov	r6, r0
 801296c:	460c      	mov	r4, r1
 801296e:	d507      	bpl.n	8012980 <__smakebuf_r+0x1c>
 8012970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012974:	6023      	str	r3, [r4, #0]
 8012976:	6123      	str	r3, [r4, #16]
 8012978:	2301      	movs	r3, #1
 801297a:	6163      	str	r3, [r4, #20]
 801297c:	b002      	add	sp, #8
 801297e:	bd70      	pop	{r4, r5, r6, pc}
 8012980:	ab01      	add	r3, sp, #4
 8012982:	466a      	mov	r2, sp
 8012984:	f7ff ffc8 	bl	8012918 <__swhatbuf_r>
 8012988:	9900      	ldr	r1, [sp, #0]
 801298a:	4605      	mov	r5, r0
 801298c:	4630      	mov	r0, r6
 801298e:	f7fc ffc3 	bl	800f918 <_malloc_r>
 8012992:	b948      	cbnz	r0, 80129a8 <__smakebuf_r+0x44>
 8012994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012998:	059a      	lsls	r2, r3, #22
 801299a:	d4ef      	bmi.n	801297c <__smakebuf_r+0x18>
 801299c:	f023 0303 	bic.w	r3, r3, #3
 80129a0:	f043 0302 	orr.w	r3, r3, #2
 80129a4:	81a3      	strh	r3, [r4, #12]
 80129a6:	e7e3      	b.n	8012970 <__smakebuf_r+0xc>
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	6020      	str	r0, [r4, #0]
 80129ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129b0:	81a3      	strh	r3, [r4, #12]
 80129b2:	9b00      	ldr	r3, [sp, #0]
 80129b4:	6163      	str	r3, [r4, #20]
 80129b6:	9b01      	ldr	r3, [sp, #4]
 80129b8:	6120      	str	r0, [r4, #16]
 80129ba:	b15b      	cbz	r3, 80129d4 <__smakebuf_r+0x70>
 80129bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129c0:	4630      	mov	r0, r6
 80129c2:	f000 f837 	bl	8012a34 <_isatty_r>
 80129c6:	b128      	cbz	r0, 80129d4 <__smakebuf_r+0x70>
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	f023 0303 	bic.w	r3, r3, #3
 80129ce:	f043 0301 	orr.w	r3, r3, #1
 80129d2:	81a3      	strh	r3, [r4, #12]
 80129d4:	89a3      	ldrh	r3, [r4, #12]
 80129d6:	431d      	orrs	r5, r3
 80129d8:	81a5      	strh	r5, [r4, #12]
 80129da:	e7cf      	b.n	801297c <__smakebuf_r+0x18>

080129dc <memmove>:
 80129dc:	4288      	cmp	r0, r1
 80129de:	b510      	push	{r4, lr}
 80129e0:	eb01 0402 	add.w	r4, r1, r2
 80129e4:	d902      	bls.n	80129ec <memmove+0x10>
 80129e6:	4284      	cmp	r4, r0
 80129e8:	4623      	mov	r3, r4
 80129ea:	d807      	bhi.n	80129fc <memmove+0x20>
 80129ec:	1e43      	subs	r3, r0, #1
 80129ee:	42a1      	cmp	r1, r4
 80129f0:	d008      	beq.n	8012a04 <memmove+0x28>
 80129f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129fa:	e7f8      	b.n	80129ee <memmove+0x12>
 80129fc:	4402      	add	r2, r0
 80129fe:	4601      	mov	r1, r0
 8012a00:	428a      	cmp	r2, r1
 8012a02:	d100      	bne.n	8012a06 <memmove+0x2a>
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a0e:	e7f7      	b.n	8012a00 <memmove+0x24>

08012a10 <_fstat_r>:
 8012a10:	b538      	push	{r3, r4, r5, lr}
 8012a12:	4d07      	ldr	r5, [pc, #28]	; (8012a30 <_fstat_r+0x20>)
 8012a14:	2300      	movs	r3, #0
 8012a16:	4604      	mov	r4, r0
 8012a18:	4608      	mov	r0, r1
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	602b      	str	r3, [r5, #0]
 8012a1e:	f7f4 f832 	bl	8006a86 <_fstat>
 8012a22:	1c43      	adds	r3, r0, #1
 8012a24:	d102      	bne.n	8012a2c <_fstat_r+0x1c>
 8012a26:	682b      	ldr	r3, [r5, #0]
 8012a28:	b103      	cbz	r3, 8012a2c <_fstat_r+0x1c>
 8012a2a:	6023      	str	r3, [r4, #0]
 8012a2c:	bd38      	pop	{r3, r4, r5, pc}
 8012a2e:	bf00      	nop
 8012a30:	2000a034 	.word	0x2000a034

08012a34 <_isatty_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4d06      	ldr	r5, [pc, #24]	; (8012a50 <_isatty_r+0x1c>)
 8012a38:	2300      	movs	r3, #0
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	4608      	mov	r0, r1
 8012a3e:	602b      	str	r3, [r5, #0]
 8012a40:	f7f4 f831 	bl	8006aa6 <_isatty>
 8012a44:	1c43      	adds	r3, r0, #1
 8012a46:	d102      	bne.n	8012a4e <_isatty_r+0x1a>
 8012a48:	682b      	ldr	r3, [r5, #0]
 8012a4a:	b103      	cbz	r3, 8012a4e <_isatty_r+0x1a>
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	bd38      	pop	{r3, r4, r5, pc}
 8012a50:	2000a034 	.word	0x2000a034

08012a54 <abort>:
 8012a54:	b508      	push	{r3, lr}
 8012a56:	2006      	movs	r0, #6
 8012a58:	f000 f868 	bl	8012b2c <raise>
 8012a5c:	2001      	movs	r0, #1
 8012a5e:	f7f3 ffc3 	bl	80069e8 <_exit>

08012a62 <_calloc_r>:
 8012a62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a64:	fba1 2402 	umull	r2, r4, r1, r2
 8012a68:	b94c      	cbnz	r4, 8012a7e <_calloc_r+0x1c>
 8012a6a:	4611      	mov	r1, r2
 8012a6c:	9201      	str	r2, [sp, #4]
 8012a6e:	f7fc ff53 	bl	800f918 <_malloc_r>
 8012a72:	9a01      	ldr	r2, [sp, #4]
 8012a74:	4605      	mov	r5, r0
 8012a76:	b930      	cbnz	r0, 8012a86 <_calloc_r+0x24>
 8012a78:	4628      	mov	r0, r5
 8012a7a:	b003      	add	sp, #12
 8012a7c:	bd30      	pop	{r4, r5, pc}
 8012a7e:	220c      	movs	r2, #12
 8012a80:	6002      	str	r2, [r0, #0]
 8012a82:	2500      	movs	r5, #0
 8012a84:	e7f8      	b.n	8012a78 <_calloc_r+0x16>
 8012a86:	4621      	mov	r1, r4
 8012a88:	f7fd fc14 	bl	80102b4 <memset>
 8012a8c:	e7f4      	b.n	8012a78 <_calloc_r+0x16>

08012a8e <__ascii_mbtowc>:
 8012a8e:	b082      	sub	sp, #8
 8012a90:	b901      	cbnz	r1, 8012a94 <__ascii_mbtowc+0x6>
 8012a92:	a901      	add	r1, sp, #4
 8012a94:	b142      	cbz	r2, 8012aa8 <__ascii_mbtowc+0x1a>
 8012a96:	b14b      	cbz	r3, 8012aac <__ascii_mbtowc+0x1e>
 8012a98:	7813      	ldrb	r3, [r2, #0]
 8012a9a:	600b      	str	r3, [r1, #0]
 8012a9c:	7812      	ldrb	r2, [r2, #0]
 8012a9e:	1e10      	subs	r0, r2, #0
 8012aa0:	bf18      	it	ne
 8012aa2:	2001      	movne	r0, #1
 8012aa4:	b002      	add	sp, #8
 8012aa6:	4770      	bx	lr
 8012aa8:	4610      	mov	r0, r2
 8012aaa:	e7fb      	b.n	8012aa4 <__ascii_mbtowc+0x16>
 8012aac:	f06f 0001 	mvn.w	r0, #1
 8012ab0:	e7f8      	b.n	8012aa4 <__ascii_mbtowc+0x16>

08012ab2 <_malloc_usable_size_r>:
 8012ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ab6:	1f18      	subs	r0, r3, #4
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	bfbc      	itt	lt
 8012abc:	580b      	ldrlt	r3, [r1, r0]
 8012abe:	18c0      	addlt	r0, r0, r3
 8012ac0:	4770      	bx	lr

08012ac2 <__ascii_wctomb>:
 8012ac2:	b149      	cbz	r1, 8012ad8 <__ascii_wctomb+0x16>
 8012ac4:	2aff      	cmp	r2, #255	; 0xff
 8012ac6:	bf85      	ittet	hi
 8012ac8:	238a      	movhi	r3, #138	; 0x8a
 8012aca:	6003      	strhi	r3, [r0, #0]
 8012acc:	700a      	strbls	r2, [r1, #0]
 8012ace:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012ad2:	bf98      	it	ls
 8012ad4:	2001      	movls	r0, #1
 8012ad6:	4770      	bx	lr
 8012ad8:	4608      	mov	r0, r1
 8012ada:	4770      	bx	lr

08012adc <_raise_r>:
 8012adc:	291f      	cmp	r1, #31
 8012ade:	b538      	push	{r3, r4, r5, lr}
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	460d      	mov	r5, r1
 8012ae4:	d904      	bls.n	8012af0 <_raise_r+0x14>
 8012ae6:	2316      	movs	r3, #22
 8012ae8:	6003      	str	r3, [r0, #0]
 8012aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012aee:	bd38      	pop	{r3, r4, r5, pc}
 8012af0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012af2:	b112      	cbz	r2, 8012afa <_raise_r+0x1e>
 8012af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012af8:	b94b      	cbnz	r3, 8012b0e <_raise_r+0x32>
 8012afa:	4620      	mov	r0, r4
 8012afc:	f000 f830 	bl	8012b60 <_getpid_r>
 8012b00:	462a      	mov	r2, r5
 8012b02:	4601      	mov	r1, r0
 8012b04:	4620      	mov	r0, r4
 8012b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b0a:	f000 b817 	b.w	8012b3c <_kill_r>
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d00a      	beq.n	8012b28 <_raise_r+0x4c>
 8012b12:	1c59      	adds	r1, r3, #1
 8012b14:	d103      	bne.n	8012b1e <_raise_r+0x42>
 8012b16:	2316      	movs	r3, #22
 8012b18:	6003      	str	r3, [r0, #0]
 8012b1a:	2001      	movs	r0, #1
 8012b1c:	e7e7      	b.n	8012aee <_raise_r+0x12>
 8012b1e:	2400      	movs	r4, #0
 8012b20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b24:	4628      	mov	r0, r5
 8012b26:	4798      	blx	r3
 8012b28:	2000      	movs	r0, #0
 8012b2a:	e7e0      	b.n	8012aee <_raise_r+0x12>

08012b2c <raise>:
 8012b2c:	4b02      	ldr	r3, [pc, #8]	; (8012b38 <raise+0xc>)
 8012b2e:	4601      	mov	r1, r0
 8012b30:	6818      	ldr	r0, [r3, #0]
 8012b32:	f7ff bfd3 	b.w	8012adc <_raise_r>
 8012b36:	bf00      	nop
 8012b38:	200000cc 	.word	0x200000cc

08012b3c <_kill_r>:
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	4d07      	ldr	r5, [pc, #28]	; (8012b5c <_kill_r+0x20>)
 8012b40:	2300      	movs	r3, #0
 8012b42:	4604      	mov	r4, r0
 8012b44:	4608      	mov	r0, r1
 8012b46:	4611      	mov	r1, r2
 8012b48:	602b      	str	r3, [r5, #0]
 8012b4a:	f7f3 ff3d 	bl	80069c8 <_kill>
 8012b4e:	1c43      	adds	r3, r0, #1
 8012b50:	d102      	bne.n	8012b58 <_kill_r+0x1c>
 8012b52:	682b      	ldr	r3, [r5, #0]
 8012b54:	b103      	cbz	r3, 8012b58 <_kill_r+0x1c>
 8012b56:	6023      	str	r3, [r4, #0]
 8012b58:	bd38      	pop	{r3, r4, r5, pc}
 8012b5a:	bf00      	nop
 8012b5c:	2000a034 	.word	0x2000a034

08012b60 <_getpid_r>:
 8012b60:	f7f3 bf2a 	b.w	80069b8 <_getpid>

08012b64 <acos>:
 8012b64:	b538      	push	{r3, r4, r5, lr}
 8012b66:	ed2d 8b02 	vpush	{d8}
 8012b6a:	ec55 4b10 	vmov	r4, r5, d0
 8012b6e:	f000 f82f 	bl	8012bd0 <__ieee754_acos>
 8012b72:	4622      	mov	r2, r4
 8012b74:	462b      	mov	r3, r5
 8012b76:	4620      	mov	r0, r4
 8012b78:	4629      	mov	r1, r5
 8012b7a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b7e:	eef0 8a60 	vmov.f32	s17, s1
 8012b82:	f7ed fff3 	bl	8000b6c <__aeabi_dcmpun>
 8012b86:	b9a8      	cbnz	r0, 8012bb4 <acos+0x50>
 8012b88:	ec45 4b10 	vmov	d0, r4, r5
 8012b8c:	f000 faac 	bl	80130e8 <fabs>
 8012b90:	4b0c      	ldr	r3, [pc, #48]	; (8012bc4 <acos+0x60>)
 8012b92:	ec51 0b10 	vmov	r0, r1, d0
 8012b96:	2200      	movs	r2, #0
 8012b98:	f7ed ffde 	bl	8000b58 <__aeabi_dcmpgt>
 8012b9c:	b150      	cbz	r0, 8012bb4 <acos+0x50>
 8012b9e:	f7fd fbeb 	bl	8010378 <__errno>
 8012ba2:	ecbd 8b02 	vpop	{d8}
 8012ba6:	2321      	movs	r3, #33	; 0x21
 8012ba8:	6003      	str	r3, [r0, #0]
 8012baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bae:	4806      	ldr	r0, [pc, #24]	; (8012bc8 <acos+0x64>)
 8012bb0:	f000 bc02 	b.w	80133b8 <nan>
 8012bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8012bb8:	eef0 0a68 	vmov.f32	s1, s17
 8012bbc:	ecbd 8b02 	vpop	{d8}
 8012bc0:	bd38      	pop	{r3, r4, r5, pc}
 8012bc2:	bf00      	nop
 8012bc4:	3ff00000 	.word	0x3ff00000
 8012bc8:	0801914e 	.word	0x0801914e
 8012bcc:	00000000 	.word	0x00000000

08012bd0 <__ieee754_acos>:
 8012bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd4:	ec55 4b10 	vmov	r4, r5, d0
 8012bd8:	49b7      	ldr	r1, [pc, #732]	; (8012eb8 <__ieee754_acos+0x2e8>)
 8012bda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bde:	428b      	cmp	r3, r1
 8012be0:	dd1b      	ble.n	8012c1a <__ieee754_acos+0x4a>
 8012be2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8012be6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012bea:	4323      	orrs	r3, r4
 8012bec:	d106      	bne.n	8012bfc <__ieee754_acos+0x2c>
 8012bee:	2d00      	cmp	r5, #0
 8012bf0:	f300 8211 	bgt.w	8013016 <__ieee754_acos+0x446>
 8012bf4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8012e50 <__ieee754_acos+0x280>
 8012bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfc:	ee10 2a10 	vmov	r2, s0
 8012c00:	462b      	mov	r3, r5
 8012c02:	ee10 0a10 	vmov	r0, s0
 8012c06:	4629      	mov	r1, r5
 8012c08:	f7ed fb5e 	bl	80002c8 <__aeabi_dsub>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	460b      	mov	r3, r1
 8012c10:	f7ed fe3c 	bl	800088c <__aeabi_ddiv>
 8012c14:	ec41 0b10 	vmov	d0, r0, r1
 8012c18:	e7ee      	b.n	8012bf8 <__ieee754_acos+0x28>
 8012c1a:	49a8      	ldr	r1, [pc, #672]	; (8012ebc <__ieee754_acos+0x2ec>)
 8012c1c:	428b      	cmp	r3, r1
 8012c1e:	f300 8087 	bgt.w	8012d30 <__ieee754_acos+0x160>
 8012c22:	4aa7      	ldr	r2, [pc, #668]	; (8012ec0 <__ieee754_acos+0x2f0>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	f340 81f9 	ble.w	801301c <__ieee754_acos+0x44c>
 8012c2a:	ee10 2a10 	vmov	r2, s0
 8012c2e:	ee10 0a10 	vmov	r0, s0
 8012c32:	462b      	mov	r3, r5
 8012c34:	4629      	mov	r1, r5
 8012c36:	f7ed fcff 	bl	8000638 <__aeabi_dmul>
 8012c3a:	a387      	add	r3, pc, #540	; (adr r3, 8012e58 <__ieee754_acos+0x288>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	4606      	mov	r6, r0
 8012c42:	460f      	mov	r7, r1
 8012c44:	f7ed fcf8 	bl	8000638 <__aeabi_dmul>
 8012c48:	a385      	add	r3, pc, #532	; (adr r3, 8012e60 <__ieee754_acos+0x290>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4e:	f7ed fb3d 	bl	80002cc <__adddf3>
 8012c52:	4632      	mov	r2, r6
 8012c54:	463b      	mov	r3, r7
 8012c56:	f7ed fcef 	bl	8000638 <__aeabi_dmul>
 8012c5a:	a383      	add	r3, pc, #524	; (adr r3, 8012e68 <__ieee754_acos+0x298>)
 8012c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c60:	f7ed fb32 	bl	80002c8 <__aeabi_dsub>
 8012c64:	4632      	mov	r2, r6
 8012c66:	463b      	mov	r3, r7
 8012c68:	f7ed fce6 	bl	8000638 <__aeabi_dmul>
 8012c6c:	a380      	add	r3, pc, #512	; (adr r3, 8012e70 <__ieee754_acos+0x2a0>)
 8012c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c72:	f7ed fb2b 	bl	80002cc <__adddf3>
 8012c76:	4632      	mov	r2, r6
 8012c78:	463b      	mov	r3, r7
 8012c7a:	f7ed fcdd 	bl	8000638 <__aeabi_dmul>
 8012c7e:	a37e      	add	r3, pc, #504	; (adr r3, 8012e78 <__ieee754_acos+0x2a8>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	f7ed fb20 	bl	80002c8 <__aeabi_dsub>
 8012c88:	4632      	mov	r2, r6
 8012c8a:	463b      	mov	r3, r7
 8012c8c:	f7ed fcd4 	bl	8000638 <__aeabi_dmul>
 8012c90:	a37b      	add	r3, pc, #492	; (adr r3, 8012e80 <__ieee754_acos+0x2b0>)
 8012c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c96:	f7ed fb19 	bl	80002cc <__adddf3>
 8012c9a:	4632      	mov	r2, r6
 8012c9c:	463b      	mov	r3, r7
 8012c9e:	f7ed fccb 	bl	8000638 <__aeabi_dmul>
 8012ca2:	a379      	add	r3, pc, #484	; (adr r3, 8012e88 <__ieee754_acos+0x2b8>)
 8012ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca8:	4680      	mov	r8, r0
 8012caa:	4689      	mov	r9, r1
 8012cac:	4630      	mov	r0, r6
 8012cae:	4639      	mov	r1, r7
 8012cb0:	f7ed fcc2 	bl	8000638 <__aeabi_dmul>
 8012cb4:	a376      	add	r3, pc, #472	; (adr r3, 8012e90 <__ieee754_acos+0x2c0>)
 8012cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cba:	f7ed fb05 	bl	80002c8 <__aeabi_dsub>
 8012cbe:	4632      	mov	r2, r6
 8012cc0:	463b      	mov	r3, r7
 8012cc2:	f7ed fcb9 	bl	8000638 <__aeabi_dmul>
 8012cc6:	a374      	add	r3, pc, #464	; (adr r3, 8012e98 <__ieee754_acos+0x2c8>)
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	f7ed fafe 	bl	80002cc <__adddf3>
 8012cd0:	4632      	mov	r2, r6
 8012cd2:	463b      	mov	r3, r7
 8012cd4:	f7ed fcb0 	bl	8000638 <__aeabi_dmul>
 8012cd8:	a371      	add	r3, pc, #452	; (adr r3, 8012ea0 <__ieee754_acos+0x2d0>)
 8012cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cde:	f7ed faf3 	bl	80002c8 <__aeabi_dsub>
 8012ce2:	4632      	mov	r2, r6
 8012ce4:	463b      	mov	r3, r7
 8012ce6:	f7ed fca7 	bl	8000638 <__aeabi_dmul>
 8012cea:	4b76      	ldr	r3, [pc, #472]	; (8012ec4 <__ieee754_acos+0x2f4>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	f7ed faed 	bl	80002cc <__adddf3>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	4640      	mov	r0, r8
 8012cf8:	4649      	mov	r1, r9
 8012cfa:	f7ed fdc7 	bl	800088c <__aeabi_ddiv>
 8012cfe:	4622      	mov	r2, r4
 8012d00:	462b      	mov	r3, r5
 8012d02:	f7ed fc99 	bl	8000638 <__aeabi_dmul>
 8012d06:	4602      	mov	r2, r0
 8012d08:	460b      	mov	r3, r1
 8012d0a:	a167      	add	r1, pc, #412	; (adr r1, 8012ea8 <__ieee754_acos+0x2d8>)
 8012d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d10:	f7ed fada 	bl	80002c8 <__aeabi_dsub>
 8012d14:	4602      	mov	r2, r0
 8012d16:	460b      	mov	r3, r1
 8012d18:	4620      	mov	r0, r4
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	f7ed fad4 	bl	80002c8 <__aeabi_dsub>
 8012d20:	4602      	mov	r2, r0
 8012d22:	460b      	mov	r3, r1
 8012d24:	a162      	add	r1, pc, #392	; (adr r1, 8012eb0 <__ieee754_acos+0x2e0>)
 8012d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d2a:	f7ed facd 	bl	80002c8 <__aeabi_dsub>
 8012d2e:	e771      	b.n	8012c14 <__ieee754_acos+0x44>
 8012d30:	2d00      	cmp	r5, #0
 8012d32:	f280 80cb 	bge.w	8012ecc <__ieee754_acos+0x2fc>
 8012d36:	ee10 0a10 	vmov	r0, s0
 8012d3a:	4b62      	ldr	r3, [pc, #392]	; (8012ec4 <__ieee754_acos+0x2f4>)
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ed fac4 	bl	80002cc <__adddf3>
 8012d44:	4b60      	ldr	r3, [pc, #384]	; (8012ec8 <__ieee754_acos+0x2f8>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	f7ed fc76 	bl	8000638 <__aeabi_dmul>
 8012d4c:	a342      	add	r3, pc, #264	; (adr r3, 8012e58 <__ieee754_acos+0x288>)
 8012d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d52:	4604      	mov	r4, r0
 8012d54:	460d      	mov	r5, r1
 8012d56:	f7ed fc6f 	bl	8000638 <__aeabi_dmul>
 8012d5a:	a341      	add	r3, pc, #260	; (adr r3, 8012e60 <__ieee754_acos+0x290>)
 8012d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d60:	f7ed fab4 	bl	80002cc <__adddf3>
 8012d64:	4622      	mov	r2, r4
 8012d66:	462b      	mov	r3, r5
 8012d68:	f7ed fc66 	bl	8000638 <__aeabi_dmul>
 8012d6c:	a33e      	add	r3, pc, #248	; (adr r3, 8012e68 <__ieee754_acos+0x298>)
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	f7ed faa9 	bl	80002c8 <__aeabi_dsub>
 8012d76:	4622      	mov	r2, r4
 8012d78:	462b      	mov	r3, r5
 8012d7a:	f7ed fc5d 	bl	8000638 <__aeabi_dmul>
 8012d7e:	a33c      	add	r3, pc, #240	; (adr r3, 8012e70 <__ieee754_acos+0x2a0>)
 8012d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d84:	f7ed faa2 	bl	80002cc <__adddf3>
 8012d88:	4622      	mov	r2, r4
 8012d8a:	462b      	mov	r3, r5
 8012d8c:	f7ed fc54 	bl	8000638 <__aeabi_dmul>
 8012d90:	a339      	add	r3, pc, #228	; (adr r3, 8012e78 <__ieee754_acos+0x2a8>)
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	f7ed fa97 	bl	80002c8 <__aeabi_dsub>
 8012d9a:	4622      	mov	r2, r4
 8012d9c:	462b      	mov	r3, r5
 8012d9e:	f7ed fc4b 	bl	8000638 <__aeabi_dmul>
 8012da2:	a337      	add	r3, pc, #220	; (adr r3, 8012e80 <__ieee754_acos+0x2b0>)
 8012da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da8:	f7ed fa90 	bl	80002cc <__adddf3>
 8012dac:	4622      	mov	r2, r4
 8012dae:	462b      	mov	r3, r5
 8012db0:	f7ed fc42 	bl	8000638 <__aeabi_dmul>
 8012db4:	ec45 4b10 	vmov	d0, r4, r5
 8012db8:	4680      	mov	r8, r0
 8012dba:	4689      	mov	r9, r1
 8012dbc:	f000 f99e 	bl	80130fc <__ieee754_sqrt>
 8012dc0:	a331      	add	r3, pc, #196	; (adr r3, 8012e88 <__ieee754_acos+0x2b8>)
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	4629      	mov	r1, r5
 8012dca:	ec57 6b10 	vmov	r6, r7, d0
 8012dce:	f7ed fc33 	bl	8000638 <__aeabi_dmul>
 8012dd2:	a32f      	add	r3, pc, #188	; (adr r3, 8012e90 <__ieee754_acos+0x2c0>)
 8012dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd8:	f7ed fa76 	bl	80002c8 <__aeabi_dsub>
 8012ddc:	4622      	mov	r2, r4
 8012dde:	462b      	mov	r3, r5
 8012de0:	f7ed fc2a 	bl	8000638 <__aeabi_dmul>
 8012de4:	a32c      	add	r3, pc, #176	; (adr r3, 8012e98 <__ieee754_acos+0x2c8>)
 8012de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dea:	f7ed fa6f 	bl	80002cc <__adddf3>
 8012dee:	4622      	mov	r2, r4
 8012df0:	462b      	mov	r3, r5
 8012df2:	f7ed fc21 	bl	8000638 <__aeabi_dmul>
 8012df6:	a32a      	add	r3, pc, #168	; (adr r3, 8012ea0 <__ieee754_acos+0x2d0>)
 8012df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfc:	f7ed fa64 	bl	80002c8 <__aeabi_dsub>
 8012e00:	4622      	mov	r2, r4
 8012e02:	462b      	mov	r3, r5
 8012e04:	f7ed fc18 	bl	8000638 <__aeabi_dmul>
 8012e08:	4b2e      	ldr	r3, [pc, #184]	; (8012ec4 <__ieee754_acos+0x2f4>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f7ed fa5e 	bl	80002cc <__adddf3>
 8012e10:	4602      	mov	r2, r0
 8012e12:	460b      	mov	r3, r1
 8012e14:	4640      	mov	r0, r8
 8012e16:	4649      	mov	r1, r9
 8012e18:	f7ed fd38 	bl	800088c <__aeabi_ddiv>
 8012e1c:	4632      	mov	r2, r6
 8012e1e:	463b      	mov	r3, r7
 8012e20:	f7ed fc0a 	bl	8000638 <__aeabi_dmul>
 8012e24:	a320      	add	r3, pc, #128	; (adr r3, 8012ea8 <__ieee754_acos+0x2d8>)
 8012e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2a:	f7ed fa4d 	bl	80002c8 <__aeabi_dsub>
 8012e2e:	4632      	mov	r2, r6
 8012e30:	463b      	mov	r3, r7
 8012e32:	f7ed fa4b 	bl	80002cc <__adddf3>
 8012e36:	4602      	mov	r2, r0
 8012e38:	460b      	mov	r3, r1
 8012e3a:	f7ed fa47 	bl	80002cc <__adddf3>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	a103      	add	r1, pc, #12	; (adr r1, 8012e50 <__ieee754_acos+0x280>)
 8012e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e48:	e76f      	b.n	8012d2a <__ieee754_acos+0x15a>
 8012e4a:	bf00      	nop
 8012e4c:	f3af 8000 	nop.w
 8012e50:	54442d18 	.word	0x54442d18
 8012e54:	400921fb 	.word	0x400921fb
 8012e58:	0dfdf709 	.word	0x0dfdf709
 8012e5c:	3f023de1 	.word	0x3f023de1
 8012e60:	7501b288 	.word	0x7501b288
 8012e64:	3f49efe0 	.word	0x3f49efe0
 8012e68:	b5688f3b 	.word	0xb5688f3b
 8012e6c:	3fa48228 	.word	0x3fa48228
 8012e70:	0e884455 	.word	0x0e884455
 8012e74:	3fc9c155 	.word	0x3fc9c155
 8012e78:	03eb6f7d 	.word	0x03eb6f7d
 8012e7c:	3fd4d612 	.word	0x3fd4d612
 8012e80:	55555555 	.word	0x55555555
 8012e84:	3fc55555 	.word	0x3fc55555
 8012e88:	b12e9282 	.word	0xb12e9282
 8012e8c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012e90:	1b8d0159 	.word	0x1b8d0159
 8012e94:	3fe6066c 	.word	0x3fe6066c
 8012e98:	9c598ac8 	.word	0x9c598ac8
 8012e9c:	40002ae5 	.word	0x40002ae5
 8012ea0:	1c8a2d4b 	.word	0x1c8a2d4b
 8012ea4:	40033a27 	.word	0x40033a27
 8012ea8:	33145c07 	.word	0x33145c07
 8012eac:	3c91a626 	.word	0x3c91a626
 8012eb0:	54442d18 	.word	0x54442d18
 8012eb4:	3ff921fb 	.word	0x3ff921fb
 8012eb8:	3fefffff 	.word	0x3fefffff
 8012ebc:	3fdfffff 	.word	0x3fdfffff
 8012ec0:	3c600000 	.word	0x3c600000
 8012ec4:	3ff00000 	.word	0x3ff00000
 8012ec8:	3fe00000 	.word	0x3fe00000
 8012ecc:	ee10 2a10 	vmov	r2, s0
 8012ed0:	462b      	mov	r3, r5
 8012ed2:	496d      	ldr	r1, [pc, #436]	; (8013088 <__ieee754_acos+0x4b8>)
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	f7ed f9f7 	bl	80002c8 <__aeabi_dsub>
 8012eda:	4b6c      	ldr	r3, [pc, #432]	; (801308c <__ieee754_acos+0x4bc>)
 8012edc:	2200      	movs	r2, #0
 8012ede:	f7ed fbab 	bl	8000638 <__aeabi_dmul>
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	460d      	mov	r5, r1
 8012ee6:	ec45 4b10 	vmov	d0, r4, r5
 8012eea:	f000 f907 	bl	80130fc <__ieee754_sqrt>
 8012eee:	a34e      	add	r3, pc, #312	; (adr r3, 8013028 <__ieee754_acos+0x458>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	4629      	mov	r1, r5
 8012ef8:	ec59 8b10 	vmov	r8, r9, d0
 8012efc:	f7ed fb9c 	bl	8000638 <__aeabi_dmul>
 8012f00:	a34b      	add	r3, pc, #300	; (adr r3, 8013030 <__ieee754_acos+0x460>)
 8012f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f06:	f7ed f9e1 	bl	80002cc <__adddf3>
 8012f0a:	4622      	mov	r2, r4
 8012f0c:	462b      	mov	r3, r5
 8012f0e:	f7ed fb93 	bl	8000638 <__aeabi_dmul>
 8012f12:	a349      	add	r3, pc, #292	; (adr r3, 8013038 <__ieee754_acos+0x468>)
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	f7ed f9d6 	bl	80002c8 <__aeabi_dsub>
 8012f1c:	4622      	mov	r2, r4
 8012f1e:	462b      	mov	r3, r5
 8012f20:	f7ed fb8a 	bl	8000638 <__aeabi_dmul>
 8012f24:	a346      	add	r3, pc, #280	; (adr r3, 8013040 <__ieee754_acos+0x470>)
 8012f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2a:	f7ed f9cf 	bl	80002cc <__adddf3>
 8012f2e:	4622      	mov	r2, r4
 8012f30:	462b      	mov	r3, r5
 8012f32:	f7ed fb81 	bl	8000638 <__aeabi_dmul>
 8012f36:	a344      	add	r3, pc, #272	; (adr r3, 8013048 <__ieee754_acos+0x478>)
 8012f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3c:	f7ed f9c4 	bl	80002c8 <__aeabi_dsub>
 8012f40:	4622      	mov	r2, r4
 8012f42:	462b      	mov	r3, r5
 8012f44:	f7ed fb78 	bl	8000638 <__aeabi_dmul>
 8012f48:	a341      	add	r3, pc, #260	; (adr r3, 8013050 <__ieee754_acos+0x480>)
 8012f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4e:	f7ed f9bd 	bl	80002cc <__adddf3>
 8012f52:	4622      	mov	r2, r4
 8012f54:	462b      	mov	r3, r5
 8012f56:	f7ed fb6f 	bl	8000638 <__aeabi_dmul>
 8012f5a:	a33f      	add	r3, pc, #252	; (adr r3, 8013058 <__ieee754_acos+0x488>)
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	4682      	mov	sl, r0
 8012f62:	468b      	mov	fp, r1
 8012f64:	4620      	mov	r0, r4
 8012f66:	4629      	mov	r1, r5
 8012f68:	f7ed fb66 	bl	8000638 <__aeabi_dmul>
 8012f6c:	a33c      	add	r3, pc, #240	; (adr r3, 8013060 <__ieee754_acos+0x490>)
 8012f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f72:	f7ed f9a9 	bl	80002c8 <__aeabi_dsub>
 8012f76:	4622      	mov	r2, r4
 8012f78:	462b      	mov	r3, r5
 8012f7a:	f7ed fb5d 	bl	8000638 <__aeabi_dmul>
 8012f7e:	a33a      	add	r3, pc, #232	; (adr r3, 8013068 <__ieee754_acos+0x498>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	f7ed f9a2 	bl	80002cc <__adddf3>
 8012f88:	4622      	mov	r2, r4
 8012f8a:	462b      	mov	r3, r5
 8012f8c:	f7ed fb54 	bl	8000638 <__aeabi_dmul>
 8012f90:	a337      	add	r3, pc, #220	; (adr r3, 8013070 <__ieee754_acos+0x4a0>)
 8012f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f96:	f7ed f997 	bl	80002c8 <__aeabi_dsub>
 8012f9a:	4622      	mov	r2, r4
 8012f9c:	462b      	mov	r3, r5
 8012f9e:	f7ed fb4b 	bl	8000638 <__aeabi_dmul>
 8012fa2:	4b39      	ldr	r3, [pc, #228]	; (8013088 <__ieee754_acos+0x4b8>)
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f7ed f991 	bl	80002cc <__adddf3>
 8012faa:	4602      	mov	r2, r0
 8012fac:	460b      	mov	r3, r1
 8012fae:	4650      	mov	r0, sl
 8012fb0:	4659      	mov	r1, fp
 8012fb2:	f7ed fc6b 	bl	800088c <__aeabi_ddiv>
 8012fb6:	4642      	mov	r2, r8
 8012fb8:	464b      	mov	r3, r9
 8012fba:	f7ed fb3d 	bl	8000638 <__aeabi_dmul>
 8012fbe:	2600      	movs	r6, #0
 8012fc0:	4682      	mov	sl, r0
 8012fc2:	468b      	mov	fp, r1
 8012fc4:	4632      	mov	r2, r6
 8012fc6:	464b      	mov	r3, r9
 8012fc8:	4630      	mov	r0, r6
 8012fca:	4649      	mov	r1, r9
 8012fcc:	f7ed fb34 	bl	8000638 <__aeabi_dmul>
 8012fd0:	4602      	mov	r2, r0
 8012fd2:	460b      	mov	r3, r1
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	f7ed f976 	bl	80002c8 <__aeabi_dsub>
 8012fdc:	4632      	mov	r2, r6
 8012fde:	4604      	mov	r4, r0
 8012fe0:	460d      	mov	r5, r1
 8012fe2:	464b      	mov	r3, r9
 8012fe4:	4640      	mov	r0, r8
 8012fe6:	4649      	mov	r1, r9
 8012fe8:	f7ed f970 	bl	80002cc <__adddf3>
 8012fec:	4602      	mov	r2, r0
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	f7ed fc4a 	bl	800088c <__aeabi_ddiv>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	4650      	mov	r0, sl
 8012ffe:	4659      	mov	r1, fp
 8013000:	f7ed f964 	bl	80002cc <__adddf3>
 8013004:	4632      	mov	r2, r6
 8013006:	464b      	mov	r3, r9
 8013008:	f7ed f960 	bl	80002cc <__adddf3>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	f7ed f95c 	bl	80002cc <__adddf3>
 8013014:	e5fe      	b.n	8012c14 <__ieee754_acos+0x44>
 8013016:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8013078 <__ieee754_acos+0x4a8>
 801301a:	e5ed      	b.n	8012bf8 <__ieee754_acos+0x28>
 801301c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8013080 <__ieee754_acos+0x4b0>
 8013020:	e5ea      	b.n	8012bf8 <__ieee754_acos+0x28>
 8013022:	bf00      	nop
 8013024:	f3af 8000 	nop.w
 8013028:	0dfdf709 	.word	0x0dfdf709
 801302c:	3f023de1 	.word	0x3f023de1
 8013030:	7501b288 	.word	0x7501b288
 8013034:	3f49efe0 	.word	0x3f49efe0
 8013038:	b5688f3b 	.word	0xb5688f3b
 801303c:	3fa48228 	.word	0x3fa48228
 8013040:	0e884455 	.word	0x0e884455
 8013044:	3fc9c155 	.word	0x3fc9c155
 8013048:	03eb6f7d 	.word	0x03eb6f7d
 801304c:	3fd4d612 	.word	0x3fd4d612
 8013050:	55555555 	.word	0x55555555
 8013054:	3fc55555 	.word	0x3fc55555
 8013058:	b12e9282 	.word	0xb12e9282
 801305c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013060:	1b8d0159 	.word	0x1b8d0159
 8013064:	3fe6066c 	.word	0x3fe6066c
 8013068:	9c598ac8 	.word	0x9c598ac8
 801306c:	40002ae5 	.word	0x40002ae5
 8013070:	1c8a2d4b 	.word	0x1c8a2d4b
 8013074:	40033a27 	.word	0x40033a27
	...
 8013080:	54442d18 	.word	0x54442d18
 8013084:	3ff921fb 	.word	0x3ff921fb
 8013088:	3ff00000 	.word	0x3ff00000
 801308c:	3fe00000 	.word	0x3fe00000

08013090 <sqrt>:
 8013090:	b538      	push	{r3, r4, r5, lr}
 8013092:	ed2d 8b02 	vpush	{d8}
 8013096:	ec55 4b10 	vmov	r4, r5, d0
 801309a:	f000 f82f 	bl	80130fc <__ieee754_sqrt>
 801309e:	4622      	mov	r2, r4
 80130a0:	462b      	mov	r3, r5
 80130a2:	4620      	mov	r0, r4
 80130a4:	4629      	mov	r1, r5
 80130a6:	eeb0 8a40 	vmov.f32	s16, s0
 80130aa:	eef0 8a60 	vmov.f32	s17, s1
 80130ae:	f7ed fd5d 	bl	8000b6c <__aeabi_dcmpun>
 80130b2:	b990      	cbnz	r0, 80130da <sqrt+0x4a>
 80130b4:	2200      	movs	r2, #0
 80130b6:	2300      	movs	r3, #0
 80130b8:	4620      	mov	r0, r4
 80130ba:	4629      	mov	r1, r5
 80130bc:	f7ed fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80130c0:	b158      	cbz	r0, 80130da <sqrt+0x4a>
 80130c2:	f7fd f959 	bl	8010378 <__errno>
 80130c6:	2321      	movs	r3, #33	; 0x21
 80130c8:	6003      	str	r3, [r0, #0]
 80130ca:	2200      	movs	r2, #0
 80130cc:	2300      	movs	r3, #0
 80130ce:	4610      	mov	r0, r2
 80130d0:	4619      	mov	r1, r3
 80130d2:	f7ed fbdb 	bl	800088c <__aeabi_ddiv>
 80130d6:	ec41 0b18 	vmov	d8, r0, r1
 80130da:	eeb0 0a48 	vmov.f32	s0, s16
 80130de:	eef0 0a68 	vmov.f32	s1, s17
 80130e2:	ecbd 8b02 	vpop	{d8}
 80130e6:	bd38      	pop	{r3, r4, r5, pc}

080130e8 <fabs>:
 80130e8:	ec51 0b10 	vmov	r0, r1, d0
 80130ec:	ee10 2a10 	vmov	r2, s0
 80130f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130f4:	ec43 2b10 	vmov	d0, r2, r3
 80130f8:	4770      	bx	lr
	...

080130fc <__ieee754_sqrt>:
 80130fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013100:	ec55 4b10 	vmov	r4, r5, d0
 8013104:	4e67      	ldr	r6, [pc, #412]	; (80132a4 <__ieee754_sqrt+0x1a8>)
 8013106:	43ae      	bics	r6, r5
 8013108:	ee10 0a10 	vmov	r0, s0
 801310c:	ee10 2a10 	vmov	r2, s0
 8013110:	4629      	mov	r1, r5
 8013112:	462b      	mov	r3, r5
 8013114:	d10d      	bne.n	8013132 <__ieee754_sqrt+0x36>
 8013116:	f7ed fa8f 	bl	8000638 <__aeabi_dmul>
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	4620      	mov	r0, r4
 8013120:	4629      	mov	r1, r5
 8013122:	f7ed f8d3 	bl	80002cc <__adddf3>
 8013126:	4604      	mov	r4, r0
 8013128:	460d      	mov	r5, r1
 801312a:	ec45 4b10 	vmov	d0, r4, r5
 801312e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013132:	2d00      	cmp	r5, #0
 8013134:	dc0b      	bgt.n	801314e <__ieee754_sqrt+0x52>
 8013136:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801313a:	4326      	orrs	r6, r4
 801313c:	d0f5      	beq.n	801312a <__ieee754_sqrt+0x2e>
 801313e:	b135      	cbz	r5, 801314e <__ieee754_sqrt+0x52>
 8013140:	f7ed f8c2 	bl	80002c8 <__aeabi_dsub>
 8013144:	4602      	mov	r2, r0
 8013146:	460b      	mov	r3, r1
 8013148:	f7ed fba0 	bl	800088c <__aeabi_ddiv>
 801314c:	e7eb      	b.n	8013126 <__ieee754_sqrt+0x2a>
 801314e:	1509      	asrs	r1, r1, #20
 8013150:	f000 808d 	beq.w	801326e <__ieee754_sqrt+0x172>
 8013154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013158:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801315c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013160:	07c9      	lsls	r1, r1, #31
 8013162:	bf5c      	itt	pl
 8013164:	005b      	lslpl	r3, r3, #1
 8013166:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801316a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801316e:	bf58      	it	pl
 8013170:	0052      	lslpl	r2, r2, #1
 8013172:	2500      	movs	r5, #0
 8013174:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013178:	1076      	asrs	r6, r6, #1
 801317a:	0052      	lsls	r2, r2, #1
 801317c:	f04f 0e16 	mov.w	lr, #22
 8013180:	46ac      	mov	ip, r5
 8013182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013186:	eb0c 0001 	add.w	r0, ip, r1
 801318a:	4298      	cmp	r0, r3
 801318c:	bfde      	ittt	le
 801318e:	1a1b      	suble	r3, r3, r0
 8013190:	eb00 0c01 	addle.w	ip, r0, r1
 8013194:	186d      	addle	r5, r5, r1
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	f1be 0e01 	subs.w	lr, lr, #1
 801319c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80131a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80131a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80131a8:	d1ed      	bne.n	8013186 <__ieee754_sqrt+0x8a>
 80131aa:	4674      	mov	r4, lr
 80131ac:	2720      	movs	r7, #32
 80131ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80131b2:	4563      	cmp	r3, ip
 80131b4:	eb01 000e 	add.w	r0, r1, lr
 80131b8:	dc02      	bgt.n	80131c0 <__ieee754_sqrt+0xc4>
 80131ba:	d113      	bne.n	80131e4 <__ieee754_sqrt+0xe8>
 80131bc:	4290      	cmp	r0, r2
 80131be:	d811      	bhi.n	80131e4 <__ieee754_sqrt+0xe8>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	eb00 0e01 	add.w	lr, r0, r1
 80131c6:	da57      	bge.n	8013278 <__ieee754_sqrt+0x17c>
 80131c8:	f1be 0f00 	cmp.w	lr, #0
 80131cc:	db54      	blt.n	8013278 <__ieee754_sqrt+0x17c>
 80131ce:	f10c 0801 	add.w	r8, ip, #1
 80131d2:	eba3 030c 	sub.w	r3, r3, ip
 80131d6:	4290      	cmp	r0, r2
 80131d8:	bf88      	it	hi
 80131da:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80131de:	1a12      	subs	r2, r2, r0
 80131e0:	440c      	add	r4, r1
 80131e2:	46c4      	mov	ip, r8
 80131e4:	005b      	lsls	r3, r3, #1
 80131e6:	3f01      	subs	r7, #1
 80131e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80131ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80131f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80131f4:	d1dd      	bne.n	80131b2 <__ieee754_sqrt+0xb6>
 80131f6:	4313      	orrs	r3, r2
 80131f8:	d01b      	beq.n	8013232 <__ieee754_sqrt+0x136>
 80131fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80132a8 <__ieee754_sqrt+0x1ac>
 80131fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80132ac <__ieee754_sqrt+0x1b0>
 8013202:	e9da 0100 	ldrd	r0, r1, [sl]
 8013206:	e9db 2300 	ldrd	r2, r3, [fp]
 801320a:	f7ed f85d 	bl	80002c8 <__aeabi_dsub>
 801320e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013212:	4602      	mov	r2, r0
 8013214:	460b      	mov	r3, r1
 8013216:	4640      	mov	r0, r8
 8013218:	4649      	mov	r1, r9
 801321a:	f7ed fc89 	bl	8000b30 <__aeabi_dcmple>
 801321e:	b140      	cbz	r0, 8013232 <__ieee754_sqrt+0x136>
 8013220:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8013224:	e9da 0100 	ldrd	r0, r1, [sl]
 8013228:	e9db 2300 	ldrd	r2, r3, [fp]
 801322c:	d126      	bne.n	801327c <__ieee754_sqrt+0x180>
 801322e:	3501      	adds	r5, #1
 8013230:	463c      	mov	r4, r7
 8013232:	106a      	asrs	r2, r5, #1
 8013234:	0863      	lsrs	r3, r4, #1
 8013236:	07e9      	lsls	r1, r5, #31
 8013238:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801323c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013240:	bf48      	it	mi
 8013242:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013246:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801324a:	461c      	mov	r4, r3
 801324c:	e76d      	b.n	801312a <__ieee754_sqrt+0x2e>
 801324e:	0ad3      	lsrs	r3, r2, #11
 8013250:	3815      	subs	r0, #21
 8013252:	0552      	lsls	r2, r2, #21
 8013254:	2b00      	cmp	r3, #0
 8013256:	d0fa      	beq.n	801324e <__ieee754_sqrt+0x152>
 8013258:	02dc      	lsls	r4, r3, #11
 801325a:	d50a      	bpl.n	8013272 <__ieee754_sqrt+0x176>
 801325c:	f1c1 0420 	rsb	r4, r1, #32
 8013260:	fa22 f404 	lsr.w	r4, r2, r4
 8013264:	1e4d      	subs	r5, r1, #1
 8013266:	408a      	lsls	r2, r1
 8013268:	4323      	orrs	r3, r4
 801326a:	1b41      	subs	r1, r0, r5
 801326c:	e772      	b.n	8013154 <__ieee754_sqrt+0x58>
 801326e:	4608      	mov	r0, r1
 8013270:	e7f0      	b.n	8013254 <__ieee754_sqrt+0x158>
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	3101      	adds	r1, #1
 8013276:	e7ef      	b.n	8013258 <__ieee754_sqrt+0x15c>
 8013278:	46e0      	mov	r8, ip
 801327a:	e7aa      	b.n	80131d2 <__ieee754_sqrt+0xd6>
 801327c:	f7ed f826 	bl	80002cc <__adddf3>
 8013280:	e9da 8900 	ldrd	r8, r9, [sl]
 8013284:	4602      	mov	r2, r0
 8013286:	460b      	mov	r3, r1
 8013288:	4640      	mov	r0, r8
 801328a:	4649      	mov	r1, r9
 801328c:	f7ed fc46 	bl	8000b1c <__aeabi_dcmplt>
 8013290:	b120      	cbz	r0, 801329c <__ieee754_sqrt+0x1a0>
 8013292:	1ca0      	adds	r0, r4, #2
 8013294:	bf08      	it	eq
 8013296:	3501      	addeq	r5, #1
 8013298:	3402      	adds	r4, #2
 801329a:	e7ca      	b.n	8013232 <__ieee754_sqrt+0x136>
 801329c:	3401      	adds	r4, #1
 801329e:	f024 0401 	bic.w	r4, r4, #1
 80132a2:	e7c6      	b.n	8013232 <__ieee754_sqrt+0x136>
 80132a4:	7ff00000 	.word	0x7ff00000
 80132a8:	20000240 	.word	0x20000240
 80132ac:	20000248 	.word	0x20000248

080132b0 <round>:
 80132b0:	ec53 2b10 	vmov	r2, r3, d0
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80132ba:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80132be:	2813      	cmp	r0, #19
 80132c0:	ee10 5a10 	vmov	r5, s0
 80132c4:	4619      	mov	r1, r3
 80132c6:	dc18      	bgt.n	80132fa <round+0x4a>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	da09      	bge.n	80132e0 <round+0x30>
 80132cc:	3001      	adds	r0, #1
 80132ce:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80132d2:	d103      	bne.n	80132dc <round+0x2c>
 80132d4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80132d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80132dc:	2300      	movs	r3, #0
 80132de:	e02a      	b.n	8013336 <round+0x86>
 80132e0:	4c16      	ldr	r4, [pc, #88]	; (801333c <round+0x8c>)
 80132e2:	4104      	asrs	r4, r0
 80132e4:	ea03 0604 	and.w	r6, r3, r4
 80132e8:	4316      	orrs	r6, r2
 80132ea:	d011      	beq.n	8013310 <round+0x60>
 80132ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80132f0:	4103      	asrs	r3, r0
 80132f2:	440b      	add	r3, r1
 80132f4:	ea23 0104 	bic.w	r1, r3, r4
 80132f8:	e7f0      	b.n	80132dc <round+0x2c>
 80132fa:	2833      	cmp	r0, #51	; 0x33
 80132fc:	dd0b      	ble.n	8013316 <round+0x66>
 80132fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013302:	d105      	bne.n	8013310 <round+0x60>
 8013304:	ee10 0a10 	vmov	r0, s0
 8013308:	f7ec ffe0 	bl	80002cc <__adddf3>
 801330c:	4602      	mov	r2, r0
 801330e:	460b      	mov	r3, r1
 8013310:	ec43 2b10 	vmov	d0, r2, r3
 8013314:	bd70      	pop	{r4, r5, r6, pc}
 8013316:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801331a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801331e:	40f4      	lsrs	r4, r6
 8013320:	4214      	tst	r4, r2
 8013322:	d0f5      	beq.n	8013310 <round+0x60>
 8013324:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8013328:	2301      	movs	r3, #1
 801332a:	4083      	lsls	r3, r0
 801332c:	195b      	adds	r3, r3, r5
 801332e:	bf28      	it	cs
 8013330:	3101      	addcs	r1, #1
 8013332:	ea23 0304 	bic.w	r3, r3, r4
 8013336:	461a      	mov	r2, r3
 8013338:	460b      	mov	r3, r1
 801333a:	e7e9      	b.n	8013310 <round+0x60>
 801333c:	000fffff 	.word	0x000fffff

08013340 <trunc>:
 8013340:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8013344:	ec5c bb10 	vmov	fp, ip, d0
 8013348:	f3cc 500a 	ubfx	r0, ip, #20, #11
 801334c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8013350:	2913      	cmp	r1, #19
 8013352:	4664      	mov	r4, ip
 8013354:	dc11      	bgt.n	801337a <trunc+0x3a>
 8013356:	2900      	cmp	r1, #0
 8013358:	bfa7      	ittee	ge
 801335a:	4b15      	ldrge	r3, [pc, #84]	; (80133b0 <trunc+0x70>)
 801335c:	fa43 f101 	asrge.w	r1, r3, r1
 8013360:	2200      	movlt	r2, #0
 8013362:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8013366:	bfa4      	itt	ge
 8013368:	2200      	movge	r2, #0
 801336a:	ea01 030c 	andge.w	r3, r1, ip
 801336e:	4693      	mov	fp, r2
 8013370:	469c      	mov	ip, r3
 8013372:	ec4c bb10 	vmov	d0, fp, ip
 8013376:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 801337a:	2933      	cmp	r1, #51	; 0x33
 801337c:	dd0d      	ble.n	801339a <trunc+0x5a>
 801337e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013382:	d1f6      	bne.n	8013372 <trunc+0x32>
 8013384:	4663      	mov	r3, ip
 8013386:	ee10 2a10 	vmov	r2, s0
 801338a:	ee10 0a10 	vmov	r0, s0
 801338e:	4621      	mov	r1, r4
 8013390:	f7ec ff9c 	bl	80002cc <__adddf3>
 8013394:	4683      	mov	fp, r0
 8013396:	468c      	mov	ip, r1
 8013398:	e7eb      	b.n	8013372 <trunc+0x32>
 801339a:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 801339e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133a2:	40c3      	lsrs	r3, r0
 80133a4:	ea2b 0603 	bic.w	r6, fp, r3
 80133a8:	46b3      	mov	fp, r6
 80133aa:	46a4      	mov	ip, r4
 80133ac:	e7e1      	b.n	8013372 <trunc+0x32>
 80133ae:	bf00      	nop
 80133b0:	fff00000 	.word	0xfff00000
 80133b4:	00000000 	.word	0x00000000

080133b8 <nan>:
 80133b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80133c0 <nan+0x8>
 80133bc:	4770      	bx	lr
 80133be:	bf00      	nop
 80133c0:	00000000 	.word	0x00000000
 80133c4:	7ff80000 	.word	0x7ff80000

080133c8 <_init>:
 80133c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ca:	bf00      	nop
 80133cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ce:	bc08      	pop	{r3}
 80133d0:	469e      	mov	lr, r3
 80133d2:	4770      	bx	lr

080133d4 <_fini>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	bf00      	nop
 80133d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133da:	bc08      	pop	{r3}
 80133dc:	469e      	mov	lr, r3
 80133de:	4770      	bx	lr
