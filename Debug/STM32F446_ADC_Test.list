
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a58  08004a58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a60  08004a60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000074  08004adc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004adc  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e67a  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002224  00000000  00000000  0002e761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa8  00000000  00000000  00031730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ced  00000000  00000000  000321d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010537  00000000  00000000  00054ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d26ef  00000000  00000000  000653fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004078  00000000  00000000  00137aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013bb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080049e4 	.word	0x080049e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080049e4 	.word	0x080049e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f002 fab2 	bl	8002b26 <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000d8 	.word	0x200000d8

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fb94 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f848 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f92e 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f902 	bl	80007e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005e4:	f000 f8b4 	bl	8000750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start UART receive via interrupt
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	4918      	ldr	r1, [pc, #96]	; (800064c <main+0x7c>)
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <main+0x80>)
 80005ee:	f002 fb2c 	bl	8002c4a <HAL_UART_Receive_IT>
  // Transmit startup message
  HAL_UART_Transmit(&huart2, StartupMsg, sizeof(StartupMsg), 1000);
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	220a      	movs	r2, #10
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <main+0x84>)
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <main+0x80>)
 80005fc:	f002 fa93 	bl	8002b26 <HAL_UART_Transmit>

  // Start ADC trigger timer
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <main+0x88>)
 8000602:	f001 fe07 	bl	8002214 <HAL_TIM_Base_Start_IT>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <main+0x40>
     /* Starting Error */
     Error_Handler();
 800060c:	f000 f9b0 	bl	8000970 <Error_Handler>
  while (1)
  {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (LED2_PORT, LED2_PIN);
 8000610:	2120      	movs	r1, #32
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x8c>)
 8000614:	f000 ff5b 	bl	80014ce <HAL_GPIO_TogglePin>
	  HAL_Delay (500);
 8000618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061c:	f000 fbe2 	bl	8000de4 <HAL_Delay>
	  if (rxCount > 0) {
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <main+0x90>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f3      	beq.n	8000610 <main+0x40>
		  rx_buff[rxCount-1] = 0;	// set end of string
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <main+0x90>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <main+0x94>)
 8000630:	2100      	movs	r1, #0
 8000632:	54d1      	strb	r1, [r2, r3]
		  printf("rx[%d] = <%s>\r\n", rxCount, rx_buff);
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0x90>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <main+0x94>)
 800063a:	4619      	mov	r1, r3
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0x98>)
 800063e:	f003 fb5f 	bl	8003d00 <iprintf>
		  rxCount = 0;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <main+0x90>)
 8000644:	2200      	movs	r2, #0
 8000646:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_TogglePin (LED2_PORT, LED2_PIN);
 8000648:	e7e2      	b.n	8000610 <main+0x40>
 800064a:	bf00      	nop
 800064c:	2000011e 	.word	0x2000011e
 8000650:	200000d8 	.word	0x200000d8
 8000654:	20000000 	.word	0x20000000
 8000658:	20000090 	.word	0x20000090
 800065c:	40020000 	.word	0x40020000
 8000660:	2000011c 	.word	0x2000011c
 8000664:	20000120 	.word	0x20000120
 8000668:	080049fc 	.word	0x080049fc

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fb52 	bl	8003d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <SystemClock_Config+0xdc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <SystemClock_Config+0xdc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xdc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0xe0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <SystemClock_Config+0xe0>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006e0:	23b4      	movs	r3, #180	; 0xb4
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fa9f 	bl	8001c38 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000700:	f000 f936 	bl	8000970 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000704:	f000 fefe 	bl	8001504 <HAL_PWREx_EnableOverDrive>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070e:	f000 f92f 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f000 ff37 	bl	80015a4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800073c:	f000 f918 	bl	8000970 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_TIM2_Init+0x94>)
 800076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_TIM2_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000782:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8000786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_TIM2_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000796:	f001 fced 	bl	8002174 <HAL_TIM_Base_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007a0:	f000 f8e6 	bl	8000970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_TIM2_Init+0x94>)
 80007b2:	f001 fea7 	bl	8002504 <HAL_TIM_ConfigClockSource>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 f8d8 	bl	8000970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_TIM2_Init+0x94>)
 80007ce:	f002 f8cd 	bl	800296c <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f8ca 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000090 	.word	0x20000090

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f002 f934 	bl	8002a8c <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f8a1 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000d8 	.word	0x200000d8
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <MX_GPIO_Init+0xd4>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a26      	ldr	r2, [pc, #152]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_GPIO_Init+0xd4>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_GPIO_Init+0xd4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0xd4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_GPIO_Init+0xd4>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_GPIO_Init+0xd4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0xd8>)
 80008ca:	f000 fde7 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0xdc>)
 80008e6:	f000 fc45 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80008ea:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0xd8>)
 8000904:	f000 fc36 	bl	8001174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020800 	.word	0x40020800

0800091c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if (rxCount >= sizeof(rx_buff)) {
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_UART_RxCpltCallback+0x44>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	2b13      	cmp	r3, #19
 800092a:	d902      	bls.n	8000932 <HAL_UART_RxCpltCallback+0x16>
		rxCount = 0;		// wrap back to start
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_UART_RxCpltCallback+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, &rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8000932:	2201      	movs	r2, #1
 8000934:	490b      	ldr	r1, [pc, #44]	; (8000964 <HAL_UART_RxCpltCallback+0x48>)
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <HAL_UART_RxCpltCallback+0x4c>)
 8000938:	f002 f987 	bl	8002c4a <HAL_UART_Receive_IT>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10a      	bne.n	8000958 <HAL_UART_RxCpltCallback+0x3c>
		rx_buff[rxCount++] = rx_byte;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_UART_RxCpltCallback+0x44>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	b291      	uxth	r1, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <HAL_UART_RxCpltCallback+0x44>)
 800094c:	8011      	strh	r1, [r2, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <HAL_UART_RxCpltCallback+0x48>)
 8000952:	7819      	ldrb	r1, [r3, #0]
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_UART_RxCpltCallback+0x50>)
 8000956:	5499      	strb	r1, [r3, r2]
	} // else { x_error_count++; } // this should never happen
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000011c 	.word	0x2000011c
 8000964:	2000011e 	.word	0x2000011e
 8000968:	200000d8 	.word	0x200000d8
 800096c:	20000120 	.word	0x20000120

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ba:	2007      	movs	r0, #7
 80009bc:	f000 fb06 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009dc:	d115      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_TIM_Base_MspInit+0x48>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_TIM_Base_MspInit+0x48>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_TIM_Base_MspInit+0x48>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	201c      	movs	r0, #28
 8000a00:	f000 faef 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a04:	201c      	movs	r0, #28
 8000a06:	f000 fb08 	bl	800101a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_UART_MspInit+0x94>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d133      	bne.n	8000aa2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <HAL_UART_MspInit+0x9c>)
 8000a8e:	f000 fb71 	bl	8001174 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2026      	movs	r0, #38	; 0x26
 8000a98:	f000 faa3 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9c:	2026      	movs	r0, #38	; 0x26
 8000a9e:	f000 fabc 	bl	800101a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f94e 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <TIM2_IRQHandler+0x18>)
 8000b12:	f001 fbef 	bl	80022f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_9);
 8000b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <TIM2_IRQHandler+0x1c>)
 8000b1c:	f000 fcd7 	bl	80014ce <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000090 	.word	0x20000090
 8000b28:	40020000 	.word	0x40020000

08000b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <USART2_IRQHandler+0x10>)
 8000b32:	f002 f8bb 	bl	8002cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000d8 	.word	0x200000d8

08000b40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e00a      	b.n	8000b68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b52:	f3af 8000 	nop.w
 8000b56:	4601      	mov	r1, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf0      	blt.n	8000b52 <_read+0x12>
  }

  return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e009      	b.n	8000ba0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd09 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf1      	blt.n	8000b8c <_write+0x12>
  }
  return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_close>:

int _close(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bda:	605a      	str	r2, [r3, #4]
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_isatty>:

int _isatty(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f003 f872 	bl	8003d34 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20020000 	.word	0x20020000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	20000134 	.word	0x20000134
 8000c84:	20000288 	.word	0x20000288

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 f831 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc77 	bl	80005d0 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cf0:	08004a68 	.word	0x08004a68
  ldr r2, =_sbss
 8000cf4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf8:	20000288 	.word	0x20000288

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f94f 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f808 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fe22 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x54>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f967 	bl	8001036 <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00e      	b.n	8000d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d80a      	bhi.n	8000d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 f92f 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_InitTick+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000014 	.word	0x20000014
 8000da0:	20000010 	.word	0x20000010

08000da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	20000138 	.word	0x20000138

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000138 	.word	0x20000138

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff ffee 	bl	8000dcc <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffde 	bl	8000dcc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000014 	.word	0x20000014

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff29 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff3e 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff8e 	bl	8000f20 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff31 	bl	8000e90 <__NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffa2 	bl	8000f88 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff feb6 	bl	8000dcc <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d008      	beq.n	8001080 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e052      	b.n	8001126 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0216 	bic.w	r2, r2, #22
 800108e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800109e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <HAL_DMA_Abort+0x62>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0208 	bic.w	r2, r2, #8
 80010be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d0:	e013      	b.n	80010fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010d2:	f7ff fe7b 	bl	8000dcc <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d90c      	bls.n	80010fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e015      	b.n	8001126 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e4      	bne.n	80010d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110c:	223f      	movs	r2, #63	; 0x3f
 800110e:	409a      	lsls	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d004      	beq.n	800114c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e00c      	b.n	8001166 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2205      	movs	r2, #5
 8001150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e165      	b.n	800145c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f040 8154 	bne.w	8001456 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b03      	cmp	r3, #3
 8001232:	d017      	beq.n	8001264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80ae 	beq.w	8001456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a5c      	ldr	r2, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <HAL_GPIO_Init+0x300>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x308>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x21a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_Init+0x30c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x216>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x310>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x212>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_GPIO_Init+0x314>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x20e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x318>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x20a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x31c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x206>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a49      	ldr	r2, [pc, #292]	; (8001494 <HAL_GPIO_Init+0x320>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x202>
 8001372:	2306      	movs	r3, #6
 8001374:	e00c      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 8001376:	2307      	movs	r3, #7
 8001378:	e00a      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800137a:	2305      	movs	r3, #5
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800137e:	2304      	movs	r3, #4
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x304>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a26      	ldr	r2, [pc, #152]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <HAL_GPIO_Init+0x324>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_GPIO_Init+0x324>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_GPIO_Init+0x324>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_GPIO_Init+0x324>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f ae96 	bls.w	8001190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	041a      	lsls	r2, r3, #16
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	400b      	ands	r3, r1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	619a      	str	r2, [r3, #24]
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_PWREx_EnableOverDrive+0x90>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_PWREx_EnableOverDrive+0x90>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_PWREx_EnableOverDrive+0x90>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_PWREx_EnableOverDrive+0x94>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001530:	f7ff fc4c 	bl	8000dcc <HAL_GetTick>
 8001534:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001536:	e009      	b.n	800154c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001538:	f7ff fc48 	bl	8000dcc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001546:	d901      	bls.n	800154c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e01f      	b.n	800158c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_PWREx_EnableOverDrive+0x98>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d1ee      	bne.n	8001538 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001560:	f7ff fc34 	bl	8000dcc <HAL_GetTick>
 8001564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001566:	e009      	b.n	800157c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001568:	f7ff fc30 	bl	8000dcc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001576:	d901      	bls.n	800157c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e007      	b.n	800158c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_PWREx_EnableOverDrive+0x98>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001588:	d1ee      	bne.n	8001568 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	420e0040 	.word	0x420e0040
 800159c:	40007000 	.word	0x40007000
 80015a0:	420e0044 	.word	0x420e0044

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0cc      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d90c      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800161a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d044      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d119      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	2b03      	cmp	r3, #3
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e067      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4934      	ldr	r1, [pc, #208]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fb9a 	bl	8000dcc <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fb96 	bl	8000dcc <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e04f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d20c      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f855 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fafa 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00
 8001760:	40023800 	.word	0x40023800
 8001764:	08004a0c 	.word	0x08004a0c
 8001768:	2000000c 	.word	0x2000000c
 800176c:	20000010 	.word	0x20000010

08001770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_RCC_GetHCLKFreq+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000000c 	.word	0x2000000c

08001788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800178c:	f7ff fff0 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0a9b      	lsrs	r3, r3, #10
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4903      	ldr	r1, [pc, #12]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08004a1c 	.word	0x08004a1c

080017b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017b4:	f7ff ffdc 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	0b5b      	lsrs	r3, r3, #13
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4903      	ldr	r1, [pc, #12]	; (80017d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08004a1c 	.word	0x08004a1c

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017dc:	b0ae      	sub	sp, #184	; 0xb8
 80017de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017fe:	4bcb      	ldr	r3, [pc, #812]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b0c      	cmp	r3, #12
 8001808:	f200 8206 	bhi.w	8001c18 <HAL_RCC_GetSysClockFreq+0x440>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <HAL_RCC_GetSysClockFreq+0x3c>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001849 	.word	0x08001849
 8001818:	08001c19 	.word	0x08001c19
 800181c:	08001c19 	.word	0x08001c19
 8001820:	08001c19 	.word	0x08001c19
 8001824:	08001851 	.word	0x08001851
 8001828:	08001c19 	.word	0x08001c19
 800182c:	08001c19 	.word	0x08001c19
 8001830:	08001c19 	.word	0x08001c19
 8001834:	08001859 	.word	0x08001859
 8001838:	08001c19 	.word	0x08001c19
 800183c:	08001c19 	.word	0x08001c19
 8001840:	08001c19 	.word	0x08001c19
 8001844:	08001a49 	.word	0x08001a49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4bb9      	ldr	r3, [pc, #740]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x358>)
 800184a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800184e:	e1e7      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001850:	4bb8      	ldr	r3, [pc, #736]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001856:	e1e3      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001858:	4bb4      	ldr	r3, [pc, #720]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001864:	4bb1      	ldr	r3, [pc, #708]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d071      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001870:	4bae      	ldr	r3, [pc, #696]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	2200      	movs	r2, #0
 8001878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800187c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001896:	4622      	mov	r2, r4
 8001898:	462b      	mov	r3, r5
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	0159      	lsls	r1, r3, #5
 80018a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a8:	0150      	lsls	r0, r2, #5
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4621      	mov	r1, r4
 80018b0:	1a51      	subs	r1, r2, r1
 80018b2:	6439      	str	r1, [r7, #64]	; 0x40
 80018b4:	4629      	mov	r1, r5
 80018b6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018c8:	4649      	mov	r1, r9
 80018ca:	018b      	lsls	r3, r1, #6
 80018cc:	4641      	mov	r1, r8
 80018ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d2:	4641      	mov	r1, r8
 80018d4:	018a      	lsls	r2, r1, #6
 80018d6:	4641      	mov	r1, r8
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	63b9      	str	r1, [r7, #56]	; 0x38
 80018dc:	4649      	mov	r1, r9
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018f0:	4649      	mov	r1, r9
 80018f2:	00cb      	lsls	r3, r1, #3
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018fa:	4641      	mov	r1, r8
 80018fc:	00ca      	lsls	r2, r1, #3
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	4603      	mov	r3, r0
 8001904:	4622      	mov	r2, r4
 8001906:	189b      	adds	r3, r3, r2
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
 800190a:	462b      	mov	r3, r5
 800190c:	460a      	mov	r2, r1
 800190e:	eb42 0303 	adc.w	r3, r2, r3
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001920:	4629      	mov	r1, r5
 8001922:	024b      	lsls	r3, r1, #9
 8001924:	4621      	mov	r1, r4
 8001926:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800192a:	4621      	mov	r1, r4
 800192c:	024a      	lsls	r2, r1, #9
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001936:	2200      	movs	r2, #0
 8001938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800193c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001940:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001944:	f7fe fcb4 	bl	80002b0 <__aeabi_uldivmod>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4613      	mov	r3, r2
 800194e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001952:	e067      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	2200      	movs	r2, #0
 800195c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001960:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196c:	67bb      	str	r3, [r7, #120]	; 0x78
 800196e:	2300      	movs	r3, #0
 8001970:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001972:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001976:	4622      	mov	r2, r4
 8001978:	462b      	mov	r3, r5
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	0159      	lsls	r1, r3, #5
 8001984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001988:	0150      	lsls	r0, r2, #5
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4621      	mov	r1, r4
 8001990:	1a51      	subs	r1, r2, r1
 8001992:	62b9      	str	r1, [r7, #40]	; 0x28
 8001994:	4629      	mov	r1, r5
 8001996:	eb63 0301 	sbc.w	r3, r3, r1
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80019a8:	4649      	mov	r1, r9
 80019aa:	018b      	lsls	r3, r1, #6
 80019ac:	4641      	mov	r1, r8
 80019ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b2:	4641      	mov	r1, r8
 80019b4:	018a      	lsls	r2, r1, #6
 80019b6:	4641      	mov	r1, r8
 80019b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80019bc:	4649      	mov	r1, r9
 80019be:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019d6:	4692      	mov	sl, r2
 80019d8:	469b      	mov	fp, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	eb1a 0303 	adds.w	r3, sl, r3
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	462b      	mov	r3, r5
 80019e4:	eb4b 0303 	adc.w	r3, fp, r3
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019f6:	4629      	mov	r1, r5
 80019f8:	028b      	lsls	r3, r1, #10
 80019fa:	4621      	mov	r1, r4
 80019fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a00:	4621      	mov	r1, r4
 8001a02:	028a      	lsls	r2, r1, #10
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8001a10:	677a      	str	r2, [r7, #116]	; 0x74
 8001a12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a16:	f7fe fc4b 	bl	80002b0 <__aeabi_uldivmod>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4613      	mov	r3, r2
 8001a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a46:	e0eb      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a48:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d06b      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	2200      	movs	r2, #0
 8001a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a72:	663b      	str	r3, [r7, #96]	; 0x60
 8001a74:	2300      	movs	r3, #0
 8001a76:	667b      	str	r3, [r7, #100]	; 0x64
 8001a78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	462b      	mov	r3, r5
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4621      	mov	r1, r4
 8001a96:	1a51      	subs	r1, r2, r1
 8001a98:	61b9      	str	r1, [r7, #24]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001aae:	4659      	mov	r1, fp
 8001ab0:	018b      	lsls	r3, r1, #6
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab8:	4651      	mov	r1, sl
 8001aba:	018a      	lsls	r2, r1, #6
 8001abc:	4651      	mov	r1, sl
 8001abe:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac2:	4659      	mov	r1, fp
 8001ac4:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001adc:	4690      	mov	r8, r2
 8001ade:	4699      	mov	r9, r3
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	eb18 0303 	adds.w	r3, r8, r3
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	462b      	mov	r3, r5
 8001aea:	eb49 0303 	adc.w	r3, r9, r3
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001afc:	4629      	mov	r1, r5
 8001afe:	024b      	lsls	r3, r1, #9
 8001b00:	4621      	mov	r1, r4
 8001b02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b06:	4621      	mov	r1, r4
 8001b08:	024a      	lsls	r2, r1, #9
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b12:	2200      	movs	r2, #0
 8001b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b1c:	f7fe fbc8 	bl	80002b0 <__aeabi_uldivmod>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4613      	mov	r3, r2
 8001b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b2a:	e065      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x420>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	4611      	mov	r1, r2
 8001b44:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8001b4e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b52:	4642      	mov	r2, r8
 8001b54:	464b      	mov	r3, r9
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	0159      	lsls	r1, r3, #5
 8001b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b64:	0150      	lsls	r0, r2, #5
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4641      	mov	r1, r8
 8001b6c:	1a51      	subs	r1, r2, r1
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	4649      	mov	r1, r9
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b84:	4659      	mov	r1, fp
 8001b86:	018b      	lsls	r3, r1, #6
 8001b88:	4651      	mov	r1, sl
 8001b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8e:	4651      	mov	r1, sl
 8001b90:	018a      	lsls	r2, r1, #6
 8001b92:	4651      	mov	r1, sl
 8001b94:	1a54      	subs	r4, r2, r1
 8001b96:	4659      	mov	r1, fp
 8001b98:	eb63 0501 	sbc.w	r5, r3, r1
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	00eb      	lsls	r3, r5, #3
 8001ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001baa:	00e2      	lsls	r2, r4, #3
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	18e3      	adds	r3, r4, r3
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	eb45 0303 	adc.w	r3, r5, r3
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	028b      	lsls	r3, r1, #10
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	028a      	lsls	r2, r1, #10
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be0:	2200      	movs	r2, #0
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001be6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bea:	f7fe fb61 	bl	80002b0 <__aeabi_uldivmod>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0f1b      	lsrs	r3, r3, #28
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c16:	e003      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	37b8      	adds	r7, #184	; 0xb8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400

08001c38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e28d      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8083 	beq.w	8001d5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c58:	4b94      	ldr	r3, [pc, #592]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d019      	beq.n	8001c98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c64:	4b91      	ldr	r3, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c70:	4b8e      	ldr	r3, [pc, #568]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b84      	ldr	r3, [pc, #528]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x124>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e25a      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x90>
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7b      	ldr	r2, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xcc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0xb4>
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a75      	ldr	r2, [pc, #468]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a72      	ldr	r2, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xcc>
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f85e 	bl	8000dcc <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f85a 	bl	8000dcc <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e21f      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xdc>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f84a 	bl	8000dcc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f846 	bl	8000dcc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e20b      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b57      	ldr	r3, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x104>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06f      	beq.n	8001e4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d6a:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d017      	beq.n	8001da6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d76:	4b4d      	ldr	r3, [pc, #308]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d105      	bne.n	8001d8e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9a:	4b44      	ldr	r3, [pc, #272]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x186>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1d3      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4937      	ldr	r1, [pc, #220]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_RCC_OscConfig+0x278>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe fff3 	bl	8000dcc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dea:	f7fe ffef 	bl	8000dcc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1b4      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4925      	ldr	r1, [pc, #148]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x278>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7fe ffd2 	bl	8000dcc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7fe ffce 	bl	8000dcc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e193      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d036      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCC_OscConfig+0x27c>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7fe ffb2 	bl	8000dcc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7fe ffae 	bl	8000dcc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e173      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x234>
 8001e8a:	e01b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7fe ff9b 	bl	8000dcc <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	e00e      	b.n	8001eb8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7fe ff97 	bl	8000dcc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d907      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e15c      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	42470000 	.word	0x42470000
 8001eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b8a      	ldr	r3, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ea      	bne.n	8001e9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8097 	beq.w	8002000 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b83      	ldr	r3, [pc, #524]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10f      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a7e      	ldr	r2, [pc, #504]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <HAL_RCC_OscConfig+0x4b0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x4b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x4b0>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ff57 	bl	8000dcc <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7fe ff53 	bl	8000dcc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e118      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x4b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x31e>
 8001f48:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	e01c      	b.n	8001f90 <HAL_RCC_OscConfig+0x358>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x340>
 8001f5e:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a5d      	ldr	r2, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x358>
 8001f78:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a59      	ldr	r2, [pc, #356]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
 8001f84:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	4a56      	ldr	r2, [pc, #344]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d015      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff18 	bl	8000dcc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ff14 	bl	8000dcc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0d7      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ee      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x368>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff02 	bl	8000dcc <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe fefe 	bl	8000dcc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0c1      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ee      	bne.n	8001fcc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80ad 	beq.w	8002164 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b08      	cmp	r3, #8
 8002014:	d060      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d145      	bne.n	80020aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_RCC_OscConfig+0x4b4>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7fe fed2 	bl	8000dcc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe fece 	bl	8000dcc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e093      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	071b      	lsls	r3, r3, #28
 8002076:	491b      	ldr	r1, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x4b4>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fea3 	bl	8000dcc <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fe9f 	bl	8000dcc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e064      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x452>
 80020a8:	e05c      	b.n	8002164 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_RCC_OscConfig+0x4b4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fe8c 	bl	8000dcc <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fe88 	bl	8000dcc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04d      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_OscConfig+0x4ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x480>
 80020d6:	e045      	b.n	8002164 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e040      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40007000 	.word	0x40007000
 80020ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_RCC_OscConfig+0x538>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d030      	beq.n	8002160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d129      	bne.n	8002160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d122      	bne.n	8002160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002128:	4293      	cmp	r3, r2
 800212a:	d119      	bne.n	8002160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	3b01      	subs	r3, #1
 800213a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d10f      	bne.n	8002160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e041      	b.n	800220a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fc16 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f000 faa0 	bl	80026f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d001      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e04e      	b.n	80022ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002256:	d01d      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_TIM_Base_Start_IT+0xc8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x80>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d111      	bne.n	80022b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d010      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	e007      	b.n	80022c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40000400 	.word	0x40000400
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40000c00 	.word	0x40000c00
 80022e8:	40010400 	.word	0x40010400
 80022ec:	40014000 	.word	0x40014000
 80022f0:	40001800 	.word	0x40001800

080022f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0202 	mvn.w	r2, #2
 8002320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f9bf 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f9b1 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f9c2 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0204 	mvn.w	r2, #4
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f995 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f987 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f998 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0208 	mvn.w	r2, #8
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2204      	movs	r2, #4
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f96b 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f95d 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f96e 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b10      	cmp	r3, #16
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b10      	cmp	r3, #16
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0210 	mvn.w	r2, #16
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2208      	movs	r2, #8
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f941 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f933 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f944 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0201 	mvn.w	r2, #1
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f90d 	bl	8002692 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 faea 	bl	8002a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f909 	bl	80026e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0220 	mvn.w	r2, #32
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fab4 	bl	8002a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIM_ConfigClockSource+0x1c>
 800251c:	2302      	movs	r3, #2
 800251e:	e0b4      	b.n	800268a <HAL_TIM_ConfigClockSource+0x186>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800253e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d03e      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0xd4>
 800255a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255e:	f200 8087 	bhi.w	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	f000 8086 	beq.w	8002676 <HAL_TIM_ConfigClockSource+0x172>
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256e:	d87f      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b70      	cmp	r3, #112	; 0x70
 8002572:	d01a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xa6>
 8002574:	2b70      	cmp	r3, #112	; 0x70
 8002576:	d87b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d050      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x11a>
 800257c:	2b60      	cmp	r3, #96	; 0x60
 800257e:	d877      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b50      	cmp	r3, #80	; 0x50
 8002582:	d03c      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0xfa>
 8002584:	2b50      	cmp	r3, #80	; 0x50
 8002586:	d873      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d058      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x13a>
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d86f      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b30      	cmp	r3, #48	; 0x30
 8002592:	d064      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 8002594:	2b30      	cmp	r3, #48	; 0x30
 8002596:	d86b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d060      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	2b20      	cmp	r3, #32
 800259e:	d867      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05c      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d05a      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 80025a8:	e062      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f000 f9b7 	bl	800292c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	609a      	str	r2, [r3, #8]
      break;
 80025d6:	e04f      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f000 f9a0 	bl	800292c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025fa:	609a      	str	r2, [r3, #8]
      break;
 80025fc:	e03c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	461a      	mov	r2, r3
 800260c:	f000 f914 	bl	8002838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2150      	movs	r1, #80	; 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f96d 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 800261c:	e02c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	461a      	mov	r2, r3
 800262c:	f000 f933 	bl	8002896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2160      	movs	r1, #96	; 0x60
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f95d 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 800263c:	e01c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8f4 	bl	8002838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f94d 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 800265c:	e00c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f000 f944 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 800266e:	e003      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      break;
 8002674:	e000      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a40      	ldr	r2, [pc, #256]	; (800280c <TIM_Base_SetConfig+0x114>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d00f      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a3d      	ldr	r2, [pc, #244]	; (8002810 <TIM_Base_SetConfig+0x118>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3c      	ldr	r2, [pc, #240]	; (8002814 <TIM_Base_SetConfig+0x11c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <TIM_Base_SetConfig+0x120>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a3a      	ldr	r2, [pc, #232]	; (800281c <TIM_Base_SetConfig+0x124>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2f      	ldr	r2, [pc, #188]	; (800280c <TIM_Base_SetConfig+0x114>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d027      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <TIM_Base_SetConfig+0x118>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d023      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <TIM_Base_SetConfig+0x11c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <TIM_Base_SetConfig+0x120>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a29      	ldr	r2, [pc, #164]	; (800281c <TIM_Base_SetConfig+0x124>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d017      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a28      	ldr	r2, [pc, #160]	; (8002820 <TIM_Base_SetConfig+0x128>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a27      	ldr	r2, [pc, #156]	; (8002824 <TIM_Base_SetConfig+0x12c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00f      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <TIM_Base_SetConfig+0x130>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <TIM_Base_SetConfig+0x134>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <TIM_Base_SetConfig+0x138>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <TIM_Base_SetConfig+0x13c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <TIM_Base_SetConfig+0x114>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <TIM_Base_SetConfig+0xf8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <TIM_Base_SetConfig+0x124>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d103      	bne.n	80027f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	615a      	str	r2, [r3, #20]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40010000 	.word	0x40010000
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800
 8002818:	40000c00 	.word	0x40000c00
 800281c:	40010400 	.word	0x40010400
 8002820:	40014000 	.word	0x40014000
 8002824:	40014400 	.word	0x40014400
 8002828:	40014800 	.word	0x40014800
 800282c:	40001800 	.word	0x40001800
 8002830:	40001c00 	.word	0x40001c00
 8002834:	40002000 	.word	0x40002000

08002838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 030a 	bic.w	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b087      	sub	sp, #28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f023 0210 	bic.w	r2, r3, #16
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	031b      	lsls	r3, r3, #12
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	f043 0307 	orr.w	r3, r3, #7
 8002918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	431a      	orrs	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002980:	2302      	movs	r3, #2
 8002982:	e05a      	b.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d01d      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d018      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40001800 	.word	0x40001800

08002a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e03f      	b.n	8002b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd ffb0 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fddf 	bl	8003694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b08a      	sub	sp, #40	; 0x28
 8002b2a:	af02      	add	r7, sp, #8
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d17c      	bne.n	8002c40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_UART_Transmit+0x2c>
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e075      	b.n	8002c42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Transmit+0x3e>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e06e      	b.n	8002c42 <HAL_UART_Transmit+0x11c>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2221      	movs	r2, #33	; 0x21
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe f927 	bl	8000dcc <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b94:	d108      	bne.n	8002ba8 <HAL_UART_Transmit+0x82>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	e003      	b.n	8002bb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bb8:	e02a      	b.n	8002c10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fb1f 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e036      	b.n	8002c42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3302      	adds	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e007      	b.n	8002c02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1cf      	bne.n	8002bba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 faef 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e006      	b.n	8002c42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d11d      	bne.n	8002ca0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Receive_IT+0x26>
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e016      	b.n	8002ca2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Receive_IT+0x38>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e00f      	b.n	8002ca2 <HAL_UART_Receive_IT+0x58>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fb24 	bl	80032e4 <UART_Start_Receive_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	e000      	b.n	8002ca2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0ba      	sub	sp, #232	; 0xe8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fc07 	bl	800351e <UART_Receive_IT>
      return;
 8002d10:	e256      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80de 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80d1 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
 8002d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
 8002d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d011      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 81ed 	beq.w	80031b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fb92 	bl	800351e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_UART_IRQHandler+0x17a>
 8002e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04f      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa9a 	bl	8003360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d141      	bne.n	8002ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3314      	adds	r3, #20
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1d9      	bne.n	8002e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a7d      	ldr	r2, [pc, #500]	; (8003088 <HAL_UART_IRQHandler+0x3dc>)
 8002e94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f947 	bl	800112e <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e00e      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f990 	bl	80031dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f98c 	bl	80031dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e006      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f988 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ed2:	e170      	b.n	80031b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	bf00      	nop
    return;
 8002ed6:	e16e      	b.n	80031b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	f040 814a 	bne.w	8003176 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8143 	beq.w	8003176 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 813c 	beq.w	8003176 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	f040 80b4 	bne.w	800308c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8140 	beq.w	80031ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f080 8139 	bcs.w	80031ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5a:	f000 8088 	beq.w	800306e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1d9      	bne.n	8002f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3314      	adds	r3, #20
 8002fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e1      	bne.n	8002faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800300a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800300c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e3      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	f023 0310 	bic.w	r3, r3, #16
 8003042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003050:	65ba      	str	r2, [r7, #88]	; 0x58
 8003052:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800305e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e3      	bne.n	800302c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fff0 	bl	800104e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003076:	b29b      	uxth	r3, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8b6 	bl	80031f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003084:	e099      	b.n	80031ba <HAL_UART_IRQHandler+0x50e>
 8003086:	bf00      	nop
 8003088:	08003427 	.word	0x08003427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003094:	b29b      	uxth	r3, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 808b 	beq.w	80031be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8086 	beq.w	80031be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030d6:	647a      	str	r2, [r7, #68]	; 0x44
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e3      	bne.n	80030b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3314      	adds	r3, #20
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	623b      	str	r3, [r7, #32]
   return(result);
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800310e:	633a      	str	r2, [r7, #48]	; 0x30
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e3      	bne.n	80030ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0310 	bic.w	r3, r3, #16
 8003146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003154:	61fa      	str	r2, [r7, #28]
 8003156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	617b      	str	r3, [r7, #20]
   return(result);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e3      	bne.n	8003130 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f83e 	bl	80031f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003174:	e023      	b.n	80031be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_UART_IRQHandler+0x4ea>
 8003182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f95d 	bl	800344e <UART_Transmit_IT>
    return;
 8003194:	e014      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00e      	beq.n	80031c0 <HAL_UART_IRQHandler+0x514>
 80031a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f99d 	bl	80034ee <UART_EndTransmit_IT>
    return;
 80031b4:	e004      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
    return;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
      return;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
      return;
 80031be:	bf00      	nop
  }
}
 80031c0:	37e8      	adds	r7, #232	; 0xe8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop

080031c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b090      	sub	sp, #64	; 0x40
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	e050      	b.n	80032bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003220:	d04c      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x30>
 8003228:	f7fd fdd0 	bl	8000dcc <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003234:	429a      	cmp	r2, r3
 8003236:	d241      	bcs.n	80032bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	e853 3f00 	ldrex	r3, [r3]
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003258:	637a      	str	r2, [r7, #52]	; 0x34
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800325e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e5      	bne.n	8003238 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	613b      	str	r3, [r7, #16]
   return(result);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3314      	adds	r3, #20
 800328a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328c:	623a      	str	r2, [r7, #32]
 800328e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	69f9      	ldr	r1, [r7, #28]
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	61bb      	str	r3, [r7, #24]
   return(result);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e5      	bne.n	800326c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e00f      	b.n	80032dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d09f      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3740      	adds	r7, #64	; 0x40
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2222      	movs	r2, #34	; 0x22
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003330:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b095      	sub	sp, #84	; 0x54
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003388:	643a      	str	r2, [r7, #64]	; 0x40
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800338e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e5      	bne.n	800339c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d119      	bne.n	800340c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f023 0310 	bic.w	r3, r3, #16
 80033ee:	647b      	str	r3, [r7, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f8:	61ba      	str	r2, [r7, #24]
 80033fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6979      	ldr	r1, [r7, #20]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	613b      	str	r3, [r7, #16]
   return(result);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e5      	bne.n	80033d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800341a:	bf00      	nop
 800341c:	3754      	adds	r7, #84	; 0x54
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fecb 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b21      	cmp	r3, #33	; 0x21
 8003460:	d13e      	bne.n	80034e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	d114      	bne.n	8003496 <UART_Transmit_IT+0x48>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d110      	bne.n	8003496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	621a      	str	r2, [r3, #32]
 8003494:	e008      	b.n	80034a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6211      	str	r1, [r2, #32]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4619      	mov	r1, r3
 80034b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fe5a 	bl	80031c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b08c      	sub	sp, #48	; 0x30
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b22      	cmp	r3, #34	; 0x22
 8003530:	f040 80ab 	bne.w	800368a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d117      	bne.n	800356e <UART_Receive_IT+0x50>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355c:	b29a      	uxth	r2, r3
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e026      	b.n	80035bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003580:	d007      	beq.n	8003592 <UART_Receive_IT+0x74>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <UART_Receive_IT+0x82>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e008      	b.n	80035b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4619      	mov	r1, r3
 80035ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d15a      	bne.n	8003686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0220 	bic.w	r2, r2, #32
 80035de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b01      	cmp	r3, #1
 800360e:	d135      	bne.n	800367c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	613b      	str	r3, [r7, #16]
   return(result);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f023 0310 	bic.w	r3, r3, #16
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	623a      	str	r2, [r7, #32]
 8003638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	69f9      	ldr	r1, [r7, #28]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	61bb      	str	r3, [r7, #24]
   return(result);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d10a      	bne.n	800366e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fdbb 	bl	80031f0 <HAL_UARTEx_RxEventCallback>
 800367a:	e002      	b.n	8003682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fd f94d 	bl	800091c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e002      	b.n	800368c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b0c0      	sub	sp, #256	; 0x100
 800369a:	af00      	add	r7, sp, #0
 800369c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	68d9      	ldr	r1, [r3, #12]
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	ea40 0301 	orr.w	r3, r0, r1
 80036bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036ec:	f021 010c 	bic.w	r1, r1, #12
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036fa:	430b      	orrs	r3, r1
 80036fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370e:	6999      	ldr	r1, [r3, #24]
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	ea40 0301 	orr.w	r3, r0, r1
 800371a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <UART_SetConfig+0x2cc>)
 8003724:	429a      	cmp	r2, r3
 8003726:	d005      	beq.n	8003734 <UART_SetConfig+0xa0>
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b8d      	ldr	r3, [pc, #564]	; (8003964 <UART_SetConfig+0x2d0>)
 8003730:	429a      	cmp	r2, r3
 8003732:	d104      	bne.n	800373e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7fe f83c 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8003738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800373c:	e003      	b.n	8003746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800373e:	f7fe f823 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8003742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	f040 810c 	bne.w	800396c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003758:	2200      	movs	r2, #0
 800375a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800375e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003766:	4622      	mov	r2, r4
 8003768:	462b      	mov	r3, r5
 800376a:	1891      	adds	r1, r2, r2
 800376c:	65b9      	str	r1, [r7, #88]	; 0x58
 800376e:	415b      	adcs	r3, r3
 8003770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003776:	4621      	mov	r1, r4
 8003778:	eb12 0801 	adds.w	r8, r2, r1
 800377c:	4629      	mov	r1, r5
 800377e:	eb43 0901 	adc.w	r9, r3, r1
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003796:	4690      	mov	r8, r2
 8003798:	4699      	mov	r9, r3
 800379a:	4623      	mov	r3, r4
 800379c:	eb18 0303 	adds.w	r3, r8, r3
 80037a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037a4:	462b      	mov	r3, r5
 80037a6:	eb49 0303 	adc.w	r3, r9, r3
 80037aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037c2:	460b      	mov	r3, r1
 80037c4:	18db      	adds	r3, r3, r3
 80037c6:	653b      	str	r3, [r7, #80]	; 0x50
 80037c8:	4613      	mov	r3, r2
 80037ca:	eb42 0303 	adc.w	r3, r2, r3
 80037ce:	657b      	str	r3, [r7, #84]	; 0x54
 80037d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037d8:	f7fc fd6a 	bl	80002b0 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4b61      	ldr	r3, [pc, #388]	; (8003968 <UART_SetConfig+0x2d4>)
 80037e2:	fba3 2302 	umull	r2, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	011c      	lsls	r4, r3, #4
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	64b9      	str	r1, [r7, #72]	; 0x48
 8003804:	415b      	adcs	r3, r3
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800380c:	4641      	mov	r1, r8
 800380e:	eb12 0a01 	adds.w	sl, r2, r1
 8003812:	4649      	mov	r1, r9
 8003814:	eb43 0b01 	adc.w	fp, r3, r1
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800382c:	4692      	mov	sl, r2
 800382e:	469b      	mov	fp, r3
 8003830:	4643      	mov	r3, r8
 8003832:	eb1a 0303 	adds.w	r3, sl, r3
 8003836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800383a:	464b      	mov	r3, r9
 800383c:	eb4b 0303 	adc.w	r3, fp, r3
 8003840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003858:	460b      	mov	r3, r1
 800385a:	18db      	adds	r3, r3, r3
 800385c:	643b      	str	r3, [r7, #64]	; 0x40
 800385e:	4613      	mov	r3, r2
 8003860:	eb42 0303 	adc.w	r3, r2, r3
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
 8003866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800386a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800386e:	f7fc fd1f 	bl	80002b0 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4611      	mov	r1, r2
 8003878:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <UART_SetConfig+0x2d4>)
 800387a:	fba3 2301 	umull	r2, r3, r3, r1
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2264      	movs	r2, #100	; 0x64
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	1acb      	subs	r3, r1, r3
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <UART_SetConfig+0x2d4>)
 8003890:	fba3 2302 	umull	r2, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800389c:	441c      	add	r4, r3
 800389e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	1891      	adds	r1, r2, r2
 80038b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038b8:	415b      	adcs	r3, r3
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038c0:	4641      	mov	r1, r8
 80038c2:	1851      	adds	r1, r2, r1
 80038c4:	6339      	str	r1, [r7, #48]	; 0x30
 80038c6:	4649      	mov	r1, r9
 80038c8:	414b      	adcs	r3, r1
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038d8:	4659      	mov	r1, fp
 80038da:	00cb      	lsls	r3, r1, #3
 80038dc:	4651      	mov	r1, sl
 80038de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e2:	4651      	mov	r1, sl
 80038e4:	00ca      	lsls	r2, r1, #3
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	4642      	mov	r2, r8
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f4:	464b      	mov	r3, r9
 80038f6:	460a      	mov	r2, r1
 80038f8:	eb42 0303 	adc.w	r3, r2, r3
 80038fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800390c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003914:	460b      	mov	r3, r1
 8003916:	18db      	adds	r3, r3, r3
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
 800391a:	4613      	mov	r3, r2
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800392a:	f7fc fcc1 	bl	80002b0 <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <UART_SetConfig+0x2d4>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	; 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	3332      	adds	r3, #50	; 0x32
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <UART_SetConfig+0x2d4>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 0207 	and.w	r2, r3, #7
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4422      	add	r2, r4
 800395a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800395c:	e106      	b.n	8003b6c <UART_SetConfig+0x4d8>
 800395e:	bf00      	nop
 8003960:	40011000 	.word	0x40011000
 8003964:	40011400 	.word	0x40011400
 8003968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800397a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800397e:	4642      	mov	r2, r8
 8003980:	464b      	mov	r3, r9
 8003982:	1891      	adds	r1, r2, r2
 8003984:	6239      	str	r1, [r7, #32]
 8003986:	415b      	adcs	r3, r3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800398e:	4641      	mov	r1, r8
 8003990:	1854      	adds	r4, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb43 0501 	adc.w	r5, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	00eb      	lsls	r3, r5, #3
 80039a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a6:	00e2      	lsls	r2, r4, #3
 80039a8:	4614      	mov	r4, r2
 80039aa:	461d      	mov	r5, r3
 80039ac:	4643      	mov	r3, r8
 80039ae:	18e3      	adds	r3, r4, r3
 80039b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039b4:	464b      	mov	r3, r9
 80039b6:	eb45 0303 	adc.w	r3, r5, r3
 80039ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039da:	4629      	mov	r1, r5
 80039dc:	008b      	lsls	r3, r1, #2
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e4:	4621      	mov	r1, r4
 80039e6:	008a      	lsls	r2, r1, #2
 80039e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039ec:	f7fc fc60 	bl	80002b0 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <UART_SetConfig+0x4e4>)
 80039f6:	fba3 2302 	umull	r2, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	011c      	lsls	r4, r3, #4
 80039fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	61b9      	str	r1, [r7, #24]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a20:	4641      	mov	r1, r8
 8003a22:	1851      	adds	r1, r2, r1
 8003a24:	6139      	str	r1, [r7, #16]
 8003a26:	4649      	mov	r1, r9
 8003a28:	414b      	adcs	r3, r1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4651      	mov	r1, sl
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a54:	464b      	mov	r3, r9
 8003a56:	460a      	mov	r2, r1
 8003a58:	eb42 0303 	adc.w	r3, r2, r3
 8003a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a78:	4649      	mov	r1, r9
 8003a7a:	008b      	lsls	r3, r1, #2
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a82:	4641      	mov	r1, r8
 8003a84:	008a      	lsls	r2, r1, #2
 8003a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a8a:	f7fc fc11 	bl	80002b0 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <UART_SetConfig+0x4e4>)
 8003a96:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2264      	movs	r2, #100	; 0x64
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	1acb      	subs	r3, r1, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <UART_SetConfig+0x4e4>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab4:	441c      	add	r4, r3
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	673b      	str	r3, [r7, #112]	; 0x70
 8003abe:	677a      	str	r2, [r7, #116]	; 0x74
 8003ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	415b      	adcs	r3, r3
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	1851      	adds	r1, r2, r1
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	4649      	mov	r1, r9
 8003adc:	414b      	adcs	r3, r1
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aec:	4659      	mov	r1, fp
 8003aee:	00cb      	lsls	r3, r1, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af6:	4651      	mov	r1, sl
 8003af8:	00ca      	lsls	r2, r1, #3
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	4642      	mov	r2, r8
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b06:	464b      	mov	r3, r9
 8003b08:	460a      	mov	r2, r1
 8003b0a:	eb42 0303 	adc.w	r3, r2, r3
 8003b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	663b      	str	r3, [r7, #96]	; 0x60
 8003b1a:	667a      	str	r2, [r7, #100]	; 0x64
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b28:	4649      	mov	r1, r9
 8003b2a:	008b      	lsls	r3, r1, #2
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b32:	4641      	mov	r1, r8
 8003b34:	008a      	lsls	r2, r1, #2
 8003b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b3a:	f7fc fbb9 	bl	80002b0 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <UART_SetConfig+0x4e4>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	3332      	adds	r3, #50	; 0x32
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <UART_SetConfig+0x4e4>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4422      	add	r2, r4
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b72:	46bd      	mov	sp, r7
 8003b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b78:	51eb851f 	.word	0x51eb851f

08003b7c <std>:
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	4604      	mov	r4, r0
 8003b82:	e9c0 3300 	strd	r3, r3, [r0]
 8003b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b8a:	6083      	str	r3, [r0, #8]
 8003b8c:	8181      	strh	r1, [r0, #12]
 8003b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b90:	81c2      	strh	r2, [r0, #14]
 8003b92:	6183      	str	r3, [r0, #24]
 8003b94:	4619      	mov	r1, r3
 8003b96:	2208      	movs	r2, #8
 8003b98:	305c      	adds	r0, #92	; 0x5c
 8003b9a:	f000 f8c3 	bl	8003d24 <memset>
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <std+0x58>)
 8003ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <std+0x5c>)
 8003ba4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <std+0x60>)
 8003ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <std+0x64>)
 8003bac:	6323      	str	r3, [r4, #48]	; 0x30
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <std+0x68>)
 8003bb0:	6224      	str	r4, [r4, #32]
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	d006      	beq.n	8003bc4 <std+0x48>
 8003bb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003bba:	4294      	cmp	r4, r2
 8003bbc:	d002      	beq.n	8003bc4 <std+0x48>
 8003bbe:	33d0      	adds	r3, #208	; 0xd0
 8003bc0:	429c      	cmp	r4, r3
 8003bc2:	d105      	bne.n	8003bd0 <std+0x54>
 8003bc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bcc:	f000 b8dc 	b.w	8003d88 <__retarget_lock_init_recursive>
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	080045e9 	.word	0x080045e9
 8003bd8:	0800460b 	.word	0x0800460b
 8003bdc:	08004643 	.word	0x08004643
 8003be0:	08004667 	.word	0x08004667
 8003be4:	2000013c 	.word	0x2000013c

08003be8 <stdio_exit_handler>:
 8003be8:	4a02      	ldr	r2, [pc, #8]	; (8003bf4 <stdio_exit_handler+0xc>)
 8003bea:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <stdio_exit_handler+0x10>)
 8003bec:	4803      	ldr	r0, [pc, #12]	; (8003bfc <stdio_exit_handler+0x14>)
 8003bee:	f000 b869 	b.w	8003cc4 <_fwalk_sglue>
 8003bf2:	bf00      	nop
 8003bf4:	20000018 	.word	0x20000018
 8003bf8:	08004581 	.word	0x08004581
 8003bfc:	20000024 	.word	0x20000024

08003c00 <cleanup_stdio>:
 8003c00:	6841      	ldr	r1, [r0, #4]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <cleanup_stdio+0x34>)
 8003c04:	4299      	cmp	r1, r3
 8003c06:	b510      	push	{r4, lr}
 8003c08:	4604      	mov	r4, r0
 8003c0a:	d001      	beq.n	8003c10 <cleanup_stdio+0x10>
 8003c0c:	f000 fcb8 	bl	8004580 <_fflush_r>
 8003c10:	68a1      	ldr	r1, [r4, #8]
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <cleanup_stdio+0x38>)
 8003c14:	4299      	cmp	r1, r3
 8003c16:	d002      	beq.n	8003c1e <cleanup_stdio+0x1e>
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f000 fcb1 	bl	8004580 <_fflush_r>
 8003c1e:	68e1      	ldr	r1, [r4, #12]
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <cleanup_stdio+0x3c>)
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d004      	beq.n	8003c30 <cleanup_stdio+0x30>
 8003c26:	4620      	mov	r0, r4
 8003c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c2c:	f000 bca8 	b.w	8004580 <_fflush_r>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	bf00      	nop
 8003c34:	2000013c 	.word	0x2000013c
 8003c38:	200001a4 	.word	0x200001a4
 8003c3c:	2000020c 	.word	0x2000020c

08003c40 <global_stdio_init.part.0>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <global_stdio_init.part.0+0x30>)
 8003c44:	4c0b      	ldr	r4, [pc, #44]	; (8003c74 <global_stdio_init.part.0+0x34>)
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <global_stdio_init.part.0+0x38>)
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2104      	movs	r1, #4
 8003c50:	f7ff ff94 	bl	8003b7c <std>
 8003c54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2109      	movs	r1, #9
 8003c5c:	f7ff ff8e 	bl	8003b7c <std>
 8003c60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c64:	2202      	movs	r2, #2
 8003c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6a:	2112      	movs	r1, #18
 8003c6c:	f7ff bf86 	b.w	8003b7c <std>
 8003c70:	20000274 	.word	0x20000274
 8003c74:	2000013c 	.word	0x2000013c
 8003c78:	08003be9 	.word	0x08003be9

08003c7c <__sfp_lock_acquire>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	; (8003c84 <__sfp_lock_acquire+0x8>)
 8003c7e:	f000 b884 	b.w	8003d8a <__retarget_lock_acquire_recursive>
 8003c82:	bf00      	nop
 8003c84:	20000279 	.word	0x20000279

08003c88 <__sfp_lock_release>:
 8003c88:	4801      	ldr	r0, [pc, #4]	; (8003c90 <__sfp_lock_release+0x8>)
 8003c8a:	f000 b87f 	b.w	8003d8c <__retarget_lock_release_recursive>
 8003c8e:	bf00      	nop
 8003c90:	20000279 	.word	0x20000279

08003c94 <__sinit>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	f7ff fff0 	bl	8003c7c <__sfp_lock_acquire>
 8003c9c:	6a23      	ldr	r3, [r4, #32]
 8003c9e:	b11b      	cbz	r3, 8003ca8 <__sinit+0x14>
 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca4:	f7ff bff0 	b.w	8003c88 <__sfp_lock_release>
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <__sinit+0x28>)
 8003caa:	6223      	str	r3, [r4, #32]
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <__sinit+0x2c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f5      	bne.n	8003ca0 <__sinit+0xc>
 8003cb4:	f7ff ffc4 	bl	8003c40 <global_stdio_init.part.0>
 8003cb8:	e7f2      	b.n	8003ca0 <__sinit+0xc>
 8003cba:	bf00      	nop
 8003cbc:	08003c01 	.word	0x08003c01
 8003cc0:	20000274 	.word	0x20000274

08003cc4 <_fwalk_sglue>:
 8003cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc8:	4607      	mov	r7, r0
 8003cca:	4688      	mov	r8, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	2600      	movs	r6, #0
 8003cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd8:	d505      	bpl.n	8003ce6 <_fwalk_sglue+0x22>
 8003cda:	6824      	ldr	r4, [r4, #0]
 8003cdc:	2c00      	cmp	r4, #0
 8003cde:	d1f7      	bne.n	8003cd0 <_fwalk_sglue+0xc>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce6:	89ab      	ldrh	r3, [r5, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d907      	bls.n	8003cfc <_fwalk_sglue+0x38>
 8003cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	d003      	beq.n	8003cfc <_fwalk_sglue+0x38>
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c0      	blx	r8
 8003cfa:	4306      	orrs	r6, r0
 8003cfc:	3568      	adds	r5, #104	; 0x68
 8003cfe:	e7e9      	b.n	8003cd4 <_fwalk_sglue+0x10>

08003d00 <iprintf>:
 8003d00:	b40f      	push	{r0, r1, r2, r3}
 8003d02:	b507      	push	{r0, r1, r2, lr}
 8003d04:	4906      	ldr	r1, [pc, #24]	; (8003d20 <iprintf+0x20>)
 8003d06:	ab04      	add	r3, sp, #16
 8003d08:	6808      	ldr	r0, [r1, #0]
 8003d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d0e:	6881      	ldr	r1, [r0, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	f000 f865 	bl	8003de0 <_vfiprintf_r>
 8003d16:	b003      	add	sp, #12
 8003d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d1c:	b004      	add	sp, #16
 8003d1e:	4770      	bx	lr
 8003d20:	20000070 	.word	0x20000070

08003d24 <memset>:
 8003d24:	4402      	add	r2, r0
 8003d26:	4603      	mov	r3, r0
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <memset+0xa>
 8003d2c:	4770      	bx	lr
 8003d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d32:	e7f9      	b.n	8003d28 <memset+0x4>

08003d34 <__errno>:
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <__errno+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000070 	.word	0x20000070

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4d0d      	ldr	r5, [pc, #52]	; (8003d78 <__libc_init_array+0x38>)
 8003d44:	4c0d      	ldr	r4, [pc, #52]	; (8003d7c <__libc_init_array+0x3c>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	4d0b      	ldr	r5, [pc, #44]	; (8003d80 <__libc_init_array+0x40>)
 8003d52:	4c0c      	ldr	r4, [pc, #48]	; (8003d84 <__libc_init_array+0x44>)
 8003d54:	f000 fe46 	bl	80049e4 <_init>
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	08004a60 	.word	0x08004a60
 8003d7c:	08004a60 	.word	0x08004a60
 8003d80:	08004a60 	.word	0x08004a60
 8003d84:	08004a64 	.word	0x08004a64

08003d88 <__retarget_lock_init_recursive>:
 8003d88:	4770      	bx	lr

08003d8a <__retarget_lock_acquire_recursive>:
 8003d8a:	4770      	bx	lr

08003d8c <__retarget_lock_release_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__sfputc_r>:
 8003d8e:	6893      	ldr	r3, [r2, #8]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	b410      	push	{r4}
 8003d96:	6093      	str	r3, [r2, #8]
 8003d98:	da08      	bge.n	8003dac <__sfputc_r+0x1e>
 8003d9a:	6994      	ldr	r4, [r2, #24]
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	db01      	blt.n	8003da4 <__sfputc_r+0x16>
 8003da0:	290a      	cmp	r1, #10
 8003da2:	d103      	bne.n	8003dac <__sfputc_r+0x1e>
 8003da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da8:	f000 bc61 	b.w	800466e <__swbuf_r>
 8003dac:	6813      	ldr	r3, [r2, #0]
 8003dae:	1c58      	adds	r0, r3, #1
 8003db0:	6010      	str	r0, [r2, #0]
 8003db2:	7019      	strb	r1, [r3, #0]
 8003db4:	4608      	mov	r0, r1
 8003db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <__sfputs_r>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	460f      	mov	r7, r1
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	18d5      	adds	r5, r2, r3
 8003dc6:	42ac      	cmp	r4, r5
 8003dc8:	d101      	bne.n	8003dce <__sfputs_r+0x12>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e007      	b.n	8003dde <__sfputs_r+0x22>
 8003dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd2:	463a      	mov	r2, r7
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7ff ffda 	bl	8003d8e <__sfputc_r>
 8003dda:	1c43      	adds	r3, r0, #1
 8003ddc:	d1f3      	bne.n	8003dc6 <__sfputs_r+0xa>
 8003dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003de0 <_vfiprintf_r>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	460d      	mov	r5, r1
 8003de6:	b09d      	sub	sp, #116	; 0x74
 8003de8:	4614      	mov	r4, r2
 8003dea:	4698      	mov	r8, r3
 8003dec:	4606      	mov	r6, r0
 8003dee:	b118      	cbz	r0, 8003df8 <_vfiprintf_r+0x18>
 8003df0:	6a03      	ldr	r3, [r0, #32]
 8003df2:	b90b      	cbnz	r3, 8003df8 <_vfiprintf_r+0x18>
 8003df4:	f7ff ff4e 	bl	8003c94 <__sinit>
 8003df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dfa:	07d9      	lsls	r1, r3, #31
 8003dfc:	d405      	bmi.n	8003e0a <_vfiprintf_r+0x2a>
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	059a      	lsls	r2, r3, #22
 8003e02:	d402      	bmi.n	8003e0a <_vfiprintf_r+0x2a>
 8003e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e06:	f7ff ffc0 	bl	8003d8a <__retarget_lock_acquire_recursive>
 8003e0a:	89ab      	ldrh	r3, [r5, #12]
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	d501      	bpl.n	8003e14 <_vfiprintf_r+0x34>
 8003e10:	692b      	ldr	r3, [r5, #16]
 8003e12:	b99b      	cbnz	r3, 8003e3c <_vfiprintf_r+0x5c>
 8003e14:	4629      	mov	r1, r5
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 fc66 	bl	80046e8 <__swsetup_r>
 8003e1c:	b170      	cbz	r0, 8003e3c <_vfiprintf_r+0x5c>
 8003e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e20:	07dc      	lsls	r4, r3, #31
 8003e22:	d504      	bpl.n	8003e2e <_vfiprintf_r+0x4e>
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e28:	b01d      	add	sp, #116	; 0x74
 8003e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	0598      	lsls	r0, r3, #22
 8003e32:	d4f7      	bmi.n	8003e24 <_vfiprintf_r+0x44>
 8003e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e36:	f7ff ffa9 	bl	8003d8c <__retarget_lock_release_recursive>
 8003e3a:	e7f3      	b.n	8003e24 <_vfiprintf_r+0x44>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	2320      	movs	r3, #32
 8003e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e4a:	2330      	movs	r3, #48	; 0x30
 8003e4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004000 <_vfiprintf_r+0x220>
 8003e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e54:	f04f 0901 	mov.w	r9, #1
 8003e58:	4623      	mov	r3, r4
 8003e5a:	469a      	mov	sl, r3
 8003e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e60:	b10a      	cbz	r2, 8003e66 <_vfiprintf_r+0x86>
 8003e62:	2a25      	cmp	r2, #37	; 0x25
 8003e64:	d1f9      	bne.n	8003e5a <_vfiprintf_r+0x7a>
 8003e66:	ebba 0b04 	subs.w	fp, sl, r4
 8003e6a:	d00b      	beq.n	8003e84 <_vfiprintf_r+0xa4>
 8003e6c:	465b      	mov	r3, fp
 8003e6e:	4622      	mov	r2, r4
 8003e70:	4629      	mov	r1, r5
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7ff ffa2 	bl	8003dbc <__sfputs_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	f000 80a9 	beq.w	8003fd0 <_vfiprintf_r+0x1f0>
 8003e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e80:	445a      	add	r2, fp
 8003e82:	9209      	str	r2, [sp, #36]	; 0x24
 8003e84:	f89a 3000 	ldrb.w	r3, [sl]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80a1 	beq.w	8003fd0 <_vfiprintf_r+0x1f0>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e98:	f10a 0a01 	add.w	sl, sl, #1
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	9307      	str	r3, [sp, #28]
 8003ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea6:	4654      	mov	r4, sl
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eae:	4854      	ldr	r0, [pc, #336]	; (8004000 <_vfiprintf_r+0x220>)
 8003eb0:	f7fc f9ae 	bl	8000210 <memchr>
 8003eb4:	9a04      	ldr	r2, [sp, #16]
 8003eb6:	b9d8      	cbnz	r0, 8003ef0 <_vfiprintf_r+0x110>
 8003eb8:	06d1      	lsls	r1, r2, #27
 8003eba:	bf44      	itt	mi
 8003ebc:	2320      	movmi	r3, #32
 8003ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec2:	0713      	lsls	r3, r2, #28
 8003ec4:	bf44      	itt	mi
 8003ec6:	232b      	movmi	r3, #43	; 0x2b
 8003ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed2:	d015      	beq.n	8003f00 <_vfiprintf_r+0x120>
 8003ed4:	9a07      	ldr	r2, [sp, #28]
 8003ed6:	4654      	mov	r4, sl
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f04f 0c0a 	mov.w	ip, #10
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ee4:	3b30      	subs	r3, #48	; 0x30
 8003ee6:	2b09      	cmp	r3, #9
 8003ee8:	d94d      	bls.n	8003f86 <_vfiprintf_r+0x1a6>
 8003eea:	b1b0      	cbz	r0, 8003f1a <_vfiprintf_r+0x13a>
 8003eec:	9207      	str	r2, [sp, #28]
 8003eee:	e014      	b.n	8003f1a <_vfiprintf_r+0x13a>
 8003ef0:	eba0 0308 	sub.w	r3, r0, r8
 8003ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	9304      	str	r3, [sp, #16]
 8003efc:	46a2      	mov	sl, r4
 8003efe:	e7d2      	b.n	8003ea6 <_vfiprintf_r+0xc6>
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	1d19      	adds	r1, r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	9103      	str	r1, [sp, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bfbb      	ittet	lt
 8003f0c:	425b      	neglt	r3, r3
 8003f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f12:	9307      	strge	r3, [sp, #28]
 8003f14:	9307      	strlt	r3, [sp, #28]
 8003f16:	bfb8      	it	lt
 8003f18:	9204      	strlt	r2, [sp, #16]
 8003f1a:	7823      	ldrb	r3, [r4, #0]
 8003f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f1e:	d10c      	bne.n	8003f3a <_vfiprintf_r+0x15a>
 8003f20:	7863      	ldrb	r3, [r4, #1]
 8003f22:	2b2a      	cmp	r3, #42	; 0x2a
 8003f24:	d134      	bne.n	8003f90 <_vfiprintf_r+0x1b0>
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	1d1a      	adds	r2, r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	9203      	str	r2, [sp, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfb8      	it	lt
 8003f32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f36:	3402      	adds	r4, #2
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004010 <_vfiprintf_r+0x230>
 8003f3e:	7821      	ldrb	r1, [r4, #0]
 8003f40:	2203      	movs	r2, #3
 8003f42:	4650      	mov	r0, sl
 8003f44:	f7fc f964 	bl	8000210 <memchr>
 8003f48:	b138      	cbz	r0, 8003f5a <_vfiprintf_r+0x17a>
 8003f4a:	9b04      	ldr	r3, [sp, #16]
 8003f4c:	eba0 000a 	sub.w	r0, r0, sl
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	4082      	lsls	r2, r0
 8003f54:	4313      	orrs	r3, r2
 8003f56:	3401      	adds	r4, #1
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5e:	4829      	ldr	r0, [pc, #164]	; (8004004 <_vfiprintf_r+0x224>)
 8003f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f64:	2206      	movs	r2, #6
 8003f66:	f7fc f953 	bl	8000210 <memchr>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d03f      	beq.n	8003fee <_vfiprintf_r+0x20e>
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <_vfiprintf_r+0x228>)
 8003f70:	bb1b      	cbnz	r3, 8003fba <_vfiprintf_r+0x1da>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	3307      	adds	r3, #7
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	9303      	str	r3, [sp, #12]
 8003f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f80:	443b      	add	r3, r7
 8003f82:	9309      	str	r3, [sp, #36]	; 0x24
 8003f84:	e768      	b.n	8003e58 <_vfiprintf_r+0x78>
 8003f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	e7a6      	b.n	8003ede <_vfiprintf_r+0xfe>
 8003f90:	2300      	movs	r3, #0
 8003f92:	3401      	adds	r4, #1
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	4619      	mov	r1, r3
 8003f98:	f04f 0c0a 	mov.w	ip, #10
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa2:	3a30      	subs	r2, #48	; 0x30
 8003fa4:	2a09      	cmp	r2, #9
 8003fa6:	d903      	bls.n	8003fb0 <_vfiprintf_r+0x1d0>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0c6      	beq.n	8003f3a <_vfiprintf_r+0x15a>
 8003fac:	9105      	str	r1, [sp, #20]
 8003fae:	e7c4      	b.n	8003f3a <_vfiprintf_r+0x15a>
 8003fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e7f0      	b.n	8003f9c <_vfiprintf_r+0x1bc>
 8003fba:	ab03      	add	r3, sp, #12
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <_vfiprintf_r+0x22c>)
 8003fc2:	a904      	add	r1, sp, #16
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f3af 8000 	nop.w
 8003fca:	4607      	mov	r7, r0
 8003fcc:	1c78      	adds	r0, r7, #1
 8003fce:	d1d6      	bne.n	8003f7e <_vfiprintf_r+0x19e>
 8003fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_vfiprintf_r+0x202>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	059a      	lsls	r2, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_vfiprintf_r+0x202>
 8003fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fde:	f7ff fed5 	bl	8003d8c <__retarget_lock_release_recursive>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	065b      	lsls	r3, r3, #25
 8003fe6:	f53f af1d 	bmi.w	8003e24 <_vfiprintf_r+0x44>
 8003fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fec:	e71c      	b.n	8003e28 <_vfiprintf_r+0x48>
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <_vfiprintf_r+0x22c>)
 8003ff6:	a904      	add	r1, sp, #16
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f919 	bl	8004230 <_printf_i>
 8003ffe:	e7e4      	b.n	8003fca <_vfiprintf_r+0x1ea>
 8004000:	08004a24 	.word	0x08004a24
 8004004:	08004a2e 	.word	0x08004a2e
 8004008:	00000000 	.word	0x00000000
 800400c:	08003dbd 	.word	0x08003dbd
 8004010:	08004a2a 	.word	0x08004a2a

08004014 <sbrk_aligned>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4e0e      	ldr	r6, [pc, #56]	; (8004050 <sbrk_aligned+0x3c>)
 8004018:	460c      	mov	r4, r1
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	4605      	mov	r5, r0
 800401e:	b911      	cbnz	r1, 8004026 <sbrk_aligned+0x12>
 8004020:	f000 fc72 	bl	8004908 <_sbrk_r>
 8004024:	6030      	str	r0, [r6, #0]
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 fc6d 	bl	8004908 <_sbrk_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d00a      	beq.n	8004048 <sbrk_aligned+0x34>
 8004032:	1cc4      	adds	r4, r0, #3
 8004034:	f024 0403 	bic.w	r4, r4, #3
 8004038:	42a0      	cmp	r0, r4
 800403a:	d007      	beq.n	800404c <sbrk_aligned+0x38>
 800403c:	1a21      	subs	r1, r4, r0
 800403e:	4628      	mov	r0, r5
 8004040:	f000 fc62 	bl	8004908 <_sbrk_r>
 8004044:	3001      	adds	r0, #1
 8004046:	d101      	bne.n	800404c <sbrk_aligned+0x38>
 8004048:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800404c:	4620      	mov	r0, r4
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	20000280 	.word	0x20000280

08004054 <_malloc_r>:
 8004054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004058:	1ccd      	adds	r5, r1, #3
 800405a:	f025 0503 	bic.w	r5, r5, #3
 800405e:	3508      	adds	r5, #8
 8004060:	2d0c      	cmp	r5, #12
 8004062:	bf38      	it	cc
 8004064:	250c      	movcc	r5, #12
 8004066:	2d00      	cmp	r5, #0
 8004068:	4607      	mov	r7, r0
 800406a:	db01      	blt.n	8004070 <_malloc_r+0x1c>
 800406c:	42a9      	cmp	r1, r5
 800406e:	d905      	bls.n	800407c <_malloc_r+0x28>
 8004070:	230c      	movs	r3, #12
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	2600      	movs	r6, #0
 8004076:	4630      	mov	r0, r6
 8004078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004150 <_malloc_r+0xfc>
 8004080:	f000 faa6 	bl	80045d0 <__malloc_lock>
 8004084:	f8d8 3000 	ldr.w	r3, [r8]
 8004088:	461c      	mov	r4, r3
 800408a:	bb5c      	cbnz	r4, 80040e4 <_malloc_r+0x90>
 800408c:	4629      	mov	r1, r5
 800408e:	4638      	mov	r0, r7
 8004090:	f7ff ffc0 	bl	8004014 <sbrk_aligned>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	4604      	mov	r4, r0
 8004098:	d155      	bne.n	8004146 <_malloc_r+0xf2>
 800409a:	f8d8 4000 	ldr.w	r4, [r8]
 800409e:	4626      	mov	r6, r4
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	d145      	bne.n	8004130 <_malloc_r+0xdc>
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	d048      	beq.n	800413a <_malloc_r+0xe6>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	4631      	mov	r1, r6
 80040ac:	4638      	mov	r0, r7
 80040ae:	eb04 0903 	add.w	r9, r4, r3
 80040b2:	f000 fc29 	bl	8004908 <_sbrk_r>
 80040b6:	4581      	cmp	r9, r0
 80040b8:	d13f      	bne.n	800413a <_malloc_r+0xe6>
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	1a6d      	subs	r5, r5, r1
 80040be:	4629      	mov	r1, r5
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7ff ffa7 	bl	8004014 <sbrk_aligned>
 80040c6:	3001      	adds	r0, #1
 80040c8:	d037      	beq.n	800413a <_malloc_r+0xe6>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	442b      	add	r3, r5
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f8d8 3000 	ldr.w	r3, [r8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d038      	beq.n	800414a <_malloc_r+0xf6>
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	42a2      	cmp	r2, r4
 80040dc:	d12b      	bne.n	8004136 <_malloc_r+0xe2>
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	e00f      	b.n	8004104 <_malloc_r+0xb0>
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	1b52      	subs	r2, r2, r5
 80040e8:	d41f      	bmi.n	800412a <_malloc_r+0xd6>
 80040ea:	2a0b      	cmp	r2, #11
 80040ec:	d917      	bls.n	800411e <_malloc_r+0xca>
 80040ee:	1961      	adds	r1, r4, r5
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	6025      	str	r5, [r4, #0]
 80040f4:	bf18      	it	ne
 80040f6:	6059      	strne	r1, [r3, #4]
 80040f8:	6863      	ldr	r3, [r4, #4]
 80040fa:	bf08      	it	eq
 80040fc:	f8c8 1000 	streq.w	r1, [r8]
 8004100:	5162      	str	r2, [r4, r5]
 8004102:	604b      	str	r3, [r1, #4]
 8004104:	4638      	mov	r0, r7
 8004106:	f104 060b 	add.w	r6, r4, #11
 800410a:	f000 fa67 	bl	80045dc <__malloc_unlock>
 800410e:	f026 0607 	bic.w	r6, r6, #7
 8004112:	1d23      	adds	r3, r4, #4
 8004114:	1af2      	subs	r2, r6, r3
 8004116:	d0ae      	beq.n	8004076 <_malloc_r+0x22>
 8004118:	1b9b      	subs	r3, r3, r6
 800411a:	50a3      	str	r3, [r4, r2]
 800411c:	e7ab      	b.n	8004076 <_malloc_r+0x22>
 800411e:	42a3      	cmp	r3, r4
 8004120:	6862      	ldr	r2, [r4, #4]
 8004122:	d1dd      	bne.n	80040e0 <_malloc_r+0x8c>
 8004124:	f8c8 2000 	str.w	r2, [r8]
 8004128:	e7ec      	b.n	8004104 <_malloc_r+0xb0>
 800412a:	4623      	mov	r3, r4
 800412c:	6864      	ldr	r4, [r4, #4]
 800412e:	e7ac      	b.n	800408a <_malloc_r+0x36>
 8004130:	4634      	mov	r4, r6
 8004132:	6876      	ldr	r6, [r6, #4]
 8004134:	e7b4      	b.n	80040a0 <_malloc_r+0x4c>
 8004136:	4613      	mov	r3, r2
 8004138:	e7cc      	b.n	80040d4 <_malloc_r+0x80>
 800413a:	230c      	movs	r3, #12
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4638      	mov	r0, r7
 8004140:	f000 fa4c 	bl	80045dc <__malloc_unlock>
 8004144:	e797      	b.n	8004076 <_malloc_r+0x22>
 8004146:	6025      	str	r5, [r4, #0]
 8004148:	e7dc      	b.n	8004104 <_malloc_r+0xb0>
 800414a:	605b      	str	r3, [r3, #4]
 800414c:	deff      	udf	#255	; 0xff
 800414e:	bf00      	nop
 8004150:	2000027c 	.word	0x2000027c

08004154 <_printf_common>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4616      	mov	r6, r2
 800415a:	4699      	mov	r9, r3
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004164:	4293      	cmp	r3, r2
 8004166:	bfb8      	it	lt
 8004168:	4613      	movlt	r3, r2
 800416a:	6033      	str	r3, [r6, #0]
 800416c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004170:	4607      	mov	r7, r0
 8004172:	460c      	mov	r4, r1
 8004174:	b10a      	cbz	r2, 800417a <_printf_common+0x26>
 8004176:	3301      	adds	r3, #1
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	0699      	lsls	r1, r3, #26
 800417e:	bf42      	ittt	mi
 8004180:	6833      	ldrmi	r3, [r6, #0]
 8004182:	3302      	addmi	r3, #2
 8004184:	6033      	strmi	r3, [r6, #0]
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	f015 0506 	ands.w	r5, r5, #6
 800418c:	d106      	bne.n	800419c <_printf_common+0x48>
 800418e:	f104 0a19 	add.w	sl, r4, #25
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	6832      	ldr	r2, [r6, #0]
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	42ab      	cmp	r3, r5
 800419a:	dc26      	bgt.n	80041ea <_printf_common+0x96>
 800419c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041a0:	1e13      	subs	r3, r2, #0
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	bf18      	it	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	0692      	lsls	r2, r2, #26
 80041aa:	d42b      	bmi.n	8004204 <_printf_common+0xb0>
 80041ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b0:	4649      	mov	r1, r9
 80041b2:	4638      	mov	r0, r7
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d01e      	beq.n	80041f8 <_printf_common+0xa4>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	6922      	ldr	r2, [r4, #16]
 80041be:	f003 0306 	and.w	r3, r3, #6
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf02      	ittt	eq
 80041c6:	68e5      	ldreq	r5, [r4, #12]
 80041c8:	6833      	ldreq	r3, [r6, #0]
 80041ca:	1aed      	subeq	r5, r5, r3
 80041cc:	68a3      	ldr	r3, [r4, #8]
 80041ce:	bf0c      	ite	eq
 80041d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d4:	2500      	movne	r5, #0
 80041d6:	4293      	cmp	r3, r2
 80041d8:	bfc4      	itt	gt
 80041da:	1a9b      	subgt	r3, r3, r2
 80041dc:	18ed      	addgt	r5, r5, r3
 80041de:	2600      	movs	r6, #0
 80041e0:	341a      	adds	r4, #26
 80041e2:	42b5      	cmp	r5, r6
 80041e4:	d11a      	bne.n	800421c <_printf_common+0xc8>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e008      	b.n	80041fc <_printf_common+0xa8>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4652      	mov	r2, sl
 80041ee:	4649      	mov	r1, r9
 80041f0:	4638      	mov	r0, r7
 80041f2:	47c0      	blx	r8
 80041f4:	3001      	adds	r0, #1
 80041f6:	d103      	bne.n	8004200 <_printf_common+0xac>
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	3501      	adds	r5, #1
 8004202:	e7c6      	b.n	8004192 <_printf_common+0x3e>
 8004204:	18e1      	adds	r1, r4, r3
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	2030      	movs	r0, #48	; 0x30
 800420a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800420e:	4422      	add	r2, r4
 8004210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004218:	3302      	adds	r3, #2
 800421a:	e7c7      	b.n	80041ac <_printf_common+0x58>
 800421c:	2301      	movs	r3, #1
 800421e:	4622      	mov	r2, r4
 8004220:	4649      	mov	r1, r9
 8004222:	4638      	mov	r0, r7
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d0e6      	beq.n	80041f8 <_printf_common+0xa4>
 800422a:	3601      	adds	r6, #1
 800422c:	e7d9      	b.n	80041e2 <_printf_common+0x8e>
	...

08004230 <_printf_i>:
 8004230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	7e0f      	ldrb	r7, [r1, #24]
 8004236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004238:	2f78      	cmp	r7, #120	; 0x78
 800423a:	4691      	mov	r9, r2
 800423c:	4680      	mov	r8, r0
 800423e:	460c      	mov	r4, r1
 8004240:	469a      	mov	sl, r3
 8004242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004246:	d807      	bhi.n	8004258 <_printf_i+0x28>
 8004248:	2f62      	cmp	r7, #98	; 0x62
 800424a:	d80a      	bhi.n	8004262 <_printf_i+0x32>
 800424c:	2f00      	cmp	r7, #0
 800424e:	f000 80d4 	beq.w	80043fa <_printf_i+0x1ca>
 8004252:	2f58      	cmp	r7, #88	; 0x58
 8004254:	f000 80c0 	beq.w	80043d8 <_printf_i+0x1a8>
 8004258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800425c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004260:	e03a      	b.n	80042d8 <_printf_i+0xa8>
 8004262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004266:	2b15      	cmp	r3, #21
 8004268:	d8f6      	bhi.n	8004258 <_printf_i+0x28>
 800426a:	a101      	add	r1, pc, #4	; (adr r1, 8004270 <_printf_i+0x40>)
 800426c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004270:	080042c9 	.word	0x080042c9
 8004274:	080042dd 	.word	0x080042dd
 8004278:	08004259 	.word	0x08004259
 800427c:	08004259 	.word	0x08004259
 8004280:	08004259 	.word	0x08004259
 8004284:	08004259 	.word	0x08004259
 8004288:	080042dd 	.word	0x080042dd
 800428c:	08004259 	.word	0x08004259
 8004290:	08004259 	.word	0x08004259
 8004294:	08004259 	.word	0x08004259
 8004298:	08004259 	.word	0x08004259
 800429c:	080043e1 	.word	0x080043e1
 80042a0:	08004309 	.word	0x08004309
 80042a4:	0800439b 	.word	0x0800439b
 80042a8:	08004259 	.word	0x08004259
 80042ac:	08004259 	.word	0x08004259
 80042b0:	08004403 	.word	0x08004403
 80042b4:	08004259 	.word	0x08004259
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004259 	.word	0x08004259
 80042c0:	08004259 	.word	0x08004259
 80042c4:	080043a3 	.word	0x080043a3
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	602a      	str	r2, [r5, #0]
 80042d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d8:	2301      	movs	r3, #1
 80042da:	e09f      	b.n	800441c <_printf_i+0x1ec>
 80042dc:	6820      	ldr	r0, [r4, #0]
 80042de:	682b      	ldr	r3, [r5, #0]
 80042e0:	0607      	lsls	r7, r0, #24
 80042e2:	f103 0104 	add.w	r1, r3, #4
 80042e6:	6029      	str	r1, [r5, #0]
 80042e8:	d501      	bpl.n	80042ee <_printf_i+0xbe>
 80042ea:	681e      	ldr	r6, [r3, #0]
 80042ec:	e003      	b.n	80042f6 <_printf_i+0xc6>
 80042ee:	0646      	lsls	r6, r0, #25
 80042f0:	d5fb      	bpl.n	80042ea <_printf_i+0xba>
 80042f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	da03      	bge.n	8004302 <_printf_i+0xd2>
 80042fa:	232d      	movs	r3, #45	; 0x2d
 80042fc:	4276      	negs	r6, r6
 80042fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004302:	485a      	ldr	r0, [pc, #360]	; (800446c <_printf_i+0x23c>)
 8004304:	230a      	movs	r3, #10
 8004306:	e012      	b.n	800432e <_printf_i+0xfe>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	6029      	str	r1, [r5, #0]
 8004310:	0605      	lsls	r5, r0, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xe8>
 8004314:	681e      	ldr	r6, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0xee>
 8004318:	0641      	lsls	r1, r0, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xe4>
 800431c:	881e      	ldrh	r6, [r3, #0]
 800431e:	4853      	ldr	r0, [pc, #332]	; (800446c <_printf_i+0x23c>)
 8004320:	2f6f      	cmp	r7, #111	; 0x6f
 8004322:	bf0c      	ite	eq
 8004324:	2308      	moveq	r3, #8
 8004326:	230a      	movne	r3, #10
 8004328:	2100      	movs	r1, #0
 800432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432e:	6865      	ldr	r5, [r4, #4]
 8004330:	60a5      	str	r5, [r4, #8]
 8004332:	2d00      	cmp	r5, #0
 8004334:	bfa2      	ittt	ge
 8004336:	6821      	ldrge	r1, [r4, #0]
 8004338:	f021 0104 	bicge.w	r1, r1, #4
 800433c:	6021      	strge	r1, [r4, #0]
 800433e:	b90e      	cbnz	r6, 8004344 <_printf_i+0x114>
 8004340:	2d00      	cmp	r5, #0
 8004342:	d04b      	beq.n	80043dc <_printf_i+0x1ac>
 8004344:	4615      	mov	r5, r2
 8004346:	fbb6 f1f3 	udiv	r1, r6, r3
 800434a:	fb03 6711 	mls	r7, r3, r1, r6
 800434e:	5dc7      	ldrb	r7, [r0, r7]
 8004350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004354:	4637      	mov	r7, r6
 8004356:	42bb      	cmp	r3, r7
 8004358:	460e      	mov	r6, r1
 800435a:	d9f4      	bls.n	8004346 <_printf_i+0x116>
 800435c:	2b08      	cmp	r3, #8
 800435e:	d10b      	bne.n	8004378 <_printf_i+0x148>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07de      	lsls	r6, r3, #31
 8004364:	d508      	bpl.n	8004378 <_printf_i+0x148>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	6861      	ldr	r1, [r4, #4]
 800436a:	4299      	cmp	r1, r3
 800436c:	bfde      	ittt	le
 800436e:	2330      	movle	r3, #48	; 0x30
 8004370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004378:	1b52      	subs	r2, r2, r5
 800437a:	6122      	str	r2, [r4, #16]
 800437c:	f8cd a000 	str.w	sl, [sp]
 8004380:	464b      	mov	r3, r9
 8004382:	aa03      	add	r2, sp, #12
 8004384:	4621      	mov	r1, r4
 8004386:	4640      	mov	r0, r8
 8004388:	f7ff fee4 	bl	8004154 <_printf_common>
 800438c:	3001      	adds	r0, #1
 800438e:	d14a      	bne.n	8004426 <_printf_i+0x1f6>
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004394:	b004      	add	sp, #16
 8004396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	4833      	ldr	r0, [pc, #204]	; (8004470 <_printf_i+0x240>)
 80043a4:	2778      	movs	r7, #120	; 0x78
 80043a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6829      	ldr	r1, [r5, #0]
 80043ae:	061f      	lsls	r7, r3, #24
 80043b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80043b4:	d402      	bmi.n	80043bc <_printf_i+0x18c>
 80043b6:	065f      	lsls	r7, r3, #25
 80043b8:	bf48      	it	mi
 80043ba:	b2b6      	uxthmi	r6, r6
 80043bc:	07df      	lsls	r7, r3, #31
 80043be:	bf48      	it	mi
 80043c0:	f043 0320 	orrmi.w	r3, r3, #32
 80043c4:	6029      	str	r1, [r5, #0]
 80043c6:	bf48      	it	mi
 80043c8:	6023      	strmi	r3, [r4, #0]
 80043ca:	b91e      	cbnz	r6, 80043d4 <_printf_i+0x1a4>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f023 0320 	bic.w	r3, r3, #32
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	2310      	movs	r3, #16
 80043d6:	e7a7      	b.n	8004328 <_printf_i+0xf8>
 80043d8:	4824      	ldr	r0, [pc, #144]	; (800446c <_printf_i+0x23c>)
 80043da:	e7e4      	b.n	80043a6 <_printf_i+0x176>
 80043dc:	4615      	mov	r5, r2
 80043de:	e7bd      	b.n	800435c <_printf_i+0x12c>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	6826      	ldr	r6, [r4, #0]
 80043e4:	6961      	ldr	r1, [r4, #20]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6028      	str	r0, [r5, #0]
 80043ea:	0635      	lsls	r5, r6, #24
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	d501      	bpl.n	80043f4 <_printf_i+0x1c4>
 80043f0:	6019      	str	r1, [r3, #0]
 80043f2:	e002      	b.n	80043fa <_printf_i+0x1ca>
 80043f4:	0670      	lsls	r0, r6, #25
 80043f6:	d5fb      	bpl.n	80043f0 <_printf_i+0x1c0>
 80043f8:	8019      	strh	r1, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	4615      	mov	r5, r2
 8004400:	e7bc      	b.n	800437c <_printf_i+0x14c>
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	1d1a      	adds	r2, r3, #4
 8004406:	602a      	str	r2, [r5, #0]
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	2100      	movs	r1, #0
 800440e:	4628      	mov	r0, r5
 8004410:	f7fb fefe 	bl	8000210 <memchr>
 8004414:	b108      	cbz	r0, 800441a <_printf_i+0x1ea>
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	2300      	movs	r3, #0
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004424:	e7aa      	b.n	800437c <_printf_i+0x14c>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	462a      	mov	r2, r5
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d0ad      	beq.n	8004390 <_printf_i+0x160>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	d413      	bmi.n	8004462 <_printf_i+0x232>
 800443a:	68e0      	ldr	r0, [r4, #12]
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	4298      	cmp	r0, r3
 8004440:	bfb8      	it	lt
 8004442:	4618      	movlt	r0, r3
 8004444:	e7a6      	b.n	8004394 <_printf_i+0x164>
 8004446:	2301      	movs	r3, #1
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	47d0      	blx	sl
 8004450:	3001      	adds	r0, #1
 8004452:	d09d      	beq.n	8004390 <_printf_i+0x160>
 8004454:	3501      	adds	r5, #1
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	9903      	ldr	r1, [sp, #12]
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	42ab      	cmp	r3, r5
 800445e:	dcf2      	bgt.n	8004446 <_printf_i+0x216>
 8004460:	e7eb      	b.n	800443a <_printf_i+0x20a>
 8004462:	2500      	movs	r5, #0
 8004464:	f104 0619 	add.w	r6, r4, #25
 8004468:	e7f5      	b.n	8004456 <_printf_i+0x226>
 800446a:	bf00      	nop
 800446c:	08004a35 	.word	0x08004a35
 8004470:	08004a46 	.word	0x08004a46

08004474 <__sflush_r>:
 8004474:	898a      	ldrh	r2, [r1, #12]
 8004476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800447a:	4605      	mov	r5, r0
 800447c:	0710      	lsls	r0, r2, #28
 800447e:	460c      	mov	r4, r1
 8004480:	d458      	bmi.n	8004534 <__sflush_r+0xc0>
 8004482:	684b      	ldr	r3, [r1, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	dc05      	bgt.n	8004494 <__sflush_r+0x20>
 8004488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	dc02      	bgt.n	8004494 <__sflush_r+0x20>
 800448e:	2000      	movs	r0, #0
 8004490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004496:	2e00      	cmp	r6, #0
 8004498:	d0f9      	beq.n	800448e <__sflush_r+0x1a>
 800449a:	2300      	movs	r3, #0
 800449c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044a0:	682f      	ldr	r7, [r5, #0]
 80044a2:	6a21      	ldr	r1, [r4, #32]
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	d032      	beq.n	800450e <__sflush_r+0x9a>
 80044a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	075a      	lsls	r2, r3, #29
 80044ae:	d505      	bpl.n	80044bc <__sflush_r+0x48>
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	1ac0      	subs	r0, r0, r3
 80044b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044b6:	b10b      	cbz	r3, 80044bc <__sflush_r+0x48>
 80044b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044ba:	1ac0      	subs	r0, r0, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	4602      	mov	r2, r0
 80044c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c2:	6a21      	ldr	r1, [r4, #32]
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b0      	blx	r6
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	d106      	bne.n	80044dc <__sflush_r+0x68>
 80044ce:	6829      	ldr	r1, [r5, #0]
 80044d0:	291d      	cmp	r1, #29
 80044d2:	d82b      	bhi.n	800452c <__sflush_r+0xb8>
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <__sflush_r+0x108>)
 80044d6:	410a      	asrs	r2, r1
 80044d8:	07d6      	lsls	r6, r2, #31
 80044da:	d427      	bmi.n	800452c <__sflush_r+0xb8>
 80044dc:	2200      	movs	r2, #0
 80044de:	6062      	str	r2, [r4, #4]
 80044e0:	04d9      	lsls	r1, r3, #19
 80044e2:	6922      	ldr	r2, [r4, #16]
 80044e4:	6022      	str	r2, [r4, #0]
 80044e6:	d504      	bpl.n	80044f2 <__sflush_r+0x7e>
 80044e8:	1c42      	adds	r2, r0, #1
 80044ea:	d101      	bne.n	80044f0 <__sflush_r+0x7c>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b903      	cbnz	r3, 80044f2 <__sflush_r+0x7e>
 80044f0:	6560      	str	r0, [r4, #84]	; 0x54
 80044f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f4:	602f      	str	r7, [r5, #0]
 80044f6:	2900      	cmp	r1, #0
 80044f8:	d0c9      	beq.n	800448e <__sflush_r+0x1a>
 80044fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044fe:	4299      	cmp	r1, r3
 8004500:	d002      	beq.n	8004508 <__sflush_r+0x94>
 8004502:	4628      	mov	r0, r5
 8004504:	f000 fa22 	bl	800494c <_free_r>
 8004508:	2000      	movs	r0, #0
 800450a:	6360      	str	r0, [r4, #52]	; 0x34
 800450c:	e7c0      	b.n	8004490 <__sflush_r+0x1c>
 800450e:	2301      	movs	r3, #1
 8004510:	4628      	mov	r0, r5
 8004512:	47b0      	blx	r6
 8004514:	1c41      	adds	r1, r0, #1
 8004516:	d1c8      	bne.n	80044aa <__sflush_r+0x36>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0c5      	beq.n	80044aa <__sflush_r+0x36>
 800451e:	2b1d      	cmp	r3, #29
 8004520:	d001      	beq.n	8004526 <__sflush_r+0xb2>
 8004522:	2b16      	cmp	r3, #22
 8004524:	d101      	bne.n	800452a <__sflush_r+0xb6>
 8004526:	602f      	str	r7, [r5, #0]
 8004528:	e7b1      	b.n	800448e <__sflush_r+0x1a>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	e7ad      	b.n	8004490 <__sflush_r+0x1c>
 8004534:	690f      	ldr	r7, [r1, #16]
 8004536:	2f00      	cmp	r7, #0
 8004538:	d0a9      	beq.n	800448e <__sflush_r+0x1a>
 800453a:	0793      	lsls	r3, r2, #30
 800453c:	680e      	ldr	r6, [r1, #0]
 800453e:	bf08      	it	eq
 8004540:	694b      	ldreq	r3, [r1, #20]
 8004542:	600f      	str	r7, [r1, #0]
 8004544:	bf18      	it	ne
 8004546:	2300      	movne	r3, #0
 8004548:	eba6 0807 	sub.w	r8, r6, r7
 800454c:	608b      	str	r3, [r1, #8]
 800454e:	f1b8 0f00 	cmp.w	r8, #0
 8004552:	dd9c      	ble.n	800448e <__sflush_r+0x1a>
 8004554:	6a21      	ldr	r1, [r4, #32]
 8004556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004558:	4643      	mov	r3, r8
 800455a:	463a      	mov	r2, r7
 800455c:	4628      	mov	r0, r5
 800455e:	47b0      	blx	r6
 8004560:	2800      	cmp	r0, #0
 8004562:	dc06      	bgt.n	8004572 <__sflush_r+0xfe>
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004570:	e78e      	b.n	8004490 <__sflush_r+0x1c>
 8004572:	4407      	add	r7, r0
 8004574:	eba8 0800 	sub.w	r8, r8, r0
 8004578:	e7e9      	b.n	800454e <__sflush_r+0xda>
 800457a:	bf00      	nop
 800457c:	dfbffffe 	.word	0xdfbffffe

08004580 <_fflush_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	4605      	mov	r5, r0
 8004586:	460c      	mov	r4, r1
 8004588:	b913      	cbnz	r3, 8004590 <_fflush_r+0x10>
 800458a:	2500      	movs	r5, #0
 800458c:	4628      	mov	r0, r5
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	b118      	cbz	r0, 800459a <_fflush_r+0x1a>
 8004592:	6a03      	ldr	r3, [r0, #32]
 8004594:	b90b      	cbnz	r3, 800459a <_fflush_r+0x1a>
 8004596:	f7ff fb7d 	bl	8003c94 <__sinit>
 800459a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f3      	beq.n	800458a <_fflush_r+0xa>
 80045a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045a4:	07d0      	lsls	r0, r2, #31
 80045a6:	d404      	bmi.n	80045b2 <_fflush_r+0x32>
 80045a8:	0599      	lsls	r1, r3, #22
 80045aa:	d402      	bmi.n	80045b2 <_fflush_r+0x32>
 80045ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ae:	f7ff fbec 	bl	8003d8a <__retarget_lock_acquire_recursive>
 80045b2:	4628      	mov	r0, r5
 80045b4:	4621      	mov	r1, r4
 80045b6:	f7ff ff5d 	bl	8004474 <__sflush_r>
 80045ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045bc:	07da      	lsls	r2, r3, #31
 80045be:	4605      	mov	r5, r0
 80045c0:	d4e4      	bmi.n	800458c <_fflush_r+0xc>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	059b      	lsls	r3, r3, #22
 80045c6:	d4e1      	bmi.n	800458c <_fflush_r+0xc>
 80045c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ca:	f7ff fbdf 	bl	8003d8c <__retarget_lock_release_recursive>
 80045ce:	e7dd      	b.n	800458c <_fflush_r+0xc>

080045d0 <__malloc_lock>:
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <__malloc_lock+0x8>)
 80045d2:	f7ff bbda 	b.w	8003d8a <__retarget_lock_acquire_recursive>
 80045d6:	bf00      	nop
 80045d8:	20000278 	.word	0x20000278

080045dc <__malloc_unlock>:
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <__malloc_unlock+0x8>)
 80045de:	f7ff bbd5 	b.w	8003d8c <__retarget_lock_release_recursive>
 80045e2:	bf00      	nop
 80045e4:	20000278 	.word	0x20000278

080045e8 <__sread>:
 80045e8:	b510      	push	{r4, lr}
 80045ea:	460c      	mov	r4, r1
 80045ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f0:	f000 f978 	bl	80048e4 <_read_r>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	bfab      	itete	ge
 80045f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045fa:	89a3      	ldrhlt	r3, [r4, #12]
 80045fc:	181b      	addge	r3, r3, r0
 80045fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004602:	bfac      	ite	ge
 8004604:	6563      	strge	r3, [r4, #84]	; 0x54
 8004606:	81a3      	strhlt	r3, [r4, #12]
 8004608:	bd10      	pop	{r4, pc}

0800460a <__swrite>:
 800460a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460e:	461f      	mov	r7, r3
 8004610:	898b      	ldrh	r3, [r1, #12]
 8004612:	05db      	lsls	r3, r3, #23
 8004614:	4605      	mov	r5, r0
 8004616:	460c      	mov	r4, r1
 8004618:	4616      	mov	r6, r2
 800461a:	d505      	bpl.n	8004628 <__swrite+0x1e>
 800461c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004620:	2302      	movs	r3, #2
 8004622:	2200      	movs	r2, #0
 8004624:	f000 f94c 	bl	80048c0 <_lseek_r>
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800462e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	4632      	mov	r2, r6
 8004636:	463b      	mov	r3, r7
 8004638:	4628      	mov	r0, r5
 800463a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800463e:	f000 b973 	b.w	8004928 <_write_r>

08004642 <__sseek>:
 8004642:	b510      	push	{r4, lr}
 8004644:	460c      	mov	r4, r1
 8004646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464a:	f000 f939 	bl	80048c0 <_lseek_r>
 800464e:	1c43      	adds	r3, r0, #1
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	bf15      	itete	ne
 8004654:	6560      	strne	r0, [r4, #84]	; 0x54
 8004656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800465a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800465e:	81a3      	strheq	r3, [r4, #12]
 8004660:	bf18      	it	ne
 8004662:	81a3      	strhne	r3, [r4, #12]
 8004664:	bd10      	pop	{r4, pc}

08004666 <__sclose>:
 8004666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466a:	f000 b8f7 	b.w	800485c <_close_r>

0800466e <__swbuf_r>:
 800466e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004670:	460e      	mov	r6, r1
 8004672:	4614      	mov	r4, r2
 8004674:	4605      	mov	r5, r0
 8004676:	b118      	cbz	r0, 8004680 <__swbuf_r+0x12>
 8004678:	6a03      	ldr	r3, [r0, #32]
 800467a:	b90b      	cbnz	r3, 8004680 <__swbuf_r+0x12>
 800467c:	f7ff fb0a 	bl	8003c94 <__sinit>
 8004680:	69a3      	ldr	r3, [r4, #24]
 8004682:	60a3      	str	r3, [r4, #8]
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	071a      	lsls	r2, r3, #28
 8004688:	d525      	bpl.n	80046d6 <__swbuf_r+0x68>
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	b31b      	cbz	r3, 80046d6 <__swbuf_r+0x68>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	1a98      	subs	r0, r3, r2
 8004694:	6963      	ldr	r3, [r4, #20]
 8004696:	b2f6      	uxtb	r6, r6
 8004698:	4283      	cmp	r3, r0
 800469a:	4637      	mov	r7, r6
 800469c:	dc04      	bgt.n	80046a8 <__swbuf_r+0x3a>
 800469e:	4621      	mov	r1, r4
 80046a0:	4628      	mov	r0, r5
 80046a2:	f7ff ff6d 	bl	8004580 <_fflush_r>
 80046a6:	b9e0      	cbnz	r0, 80046e2 <__swbuf_r+0x74>
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	701e      	strb	r6, [r3, #0]
 80046b6:	6962      	ldr	r2, [r4, #20]
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d004      	beq.n	80046c8 <__swbuf_r+0x5a>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	07db      	lsls	r3, r3, #31
 80046c2:	d506      	bpl.n	80046d2 <__swbuf_r+0x64>
 80046c4:	2e0a      	cmp	r6, #10
 80046c6:	d104      	bne.n	80046d2 <__swbuf_r+0x64>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7ff ff58 	bl	8004580 <_fflush_r>
 80046d0:	b938      	cbnz	r0, 80046e2 <__swbuf_r+0x74>
 80046d2:	4638      	mov	r0, r7
 80046d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f805 	bl	80046e8 <__swsetup_r>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0d5      	beq.n	800468e <__swbuf_r+0x20>
 80046e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80046e6:	e7f4      	b.n	80046d2 <__swbuf_r+0x64>

080046e8 <__swsetup_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4b2a      	ldr	r3, [pc, #168]	; (8004794 <__swsetup_r+0xac>)
 80046ec:	4605      	mov	r5, r0
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	460c      	mov	r4, r1
 80046f2:	b118      	cbz	r0, 80046fc <__swsetup_r+0x14>
 80046f4:	6a03      	ldr	r3, [r0, #32]
 80046f6:	b90b      	cbnz	r3, 80046fc <__swsetup_r+0x14>
 80046f8:	f7ff facc 	bl	8003c94 <__sinit>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004702:	0718      	lsls	r0, r3, #28
 8004704:	d422      	bmi.n	800474c <__swsetup_r+0x64>
 8004706:	06d9      	lsls	r1, r3, #27
 8004708:	d407      	bmi.n	800471a <__swsetup_r+0x32>
 800470a:	2309      	movs	r3, #9
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004718:	e034      	b.n	8004784 <__swsetup_r+0x9c>
 800471a:	0758      	lsls	r0, r3, #29
 800471c:	d512      	bpl.n	8004744 <__swsetup_r+0x5c>
 800471e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004720:	b141      	cbz	r1, 8004734 <__swsetup_r+0x4c>
 8004722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004726:	4299      	cmp	r1, r3
 8004728:	d002      	beq.n	8004730 <__swsetup_r+0x48>
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f90e 	bl	800494c <_free_r>
 8004730:	2300      	movs	r3, #0
 8004732:	6363      	str	r3, [r4, #52]	; 0x34
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	2300      	movs	r3, #0
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0308 	orr.w	r3, r3, #8
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	b94b      	cbnz	r3, 8004764 <__swsetup_r+0x7c>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475a:	d003      	beq.n	8004764 <__swsetup_r+0x7c>
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f840 	bl	80047e4 <__smakebuf_r>
 8004764:	89a0      	ldrh	r0, [r4, #12]
 8004766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800476a:	f010 0301 	ands.w	r3, r0, #1
 800476e:	d00a      	beq.n	8004786 <__swsetup_r+0x9e>
 8004770:	2300      	movs	r3, #0
 8004772:	60a3      	str	r3, [r4, #8]
 8004774:	6963      	ldr	r3, [r4, #20]
 8004776:	425b      	negs	r3, r3
 8004778:	61a3      	str	r3, [r4, #24]
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	b943      	cbnz	r3, 8004790 <__swsetup_r+0xa8>
 800477e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004782:	d1c4      	bne.n	800470e <__swsetup_r+0x26>
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	0781      	lsls	r1, r0, #30
 8004788:	bf58      	it	pl
 800478a:	6963      	ldrpl	r3, [r4, #20]
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	e7f4      	b.n	800477a <__swsetup_r+0x92>
 8004790:	2000      	movs	r0, #0
 8004792:	e7f7      	b.n	8004784 <__swsetup_r+0x9c>
 8004794:	20000070 	.word	0x20000070

08004798 <__swhatbuf_r>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	460c      	mov	r4, r1
 800479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a0:	2900      	cmp	r1, #0
 80047a2:	b096      	sub	sp, #88	; 0x58
 80047a4:	4615      	mov	r5, r2
 80047a6:	461e      	mov	r6, r3
 80047a8:	da0d      	bge.n	80047c6 <__swhatbuf_r+0x2e>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	bf0c      	ite	eq
 80047b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80047ba:	2340      	movne	r3, #64	; 0x40
 80047bc:	2000      	movs	r0, #0
 80047be:	6031      	str	r1, [r6, #0]
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	b016      	add	sp, #88	; 0x58
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	466a      	mov	r2, sp
 80047c8:	f000 f858 	bl	800487c <_fstat_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	dbec      	blt.n	80047aa <__swhatbuf_r+0x12>
 80047d0:	9901      	ldr	r1, [sp, #4]
 80047d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80047d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80047da:	4259      	negs	r1, r3
 80047dc:	4159      	adcs	r1, r3
 80047de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e2:	e7eb      	b.n	80047bc <__swhatbuf_r+0x24>

080047e4 <__smakebuf_r>:
 80047e4:	898b      	ldrh	r3, [r1, #12]
 80047e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047e8:	079d      	lsls	r5, r3, #30
 80047ea:	4606      	mov	r6, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	d507      	bpl.n	8004800 <__smakebuf_r+0x1c>
 80047f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	6123      	str	r3, [r4, #16]
 80047f8:	2301      	movs	r3, #1
 80047fa:	6163      	str	r3, [r4, #20]
 80047fc:	b002      	add	sp, #8
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	ab01      	add	r3, sp, #4
 8004802:	466a      	mov	r2, sp
 8004804:	f7ff ffc8 	bl	8004798 <__swhatbuf_r>
 8004808:	9900      	ldr	r1, [sp, #0]
 800480a:	4605      	mov	r5, r0
 800480c:	4630      	mov	r0, r6
 800480e:	f7ff fc21 	bl	8004054 <_malloc_r>
 8004812:	b948      	cbnz	r0, 8004828 <__smakebuf_r+0x44>
 8004814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004818:	059a      	lsls	r2, r3, #22
 800481a:	d4ef      	bmi.n	80047fc <__smakebuf_r+0x18>
 800481c:	f023 0303 	bic.w	r3, r3, #3
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	e7e3      	b.n	80047f0 <__smakebuf_r+0xc>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	6020      	str	r0, [r4, #0]
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	9b00      	ldr	r3, [sp, #0]
 8004834:	6163      	str	r3, [r4, #20]
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	6120      	str	r0, [r4, #16]
 800483a:	b15b      	cbz	r3, 8004854 <__smakebuf_r+0x70>
 800483c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f82d 	bl	80048a0 <_isatty_r>
 8004846:	b128      	cbz	r0, 8004854 <__smakebuf_r+0x70>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	431d      	orrs	r5, r3
 8004858:	81a5      	strh	r5, [r4, #12]
 800485a:	e7cf      	b.n	80047fc <__smakebuf_r+0x18>

0800485c <_close_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4d06      	ldr	r5, [pc, #24]	; (8004878 <_close_r+0x1c>)
 8004860:	2300      	movs	r3, #0
 8004862:	4604      	mov	r4, r0
 8004864:	4608      	mov	r0, r1
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	f7fc f9a3 	bl	8000bb2 <_close>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d102      	bne.n	8004876 <_close_r+0x1a>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	b103      	cbz	r3, 8004876 <_close_r+0x1a>
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	20000284 	.word	0x20000284

0800487c <_fstat_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4d07      	ldr	r5, [pc, #28]	; (800489c <_fstat_r+0x20>)
 8004880:	2300      	movs	r3, #0
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	f7fc f99e 	bl	8000bca <_fstat>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	d102      	bne.n	8004898 <_fstat_r+0x1c>
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	b103      	cbz	r3, 8004898 <_fstat_r+0x1c>
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	bd38      	pop	{r3, r4, r5, pc}
 800489a:	bf00      	nop
 800489c:	20000284 	.word	0x20000284

080048a0 <_isatty_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4d06      	ldr	r5, [pc, #24]	; (80048bc <_isatty_r+0x1c>)
 80048a4:	2300      	movs	r3, #0
 80048a6:	4604      	mov	r4, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	f7fc f99d 	bl	8000bea <_isatty>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_isatty_r+0x1a>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_isatty_r+0x1a>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	20000284 	.word	0x20000284

080048c0 <_lseek_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	; (80048e0 <_lseek_r+0x20>)
 80048c4:	4604      	mov	r4, r0
 80048c6:	4608      	mov	r0, r1
 80048c8:	4611      	mov	r1, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fc f996 	bl	8000c00 <_lseek>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_lseek_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_lseek_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	20000284 	.word	0x20000284

080048e4 <_read_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	; (8004904 <_read_r+0x20>)
 80048e8:	4604      	mov	r4, r0
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fc f924 	bl	8000b40 <_read>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_read_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_read_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000284 	.word	0x20000284

08004908 <_sbrk_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d06      	ldr	r5, [pc, #24]	; (8004924 <_sbrk_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc f982 	bl	8000c1c <_sbrk>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_sbrk_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_sbrk_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	20000284 	.word	0x20000284

08004928 <_write_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	; (8004948 <_write_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc f91f 	bl	8000b7a <_write>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_write_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_write_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	20000284 	.word	0x20000284

0800494c <_free_r>:
 800494c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800494e:	2900      	cmp	r1, #0
 8004950:	d044      	beq.n	80049dc <_free_r+0x90>
 8004952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004956:	9001      	str	r0, [sp, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f1a1 0404 	sub.w	r4, r1, #4
 800495e:	bfb8      	it	lt
 8004960:	18e4      	addlt	r4, r4, r3
 8004962:	f7ff fe35 	bl	80045d0 <__malloc_lock>
 8004966:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <_free_r+0x94>)
 8004968:	9801      	ldr	r0, [sp, #4]
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	b933      	cbnz	r3, 800497c <_free_r+0x30>
 800496e:	6063      	str	r3, [r4, #4]
 8004970:	6014      	str	r4, [r2, #0]
 8004972:	b003      	add	sp, #12
 8004974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004978:	f7ff be30 	b.w	80045dc <__malloc_unlock>
 800497c:	42a3      	cmp	r3, r4
 800497e:	d908      	bls.n	8004992 <_free_r+0x46>
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	1961      	adds	r1, r4, r5
 8004984:	428b      	cmp	r3, r1
 8004986:	bf01      	itttt	eq
 8004988:	6819      	ldreq	r1, [r3, #0]
 800498a:	685b      	ldreq	r3, [r3, #4]
 800498c:	1949      	addeq	r1, r1, r5
 800498e:	6021      	streq	r1, [r4, #0]
 8004990:	e7ed      	b.n	800496e <_free_r+0x22>
 8004992:	461a      	mov	r2, r3
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b10b      	cbz	r3, 800499c <_free_r+0x50>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d9fa      	bls.n	8004992 <_free_r+0x46>
 800499c:	6811      	ldr	r1, [r2, #0]
 800499e:	1855      	adds	r5, r2, r1
 80049a0:	42a5      	cmp	r5, r4
 80049a2:	d10b      	bne.n	80049bc <_free_r+0x70>
 80049a4:	6824      	ldr	r4, [r4, #0]
 80049a6:	4421      	add	r1, r4
 80049a8:	1854      	adds	r4, r2, r1
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	d1e0      	bne.n	8004972 <_free_r+0x26>
 80049b0:	681c      	ldr	r4, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	6053      	str	r3, [r2, #4]
 80049b6:	440c      	add	r4, r1
 80049b8:	6014      	str	r4, [r2, #0]
 80049ba:	e7da      	b.n	8004972 <_free_r+0x26>
 80049bc:	d902      	bls.n	80049c4 <_free_r+0x78>
 80049be:	230c      	movs	r3, #12
 80049c0:	6003      	str	r3, [r0, #0]
 80049c2:	e7d6      	b.n	8004972 <_free_r+0x26>
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	1961      	adds	r1, r4, r5
 80049c8:	428b      	cmp	r3, r1
 80049ca:	bf04      	itt	eq
 80049cc:	6819      	ldreq	r1, [r3, #0]
 80049ce:	685b      	ldreq	r3, [r3, #4]
 80049d0:	6063      	str	r3, [r4, #4]
 80049d2:	bf04      	itt	eq
 80049d4:	1949      	addeq	r1, r1, r5
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	6054      	str	r4, [r2, #4]
 80049da:	e7ca      	b.n	8004972 <_free_r+0x26>
 80049dc:	b003      	add	sp, #12
 80049de:	bd30      	pop	{r4, r5, pc}
 80049e0:	2000027c 	.word	0x2000027c

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
