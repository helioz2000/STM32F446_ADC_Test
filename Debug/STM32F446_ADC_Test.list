
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010af8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c68  08010cc8  08010cc8  00020cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015930  08015930  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08015930  08015930  00025930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015938  08015938  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015938  08015938  00025938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801593c  0801593c  0002593c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08015940  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000098a4  20000228  08015b68  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009acc  08015b68  00039acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a147  00000000  00000000  0003029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f3c  00000000  00000000  0004a3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0004e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001296  00000000  00000000  0004fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a1e  00000000  00000000  00050da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020426  00000000  00000000  000787c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c3e  00000000  00000000  00098bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c94  00000000  00000000  0017e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001864bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010cb0 	.word	0x08010cb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08010cb0 	.word	0x08010cb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cba:	f000 b9bb 	b.w	8001034 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f84d 	bl	8000d6c <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f840 	bl	8000d6c <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f82f 	bl	8000d6c <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f821 	bl	8000d6c <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d50:	f000 b970 	b.w	8001034 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f806 	bl	8000d6c <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	9e08      	ldr	r6, [sp, #32]
 8000d72:	460d      	mov	r5, r1
 8000d74:	4604      	mov	r4, r0
 8000d76:	460f      	mov	r7, r1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14a      	bne.n	8000e12 <__udivmoddi4+0xa6>
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	4694      	mov	ip, r2
 8000d80:	d965      	bls.n	8000e4e <__udivmoddi4+0xe2>
 8000d82:	fab2 f382 	clz	r3, r2
 8000d86:	b143      	cbz	r3, 8000d9a <__udivmoddi4+0x2e>
 8000d88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d8c:	f1c3 0220 	rsb	r2, r3, #32
 8000d90:	409f      	lsls	r7, r3
 8000d92:	fa20 f202 	lsr.w	r2, r0, r2
 8000d96:	4317      	orrs	r7, r2
 8000d98:	409c      	lsls	r4, r3
 8000d9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d9e:	fa1f f58c 	uxth.w	r5, ip
 8000da2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000da6:	0c22      	lsrs	r2, r4, #16
 8000da8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db0:	fb01 f005 	mul.w	r0, r1, r5
 8000db4:	4290      	cmp	r0, r2
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x62>
 8000db8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dc0:	f080 811c 	bcs.w	8000ffc <__udivmoddi4+0x290>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f240 8119 	bls.w	8000ffc <__udivmoddi4+0x290>
 8000dca:	3902      	subs	r1, #2
 8000dcc:	4462      	add	r2, ip
 8000dce:	1a12      	subs	r2, r2, r0
 8000dd0:	b2a4      	uxth	r4, r4
 8000dd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dde:	fb00 f505 	mul.w	r5, r0, r5
 8000de2:	42a5      	cmp	r5, r4
 8000de4:	d90a      	bls.n	8000dfc <__udivmoddi4+0x90>
 8000de6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dea:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dee:	f080 8107 	bcs.w	8001000 <__udivmoddi4+0x294>
 8000df2:	42a5      	cmp	r5, r4
 8000df4:	f240 8104 	bls.w	8001000 <__udivmoddi4+0x294>
 8000df8:	4464      	add	r4, ip
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11e      	cbz	r6, 8000e0e <__udivmoddi4+0xa2>
 8000e06:	40dc      	lsrs	r4, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0xbc>
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	f000 80ed 	beq.w	8000ff6 <__udivmoddi4+0x28a>
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e22:	4608      	mov	r0, r1
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	fab3 f183 	clz	r1, r3
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	d149      	bne.n	8000ec4 <__udivmoddi4+0x158>
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d302      	bcc.n	8000e3a <__udivmoddi4+0xce>
 8000e34:	4282      	cmp	r2, r0
 8000e36:	f200 80f8 	bhi.w	800102a <__udivmoddi4+0x2be>
 8000e3a:	1a84      	subs	r4, r0, r2
 8000e3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e40:	2001      	movs	r0, #1
 8000e42:	4617      	mov	r7, r2
 8000e44:	2e00      	cmp	r6, #0
 8000e46:	d0e2      	beq.n	8000e0e <__udivmoddi4+0xa2>
 8000e48:	e9c6 4700 	strd	r4, r7, [r6]
 8000e4c:	e7df      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e4e:	b902      	cbnz	r2, 8000e52 <__udivmoddi4+0xe6>
 8000e50:	deff      	udf	#255	; 0xff
 8000e52:	fab2 f382 	clz	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x210>
 8000e5c:	1a8a      	subs	r2, r1, r2
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2101      	movs	r1, #1
 8000e68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000e70:	0c22      	lsrs	r2, r4, #16
 8000e72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e76:	fb0e f005 	mul.w	r0, lr, r5
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x124>
 8000e7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e82:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x122>
 8000e88:	4290      	cmp	r0, r2
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2b8>
 8000e8e:	4645      	mov	r5, r8
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e98:	fb07 2210 	mls	r2, r7, r0, r2
 8000e9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x14e>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x14c>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2c2>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ec2:	e79f      	b.n	8000e04 <__udivmoddi4+0x98>
 8000ec4:	f1c1 0720 	rsb	r7, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ed6:	fa20 f307 	lsr.w	r3, r0, r7
 8000eda:	40fd      	lsrs	r5, r7
 8000edc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee0:	4323      	orrs	r3, r4
 8000ee2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ee6:	fa1f fe8c 	uxth.w	lr, ip
 8000eea:	fb09 5518 	mls	r5, r9, r8, r5
 8000eee:	0c1c      	lsrs	r4, r3, #16
 8000ef0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	fa00 f001 	lsl.w	r0, r0, r1
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b0>
 8000f04:	eb1c 0404 	adds.w	r4, ip, r4
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2b4>
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2b4>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4464      	add	r4, ip
 8000f1c:	1b64      	subs	r4, r4, r5
 8000f1e:	b29d      	uxth	r5, r3
 8000f20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f24:	fb09 4413 	mls	r4, r9, r3, r4
 8000f28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f30:	45a6      	cmp	lr, r4
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1da>
 8000f34:	eb1c 0404 	adds.w	r4, ip, r4
 8000f38:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2ac>
 8000f3e:	45a6      	cmp	lr, r4
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2ac>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	4464      	add	r4, ip
 8000f46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000f4e:	eba4 040e 	sub.w	r4, r4, lr
 8000f52:	42ac      	cmp	r4, r5
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46ae      	mov	lr, r5
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x29c>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x298>
 8000f5c:	b156      	cbz	r6, 8000f74 <__udivmoddi4+0x208>
 8000f5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000f62:	eb64 040e 	sbc.w	r4, r4, lr
 8000f66:	fa04 f707 	lsl.w	r7, r4, r7
 8000f6a:	40ca      	lsrs	r2, r1
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	4317      	orrs	r7, r2
 8000f70:	e9c6 7400 	strd	r7, r4, [r6]
 8000f74:	4618      	mov	r0, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7c:	f1c3 0120 	rsb	r1, r3, #32
 8000f80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f84:	fa20 f201 	lsr.w	r2, r0, r1
 8000f88:	fa25 f101 	lsr.w	r1, r5, r1
 8000f8c:	409d      	lsls	r5, r3
 8000f8e:	432a      	orrs	r2, r5
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa0:	0c11      	lsrs	r1, r2, #16
 8000fa2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fa6:	fb00 f50e 	mul.w	r5, r0, lr
 8000faa:	428d      	cmp	r5, r1
 8000fac:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x258>
 8000fb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b0>
 8000fbc:	428d      	cmp	r5, r1
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b0>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4461      	add	r1, ip
 8000fc4:	1b49      	subs	r1, r1, r5
 8000fc6:	b292      	uxth	r2, r2
 8000fc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd8:	4291      	cmp	r1, r2
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x282>
 8000fdc:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2a8>
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2a8>
 8000fea:	3d02      	subs	r5, #2
 8000fec:	4462      	add	r2, ip
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0xfc>
 8000ff6:	4631      	mov	r1, r6
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	e708      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	e6e6      	b.n	8000dce <__udivmoddi4+0x62>
 8001000:	4610      	mov	r0, r2
 8001002:	e6fb      	b.n	8000dfc <__udivmoddi4+0x90>
 8001004:	4548      	cmp	r0, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f0>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001010:	3b01      	subs	r3, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f0>
 8001014:	4645      	mov	r5, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x282>
 8001018:	462b      	mov	r3, r5
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1da>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x258>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b0>
 8001024:	3d02      	subs	r5, #2
 8001026:	4462      	add	r2, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x124>
 800102a:	4608      	mov	r0, r1
 800102c:	e70a      	b.n	8000e44 <__udivmoddi4+0xd8>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x14e>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <calc_process_dma_buffer+0x24>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <calc_process_dma_buffer+0x24>
		return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105a:	e0bc      	b.n	80011d6 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001064:	7c7b      	ldrb	r3, [r7, #17]
 8001066:	3301      	adds	r3, #1
 8001068:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8001070:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001074:	82bb      	strh	r3, [r7, #20]
 8001076:	e001      	b.n	800107c <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001078:	2300      	movs	r3, #0
 800107a:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 800107c:	8abb      	ldrh	r3, [r7, #20]
 800107e:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8001082:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	4956      	ldr	r1, [pc, #344]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001098:	7c7a      	ldrb	r2, [r7, #17]
 800109a:	4951      	ldr	r1, [pc, #324]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3302      	adds	r3, #2
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	494c      	ldr	r1, [pc, #304]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010c0:	7c3a      	ldrb	r2, [r7, #16]
 80010c2:	4947      	ldr	r1, [pc, #284]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3302      	adds	r3, #2
 80010d0:	2200      	movs	r2, #0
 80010d2:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010d4:	7c7a      	ldrb	r2, [r7, #17]
 80010d6:	4942      	ldr	r1, [pc, #264]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3304      	adds	r3, #4
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e8:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010ea:	7c7a      	ldrb	r2, [r7, #17]
 80010ec:	493c      	ldr	r1, [pc, #240]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	3308      	adds	r3, #8
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010fe:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 8001100:	7c3a      	ldrb	r2, [r7, #16]
 8001102:	4937      	ldr	r1, [pc, #220]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3304      	adds	r3, #4
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001116:	7c3a      	ldrb	r2, [r7, #16]
 8001118:	4931      	ldr	r1, [pc, #196]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3308      	adds	r3, #8
 8001126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800112a:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 800112c:	7c7a      	ldrb	r2, [r7, #17]
 800112e:	492c      	ldr	r1, [pc, #176]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 8001140:	7c3a      	ldrb	r2, [r7, #16]
 8001142:	4927      	ldr	r1, [pc, #156]	; (80011e0 <calc_process_dma_buffer+0x1a8>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330c      	adds	r3, #12
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001154:	8abb      	ldrh	r3, [r7, #20]
 8001156:	82fb      	strh	r3, [r7, #22]
 8001158:	e030      	b.n	80011bc <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 800115a:	8af9      	ldrh	r1, [r7, #22]
 800115c:	7c7a      	ldrb	r2, [r7, #17]
 800115e:	8a7b      	ldrh	r3, [r7, #18]
 8001160:	4c20      	ldr	r4, [pc, #128]	; (80011e4 <calc_process_dma_buffer+0x1ac>)
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001168:	fb05 f000 	mul.w	r0, r5, r0
 800116c:	4401      	add	r1, r0
 800116e:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8001172:	491d      	ldr	r1, [pc, #116]	; (80011e8 <calc_process_dma_buffer+0x1b0>)
 8001174:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001178:	fb00 f202 	mul.w	r2, r0, r2
 800117c:	4413      	add	r3, r2
 800117e:	4622      	mov	r2, r4
 8001180:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001184:	8afb      	ldrh	r3, [r7, #22]
 8001186:	1c59      	adds	r1, r3, #1
 8001188:	7c3a      	ldrb	r2, [r7, #16]
 800118a:	8a7b      	ldrh	r3, [r7, #18]
 800118c:	1c58      	adds	r0, r3, #1
 800118e:	8278      	strh	r0, [r7, #18]
 8001190:	461d      	mov	r5, r3
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <calc_process_dma_buffer+0x1ac>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 800119a:	fb04 f303 	mul.w	r3, r4, r3
 800119e:	440b      	add	r3, r1
 80011a0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011a4:	4910      	ldr	r1, [pc, #64]	; (80011e8 <calc_process_dma_buffer+0x1b0>)
 80011a6:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	442b      	add	r3, r5
 80011b0:	4602      	mov	r2, r0
 80011b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011b6:	8afb      	ldrh	r3, [r7, #22]
 80011b8:	3302      	adds	r3, #2
 80011ba:	82fb      	strh	r3, [r7, #22]
 80011bc:	8afa      	ldrh	r2, [r7, #22]
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d9ca      	bls.n	800115a <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011c4:	7c7b      	ldrb	r3, [r7, #17]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f93c 	bl	8001444 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011cc:	7c3b      	ldrb	r3, [r7, #16]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f938 	bl	8001444 <calc_downsample>
	return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000244 	.word	0x20000244
 80011e4:	200024d0 	.word	0x200024d0
 80011e8:	20005950 	.word	0x20005950

080011ec <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	f200 8117 	bhi.w	8001430 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0fda      	lsrs	r2, r3, #31
 800120e:	4413      	add	r3, r2
 8001210:	105b      	asrs	r3, r3, #1
 8001212:	461a      	mov	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	0fda      	lsrs	r2, r3, #31
 800121e:	4413      	add	r3, r2
 8001220:	105b      	asrs	r3, r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	e0df      	b.n	80013f2 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	4981      	ldr	r1, [pc, #516]	; (800143c <calc_zero_detector+0x250>)
 8001236:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800123a:	fb03 f202 	mul.w	r2, r3, r2
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4413      	add	r3, r2
 8001242:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001246:	461a      	mov	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4293      	cmp	r3, r2
 800124c:	f300 80ce 	bgt.w	80013ec <calc_zero_detector+0x200>
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	497a      	ldr	r1, [pc, #488]	; (800143c <calc_zero_detector+0x250>)
 8001254:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001258:	fb03 f202 	mul.w	r2, r3, r2
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4413      	add	r3, r2
 8001260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001264:	461a      	mov	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	4293      	cmp	r3, r2
 800126a:	f2c0 80bf 	blt.w	80013ec <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4972      	ldr	r1, [pc, #456]	; (800143c <calc_zero_detector+0x250>)
 8001272:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001276:	fb03 f202 	mul.w	r2, r3, r2
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4413      	add	r3, r2
 800127e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001282:	461a      	mov	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4293      	cmp	r3, r2
 8001288:	da3d      	bge.n	8001306 <calc_zero_detector+0x11a>
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	3b01      	subs	r3, #1
 8001290:	496a      	ldr	r1, [pc, #424]	; (800143c <calc_zero_detector+0x250>)
 8001292:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001296:	fb00 f202 	mul.w	r2, r0, r2
 800129a:	4413      	add	r3, r2
 800129c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	db2e      	blt.n	8001306 <calc_zero_detector+0x11a>
				detected++;
 80012a8:	7ffb      	ldrb	r3, [r7, #31]
 80012aa:	3301      	adds	r3, #1
 80012ac:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	dd11      	ble.n	80012d8 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	3b02      	subs	r3, #2
 80012ba:	4960      	ldr	r1, [pc, #384]	; (800143c <calc_zero_detector+0x250>)
 80012bc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012c0:	fb00 f202 	mul.w	r2, r0, r2
 80012c4:	4413      	add	r3, r2
 80012c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4293      	cmp	r3, r2
 80012d0:	dd02      	ble.n	80012d8 <calc_zero_detector+0xec>
						detected++;
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	3301      	adds	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	3302      	adds	r3, #2
 80012dc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012e0:	d211      	bcs.n	8001306 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3302      	adds	r3, #2
 80012e8:	4954      	ldr	r1, [pc, #336]	; (800143c <calc_zero_detector+0x250>)
 80012ea:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ee:	fb00 f202 	mul.w	r2, r0, r2
 80012f2:	4413      	add	r3, r2
 80012f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	da02      	bge.n	8001306 <calc_zero_detector+0x11a>
						detected++;
 8001300:	7ffb      	ldrb	r3, [r7, #31]
 8001302:	3301      	adds	r3, #1
 8001304:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d90f      	bls.n	800132c <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	494c      	ldr	r1, [pc, #304]	; (8001440 <calc_zero_detector+0x254>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3304      	adds	r3, #4
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001324:	7fbb      	ldrb	r3, [r7, #30]
 8001326:	3301      	adds	r3, #1
 8001328:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800132a:	e05f      	b.n	80013ec <calc_zero_detector+0x200>
			}
			detected = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4942      	ldr	r1, [pc, #264]	; (800143c <calc_zero_detector+0x250>)
 8001334:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001338:	fb03 f202 	mul.w	r2, r3, r2
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4413      	add	r3, r2
 8001340:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001344:	461a      	mov	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4293      	cmp	r3, r2
 800134a:	dd4f      	ble.n	80013ec <calc_zero_detector+0x200>
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3b01      	subs	r3, #1
 8001352:	493a      	ldr	r1, [pc, #232]	; (800143c <calc_zero_detector+0x250>)
 8001354:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001358:	fb00 f202 	mul.w	r2, r0, r2
 800135c:	4413      	add	r3, r2
 800135e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001362:	461a      	mov	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4293      	cmp	r3, r2
 8001368:	dc40      	bgt.n	80013ec <calc_zero_detector+0x200>
				detected++;
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	3301      	adds	r3, #1
 800136e:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b01      	cmp	r3, #1
 8001374:	dd11      	ble.n	800139a <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	3b02      	subs	r3, #2
 800137c:	492f      	ldr	r1, [pc, #188]	; (800143c <calc_zero_detector+0x250>)
 800137e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001382:	fb00 f202 	mul.w	r2, r0, r2
 8001386:	4413      	add	r3, r2
 8001388:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	4293      	cmp	r3, r2
 8001392:	dc02      	bgt.n	800139a <calc_zero_detector+0x1ae>
						detected++;
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	3301      	adds	r3, #1
 8001398:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	3302      	adds	r3, #2
 800139e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013a2:	d211      	bcs.n	80013c8 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	3302      	adds	r3, #2
 80013aa:	4924      	ldr	r1, [pc, #144]	; (800143c <calc_zero_detector+0x250>)
 80013ac:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013b0:	fb00 f202 	mul.w	r2, r0, r2
 80013b4:	4413      	add	r3, r2
 80013b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4293      	cmp	r3, r2
 80013c0:	dd02      	ble.n	80013c8 <calc_zero_detector+0x1dc>
						detected++;
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
 80013c4:	3301      	adds	r3, #1
 80013c6:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d90c      	bls.n	80013e8 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	491b      	ldr	r1, [pc, #108]	; (8001440 <calc_zero_detector+0x254>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	3308      	adds	r3, #8
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013e2:	7fbb      	ldrb	r3, [r7, #30]
 80013e4:	3301      	adds	r3, #1
 80013e6:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013f8:	f4ff af1b 	bcc.w	8001232 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80013fc:	7fbb      	ldrb	r3, [r7, #30]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d917      	bls.n	8001432 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <calc_zero_detector+0x254>)
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3308      	adds	r3, #8
 8001412:	f06f 0208 	mvn.w	r2, #8
 8001416:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	4909      	ldr	r1, [pc, #36]	; (8001440 <calc_zero_detector+0x254>)
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3304      	adds	r3, #4
 8001428:	f06f 0208 	mvn.w	r2, #8
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e000      	b.n	8001432 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001430:	bf00      	nop
	}
}
 8001432:	3724      	adds	r7, #36	; 0x24
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20007390 	.word	0x20007390
 8001440:	20000244 	.word	0x20000244

08001444 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 800144e:	2300      	movs	r3, #0
 8001450:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b03      	cmp	r3, #3
 8001456:	f200 80f1 	bhi.w	800163c <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	e083      	b.n	8001568 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4978      	ldr	r1, [pc, #480]	; (8001644 <calc_downsample+0x200>)
 8001464:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001468:	fb03 f202 	mul.w	r2, r3, r2
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	4413      	add	r3, r2
 8001470:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001474:	461c      	mov	r4, r3
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	3b01      	subs	r3, #1
 800147c:	4971      	ldr	r1, [pc, #452]	; (8001644 <calc_downsample+0x200>)
 800147e:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001482:	fb00 f202 	mul.w	r2, r0, r2
 8001486:	4413      	add	r3, r2
 8001488:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800148c:	4423      	add	r3, r4
 800148e:	79f9      	ldrb	r1, [r7, #7]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	3201      	adds	r2, #1
 8001494:	486b      	ldr	r0, [pc, #428]	; (8001644 <calc_downsample+0x200>)
 8001496:	f44f 7452 	mov.w	r4, #840	; 0x348
 800149a:	fb04 f101 	mul.w	r1, r4, r1
 800149e:	440a      	add	r2, r1
 80014a0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a68      	ldr	r2, [pc, #416]	; (8001648 <calc_downsample+0x204>)
 80014a8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ac:	17db      	asrs	r3, r3, #31
 80014ae:	1ad1      	subs	r1, r2, r3
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	8bfb      	ldrh	r3, [r7, #30]
 80014b4:	b28c      	uxth	r4, r1
 80014b6:	4965      	ldr	r1, [pc, #404]	; (800164c <calc_downsample+0x208>)
 80014b8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014bc:	fb00 f202 	mul.w	r2, r0, r2
 80014c0:	4413      	add	r3, r2
 80014c2:	4622      	mov	r2, r4
 80014c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	4961      	ldr	r1, [pc, #388]	; (8001650 <calc_downsample+0x20c>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	82bb      	strh	r3, [r7, #20]
 80014da:	79fa      	ldrb	r2, [r7, #7]
 80014dc:	8bfb      	ldrh	r3, [r7, #30]
 80014de:	495b      	ldr	r1, [pc, #364]	; (800164c <calc_downsample+0x208>)
 80014e0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014e4:	fb00 f202 	mul.w	r2, r0, r2
 80014e8:	4413      	add	r3, r2
 80014ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014ee:	827b      	strh	r3, [r7, #18]
 80014f0:	8a7a      	ldrh	r2, [r7, #18]
 80014f2:	8abb      	ldrh	r3, [r7, #20]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	bf28      	it	cs
 80014f8:	4613      	movcs	r3, r2
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	b298      	uxth	r0, r3
 8001500:	4953      	ldr	r1, [pc, #332]	; (8001650 <calc_downsample+0x20c>)
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	4602      	mov	r2, r0
 800150e:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	494f      	ldr	r1, [pc, #316]	; (8001650 <calc_downsample+0x20c>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	3302      	adds	r3, #2
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	823b      	strh	r3, [r7, #16]
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	8bfb      	ldrh	r3, [r7, #30]
 8001528:	4948      	ldr	r1, [pc, #288]	; (800164c <calc_downsample+0x208>)
 800152a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800152e:	fb00 f202 	mul.w	r2, r0, r2
 8001532:	4413      	add	r3, r2
 8001534:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	89fa      	ldrh	r2, [r7, #14]
 800153c:	8a3b      	ldrh	r3, [r7, #16]
 800153e:	4293      	cmp	r3, r2
 8001540:	bf38      	it	cc
 8001542:	4613      	movcc	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	b298      	uxth	r0, r3
 800154a:	4941      	ldr	r1, [pc, #260]	; (8001650 <calc_downsample+0x20c>)
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3302      	adds	r3, #2
 8001558:	4602      	mov	r2, r0
 800155a:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 800155c:	8bfb      	ldrh	r3, [r7, #30]
 800155e:	3301      	adds	r3, #1
 8001560:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	3302      	adds	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f240 3245 	movw	r2, #837	; 0x345
 800156e:	4293      	cmp	r3, r2
 8001570:	f67f af76 	bls.w	8001460 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <calc_downsample+0x200>)
 8001578:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <calc_downsample+0x200>)
 800158e:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4403      	add	r3, r0
 80015a0:	0fda      	lsrs	r2, r3, #31
 80015a2:	4413      	add	r3, r2
 80015a4:	105b      	asrs	r3, r3, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	8bfb      	ldrh	r3, [r7, #30]
 80015ac:	1c59      	adds	r1, r3, #1
 80015ae:	83f9      	strh	r1, [r7, #30]
 80015b0:	461c      	mov	r4, r3
 80015b2:	b280      	uxth	r0, r0
 80015b4:	4925      	ldr	r1, [pc, #148]	; (800164c <calc_downsample+0x208>)
 80015b6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4423      	add	r3, r4
 80015c0:	4602      	mov	r2, r0
 80015c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015cc:	d20a      	bcs.n	80015e4 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	8bfb      	ldrh	r3, [r7, #30]
 80015d2:	491e      	ldr	r1, [pc, #120]	; (800164c <calc_downsample+0x208>)
 80015d4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015d8:	fb00 f202 	mul.w	r2, r0, r2
 80015dc:	4413      	add	r3, r2
 80015de:	2200      	movs	r2, #0
 80015e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	491a      	ldr	r1, [pc, #104]	; (8001650 <calc_downsample+0x20c>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3302      	adds	r3, #2
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4815      	ldr	r0, [pc, #84]	; (8001650 <calc_downsample+0x20c>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4403      	add	r3, r0
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	1acb      	subs	r3, r1, r3
 8001608:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 800160a:	8afb      	ldrh	r3, [r7, #22]
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <calc_downsample+0x20c>)
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	18c1      	adds	r1, r0, r3
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <calc_downsample+0x210>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fdd9 	bl	80011ec <calc_zero_detector>
 800163a:	e000      	b.n	800163e <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800163c:	bf00      	nop
}
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	20005950 	.word	0x20005950
 8001648:	55555556 	.word	0x55555556
 800164c:	20007390 	.word	0x20007390
 8001650:	20000244 	.word	0x20000244
 8001654:	cccccccd 	.word	0xcccccccd

08001658 <calc_filter_measurements>:

void calc_filter_measurements(void) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0

	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	e039      	b.n	80016d8 <calc_filter_measurements+0x80>
		v_filter[i] = v_filter[i+1];
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	4a74      	ldr	r2, [pc, #464]	; (800183c <calc_filter_measurements+0x1e4>)
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4972      	ldr	r1, [pc, #456]	; (800183c <calc_filter_measurements+0x1e4>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	601a      	str	r2, [r3, #0]
		i1_filter[i] = i1_filter[i+1];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3301      	adds	r3, #1
 800167e:	4a70      	ldr	r2, [pc, #448]	; (8001840 <calc_filter_measurements+0x1e8>)
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	496e      	ldr	r1, [pc, #440]	; (8001840 <calc_filter_measurements+0x1e8>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	601a      	str	r2, [r3, #0]
		va1_filter[i] = va1_filter[i+1];
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	4a6b      	ldr	r2, [pc, #428]	; (8001844 <calc_filter_measurements+0x1ec>)
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4969      	ldr	r1, [pc, #420]	; (8001844 <calc_filter_measurements+0x1ec>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	601a      	str	r2, [r3, #0]
		w1_filter[i] = w1_filter[i+1];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a67      	ldr	r2, [pc, #412]	; (8001848 <calc_filter_measurements+0x1f0>)
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4965      	ldr	r1, [pc, #404]	; (8001848 <calc_filter_measurements+0x1f0>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	601a      	str	r2, [r3, #0]
		pf1_filter[i] = pf1_filter[i+1];
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a62      	ldr	r2, [pc, #392]	; (800184c <calc_filter_measurements+0x1f4>)
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4960      	ldr	r1, [pc, #384]	; (800184c <calc_filter_measurements+0x1f4>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3301      	adds	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	ddc2      	ble.n	8001664 <calc_filter_measurements+0xc>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = v_measured;
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <calc_filter_measurements+0x1f8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a56      	ldr	r2, [pc, #344]	; (800183c <calc_filter_measurements+0x1e4>)
 80016e4:	6253      	str	r3, [r2, #36]	; 0x24
	i1_filter[FILTER_NUM-1] = i1_measured;
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <calc_filter_measurements+0x1fc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a55      	ldr	r2, [pc, #340]	; (8001840 <calc_filter_measurements+0x1e8>)
 80016ec:	6253      	str	r3, [r2, #36]	; 0x24
	va1_filter[FILTER_NUM-1] = va1_measured;
 80016ee:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <calc_filter_measurements+0x200>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a54      	ldr	r2, [pc, #336]	; (8001844 <calc_filter_measurements+0x1ec>)
 80016f4:	6253      	str	r3, [r2, #36]	; 0x24
	w1_filter[FILTER_NUM-1] = w1_measured;
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <calc_filter_measurements+0x204>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a53      	ldr	r2, [pc, #332]	; (8001848 <calc_filter_measurements+0x1f0>)
 80016fc:	6253      	str	r3, [r2, #36]	; 0x24
	pf1_filter[FILTER_NUM-1] = pf1_measured;
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <calc_filter_measurements+0x208>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a52      	ldr	r2, [pc, #328]	; (800184c <calc_filter_measurements+0x1f4>)
 8001704:	6253      	str	r3, [r2, #36]	; 0x24

	// zero readings
	metervalue_v = 0.0;
 8001706:	4b57      	ldr	r3, [pc, #348]	; (8001864 <calc_filter_measurements+0x20c>)
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
	metervalue_i1 = 0.0;
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <calc_filter_measurements+0x210>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
	metervalue_va1 = 0.0;
 8001716:	4b55      	ldr	r3, [pc, #340]	; (800186c <calc_filter_measurements+0x214>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
	metervalue_w1 = 0.0;
 800171e:	4b54      	ldr	r3, [pc, #336]	; (8001870 <calc_filter_measurements+0x218>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
	metervalue_pf1 = 0.0;
 8001726:	4b53      	ldr	r3, [pc, #332]	; (8001874 <calc_filter_measurements+0x21c>)
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
	// add filter values
	for (int i=0; i<FILTER_NUM; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	e048      	b.n	80017c6 <calc_filter_measurements+0x16e>
		metervalue_v += v_filter[i];
 8001734:	4a41      	ldr	r2, [pc, #260]	; (800183c <calc_filter_measurements+0x1e4>)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4b48      	ldr	r3, [pc, #288]	; (8001864 <calc_filter_measurements+0x20c>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	4b46      	ldr	r3, [pc, #280]	; (8001864 <calc_filter_measurements+0x20c>)
 800174c:	edc3 7a00 	vstr	s15, [r3]
		metervalue_i1 += i1_filter[i];
 8001750:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <calc_filter_measurements+0x1e8>)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	ed93 7a00 	vldr	s14, [r3]
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <calc_filter_measurements+0x210>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	4b40      	ldr	r3, [pc, #256]	; (8001868 <calc_filter_measurements+0x210>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
		metervalue_va1 += va1_filter[i];
 800176c:	4a35      	ldr	r2, [pc, #212]	; (8001844 <calc_filter_measurements+0x1ec>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	4b3c      	ldr	r3, [pc, #240]	; (800186c <calc_filter_measurements+0x214>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <calc_filter_measurements+0x214>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
		metervalue_w1 += w1_filter[i];
 8001788:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <calc_filter_measurements+0x1f0>)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <calc_filter_measurements+0x218>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <calc_filter_measurements+0x218>)
 80017a0:	edc3 7a00 	vstr	s15, [r3]
		metervalue_pf1 += pf1_filter[i];
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <calc_filter_measurements+0x1f4>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <calc_filter_measurements+0x21c>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <calc_filter_measurements+0x21c>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<FILTER_NUM; i++) {
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	ddb3      	ble.n	8001734 <calc_filter_measurements+0xdc>
	}
	// calculate filtered valued
	metervalue_v /= FILTER_NUM;
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <calc_filter_measurements+0x20c>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <calc_filter_measurements+0x20c>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 /= FILTER_NUM;
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <calc_filter_measurements+0x210>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <calc_filter_measurements+0x210>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	metervalue_va1 /= FILTER_NUM;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <calc_filter_measurements+0x214>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <calc_filter_measurements+0x214>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	metervalue_w1 /= FILTER_NUM;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <calc_filter_measurements+0x218>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <calc_filter_measurements+0x218>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
	metervalue_pf1 /= FILTER_NUM;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <calc_filter_measurements+0x21c>)
 800181e:	ed93 7a00 	vldr	s14, [r3]
 8001822:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <calc_filter_measurements+0x21c>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	20000298 	.word	0x20000298
 8001840:	200002c0 	.word	0x200002c0
 8001844:	200002e8 	.word	0x200002e8
 8001848:	20000310 	.word	0x20000310
 800184c:	20000338 	.word	0x20000338
 8001850:	20000360 	.word	0x20000360
 8001854:	20000364 	.word	0x20000364
 8001858:	20000368 	.word	0x20000368
 800185c:	2000036c 	.word	0x2000036c
 8001860:	20000370 	.word	0x20000370
 8001864:	200080b0 	.word	0x200080b0
 8001868:	200080b4 	.word	0x200080b4
 800186c:	200080b8 	.word	0x200080b8
 8001870:	200080bc 	.word	0x200080bc
 8001874:	200080c0 	.word	0x200080c0

08001878 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	ed2d 8b02 	vpush	{d8}
 8001880:	b0a8      	sub	sp, #160	; 0xa0
 8001882:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t v_reading;			// always positive, we are using the positive half wave
	int16_t i_reading;			// could be negative if current is leading or lagging
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t i1_zero;
	float w=0, va=0;
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	673b      	str	r3, [r7, #112]	; 0x70
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	66fb      	str	r3, [r7, #108]	; 0x6c

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 80018c6:	4bb3      	ldr	r3, [pc, #716]	; (8001b94 <calc_measurements+0x31c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da05      	bge.n	80018da <calc_measurements+0x62>
		meter_readings_invalid = 1;
 80018ce:	4bb2      	ldr	r3, [pc, #712]	; (8001b98 <calc_measurements+0x320>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d8:	e2b0      	b.n	8001e3c <calc_measurements+0x5c4>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 80018da:	4bae      	ldr	r3, [pc, #696]	; (8001b94 <calc_measurements+0x31c>)
 80018dc:	885b      	ldrh	r3, [r3, #2]
 80018de:	461a      	mov	r2, r3
 80018e0:	4bac      	ldr	r3, [pc, #688]	; (8001b94 <calc_measurements+0x31c>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	1ad2      	subs	r2, r2, r3
 80018e6:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dc05      	bgt.n	80018fa <calc_measurements+0x82>
		meter_readings_invalid = 1;
 80018ee:	4baa      	ldr	r3, [pc, #680]	; (8001b98 <calc_measurements+0x320>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f8:	e2a0      	b.n	8001e3c <calc_measurements+0x5c4>
	}

	meter_readings_invalid = 0;		// readings are valid
 80018fa:	4aa7      	ldr	r2, [pc, #668]	; (8001b98 <calc_measurements+0x320>)
 80018fc:	2300      	movs	r3, #0
 80018fe:	7013      	strb	r3, [r2, #0]

	v_zero = (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) / 2;
 8001900:	4ba4      	ldr	r3, [pc, #656]	; (8001b94 <calc_measurements+0x31c>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	461a      	mov	r2, r3
 8001906:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <calc_measurements+0x31c>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	1ad2      	subs	r2, r2, r3
 800190c:	0fd3      	lsrs	r3, r2, #31
 800190e:	4413      	add	r3, r2
 8001910:	105b      	asrs	r3, r3, #1
 8001912:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	i1_zero = (sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min) / 2;
 8001916:	4b9f      	ldr	r3, [pc, #636]	; (8001b94 <calc_measurements+0x31c>)
 8001918:	8adb      	ldrh	r3, [r3, #22]
 800191a:	461a      	mov	r2, r3
 800191c:	4b9d      	ldr	r3, [pc, #628]	; (8001b94 <calc_measurements+0x31c>)
 800191e:	8a9b      	ldrh	r3, [r3, #20]
 8001920:	1ad2      	subs	r2, r2, r3
 8001922:	0fd3      	lsrs	r3, r2, #31
 8001924:	4413      	add	r3, r2
 8001926:	105b      	asrs	r3, r3, #1
 8001928:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	// Calculate values using the positive half of the sine wave

	// add up squared measurements
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 800192c:	4b99      	ldr	r3, [pc, #612]	; (8001b94 <calc_measurements+0x31c>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4b98      	ldr	r3, [pc, #608]	; (8001b94 <calc_measurements+0x31c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	f280 8091 	bge.w	8001a5c <calc_measurements+0x1e4>
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 800193a:	4b96      	ldr	r3, [pc, #600]	; (8001b94 <calc_measurements+0x31c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001942:	e083      	b.n	8001a4c <calc_measurements+0x1d4>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001944:	4a95      	ldr	r2, [pc, #596]	; (8001b9c <calc_measurements+0x324>)
 8001946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800194a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800194e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 800195a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800195e:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	17da      	asrs	r2, r3, #31
 8001968:	461c      	mov	r4, r3
 800196a:	4615      	mov	r5, r2
 800196c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001970:	eb12 0a04 	adds.w	sl, r2, r4
 8001974:	eb43 0b05 	adc.w	fp, r3, r5
 8001978:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 800197c:	4a87      	ldr	r2, [pc, #540]	; (8001b9c <calc_measurements+0x324>)
 800197e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001982:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001986:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800198a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	b29b      	uxth	r3, r3
 8001992:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001996:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800199a:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	17da      	asrs	r2, r3, #31
 80019a4:	4698      	mov	r8, r3
 80019a6:	4691      	mov	r9, r2
 80019a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80019ac:	eb12 0108 	adds.w	r1, r2, r8
 80019b0:	6239      	str	r1, [r7, #32]
 80019b2:	eb43 0309 	adc.w	r3, r3, r9
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019bc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 80019c0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80019c4:	3301      	adds	r3, #1
 80019c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 80019ca:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa88 	bl	8001ee4 <calc_adc_raw_to_V>
 80019d4:	eeb0 8a40 	vmov.f32	s16, s0
 80019d8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fa9f 	bl	8001f20 <calc_adc_raw_to_A>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019ea:	ee17 0a90 	vmov	r0, s15
 80019ee:	f7fe fdd5 	bl	800059c <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 80019fa:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0a      	blt.n	8001a18 <calc_measurements+0x1a0>
				i1_va_acc += va_instant;
 8001a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a0a:	f7fe fc69 	bl	80002e0 <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a16:	e014      	b.n	8001a42 <calc_measurements+0x1ca>
			} else {
				i1_w_acc += abs(va_instant);
 8001a18:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a1c:	f7ff f8c6 	bl	8000bac <__aeabi_d2iz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bfb8      	it	lt
 8001a26:	425b      	neglt	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fda5 	bl	8000578 <__aeabi_i2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a36:	f7fe fc53 	bl	80002e0 <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a46:	3301      	adds	r3, #1
 8001a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a4c:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <calc_measurements+0x31c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f6ff af75 	blt.w	8001944 <calc_measurements+0xcc>
 8001a5a:	e134      	b.n	8001cc6 <calc_measurements+0x44e>
			}
		}
	} else {
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <calc_measurements+0x31c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a64:	e08b      	b.n	8001b7e <calc_measurements+0x306>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001a66:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <calc_measurements+0x324>)
 8001a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a70:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001a7c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001a80:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	17da      	asrs	r2, r3, #31
 8001a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8001a8c:	657a      	str	r2, [r7, #84]	; 0x54
 8001a8e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a92:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a96:	4621      	mov	r1, r4
 8001a98:	1851      	adds	r1, r2, r1
 8001a9a:	61b9      	str	r1, [r7, #24]
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	414b      	adcs	r3, r1
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001aa6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001aaa:	4a3c      	ldr	r2, [pc, #240]	; (8001b9c <calc_measurements+0x324>)
 8001aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001ab4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ab8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001ac4:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001ac8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	17da      	asrs	r2, r3, #31
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ad6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ada:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001ade:	4621      	mov	r1, r4
 8001ae0:	1851      	adds	r1, r2, r1
 8001ae2:	6139      	str	r1, [r7, #16]
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	414b      	adcs	r3, r1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001aee:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001af2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001afc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f9ef 	bl	8001ee4 <calc_adc_raw_to_V>
 8001b06:	eeb0 8a40 	vmov.f32	s16, s0
 8001b0a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fa06 	bl	8001f20 <calc_adc_raw_to_A>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
 8001b18:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fd3c 	bl	800059c <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001b2c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <calc_measurements+0x2d2>
				i1_va_acc += va_instant;
 8001b34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b38:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b3c:	f7fe fbd0 	bl	80002e0 <__adddf3>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001b48:	e014      	b.n	8001b74 <calc_measurements+0x2fc>
			} else {
				i1_w_acc += abs(va_instant);
 8001b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b4e:	f7ff f82d 	bl	8000bac <__aeabi_d2iz>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bfb8      	it	lt
 8001b58:	425b      	neglt	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fd0c 	bl	8000578 <__aeabi_i2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b68:	f7fe fbba 	bl	80002e0 <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b82:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001b86:	f4ff af6e 	bcc.w	8001a66 <calc_measurements+0x1ee>
			}
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b8a:	2314      	movs	r3, #20
 8001b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b90:	e092      	b.n	8001cb8 <calc_measurements+0x440>
 8001b92:	bf00      	nop
 8001b94:	20000244 	.word	0x20000244
 8001b98:	20000294 	.word	0x20000294
 8001b9c:	20007390 	.word	0x20007390
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001ba0:	4aaa      	ldr	r2, [pc, #680]	; (8001e4c <calc_measurements+0x5d4>)
 8001ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001baa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001bb6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001bba:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	17da      	asrs	r2, r3, #31
 8001bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8001bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8001bc8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001bcc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	1851      	adds	r1, r2, r1
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	414b      	adcs	r3, r1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001be0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001be4:	4a99      	ldr	r2, [pc, #612]	; (8001e4c <calc_measurements+0x5d4>)
 8001be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bea:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001bee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bf2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001bfe:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c02:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	17da      	asrs	r2, r3, #31
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c14:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c18:	4621      	mov	r1, r4
 8001c1a:	1851      	adds	r1, r2, r1
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	414b      	adcs	r3, r1
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c28:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001c2c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c30:	3301      	adds	r3, #1
 8001c32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001c36:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f952 	bl	8001ee4 <calc_adc_raw_to_V>
 8001c40:	eeb0 8a40 	vmov.f32	s16, s0
 8001c44:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f969 	bl	8001f20 <calc_adc_raw_to_A>
 8001c4e:	eef0 7a40 	vmov.f32	s15, s0
 8001c52:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c56:	ee17 0a90 	vmov	r0, s15
 8001c5a:	f7fe fc9f 	bl	800059c <__aeabi_f2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001c66:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0a      	blt.n	8001c84 <calc_measurements+0x40c>
				i1_va_acc += va_instant;
 8001c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c76:	f7fe fb33 	bl	80002e0 <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001c82:	e014      	b.n	8001cae <calc_measurements+0x436>
			} else {
				i1_w_acc += abs(va_instant);
 8001c84:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c88:	f7fe ff90 	bl	8000bac <__aeabi_d2iz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bfb8      	it	lt
 8001c92:	425b      	neglt	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc6f 	bl	8000578 <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ca2:	f7fe fb1d 	bl	80002e0 <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cb8:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <calc_measurements+0x5d8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f6ff af6d 	blt.w	8001ba0 <calc_measurements+0x328>
			}
		}
	}

	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001cc6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001cca:	2200      	movs	r2, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cce:	637a      	str	r2, [r7, #52]	; 0x34
 8001cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cd8:	f7fe ffe0 	bl	8000c9c <__aeabi_ldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe fc84 	bl	80005f0 <__aeabi_l2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b10 	vmov	d0, r2, r3
 8001cf0:	f00e fe42 	bl	8010978 <sqrt>
 8001cf4:	ec53 2b10 	vmov	r2, r3, d0
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe ff56 	bl	8000bac <__aeabi_d2iz>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f8ed 	bl	8001ee4 <calc_adc_raw_to_V>
 8001d0a:	eef0 7a40 	vmov.f32	s15, s0
 8001d0e:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <calc_measurements+0x5dc>)
 8001d10:	edc3 7a00 	vstr	s15, [r3]
	i1_measured = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001d14:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d18:	2200      	movs	r2, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d22:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d26:	f7fe ffb9 	bl	8000c9c <__aeabi_ldivmod>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fc5d 	bl	80005f0 <__aeabi_l2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	ec43 2b10 	vmov	d0, r2, r3
 8001d3e:	f00e fe1b 	bl	8010978 <sqrt>
 8001d42:	ec53 2b10 	vmov	r2, r3, d0
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff2f 	bl	8000bac <__aeabi_d2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f8e4 	bl	8001f20 <calc_adc_raw_to_A>
 8001d58:	eef0 7a40 	vmov.f32	s15, s0
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <calc_measurements+0x5e0>)
 8001d5e:	edc3 7a00 	vstr	s15, [r3]
	if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d6e:	f7fe fefd 	bl	8000b6c <__aeabi_dcmpgt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <calc_measurements+0x526>
 8001d78:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbfb 	bl	8000578 <__aeabi_i2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d8a:	f7fe fd89 	bl	80008a0 <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff31 	bl	8000bfc <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001daa:	f7fe fedf 	bl	8000b6c <__aeabi_dcmpgt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d012      	beq.n	8001dda <calc_measurements+0x562>
 8001db4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbdd 	bl	8000578 <__aeabi_i2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001dc6:	f7fe fd6b 	bl	80008a0 <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe ff13 	bl	8000bfc <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	673b      	str	r3, [r7, #112]	; 0x70
	va1_measured = v_measured * i1_measured;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <calc_measurements+0x5dc>)
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <calc_measurements+0x5e0>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <calc_measurements+0x5e4>)
 8001dec:	edc3 7a00 	vstr	s15, [r3]
	if (w > 0) {
 8001df0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	dd09      	ble.n	8001e12 <calc_measurements+0x59a>
		w1_measured = va - w;
 8001dfe:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001e02:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <calc_measurements+0x5e8>)
 8001e0c:	edc3 7a00 	vstr	s15, [r3]
 8001e10:	e003      	b.n	8001e1a <calc_measurements+0x5a2>
	} else {
		w1_measured = va1_measured;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <calc_measurements+0x5e4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <calc_measurements+0x5e8>)
 8001e18:	6013      	str	r3, [r2, #0]
	}
	pf1_measured = w1_measured / va1_measured;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <calc_measurements+0x5e8>)
 8001e1c:	edd3 6a00 	vldr	s13, [r3]
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <calc_measurements+0x5e4>)
 8001e22:	ed93 7a00 	vldr	s14, [r3]
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <calc_measurements+0x5ec>)
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <calc_measurements+0x5d8>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	731a      	strb	r2, [r3, #12]

	// add measurements to filter
	calc_filter_measurements();
 8001e36:	f7ff fc0f 	bl	8001658 <calc_filter_measurements>

	return 0;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	37a0      	adds	r7, #160	; 0xa0
 8001e40:	46bd      	mov	sp, r7
 8001e42:	ecbd 8b02 	vpop	{d8}
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20007390 	.word	0x20007390
 8001e50:	20000244 	.word	0x20000244
 8001e54:	20000360 	.word	0x20000360
 8001e58:	20000364 	.word	0x20000364
 8001e5c:	20000368 	.word	0x20000368
 8001e60:	2000036c 	.word	0x2000036c
 8001e64:	20000370 	.word	0x20000370

08001e68 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8001e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f816 	bl	8001ea8 <calc_adc_raw_to_mv_float>
 8001e7c:	ee10 3a10 	vmov	r3, s0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb8b 	bl	800059c <__aeabi_f2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ec43 2b10 	vmov	d0, r2, r3
 8001e8e:	f00e fe83 	bl	8010b98 <round>
 8001e92:	ec53 2b10 	vmov	r2, r3, d0
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe87 	bl	8000bac <__aeabi_d2iz>
 8001e9e:	4603      	mov	r3, r0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8001eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ebe:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001edc <calc_adc_raw_to_mv_float+0x34>
 8001ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ee0 <calc_adc_raw_to_mv_float+0x38>
 8001eca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	457ff000 	.word	0x457ff000
 8001ee0:	454e4000 	.word	0x454e4000

08001ee4 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f18 <calc_adc_raw_to_V+0x34>
 8001efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f02:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f1c <calc_adc_raw_to_V+0x38>
 8001f06:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	457ff000 	.word	0x457ff000
 8001f1c:	44480000 	.word	0x44480000

08001f20 <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f36:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f54 <calc_adc_raw_to_A+0x34>
 8001f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f58 <calc_adc_raw_to_A+0x38>
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f46:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	457ff000 	.word	0x457ff000
 8001f58:	43480000 	.word	0x43480000

08001f5c <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <cmd_error+0x18>)
 8001f68:	f002 fe02 	bl	8004b70 <term_print>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	08010cc8 	.word	0x08010cc8

08001f78 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b74      	cmp	r3, #116	; 0x74
 8001f88:	d014      	beq.n	8001fb4 <cmd_t+0x3c>
 8001f8a:	2b74      	cmp	r3, #116	; 0x74
 8001f8c:	dc17      	bgt.n	8001fbe <cmd_t+0x46>
 8001f8e:	2b54      	cmp	r3, #84	; 0x54
 8001f90:	d010      	beq.n	8001fb4 <cmd_t+0x3c>
 8001f92:	2b54      	cmp	r3, #84	; 0x54
 8001f94:	dc13      	bgt.n	8001fbe <cmd_t+0x46>
 8001f96:	2b30      	cmp	r3, #48	; 0x30
 8001f98:	d002      	beq.n	8001fa0 <cmd_t+0x28>
 8001f9a:	2b31      	cmp	r3, #49	; 0x31
 8001f9c:	d005      	beq.n	8001faa <cmd_t+0x32>
 8001f9e:	e00e      	b.n	8001fbe <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <cmd_t+0x58>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e00b      	b.n	8001fc2 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <cmd_t+0x58>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e006      	b.n	8001fc2 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <cmd_t+0x58>)
 8001fb6:	2209      	movs	r2, #9
 8001fb8:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e001      	b.n	8001fc2 <cmd_t+0x4a>
	}
	return -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200024b8 	.word	0x200024b8

08001fd4 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f107 0208 	add.w	r2, r7, #8
 8001fe4:	4909      	ldr	r1, [pc, #36]	; (800200c <cmd_p+0x38>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00b fab0 	bl	800d54c <siscanf>
 8001fec:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d002      	beq.n	8001ffa <cmd_p+0x26>
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff8:	e004      	b.n	8002004 <cmd_p+0x30>
	new_time_period = value;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <cmd_p+0x3c>)
 8002000:	801a      	strh	r2, [r3, #0]
	return 0;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08010ce0 	.word	0x08010ce0
 8002010:	200024ba 	.word	0x200024ba

08002014 <cmd_led>:

int cmd_led(int cmd) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	dd05      	ble.n	800202e <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	2120      	movs	r1, #32
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <cmd_led+0x30>)
 8002028:	f006 fe02 	bl	8008c30 <HAL_GPIO_WritePin>
 800202c:	e004      	b.n	8002038 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	2120      	movs	r1, #32
 8002032:	4804      	ldr	r0, [pc, #16]	; (8002044 <cmd_led+0x30>)
 8002034:	f006 fdfc 	bl	8008c30 <HAL_GPIO_WritePin>
	}
	return(0);
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40020000 	.word	0x40020000

08002048 <cmd_help>:


int cmd_help(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 800204c:	4813      	ldr	r0, [pc, #76]	; (800209c <cmd_help+0x54>)
 800204e:	f002 fd8f 	bl	8004b70 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002052:	4813      	ldr	r0, [pc, #76]	; (80020a0 <cmd_help+0x58>)
 8002054:	f002 fd8c 	bl	8004b70 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002058:	4812      	ldr	r0, [pc, #72]	; (80020a4 <cmd_help+0x5c>)
 800205a:	f002 fd89 	bl	8004b70 <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 800205e:	4812      	ldr	r0, [pc, #72]	; (80020a8 <cmd_help+0x60>)
 8002060:	f002 fd86 	bl	8004b70 <term_print>
#endif
	term_print("E: Toggle ESP mode\r\n");
 8002064:	4811      	ldr	r0, [pc, #68]	; (80020ac <cmd_help+0x64>)
 8002066:	f002 fd83 	bl	8004b70 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 800206a:	4811      	ldr	r0, [pc, #68]	; (80020b0 <cmd_help+0x68>)
 800206c:	f002 fd80 	bl	8004b70 <term_print>
	term_print("M show measurements using all channels");
 8002070:	4810      	ldr	r0, [pc, #64]	; (80020b4 <cmd_help+0x6c>)
 8002072:	f002 fd7d 	bl	8004b70 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002076:	4810      	ldr	r0, [pc, #64]	; (80020b8 <cmd_help+0x70>)
 8002078:	f002 fd7a 	bl	8004b70 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <cmd_help+0x74>)
 800207e:	f002 fd77 	bl	8004b70 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002082:	480f      	ldr	r0, [pc, #60]	; (80020c0 <cmd_help+0x78>)
 8002084:	f002 fd74 	bl	8004b70 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <cmd_help+0x7c>)
 800208a:	f002 fd71 	bl	8004b70 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 800208e:	480e      	ldr	r0, [pc, #56]	; (80020c8 <cmd_help+0x80>)
 8002090:	f002 fd6e 	bl	8004b70 <term_print>
	return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	08010ce4 	.word	0x08010ce4
 80020a0:	08010cf8 	.word	0x08010cf8
 80020a4:	08010d30 	.word	0x08010d30
 80020a8:	08010d64 	.word	0x08010d64
 80020ac:	08010d90 	.word	0x08010d90
 80020b0:	08010da8 	.word	0x08010da8
 80020b4:	08010dc4 	.word	0x08010dc4
 80020b8:	08010dec 	.word	0x08010dec
 80020bc:	08010e34 	.word	0x08010e34
 80020c0:	08010e68 	.word	0x08010e68
 80020c4:	08010e84 	.word	0x08010e84
 80020c8:	08010ec4 	.word	0x08010ec4

080020cc <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d8:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3b3f      	subs	r3, #63	; 0x3f
 80020e0:	2b35      	cmp	r3, #53	; 0x35
 80020e2:	f200 80d8 	bhi.w	8002296 <cmd_process+0x1ca>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <cmd_process+0x20>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002291 	.word	0x08002291
 80020f0:	08002297 	.word	0x08002297
 80020f4:	08002297 	.word	0x08002297
 80020f8:	08002297 	.word	0x08002297
 80020fc:	080021c5 	.word	0x080021c5
 8002100:	080021db 	.word	0x080021db
 8002104:	08002203 	.word	0x08002203
 8002108:	08002297 	.word	0x08002297
 800210c:	08002297 	.word	0x08002297
 8002110:	08002291 	.word	0x08002291
 8002114:	08002297 	.word	0x08002297
 8002118:	08002297 	.word	0x08002297
 800211c:	08002297 	.word	0x08002297
 8002120:	08002221 	.word	0x08002221
 8002124:	08002233 	.word	0x08002233
 8002128:	08002297 	.word	0x08002297
 800212c:	08002297 	.word	0x08002297
 8002130:	0800225b 	.word	0x0800225b
 8002134:	08002297 	.word	0x08002297
 8002138:	08002265 	.word	0x08002265
 800213c:	08002271 	.word	0x08002271
 8002140:	08002287 	.word	0x08002287
 8002144:	08002297 	.word	0x08002297
 8002148:	08002297 	.word	0x08002297
 800214c:	08002297 	.word	0x08002297
 8002150:	08002297 	.word	0x08002297
 8002154:	08002297 	.word	0x08002297
 8002158:	08002297 	.word	0x08002297
 800215c:	08002297 	.word	0x08002297
 8002160:	08002297 	.word	0x08002297
 8002164:	08002297 	.word	0x08002297
 8002168:	08002297 	.word	0x08002297
 800216c:	08002297 	.word	0x08002297
 8002170:	08002297 	.word	0x08002297
 8002174:	08002297 	.word	0x08002297
 8002178:	08002297 	.word	0x08002297
 800217c:	080021c5 	.word	0x080021c5
 8002180:	080021db 	.word	0x080021db
 8002184:	08002203 	.word	0x08002203
 8002188:	08002297 	.word	0x08002297
 800218c:	08002297 	.word	0x08002297
 8002190:	08002291 	.word	0x08002291
 8002194:	08002297 	.word	0x08002297
 8002198:	08002297 	.word	0x08002297
 800219c:	08002297 	.word	0x08002297
 80021a0:	08002221 	.word	0x08002221
 80021a4:	08002233 	.word	0x08002233
 80021a8:	08002297 	.word	0x08002297
 80021ac:	08002297 	.word	0x08002297
 80021b0:	0800225b 	.word	0x0800225b
 80021b4:	08002297 	.word	0x08002297
 80021b8:	08002265 	.word	0x08002265
 80021bc:	08002271 	.word	0x08002271
 80021c0:	08002287 	.word	0x08002287
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3301      	adds	r3, #1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3b31      	subs	r3, #49	; 0x31
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 fee0 	bl	8004f94 <term_csv_buffer>
		retval = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
		break;
 80021d8:	e05d      	b.n	8002296 <cmd_process+0x1ca>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe f868 	bl	80002b0 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d908      	bls.n	80021f8 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3301      	adds	r3, #1
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	3b31      	subs	r3, #49	; 0x31
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 f871 	bl	80032d8 <display_show_curve>
 80021f6:	e001      	b.n	80021fc <cmd_process+0x130>
		} else {
			display_show_curves();
 80021f8:	f001 f83a 	bl	8003270 <display_show_curves>
		}
		retval = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
		break;
 8002200:	e049      	b.n	8002296 <cmd_process+0x1ca>
#endif
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <cmd_process+0x1d4>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <cmd_process+0x146>
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <cmd_process+0x1d4>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 8002210:	e041      	b.n	8002296 <cmd_process+0x1ca>
			esp_mode = 1;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <cmd_process+0x1d4>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 8002218:	4822      	ldr	r0, [pc, #136]	; (80022a4 <cmd_process+0x1d8>)
 800221a:	f002 fca9 	bl	8004b70 <term_print>
		break;
 800221e:	e03a      	b.n	8002296 <cmd_process+0x1ca>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	3b2f      	subs	r3, #47	; 0x2f
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fef3 	bl	8002014 <cmd_led>
 800222e:	60f8      	str	r0, [r7, #12]
		break;
 8002230:	e031      	b.n	8002296 <cmd_process+0x1ca>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe f83c 	bl	80002b0 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d908      	bls.n	8002250 <cmd_process+0x184>
		    term_show_channel(cmd_str[1] - 0x31);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3301      	adds	r3, #1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3b31      	subs	r3, #49	; 0x31
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fdb9 	bl	8004dc0 <term_show_channel>
 800224e:	e001      	b.n	8002254 <cmd_process+0x188>
		} else {
			term_show_measurements();
 8002250:	f002 fd42 	bl	8004cd8 <term_show_measurements>
		}
		retval = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
		break;
 8002258:	e01d      	b.n	8002296 <cmd_process+0x1ca>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff feba 	bl	8001fd4 <cmd_p>
 8002260:	60f8      	str	r0, [r7, #12]
		break;
 8002262:	e018      	b.n	8002296 <cmd_process+0x1ca>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <cmd_process+0x1dc>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
		break;
 800226e:	e012      	b.n	8002296 <cmd_process+0x1ca>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3b31      	subs	r3, #49	; 0x31
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fcd4 	bl	8004c28 <term_show_buffer>
		retval = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
		break;
 8002284:	e007      	b.n	8002296 <cmd_process+0x1ca>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fe76 	bl	8001f78 <cmd_t>
 800228c:	60f8      	str	r0, [r7, #12]
		break;
 800228e:	e002      	b.n	8002296 <cmd_process+0x1ca>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8002290:	f7ff feda 	bl	8002048 <cmd_help>
 8002294:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200024b9 	.word	0x200024b9
 80022a4:	08010ef8 	.word	0x08010ef8
 80022a8:	200024b7 	.word	0x200024b7

080022ac <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fd fffb 	bl	80002b0 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <CMD_Handler+0x3c>)
 80022c0:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <CMD_Handler+0x3c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fe46 	bl	8001f5c <cmd_error>
		return -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d4:	e003      	b.n	80022de <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fef8 	bl	80020cc <cmd_process>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000374 	.word	0x20000374

080022ec <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 80022f0:	2302      	movs	r3, #2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fa0e 	bl	8005714 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 80022f8:	2302      	movs	r3, #2
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <display_init+0x18>
 80022fe:	2302      	movs	r3, #2
 8002300:	2b03      	cmp	r3, #3
 8002302:	d107      	bne.n	8002314 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <display_init+0x3c>)
 8002306:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800230a:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <display_init+0x40>)
 800230e:	22f0      	movs	r2, #240	; 0xf0
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	e007      	b.n	8002324 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <display_init+0x40>)
 8002316:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800231a:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <display_init+0x3c>)
 800231e:	22f0      	movs	r2, #240	; 0xf0
 8002320:	801a      	strh	r2, [r3, #0]
	}
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20001fea 	.word	0x20001fea
 800232c:	20001fec 	.word	0x20001fec

08002330 <display_splash_screen>:

void display_splash_screen() {
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002336:	2000      	movs	r0, #0
 8002338:	f003 fc42 	bl	8005bc0 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 800233c:	2302      	movs	r3, #2
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <display_splash_screen+0xe4>)
 8002346:	4a34      	ldr	r2, [pc, #208]	; (8002418 <display_splash_screen+0xe8>)
 8002348:	2120      	movs	r1, #32
 800234a:	4834      	ldr	r0, [pc, #208]	; (800241c <display_splash_screen+0xec>)
 800234c:	f00b f8aa 	bl	800d4a4 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <display_splash_screen+0xf0>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	461c      	mov	r4, r3
 8002356:	4831      	ldr	r0, [pc, #196]	; (800241c <display_splash_screen+0xec>)
 8002358:	f7fd ffaa 	bl	80002b0 <strlen>
 800235c:	4603      	mov	r3, r0
 800235e:	4a31      	ldr	r2, [pc, #196]	; (8002424 <display_splash_screen+0xf4>)
 8002360:	8892      	ldrh	r2, [r2, #4]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	1ae3      	subs	r3, r4, r3
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	b29c      	uxth	r4, r3
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <display_splash_screen+0xf8>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <display_splash_screen+0xf4>)
 8002374:	88db      	ldrh	r3, [r3, #6]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	0fda      	lsrs	r2, r3, #31
 800237a:	4413      	add	r3, r2
 800237c:	105b      	asrs	r3, r3, #1
 800237e:	b29d      	uxth	r5, r3
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <display_splash_screen+0xf4>)
 8002382:	2200      	movs	r2, #0
 8002384:	9204      	str	r2, [sp, #16]
 8002386:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800238a:	9203      	str	r2, [sp, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	9202      	str	r2, [sp, #8]
 8002390:	466e      	mov	r6, sp
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002398:	e886 0003 	stmia.w	r6, {r0, r1}
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <display_splash_screen+0xec>)
 80023a0:	4629      	mov	r1, r5
 80023a2:	4620      	mov	r0, r4
 80023a4:	f004 fb7e 	bl	8006aa4 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <display_splash_screen+0xf0>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	461c      	mov	r4, r3
 80023ae:	481f      	ldr	r0, [pc, #124]	; (800242c <display_splash_screen+0xfc>)
 80023b0:	f7fd ff7e 	bl	80002b0 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <display_splash_screen+0x100>)
 80023b8:	8892      	ldrh	r2, [r2, #4]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	1ae3      	subs	r3, r4, r3
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	b29c      	uxth	r4, r3
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <display_splash_screen+0xf8>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <display_splash_screen+0xf4>)
 80023cc:	88db      	ldrh	r3, [r3, #6]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	0fda      	lsrs	r2, r3, #31
 80023d2:	4413      	add	r3, r2
 80023d4:	105b      	asrs	r3, r3, #1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3319      	adds	r3, #25
 80023da:	b29d      	uxth	r5, r3
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <display_splash_screen+0x100>)
 80023de:	2200      	movs	r2, #0
 80023e0:	9204      	str	r2, [sp, #16]
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	9203      	str	r2, [sp, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	9202      	str	r2, [sp, #8]
 80023ec:	466e      	mov	r6, sp
 80023ee:	1d1a      	adds	r2, r3, #4
 80023f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <display_splash_screen+0xfc>)
 80023fc:	4629      	mov	r1, r5
 80023fe:	4620      	mov	r0, r4
 8002400:	f004 fb50 	bl	8006aa4 <Displ_WString>

	Displ_BackLight('1');
 8002404:	2031      	movs	r0, #49	; 0x31
 8002406:	f004 fb8d 	bl	8006b24 <Displ_BackLight>
}
 800240a:	bf00      	nop
 800240c:	3704      	adds	r7, #4
 800240e:	46bd      	mov	sp, r7
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002412:	bf00      	nop
 8002414:	080154f4 	.word	0x080154f4
 8002418:	08010f20 	.word	0x08010f20
 800241c:	20001fc8 	.word	0x20001fc8
 8002420:	20001fea 	.word	0x20001fea
 8002424:	20000018 	.word	0x20000018
 8002428:	20001fec 	.word	0x20001fec
 800242c:	080154f8 	.word	0x080154f8
 8002430:	2000000c 	.word	0x2000000c
 8002434:	00000000 	.word	0x00000000

08002438 <display_screen1>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// main screen
void display_screen1() {
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af06      	add	r7, sp, #24
	if (!meter_readings_invalid) {
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <display_screen1+0x220>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 8122 	bne.w	800268c <display_screen1+0x254>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <display_screen1+0x224>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f8a5 	bl	800059c <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	e9cd 2300 	strd	r2, r3, [sp]
 800245a:	4a81      	ldr	r2, [pc, #516]	; (8002660 <display_screen1+0x228>)
 800245c:	2120      	movs	r1, #32
 800245e:	4881      	ldr	r0, [pc, #516]	; (8002664 <display_screen1+0x22c>)
 8002460:	f00b f820 	bl	800d4a4 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 8002464:	4b80      	ldr	r3, [pc, #512]	; (8002668 <display_screen1+0x230>)
 8002466:	2200      	movs	r2, #0
 8002468:	9204      	str	r2, [sp, #16]
 800246a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800246e:	9203      	str	r2, [sp, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	9202      	str	r2, [sp, #8]
 8002474:	466c      	mov	r4, sp
 8002476:	1d1a      	adds	r2, r3, #4
 8002478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800247c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a78      	ldr	r2, [pc, #480]	; (8002664 <display_screen1+0x22c>)
 8002484:	2107      	movs	r1, #7
 8002486:	2009      	movs	r0, #9
 8002488:	f004 fb0c 	bl	8006aa4 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i1);
 800248c:	4b77      	ldr	r3, [pc, #476]	; (800266c <display_screen1+0x234>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f883 	bl	800059c <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	e9cd 2300 	strd	r2, r3, [sp]
 800249e:	4a74      	ldr	r2, [pc, #464]	; (8002670 <display_screen1+0x238>)
 80024a0:	2120      	movs	r1, #32
 80024a2:	4870      	ldr	r0, [pc, #448]	; (8002664 <display_screen1+0x22c>)
 80024a4:	f00a fffe 	bl	800d4a4 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <display_screen1+0x230>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	9204      	str	r2, [sp, #16]
 80024ae:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80024b2:	9203      	str	r2, [sp, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	9202      	str	r2, [sp, #8]
 80024b8:	466c      	mov	r4, sp
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a67      	ldr	r2, [pc, #412]	; (8002664 <display_screen1+0x22c>)
 80024c8:	2107      	movs	r1, #7
 80024ca:	2078      	movs	r0, #120	; 0x78
 80024cc:	f004 faea 	bl	8006aa4 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va1 );
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <display_screen1+0x23c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f861 	bl	800059c <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	e9cd 2300 	strd	r2, r3, [sp]
 80024e2:	4a65      	ldr	r2, [pc, #404]	; (8002678 <display_screen1+0x240>)
 80024e4:	2120      	movs	r1, #32
 80024e6:	485f      	ldr	r0, [pc, #380]	; (8002664 <display_screen1+0x22c>)
 80024e8:	f00a ffdc 	bl	800d4a4 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 80024ec:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <display_screen1+0x230>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	9204      	str	r2, [sp, #16]
 80024f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024f6:	9203      	str	r2, [sp, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	9202      	str	r2, [sp, #8]
 80024fc:	466c      	mov	r4, sp
 80024fe:	1d1a      	adds	r2, r3, #4
 8002500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002504:	e884 0003 	stmia.w	r4, {r0, r1}
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a56      	ldr	r2, [pc, #344]	; (8002664 <display_screen1+0x22c>)
 800250c:	2130      	movs	r1, #48	; 0x30
 800250e:	2009      	movs	r0, #9
 8002510:	f004 fac8 	bl	8006aa4 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w1 );
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <display_screen1+0x244>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f83f 	bl	800059c <__aeabi_f2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	e9cd 2300 	strd	r2, r3, [sp]
 8002526:	4a54      	ldr	r2, [pc, #336]	; (8002678 <display_screen1+0x240>)
 8002528:	2120      	movs	r1, #32
 800252a:	484e      	ldr	r0, [pc, #312]	; (8002664 <display_screen1+0x22c>)
 800252c:	f00a ffba 	bl	800d4a4 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 8002530:	4b4d      	ldr	r3, [pc, #308]	; (8002668 <display_screen1+0x230>)
 8002532:	2200      	movs	r2, #0
 8002534:	9204      	str	r2, [sp, #16]
 8002536:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800253a:	9203      	str	r2, [sp, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	9202      	str	r2, [sp, #8]
 8002540:	466c      	mov	r4, sp
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002548:	e884 0003 	stmia.w	r4, {r0, r1}
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a45      	ldr	r2, [pc, #276]	; (8002664 <display_screen1+0x22c>)
 8002550:	2159      	movs	r1, #89	; 0x59
 8002552:	2009      	movs	r0, #9
 8002554:	f004 faa6 	bl	8006aa4 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf1) );
 8002558:	4b49      	ldr	r3, [pc, #292]	; (8002680 <display_screen1+0x248>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eef0 7ae7 	vabs.f32	s15, s15
 8002562:	ee17 0a90 	vmov	r0, s15
 8002566:	f7fe f819 	bl	800059c <__aeabi_f2d>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	e9cd 2300 	strd	r2, r3, [sp]
 8002572:	4a44      	ldr	r2, [pc, #272]	; (8002684 <display_screen1+0x24c>)
 8002574:	2120      	movs	r1, #32
 8002576:	483b      	ldr	r0, [pc, #236]	; (8002664 <display_screen1+0x22c>)
 8002578:	f00a ff94 	bl	800d4a4 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <display_screen1+0x230>)
 800257e:	2200      	movs	r2, #0
 8002580:	9204      	str	r2, [sp, #16]
 8002582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002586:	9203      	str	r2, [sp, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	9202      	str	r2, [sp, #8]
 800258c:	466c      	mov	r4, sp
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002594:	e884 0003 	stmia.w	r4, {r0, r1}
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <display_screen1+0x22c>)
 800259c:	2182      	movs	r1, #130	; 0x82
 800259e:	2009      	movs	r0, #9
 80025a0:	f004 fa80 	bl	8006aa4 <Displ_WString>
		// Angle
		if (metervalue_pf1 < 0) {
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <display_screen1+0x248>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	d51b      	bpl.n	80025ec <display_screen1+0x1b4>
			snprintf(str,sizeof(str),"%4.0f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <display_screen1+0x248>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffef 	bl	800059c <__aeabi_f2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	ec43 2b10 	vmov	d0, r2, r3
 80025c6:	f00d ff41 	bl	801044c <acos>
 80025ca:	ec51 0b10 	vmov	r0, r1, d0
 80025ce:	a320      	add	r3, pc, #128	; (adr r3, 8002650 <display_screen1+0x218>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fe f83a 	bl	800064c <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	e9cd 2300 	strd	r2, r3, [sp]
 80025e0:	4a29      	ldr	r2, [pc, #164]	; (8002688 <display_screen1+0x250>)
 80025e2:	2120      	movs	r1, #32
 80025e4:	481f      	ldr	r0, [pc, #124]	; (8002664 <display_screen1+0x22c>)
 80025e6:	f00a ff5d 	bl	800d4a4 <sniprintf>
 80025ea:	e01a      	b.n	8002622 <display_screen1+0x1ea>
		} else {
			snprintf(str,sizeof(str),"%4.1f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <display_screen1+0x248>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ffd3 	bl	800059c <__aeabi_f2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	ec43 2b10 	vmov	d0, r2, r3
 80025fe:	f00d ff25 	bl	801044c <acos>
 8002602:	ec51 0b10 	vmov	r0, r1, d0
 8002606:	a312      	add	r3, pc, #72	; (adr r3, 8002650 <display_screen1+0x218>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fe f81e 	bl	800064c <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	e9cd 2300 	strd	r2, r3, [sp]
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <display_screen1+0x238>)
 800261a:	2120      	movs	r1, #32
 800261c:	4811      	ldr	r0, [pc, #68]	; (8002664 <display_screen1+0x22c>)
 800261e:	f00a ff41 	bl	800d4a4 <sniprintf>
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <display_screen1+0x230>)
 8002624:	2200      	movs	r2, #0
 8002626:	9204      	str	r2, [sp, #16]
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	9203      	str	r2, [sp, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	9202      	str	r2, [sp, #8]
 8002632:	466c      	mov	r4, sp
 8002634:	1d1a      	adds	r2, r3, #4
 8002636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800263a:	e884 0003 	stmia.w	r4, {r0, r1}
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a08      	ldr	r2, [pc, #32]	; (8002664 <display_screen1+0x22c>)
 8002642:	2182      	movs	r1, #130	; 0x82
 8002644:	208a      	movs	r0, #138	; 0x8a
 8002646:	f004 fa2d 	bl	8006aa4 <Displ_WString>
 800264a:	e097      	b.n	800277c <display_screen1+0x344>
 800264c:	f3af 8000 	nop.w
 8002650:	1af05a77 	.word	0x1af05a77
 8002654:	404ca5dc 	.word	0x404ca5dc
 8002658:	20000294 	.word	0x20000294
 800265c:	200080b0 	.word	0x200080b0
 8002660:	08010f3c 	.word	0x08010f3c
 8002664:	20001fc8 	.word	0x20001fc8
 8002668:	20000024 	.word	0x20000024
 800266c:	200080b4 	.word	0x200080b4
 8002670:	08010f44 	.word	0x08010f44
 8002674:	200080b8 	.word	0x200080b8
 8002678:	08010f4c 	.word	0x08010f4c
 800267c:	200080bc 	.word	0x200080bc
 8002680:	200080c0 	.word	0x200080c0
 8002684:	08010f54 	.word	0x08010f54
 8002688:	08010f5c 	.word	0x08010f5c
	} else {		// display for invalid measurements
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <display_screen1+0x350>)
 800268e:	2200      	movs	r2, #0
 8002690:	9204      	str	r2, [sp, #16]
 8002692:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002696:	9203      	str	r2, [sp, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	9202      	str	r2, [sp, #8]
 800269c:	466c      	mov	r4, sp
 800269e:	1d1a      	adds	r2, r3, #4
 80026a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a38      	ldr	r2, [pc, #224]	; (800278c <display_screen1+0x354>)
 80026ac:	2107      	movs	r1, #7
 80026ae:	2009      	movs	r0, #9
 80026b0:	f004 f9f8 	bl	8006aa4 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <display_screen1+0x350>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	9204      	str	r2, [sp, #16]
 80026ba:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80026be:	9203      	str	r2, [sp, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	9202      	str	r2, [sp, #8]
 80026c4:	466c      	mov	r4, sp
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <display_screen1+0x358>)
 80026d4:	2107      	movs	r1, #7
 80026d6:	2078      	movs	r0, #120	; 0x78
 80026d8:	f004 f9e4 	bl	8006aa4 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <display_screen1+0x350>)
 80026de:	2200      	movs	r2, #0
 80026e0:	9204      	str	r2, [sp, #16]
 80026e2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026e6:	9203      	str	r2, [sp, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	9202      	str	r2, [sp, #8]
 80026ec:	466c      	mov	r4, sp
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a26      	ldr	r2, [pc, #152]	; (8002794 <display_screen1+0x35c>)
 80026fc:	2130      	movs	r1, #48	; 0x30
 80026fe:	2009      	movs	r0, #9
 8002700:	f004 f9d0 	bl	8006aa4 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <display_screen1+0x350>)
 8002706:	2200      	movs	r2, #0
 8002708:	9204      	str	r2, [sp, #16]
 800270a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800270e:	9203      	str	r2, [sp, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	9202      	str	r2, [sp, #8]
 8002714:	466c      	mov	r4, sp
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800271c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <display_screen1+0x35c>)
 8002724:	2159      	movs	r1, #89	; 0x59
 8002726:	2009      	movs	r0, #9
 8002728:	f004 f9bc 	bl	8006aa4 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <display_screen1+0x350>)
 800272e:	2200      	movs	r2, #0
 8002730:	9204      	str	r2, [sp, #16]
 8002732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002736:	9203      	str	r2, [sp, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	9202      	str	r2, [sp, #8]
 800273c:	466c      	mov	r4, sp
 800273e:	1d1a      	adds	r2, r3, #4
 8002740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002744:	e884 0003 	stmia.w	r4, {r0, r1}
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <display_screen1+0x360>)
 800274c:	2182      	movs	r1, #130	; 0x82
 800274e:	2009      	movs	r0, #9
 8002750:	f004 f9a8 	bl	8006aa4 <Displ_WString>
		Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <display_screen1+0x350>)
 8002756:	2200      	movs	r2, #0
 8002758:	9204      	str	r2, [sp, #16]
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	9203      	str	r2, [sp, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	9202      	str	r2, [sp, #8]
 8002764:	466c      	mov	r4, sp
 8002766:	1d1a      	adds	r2, r3, #4
 8002768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <display_screen1+0x358>)
 8002774:	2182      	movs	r1, #130	; 0x82
 8002776:	208a      	movs	r0, #138	; 0x8a
 8002778:	f004 f994 	bl	8006aa4 <Displ_WString>
		}
	display_show_curves();
 800277c:	f000 fd78 	bl	8003270 <display_show_curves>
}
 8002780:	bf00      	nop
 8002782:	3704      	adds	r7, #4
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	20000024 	.word	0x20000024
 800278c:	08010f64 	.word	0x08010f64
 8002790:	08010f68 	.word	0x08010f68
 8002794:	08010f70 	.word	0x08010f70
 8002798:	08010f78 	.word	0x08010f78

0800279c <display_screen2>:

void display_screen2() {
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <display_update_meter>:

void display_update_meter(uint8_t screen) {
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af06      	add	r7, sp, #24
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <display_update_meter+0x7c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	79fa      	ldrb	r2, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d023      	beq.n	8002808 <display_update_meter+0x5c>
		switch(screen) {
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <display_update_meter+0x20>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <display_update_meter+0x26>
 80027ca:	e01a      	b.n	8002802 <display_update_meter+0x56>
		case 1:
			display_meter_mask();
 80027cc:	f000 f83e 	bl	800284c <display_meter_mask>
			break;
 80027d0:	e017      	b.n	8002802 <display_update_meter+0x56>
		case 2:
			Displ_CLS(BLACK);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f003 f9f4 	bl	8005bc0 <Displ_CLS>
			Displ_WString(20, 20, "Screen 2" , Font24, 1, WHITE, BLACK);
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <display_update_meter+0x80>)
 80027da:	2200      	movs	r2, #0
 80027dc:	9204      	str	r2, [sp, #16]
 80027de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e2:	9203      	str	r2, [sp, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	9202      	str	r2, [sp, #8]
 80027e8:	466c      	mov	r4, sp
 80027ea:	1d1a      	adds	r2, r3, #4
 80027ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <display_update_meter+0x84>)
 80027f8:	2114      	movs	r1, #20
 80027fa:	2014      	movs	r0, #20
 80027fc:	f004 f952 	bl	8006aa4 <Displ_WString>
			break;
 8002800:	bf00      	nop

		}
		last_screen = screen;
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <display_update_meter+0x7c>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d002      	beq.n	8002814 <display_update_meter+0x68>
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <display_update_meter+0x6e>
		break;
	case 2:
		display_screen2();
		break;
	}
}
 8002812:	e005      	b.n	8002820 <display_update_meter+0x74>
		display_screen1();
 8002814:	f7ff fe10 	bl	8002438 <display_screen1>
		break;
 8002818:	e002      	b.n	8002820 <display_update_meter+0x74>
		display_screen2();
 800281a:	f7ff ffbf 	bl	800279c <display_screen2>
		break;
 800281e:	bf00      	nop
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	20001fe8 	.word	0x20001fe8
 800282c:	20000018 	.word	0x20000018
 8002830:	08010f80 	.word	0x08010f80

08002834 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	last_screen = 0;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <display_update_mask+0x14>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20001fe8 	.word	0x20001fe8

0800284c <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b08b      	sub	sp, #44	; 0x2c
 8002850:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 8002856:	2328      	movs	r3, #40	; 0x28
 8002858:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 800285a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800285e:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 8002860:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002864:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 8002866:	2300      	movs	r3, #0
 8002868:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4618      	mov	r0, r3
 800286e:	f003 f9a7 	bl	8005bc0 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002872:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002876:	4ba5      	ldr	r3, [pc, #660]	; (8002b0c <display_meter_mask+0x2c0>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	b29b      	uxth	r3, r3
 800287e:	b21a      	sxth	r2, r3
 8002880:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4603      	mov	r3, r0
 800288a:	2000      	movs	r0, #0
 800288c:	f003 fb81 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002890:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002894:	89fa      	ldrh	r2, [r7, #14]
 8002896:	89bb      	ldrh	r3, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	b29b      	uxth	r3, r3
 800289c:	b21a      	sxth	r2, r3
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	2200      	movs	r2, #0
 80028a6:	2000      	movs	r0, #0
 80028a8:	f003 fb73 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 80028ac:	89fa      	ldrh	r2, [r7, #14]
 80028ae:	89bb      	ldrh	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b219      	sxth	r1, r3
 80028b6:	4b95      	ldr	r3, [pc, #596]	; (8002b0c <display_meter_mask+0x2c0>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b218      	sxth	r0, r3
 80028c0:	89fa      	ldrh	r2, [r7, #14]
 80028c2:	89bb      	ldrh	r3, [r7, #12]
 80028c4:	4413      	add	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	4602      	mov	r2, r0
 80028d2:	2000      	movs	r0, #0
 80028d4:	f003 fb5d 	bl	8005f92 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <display_meter_mask+0x2c0>)
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b218      	sxth	r0, r3
 80028e2:	89fa      	ldrh	r2, [r7, #14]
 80028e4:	89bb      	ldrh	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b219      	sxth	r1, r3
 80028ec:	4b87      	ldr	r3, [pc, #540]	; (8002b0c <display_meter_mask+0x2c0>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2300      	movs	r3, #0
 80028fc:	f003 fb49 	bl	8005f92 <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 8002900:	89fb      	ldrh	r3, [r7, #14]
 8002902:	3309      	adds	r3, #9
 8002904:	b29c      	uxth	r4, r3
 8002906:	4b82      	ldr	r3, [pc, #520]	; (8002b10 <display_meter_mask+0x2c4>)
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	9204      	str	r2, [sp, #16]
 800290c:	893a      	ldrh	r2, [r7, #8]
 800290e:	9203      	str	r2, [sp, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	9202      	str	r2, [sp, #8]
 8002914:	466d      	mov	r5, sp
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800291c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2256      	movs	r2, #86	; 0x56
 8002924:	4621      	mov	r1, r4
 8002926:	204b      	movs	r0, #75	; 0x4b
 8002928:	f003 fe3e 	bl	80065a8 <Displ_WChar>
	font_col = ORANGE;
 800292c:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002930:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <display_meter_mask+0x2c0>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	3b1e      	subs	r3, #30
 8002938:	b29c      	uxth	r4, r3
 800293a:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <display_meter_mask+0x2c4>)
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	9204      	str	r2, [sp, #16]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	9203      	str	r2, [sp, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	9202      	str	r2, [sp, #8]
 8002948:	466d      	mov	r5, sp
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002950:	e885 0003 	stmia.w	r5, {r0, r1}
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2241      	movs	r2, #65	; 0x41
 8002958:	2109      	movs	r1, #9
 800295a:	4620      	mov	r0, r4
 800295c:	f003 fe24 	bl	80065a8 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002960:	89ba      	ldrh	r2, [r7, #12]
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	4413      	add	r3, r2
 8002966:	b29b      	uxth	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 800296c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002976:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800297a:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <display_meter_mask+0x2c0>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	3b01      	subs	r3, #1
 8002980:	b29b      	uxth	r3, r3
 8002982:	b21a      	sxth	r2, r3
 8002984:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002988:	897b      	ldrh	r3, [r7, #10]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4603      	mov	r3, r0
 800298e:	2000      	movs	r0, #0
 8002990:	f003 faff 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002994:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002998:	89fa      	ldrh	r2, [r7, #14]
 800299a:	89bb      	ldrh	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	2200      	movs	r2, #0
 80029aa:	2000      	movs	r0, #0
 80029ac:	f003 faf1 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 80029b0:	89fa      	ldrh	r2, [r7, #14]
 80029b2:	89bb      	ldrh	r3, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b219      	sxth	r1, r3
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <display_meter_mask+0x2c0>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b218      	sxth	r0, r3
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	4602      	mov	r2, r0
 80029d6:	2000      	movs	r0, #0
 80029d8:	f003 fadb 	bl	8005f92 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 80029dc:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <display_meter_mask+0x2c0>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b218      	sxth	r0, r3
 80029e6:	89fa      	ldrh	r2, [r7, #14]
 80029e8:	89bb      	ldrh	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b219      	sxth	r1, r3
 80029f0:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <display_meter_mask+0x2c0>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4623      	mov	r3, r4
 8002a04:	f003 fac5 	bl	8005f92 <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <display_meter_mask+0x2c0>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	3b50      	subs	r3, #80	; 0x50
 8002a0e:	b29c      	uxth	r4, r3
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	3309      	adds	r3, #9
 8002a14:	b29d      	uxth	r5, r3
 8002a16:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <display_meter_mask+0x2c4>)
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	9204      	str	r2, [sp, #16]
 8002a1c:	893a      	ldrh	r2, [r7, #8]
 8002a1e:	9203      	str	r2, [sp, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	9202      	str	r2, [sp, #8]
 8002a24:	466e      	mov	r6, sp
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <display_meter_mask+0x2c8>)
 8002a34:	4629      	mov	r1, r5
 8002a36:	4620      	mov	r0, r4
 8002a38:	f004 f834 	bl	8006aa4 <Displ_WString>
	// W
	ypos += box_height+1;
 8002a3c:	89ba      	ldrh	r2, [r7, #12]
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	4413      	add	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002a48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002a52:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a56:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <display_meter_mask+0x2c0>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f003 fa91 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002a70:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a74:	89fa      	ldrh	r2, [r7, #14]
 8002a76:	89bb      	ldrh	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b21a      	sxth	r2, r3
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	2200      	movs	r2, #0
 8002a86:	2000      	movs	r0, #0
 8002a88:	f003 fa83 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002a8c:	89fa      	ldrh	r2, [r7, #14]
 8002a8e:	89bb      	ldrh	r3, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b219      	sxth	r1, r3
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <display_meter_mask+0x2c0>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b218      	sxth	r0, r3
 8002aa0:	89fa      	ldrh	r2, [r7, #14]
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f003 fa6d 	bl	8005f92 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <display_meter_mask+0x2c0>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b218      	sxth	r0, r3
 8002ac2:	89fa      	ldrh	r2, [r7, #14]
 8002ac4:	89bb      	ldrh	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b219      	sxth	r1, r3
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <display_meter_mask+0x2c0>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b21a      	sxth	r2, r3
 8002ad6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4623      	mov	r3, r4
 8002ae0:	f003 fa57 	bl	8005f92 <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <display_meter_mask+0x2c0>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	3b50      	subs	r3, #80	; 0x50
 8002aea:	b29c      	uxth	r4, r3
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	3309      	adds	r3, #9
 8002af0:	b29d      	uxth	r5, r3
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <display_meter_mask+0x2c4>)
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	9204      	str	r2, [sp, #16]
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	9203      	str	r2, [sp, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	9202      	str	r2, [sp, #8]
 8002b00:	466e      	mov	r6, sp
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b08:	e006      	b.n	8002b18 <display_meter_mask+0x2cc>
 8002b0a:	bf00      	nop
 8002b0c:	20001fea 	.word	0x20001fea
 8002b10:	20000018 	.word	0x20000018
 8002b14:	08010f8c 	.word	0x08010f8c
 8002b18:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2257      	movs	r2, #87	; 0x57
 8002b20:	4629      	mov	r1, r5
 8002b22:	4620      	mov	r0, r4
 8002b24:	f003 fd40 	bl	80065a8 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002b28:	89ba      	ldrh	r2, [r7, #12]
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002b3e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b42:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <display_meter_mask+0x478>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4603      	mov	r3, r0
 8002b56:	2000      	movs	r0, #0
 8002b58:	f003 fa1b 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002b5c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b60:	89fa      	ldrh	r2, [r7, #14]
 8002b62:	89bb      	ldrh	r3, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	2200      	movs	r2, #0
 8002b72:	2000      	movs	r0, #0
 8002b74:	f003 fa0d 	bl	8005f92 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b78:	89fa      	ldrh	r2, [r7, #14]
 8002b7a:	89bb      	ldrh	r3, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	b219      	sxth	r1, r3
 8002b82:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <display_meter_mask+0x478>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b218      	sxth	r0, r3
 8002b8c:	89fa      	ldrh	r2, [r7, #14]
 8002b8e:	89bb      	ldrh	r3, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f003 f9f7 	bl	8005f92 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002ba4:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <display_meter_mask+0x478>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b218      	sxth	r0, r3
 8002bae:	89fa      	ldrh	r2, [r7, #14]
 8002bb0:	89bb      	ldrh	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b219      	sxth	r1, r3
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <display_meter_mask+0x478>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4623      	mov	r3, r4
 8002bcc:	f003 f9e1 	bl	8005f92 <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	3309      	adds	r3, #9
 8002bd4:	b29c      	uxth	r4, r3
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <display_meter_mask+0x47c>)
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	9204      	str	r2, [sp, #16]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	9203      	str	r2, [sp, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	9202      	str	r2, [sp, #8]
 8002be4:	466d      	mov	r5, sp
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a36      	ldr	r2, [pc, #216]	; (8002ccc <display_meter_mask+0x480>)
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	205f      	movs	r0, #95	; 0x5f
 8002bf8:	f003 ff54 	bl	8006aa4 <Displ_WString>
	Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <display_meter_mask+0x478>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	3b16      	subs	r3, #22
 8002c02:	b29c      	uxth	r4, r3
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <display_meter_mask+0x484>)
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	9204      	str	r2, [sp, #16]
 8002c0a:	893a      	ldrh	r2, [r7, #8]
 8002c0c:	9203      	str	r2, [sp, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	9202      	str	r2, [sp, #8]
 8002c12:	466d      	mov	r5, sp
 8002c14:	1d1a      	adds	r2, r3, #4
 8002c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2260      	movs	r2, #96	; 0x60
 8002c22:	2182      	movs	r1, #130	; 0x82
 8002c24:	4620      	mov	r0, r4
 8002c26:	f003 fcbf 	bl	80065a8 <Displ_WChar>

	// Graph Box
	ypos += box_height+1;
 8002c2a:	89ba      	ldrh	r2, [r7, #12]
 8002c2c:	89fb      	ldrh	r3, [r7, #14]
 8002c2e:	4413      	add	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002c36:	231f      	movs	r3, #31
 8002c38:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <display_meter_mask+0x488>)
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	2302      	movs	r3, #2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <display_meter_mask+0x48c>)
 8002c50:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <display_meter_mask+0x48c>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2202      	movs	r2, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <display_meter_mask+0x490>)
 8002c68:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002c6a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <display_meter_mask+0x478>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b218      	sxth	r0, r3
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <display_meter_mask+0x488>)
 8002c76:	881a      	ldrh	r2, [r3, #0]
 8002c78:	89fb      	ldrh	r3, [r7, #14]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21c      	sxth	r4, r3
 8002c80:	2302      	movs	r3, #2
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	897a      	ldrh	r2, [r7, #10]
 8002c86:	9201      	str	r2, [sp, #4]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f003 fab0 	bl	80061f4 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <display_meter_mask+0x494>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b218      	sxth	r0, r3
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <display_meter_mask+0x490>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b219      	sxth	r1, r3
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <display_meter_mask+0x494>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	33d2      	adds	r3, #210	; 0xd2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <display_meter_mask+0x490>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002cb4:	9400      	str	r4, [sp, #0]
 8002cb6:	f003 f96c 	bl	8005f92 <Displ_Line>
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20001fea 	.word	0x20001fea
 8002cc8:	20000018 	.word	0x20000018
 8002ccc:	08010f90 	.word	0x08010f90
 8002cd0:	20000024 	.word	0x20000024
 8002cd4:	20001fec 	.word	0x20001fec
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	200006c0 	.word	0x200006c0
 8002ce0:	2000000a 	.word	0x2000000a

08002ce4 <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cee:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf4:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <display_align_curves+0xfc>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da20      	bge.n	8002d40 <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	e016      	b.n	8002d32 <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002d04:	4a37      	ldr	r2, [pc, #220]	; (8002de4 <display_align_curves+0x100>)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d0c:	4a36      	ldr	r2, [pc, #216]	; (8002de8 <display_align_curves+0x104>)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002d14:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <display_align_curves+0x100>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d20:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <display_align_curves+0x104>)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d38:	d3e4      	bcc.n	8002d04 <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002d3a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002d3e:	e049      	b.n	8002dd4 <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <display_align_curves+0xfc>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	e019      	b.n	8002d7c <display_align_curves+0x98>
		dest_idx++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d4e:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <display_align_curves+0x100>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d56:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <display_align_curves+0x104>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d5e:	4a21      	ldr	r2, [pc, #132]	; (8002de4 <display_align_curves+0x100>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d66:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <display_align_curves+0x104>)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d82:	d3e1      	bcc.n	8002d48 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002d84:	2314      	movs	r3, #20
 8002d86:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	e019      	b.n	8002dc2 <display_align_curves+0xde>
		dest_idx++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <display_align_curves+0x100>)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <display_align_curves+0x104>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <display_align_curves+0x100>)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002dac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <display_align_curves+0x104>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <display_align_curves+0xfc>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbe0      	blt.n	8002d8e <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	20000244 	.word	0x20000244
 8002de4:	20007390 	.word	0x20007390
 8002de8:	200006c4 	.word	0x200006c4

08002dec <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b08b      	sub	sp, #44	; 0x2c
 8002df0:	af06      	add	r7, sp, #24
 8002df2:	4603      	mov	r3, r0
 8002df4:	80fb      	strh	r3, [r7, #6]
 8002df6:	460b      	mov	r3, r1
 8002df8:	717b      	strb	r3, [r7, #5]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 8002dfe:	797b      	ldrb	r3, [r7, #5]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <draw_curve+0x20>
 8002e04:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <draw_curve+0x1b0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <draw_curve+0x1b4>)
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <draw_curve+0x1b8>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b02      	subs	r3, #2
 8002e1a:	b299      	uxth	r1, r3
 8002e1c:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <draw_curve+0x1bc>)
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	2302      	movs	r3, #2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <draw_curve+0x1b8>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2000      	movs	r0, #0
 8002e30:	9000      	str	r0, [sp, #0]
 8002e32:	2002      	movs	r0, #2
 8002e34:	f002 fd10 	bl	8005858 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8002e38:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <draw_curve+0x1b0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8002e40:	4b5a      	ldr	r3, [pc, #360]	; (8002fac <draw_curve+0x1c0>)
 8002e42:	889a      	ldrh	r2, [r3, #4]
 8002e44:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <draw_curve+0x1c4>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29c      	uxth	r4, r3
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <draw_curve+0x1c8>)
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	4b56      	ldr	r3, [pc, #344]	; (8002fac <draw_curve+0x1c0>)
 8002e52:	88db      	ldrh	r3, [r3, #6]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b29d      	uxth	r5, r3
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <draw_curve+0x1c0>)
 8002e5e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002e62:	9204      	str	r2, [sp, #16]
 8002e64:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e68:	9203      	str	r2, [sp, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	9202      	str	r2, [sp, #8]
 8002e6e:	466e      	mov	r6, sp
 8002e70:	1d1a      	adds	r2, r3, #4
 8002e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e76:	e886 0003 	stmia.w	r6, {r0, r1}
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <draw_curve+0x1cc>)
 8002e7e:	4629      	mov	r1, r5
 8002e80:	4620      	mov	r0, r4
 8002e82:	f003 fe0f 	bl	8006aa4 <Displ_WString>
		return;
 8002e86:	e086      	b.n	8002f96 <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8002e88:	793b      	ldrb	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04c      	beq.n	8002f28 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_len, curve_y_zero, WHITE);
 8002e8e:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <draw_curve+0x1c4>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b218      	sxth	r0, r3
 8002e94:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <draw_curve+0x1c8>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b219      	sxth	r1, r3
 8002e9a:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <draw_curve+0x1c4>)
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <draw_curve+0x1d0>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b21a      	sxth	r2, r3
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <draw_curve+0x1c8>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002eb2:	9400      	str	r4, [sp, #0]
 8002eb4:	f003 f86d 	bl	8005f92 <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_len; x++) {
 8002eb8:	2301      	movs	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e02d      	b.n	8002f1a <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <draw_curve+0x1c4>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b218      	sxth	r0, r3
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <draw_curve+0x1c8>)
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	4939      	ldr	r1, [pc, #228]	; (8002fc0 <draw_curve+0x1d4>)
 8002eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	b219      	sxth	r1, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <draw_curve+0x1c4>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b21c      	sxth	r4, r3
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <draw_curve+0x1c8>)
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	4d31      	ldr	r5, [pc, #196]	; (8002fc0 <draw_curve+0x1d4>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	4622      	mov	r2, r4
 8002f10:	f003 f83f 	bl	8005f92 <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <draw_curve+0x1d0>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4293      	cmp	r3, r2
 8002f24:	dbcb      	blt.n	8002ebe <draw_curve+0xd2>
 8002f26:	e036      	b.n	8002f96 <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_len; x++) {
 8002f28:	2301      	movs	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	e02d      	b.n	8002f8a <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <draw_curve+0x1c4>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b218      	sxth	r0, r3
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <draw_curve+0x1c8>)
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	491d      	ldr	r1, [pc, #116]	; (8002fc0 <draw_curve+0x1d4>)
 8002f4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b219      	sxth	r1, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <draw_curve+0x1c4>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b21c      	sxth	r4, r3
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <draw_curve+0x1c8>)
 8002f66:	881a      	ldrh	r2, [r3, #0]
 8002f68:	4d15      	ldr	r5, [pc, #84]	; (8002fc0 <draw_curve+0x1d4>)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	4622      	mov	r2, r4
 8002f80:	f003 f807 	bl	8005f92 <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <draw_curve+0x1d0>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	dbcb      	blt.n	8002f2e <draw_curve+0x142>
		}
	}
}
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f9c:	20000294 	.word	0x20000294
 8002fa0:	20001fec 	.word	0x20001fec
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20001fea 	.word	0x20001fea
 8002fac:	20000018 	.word	0x20000018
 8002fb0:	2000000a 	.word	0x2000000a
 8002fb4:	200006c0 	.word	0x200006c0
 8002fb8:	08010f94 	.word	0x08010f94
 8002fbc:	20001fc4 	.word	0x20001fc4
 8002fc0:	20000378 	.word	0x20000378

08002fc4 <make_curve>:
 * 1) Two adjacent data points are averaged to half the number of data points
 * 2) The data points are raw ADC values ranging between 0 and 4095. The curve data
 * represents plus/minus values centered around the half way point of the data range.
 * The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 */
void make_curve(uint8_t bufnum) {
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b093      	sub	sp, #76	; 0x4c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
	int value;
	int scale_factor = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
	int src_idx = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	643b      	str	r3, [r7, #64]	; 0x40
	int zero_value = ADC_FS_RAW / 2;	// zero should be half way if DC-Bias is accurate
 8002fd6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
	//	zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
	}

	//term_print("zero_value = %d\r\n", zero_value);

	float fScale = (float)curve_y_size / (float)sample_buf_meta[bufnum].max;
 8002fdc:	4b9e      	ldr	r3, [pc, #632]	; (8003258 <make_curve+0x294>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe8:	79fa      	ldrb	r2, [r7, #7]
 8002fea:	499c      	ldr	r1, [pc, #624]	; (800325c <make_curve+0x298>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003006:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if (fScale < 1) {
 800300a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800300e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	d51f      	bpl.n	800305c <make_curve+0x98>
		scale_factor = trunc(1/fScale)+1; // divisor
 800301c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003020:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003024:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003028:	ee16 0a90 	vmov	r0, s13
 800302c:	f7fd fab6 	bl	800059c <__aeabi_f2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	ec43 2b10 	vmov	d0, r2, r3
 8003038:	f00d fdf6 	bl	8010c28 <trunc>
 800303c:	ec51 0b10 	vmov	r0, r1, d0
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	4b86      	ldr	r3, [pc, #536]	; (8003260 <make_curve+0x29c>)
 8003046:	f7fd f94b 	bl	80002e0 <__adddf3>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fdab 	bl	8000bac <__aeabi_d2iz>
 8003056:	4603      	mov	r3, r0
 8003058:	647b      	str	r3, [r7, #68]	; 0x44
 800305a:	e010      	b.n	800307e <make_curve+0xba>
		//value = sample_buf_meta[bufnum].max / scale_factor;
	} else {
		scale_factor = trunc(fScale);	// multiplier
 800305c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305e:	f7fd fa9d 	bl	800059c <__aeabi_f2d>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	ec43 2b10 	vmov	d0, r2, r3
 800306a:	f00d fddd 	bl	8010c28 <trunc>
 800306e:	ec53 2b10 	vmov	r2, r3, d0
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fd99 	bl	8000bac <__aeabi_d2iz>
 800307a:	4603      	mov	r3, r0
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
		//value = sample_buf_meta[bufnum].max * scale_factor;
	}

	curve_len = display_align_curves() / 2;		// half the data points to fit screen size
 800307e:	f7ff fe31 	bl	8002ce4 <display_align_curves>
 8003082:	4603      	mov	r3, r0
 8003084:	0fda      	lsrs	r2, r3, #31
 8003086:	4413      	add	r3, r2
 8003088:	105b      	asrs	r3, r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	4b75      	ldr	r3, [pc, #468]	; (8003264 <make_curve+0x2a0>)
 800308e:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8003090:	4b71      	ldr	r3, [pc, #452]	; (8003258 <make_curve+0x294>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	f1c3 0301 	rsb	r3, r3, #1
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 800309e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80030a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ae:	d567      	bpl.n	8003180 <make_curve+0x1bc>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	496d      	ldr	r1, [pc, #436]	; (8003268 <make_curve+0x2a4>)
 80030b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80030b8:	fb03 f202 	mul.w	r2, r3, r2
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	4413      	add	r3, r2
 80030c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030c4:	461c      	mov	r4, r3
 80030c6:	79fa      	ldrb	r2, [r7, #7]
 80030c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ca:	3301      	adds	r3, #1
 80030cc:	4966      	ldr	r1, [pc, #408]	; (8003268 <make_curve+0x2a4>)
 80030ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80030d2:	fb00 f202 	mul.w	r2, r0, r2
 80030d6:	4413      	add	r3, r2
 80030d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030dc:	4423      	add	r3, r4
 80030de:	0fda      	lsrs	r2, r3, #31
 80030e0:	4413      	add	r3, r2
 80030e2:	105b      	asrs	r3, r3, #1
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 80030e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bfb8      	it	lt
 8003100:	4613      	movlt	r3, r2
 8003102:	4a5a      	ldr	r2, [pc, #360]	; (800326c <make_curve+0x2a8>)
 8003104:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003106:	2301      	movs	r3, #1
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310a:	e032      	b.n	8003172 <make_curve+0x1ae>
			src_idx+=2;
 800310c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310e:	3302      	adds	r3, #2
 8003110:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4954      	ldr	r1, [pc, #336]	; (8003268 <make_curve+0x2a4>)
 8003116:	f44f 7248 	mov.w	r2, #800	; 0x320
 800311a:	fb03 f202 	mul.w	r2, r3, r2
 800311e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003120:	4413      	add	r3, r2
 8003122:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003126:	461c      	mov	r4, r3
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312c:	3301      	adds	r3, #1
 800312e:	494e      	ldr	r1, [pc, #312]	; (8003268 <make_curve+0x2a4>)
 8003130:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003134:	fb00 f202 	mul.w	r2, r0, r2
 8003138:	4413      	add	r3, r2
 800313a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800313e:	4423      	add	r3, r4
 8003140:	0fda      	lsrs	r2, r3, #31
 8003142:	4413      	add	r3, r2
 8003144:	105b      	asrs	r3, r3, #1
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	1ad2      	subs	r2, r2, r3
 800314e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003150:	fb92 f3f3 	sdiv	r3, r2, r3
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	429a      	cmp	r2, r3
 8003160:	bfb8      	it	lt
 8003162:	461a      	movlt	r2, r3
 8003164:	4941      	ldr	r1, [pc, #260]	; (800326c <make_curve+0x2a8>)
 8003166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	3301      	adds	r3, #1
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003172:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <make_curve+0x2a0>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317a:	4293      	cmp	r3, r2
 800317c:	dbc6      	blt.n	800310c <make_curve+0x148>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 800317e:	e066      	b.n	800324e <make_curve+0x28a>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	4939      	ldr	r1, [pc, #228]	; (8003268 <make_curve+0x2a4>)
 8003184:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003188:	fb03 f202 	mul.w	r2, r3, r2
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	4413      	add	r3, r2
 8003190:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003194:	461c      	mov	r4, r3
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	3301      	adds	r3, #1
 800319c:	4932      	ldr	r1, [pc, #200]	; (8003268 <make_curve+0x2a4>)
 800319e:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031a2:	fb00 f202 	mul.w	r2, r0, r2
 80031a6:	4413      	add	r3, r2
 80031a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031ac:	4423      	add	r3, r4
 80031ae:	0fda      	lsrs	r2, r3, #31
 80031b0:	4413      	add	r3, r2
 80031b2:	105b      	asrs	r3, r3, #1
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 80031b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	1ad2      	subs	r2, r2, r3
 80031bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bfb8      	it	lt
 80031d0:	4613      	movlt	r3, r2
 80031d2:	4a26      	ldr	r2, [pc, #152]	; (800326c <make_curve+0x2a8>)
 80031d4:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80031d6:	2301      	movs	r3, #1
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031da:	e032      	b.n	8003242 <make_curve+0x27e>
			src_idx+=2;
 80031dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031de:	3302      	adds	r3, #2
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	4920      	ldr	r1, [pc, #128]	; (8003268 <make_curve+0x2a4>)
 80031e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f0:	4413      	add	r3, r2
 80031f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031f6:	461c      	mov	r4, r3
 80031f8:	79fa      	ldrb	r2, [r7, #7]
 80031fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fc:	3301      	adds	r3, #1
 80031fe:	491a      	ldr	r1, [pc, #104]	; (8003268 <make_curve+0x2a4>)
 8003200:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003204:	fb00 f202 	mul.w	r2, r0, r2
 8003208:	4413      	add	r3, r2
 800320a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800320e:	4423      	add	r3, r4
 8003210:	0fda      	lsrs	r2, r3, #31
 8003212:	4413      	add	r3, r2
 8003214:	105b      	asrs	r3, r3, #1
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8003218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	429a      	cmp	r2, r3
 8003230:	bfb8      	it	lt
 8003232:	461a      	movlt	r2, r3
 8003234:	490d      	ldr	r1, [pc, #52]	; (800326c <make_curve+0x2a8>)
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	3301      	adds	r3, #1
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <make_curve+0x2a0>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	4293      	cmp	r3, r2
 800324c:	dbc6      	blt.n	80031dc <make_curve+0x218>
}
 800324e:	bf00      	nop
 8003250:	374c      	adds	r7, #76	; 0x4c
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	20000008 	.word	0x20000008
 800325c:	20000244 	.word	0x20000244
 8003260:	3ff00000 	.word	0x3ff00000
 8003264:	20001fc4 	.word	0x20001fc4
 8003268:	200006c4 	.word	0x200006c4
 800326c:	20000378 	.word	0x20000378

08003270 <display_show_curves>:

/*
 * Display curves for all configured channels on TFT display
 */
void display_show_curves(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
	uint8_t dont_clear = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	e01e      	b.n	80032be <display_show_curves+0x4e>
		make_curve(i);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fe9d 	bl	8002fc4 <make_curve>
		draw_curve(channel_colour[i], dont_clear, (sample_buf_meta[i].zero_cross_pos >= 0));
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <display_show_curves+0x60>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003292:	4910      	ldr	r1, [pc, #64]	; (80032d4 <display_show_curves+0x64>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3304      	adds	r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	0fdb      	lsrs	r3, r3, #31
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7ff fd9c 	bl	8002dec <draw_curve>
		dont_clear = 1;
 80032b4:	2301      	movs	r3, #1
 80032b6:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	dddd      	ble.n	8003280 <display_show_curves+0x10>
	}
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000244 	.word	0x20000244

080032d8 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d81a      	bhi.n	800331e <display_show_curve+0x46>

	make_curve(bufnum);
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fe6a 	bl	8002fc4 <make_curve>
	draw_curve(channel_colour[bufnum], 0, (sample_buf_meta[bufnum].measurements_valid != 0));
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <display_show_curve+0x50>)
 80032f4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80032f8:	79fa      	ldrb	r2, [r7, #7]
 80032fa:	490c      	ldr	r1, [pc, #48]	; (800332c <display_show_curve+0x54>)
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	330c      	adds	r3, #12
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f7ff fd68 	bl	8002dec <draw_curve>
 800331c:	e000      	b.n	8003320 <display_show_curve+0x48>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 800331e:	bf00      	nop

}
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000
 800332c:	20000244 	.word	0x20000244

08003330 <ee24_isConnected>:

uint8_t ee24_lock = 0;

//################################################################################################################
bool ee24_isConnected(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)!=HAL_OK)
 8003334:	2364      	movs	r3, #100	; 0x64
 8003336:	2202      	movs	r2, #2
 8003338:	210a      	movs	r1, #10
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <ee24_isConnected+0x20>)
 800333c:	f005 ff9c 	bl	8009278 <HAL_I2C_IsDeviceReady>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <ee24_isConnected+0x1a>
    return false;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <ee24_isConnected+0x1c>

  return true;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20002140 	.word	0x20002140

08003354 <ee24_read_byte>:
  }
}

//################################################################################################################
bool ee24_read_byte(uint8_t address, uint8_t *data)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af02      	add	r7, sp, #8
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if (ee24_lock == 1)
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <ee24_read_byte+0x50>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <ee24_read_byte+0x18>
    return false;
 8003368:	2300      	movs	r3, #0
 800336a:	e016      	b.n	800339a <ee24_read_byte+0x46>
  ee24_lock = 1;
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <ee24_read_byte+0x50>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]

  if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1) != HAL_OK) {
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	b29a      	uxth	r2, r3
 8003376:	2301      	movs	r3, #1
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2301      	movs	r3, #1
 8003380:	210a      	movs	r1, #10
 8003382:	4809      	ldr	r0, [pc, #36]	; (80033a8 <ee24_read_byte+0x54>)
 8003384:	f005 fde4 	bl	8008f50 <HAL_I2C_Mem_Read_DMA>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <ee24_read_byte+0x44>
	  ee24_lock = 0;
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <ee24_read_byte+0x50>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
	  return false;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <ee24_read_byte+0x46>
  }
  return true;
 8003398:	2301      	movs	r3, #1

}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20001fee 	.word	0x20001fee
 80033a8:	20002140 	.word	0x20002140

080033ac <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80033b0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80033b4:	490d      	ldr	r1, [pc, #52]	; (80033ec <start_adcs+0x40>)
 80033b6:	480e      	ldr	r0, [pc, #56]	; (80033f0 <start_adcs+0x44>)
 80033b8:	f004 f9ae 	bl	8007718 <HAL_ADC_Start_DMA>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 80033c2:	480c      	ldr	r0, [pc, #48]	; (80033f4 <start_adcs+0x48>)
 80033c4:	f001 fbd4 	bl	8004b70 <term_print>
  	  Error_Handler();
 80033c8:	f000 ff90 	bl	80042ec <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80033cc:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80033d0:	4909      	ldr	r1, [pc, #36]	; (80033f8 <start_adcs+0x4c>)
 80033d2:	480a      	ldr	r0, [pc, #40]	; (80033fc <start_adcs+0x50>)
 80033d4:	f004 f9a0 	bl	8007718 <HAL_ADC_Start_DMA>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 80033de:	4808      	ldr	r0, [pc, #32]	; (8003400 <start_adcs+0x54>)
 80033e0:	f001 fbc6 	bl	8004b70 <term_print>
 	  Error_Handler();
 80033e4:	f000 ff82 	bl	80042ec <Error_Handler>
	}
}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200024d0 	.word	0x200024d0
 80033f0:	20001ff0 	.word	0x20001ff0
 80033f4:	08010fa0 	.word	0x08010fa0
 80033f8:	20003f10 	.word	0x20003f10
 80033fc:	20002038 	.word	0x20002038
 8003400:	08010fbc 	.word	0x08010fbc

08003404 <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	460a      	mov	r2, r1
 800340e:	80fb      	strh	r3, [r7, #6]
 8003410:	4613      	mov	r3, r2
 8003412:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800341a:	4293      	cmp	r3, r2
 800341c:	d803      	bhi.n	8003426 <adjust_TIM2_period+0x22>
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003424:	d205      	bcs.n	8003432 <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4619      	mov	r1, r3
 800342a:	4808      	ldr	r0, [pc, #32]	; (800344c <adjust_TIM2_period+0x48>)
 800342c:	f001 fba0 	bl	8004b70 <term_print>
		return;
 8003430:	e008      	b.n	8003444 <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 8003432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4619      	mov	r1, r3
 800343e:	4804      	ldr	r0, [pc, #16]	; (8003450 <adjust_TIM2_period+0x4c>)
 8003440:	f001 fb96 	bl	8004b70 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	08010fd8 	.word	0x08010fd8
 8003450:	08010ff8 	.word	0x08010ff8

08003454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800345a:	f004 f883 	bl	8007564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800345e:	f000 faa7 	bl	80039b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003462:	f000 fd19 	bl	8003e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8003466:	f000 fcd9 	bl	8003e1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800346a:	f000 fc83 	bl	8003d74 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800346e:	f000 fc35 	bl	8003cdc <MX_TIM2_Init>
  MX_ADC1_Init();
 8003472:	f000 fb0f 	bl	8003a94 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003476:	f000 fb6d 	bl	8003b54 <MX_ADC2_Init>
  MX_SPI2_Init();
 800347a:	f000 fbf9 	bl	8003c70 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800347e:	f000 fca3 	bl	8003dc8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8003482:	f000 fbc7 	bl	8003c14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8003486:	f7fe ff31 	bl	80022ec <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 800348a:	2201      	movs	r2, #1
 800348c:	4994      	ldr	r1, [pc, #592]	; (80036e0 <main+0x28c>)
 800348e:	4895      	ldr	r0, [pc, #596]	; (80036e4 <main+0x290>)
 8003490:	f008 fc05 	bl	800bc9e <HAL_UART_Receive_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <main+0x4a>
    Error_Handler();
 800349a:	f000 ff27 	bl	80042ec <Error_Handler>
  }
#ifdef USE_WIFI
  // Start ESP UART receive via interrupt
  if (HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) != HAL_OK) {
 800349e:	2201      	movs	r2, #1
 80034a0:	4991      	ldr	r1, [pc, #580]	; (80036e8 <main+0x294>)
 80034a2:	4892      	ldr	r0, [pc, #584]	; (80036ec <main+0x298>)
 80034a4:	f008 fbfb 	bl	800bc9e <HAL_UART_Receive_IT>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <main+0x5e>
      Error_Handler();
 80034ae:	f000 ff1d 	bl	80042ec <Error_Handler>
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80034b2:	488f      	ldr	r0, [pc, #572]	; (80036f0 <main+0x29c>)
 80034b4:	f007 fed8 	bl	800b268 <HAL_TIM_Base_Start_IT>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <main+0x6e>
     Error_Handler();
 80034be:	f000 ff15 	bl	80042ec <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 80034c2:	f7ff ff73 	bl	80033ac <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 80034c6:	f7fe ff33 	bl	8002330 <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 80034ca:	f004 f8b1 	bl	8007630 <HAL_GetTick>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80034d4:	4a87      	ldr	r2, [pc, #540]	; (80036f4 <main+0x2a0>)
 80034d6:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 80034d8:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <main+0x2a4>)
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	2302      	movs	r3, #2
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	4a86      	ldr	r2, [pc, #536]	; (80036fc <main+0x2a8>)
 80034e4:	4986      	ldr	r1, [pc, #536]	; (8003700 <main+0x2ac>)
 80034e6:	4887      	ldr	r0, [pc, #540]	; (8003704 <main+0x2b0>)
 80034e8:	f00a f810 	bl	800d50c <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80034ec:	4885      	ldr	r0, [pc, #532]	; (8003704 <main+0x2b0>)
 80034ee:	f7fc fedf 	bl	80002b0 <strlen>
 80034f2:	4603      	mov	r3, r0
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fa:	4982      	ldr	r1, [pc, #520]	; (8003704 <main+0x2b0>)
 80034fc:	4879      	ldr	r0, [pc, #484]	; (80036e4 <main+0x290>)
 80034fe:	f008 fb3c 	bl	800bb7a <HAL_UART_Transmit>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <main+0xb8>
	  Error_Handler();
 8003508:	f000 fef0 	bl	80042ec <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 800350c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	4619      	mov	r1, r3
 8003514:	487c      	ldr	r0, [pc, #496]	; (8003708 <main+0x2b4>)
 8003516:	f001 fb2b 	bl	8004b70 <term_print>

#ifdef USE_WIFI
  // Enable ESP 01
  HAL_GPIO_WritePin (ESP01_EN_GPIO_Port, ESP01_EN_Pin, GPIO_PIN_SET);
 800351a:	2201      	movs	r2, #1
 800351c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003520:	487a      	ldr	r0, [pc, #488]	; (800370c <main+0x2b8>)
 8003522:	f005 fb85 	bl	8008c30 <HAL_GPIO_WritePin>
  // Perform reset
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_RESET);
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	4879      	ldr	r0, [pc, #484]	; (8003710 <main+0x2bc>)
 800352c:	f005 fb80 	bl	8008c30 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003530:	2064      	movs	r0, #100	; 0x64
 8003532:	f004 f889 	bl	8007648 <HAL_Delay>
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_SET);
 8003536:	2201      	movs	r2, #1
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	4875      	ldr	r0, [pc, #468]	; (8003710 <main+0x2bc>)
 800353c:	f005 fb78 	bl	8008c30 <HAL_GPIO_WritePin>
  }*/
#endif

  // eeprom example code

  if (!ee24_isConnected()) {
 8003540:	f7ff fef6 	bl	8003330 <ee24_isConnected>
 8003544:	4603      	mov	r3, r0
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <main+0x104>
	  term_print("Error: EEPROM not found\r\n");
 8003550:	4870      	ldr	r0, [pc, #448]	; (8003714 <main+0x2c0>)
 8003552:	f001 fb0d 	bl	8004b70 <term_print>
 8003556:	e003      	b.n	8003560 <main+0x10c>
  } else {
	  ee24_read_byte(0x00, (uint8_t *) eeprom_buf);
 8003558:	496f      	ldr	r1, [pc, #444]	; (8003718 <main+0x2c4>)
 800355a:	2000      	movs	r0, #0
 800355c:	f7ff fefa 	bl	8003354 <ee24_read_byte>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8003560:	f004 f866 	bl	8007630 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
 8003566:	3364      	adds	r3, #100	; 0x64
 8003568:	4a6c      	ldr	r2, [pc, #432]	; (800371c <main+0x2c8>)
 800356a:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 800356c:	f004 f860 	bl	8007630 <HAL_GetTick>
 8003570:	4603      	mov	r3, r0
 8003572:	33c8      	adds	r3, #200	; 0xc8
 8003574:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <main+0x2cc>)
 8003576:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 8003578:	f004 f85a 	bl	8007630 <HAL_GetTick>
 800357c:	4603      	mov	r3, r0
 800357e:	4a69      	ldr	r2, [pc, #420]	; (8003724 <main+0x2d0>)
 8003580:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 8003582:	4b68      	ldr	r3, [pc, #416]	; (8003724 <main+0x2d0>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b68      	ldr	r3, [pc, #416]	; (8003728 <main+0x2d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d21b      	bcs.n	80035c6 <main+0x172>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 800358e:	4b65      	ldr	r3, [pc, #404]	; (8003724 <main+0x2d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3364      	adds	r3, #100	; 0x64
 8003594:	4a61      	ldr	r2, [pc, #388]	; (800371c <main+0x2c8>)
 8003596:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <main+0x2d8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <main+0x15c>
 80035a0:	4b60      	ldr	r3, [pc, #384]	; (8003724 <main+0x2d0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80035a8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80035ac:	4a5f      	ldr	r2, [pc, #380]	; (800372c <main+0x2d8>)
 80035ae:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 80035b0:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <main+0x2d0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80035b8:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <main+0x2dc>)
 80035ba:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80035bc:	4b59      	ldr	r3, [pc, #356]	; (8003724 <main+0x2d0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	33c8      	adds	r3, #200	; 0xc8
 80035c2:	4a57      	ldr	r2, [pc, #348]	; (8003720 <main+0x2cc>)
 80035c4:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <main+0x2d0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a57      	ldr	r2, [pc, #348]	; (8003728 <main+0x2d4>)
 80035cc:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 80035ce:	4b55      	ldr	r3, [pc, #340]	; (8003724 <main+0x2d0>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <main+0x2cc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d316      	bcc.n	8003608 <main+0x1b4>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <main+0x2cc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	33c8      	adds	r3, #200	; 0xc8
 80035e0:	4a4f      	ldr	r2, [pc, #316]	; (8003720 <main+0x2cc>)
 80035e2:	6013      	str	r3, [r2, #0]
		calc_measurements();
 80035e4:	f7fe f948 	bl	8001878 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	4848      	ldr	r0, [pc, #288]	; (800370c <main+0x2b8>)
 80035ec:	f005 fb08 	bl	8008c00 <HAL_GPIO_ReadPin>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <main+0x1b4>
 80035f6:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <main+0x2e0>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <main+0x1b4>
			display_update_meter(display_screen);
 80035fe:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <main+0x2e0>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f8d2 	bl	80027ac <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 8003608:	4b46      	ldr	r3, [pc, #280]	; (8003724 <main+0x2d0>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b43      	ldr	r3, [pc, #268]	; (800371c <main+0x2c8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	f0c0 812a 	bcc.w	800386a <main+0x416>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8003616:	4b43      	ldr	r3, [pc, #268]	; (8003724 <main+0x2d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3364      	adds	r3, #100	; 0x64
 800361c:	4a3f      	ldr	r2, [pc, #252]	; (800371c <main+0x2c8>)
 800361e:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8003620:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <main+0x2a0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <main+0x1fc>
			if (now_ticks >= display_splash_ticks) {
 8003628:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <main+0x2d0>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <main+0x2a0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d30d      	bcc.n	8003650 <main+0x1fc>
				display_splash_ticks = 0;
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <main+0x2a0>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <main+0x2e0>)
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <main+0x2d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003648:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800364c:	4a37      	ldr	r2, [pc, #220]	; (800372c <main+0x2d8>)
 800364e:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <main+0x2e4>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d032      	beq.n	80036c0 <main+0x26c>
			if (esp_mode) {
 800365a:	4b38      	ldr	r3, [pc, #224]	; (800373c <main+0x2e8>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d025      	beq.n	80036ae <main+0x25a>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <main+0x2ec>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b7e      	cmp	r3, #126	; 0x7e
 800366a:	d106      	bne.n	800367a <main+0x226>
					esp_mode = 0;
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <main+0x2e8>)
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 8003672:	4834      	ldr	r0, [pc, #208]	; (8003744 <main+0x2f0>)
 8003674:	f001 fa7c 	bl	8004b70 <term_print>
 8003678:	e01c      	b.n	80036b4 <main+0x260>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 800367a:	4a31      	ldr	r2, [pc, #196]	; (8003740 <main+0x2ec>)
 800367c:	4932      	ldr	r1, [pc, #200]	; (8003748 <main+0x2f4>)
 800367e:	4821      	ldr	r0, [pc, #132]	; (8003704 <main+0x2b0>)
 8003680:	f009 ff44 	bl	800d50c <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8003684:	481f      	ldr	r0, [pc, #124]	; (8003704 <main+0x2b0>)
 8003686:	f7fc fe13 	bl	80002b0 <strlen>
 800368a:	4603      	mov	r3, r0
 800368c:	b29a      	uxth	r2, r3
 800368e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003692:	491c      	ldr	r1, [pc, #112]	; (8003704 <main+0x2b0>)
 8003694:	4815      	ldr	r0, [pc, #84]	; (80036ec <main+0x298>)
 8003696:	f008 fa70 	bl	800bb7a <HAL_UART_Transmit>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <main+0x250>
						Error_Handler();
 80036a0:	f000 fe24 	bl	80042ec <Error_Handler>
					}
					term_print("%s", msg_buf);
 80036a4:	4917      	ldr	r1, [pc, #92]	; (8003704 <main+0x2b0>)
 80036a6:	4829      	ldr	r0, [pc, #164]	; (800374c <main+0x2f8>)
 80036a8:	f001 fa62 	bl	8004b70 <term_print>
 80036ac:	e002      	b.n	80036b4 <main+0x260>
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 80036ae:	4824      	ldr	r0, [pc, #144]	; (8003740 <main+0x2ec>)
 80036b0:	f7fe fdfc 	bl	80022ac <CMD_Handler>
			}
			cli_rx_count = 0;
 80036b4:	4b26      	ldr	r3, [pc, #152]	; (8003750 <main+0x2fc>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <main+0x2e4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
		}

#ifdef USE_WIFI
		// Handle ESP UART communication
		if (esp_rx_count > 0) {		// do we have any RX data from the ESP?
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <main+0x300>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d04f      	beq.n	8003768 <main+0x314>
			if (esp_rx_count_last != esp_rx_count) { 	// has the RX count changed since last iteration?
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <main+0x304>)
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <main+0x300>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d043      	beq.n	800375c <main+0x308>
				esp_rx_count_last = esp_rx_count;		// yes -> update last count, RX not finished yet
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <main+0x300>)
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <main+0x304>)
 80036da:	801a      	strh	r2, [r3, #0]
 80036dc:	e044      	b.n	8003768 <main+0x314>
 80036de:	bf00      	nop
 80036e0:	2000241e 	.word	0x2000241e
 80036e4:	20002294 	.word	0x20002294
 80036e8:	200024a1 	.word	0x200024a1
 80036ec:	200022d8 	.word	0x200022d8
 80036f0:	2000224c 	.word	0x2000224c
 80036f4:	200080c8 	.word	0x200080c8
 80036f8:	080154f8 	.word	0x080154f8
 80036fc:	080154f4 	.word	0x080154f4
 8003700:	08011008 	.word	0x08011008
 8003704:	2000231c 	.word	0x2000231c
 8003708:	0801101c 	.word	0x0801101c
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	0801102c 	.word	0x0801102c
 8003718:	200024a4 	.word	0x200024a4
 800371c:	200080dc 	.word	0x200080dc
 8003720:	200080d8 	.word	0x200080d8
 8003724:	200080d0 	.word	0x200080d0
 8003728:	200080d4 	.word	0x200080d4
 800372c:	200080c4 	.word	0x200080c4
 8003730:	200080cc 	.word	0x200080cc
 8003734:	200024bc 	.word	0x200024bc
 8003738:	200024a0 	.word	0x200024a0
 800373c:	200024b9 	.word	0x200024b9
 8003740:	20002420 	.word	0x20002420
 8003744:	08011048 	.word	0x08011048
 8003748:	08011064 	.word	0x08011064
 800374c:	0801106c 	.word	0x0801106c
 8003750:	2000241c 	.word	0x2000241c
 8003754:	20008964 	.word	0x20008964
 8003758:	200024a2 	.word	0x200024a2
			} else {	// count hasn't changed since last iteration, we assume RX is completed
				wifi_handle_esp_rx_data();
 800375c:	f001 fc50 	bl	8005000 <wifi_handle_esp_rx_data>
				esp_rx_count_last = esp_rx_count;
 8003760:	4b7f      	ldr	r3, [pc, #508]	; (8003960 <main+0x50c>)
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	4b7f      	ldr	r3, [pc, #508]	; (8003964 <main+0x510>)
 8003766:	801a      	strh	r2, [r3, #0]
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 8003768:	4b7f      	ldr	r3, [pc, #508]	; (8003968 <main+0x514>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <main+0x326>
		  adc_restart = 0;
 8003770:	4b7d      	ldr	r3, [pc, #500]	; (8003968 <main+0x514>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8003776:	f7ff fe19 	bl	80033ac <start_adcs>
		}

		if (new_time_period) {
 800377a:	4b7c      	ldr	r3, [pc, #496]	; (800396c <main+0x518>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <main+0x340>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8003782:	4b7a      	ldr	r3, [pc, #488]	; (800396c <main+0x518>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fe3b 	bl	8003404 <adjust_TIM2_period>
		  new_time_period = 0;
 800378e:	4b77      	ldr	r3, [pc, #476]	; (800396c <main+0x518>)
 8003790:	2200      	movs	r2, #0
 8003792:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8003794:	4b76      	ldr	r3, [pc, #472]	; (8003970 <main+0x51c>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00f      	beq.n	80037be <main+0x36a>
			display_screen++;
 800379e:	4b75      	ldr	r3, [pc, #468]	; (8003974 <main+0x520>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b73      	ldr	r3, [pc, #460]	; (8003974 <main+0x520>)
 80037a8:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <main+0x520>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <main+0x364>
				display_screen = 1;
 80037b2:	4b70      	ldr	r3, [pc, #448]	; (8003974 <main+0x520>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 80037b8:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <main+0x51c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 80037be:	4b6e      	ldr	r3, [pc, #440]	; (8003978 <main+0x524>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <main+0x38a>
 80037c6:	4b6d      	ldr	r3, [pc, #436]	; (800397c <main+0x528>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b6b      	ldr	r3, [pc, #428]	; (8003978 <main+0x524>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d305      	bcc.n	80037de <main+0x38a>
			Displ_BackLight('0');
 80037d2:	2030      	movs	r0, #48	; 0x30
 80037d4:	f003 f9a6 	bl	8006b24 <Displ_BackLight>
	  		display_off_ticks = 0;
 80037d8:	4b67      	ldr	r3, [pc, #412]	; (8003978 <main+0x524>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 80037de:	4b68      	ldr	r3, [pc, #416]	; (8003980 <main+0x52c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02b      	beq.n	800383e <main+0x3ea>
			if (tft_display == 9) {
 80037e6:	4b66      	ldr	r3, [pc, #408]	; (8003980 <main+0x52c>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b09      	cmp	r3, #9
 80037ec:	d10e      	bne.n	800380c <main+0x3b8>
				term_print("Running TFT performance test ...\r\n");
 80037ee:	4865      	ldr	r0, [pc, #404]	; (8003984 <main+0x530>)
 80037f0:	f001 f9be 	bl	8004b70 <term_print>
				Displ_BackLight('1');
 80037f4:	2031      	movs	r0, #49	; 0x31
 80037f6:	f003 f995 	bl	8006b24 <Displ_BackLight>
				Displ_TestAll();
 80037fa:	f003 fe5d 	bl	80074b8 <Displ_TestAll>
				Displ_BackLight('0');
 80037fe:	2030      	movs	r0, #48	; 0x30
 8003800:	f003 f990 	bl	8006b24 <Displ_BackLight>
				term_print("....completed\r\n");
 8003804:	4860      	ldr	r0, [pc, #384]	; (8003988 <main+0x534>)
 8003806:	f001 f9b3 	bl	8004b70 <term_print>
 800380a:	e015      	b.n	8003838 <main+0x3e4>
			} else {
				if (tft_display == 1) {
 800380c:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <main+0x52c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d103      	bne.n	800381c <main+0x3c8>
					Displ_BackLight('0');
 8003814:	2030      	movs	r0, #48	; 0x30
 8003816:	f003 f985 	bl	8006b24 <Displ_BackLight>
 800381a:	e00d      	b.n	8003838 <main+0x3e4>
				} else {
					Displ_BackLight('1');
 800381c:	2031      	movs	r0, #49	; 0x31
 800381e:	f003 f981 	bl	8006b24 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003822:	f003 ff05 	bl	8007630 <HAL_GetTick>
 8003826:	4603      	mov	r3, r0
 8003828:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800382c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <main+0x524>)
 8003832:	6013      	str	r3, [r2, #0]
					display_update_mask();
 8003834:	f7fe fffe 	bl	8002834 <display_update_mask>
				}
			}
		tft_display = 0;
 8003838:	4b51      	ldr	r3, [pc, #324]	; (8003980 <main+0x52c>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 800383e:	4b53      	ldr	r3, [pc, #332]	; (800398c <main+0x538>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <main+0x416>
			display_activate = 0;
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <main+0x538>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 800384e:	f7fe fff1 	bl	8002834 <display_update_mask>
			Displ_BackLight('1');
 8003852:	2031      	movs	r0, #49	; 0x31
 8003854:	f003 f966 	bl	8006b24 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003858:	f003 feea 	bl	8007630 <HAL_GetTick>
 800385c:	4603      	mov	r3, r0
 800385e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003862:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003866:	4a44      	ldr	r2, [pc, #272]	; (8003978 <main+0x524>)
 8003868:	6013      	str	r3, [r2, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <main+0x53c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	dc0b      	bgt.n	800388a <main+0x436>
 8003872:	4b48      	ldr	r3, [pc, #288]	; (8003994 <main+0x540>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	dc07      	bgt.n	800388a <main+0x436>
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <main+0x544>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	dc03      	bgt.n	800388a <main+0x436>
 8003882:	4b46      	ldr	r3, [pc, #280]	; (800399c <main+0x548>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b01      	cmp	r3, #1
 8003888:	dd1b      	ble.n	80038c2 <main+0x46e>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <main+0x53c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	dd02      	ble.n	8003898 <main+0x444>
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <main+0x53c>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8003898:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <main+0x540>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	dd02      	ble.n	80038a6 <main+0x452>
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <main+0x540>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <main+0x544>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	dd02      	ble.n	80038b4 <main+0x460>
 80038ae:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <main+0x544>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <main+0x548>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	dd02      	ble.n	80038c2 <main+0x46e>
 80038bc:	4b37      	ldr	r3, [pc, #220]	; (800399c <main+0x548>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 80038c2:	4b33      	ldr	r3, [pc, #204]	; (8003990 <main+0x53c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	dd0e      	ble.n	80038e8 <main+0x494>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80038ca:	2100      	movs	r1, #0
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7fd fbb3 	bl	8001038 <calc_process_dma_buffer>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <main+0x48a>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 80038d8:	4831      	ldr	r0, [pc, #196]	; (80039a0 <main+0x54c>)
 80038da:	f001 f949 	bl	8004b70 <term_print>
			}
			adc1_dma_l_count--;
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <main+0x53c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <main+0x53c>)
 80038e6:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 80038e8:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <main+0x540>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	dd0e      	ble.n	800390e <main+0x4ba>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 80038f0:	2100      	movs	r1, #0
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7fd fba0 	bl	8001038 <calc_process_dma_buffer>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <main+0x4b0>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 80038fe:	4829      	ldr	r0, [pc, #164]	; (80039a4 <main+0x550>)
 8003900:	f001 f936 	bl	8004b70 <term_print>
			}
			adc1_dma_h_count--;
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <main+0x540>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3b01      	subs	r3, #1
 800390a:	4a22      	ldr	r2, [pc, #136]	; (8003994 <main+0x540>)
 800390c:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <main+0x544>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	dd0e      	ble.n	8003934 <main+0x4e0>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8003916:	2101      	movs	r1, #1
 8003918:	2000      	movs	r0, #0
 800391a:	f7fd fb8d 	bl	8001038 <calc_process_dma_buffer>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <main+0x4d6>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 8003924:	4820      	ldr	r0, [pc, #128]	; (80039a8 <main+0x554>)
 8003926:	f001 f923 	bl	8004b70 <term_print>
			}
			adc2_dma_l_count--;
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <main+0x544>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3b01      	subs	r3, #1
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <main+0x544>)
 8003932:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <main+0x548>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f77f ae1d 	ble.w	8003578 <main+0x124>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 800393e:	2101      	movs	r1, #1
 8003940:	2001      	movs	r0, #1
 8003942:	f7fd fb79 	bl	8001038 <calc_process_dma_buffer>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <main+0x4fe>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 800394c:	4817      	ldr	r0, [pc, #92]	; (80039ac <main+0x558>)
 800394e:	f001 f90f 	bl	8004b70 <term_print>
			}
			adc2_dma_h_count--;
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <main+0x548>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3b01      	subs	r3, #1
 8003958:	4a10      	ldr	r2, [pc, #64]	; (800399c <main+0x548>)
 800395a:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 800395c:	e60c      	b.n	8003578 <main+0x124>
 800395e:	bf00      	nop
 8003960:	20008964 	.word	0x20008964
 8003964:	200024a2 	.word	0x200024a2
 8003968:	200024b7 	.word	0x200024b7
 800396c:	200024ba 	.word	0x200024ba
 8003970:	200024b6 	.word	0x200024b6
 8003974:	200024bc 	.word	0x200024bc
 8003978:	200080c4 	.word	0x200080c4
 800397c:	200080d0 	.word	0x200080d0
 8003980:	200024b8 	.word	0x200024b8
 8003984:	08011070 	.word	0x08011070
 8003988:	08011094 	.word	0x08011094
 800398c:	200024b5 	.word	0x200024b5
 8003990:	200024c0 	.word	0x200024c0
 8003994:	200024c4 	.word	0x200024c4
 8003998:	200024c8 	.word	0x200024c8
 800399c:	200024cc 	.word	0x200024cc
 80039a0:	080110a4 	.word	0x080110a4
 80039a4:	080110cc 	.word	0x080110cc
 80039a8:	080110f4 	.word	0x080110f4
 80039ac:	0801111c 	.word	0x0801111c

080039b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b094      	sub	sp, #80	; 0x50
 80039b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	2234      	movs	r2, #52	; 0x34
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f00a f840 	bl	800da44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	2300      	movs	r3, #0
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <SystemClock_Config+0xdc>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <SystemClock_Config+0xdc>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6413      	str	r3, [r2, #64]	; 0x40
 80039e4:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <SystemClock_Config+0xdc>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f0:	2300      	movs	r3, #0
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <SystemClock_Config+0xe0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <SystemClock_Config+0xe0>)
 80039fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <SystemClock_Config+0xe0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a10:	2301      	movs	r3, #1
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a14:	2310      	movs	r3, #16
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a20:	2308      	movs	r3, #8
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003a24:	23b4      	movs	r3, #180	; 0xb4
 8003a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a30:	2302      	movs	r3, #2
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f006 fc4d 	bl	800a2d8 <HAL_RCC_OscConfig>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003a44:	f000 fc52 	bl	80042ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a48:	f006 f8ac 	bl	8009ba4 <HAL_PWREx_EnableOverDrive>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003a52:	f000 fc4b 	bl	80042ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a56:	230f      	movs	r3, #15
 8003a58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a6e:	f107 0308 	add.w	r3, r7, #8
 8003a72:	2105      	movs	r1, #5
 8003a74:	4618      	mov	r0, r3
 8003a76:	f006 f8e5 	bl	8009c44 <HAL_RCC_ClockConfig>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003a80:	f000 fc34 	bl	80042ec <Error_Handler>
  }
}
 8003a84:	bf00      	nop
 8003a86:	3750      	adds	r7, #80	; 0x50
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000

08003a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003aa6:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <MX_ADC1_Init+0xbc>)
 8003aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003aae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ac0:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ad8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003af8:	4814      	ldr	r0, [pc, #80]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003afa:	f003 fdc9 	bl	8007690 <HAL_ADC_Init>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003b04:	f000 fbf2 	bl	80042ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003b10:	2303      	movs	r3, #3
 8003b12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b14:	463b      	mov	r3, r7
 8003b16:	4619      	mov	r1, r3
 8003b18:	480c      	ldr	r0, [pc, #48]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003b1a:	f003 ff0d 	bl	8007938 <HAL_ADC_ConfigChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003b24:	f000 fbe2 	bl	80042ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003b28:	230a      	movs	r3, #10
 8003b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b30:	463b      	mov	r3, r7
 8003b32:	4619      	mov	r1, r3
 8003b34:	4805      	ldr	r0, [pc, #20]	; (8003b4c <MX_ADC1_Init+0xb8>)
 8003b36:	f003 feff 	bl	8007938 <HAL_ADC_ConfigChannel>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003b40:	f000 fbd4 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20001ff0 	.word	0x20001ff0
 8003b50:	40012000 	.word	0x40012000

08003b54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b68:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <MX_ADC2_Init+0xbc>)
 8003b6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b86:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003b98:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003bb8:	4814      	ldr	r0, [pc, #80]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003bba:	f003 fd69 	bl	8007690 <HAL_ADC_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8003bc4:	f000 fb92 	bl	80042ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003bda:	f003 fead 	bl	8007938 <HAL_ADC_ConfigChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003be4:	f000 fb82 	bl	80042ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003be8:	230b      	movs	r3, #11
 8003bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003bec:	2302      	movs	r3, #2
 8003bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4805      	ldr	r0, [pc, #20]	; (8003c0c <MX_ADC2_Init+0xb8>)
 8003bf6:	f003 fe9f 	bl	8007938 <HAL_ADC_ConfigChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8003c00:	f000 fb74 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20002038 	.word	0x20002038
 8003c10:	40012100 	.word	0x40012100

08003c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <MX_I2C1_Init+0x54>)
 8003c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c20:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <MX_I2C1_Init+0x58>)
 8003c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <MX_I2C1_Init+0x50>)
 8003c52:	f005 f839 	bl	8008cc8 <HAL_I2C_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c5c:	f000 fb46 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20002140 	.word	0x20002140
 8003c68:	40005400 	.word	0x40005400
 8003c6c:	00061a80 	.word	0x00061a80

08003c70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <MX_SPI2_Init+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003cc0:	4804      	ldr	r0, [pc, #16]	; (8003cd4 <MX_SPI2_Init+0x64>)
 8003cc2:	f006 fda7 	bl	800a814 <HAL_SPI_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ccc:	f000 fb0e 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20002194 	.word	0x20002194
 8003cd8:	40003800 	.word	0x40003800

08003cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d0e:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003d12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d20:	4813      	ldr	r0, [pc, #76]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d22:	f007 fa51 	bl	800b1c8 <HAL_TIM_Base_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d2c:	f000 fade 	bl	80042ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	480c      	ldr	r0, [pc, #48]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d3e:	f007 fc0b 	bl	800b558 <HAL_TIM_ConfigClockSource>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d48:	f000 fad0 	bl	80042ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d54:	463b      	mov	r3, r7
 8003d56:	4619      	mov	r1, r3
 8003d58:	4805      	ldr	r0, [pc, #20]	; (8003d70 <MX_TIM2_Init+0x94>)
 8003d5a:	f007 fe31 	bl	800b9c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003d64:	f000 fac2 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	2000224c 	.word	0x2000224c

08003d74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <MX_USART2_UART_Init+0x50>)
 8003d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003daa:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_USART2_UART_Init+0x4c>)
 8003dac:	f007 fe98 	bl	800bae0 <HAL_UART_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003db6:	f000 fa99 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20002294 	.word	0x20002294
 8003dc4:	40004400 	.word	0x40004400

08003dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <MX_USART3_UART_Init+0x50>)
 8003dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003dee:	220c      	movs	r2, #12
 8003df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <MX_USART3_UART_Init+0x4c>)
 8003e00:	f007 fe6e 	bl	800bae0 <HAL_UART_Init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003e0a:	f000 fa6f 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200022d8 	.word	0x200022d8
 8003e18:	40004800 	.word	0x40004800

08003e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <MX_DMA_Init+0x78>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <MX_DMA_Init+0x78>)
 8003e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <MX_DMA_Init+0x78>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <MX_DMA_Init+0x78>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <MX_DMA_Init+0x78>)
 8003e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <MX_DMA_Init+0x78>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	200f      	movs	r0, #15
 8003e60:	f004 f8f5 	bl	800804e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e64:	200f      	movs	r0, #15
 8003e66:	f004 f90e 	bl	8008086 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	2038      	movs	r0, #56	; 0x38
 8003e70:	f004 f8ed 	bl	800804e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e74:	2038      	movs	r0, #56	; 0x38
 8003e76:	f004 f906 	bl	8008086 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	203a      	movs	r0, #58	; 0x3a
 8003e80:	f004 f8e5 	bl	800804e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003e84:	203a      	movs	r0, #58	; 0x3a
 8003e86:	f004 f8fe 	bl	8008086 <HAL_NVIC_EnableIRQ>

}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	4b61      	ldr	r3, [pc, #388]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a60      	ldr	r2, [pc, #384]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003eb8:	f043 0304 	orr.w	r3, r3, #4
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a59      	ldr	r2, [pc, #356]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eda:	4b57      	ldr	r3, [pc, #348]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4a52      	ldr	r2, [pc, #328]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef6:	4b50      	ldr	r3, [pc, #320]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	4b4c      	ldr	r3, [pc, #304]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a4b      	ldr	r2, [pc, #300]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <MX_GPIO_Init+0x1a0>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8003f24:	4845      	ldr	r0, [pc, #276]	; (800403c <MX_GPIO_Init+0x1a4>)
 8003f26:	f004 fe83 	bl	8008c30 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	4844      	ldr	r0, [pc, #272]	; (8004040 <MX_GPIO_Init+0x1a8>)
 8003f30:	f004 fe7e 	bl	8008c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8003f34:	2201      	movs	r2, #1
 8003f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f3a:	4840      	ldr	r0, [pc, #256]	; (800403c <MX_GPIO_Init+0x1a4>)
 8003f3c:	f004 fe78 	bl	8008c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8003f40:	2200      	movs	r2, #0
 8003f42:	21c0      	movs	r1, #192	; 0xc0
 8003f44:	483f      	ldr	r0, [pc, #252]	; (8004044 <MX_GPIO_Init+0x1ac>)
 8003f46:	f004 fe73 	bl	8008c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4837      	ldr	r0, [pc, #220]	; (8004040 <MX_GPIO_Init+0x1a8>)
 8003f62:	f004 fcb9 	bl	80088d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8003f66:	f248 4360 	movw	r3, #33888	; 0x8460
 8003f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	482f      	ldr	r0, [pc, #188]	; (800403c <MX_GPIO_Init+0x1a4>)
 8003f80:	f004 fcaa 	bl	80088d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f90:	2302      	movs	r3, #2
 8003f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4828      	ldr	r0, [pc, #160]	; (800403c <MX_GPIO_Init+0x1a4>)
 8003f9c:	f004 fc9c 	bl	80088d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4822      	ldr	r0, [pc, #136]	; (8004040 <MX_GPIO_Init+0x1a8>)
 8003fb8:	f004 fc8e 	bl	80088d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4819      	ldr	r0, [pc, #100]	; (800403c <MX_GPIO_Init+0x1a4>)
 8003fd6:	f004 fc7f 	bl	80088d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003fda:	2310      	movs	r3, #16
 8003fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4619      	mov	r1, r3
 8003fee:	4815      	ldr	r0, [pc, #84]	; (8004044 <MX_GPIO_Init+0x1ac>)
 8003ff0:	f004 fc72 	bl	80088d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8003ff4:	23c0      	movs	r3, #192	; 0xc0
 8003ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004004:	f107 0314 	add.w	r3, r7, #20
 8004008:	4619      	mov	r1, r3
 800400a:	480e      	ldr	r0, [pc, #56]	; (8004044 <MX_GPIO_Init+0x1ac>)
 800400c:	f004 fc64 	bl	80088d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004010:	2200      	movs	r2, #0
 8004012:	2100      	movs	r1, #0
 8004014:	200a      	movs	r0, #10
 8004016:	f004 f81a 	bl	800804e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800401a:	200a      	movs	r0, #10
 800401c:	f004 f833 	bl	8008086 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	2028      	movs	r0, #40	; 0x28
 8004026:	f004 f812 	bl	800804e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800402a:	2028      	movs	r0, #40	; 0x28
 800402c:	f004 f82b 	bl	8008086 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004030:	bf00      	nop
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	40020000 	.word	0x40020000
 8004040:	40020800 	.word	0x40020800
 8004044:	40020400 	.word	0x40020400

08004048 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
	ee24_lock = 0;
//	my_printf("HAL_I2C_MemTxCpltCallback");

}
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	ee24_lock = 0;
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_I2C_MemRxCpltCallback+0x20>)
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
	ee24_read_done = true;
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_I2C_MemRxCpltCallback+0x24>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
//	my_printf("HAL_I2C_MemRxCpltCallback");
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	20001fee 	.word	0x20001fee
 800406c:	200024b4 	.word	0x200024b4

08004070 <HAL_GPIO_EXTI_Callback>:

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b10      	cmp	r3, #16
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_EXTI_Callback+0x18>
 8004080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004084:	d004      	beq.n	8004090 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8004086:	e007      	b.n	8004098 <HAL_GPIO_EXTI_Callback+0x28>
		display_activate = 1;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_GPIO_EXTI_Callback+0x34>)
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
		break;
 800408e:	e003      	b.n	8004098 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
		break;
 8004096:	bf00      	nop
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	200024b5 	.word	0x200024b5
 80040a8:	200024b6 	.word	0x200024b6

080040ac <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <HAL_ADC_ConvCpltCallback+0x34>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d105      	bne.n	80040c8 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_ADC_ConvCpltCallback+0x38>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <HAL_ADC_ConvCpltCallback+0x38>)
 80040c4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 80040c6:	e004      	b.n	80040d2 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	4a06      	ldr	r2, [pc, #24]	; (80040e8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80040d0:	6013      	str	r3, [r2, #0]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20001ff0 	.word	0x20001ff0
 80040e4:	200024c4 	.word	0x200024c4
 80040e8:	200024cc 	.word	0x200024cc

080040ec <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d105      	bne.n	8004108 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	4a08      	ldr	r2, [pc, #32]	; (8004124 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004104:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8004106:	e004      	b.n	8004112 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a06      	ldr	r2, [pc, #24]	; (8004128 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20001ff0 	.word	0x20001ff0
 8004124:	200024c0 	.word	0x200024c0
 8004128:	200024c8 	.word	0x200024c8

0800412c <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_ADC_ErrorCallback+0x94>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d102      	bne.n	8004142 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 800413c:	2301      	movs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e001      	b.n	8004146 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8004142:	2302      	movs	r3, #2
 8004144:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	2b04      	cmp	r3, #4
 800414c:	d82c      	bhi.n	80041a8 <HAL_ADC_ErrorCallback+0x7c>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_ADC_ErrorCallback+0x28>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004169 	.word	0x08004169
 8004158:	08004179 	.word	0x08004179
 800415c:	08004189 	.word	0x08004189
 8004160:	080041a9 	.word	0x080041a9
 8004164:	08004199 	.word	0x08004199
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	461a      	mov	r2, r3
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	4814      	ldr	r0, [pc, #80]	; (80041c4 <HAL_ADC_ErrorCallback+0x98>)
 8004172:	f000 fcfd 	bl	8004b70 <term_print>
		break;
 8004176:	e01e      	b.n	80041b6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	461a      	mov	r2, r3
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4811      	ldr	r0, [pc, #68]	; (80041c8 <HAL_ADC_ErrorCallback+0x9c>)
 8004182:	f000 fcf5 	bl	8004b70 <term_print>
		break;
 8004186:	e016      	b.n	80041b6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	461a      	mov	r2, r3
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <HAL_ADC_ErrorCallback+0xa0>)
 8004192:	f000 fced 	bl	8004b70 <term_print>
		break;
 8004196:	e00e      	b.n	80041b6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	461a      	mov	r2, r3
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	480b      	ldr	r0, [pc, #44]	; (80041d0 <HAL_ADC_ErrorCallback+0xa4>)
 80041a2:	f000 fce5 	bl	8004b70 <term_print>
		break;
 80041a6:	e006      	b.n	80041b6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	4619      	mov	r1, r3
 80041ae:	4809      	ldr	r0, [pc, #36]	; (80041d4 <HAL_ADC_ErrorCallback+0xa8>)
 80041b0:	f000 fcde 	bl	8004b70 <term_print>
	}
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20001ff0 	.word	0x20001ff0
 80041c4:	08011144 	.word	0x08011144
 80041c8:	08011160 	.word	0x08011160
 80041cc:	08011184 	.word	0x08011184
 80041d0:	080111a4 	.word	0x080111a4
 80041d4:	080111c0 	.word	0x080111c0

080041d8 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a37      	ldr	r2, [pc, #220]	; (80042c0 <HAL_UART_RxCpltCallback+0xe8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d13b      	bne.n	8004260 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 80041e8:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b7f      	cmp	r3, #127	; 0x7f
 80041f0:	d902      	bls.n	80041f8 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 80041f2:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80041f8:	2201      	movs	r2, #1
 80041fa:	4933      	ldr	r1, [pc, #204]	; (80042c8 <HAL_UART_RxCpltCallback+0xf0>)
 80041fc:	4830      	ldr	r0, [pc, #192]	; (80042c0 <HAL_UART_RxCpltCallback+0xe8>)
 80041fe:	f007 fd4e 	bl	800bc9e <HAL_UART_Receive_IT>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d156      	bne.n	80042b6 <HAL_UART_RxCpltCallback+0xde>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 8004208:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_UART_RxCpltCallback+0xf0>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b0a      	cmp	r3, #10
 8004210:	d012      	beq.n	8004238 <HAL_UART_RxCpltCallback+0x60>
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_UART_RxCpltCallback+0xf0>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b0d      	cmp	r3, #13
 800421a:	d00d      	beq.n	8004238 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	b291      	uxth	r1, r2
 8004226:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 8004228:	8011      	strh	r1, [r2, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <HAL_UART_RxCpltCallback+0xf0>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2d9      	uxtb	r1, r3
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_UART_RxCpltCallback+0xf4>)
 8004234:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8004236:	e03e      	b.n	80042b6 <HAL_UART_RxCpltCallback+0xde>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8004238:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d039      	beq.n	80042b6 <HAL_UART_RxCpltCallback+0xde>
					cli_rx_cmd_ready = 1;
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <HAL_UART_RxCpltCallback+0xf8>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	b291      	uxth	r1, r2
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_UART_RxCpltCallback+0xec>)
 8004254:	8011      	strh	r1, [r2, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <HAL_UART_RxCpltCallback+0xf4>)
 800425a:	2100      	movs	r1, #0
 800425c:	5499      	strb	r1, [r3, r2]
		return;
 800425e:	e02a      	b.n	80042b6 <HAL_UART_RxCpltCallback+0xde>
	}
#ifdef USE_WIFI
	// receive data from ESP
	if (huart == &ESP_UART) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_UART_RxCpltCallback+0xfc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d127      	bne.n	80042b8 <HAL_UART_RxCpltCallback+0xe0>
		if ( HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8004268:	2201      	movs	r2, #1
 800426a:	491b      	ldr	r1, [pc, #108]	; (80042d8 <HAL_UART_RxCpltCallback+0x100>)
 800426c:	4819      	ldr	r0, [pc, #100]	; (80042d4 <HAL_UART_RxCpltCallback+0xfc>)
 800426e:	f007 fd16 	bl	800bc9e <HAL_UART_Receive_IT>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d117      	bne.n	80042a8 <HAL_UART_RxCpltCallback+0xd0>
			if (esp_rx_count >= ESP_RX_BUF_SIZE) {		// prevent RX buffer overrun
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <HAL_UART_RxCpltCallback+0x104>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d305      	bcc.n	800428e <HAL_UART_RxCpltCallback+0xb6>
				esp_rx_count = 0;
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <HAL_UART_RxCpltCallback+0x104>)
 8004284:	2200      	movs	r2, #0
 8004286:	801a      	strh	r2, [r3, #0]
				esp_rx_buffer_overflow = true;				// set error flag
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_UART_RxCpltCallback+0x108>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
			}
			esp_rx_buf[esp_rx_count++] = esp_rx_byte;		// add received byte to RX buffer
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_UART_RxCpltCallback+0x104>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	b291      	uxth	r1, r2
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_UART_RxCpltCallback+0x104>)
 8004298:	8011      	strh	r1, [r2, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_UART_RxCpltCallback+0x100>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2d9      	uxtb	r1, r3
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_UART_RxCpltCallback+0x10c>)
 80042a4:	5499      	strb	r1, [r3, r2]
 80042a6:	e007      	b.n	80042b8 <HAL_UART_RxCpltCallback+0xe0>
		} else {	// this should never happen
			esp_rx_error_count++;
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <HAL_UART_RxCpltCallback+0x110>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_UART_RxCpltCallback+0x110>)
 80042b2:	801a      	strh	r2, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <HAL_UART_RxCpltCallback+0xe0>
		return;
 80042b6:	bf00      	nop
		}
	}
#endif
}
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20002294 	.word	0x20002294
 80042c4:	2000241c 	.word	0x2000241c
 80042c8:	2000241e 	.word	0x2000241e
 80042cc:	20002420 	.word	0x20002420
 80042d0:	200024a0 	.word	0x200024a0
 80042d4:	200022d8 	.word	0x200022d8
 80042d8:	200024a1 	.word	0x200024a1
 80042dc:	20008964 	.word	0x20008964
 80042e0:	20008968 	.word	0x20008968
 80042e4:	200084e4 	.word	0x200084e4
 80042e8:	20008966 	.word	0x20008966

080042ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <Error_Handler+0x10>)
 80042f2:	f009 fb27 	bl	800d944 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042f6:	b672      	cpsid	i
}
 80042f8:	bf00      	nop
    __disable_irq();
    while (1)
 80042fa:	e7fe      	b.n	80042fa <Error_Handler+0xe>
 80042fc:	080111e0 	.word	0x080111e0

08004300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_MspInit+0x4c>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	4a0f      	ldr	r2, [pc, #60]	; (800434c <HAL_MspInit+0x4c>)
 8004310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004314:	6453      	str	r3, [r2, #68]	; 0x44
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <HAL_MspInit+0x4c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_MspInit+0x4c>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <HAL_MspInit+0x4c>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_MspInit+0x4c>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800433e:	2007      	movs	r0, #7
 8004340:	f003 fe7a 	bl	8008038 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800

08004350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	; 0x38
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a79      	ldr	r2, [pc, #484]	; (8004554 <HAL_ADC_MspInit+0x204>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d173      	bne.n	800445a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	4b78      	ldr	r3, [pc, #480]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	4a77      	ldr	r2, [pc, #476]	; (8004558 <HAL_ADC_MspInit+0x208>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6453      	str	r3, [r2, #68]	; 0x44
 8004382:	4b75      	ldr	r3, [pc, #468]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	4b71      	ldr	r3, [pc, #452]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	4a70      	ldr	r2, [pc, #448]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6313      	str	r3, [r2, #48]	; 0x30
 800439e:	4b6e      	ldr	r3, [pc, #440]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	4b6a      	ldr	r3, [pc, #424]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	4a69      	ldr	r2, [pc, #420]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ba:	4b67      	ldr	r3, [pc, #412]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043c6:	2301      	movs	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043ca:	2303      	movs	r3, #3
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d6:	4619      	mov	r1, r3
 80043d8:	4860      	ldr	r0, [pc, #384]	; (800455c <HAL_ADC_MspInit+0x20c>)
 80043da:	f004 fa7d 	bl	80088d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043de:	2301      	movs	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043e2:	2303      	movs	r3, #3
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ee:	4619      	mov	r1, r3
 80043f0:	485b      	ldr	r0, [pc, #364]	; (8004560 <HAL_ADC_MspInit+0x210>)
 80043f2:	f004 fa71 	bl	80088d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80043f6:	4b5b      	ldr	r3, [pc, #364]	; (8004564 <HAL_ADC_MspInit+0x214>)
 80043f8:	4a5b      	ldr	r2, [pc, #364]	; (8004568 <HAL_ADC_MspInit+0x218>)
 80043fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_ADC_MspInit+0x214>)
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004402:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004404:	2200      	movs	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004408:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_ADC_MspInit+0x214>)
 800440a:	2200      	movs	r2, #0
 800440c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800440e:	4b55      	ldr	r3, [pc, #340]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004414:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004416:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004420:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004426:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800442c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800442e:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004430:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004434:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004436:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004438:	2200      	movs	r2, #0
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800443c:	4849      	ldr	r0, [pc, #292]	; (8004564 <HAL_ADC_MspInit+0x214>)
 800443e:	f003 fe3d 	bl	80080bc <HAL_DMA_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8004448:	f7ff ff50 	bl	80042ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a45      	ldr	r2, [pc, #276]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
 8004452:	4a44      	ldr	r2, [pc, #272]	; (8004564 <HAL_ADC_MspInit+0x214>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004458:	e078      	b.n	800454c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a43      	ldr	r2, [pc, #268]	; (800456c <HAL_ADC_MspInit+0x21c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d173      	bne.n	800454c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_ADC_MspInit+0x208>)
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_ADC_MspInit+0x208>)
 800446e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004472:	6453      	str	r3, [r2, #68]	; 0x44
 8004474:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	4a33      	ldr	r2, [pc, #204]	; (8004558 <HAL_ADC_MspInit+0x208>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	6313      	str	r3, [r2, #48]	; 0x30
 8004490:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_ADC_MspInit+0x208>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_ADC_MspInit+0x208>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80044b8:	2302      	movs	r3, #2
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044bc:	2303      	movs	r3, #3
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c8:	4619      	mov	r1, r3
 80044ca:	4824      	ldr	r0, [pc, #144]	; (800455c <HAL_ADC_MspInit+0x20c>)
 80044cc:	f004 fa04 	bl	80088d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80044d0:	2302      	movs	r3, #2
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044d4:	2303      	movs	r3, #3
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e0:	4619      	mov	r1, r3
 80044e2:	481f      	ldr	r0, [pc, #124]	; (8004560 <HAL_ADC_MspInit+0x210>)
 80044e4:	f004 f9f8 	bl	80088d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_ADC_MspInit+0x220>)
 80044ea:	4a22      	ldr	r2, [pc, #136]	; (8004574 <HAL_ADC_MspInit+0x224>)
 80044ec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_ADC_MspInit+0x220>)
 80044f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_ADC_MspInit+0x220>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <HAL_ADC_MspInit+0x220>)
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_ADC_MspInit+0x220>)
 8004504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004508:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_ADC_MspInit+0x220>)
 800450c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004510:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_ADC_MspInit+0x220>)
 8004514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004518:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_ADC_MspInit+0x220>)
 800451c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004520:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <HAL_ADC_MspInit+0x220>)
 8004524:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004528:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_ADC_MspInit+0x220>)
 800452c:	2200      	movs	r2, #0
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004530:	480f      	ldr	r0, [pc, #60]	; (8004570 <HAL_ADC_MspInit+0x220>)
 8004532:	f003 fdc3 	bl	80080bc <HAL_DMA_Init>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 800453c:	f7ff fed6 	bl	80042ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <HAL_ADC_MspInit+0x220>)
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_ADC_MspInit+0x220>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800454c:	bf00      	nop
 800454e:	3738      	adds	r7, #56	; 0x38
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40012000 	.word	0x40012000
 8004558:	40023800 	.word	0x40023800
 800455c:	40020800 	.word	0x40020800
 8004560:	40020000 	.word	0x40020000
 8004564:	20002080 	.word	0x20002080
 8004568:	40026410 	.word	0x40026410
 800456c:	40012100 	.word	0x40012100
 8004570:	200020e0 	.word	0x200020e0
 8004574:	40026440 	.word	0x40026440

08004578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_I2C_MspInit+0x84>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d12c      	bne.n	80045f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <HAL_I2C_MspInit+0x88>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_I2C_MspInit+0x88>)
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_I2C_MspInit+0x88>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045bc:	2312      	movs	r3, #18
 80045be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c4:	2303      	movs	r3, #3
 80045c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045c8:	2304      	movs	r3, #4
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4619      	mov	r1, r3
 80045d2:	480c      	ldr	r0, [pc, #48]	; (8004604 <HAL_I2C_MspInit+0x8c>)
 80045d4:	f004 f980 	bl	80088d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_I2C_MspInit+0x88>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	4a07      	ldr	r2, [pc, #28]	; (8004600 <HAL_I2C_MspInit+0x88>)
 80045e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e6:	6413      	str	r3, [r2, #64]	; 0x40
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_I2C_MspInit+0x88>)
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045f4:	bf00      	nop
 80045f6:	3728      	adds	r7, #40	; 0x28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40005400 	.word	0x40005400
 8004600:	40023800 	.word	0x40023800
 8004604:	40020400 	.word	0x40020400

08004608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a43      	ldr	r2, [pc, #268]	; (8004734 <HAL_SPI_MspInit+0x12c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d17f      	bne.n	800472a <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_SPI_MspInit+0x130>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a41      	ldr	r2, [pc, #260]	; (8004738 <HAL_SPI_MspInit+0x130>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
 800463a:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_SPI_MspInit+0x130>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_SPI_MspInit+0x130>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_SPI_MspInit+0x130>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b38      	ldr	r3, [pc, #224]	; (8004738 <HAL_SPI_MspInit+0x130>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_SPI_MspInit+0x130>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	4a33      	ldr	r2, [pc, #204]	; (8004738 <HAL_SPI_MspInit+0x130>)
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	6313      	str	r3, [r2, #48]	; 0x30
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_SPI_MspInit+0x130>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800467e:	230c      	movs	r3, #12
 8004680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004682:	2302      	movs	r3, #2
 8004684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800468a:	2303      	movs	r3, #3
 800468c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800468e:	2305      	movs	r3, #5
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	4619      	mov	r1, r3
 8004698:	4828      	ldr	r0, [pc, #160]	; (800473c <HAL_SPI_MspInit+0x134>)
 800469a:	f004 f91d 	bl	80088d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 800469e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a4:	2302      	movs	r3, #2
 80046a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ac:	2303      	movs	r3, #3
 80046ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046b0:	2305      	movs	r3, #5
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 80046b4:	f107 0314 	add.w	r3, r7, #20
 80046b8:	4619      	mov	r1, r3
 80046ba:	4821      	ldr	r0, [pc, #132]	; (8004740 <HAL_SPI_MspInit+0x138>)
 80046bc:	f004 f90c 	bl	80088d8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <HAL_SPI_MspInit+0x140>)
 80046c4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80046c6:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046cc:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046ce:	2240      	movs	r2, #64	; 0x40
 80046d0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046de:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046f2:	4b14      	ldr	r3, [pc, #80]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80046fe:	4811      	ldr	r0, [pc, #68]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 8004700:	f003 fcdc 	bl	80080bc <HAL_DMA_Init>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800470a:	f7ff fdef 	bl	80042ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 8004712:	649a      	str	r2, [r3, #72]	; 0x48
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <HAL_SPI_MspInit+0x13c>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2100      	movs	r1, #0
 800471e:	2024      	movs	r0, #36	; 0x24
 8004720:	f003 fc95 	bl	800804e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004724:	2024      	movs	r0, #36	; 0x24
 8004726:	f003 fcae 	bl	8008086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800472a:	bf00      	nop
 800472c:	3728      	adds	r7, #40	; 0x28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40003800 	.word	0x40003800
 8004738:	40023800 	.word	0x40023800
 800473c:	40020800 	.word	0x40020800
 8004740:	40020400 	.word	0x40020400
 8004744:	200021ec 	.word	0x200021ec
 8004748:	40026070 	.word	0x40026070

0800474c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d115      	bne.n	800478a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_TIM_Base_MspInit+0x48>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <HAL_TIM_Base_MspInit+0x48>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_TIM_Base_MspInit+0x48>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	201c      	movs	r0, #28
 8004780:	f003 fc65 	bl	800804e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004784:	201c      	movs	r0, #28
 8004786:	f003 fc7e 	bl	8008086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	f107 031c 	add.w	r3, r7, #28
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a3a      	ldr	r2, [pc, #232]	; (80048a0 <HAL_UART_MspInit+0x108>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d134      	bne.n	8004824 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a38      	ldr	r2, [pc, #224]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a31      	ldr	r2, [pc, #196]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80047f2:	230c      	movs	r3, #12
 80047f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f6:	2302      	movs	r3, #2
 80047f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fe:	2303      	movs	r3, #3
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004802:	2307      	movs	r3, #7
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004806:	f107 031c 	add.w	r3, r7, #28
 800480a:	4619      	mov	r1, r3
 800480c:	4826      	ldr	r0, [pc, #152]	; (80048a8 <HAL_UART_MspInit+0x110>)
 800480e:	f004 f863 	bl	80088d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	2026      	movs	r0, #38	; 0x26
 8004818:	f003 fc19 	bl	800804e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800481c:	2026      	movs	r0, #38	; 0x26
 800481e:	f003 fc32 	bl	8008086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004822:	e039      	b.n	8004898 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <HAL_UART_MspInit+0x114>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d134      	bne.n	8004898 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	6313      	str	r3, [r2, #48]	; 0x30
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_UART_MspInit+0x10c>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8004866:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800486a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	2302      	movs	r3, #2
 800486e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004874:	2303      	movs	r3, #3
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004878:	2307      	movs	r3, #7
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487c:	f107 031c 	add.w	r3, r7, #28
 8004880:	4619      	mov	r1, r3
 8004882:	480b      	ldr	r0, [pc, #44]	; (80048b0 <HAL_UART_MspInit+0x118>)
 8004884:	f004 f828 	bl	80088d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004888:	2200      	movs	r2, #0
 800488a:	2100      	movs	r1, #0
 800488c:	2027      	movs	r0, #39	; 0x27
 800488e:	f003 fbde 	bl	800804e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004892:	2027      	movs	r0, #39	; 0x27
 8004894:	f003 fbf7 	bl	8008086 <HAL_NVIC_EnableIRQ>
}
 8004898:	bf00      	nop
 800489a:	3730      	adds	r7, #48	; 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40004400 	.word	0x40004400
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020000 	.word	0x40020000
 80048ac:	40004800 	.word	0x40004800
 80048b0:	40020800 	.word	0x40020800

080048b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048b8:	e7fe      	b.n	80048b8 <NMI_Handler+0x4>

080048ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048be:	e7fe      	b.n	80048be <HardFault_Handler+0x4>

080048c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048c4:	e7fe      	b.n	80048c4 <MemManage_Handler+0x4>

080048c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048c6:	b480      	push	{r7}
 80048c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ca:	e7fe      	b.n	80048ca <BusFault_Handler+0x4>

080048cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048d0:	e7fe      	b.n	80048d0 <UsageFault_Handler+0x4>

080048d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004900:	f002 fe82 	bl	8007608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004904:	bf00      	nop
 8004906:	bd80      	pop	{r7, pc}

08004908 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800490c:	2010      	movs	r0, #16
 800490e:	f004 f9c3 	bl	8008c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <DMA1_Stream4_IRQHandler+0x10>)
 800491e:	f003 fd65 	bl	80083ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200021ec 	.word	0x200021ec

0800492c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004930:	4804      	ldr	r0, [pc, #16]	; (8004944 <TIM2_IRQHandler+0x18>)
 8004932:	f006 fd09 	bl	800b348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8004936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800493a:	4803      	ldr	r0, [pc, #12]	; (8004948 <TIM2_IRQHandler+0x1c>)
 800493c:	f004 f991 	bl	8008c62 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	2000224c 	.word	0x2000224c
 8004948:	40020000 	.word	0x40020000

0800494c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004950:	4802      	ldr	r0, [pc, #8]	; (800495c <SPI2_IRQHandler+0x10>)
 8004952:	f006 f9db 	bl	800ad0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20002194 	.word	0x20002194

08004960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <USART2_IRQHandler+0x10>)
 8004966:	f007 f9cb 	bl	800bd00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20002294 	.word	0x20002294

08004974 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004978:	4802      	ldr	r0, [pc, #8]	; (8004984 <USART3_IRQHandler+0x10>)
 800497a:	f007 f9c1 	bl	800bd00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200022d8 	.word	0x200022d8

08004988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800498c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004990:	f004 f982 	bl	8008c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	bd80      	pop	{r7, pc}

08004998 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <DMA2_Stream0_IRQHandler+0x10>)
 800499e:	f003 fd25 	bl	80083ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20002080 	.word	0x20002080

080049ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80049b0:	4802      	ldr	r0, [pc, #8]	; (80049bc <DMA2_Stream2_IRQHandler+0x10>)
 80049b2:	f003 fd1b 	bl	80083ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200020e0 	.word	0x200020e0

080049c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return 1;
 80049c4:	2301      	movs	r3, #1
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <_kill>:

int _kill(int pid, int sig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049da:	f009 f885 	bl	800dae8 <__errno>
 80049de:	4603      	mov	r3, r0
 80049e0:	2216      	movs	r2, #22
 80049e2:	601a      	str	r2, [r3, #0]
  return -1;
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <_exit>:

void _exit (int status)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ffe7 	bl	80049d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a02:	e7fe      	b.n	8004a02 <_exit+0x12>

08004a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e00a      	b.n	8004a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a16:	f3af 8000 	nop.w
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	60ba      	str	r2, [r7, #8]
 8004a22:	b2ca      	uxtb	r2, r1
 8004a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	dbf0      	blt.n	8004a16 <_read+0x12>
  }

  return len;
 8004a34:	687b      	ldr	r3, [r7, #4]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e009      	b.n	8004a64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	60ba      	str	r2, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	dbf1      	blt.n	8004a50 <_write+0x12>
  }
  return len;
 8004a6c:	687b      	ldr	r3, [r7, #4]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_close>:

int _close(int file)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <_isatty>:

int _isatty(int file)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ab6:	2301      	movs	r3, #1
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <_sbrk+0x5c>)
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <_sbrk+0x60>)
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <_sbrk+0x64>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <_sbrk+0x64>)
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <_sbrk+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <_sbrk+0x64>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b10:	f008 ffea 	bl	800dae8 <__errno>
 8004b14:	4603      	mov	r3, r0
 8004b16:	220c      	movs	r2, #12
 8004b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b1e:	e009      	b.n	8004b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <_sbrk+0x64>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <_sbrk+0x64>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <_sbrk+0x64>)
 8004b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20020000 	.word	0x20020000
 8004b40:	00000400 	.word	0x00000400
 8004b44:	200080e0 	.word	0x200080e0
 8004b48:	20009ad0 	.word	0x20009ad0

08004b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <SystemInit+0x20>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	4a05      	ldr	r2, [pc, #20]	; (8004b6c <SystemInit+0x20>)
 8004b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8004b70:	b40f      	push	{r0, r1, r2, r3}
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b86:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <term_print+0x44>)
 8004b88:	f008 fece 	bl	800d928 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8004b8c:	4809      	ldr	r0, [pc, #36]	; (8004bb4 <term_print+0x44>)
 8004b8e:	f7fb fb8f 	bl	80002b0 <strlen>
 8004b92:	4603      	mov	r3, r0
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b9a:	4906      	ldr	r1, [pc, #24]	; (8004bb4 <term_print+0x44>)
 8004b9c:	4806      	ldr	r0, [pc, #24]	; (8004bb8 <term_print+0x48>)
 8004b9e:	f006 ffec 	bl	800bb7a <HAL_UART_Transmit>
 8004ba2:	4603      	mov	r3, r0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bae:	b004      	add	sp, #16
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	200080e4 	.word	0x200080e4
 8004bb8:	20002294 	.word	0x20002294

08004bbc <term_print_hex>:
 * Print buffer content in hexadecimal format
 * parameter buf: buffer
 * parameter len: buffer length
 * parameter per_line: number of values to print per line (0=default)
 */
void term_print_hex(uint8_t* buf, unsigned len, uint8_t per_line) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]
	if (per_line < 4) { per_line = 16; }
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d801      	bhi.n	8004bd8 <term_print_hex+0x1c>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < len; i++) {
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e016      	b.n	8004c0c <term_print_hex+0x50>
		term_print("%02X ", buf[i]);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	4619      	mov	r1, r3
 8004be8:	480d      	ldr	r0, [pc, #52]	; (8004c20 <term_print_hex+0x64>)
 8004bea:	f7ff ffc1 	bl	8004b70 <term_print>
		if (++count > per_line) {
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
 8004bf4:	7dfa      	ldrb	r2, [r7, #23]
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d904      	bls.n	8004c06 <term_print_hex+0x4a>
			term_print("\r\n");
 8004bfc:	4809      	ldr	r0, [pc, #36]	; (8004c24 <term_print_hex+0x68>)
 8004bfe:	f7ff ffb7 	bl	8004b70 <term_print>
			count = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < len; i++) {
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d8e4      	bhi.n	8004bde <term_print_hex+0x22>
		}
	}
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	08011214 	.word	0x08011214
 8004c24:	0801121c 	.word	0x0801121c

08004c28 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d838      	bhi.n	8004cb2 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	4619      	mov	r1, r3
 8004c44:	481d      	ldr	r0, [pc, #116]	; (8004cbc <term_show_buffer+0x94>)
 8004c46:	f7ff ff93 	bl	8004b70 <term_print>
	term_print("%3d: ", 0);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	481c      	ldr	r0, [pc, #112]	; (8004cc0 <term_show_buffer+0x98>)
 8004c4e:	f7ff ff8f 	bl	8004b70 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e020      	b.n	8004c9a <term_show_buffer+0x72>
		if (count >= 20) {
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b13      	cmp	r3, #19
 8004c5c:	dd06      	ble.n	8004c6c <term_show_buffer+0x44>
			count =0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8004c62:	8a7b      	ldrh	r3, [r7, #18]
 8004c64:	4619      	mov	r1, r3
 8004c66:	4817      	ldr	r0, [pc, #92]	; (8004cc4 <term_show_buffer+0x9c>)
 8004c68:	f7ff ff82 	bl	8004b70 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <term_show_buffer+0xa0>)
 8004c70:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004c74:	fb03 f202 	mul.w	r2, r3, r2
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c80:	4619      	mov	r1, r3
 8004c82:	4812      	ldr	r0, [pc, #72]	; (8004ccc <term_show_buffer+0xa4>)
 8004c84:	f7ff ff74 	bl	8004b70 <term_print>
		count++; address++;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	8a7b      	ldrh	r3, [r7, #18]
 8004c90:	3301      	adds	r3, #1
 8004c92:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004ca0:	d3da      	bcc.n	8004c58 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004ca2:	480b      	ldr	r0, [pc, #44]	; (8004cd0 <term_show_buffer+0xa8>)
 8004ca4:	f7ff ff64 	bl	8004b70 <term_print>
	term_show_channel(bufnum);
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f888 	bl	8004dc0 <term_show_channel>
 8004cb0:	e000      	b.n	8004cb4 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004cb2:	bf00      	nop
}
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08011220 	.word	0x08011220
 8004cc0:	0801122c 	.word	0x0801122c
 8004cc4:	08011234 	.word	0x08011234
 8004cc8:	20007390 	.word	0x20007390
 8004ccc:	0801123c 	.word	0x0801123c
 8004cd0:	0801121c 	.word	0x0801121c
 8004cd4:	00000000 	.word	0x00000000

08004cd8 <term_show_measurements>:

void term_show_measurements() {
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b08e      	sub	sp, #56	; 0x38
 8004cde:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004ce0:	4b2f      	ldr	r3, [pc, #188]	; (8004da0 <term_show_measurements+0xc8>)
 8004ce2:	7b1b      	ldrb	r3, [r3, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d008      	beq.n	8004cfa <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004ce8:	f7fc fdc6 	bl	8001878 <calc_measurements>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 8004cf2:	482c      	ldr	r0, [pc, #176]	; (8004da4 <term_show_measurements+0xcc>)
 8004cf4:	f7ff ff3c 	bl	8004b70 <term_print>
			return;
 8004cf8:	e047      	b.n	8004d8a <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004cfa:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <term_show_measurements+0xd0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fc4c 	bl	800059c <__aeabi_f2d>
 8004d04:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d08:	4b28      	ldr	r3, [pc, #160]	; (8004dac <term_show_measurements+0xd4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fc45 	bl	800059c <__aeabi_f2d>
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <term_show_measurements+0xd8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fb fc3e 	bl	800059c <__aeabi_f2d>
 8004d20:	4680      	mov	r8, r0
 8004d22:	4689      	mov	r9, r1
 8004d24:	4b23      	ldr	r3, [pc, #140]	; (8004db4 <term_show_measurements+0xdc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fc37 	bl	800059c <__aeabi_f2d>
 8004d2e:	4682      	mov	sl, r0
 8004d30:	468b      	mov	fp, r1
 8004d32:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <term_show_measurements+0xe0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fb fc30 	bl	800059c <__aeabi_f2d>
 8004d3c:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265) );
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <term_show_measurements+0xe0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fc29 	bl	800059c <__aeabi_f2d>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	ec43 2b10 	vmov	d0, r2, r3
 8004d52:	f00b fb7b 	bl	801044c <acos>
 8004d56:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004d5a:	a30f      	add	r3, pc, #60	; (adr r3, 8004d98 <term_show_measurements+0xc0>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f7fb fc74 	bl	800064c <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d6c:	ed97 7b00 	vldr	d7, [r7]
 8004d70:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d74:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004d78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004d7c:	e9cd 4500 	strd	r4, r5, [sp]
 8004d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d84:	480d      	ldr	r0, [pc, #52]	; (8004dbc <term_show_measurements+0xe4>)
 8004d86:	f7ff fef3 	bl	8004b70 <term_print>
}
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d92:	bf00      	nop
 8004d94:	f3af 8000 	nop.w
 8004d98:	1af05a77 	.word	0x1af05a77
 8004d9c:	404ca5dc 	.word	0x404ca5dc
 8004da0:	20000244 	.word	0x20000244
 8004da4:	08011244 	.word	0x08011244
 8004da8:	200080b0 	.word	0x200080b0
 8004dac:	200080b4 	.word	0x200080b4
 8004db0:	200080b8 	.word	0x200080b8
 8004db4:	200080bc 	.word	0x200080bc
 8004db8:	200080c0 	.word	0x200080c0
 8004dbc:	08011258 	.word	0x08011258

08004dc0 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	f200 80ce 	bhi.w	8004f6e <term_show_channel+0x1ae>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8004dd2:	79fa      	ldrb	r2, [r7, #7]
 8004dd4:	4968      	ldr	r1, [pc, #416]	; (8004f78 <term_show_channel+0x1b8>)
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	330c      	adds	r3, #12
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d050      	beq.n	8004e8a <term_show_channel+0xca>
		term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min  );
 8004de8:	79fa      	ldrb	r2, [r7, #7]
 8004dea:	4963      	ldr	r1, [pc, #396]	; (8004f78 <term_show_channel+0x1b8>)
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461c      	mov	r4, r3
 8004dfa:	79fa      	ldrb	r2, [r7, #7]
 8004dfc:	495e      	ldr	r1, [pc, #376]	; (8004f78 <term_show_channel+0x1b8>)
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3302      	adds	r3, #2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	79fa      	ldrb	r2, [r7, #7]
 8004e10:	4959      	ldr	r1, [pc, #356]	; (8004f78 <term_show_channel+0x1b8>)
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	79fa      	ldrb	r2, [r7, #7]
 8004e24:	4954      	ldr	r1, [pc, #336]	; (8004f78 <term_show_channel+0x1b8>)
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	1ac3      	subs	r3, r0, r3
 8004e34:	462a      	mov	r2, r5
 8004e36:	4621      	mov	r1, r4
 8004e38:	4850      	ldr	r0, [pc, #320]	; (8004f7c <term_show_channel+0x1bc>)
 8004e3a:	f7ff fe99 	bl	8004b70 <term_print>
		term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004e3e:	79fa      	ldrb	r2, [r7, #7]
 8004e40:	494d      	ldr	r1, [pc, #308]	; (8004f78 <term_show_channel+0x1b8>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b21b      	sxth	r3, r3
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fd f809 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004e56:	4604      	mov	r4, r0
 8004e58:	79fa      	ldrb	r2, [r7, #7]
 8004e5a:	4947      	ldr	r1, [pc, #284]	; (8004f78 <term_show_channel+0x1b8>)
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	3302      	adds	r3, #2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fc fffb 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	4621      	mov	r1, r4
 8004e78:	4841      	ldr	r0, [pc, #260]	; (8004f80 <term_show_channel+0x1c0>)
 8004e7a:	f7ff fe79 	bl	8004b70 <term_print>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4840      	ldr	r0, [pc, #256]	; (8004f84 <term_show_channel+0x1c4>)
 8004e84:	f7ff fe74 	bl	8004b70 <term_print>
		return;
 8004e88:	e072      	b.n	8004f70 <term_show_channel+0x1b0>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8004e8a:	79fa      	ldrb	r2, [r7, #7]
 8004e8c:	493a      	ldr	r1, [pc, #232]	; (8004f78 <term_show_channel+0x1b8>)
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	3302      	adds	r3, #2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	79fa      	ldrb	r2, [r7, #7]
 8004ea0:	4935      	ldr	r1, [pc, #212]	; (8004f78 <term_show_channel+0x1b8>)
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	1ac3      	subs	r3, r0, r3
 8004eb0:	60fb      	str	r3, [r7, #12]
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4834      	ldr	r0, [pc, #208]	; (8004f88 <term_show_channel+0x1c8>)
 8004eb8:	f7ff fe5a 	bl	8004b70 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004ebc:	79fa      	ldrb	r2, [r7, #7]
 8004ebe:	492e      	ldr	r1, [pc, #184]	; (8004f78 <term_show_channel+0x1b8>)
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3310      	adds	r3, #16
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	b21b      	sxth	r3, r3
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fc ffc9 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fc ffc3 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004ee2:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	0fda      	lsrs	r2, r3, #31
 8004ee8:	4413      	add	r3, r2
 8004eea:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fc ffba 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	462a      	mov	r2, r5
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4824      	ldr	r0, [pc, #144]	; (8004f8c <term_show_channel+0x1cc>)
 8004efc:	f7ff fe38 	bl	8004b70 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	491d      	ldr	r1, [pc, #116]	; (8004f78 <term_show_channel+0x1b8>)
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b21b      	sxth	r3, r3
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc ffa8 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	79fa      	ldrb	r2, [r7, #7]
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <term_show_channel+0x1b8>)
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3302      	adds	r3, #2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fc ff9a 	bl	8001e68 <calc_adc_raw_to_mv_int>
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4811      	ldr	r0, [pc, #68]	; (8004f80 <term_show_channel+0x1c0>)
 8004f3c:	f7ff fe18 	bl	8004b70 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8004f40:	79fa      	ldrb	r2, [r7, #7]
 8004f42:	490d      	ldr	r1, [pc, #52]	; (8004f78 <term_show_channel+0x1b8>)
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3304      	adds	r3, #4
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	79fa      	ldrb	r2, [r7, #7]
 8004f54:	4808      	ldr	r0, [pc, #32]	; (8004f78 <term_show_channel+0x1b8>)
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4403      	add	r3, r0
 8004f60:	3308      	adds	r3, #8
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	480a      	ldr	r0, [pc, #40]	; (8004f90 <term_show_channel+0x1d0>)
 8004f68:	f7ff fe02 	bl	8004b70 <term_print>
 8004f6c:	e000      	b.n	8004f70 <term_show_channel+0x1b0>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004f6e:	bf00      	nop
}
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000244 	.word	0x20000244
 8004f7c:	08011288 	.word	0x08011288
 8004f80:	080112a0 	.word	0x080112a0
 8004f84:	080112b8 	.word	0x080112b8
 8004f88:	080112d8 	.word	0x080112d8
 8004f8c:	080112f4 	.word	0x080112f4
 8004f90:	08011318 	.word	0x08011318

08004f94 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d821      	bhi.n	8004fe8 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4811      	ldr	r0, [pc, #68]	; (8004ff0 <term_csv_buffer+0x5c>)
 8004faa:	f7ff fde1 	bl	8004b70 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e011      	b.n	8004fd8 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	490f      	ldr	r1, [pc, #60]	; (8004ff4 <term_csv_buffer+0x60>)
 8004fb8:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004fbc:	fb03 f202 	mul.w	r2, r3, r2
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	480a      	ldr	r0, [pc, #40]	; (8004ff8 <term_csv_buffer+0x64>)
 8004fce:	f7ff fdcf 	bl	8004b70 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004fde:	d3e9      	bcc.n	8004fb4 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8004fe0:	4806      	ldr	r0, [pc, #24]	; (8004ffc <term_csv_buffer+0x68>)
 8004fe2:	f7ff fdc5 	bl	8004b70 <term_print>
 8004fe6:	e000      	b.n	8004fea <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004fe8:	bf00      	nop
}
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	08011220 	.word	0x08011220
 8004ff4:	20005950 	.word	0x20005950
 8004ff8:	08011338 	.word	0x08011338
 8004ffc:	08011340 	.word	0x08011340

08005000 <wifi_handle_esp_rx_data>:
 * @brief  Handle data received from ESP-01
 * @note   The first lot of data received from the ESP after reset is received with a different
 * 	       baudrate (76800) and is therefore unreadable. This function ignores the first RX.
 *         The ESP is init sequence is initiated as soon as the first lot of data is received.
 */
void wifi_handle_esp_rx_data() {
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
	if (esp_rx_error_count) {
 8005004:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <wifi_handle_esp_rx_data+0x84>)
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <wifi_handle_esp_rx_data+0x2a>
		term_print("\r\nrx:%d error:%d\r\n", esp_rx_count, esp_rx_error_count);
 800500e:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <wifi_handle_esp_rx_data+0x88>)
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	4619      	mov	r1, r3
 8005016:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <wifi_handle_esp_rx_data+0x84>)
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	481b      	ldr	r0, [pc, #108]	; (800508c <wifi_handle_esp_rx_data+0x8c>)
 8005020:	f7ff fda6 	bl	8004b70 <term_print>
		esp_rx_error_count = 0;
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <wifi_handle_esp_rx_data+0x84>)
 8005026:	2200      	movs	r2, #0
 8005028:	801a      	strh	r2, [r3, #0]
	}
	if (esp_rx_buffer_overflow) {
 800502a:	4b19      	ldr	r3, [pc, #100]	; (8005090 <wifi_handle_esp_rx_data+0x90>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <wifi_handle_esp_rx_data+0x40>
		term_print("\r\nESP RX buffer overflow\r\n");
 8005034:	4817      	ldr	r0, [pc, #92]	; (8005094 <wifi_handle_esp_rx_data+0x94>)
 8005036:	f7ff fd9b 	bl	8004b70 <term_print>
		esp_rx_buffer_overflow = false;
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <wifi_handle_esp_rx_data+0x90>)
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
	}
	if (esp_init_step) {	// kick off first init sequence
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <wifi_handle_esp_rx_data+0x98>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <wifi_handle_esp_rx_data+0x4c>
		init_sequence();
 8005048:	f000 f82c 	bl	80050a4 <init_sequence>
	}
	if (!esp_first_rx) {
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <wifi_handle_esp_rx_data+0x9c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <wifi_handle_esp_rx_data+0x62>
		esp_first_rx = true;
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <wifi_handle_esp_rx_data+0x9c>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
	} else {
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
		//term_print("%s", esp_rx_buf);
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
	}
}
 8005060:	e00d      	b.n	800507e <wifi_handle_esp_rx_data+0x7e>
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <wifi_handle_esp_rx_data+0x88>)
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <wifi_handle_esp_rx_data+0xa0>)
 800506c:	2100      	movs	r1, #0
 800506e:	5499      	strb	r1, [r3, r2]
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <wifi_handle_esp_rx_data+0x88>)
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	4619      	mov	r1, r3
 8005078:	4809      	ldr	r0, [pc, #36]	; (80050a0 <wifi_handle_esp_rx_data+0xa0>)
 800507a:	f000 f9c7 	bl	800540c <evaluate_esp_response>
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20008966 	.word	0x20008966
 8005088:	20008964 	.word	0x20008964
 800508c:	08011348 	.word	0x08011348
 8005090:	20008968 	.word	0x20008968
 8005094:	0801135c 	.word	0x0801135c
 8005098:	20000034 	.word	0x20000034
 800509c:	20008969 	.word	0x20008969
 80050a0:	200084e4 	.word	0x200084e4

080050a4 <init_sequence>:
 * @brief  ESP-01 init sequence commands
 * @note   Each step decrements the init step number.
 *         Command sent = step--
 *         OK response = step--
 */
void init_sequence() {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
	switch (esp_init_step) {
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <init_sequence+0x70>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d017      	beq.n	80050e0 <init_sequence+0x3c>
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d12c      	bne.n	800510e <init_sequence+0x6a>
	case 4:
		sprintf((char*)esp_tx_buf, "ATE0\r\n");	// disable echo
 80050b4:	4918      	ldr	r1, [pc, #96]	; (8005118 <init_sequence+0x74>)
 80050b6:	4819      	ldr	r0, [pc, #100]	; (800511c <init_sequence+0x78>)
 80050b8:	f008 fa28 	bl	800d50c <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80050bc:	4817      	ldr	r0, [pc, #92]	; (800511c <init_sequence+0x78>)
 80050be:	f7fb f8f7 	bl	80002b0 <strlen>
 80050c2:	4603      	mov	r3, r0
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ca:	4914      	ldr	r1, [pc, #80]	; (800511c <init_sequence+0x78>)
 80050cc:	4814      	ldr	r0, [pc, #80]	; (8005120 <init_sequence+0x7c>)
 80050ce:	f006 fd54 	bl	800bb7a <HAL_UART_Transmit>
		esp_init_step --;
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <init_sequence+0x70>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <init_sequence+0x70>)
 80050dc:	701a      	strb	r2, [r3, #0]
		break;
 80050de:	e016      	b.n	800510e <init_sequence+0x6a>
	case 2:
		sprintf((char*)esp_tx_buf, "AT+CIPSERVER=1,%d\r\n", MODBUS_SERVER_PORT);	// start server
 80050e0:	2250      	movs	r2, #80	; 0x50
 80050e2:	4910      	ldr	r1, [pc, #64]	; (8005124 <init_sequence+0x80>)
 80050e4:	480d      	ldr	r0, [pc, #52]	; (800511c <init_sequence+0x78>)
 80050e6:	f008 fa11 	bl	800d50c <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80050ea:	480c      	ldr	r0, [pc, #48]	; (800511c <init_sequence+0x78>)
 80050ec:	f7fb f8e0 	bl	80002b0 <strlen>
 80050f0:	4603      	mov	r3, r0
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f8:	4908      	ldr	r1, [pc, #32]	; (800511c <init_sequence+0x78>)
 80050fa:	4809      	ldr	r0, [pc, #36]	; (8005120 <init_sequence+0x7c>)
 80050fc:	f006 fd3d 	bl	800bb7a <HAL_UART_Transmit>
		esp_init_step --;
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <init_sequence+0x70>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	3b01      	subs	r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <init_sequence+0x70>)
 800510a:	701a      	strb	r2, [r3, #0]
		break;
 800510c:	bf00      	nop
	default:
	}
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000034 	.word	0x20000034
 8005118:	08011388 	.word	0x08011388
 800511c:	200088e4 	.word	0x200088e4
 8005120:	200022d8 	.word	0x200022d8
 8005124:	08011390 	.word	0x08011390

08005128 <process_incoming_data>:
 * @brief   Process the data received from client connection
 * @param   data  buffer containing received data
 * @param   len   length of data buffer
 * @retval  0 on success
 */
int process_incoming_data(uint8_t *data, unsigned len) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	term_print_hex(data, len, 0);
 8005132:	2200      	movs	r2, #0
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fd40 	bl	8004bbc <term_print_hex>
	return 0;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <process_esp_response_ipd>:
 * @brief  Process the ESP response containing data from a connected client
 * @param  response  ESP receive buffer
 * @param  len       length of receive buffer
 * @retval 0 on successful
 */
int process_esp_response_ipd(char* response, int len) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	uint8_t *data_start;
	char* token;
	const char s[1] = {','};	// token separator
 8005152:	232c      	movs	r3, #44	; 0x2c
 8005154:	723b      	strb	r3, [r7, #8]
	int data_len = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

	token = strtok(response, s);	// +IPD
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f008 fc13 	bl	800d98c <strtok>
 8005166:	6138      	str	r0, [r7, #16]
	if (token == NULL) { return -1; }
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <process_esp_response_ipd+0x2c>
 800516e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005172:	e03a      	b.n	80051ea <process_esp_response_ipd+0xa2>
	token = strtok(response, s);	// connection number
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f008 fc06 	bl	800d98c <strtok>
 8005180:	6138      	str	r0, [r7, #16]
	if (token == NULL) { return -1; }
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <process_esp_response_ipd+0x46>
 8005188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800518c:	e02d      	b.n	80051ea <process_esp_response_ipd+0xa2>
	else { connection_id = token[0] - '0'; }
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	3b30      	subs	r3, #48	; 0x30
 8005194:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <process_esp_response_ipd+0xac>)
 8005196:	6013      	str	r3, [r2, #0]
	token = strtok(response, s);	// data length
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f008 fbf4 	bl	800d98c <strtok>
 80051a4:	6138      	str	r0, [r7, #16]
	if (token == NULL) { return -1; }
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <process_esp_response_ipd+0x6a>
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b0:	e01b      	b.n	80051ea <process_esp_response_ipd+0xa2>
	data_len = atoi(token);
 80051b2:	6938      	ldr	r0, [r7, #16]
 80051b4:	f007 fd0c 	bl	800cbd0 <atoi>
 80051b8:	6178      	str	r0, [r7, #20]
	if ((data_len <= 0) || (data_len >= len)) { return -1; }	// sanity check on data length
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dd03      	ble.n	80051c8 <process_esp_response_ipd+0x80>
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	db02      	blt.n	80051ce <process_esp_response_ipd+0x86>
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051cc:	e00d      	b.n	80051ea <process_esp_response_ipd+0xa2>
	//We have valid data
	data_start = (uint8_t*)token + strlen(token) + 1;			// data starts after end of token
 80051ce:	6938      	ldr	r0, [r7, #16]
 80051d0:	f7fb f86e 	bl	80002b0 <strlen>
 80051d4:	4603      	mov	r3, r0
 80051d6:	3301      	adds	r3, #1
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
	return (process_incoming_data(data_start, data_len));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4619      	mov	r1, r3
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ffa0 	bl	8005128 <process_incoming_data>
 80051e8:	4603      	mov	r3, r0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000038 	.word	0x20000038

080051f8 <process_esp_response_wifi>:
 * @brief   Process ESP responses starting with "WIFI ....."
 * @para    token      the token (word) which comes after "WIFI" in the ESP response
 * @para    token_num  the number if the token in the ESP response (WIFI=1)
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_wifi(char* token, uint8_t token_num) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
	int retval = -1;
 8005204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005208:	60fb      	str	r3, [r7, #12]
	if (strncmp(token, "CONNECTED", 9)) {	// "WIFI CONNECTED"
 800520a:	2209      	movs	r2, #9
 800520c:	4917      	ldr	r1, [pc, #92]	; (800526c <process_esp_response_wifi+0x74>)
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f008 fbaa 	bl	800d968 <strncmp>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <process_esp_response_wifi+0x2e>
		retval = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
		esp_wifi_connected = true;
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <process_esp_response_wifi+0x78>)
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e01d      	b.n	8005262 <process_esp_response_wifi+0x6a>
	} else if(strncmp(token, "GOT", 3)) {		// "WIFI GOT IP"
 8005226:	2203      	movs	r2, #3
 8005228:	4912      	ldr	r1, [pc, #72]	; (8005274 <process_esp_response_wifi+0x7c>)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f008 fb9c 	bl	800d968 <strncmp>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <process_esp_response_wifi+0x4a>
		retval = 1;		// ignore next token "IP"
 8005236:	2301      	movs	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
		esp_wifi_got_ip = true;
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <process_esp_response_wifi+0x80>)
 800523c:	2201      	movs	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e00f      	b.n	8005262 <process_esp_response_wifi+0x6a>
	} else if(strncmp(token, "DISCONNECTED", 12)) { // "WIFI DISCONNECTED"
 8005242:	220c      	movs	r2, #12
 8005244:	490d      	ldr	r1, [pc, #52]	; (800527c <process_esp_response_wifi+0x84>)
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f008 fb8e 	bl	800d968 <strncmp>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <process_esp_response_wifi+0x6a>
		retval = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
		esp_wifi_connected = false;
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <process_esp_response_wifi+0x78>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
		esp_wifi_got_ip = false;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <process_esp_response_wifi+0x80>)
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
	}
	return retval;
 8005262:	68fb      	ldr	r3, [r7, #12]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	080113a4 	.word	0x080113a4
 8005270:	2000896a 	.word	0x2000896a
 8005274:	080113b0 	.word	0x080113b0
 8005278:	2000896b 	.word	0x2000896b
 800527c:	080113b4 	.word	0x080113b4

08005280 <process_esp_response_status>:
 * @brief   Process ESP status response "STATUS:2"
 * @para    token      the token (word) which starts with the word "STATUS"
 * @para    token_num  the number if the token in the ESP response, normally 1 for STATUS
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_status(char* token, uint8_t token_num) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
	int retval = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
	if (strlen(token) != 8) { return -1; }
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fb f80d 	bl	80002b0 <strlen>
 8005296:	4603      	mov	r3, r0
 8005298:	2b08      	cmp	r3, #8
 800529a:	d002      	beq.n	80052a2 <process_esp_response_status+0x22>
 800529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a0:	e029      	b.n	80052f6 <process_esp_response_status+0x76>
	if (token[6] != ':') { return -1; }
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3306      	adds	r3, #6
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b3a      	cmp	r3, #58	; 0x3a
 80052aa:	d002      	beq.n	80052b2 <process_esp_response_status+0x32>
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b0:	e021      	b.n	80052f6 <process_esp_response_status+0x76>
	switch(token[7]) {
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3307      	adds	r3, #7
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b34      	cmp	r3, #52	; 0x34
 80052ba:	d011      	beq.n	80052e0 <process_esp_response_status+0x60>
 80052bc:	2b34      	cmp	r3, #52	; 0x34
 80052be:	dc16      	bgt.n	80052ee <process_esp_response_status+0x6e>
 80052c0:	2b32      	cmp	r3, #50	; 0x32
 80052c2:	d002      	beq.n	80052ca <process_esp_response_status+0x4a>
 80052c4:	2b33      	cmp	r3, #51	; 0x33
 80052c6:	d007      	beq.n	80052d8 <process_esp_response_status+0x58>
 80052c8:	e011      	b.n	80052ee <process_esp_response_status+0x6e>
	case '2':		// GOT IP
		esp_wifi_got_ip = true;
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <process_esp_response_status+0x80>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = true;
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <process_esp_response_status+0x84>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
		break;
 80052d6:	e00d      	b.n	80052f4 <process_esp_response_status+0x74>
	case '3':		// CONNECTED
		esp_wifi_connected = true;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <process_esp_response_status+0x84>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
		break;
 80052de:	e009      	b.n	80052f4 <process_esp_response_status+0x74>
	case '4':		// DISCONNECTED
		esp_wifi_got_ip = false;
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <process_esp_response_status+0x80>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = false;
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <process_esp_response_status+0x84>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
		break;
 80052ec:	e002      	b.n	80052f4 <process_esp_response_status+0x74>
	default:		// unknown status
		retval = -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f2:	60fb      	str	r3, [r7, #12]
	}
	return retval;
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	2000896b 	.word	0x2000896b
 8005304:	2000896a 	.word	0x2000896a

08005308 <process_esp_response_line>:
 * @brief   Process ESP response line"
 * @para    line     the response line
 * @para    line_num the line number
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_response_line(char* line, uint8_t line_num) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
	int retval = -1;
 8005314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005318:	61fb      	str	r3, [r7, #28]
	char* token;
	uint8_t token_count = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	75fb      	strb	r3, [r7, #23]
	const char s[1] = {' '};	// token separator
 800531e:	2320      	movs	r3, #32
 8005320:	733b      	strb	r3, [r7, #12]
	int ignore_tokens = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]

	//term_print( "<%s>\r\n", line);

	// evaluate all tokens
	token = strtok(line, s);
 8005326:	f107 030c 	add.w	r3, r7, #12
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f008 fb2d 	bl	800d98c <strtok>
 8005332:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 8005334:	e05a      	b.n	80053ec <process_esp_response_line+0xe4>
		token_count++;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	3301      	adds	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
		if (ignore_tokens > 0) {
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	dd03      	ble.n	800534a <process_esp_response_line+0x42>
			ignore_tokens--;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
			continue;
 8005348:	e050      	b.n	80053ec <process_esp_response_line+0xe4>
		}
		if (strncmp(token,"WIFI",4)==0) {
 800534a:	2204      	movs	r2, #4
 800534c:	492b      	ldr	r1, [pc, #172]	; (80053fc <process_esp_response_line+0xf4>)
 800534e:	69b8      	ldr	r0, [r7, #24]
 8005350:	f008 fb0a 	bl	800d968 <strncmp>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <process_esp_response_line+0x84>
			token = strtok(line, s);
 800535a:	f107 030c 	add.w	r3, r7, #12
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f008 fb13 	bl	800d98c <strtok>
 8005366:	61b8      	str	r0, [r7, #24]
			if (token != NULL) {
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d03e      	beq.n	80053ec <process_esp_response_line+0xe4>
				token_count++;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	3301      	adds	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]
				ignore_tokens = process_esp_response_wifi(token, token_count);
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	4619      	mov	r1, r3
 8005378:	69b8      	ldr	r0, [r7, #24]
 800537a:	f7ff ff3d 	bl	80051f8 <process_esp_response_wifi>
 800537e:	6138      	str	r0, [r7, #16]
				if (ignore_tokens >= 0) { retval = 0; }
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	db32      	blt.n	80053ec <process_esp_response_line+0xe4>
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e02f      	b.n	80053ec <process_esp_response_line+0xe4>
			}
		} else if (strncmp(token,"STATUS",6)==0){
 800538c:	2206      	movs	r2, #6
 800538e:	491c      	ldr	r1, [pc, #112]	; (8005400 <process_esp_response_line+0xf8>)
 8005390:	69b8      	ldr	r0, [r7, #24]
 8005392:	f008 fae9 	bl	800d968 <strncmp>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <process_esp_response_line+0xac>
			ignore_tokens = process_esp_response_status(token, token_count);
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	4619      	mov	r1, r3
 80053a0:	69b8      	ldr	r0, [r7, #24]
 80053a2:	f7ff ff6d 	bl	8005280 <process_esp_response_status>
 80053a6:	6138      	str	r0, [r7, #16]
			if (ignore_tokens >= 0) { retval = 1; }		// OK to follow
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db1e      	blt.n	80053ec <process_esp_response_line+0xe4>
 80053ae:	2301      	movs	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	e01b      	b.n	80053ec <process_esp_response_line+0xe4>
		} else if (strcmp(token,"OK")==0) {
 80053b4:	4913      	ldr	r1, [pc, #76]	; (8005404 <process_esp_response_line+0xfc>)
 80053b6:	69b8      	ldr	r0, [r7, #24]
 80053b8:	f7fa ff82 	bl	80002c0 <strcmp>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d114      	bne.n	80053ec <process_esp_response_line+0xe4>
			if (esp_init_step) {
 80053c2:	4b11      	ldr	r3, [pc, #68]	; (8005408 <process_esp_response_line+0x100>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <process_esp_response_line+0xda>
				if (--esp_init_step) {
 80053ca:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <process_esp_response_line+0x100>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <process_esp_response_line+0x100>)
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <process_esp_response_line+0x100>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <process_esp_response_line+0xda>
					init_sequence();
 80053de:	f7ff fe61 	bl	80050a4 <init_sequence>
				}
			}
			if (token_count == 1) {
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <process_esp_response_line+0xe4>
				retval = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
	while(token != NULL) {
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1a1      	bne.n	8005336 <process_esp_response_line+0x2e>
			}
		}
	}
	return retval;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	080113c4 	.word	0x080113c4
 8005400:	080113cc 	.word	0x080113cc
 8005404:	080113d4 	.word	0x080113d4
 8005408:	20000034 	.word	0x20000034

0800540c <evaluate_esp_response>:

void evaluate_esp_response(char* response, int len) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	char *line;
	uint8_t line_count = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	74fb      	strb	r3, [r7, #19]
	const char s[2] = {0x0A, 0x0D};		// line separator
 800541a:	f640 530a 	movw	r3, #3338	; 0xd0a
 800541e:	813b      	strh	r3, [r7, #8]
	int ignore_lines = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]

	//term_print("%d bytes: %s", strlen(response), response);

	// did we receive data from a connected client?
	if (strncmp(response,"+IPD",4)==0) {
 8005424:	2204      	movs	r2, #4
 8005426:	4920      	ldr	r1, [pc, #128]	; (80054a8 <evaluate_esp_response+0x9c>)
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f008 fa9d 	bl	800d968 <strncmp>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <evaluate_esp_response+0x32>
		process_esp_response_ipd(response, len);
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fe86 	bl	8005148 <process_esp_response_ipd>
 800543c:	e031      	b.n	80054a2 <evaluate_esp_response+0x96>
	}

	// ESP-01 response
	// process each line
	// get first line
	line = strtok(response, s);
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f008 faa1 	bl	800d98c <strtok>
 800544a:	6178      	str	r0, [r7, #20]

	// iterate through remaining lines
	while( line != NULL ) {
 800544c:	e026      	b.n	800549c <evaluate_esp_response+0x90>
		line_count++;
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	3301      	adds	r3, #1
 8005452:	74fb      	strb	r3, [r7, #19]
		if (ignore_lines > 0) {
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	dd03      	ble.n	8005462 <evaluate_esp_response+0x56>
			ignore_lines--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3b01      	subs	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
			continue;
 8005460:	e01c      	b.n	800549c <evaluate_esp_response+0x90>
		}
		ignore_lines = process_esp_response_line(line, line_count);
 8005462:	7cfb      	ldrb	r3, [r7, #19]
 8005464:	4619      	mov	r1, r3
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7ff ff4e 	bl	8005308 <process_esp_response_line>
 800546c:	60f8      	str	r0, [r7, #12]
		if (ignore_lines < 0) {
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	da06      	bge.n	8005482 <evaluate_esp_response+0x76>
			term_print( "Error[%d] <<%s>>\r\n", line_count, line);
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4619      	mov	r1, r3
 800547a:	480c      	ldr	r0, [pc, #48]	; (80054ac <evaluate_esp_response+0xa0>)
 800547c:	f7ff fb78 	bl	8004b70 <term_print>
 8005480:	e005      	b.n	800548e <evaluate_esp_response+0x82>
		} else {
			term_print( "%d:<<%s>>\r\n", line_count, line);
 8005482:	7cfb      	ldrb	r3, [r7, #19]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4619      	mov	r1, r3
 8005488:	4809      	ldr	r0, [pc, #36]	; (80054b0 <evaluate_esp_response+0xa4>)
 800548a:	f7ff fb71 	bl	8004b70 <term_print>
		}
		line = strtok(NULL, s);
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	4619      	mov	r1, r3
 8005494:	2000      	movs	r0, #0
 8005496:	f008 fa79 	bl	800d98c <strtok>
 800549a:	6178      	str	r0, [r7, #20]
	while( line != NULL ) {
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1d5      	bne.n	800544e <evaluate_esp_response+0x42>
	}

}
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	080113d8 	.word	0x080113d8
 80054ac:	080113e0 	.word	0x080113e0
 80054b0:	080113f4 	.word	0x080113f4

080054b4 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 80054b8:	2180      	movs	r1, #128	; 0x80
 80054ba:	480f      	ldr	r0, [pc, #60]	; (80054f8 <Displ_Select+0x44>)
 80054bc:	f003 fba0 	bl	8008c00 <HAL_GPIO_ReadPin>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d015      	beq.n	80054f2 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 80054c6:	2201      	movs	r2, #1
 80054c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054cc:	480b      	ldr	r0, [pc, #44]	; (80054fc <Displ_Select+0x48>)
 80054ce:	f003 fbaf 	bl	8008c30 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <Displ_Select+0x4c>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	490a      	ldr	r1, [pc, #40]	; (8005500 <Displ_Select+0x4c>)
 80054d8:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80054dc:	4013      	ands	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <Displ_Select+0x4c>)
 80054e2:	4a07      	ldr	r2, [pc, #28]	; (8005500 <Displ_Select+0x4c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <Displ_Select+0x44>)
 80054ee:	f003 fb9f 	bl	8008c30 <HAL_GPIO_WritePin>
		}
	}
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40020800 	.word	0x40020800
 80054fc:	40020000 	.word	0x40020000
 8005500:	40003800 	.word	0x40003800

08005504 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6039      	str	r1, [r7, #0]
 800550c:	4611      	mov	r1, r2
 800550e:	461a      	mov	r2, r3
 8005510:	4603      	mov	r3, r0
 8005512:	71fb      	strb	r3, [r7, #7]
 8005514:	460b      	mov	r3, r1
 8005516:	80bb      	strh	r3, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 800551c:	bf00      	nop
 800551e:	4b22      	ldr	r3, [pc, #136]	; (80055a8 <Displ_Transmit+0xa4>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0fa      	beq.n	800551e <Displ_Transmit+0x1a>

	Displ_Select();
 8005528:	f7ff ffc4 	bl	80054b4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	461a      	mov	r2, r3
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	481e      	ldr	r0, [pc, #120]	; (80055ac <Displ_Transmit+0xa8>)
 8005534:	f003 fb7c 	bl	8008c30 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8005538:	79bb      	ldrb	r3, [r7, #6]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d016      	beq.n	800556c <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 800553e:	88bb      	ldrh	r3, [r7, #4]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	4413      	add	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e00b      	b.n	8005564 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	ba5b      	rev16	r3, r3
 8005556:	60bb      	str	r3, [r7, #8]
  return result;
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	3304      	adds	r3, #4
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d3ef      	bcc.n	800554c <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 800556c:	88bb      	ldrh	r3, [r7, #4]
 800556e:	2b13      	cmp	r3, #19
 8005570:	d80d      	bhi.n	800558e <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <Displ_Transmit+0xa4>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8005578:	88ba      	ldrh	r2, [r7, #4]
 800557a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	480b      	ldr	r0, [pc, #44]	; (80055b0 <Displ_Transmit+0xac>)
 8005582:	f005 f9d0 	bl	800a926 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <Displ_Transmit+0xa4>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 800558c:	e008      	b.n	80055a0 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <Displ_Transmit+0xa4>)
 8005590:	2200      	movs	r2, #0
 8005592:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8005594:	88bb      	ldrh	r3, [r7, #4]
 8005596:	461a      	mov	r2, r3
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	4805      	ldr	r0, [pc, #20]	; (80055b0 <Displ_Transmit+0xac>)
 800559c:	f005 fb00 	bl	800aba0 <HAL_SPI_Transmit_DMA>
	}
 80055a0:	bf00      	nop
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2000003c 	.word	0x2000003c
 80055ac:	40020000 	.word	0x40020000
 80055b0:	20002194 	.word	0x20002194

080055b4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80055be:	1df9      	adds	r1, r7, #7
 80055c0:	2300      	movs	r3, #0
 80055c2:	2201      	movs	r2, #1
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff ff9d 	bl	8005504 <Displ_Transmit>
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7ff ff88 	bl	8005504 <Displ_Transmit>
 80055f4:	e000      	b.n	80055f8 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80055f6:	bf00      	nop
}
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
	Displ_Select();
 8005604:	f7ff ff56 	bl	80054b4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8005608:	2200      	movs	r2, #0
 800560a:	2140      	movs	r1, #64	; 0x40
 800560c:	4819      	ldr	r0, [pc, #100]	; (8005674 <ILI9XXX_Init+0x74>)
 800560e:	f003 fb0f 	bl	8008c30 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005612:	2001      	movs	r0, #1
 8005614:	f002 f818 	bl	8007648 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005618:	2201      	movs	r2, #1
 800561a:	2140      	movs	r1, #64	; 0x40
 800561c:	4815      	ldr	r0, [pc, #84]	; (8005674 <ILI9XXX_Init+0x74>)
 800561e:	f003 fb07 	bl	8008c30 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8005622:	20a5      	movs	r0, #165	; 0xa5
 8005624:	f002 f810 	bl	8007648 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005628:	203a      	movs	r0, #58	; 0x3a
 800562a:	f7ff ffc3 	bl	80055b4 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 800562e:	2200      	movs	r2, #0
 8005630:	2101      	movs	r1, #1
 8005632:	4811      	ldr	r0, [pc, #68]	; (8005678 <ILI9XXX_Init+0x78>)
 8005634:	f7ff ffcd 	bl	80055d2 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005638:	20b0      	movs	r0, #176	; 0xb0
 800563a:	f7ff ffbb 	bl	80055b4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800563e:	2200      	movs	r2, #0
 8005640:	2101      	movs	r1, #1
 8005642:	480e      	ldr	r0, [pc, #56]	; (800567c <ILI9XXX_Init+0x7c>)
 8005644:	f7ff ffc5 	bl	80055d2 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005648:	20b0      	movs	r0, #176	; 0xb0
 800564a:	f7ff ffb3 	bl	80055b4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800564e:	2200      	movs	r2, #0
 8005650:	2101      	movs	r1, #1
 8005652:	480a      	ldr	r0, [pc, #40]	; (800567c <ILI9XXX_Init+0x7c>)
 8005654:	f7ff ffbd 	bl	80055d2 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005658:	2011      	movs	r0, #17
 800565a:	f7ff ffab 	bl	80055b4 <Displ_WriteCommand>
	HAL_Delay(120);
 800565e:	2078      	movs	r0, #120	; 0x78
 8005660:	f001 fff2 	bl	8007648 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8005664:	2029      	movs	r0, #41	; 0x29
 8005666:	f7ff ffa5 	bl	80055b4 <Displ_WriteCommand>
	HAL_Delay(5);
 800566a:	2005      	movs	r0, #5
 800566c:	f001 ffec 	bl	8007648 <HAL_Delay>

}
 8005670:	bf00      	nop
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40020400 	.word	0x40020400
 8005678:	08011400 	.word	0x08011400
 800567c:	08011404 	.word	0x08011404

08005680 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	461a      	mov	r2, r3
 800568e:	4623      	mov	r3, r4
 8005690:	80fb      	strh	r3, [r7, #6]
 8005692:	4603      	mov	r3, r0
 8005694:	80bb      	strh	r3, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	807b      	strh	r3, [r7, #2]
 800569a:	4613      	mov	r3, r2
 800569c:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	061a      	lsls	r2, r3, #24
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056aa:	431a      	orrs	r2, r3
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	0a12      	lsrs	r2, r2, #8
 80056b8:	b292      	uxth	r2, r2
 80056ba:	431a      	orrs	r2, r3
 80056bc:	4b14      	ldr	r3, [pc, #80]	; (8005710 <Displ_SetAddressWindow+0x90>)
 80056be:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80056c0:	202a      	movs	r0, #42	; 0x2a
 80056c2:	f7ff ff77 	bl	80055b4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80056c6:	2200      	movs	r2, #0
 80056c8:	2104      	movs	r1, #4
 80056ca:	4811      	ldr	r0, [pc, #68]	; (8005710 <Displ_SetAddressWindow+0x90>)
 80056cc:	f7ff ff81 	bl	80055d2 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80056d0:	883b      	ldrh	r3, [r7, #0]
 80056d2:	061a      	lsls	r2, r3, #24
 80056d4:	883b      	ldrh	r3, [r7, #0]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056dc:	431a      	orrs	r2, r3
 80056de:	88bb      	ldrh	r3, [r7, #4]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	4313      	orrs	r3, r2
 80056e6:	88ba      	ldrh	r2, [r7, #4]
 80056e8:	0a12      	lsrs	r2, r2, #8
 80056ea:	b292      	uxth	r2, r2
 80056ec:	431a      	orrs	r2, r3
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <Displ_SetAddressWindow+0x90>)
 80056f0:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80056f2:	202b      	movs	r0, #43	; 0x2b
 80056f4:	f7ff ff5e 	bl	80055b4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80056f8:	2200      	movs	r2, #0
 80056fa:	2104      	movs	r1, #4
 80056fc:	4804      	ldr	r0, [pc, #16]	; (8005710 <Displ_SetAddressWindow+0x90>)
 80056fe:	f7ff ff68 	bl	80055d2 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8005702:	202c      	movs	r0, #44	; 0x2c
 8005704:	f7ff ff56 	bl	80055b4 <Displ_WriteCommand>
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bd90      	pop	{r4, r7, pc}
 8005710:	20009974 	.word	0x20009974

08005714 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 800571e:	2201      	movs	r2, #1
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	4809      	ldr	r0, [pc, #36]	; (8005748 <Displ_Init+0x34>)
 8005724:	f003 fa84 	bl	8008c30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8005728:	2201      	movs	r2, #1
 800572a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800572e:	4807      	ldr	r0, [pc, #28]	; (800574c <Displ_Init+0x38>)
 8005730:	f003 fa7e 	bl	8008c30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8005734:	f7ff ff64 	bl	8005600 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f808 	bl	8005750 <Displ_Orientation>
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40020800 	.word	0x40020800
 800574c:	40020000 	.word	0x40020000

08005750 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	2b03      	cmp	r3, #3
 800575e:	d837      	bhi.n	80057d0 <Displ_Orientation+0x80>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <Displ_Orientation+0x18>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	08005779 	.word	0x08005779
 800576c:	0800578f 	.word	0x0800578f
 8005770:	080057a5 	.word	0x080057a5
 8005774:	080057bb 	.word	0x080057bb
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <Displ_Orientation+0xa0>)
 800577a:	2288      	movs	r2, #136	; 0x88
 800577c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <Displ_Orientation+0xa4>)
 8005780:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005784:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8005786:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <Displ_Orientation+0xa8>)
 8005788:	22f0      	movs	r2, #240	; 0xf0
 800578a:	801a      	strh	r2, [r3, #0]
			break;
 800578c:	e020      	b.n	80057d0 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 800578e:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <Displ_Orientation+0xa0>)
 8005790:	22e8      	movs	r2, #232	; 0xe8
 8005792:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <Displ_Orientation+0xa4>)
 8005796:	22f0      	movs	r2, #240	; 0xf0
 8005798:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 800579a:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <Displ_Orientation+0xa8>)
 800579c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80057a0:	801a      	strh	r2, [r3, #0]
			break;
 80057a2:	e015      	b.n	80057d0 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 80057a4:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <Displ_Orientation+0xa0>)
 80057a6:	2248      	movs	r2, #72	; 0x48
 80057a8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <Displ_Orientation+0xa4>)
 80057ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80057b0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <Displ_Orientation+0xa8>)
 80057b4:	22f0      	movs	r2, #240	; 0xf0
 80057b6:	801a      	strh	r2, [r3, #0]
			break;
 80057b8:	e00a      	b.n	80057d0 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <Displ_Orientation+0xa0>)
 80057bc:	2228      	movs	r2, #40	; 0x28
 80057be:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <Displ_Orientation+0xa4>)
 80057c2:	22f0      	movs	r2, #240	; 0xf0
 80057c4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <Displ_Orientation+0xa8>)
 80057c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80057cc:	801a      	strh	r2, [r3, #0]
			break;
 80057ce:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80057d0:	2036      	movs	r0, #54	; 0x36
 80057d2:	f7ff feef 	bl	80055b4 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2101      	movs	r1, #1
 80057da:	4805      	ldr	r0, [pc, #20]	; (80057f0 <Displ_Orientation+0xa0>)
 80057dc:	f7ff fef9 	bl	80055d2 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80057e0:	4a06      	ldr	r2, [pc, #24]	; (80057fc <Displ_Orientation+0xac>)
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	7013      	strb	r3, [r2, #0]
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20009978 	.word	0x20009978
 80057f4:	20008970 	.word	0x20008970
 80057f8:	2000896e 	.word	0x2000896e
 80057fc:	2000896c 	.word	0x2000896c

08005800 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a05      	ldr	r2, [pc, #20]	; (8005824 <HAL_SPI_ErrorCallback+0x24>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d102      	bne.n	8005818 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_SPI_ErrorCallback+0x28>)
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
	}
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40003800 	.word	0x40003800
 8005828:	2000003c 	.word	0x2000003c

0800582c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a05      	ldr	r2, [pc, #20]	; (8005850 <HAL_SPI_TxCpltCallback+0x24>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d102      	bne.n	8005844 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_SPI_TxCpltCallback+0x28>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40003800 	.word	0x40003800
 8005854:	2000003c 	.word	0x2000003c

08005858 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b08b      	sub	sp, #44	; 0x2c
 800585c:	af00      	add	r7, sp, #0
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4623      	mov	r3, r4
 8005868:	80fb      	strh	r3, [r7, #6]
 800586a:	4603      	mov	r3, r0
 800586c:	80bb      	strh	r3, [r7, #4]
 800586e:	460b      	mov	r3, r1
 8005870:	807b      	strh	r3, [r7, #2]
 8005872:	4613      	mov	r3, r2
 8005874:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	4a4f      	ldr	r2, [pc, #316]	; (80059b8 <Displ_FillArea+0x160>)
 800587a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800587e:	4293      	cmp	r3, r2
 8005880:	f280 8096 	bge.w	80059b0 <Displ_FillArea+0x158>
 8005884:	88bb      	ldrh	r3, [r7, #4]
 8005886:	4a4d      	ldr	r2, [pc, #308]	; (80059bc <Displ_FillArea+0x164>)
 8005888:	f9b2 2000 	ldrsh.w	r2, [r2]
 800588c:	4293      	cmp	r3, r2
 800588e:	f280 808f 	bge.w	80059b0 <Displ_FillArea+0x158>
 8005892:	887b      	ldrh	r3, [r7, #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 808b 	beq.w	80059b0 <Displ_FillArea+0x158>
 800589a:	883b      	ldrh	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8087 	beq.w	80059b0 <Displ_FillArea+0x158>

	x1=x + w - 1;
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	4413      	add	r3, r2
 80058a8:	3b01      	subs	r3, #1
 80058aa:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80058ac:	4b42      	ldr	r3, [pc, #264]	; (80059b8 <Displ_FillArea+0x160>)
 80058ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d903      	bls.n	80058c2 <Displ_FillArea+0x6a>
		x1=_width;
 80058ba:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <Displ_FillArea+0x160>)
 80058bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058c0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80058c2:	88ba      	ldrh	r2, [r7, #4]
 80058c4:	883b      	ldrh	r3, [r7, #0]
 80058c6:	4413      	add	r3, r2
 80058c8:	3b01      	subs	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80058cc:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <Displ_FillArea+0x164>)
 80058ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058d2:	461a      	mov	r2, r3
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d903      	bls.n	80058e2 <Displ_FillArea+0x8a>
		y1=_height;
 80058da:	4b38      	ldr	r3, [pc, #224]	; (80059bc <Displ_FillArea+0x164>)
 80058dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058e0:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80058e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	431a      	orrs	r2, r3
 80058f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058f2:	061b      	lsls	r3, r3, #24
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 80058f8:	88bb      	ldrh	r3, [r7, #4]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	3301      	adds	r3, #1
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	6a39      	ldr	r1, [r7, #32]
 8005904:	1a8a      	subs	r2, r1, r2
 8005906:	3201      	adds	r2, #1
 8005908:	fb02 f303 	mul.w	r3, r2, r3
 800590c:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <Displ_FillArea+0x168>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d204      	bcs.n	8005926 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	3301      	adds	r3, #1
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e002      	b.n	800592c <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8005926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800592a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	e007      	b.n	8005942 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1d1a      	adds	r2, r3, #4
 8005936:	617a      	str	r2, [r7, #20]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	3301      	adds	r3, #1
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	429a      	cmp	r2, r3
 8005948:	d3f3      	bcc.n	8005932 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	b29a      	uxth	r2, r3
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	b29b      	uxth	r3, r3
 8005952:	88b9      	ldrh	r1, [r7, #4]
 8005954:	88f8      	ldrh	r0, [r7, #6]
 8005956:	f7ff fe93 	bl	8005680 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0a9b      	lsrs	r3, r3, #10
 800595e:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
 8005964:	e00a      	b.n	800597c <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8005966:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <Displ_FillArea+0x168>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fe2e 	bl	80055d2 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	3301      	adds	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	d3f0      	bcc.n	8005966 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <Displ_FillArea+0x168>)
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	005a      	lsls	r2, r3, #1
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	02db      	lsls	r3, r3, #11
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2200      	movs	r2, #0
 8005994:	4619      	mov	r1, r3
 8005996:	f7ff fe1c 	bl	80055d2 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <Displ_FillArea+0x168>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <Displ_FillArea+0x16c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <Displ_FillArea+0x150>
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <Displ_FillArea+0x170>)
 80059a6:	e000      	b.n	80059aa <Displ_FillArea+0x152>
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <Displ_FillArea+0x16c>)
 80059aa:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <Displ_FillArea+0x168>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e000      	b.n	80059b2 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80059b0:	bf00      	nop

}
 80059b2:	372c      	adds	r7, #44	; 0x2c
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd90      	pop	{r4, r7, pc}
 80059b8:	2000896e 	.word	0x2000896e
 80059bc:	20008970 	.word	0x20008970
 80059c0:	20000040 	.word	0x20000040
 80059c4:	20008974 	.word	0x20008974
 80059c8:	20009174 	.word	0x20009174

080059cc <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	4603      	mov	r3, r0
 80059d4:	80fb      	strh	r3, [r7, #6]
 80059d6:	460b      	mov	r3, r1
 80059d8:	80bb      	strh	r3, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <Displ_Pixel+0x44>)
 80059e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	da0e      	bge.n	8005a08 <Displ_Pixel+0x3c>
 80059ea:	88bb      	ldrh	r3, [r7, #4]
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <Displ_Pixel+0x48>)
 80059ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	da08      	bge.n	8005a08 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 80059f6:	88b9      	ldrh	r1, [r7, #4]
 80059f8:	88f8      	ldrh	r0, [r7, #6]
 80059fa:	887b      	ldrh	r3, [r7, #2]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2301      	movs	r3, #1
 8005a00:	2201      	movs	r2, #1
 8005a02:	f7ff ff29 	bl	8005858 <Displ_FillArea>
 8005a06:	e000      	b.n	8005a0a <Displ_Pixel+0x3e>
        return;
 8005a08:	bf00      	nop

}
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	2000896e 	.word	0x2000896e
 8005a14:	20008970 	.word	0x20008970

08005a18 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	4623      	mov	r3, r4
 8005a28:	80fb      	strh	r3, [r7, #6]
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80bb      	strh	r3, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	807b      	strh	r3, [r7, #2]
 8005a32:	4613      	mov	r3, r2
 8005a34:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8005a36:	887b      	ldrh	r3, [r7, #2]
 8005a38:	f1c3 0301 	rsb	r3, r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005a44:	887b      	ldrh	r3, [r7, #2]
 8005a46:	461a      	mov	r2, r3
 8005a48:	03d2      	lsls	r2, r2, #15
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8005a56:	887b      	ldrh	r3, [r7, #2]
 8005a58:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005a5a:	88f8      	ldrh	r0, [r7, #6]
 8005a5c:	88ba      	ldrh	r2, [r7, #4]
 8005a5e:	887b      	ldrh	r3, [r7, #2]
 8005a60:	4413      	add	r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	883a      	ldrh	r2, [r7, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	f7ff ffb0 	bl	80059cc <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005a6c:	88f8      	ldrh	r0, [r7, #6]
 8005a6e:	88ba      	ldrh	r2, [r7, #4]
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	883a      	ldrh	r2, [r7, #0]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7ff ffa7 	bl	80059cc <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	887b      	ldrh	r3, [r7, #2]
 8005a82:	4413      	add	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	88b9      	ldrh	r1, [r7, #4]
 8005a88:	883a      	ldrh	r2, [r7, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff ff9e 	bl	80059cc <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	88b9      	ldrh	r1, [r7, #4]
 8005a9a:	883a      	ldrh	r2, [r7, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ff95 	bl	80059cc <Displ_Pixel>

    while (x<y) {
 8005aa2:	e081      	b.n	8005ba8 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8005aa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	db0e      	blt.n	8005aca <Displ_drawCircle+0xb2>
            y--;
 8005aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005ab8:	8a7b      	ldrh	r3, [r7, #18]
 8005aba:	3302      	adds	r3, #2
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8005ac0:	8afa      	ldrh	r2, [r7, #22]
 8005ac2:	8a7b      	ldrh	r3, [r7, #18]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005aca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005ad6:	8abb      	ldrh	r3, [r7, #20]
 8005ad8:	3302      	adds	r3, #2
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8005ade:	8afa      	ldrh	r2, [r7, #22]
 8005ae0:	8abb      	ldrh	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	8a3b      	ldrh	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	b298      	uxth	r0, r3
 8005af0:	88ba      	ldrh	r2, [r7, #4]
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	4413      	add	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	883a      	ldrh	r2, [r7, #0]
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7ff ff66 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	8a3b      	ldrh	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	b298      	uxth	r0, r3
 8005b08:	88ba      	ldrh	r2, [r7, #4]
 8005b0a:	89fb      	ldrh	r3, [r7, #14]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	883a      	ldrh	r2, [r7, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	f7ff ff5a 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	8a3b      	ldrh	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	b298      	uxth	r0, r3
 8005b20:	88ba      	ldrh	r2, [r7, #4]
 8005b22:	89fb      	ldrh	r3, [r7, #14]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	883a      	ldrh	r2, [r7, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f7ff ff4e 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	8a3b      	ldrh	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	b298      	uxth	r0, r3
 8005b38:	88ba      	ldrh	r2, [r7, #4]
 8005b3a:	89fb      	ldrh	r3, [r7, #14]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	883a      	ldrh	r2, [r7, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	f7ff ff42 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	89fb      	ldrh	r3, [r7, #14]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b298      	uxth	r0, r3
 8005b50:	88ba      	ldrh	r2, [r7, #4]
 8005b52:	8a3b      	ldrh	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	883a      	ldrh	r2, [r7, #0]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f7ff ff36 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	89fb      	ldrh	r3, [r7, #14]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	b298      	uxth	r0, r3
 8005b68:	88ba      	ldrh	r2, [r7, #4]
 8005b6a:	8a3b      	ldrh	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	883a      	ldrh	r2, [r7, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7ff ff2a 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	89fb      	ldrh	r3, [r7, #14]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	b298      	uxth	r0, r3
 8005b80:	88ba      	ldrh	r2, [r7, #4]
 8005b82:	8a3b      	ldrh	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	883a      	ldrh	r2, [r7, #0]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f7ff ff1e 	bl	80059cc <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	89fb      	ldrh	r3, [r7, #14]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	b298      	uxth	r0, r3
 8005b98:	88ba      	ldrh	r2, [r7, #4]
 8005b9a:	8a3b      	ldrh	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	883a      	ldrh	r2, [r7, #0]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f7ff ff12 	bl	80059cc <Displ_Pixel>
    while (x<y) {
 8005ba8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005bac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	f6ff af77 	blt.w	8005aa4 <Displ_drawCircle+0x8c>
    }
}
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd90      	pop	{r4, r7, pc}

08005bc0 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <Displ_CLS+0x30>)
 8005bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <Displ_CLS+0x34>)
 8005bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd8:	b299      	uxth	r1, r3
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	460b      	mov	r3, r1
 8005be0:	2100      	movs	r1, #0
 8005be2:	2000      	movs	r0, #0
 8005be4:	f7ff fe38 	bl	8005858 <Displ_FillArea>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2000896e 	.word	0x2000896e
 8005bf4:	20008970 	.word	0x20008970

08005bf8 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4623      	mov	r3, r4
 8005c08:	80fb      	strh	r3, [r7, #6]
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	80bb      	strh	r3, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	807b      	strh	r3, [r7, #2]
 8005c12:	4613      	mov	r3, r2
 8005c14:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8005c16:	887b      	ldrh	r3, [r7, #2]
 8005c18:	f1c3 0301 	rsb	r3, r3, #1
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005c20:	2301      	movs	r3, #1
 8005c22:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	461a      	mov	r2, r3
 8005c28:	03d2      	lsls	r2, r2, #15
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8005c36:	887b      	ldrh	r3, [r7, #2]
 8005c38:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8005c3a:	e095      	b.n	8005d68 <drawCircleHelper+0x170>
        if (f >= 0) {
 8005c3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	db0e      	blt.n	8005c62 <drawCircleHelper+0x6a>
            y--;
 8005c44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005c50:	8a7b      	ldrh	r3, [r7, #18]
 8005c52:	3302      	adds	r3, #2
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005c58:	8afa      	ldrh	r2, [r7, #22]
 8005c5a:	8a7b      	ldrh	r3, [r7, #18]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005c62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005c6e:	8abb      	ldrh	r3, [r7, #20]
 8005c70:	3302      	adds	r3, #2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8005c76:	8afa      	ldrh	r2, [r7, #22]
 8005c78:	8abb      	ldrh	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8005c80:	787b      	ldrb	r3, [r7, #1]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d017      	beq.n	8005cba <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	8a3b      	ldrh	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	b298      	uxth	r0, r3
 8005c92:	88ba      	ldrh	r2, [r7, #4]
 8005c94:	89fb      	ldrh	r3, [r7, #14]
 8005c96:	4413      	add	r3, r2
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f7ff fe95 	bl	80059cc <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	b298      	uxth	r0, r3
 8005caa:	88ba      	ldrh	r2, [r7, #4]
 8005cac:	8a3b      	ldrh	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f7ff fe89 	bl	80059cc <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8005cba:	787b      	ldrb	r3, [r7, #1]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	8a3b      	ldrh	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	b298      	uxth	r0, r3
 8005ccc:	88ba      	ldrh	r2, [r7, #4]
 8005cce:	89fb      	ldrh	r3, [r7, #14]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f7ff fe78 	bl	80059cc <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	b298      	uxth	r0, r3
 8005ce4:	88ba      	ldrh	r2, [r7, #4]
 8005ce6:	8a3b      	ldrh	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f7ff fe6c 	bl	80059cc <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8005cf4:	787b      	ldrb	r3, [r7, #1]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d017      	beq.n	8005d2e <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	89fb      	ldrh	r3, [r7, #14]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	b298      	uxth	r0, r3
 8005d06:	88ba      	ldrh	r2, [r7, #4]
 8005d08:	8a3b      	ldrh	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d10:	4619      	mov	r1, r3
 8005d12:	f7ff fe5b 	bl	80059cc <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	8a3b      	ldrh	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b298      	uxth	r0, r3
 8005d1e:	88ba      	ldrh	r2, [r7, #4]
 8005d20:	89fb      	ldrh	r3, [r7, #14]
 8005d22:	4413      	add	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f7ff fe4f 	bl	80059cc <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8005d2e:	787b      	ldrb	r3, [r7, #1]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d017      	beq.n	8005d68 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b298      	uxth	r0, r3
 8005d40:	88ba      	ldrh	r2, [r7, #4]
 8005d42:	8a3b      	ldrh	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f7ff fe3e 	bl	80059cc <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8005d50:	88fa      	ldrh	r2, [r7, #6]
 8005d52:	8a3b      	ldrh	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	b298      	uxth	r0, r3
 8005d58:	88ba      	ldrh	r2, [r7, #4]
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d62:	4619      	mov	r1, r3
 8005d64:	f7ff fe32 	bl	80059cc <Displ_Pixel>
    while (x<y) {
 8005d68:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005d6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	f6ff af63 	blt.w	8005c3c <drawCircleHelper+0x44>
        }
    }
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd90      	pop	{r4, r7, pc}

08005d80 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b089      	sub	sp, #36	; 0x24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	4604      	mov	r4, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4623      	mov	r3, r4
 8005d90:	80fb      	strh	r3, [r7, #6]
 8005d92:	4603      	mov	r3, r0
 8005d94:	80bb      	strh	r3, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	807b      	strh	r3, [r7, #2]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8005d9e:	887b      	ldrh	r3, [r7, #2]
 8005da0:	f1c3 0301 	rsb	r3, r3, #1
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8005da8:	2301      	movs	r3, #1
 8005daa:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8005dac:	887b      	ldrh	r3, [r7, #2]
 8005dae:	461a      	mov	r2, r3
 8005db0:	03d2      	lsls	r2, r2, #15
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8005dbe:	887b      	ldrh	r3, [r7, #2]
 8005dc0:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8005dc2:	e0a7      	b.n	8005f14 <fillCircleHelper+0x194>
    if (f >= 0) {
 8005dc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	db0e      	blt.n	8005dea <fillCircleHelper+0x6a>
      y--;
 8005dcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8005dd8:	8a7b      	ldrh	r3, [r7, #18]
 8005dda:	3302      	adds	r3, #2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8005de0:	8afa      	ldrh	r2, [r7, #22]
 8005de2:	8a7b      	ldrh	r3, [r7, #18]
 8005de4:	4413      	add	r3, r2
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8005dea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3301      	adds	r3, #1
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8005df6:	8abb      	ldrh	r3, [r7, #20]
 8005df8:	3302      	adds	r3, #2
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8005dfe:	8afa      	ldrh	r2, [r7, #22]
 8005e00:	8abb      	ldrh	r3, [r7, #20]
 8005e02:	4413      	add	r3, r2
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8005e08:	787b      	ldrb	r3, [r7, #1]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d03d      	beq.n	8005e8e <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	8a3b      	ldrh	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b218      	sxth	r0, r3
 8005e1c:	88ba      	ldrh	r2, [r7, #4]
 8005e1e:	89fb      	ldrh	r3, [r7, #14]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	b219      	sxth	r1, r3
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	8a3b      	ldrh	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b21c      	sxth	r4, r3
 8005e30:	88ba      	ldrh	r2, [r7, #4]
 8005e32:	89fb      	ldrh	r3, [r7, #14]
 8005e34:	4413      	add	r3, r2
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e3a:	4413      	add	r3, r2
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b21a      	sxth	r2, r3
 8005e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	f000 f8a1 	bl	8005f92 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	89fb      	ldrh	r3, [r7, #14]
 8005e54:	4413      	add	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b218      	sxth	r0, r3
 8005e5a:	88ba      	ldrh	r2, [r7, #4]
 8005e5c:	8a3b      	ldrh	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	b219      	sxth	r1, r3
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	89fb      	ldrh	r3, [r7, #14]
 8005e68:	4413      	add	r3, r2
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	b21c      	sxth	r4, r3
 8005e6e:	88ba      	ldrh	r2, [r7, #4]
 8005e70:	8a3b      	ldrh	r3, [r7, #16]
 8005e72:	4413      	add	r3, r2
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e78:	4413      	add	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	b21a      	sxth	r2, r3
 8005e82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4613      	mov	r3, r2
 8005e88:	4622      	mov	r2, r4
 8005e8a:	f000 f882 	bl	8005f92 <Displ_Line>
    }
    if (cornername & 0x2) {
 8005e8e:	787b      	ldrb	r3, [r7, #1]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d03d      	beq.n	8005f14 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	8a3b      	ldrh	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	b218      	sxth	r0, r3
 8005ea2:	88ba      	ldrh	r2, [r7, #4]
 8005ea4:	89fb      	ldrh	r3, [r7, #14]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	b219      	sxth	r1, r3
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	8a3b      	ldrh	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	b21c      	sxth	r4, r3
 8005eb6:	88ba      	ldrh	r2, [r7, #4]
 8005eb8:	89fb      	ldrh	r3, [r7, #14]
 8005eba:	4413      	add	r3, r2
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ec0:	4413      	add	r3, r2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	b21a      	sxth	r2, r3
 8005eca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	f000 f85e 	bl	8005f92 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	b218      	sxth	r0, r3
 8005ee0:	88ba      	ldrh	r2, [r7, #4]
 8005ee2:	8a3b      	ldrh	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	b219      	sxth	r1, r3
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	89fb      	ldrh	r3, [r7, #14]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	b21c      	sxth	r4, r3
 8005ef4:	88ba      	ldrh	r2, [r7, #4]
 8005ef6:	8a3b      	ldrh	r3, [r7, #16]
 8005ef8:	4413      	add	r3, r2
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005efe:	4413      	add	r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3301      	adds	r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b21a      	sxth	r2, r3
 8005f08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	4622      	mov	r2, r4
 8005f10:	f000 f83f 	bl	8005f92 <Displ_Line>
  while (x<y) {
 8005f14:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005f18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	f6ff af51 	blt.w	8005dc4 <fillCircleHelper+0x44>
    }
  }
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd90      	pop	{r4, r7, pc}

08005f2c <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	80fb      	strh	r3, [r7, #6]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	80bb      	strh	r3, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	807b      	strh	r3, [r7, #2]
 8005f46:	4613      	mov	r3, r2
 8005f48:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8005f4a:	88ba      	ldrh	r2, [r7, #4]
 8005f4c:	887b      	ldrh	r3, [r7, #2]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b219      	sxth	r1, r3
 8005f54:	88ba      	ldrh	r2, [r7, #4]
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	4413      	add	r3, r2
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	b21c      	sxth	r4, r3
 8005f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f62:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f66:	883b      	ldrh	r3, [r7, #0]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	f000 f811 	bl	8005f92 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8005f70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f74:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f78:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f7c:	883b      	ldrh	r3, [r7, #0]
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	2300      	movs	r3, #0
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	2303      	movs	r3, #3
 8005f86:	f7ff fefb 	bl	8005d80 <fillCircleHelper>
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}

08005f92 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005f92:	b590      	push	{r4, r7, lr}
 8005f94:	b08b      	sub	sp, #44	; 0x2c
 8005f96:	af02      	add	r7, sp, #8
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	80fb      	strh	r3, [r7, #6]
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	80bb      	strh	r3, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
 8005fac:	4613      	mov	r3, r2
 8005fae:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005fb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d123      	bne.n	8006004 <Displ_Line+0x72>
    	if (y1>y0){
 8005fbc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005fc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	dd0e      	ble.n	8005fe6 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005fc8:	88f8      	ldrh	r0, [r7, #6]
 8005fca:	88b9      	ldrh	r1, [r7, #4]
 8005fcc:	883a      	ldrh	r2, [r7, #0]
 8005fce:	88bb      	ldrh	r3, [r7, #4]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f7ff fc3a 	bl	8005858 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8005fe4:	e103      	b.n	80061ee <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005fe6:	88f8      	ldrh	r0, [r7, #6]
 8005fe8:	8839      	ldrh	r1, [r7, #0]
 8005fea:	88ba      	ldrh	r2, [r7, #4]
 8005fec:	883b      	ldrh	r3, [r7, #0]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f7ff fc2b 	bl	8005858 <Displ_FillArea>
    	return;
 8006002:	e0f4      	b.n	80061ee <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8006004:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006008:	f9b7 3000 	ldrsh.w	r3, [r7]
 800600c:	429a      	cmp	r2, r3
 800600e:	d121      	bne.n	8006054 <Displ_Line+0xc2>
    	if (x1>x0)
 8006010:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006018:	429a      	cmp	r2, r3
 800601a:	dd0d      	ble.n	8006038 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800601c:	88f8      	ldrh	r0, [r7, #6]
 800601e:	88b9      	ldrh	r1, [r7, #4]
 8006020:	887a      	ldrh	r2, [r7, #2]
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	3301      	adds	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2301      	movs	r3, #1
 8006032:	f7ff fc11 	bl	8005858 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8006036:	e0da      	b.n	80061ee <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8006038:	8878      	ldrh	r0, [r7, #2]
 800603a:	8839      	ldrh	r1, [r7, #0]
 800603c:	88fa      	ldrh	r2, [r7, #6]
 800603e:	887b      	ldrh	r3, [r7, #2]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	b29b      	uxth	r3, r3
 8006044:	3301      	adds	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2301      	movs	r3, #1
 800604e:	f7ff fc03 	bl	8005858 <Displ_FillArea>
    	return;
 8006052:	e0cc      	b.n	80061ee <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8006054:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006058:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	dd05      	ble.n	800606c <Displ_Line+0xda>
 8006060:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006064:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	e004      	b.n	8006076 <Displ_Line+0xe4>
 800606c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006070:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800607a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800607e:	4299      	cmp	r1, r3
 8006080:	dd05      	ble.n	800608e <Displ_Line+0xfc>
 8006082:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800608a:	1acb      	subs	r3, r1, r3
 800608c:	e004      	b.n	8006098 <Displ_Line+0x106>
 800608e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8006092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	429a      	cmp	r2, r3
 800609a:	bfcc      	ite	gt
 800609c:	2301      	movgt	r3, #1
 800609e:	2300      	movle	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80060a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	827b      	strh	r3, [r7, #18]
 80060b0:	88bb      	ldrh	r3, [r7, #4]
 80060b2:	80fb      	strh	r3, [r7, #6]
 80060b4:	8a7b      	ldrh	r3, [r7, #18]
 80060b6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80060b8:	887b      	ldrh	r3, [r7, #2]
 80060ba:	823b      	strh	r3, [r7, #16]
 80060bc:	883b      	ldrh	r3, [r7, #0]
 80060be:	807b      	strh	r3, [r7, #2]
 80060c0:	8a3b      	ldrh	r3, [r7, #16]
 80060c2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80060c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	dd0b      	ble.n	80060e8 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	81fb      	strh	r3, [r7, #14]
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	80fb      	strh	r3, [r7, #6]
 80060d8:	89fb      	ldrh	r3, [r7, #14]
 80060da:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80060dc:	88bb      	ldrh	r3, [r7, #4]
 80060de:	81bb      	strh	r3, [r7, #12]
 80060e0:	883b      	ldrh	r3, [r7, #0]
 80060e2:	80bb      	strh	r3, [r7, #4]
 80060e4:	89bb      	ldrh	r3, [r7, #12]
 80060e6:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80060e8:	887a      	ldrh	r2, [r7, #2]
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80060f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80060f6:	105b      	asrs	r3, r3, #1
 80060f8:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80060fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80060fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006102:	429a      	cmp	r2, r3
 8006104:	da07      	bge.n	8006116 <Displ_Line+0x184>
        dy = y1-y0;
 8006106:	883a      	ldrh	r2, [r7, #0]
 8006108:	88bb      	ldrh	r3, [r7, #4]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8006110:	2301      	movs	r3, #1
 8006112:	837b      	strh	r3, [r7, #26]
 8006114:	e007      	b.n	8006126 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8006116:	88ba      	ldrh	r2, [r7, #4]
 8006118:	883b      	ldrh	r3, [r7, #0]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	b29b      	uxth	r3, r3
 800611e:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8006120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006124:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8006126:	2300      	movs	r3, #0
 8006128:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	83bb      	strh	r3, [r7, #28]
 800612e:	e03a      	b.n	80061a6 <Displ_Line+0x214>
    	l++;
 8006130:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006134:	b29b      	uxth	r3, r3
 8006136:	3301      	adds	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800613c:	8b3a      	ldrh	r2, [r7, #24]
 800613e:	8afb      	ldrh	r3, [r7, #22]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	b29b      	uxth	r3, r3
 8006144:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8006146:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da25      	bge.n	800619a <Displ_Line+0x208>
        	if (steep) {
 800614e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8006156:	88b8      	ldrh	r0, [r7, #4]
 8006158:	88f9      	ldrh	r1, [r7, #6]
 800615a:	8bfa      	ldrh	r2, [r7, #30]
 800615c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	2201      	movs	r2, #1
 8006164:	f7ff fb78 	bl	8005858 <Displ_FillArea>
 8006168:	e007      	b.n	800617a <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 800616a:	88f8      	ldrh	r0, [r7, #6]
 800616c:	88b9      	ldrh	r1, [r7, #4]
 800616e:	8bfa      	ldrh	r2, [r7, #30]
 8006170:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	2301      	movs	r3, #1
 8006176:	f7ff fb6f 	bl	8005858 <Displ_FillArea>
            }
            y0 += ystep;
 800617a:	88ba      	ldrh	r2, [r7, #4]
 800617c:	8b7b      	ldrh	r3, [r7, #26]
 800617e:	4413      	add	r3, r2
 8006180:	b29b      	uxth	r3, r3
 8006182:	80bb      	strh	r3, [r7, #4]
            l=0;
 8006184:	2300      	movs	r3, #0
 8006186:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8006188:	8bbb      	ldrh	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	b29b      	uxth	r3, r3
 800618e:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8006190:	8b3a      	ldrh	r2, [r7, #24]
 8006192:	897b      	ldrh	r3, [r7, #10]
 8006194:	4413      	add	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800619a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3301      	adds	r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	83bb      	strh	r3, [r7, #28]
 80061a6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80061aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	ddbe      	ble.n	8006130 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80061b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d019      	beq.n	80061ee <Displ_Line+0x25c>
    	if (steep) {
 80061ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80061c2:	88b8      	ldrh	r0, [r7, #4]
 80061c4:	88f9      	ldrh	r1, [r7, #6]
 80061c6:	8bfb      	ldrh	r3, [r7, #30]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	2201      	movs	r2, #1
 80061d4:	f7ff fb40 	bl	8005858 <Displ_FillArea>
 80061d8:	e009      	b.n	80061ee <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 80061da:	88f8      	ldrh	r0, [r7, #6]
 80061dc:	88b9      	ldrh	r1, [r7, #4]
 80061de:	8bfb      	ldrh	r3, [r7, #30]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	2301      	movs	r3, #1
 80061ea:	f7ff fb35 	bl	8005858 <Displ_FillArea>
    	}
    }
}
 80061ee:	3724      	adds	r7, #36	; 0x24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd90      	pop	{r4, r7, pc}

080061f4 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	461a      	mov	r2, r3
 8006202:	4623      	mov	r3, r4
 8006204:	80fb      	strh	r3, [r7, #6]
 8006206:	4603      	mov	r3, r0
 8006208:	80bb      	strh	r3, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	807b      	strh	r3, [r7, #2]
 800620e:	4613      	mov	r3, r2
 8006210:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8006212:	88f8      	ldrh	r0, [r7, #6]
 8006214:	88b9      	ldrh	r1, [r7, #4]
 8006216:	887a      	ldrh	r2, [r7, #2]
 8006218:	8b3c      	ldrh	r4, [r7, #24]
 800621a:	8bbb      	ldrh	r3, [r7, #28]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	4623      	mov	r3, r4
 8006220:	f7ff fb1a 	bl	8005858 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8006224:	88f8      	ldrh	r0, [r7, #6]
 8006226:	88ba      	ldrh	r2, [r7, #4]
 8006228:	883b      	ldrh	r3, [r7, #0]
 800622a:	4413      	add	r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	8b3b      	ldrh	r3, [r7, #24]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	b299      	uxth	r1, r3
 8006234:	887a      	ldrh	r2, [r7, #2]
 8006236:	8b3c      	ldrh	r4, [r7, #24]
 8006238:	8bbb      	ldrh	r3, [r7, #28]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4623      	mov	r3, r4
 800623e:	f7ff fb0b 	bl	8005858 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8006242:	88f8      	ldrh	r0, [r7, #6]
 8006244:	88b9      	ldrh	r1, [r7, #4]
 8006246:	8b3a      	ldrh	r2, [r7, #24]
 8006248:	883c      	ldrh	r4, [r7, #0]
 800624a:	8bbb      	ldrh	r3, [r7, #28]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4623      	mov	r3, r4
 8006250:	f7ff fb02 	bl	8005858 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	887b      	ldrh	r3, [r7, #2]
 8006258:	4413      	add	r3, r2
 800625a:	b29a      	uxth	r2, r3
 800625c:	8b3b      	ldrh	r3, [r7, #24]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	b298      	uxth	r0, r3
 8006262:	88b9      	ldrh	r1, [r7, #4]
 8006264:	8b3a      	ldrh	r2, [r7, #24]
 8006266:	883c      	ldrh	r4, [r7, #0]
 8006268:	8bbb      	ldrh	r3, [r7, #28]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	4623      	mov	r3, r4
 800626e:	f7ff faf3 	bl	8005858 <Displ_FillArea>
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bd90      	pop	{r4, r7, pc}

0800627a <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800627a:	b590      	push	{r4, r7, lr}
 800627c:	b085      	sub	sp, #20
 800627e:	af02      	add	r7, sp, #8
 8006280:	4604      	mov	r4, r0
 8006282:	4608      	mov	r0, r1
 8006284:	4611      	mov	r1, r2
 8006286:	461a      	mov	r2, r3
 8006288:	4623      	mov	r3, r4
 800628a:	80fb      	strh	r3, [r7, #6]
 800628c:	4603      	mov	r3, r0
 800628e:	80bb      	strh	r3, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
 8006294:	4613      	mov	r3, r2
 8006296:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8006298:	f9b7 4000 	ldrsh.w	r4, [r7]
 800629c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80062a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80062a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80062a8:	8c3b      	ldrh	r3, [r7, #32]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	4623      	mov	r3, r4
 80062ae:	f7ff fe70 	bl	8005f92 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80062b2:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80062b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80062ba:	f9b7 1000 	ldrsh.w	r1, [r7]
 80062be:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80062c2:	8c3b      	ldrh	r3, [r7, #32]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4623      	mov	r3, r4
 80062c8:	f7ff fe63 	bl	8005f92 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 80062cc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80062d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062d4:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80062d8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80062dc:	8c3b      	ldrh	r3, [r7, #32]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4623      	mov	r3, r4
 80062e2:	f7ff fe56 	bl	8005f92 <Displ_Line>
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}

080062ee <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80062ee:	b590      	push	{r4, r7, lr}
 80062f0:	b091      	sub	sp, #68	; 0x44
 80062f2:	af02      	add	r7, sp, #8
 80062f4:	4604      	mov	r4, r0
 80062f6:	4608      	mov	r0, r1
 80062f8:	4611      	mov	r1, r2
 80062fa:	461a      	mov	r2, r3
 80062fc:	4623      	mov	r3, r4
 80062fe:	80fb      	strh	r3, [r7, #6]
 8006300:	4603      	mov	r3, r0
 8006302:	80bb      	strh	r3, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	807b      	strh	r3, [r7, #2]
 8006308:	4613      	mov	r3, r2
 800630a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800630c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006310:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006314:	429a      	cmp	r2, r3
 8006316:	dd0b      	ble.n	8006330 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006318:	88bb      	ldrh	r3, [r7, #4]
 800631a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800631c:	883b      	ldrh	r3, [r7, #0]
 800631e:	80bb      	strh	r3, [r7, #4]
 8006320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006322:	803b      	strh	r3, [r7, #0]
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	80fb      	strh	r3, [r7, #6]
 800632c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800632e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8006330:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006334:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006338:	429a      	cmp	r2, r3
 800633a:	dd0f      	ble.n	800635c <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800633c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006340:	847b      	strh	r3, [r7, #34]	; 0x22
 8006342:	883b      	ldrh	r3, [r7, #0]
 8006344:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800634a:	803b      	strh	r3, [r7, #0]
 800634c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006350:	843b      	strh	r3, [r7, #32]
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006358:	8c3b      	ldrh	r3, [r7, #32]
 800635a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800635c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006360:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006364:	429a      	cmp	r2, r3
 8006366:	dd0b      	ble.n	8006380 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006368:	88bb      	ldrh	r3, [r7, #4]
 800636a:	83fb      	strh	r3, [r7, #30]
 800636c:	883b      	ldrh	r3, [r7, #0]
 800636e:	80bb      	strh	r3, [r7, #4]
 8006370:	8bfb      	ldrh	r3, [r7, #30]
 8006372:	803b      	strh	r3, [r7, #0]
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	83bb      	strh	r3, [r7, #28]
 8006378:	887b      	ldrh	r3, [r7, #2]
 800637a:	80fb      	strh	r3, [r7, #6]
 800637c:	8bbb      	ldrh	r3, [r7, #28]
 800637e:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8006380:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006384:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006388:	429a      	cmp	r2, r3
 800638a:	d136      	bne.n	80063fa <Displ_fillTriangle+0x10c>
        a = b = x0;
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006390:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006392:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8006394:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006398:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800639c:	429a      	cmp	r2, r3
 800639e:	da02      	bge.n	80063a6 <Displ_fillTriangle+0xb8>
 80063a0:	887b      	ldrh	r3, [r7, #2]
 80063a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063a4:	e007      	b.n	80063b6 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80063a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80063aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80063ae:	429a      	cmp	r2, r3
 80063b0:	dd01      	ble.n	80063b6 <Displ_fillTriangle+0xc8>
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80063b6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80063ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80063be:	429a      	cmp	r2, r3
 80063c0:	da03      	bge.n	80063ca <Displ_fillTriangle+0xdc>
 80063c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063c8:	e008      	b.n	80063dc <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80063ca:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80063ce:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80063d2:	429a      	cmp	r2, r3
 80063d4:	dd02      	ble.n	80063dc <Displ_fillTriangle+0xee>
 80063d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063da:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 80063dc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80063e0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80063e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063e8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80063ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4623      	mov	r3, r4
 80063f4:	f7ff fdcd 	bl	8005f92 <Displ_Line>
        return;
 80063f8:	e0d2      	b.n	80065a0 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 80063fa:	887a      	ldrh	r2, [r7, #2]
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	b29b      	uxth	r3, r3
 8006402:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8006404:	883a      	ldrh	r2, [r7, #0]
 8006406:	88bb      	ldrh	r3, [r7, #4]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800640e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	b29b      	uxth	r3, r3
 8006418:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800641a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800641e:	88bb      	ldrh	r3, [r7, #4]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	b29b      	uxth	r3, r3
 8006424:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8006426:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	b29b      	uxth	r3, r3
 8006430:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8006432:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006436:	883b      	ldrh	r3, [r7, #0]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	b29b      	uxth	r3, r3
 800643c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800643e:	2300      	movs	r3, #0
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8006446:	f9b7 2000 	ldrsh.w	r2, [r7]
 800644a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800644e:	429a      	cmp	r2, r3
 8006450:	d102      	bne.n	8006458 <Displ_fillTriangle+0x16a>
 8006452:	883b      	ldrh	r3, [r7, #0]
 8006454:	863b      	strh	r3, [r7, #48]	; 0x30
 8006456:	e003      	b.n	8006460 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8006458:	883b      	ldrh	r3, [r7, #0]
 800645a:	3b01      	subs	r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8006460:	88bb      	ldrh	r3, [r7, #4]
 8006462:	867b      	strh	r3, [r7, #50]	; 0x32
 8006464:	e03d      	b.n	80064e2 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8006466:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800646a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006470:	b29a      	uxth	r2, r3
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	4413      	add	r3, r2
 8006476:	b29b      	uxth	r3, r3
 8006478:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800647a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800647e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006480:	fb92 f3f3 	sdiv	r3, r2, r3
 8006484:	b29a      	uxth	r2, r3
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	4413      	add	r3, r2
 800648a:	b29b      	uxth	r3, r3
 800648c:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 800648e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006494:	4413      	add	r3, r2
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006498:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800649c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649e:	4413      	add	r3, r2
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80064a2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80064a6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80064aa:	429a      	cmp	r2, r3
 80064ac:	dd05      	ble.n	80064ba <Displ_fillTriangle+0x1cc>
 80064ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064b0:	81bb      	strh	r3, [r7, #12]
 80064b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80064b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80064b6:	89bb      	ldrh	r3, [r7, #12]
 80064b8:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80064ba:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80064be:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80064c2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80064c6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80064ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4623      	mov	r3, r4
 80064d2:	f7ff fd5e 	bl	8005f92 <Displ_Line>
    for(y=y0; y<=last; y++) {
 80064d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3301      	adds	r3, #1
 80064de:	b29b      	uxth	r3, r3
 80064e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80064e2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80064e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80064ea:	429a      	cmp	r2, r3
 80064ec:	ddbb      	ble.n	8006466 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80064ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064f2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80064f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80064fa:	1a8a      	subs	r2, r1, r2
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8006502:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006506:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800650a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800650e:	1a8a      	subs	r2, r1, r2
 8006510:	fb02 f303 	mul.w	r3, r2, r3
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8006516:	e03d      	b.n	8006594 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8006518:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800651c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006522:	b29a      	uxth	r2, r3
 8006524:	887b      	ldrh	r3, [r7, #2]
 8006526:	4413      	add	r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800652c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006532:	fb92 f3f3 	sdiv	r3, r2, r3
 8006536:	b29a      	uxth	r2, r3
 8006538:	88fb      	ldrh	r3, [r7, #6]
 800653a:	4413      	add	r3, r2
 800653c:	b29b      	uxth	r3, r3
 800653e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8006540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006546:	4413      	add	r3, r2
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800654a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800654e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006550:	4413      	add	r3, r2
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8006554:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006558:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800655c:	429a      	cmp	r2, r3
 800655e:	dd05      	ble.n	800656c <Displ_fillTriangle+0x27e>
 8006560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006562:	81fb      	strh	r3, [r7, #14]
 8006564:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006566:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800656c:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006570:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8006574:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006578:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800657c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	4623      	mov	r3, r4
 8006584:	f7ff fd05 	bl	8005f92 <Displ_Line>
    for(; y<=y2; y++) {
 8006588:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800658c:	b29b      	uxth	r3, r3
 800658e:	3301      	adds	r3, #1
 8006590:	b29b      	uxth	r3, r3
 8006592:	867b      	strh	r3, [r7, #50]	; 0x32
 8006594:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006598:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800659c:	429a      	cmp	r2, r3
 800659e:	ddbb      	ble.n	8006518 <Displ_fillTriangle+0x22a>
    }
}
 80065a0:	373c      	adds	r7, #60	; 0x3c
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}
	...

080065a8 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80065a8:	b082      	sub	sp, #8
 80065aa:	b590      	push	{r4, r7, lr}
 80065ac:	b08f      	sub	sp, #60	; 0x3c
 80065ae:	af02      	add	r7, sp, #8
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
 80065b2:	4603      	mov	r3, r0
 80065b4:	80fb      	strh	r3, [r7, #6]
 80065b6:	460b      	mov	r3, r1
 80065b8:	80bb      	strh	r3, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80065be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065c2:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80065c4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d102      	bne.n	80065d2 <Displ_WChar+0x2a>
		wsize<<= 1;
 80065cc:	7efb      	ldrb	r3, [r7, #27]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 80065d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065da:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80065e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	3b20      	subs	r3, #32
 80065ea:	4619      	mov	r1, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80065f6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d005      	beq.n	800660a <Displ_WChar+0x62>
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d107      	bne.n	8006612 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8006602:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006606:	61fb      	str	r3, [r7, #28]
			break;
 8006608:	e005      	b.n	8006616 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	61fb      	str	r3, [r7, #28]
			break;
 8006610:	e001      	b.n	8006616 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8006616:	4b68      	ldr	r3, [pc, #416]	; (80067b8 <Displ_WChar+0x210>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 800661c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	b21a      	sxth	r2, r3
 8006624:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	b29b      	uxth	r3, r3
 800662c:	b21b      	sxth	r3, r3
 800662e:	4313      	orrs	r3, r2
 8006630:	b21b      	sxth	r3, r3
 8006632:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006634:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	b21a      	sxth	r2, r3
 800663c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	b29b      	uxth	r3, r3
 8006644:	b21b      	sxth	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b21b      	sxth	r3, r3
 800664a:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 800664c:	2300      	movs	r3, #0
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006650:	e06f      	b.n	8006732 <Displ_WChar+0x18a>
		b=0;
 8006652:	2300      	movs	r3, #0
 8006654:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8006656:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800665a:	2b02      	cmp	r3, #2
 800665c:	d015      	beq.n	800668a <Displ_WChar+0xe2>
 800665e:	2b03      	cmp	r3, #3
 8006660:	d120      	bne.n	80066a4 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	4413      	add	r3, r2
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	041a      	lsls	r2, r3, #16
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	3301      	adds	r3, #1
 8006670:	6939      	ldr	r1, [r7, #16]
 8006672:	440b      	add	r3, r1
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	4313      	orrs	r3, r2
 800667a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667c:	3202      	adds	r2, #2
 800667e:	6939      	ldr	r1, [r7, #16]
 8006680:	440a      	add	r2, r1
 8006682:	7812      	ldrb	r2, [r2, #0]
 8006684:	4313      	orrs	r3, r2
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006688:	e011      	b.n	80066ae <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	4413      	add	r3, r2
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006696:	3201      	adds	r2, #1
 8006698:	6939      	ldr	r1, [r7, #16]
 800669a:	440a      	add	r2, r1
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	4313      	orrs	r3, r2
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80066a2:	e004      	b.n	80066ae <Displ_WChar+0x106>
			default:
				b=pos[i];
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	4413      	add	r3, r2
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
 80066b2:	e032      	b.n	800671a <Displ_WChar+0x172>
			if((b << j) & mask)  {
 80066b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	409a      	lsls	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d014      	beq.n	80066ec <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	623a      	str	r2, [r7, #32]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	897a      	ldrh	r2, [r7, #10]
 80066d0:	801a      	strh	r2, [r3, #0]
				if (size==2){
 80066d2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d11c      	bne.n	8006714 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	623a      	str	r2, [r7, #32]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	897a      	ldrh	r2, [r7, #10]
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e013      	b.n	8006714 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	623a      	str	r2, [r7, #32]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	893a      	ldrh	r2, [r7, #8]
 80066fa:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 80066fc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006700:	2b02      	cmp	r3, #2
 8006702:	d107      	bne.n	8006714 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	623a      	str	r2, [r7, #32]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	893a      	ldrh	r2, [r7, #8]
 8006712:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	3301      	adds	r3, #1
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800671e:	461a      	mov	r2, r3
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	4293      	cmp	r3, r2
 8006724:	d3c6      	bcc.n	80066b4 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8006726:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800672a:	461a      	mov	r2, r3
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	4413      	add	r3, r2
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	429a      	cmp	r2, r3
 8006738:	d38b      	bcc.n	8006652 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8006740:	7efb      	ldrb	r3, [r7, #27]
 8006742:	b29a      	uxth	r2, r3
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	4413      	add	r3, r2
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29c      	uxth	r4, r3
 800674e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006752:	88bb      	ldrh	r3, [r7, #4]
 8006754:	4413      	add	r3, r2
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29b      	uxth	r3, r3
 800675c:	88b9      	ldrh	r1, [r7, #4]
 800675e:	88f8      	ldrh	r0, [r7, #6]
 8006760:	4622      	mov	r2, r4
 8006762:	f7fe ff8d 	bl	8005680 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d90b      	bls.n	8006786 <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 800676e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	f240 33ad 	movw	r3, #941	; 0x3ad
 800677c:	4a0f      	ldr	r2, [pc, #60]	; (80067bc <Displ_WChar+0x214>)
 800677e:	4910      	ldr	r1, [pc, #64]	; (80067c0 <Displ_WChar+0x218>)
 8006780:	4810      	ldr	r0, [pc, #64]	; (80067c4 <Displ_WChar+0x21c>)
 8006782:	f7fe f9f5 	bl	8004b70 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <Displ_WChar+0x210>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	6a39      	ldr	r1, [r7, #32]
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe ff1f 	bl	80055d2 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8006794:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <Displ_WChar+0x210>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a0b      	ldr	r2, [pc, #44]	; (80067c8 <Displ_WChar+0x220>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d101      	bne.n	80067a2 <Displ_WChar+0x1fa>
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <Displ_WChar+0x224>)
 80067a0:	e000      	b.n	80067a4 <Displ_WChar+0x1fc>
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <Displ_WChar+0x220>)
 80067a4:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <Displ_WChar+0x210>)
 80067a6:	6013      	str	r3, [r2, #0]

}
 80067a8:	bf00      	nop
 80067aa:	3734      	adds	r7, #52	; 0x34
 80067ac:	46bd      	mov	sp, r7
 80067ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80067b2:	b002      	add	sp, #8
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000040 	.word	0x20000040
 80067bc:	08015534 	.word	0x08015534
 80067c0:	08011408 	.word	0x08011408
 80067c4:	08011428 	.word	0x08011428
 80067c8:	20008974 	.word	0x20008974
 80067cc:	20009174 	.word	0x20009174

080067d0 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80067d0:	b590      	push	{r4, r7, lr}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	4623      	mov	r3, r4
 80067e0:	80fb      	strh	r3, [r7, #6]
 80067e2:	4603      	mov	r3, r0
 80067e4:	80bb      	strh	r3, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	807b      	strh	r3, [r7, #2]
 80067ea:	4613      	mov	r3, r2
 80067ec:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80067ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80067f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	bfa8      	it	ge
 80067fa:	4613      	movge	r3, r2
 80067fc:	b21b      	sxth	r3, r3
 80067fe:	0fda      	lsrs	r2, r3, #31
 8006800:	4413      	add	r3, r2
 8006802:	105b      	asrs	r3, r3, #1
 8006804:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8006806:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800680a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800680e:	429a      	cmp	r2, r3
 8006810:	dd01      	ble.n	8006816 <Displ_drawRoundRect+0x46>
 8006812:	89fb      	ldrh	r3, [r7, #14]
 8006814:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	8c3b      	ldrh	r3, [r7, #32]
 800681a:	4413      	add	r3, r2
 800681c:	b29b      	uxth	r3, r3
 800681e:	b218      	sxth	r0, r3
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	887b      	ldrh	r3, [r7, #2]
 8006824:	4413      	add	r3, r2
 8006826:	b29a      	uxth	r2, r3
 8006828:	8c3b      	ldrh	r3, [r7, #32]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29b      	uxth	r3, r3
 8006832:	b21a      	sxth	r2, r3
 8006834:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006838:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800683c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	4623      	mov	r3, r4
 8006842:	f7ff fba6 	bl	8005f92 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	8c3b      	ldrh	r3, [r7, #32]
 800684a:	4413      	add	r3, r2
 800684c:	b29b      	uxth	r3, r3
 800684e:	b218      	sxth	r0, r3
 8006850:	88ba      	ldrh	r2, [r7, #4]
 8006852:	883b      	ldrh	r3, [r7, #0]
 8006854:	4413      	add	r3, r2
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29b      	uxth	r3, r3
 800685c:	b219      	sxth	r1, r3
 800685e:	88fa      	ldrh	r2, [r7, #6]
 8006860:	887b      	ldrh	r3, [r7, #2]
 8006862:	4413      	add	r3, r2
 8006864:	b29a      	uxth	r2, r3
 8006866:	8c3b      	ldrh	r3, [r7, #32]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	b21c      	sxth	r4, r3
 8006872:	88ba      	ldrh	r2, [r7, #4]
 8006874:	883b      	ldrh	r3, [r7, #0]
 8006876:	4413      	add	r3, r2
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29b      	uxth	r3, r3
 800687e:	b21a      	sxth	r2, r3
 8006880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	4622      	mov	r2, r4
 8006888:	f7ff fb83 	bl	8005f92 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 800688c:	88ba      	ldrh	r2, [r7, #4]
 800688e:	8c3b      	ldrh	r3, [r7, #32]
 8006890:	4413      	add	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	b219      	sxth	r1, r3
 8006896:	88ba      	ldrh	r2, [r7, #4]
 8006898:	883b      	ldrh	r3, [r7, #0]
 800689a:	4413      	add	r3, r2
 800689c:	b29a      	uxth	r2, r3
 800689e:	8c3b      	ldrh	r3, [r7, #32]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	b21c      	sxth	r4, r3
 80068aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80068b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	4623      	mov	r3, r4
 80068b8:	f7ff fb6b 	bl	8005f92 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	887b      	ldrh	r3, [r7, #2]
 80068c0:	4413      	add	r3, r2
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	b218      	sxth	r0, r3
 80068ca:	88ba      	ldrh	r2, [r7, #4]
 80068cc:	8c3b      	ldrh	r3, [r7, #32]
 80068ce:	4413      	add	r3, r2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	b219      	sxth	r1, r3
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	887b      	ldrh	r3, [r7, #2]
 80068d8:	4413      	add	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29b      	uxth	r3, r3
 80068e0:	b21c      	sxth	r4, r3
 80068e2:	88ba      	ldrh	r2, [r7, #4]
 80068e4:	883b      	ldrh	r3, [r7, #0]
 80068e6:	4413      	add	r3, r2
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	8c3b      	ldrh	r3, [r7, #32]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	b21a      	sxth	r2, r3
 80068f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	4622      	mov	r2, r4
 80068fe:	f7ff fb48 	bl	8005f92 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	8c3b      	ldrh	r3, [r7, #32]
 8006906:	4413      	add	r3, r2
 8006908:	b29b      	uxth	r3, r3
 800690a:	b218      	sxth	r0, r3
 800690c:	88ba      	ldrh	r2, [r7, #4]
 800690e:	8c3b      	ldrh	r3, [r7, #32]
 8006910:	4413      	add	r3, r2
 8006912:	b29b      	uxth	r3, r3
 8006914:	b219      	sxth	r1, r3
 8006916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800691a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	2301      	movs	r3, #1
 8006920:	f7ff f96a 	bl	8005bf8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	887b      	ldrh	r3, [r7, #2]
 8006928:	4413      	add	r3, r2
 800692a:	b29a      	uxth	r2, r3
 800692c:	8c3b      	ldrh	r3, [r7, #32]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29b      	uxth	r3, r3
 8006936:	b218      	sxth	r0, r3
 8006938:	88ba      	ldrh	r2, [r7, #4]
 800693a:	8c3b      	ldrh	r3, [r7, #32]
 800693c:	4413      	add	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	b219      	sxth	r1, r3
 8006942:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	2302      	movs	r3, #2
 800694c:	f7ff f954 	bl	8005bf8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	887b      	ldrh	r3, [r7, #2]
 8006954:	4413      	add	r3, r2
 8006956:	b29a      	uxth	r2, r3
 8006958:	8c3b      	ldrh	r3, [r7, #32]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	b218      	sxth	r0, r3
 8006964:	88ba      	ldrh	r2, [r7, #4]
 8006966:	883b      	ldrh	r3, [r7, #0]
 8006968:	4413      	add	r3, r2
 800696a:	b29a      	uxth	r2, r3
 800696c:	8c3b      	ldrh	r3, [r7, #32]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	b219      	sxth	r1, r3
 8006978:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800697c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2304      	movs	r3, #4
 8006982:	f7ff f939 	bl	8005bf8 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8006986:	88fa      	ldrh	r2, [r7, #6]
 8006988:	8c3b      	ldrh	r3, [r7, #32]
 800698a:	4413      	add	r3, r2
 800698c:	b29b      	uxth	r3, r3
 800698e:	b218      	sxth	r0, r3
 8006990:	88ba      	ldrh	r2, [r7, #4]
 8006992:	883b      	ldrh	r3, [r7, #0]
 8006994:	4413      	add	r3, r2
 8006996:	b29a      	uxth	r2, r3
 8006998:	8c3b      	ldrh	r3, [r7, #32]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	b219      	sxth	r1, r3
 80069a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80069a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2308      	movs	r3, #8
 80069ae:	f7ff f923 	bl	8005bf8 <drawCircleHelper>
}
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd90      	pop	{r4, r7, pc}

080069ba <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80069ba:	b590      	push	{r4, r7, lr}
 80069bc:	b087      	sub	sp, #28
 80069be:	af02      	add	r7, sp, #8
 80069c0:	4604      	mov	r4, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	461a      	mov	r2, r3
 80069c8:	4623      	mov	r3, r4
 80069ca:	80fb      	strh	r3, [r7, #6]
 80069cc:	4603      	mov	r3, r0
 80069ce:	80bb      	strh	r3, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
 80069d4:	4613      	mov	r3, r2
 80069d6:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80069d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80069dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bfa8      	it	ge
 80069e4:	4613      	movge	r3, r2
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	0fda      	lsrs	r2, r3, #31
 80069ea:	4413      	add	r3, r2
 80069ec:	105b      	asrs	r3, r3, #1
 80069ee:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80069f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80069f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	dd01      	ble.n	8006a00 <Displ_fillRoundRect+0x46>
 80069fc:	89fb      	ldrh	r3, [r7, #14]
 80069fe:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	8c3b      	ldrh	r3, [r7, #32]
 8006a04:	4413      	add	r3, r2
 8006a06:	b298      	uxth	r0, r3
 8006a08:	88b9      	ldrh	r1, [r7, #4]
 8006a0a:	887a      	ldrh	r2, [r7, #2]
 8006a0c:	8c3b      	ldrh	r3, [r7, #32]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	883c      	ldrh	r4, [r7, #0]
 8006a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	f7fe ff1b 	bl	8005858 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8006a22:	88fa      	ldrh	r2, [r7, #6]
 8006a24:	887b      	ldrh	r3, [r7, #2]
 8006a26:	4413      	add	r3, r2
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	8c3b      	ldrh	r3, [r7, #32]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	b218      	sxth	r0, r3
 8006a36:	88ba      	ldrh	r2, [r7, #4]
 8006a38:	8c3b      	ldrh	r3, [r7, #32]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b219      	sxth	r1, r3
 8006a40:	883a      	ldrh	r2, [r7, #0]
 8006a42:	8c3b      	ldrh	r3, [r7, #32]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	b21b      	sxth	r3, r3
 8006a52:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a58:	9201      	str	r2, [sp, #4]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4622      	mov	r2, r4
 8006a60:	f7ff f98e 	bl	8005d80 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	8c3b      	ldrh	r3, [r7, #32]
 8006a68:	4413      	add	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	b218      	sxth	r0, r3
 8006a6e:	88ba      	ldrh	r2, [r7, #4]
 8006a70:	8c3b      	ldrh	r3, [r7, #32]
 8006a72:	4413      	add	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	b219      	sxth	r1, r3
 8006a78:	883a      	ldrh	r2, [r7, #0]
 8006a7a:	8c3b      	ldrh	r3, [r7, #32]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006a8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a90:	9201      	str	r2, [sp, #4]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2302      	movs	r3, #2
 8006a96:	4622      	mov	r2, r4
 8006a98:	f7ff f972 	bl	8005d80 <fillCircleHelper>
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd90      	pop	{r4, r7, pc}

08006aa4 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aa8:	b08b      	sub	sp, #44	; 0x2c
 8006aaa:	af06      	add	r7, sp, #24
 8006aac:	603a      	str	r2, [r7, #0]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	80fb      	strh	r3, [r7, #6]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8006ab8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006aba:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8006abc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d922      	bls.n	8006b0a <Displ_WString+0x66>
		delta<<=1;
 8006ac4:	89fb      	ldrh	r3, [r7, #14]
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8006aca:	e01e      	b.n	8006b0a <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	88bd      	ldrh	r5, [r7, #4]
 8006ad2:	88fc      	ldrh	r4, [r7, #6]
 8006ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	466e      	mov	r6, sp
 8006ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006aea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006aee:	e886 0003 	stmia.w	r6, {r0, r1}
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	4629      	mov	r1, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff fd56 	bl	80065a8 <Displ_WChar>
        x += delta;
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	4413      	add	r3, r2
 8006b02:	80fb      	strh	r3, [r7, #6]
        str++;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	3301      	adds	r3, #1
 8006b08:	603b      	str	r3, [r7, #0]
    while(*str) {
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1dc      	bne.n	8006acc <Displ_WString+0x28>
    }
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006b1e:	b002      	add	sp, #8
 8006b20:	4770      	bx	lr
	...

08006b24 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	2b51      	cmp	r3, #81	; 0x51
 8006b32:	d00a      	beq.n	8006b4a <Displ_BackLight+0x26>
 8006b34:	2b51      	cmp	r3, #81	; 0x51
 8006b36:	dc16      	bgt.n	8006b66 <Displ_BackLight+0x42>
 8006b38:	2b46      	cmp	r3, #70	; 0x46
 8006b3a:	d008      	beq.n	8006b4e <Displ_BackLight+0x2a>
 8006b3c:	2b46      	cmp	r3, #70	; 0x46
 8006b3e:	dc12      	bgt.n	8006b66 <Displ_BackLight+0x42>
 8006b40:	2b30      	cmp	r3, #48	; 0x30
 8006b42:	d00a      	beq.n	8006b5a <Displ_BackLight+0x36>
 8006b44:	2b31      	cmp	r3, #49	; 0x31
 8006b46:	d002      	beq.n	8006b4e <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8006b48:	e00d      	b.n	8006b66 <Displ_BackLight+0x42>
		__NOP();
 8006b4a:	bf00      	nop
		break;
 8006b4c:	e00c      	b.n	8006b68 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	480a      	ldr	r0, [pc, #40]	; (8006b7c <Displ_BackLight+0x58>)
 8006b54:	f002 f86c 	bl	8008c30 <HAL_GPIO_WritePin>
		break;
 8006b58:	e006      	b.n	8006b68 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2140      	movs	r1, #64	; 0x40
 8006b5e:	4807      	ldr	r0, [pc, #28]	; (8006b7c <Displ_BackLight+0x58>)
 8006b60:	f002 f866 	bl	8008c30 <HAL_GPIO_WritePin>
		break;
 8006b64:	e000      	b.n	8006b68 <Displ_BackLight+0x44>
		break;
 8006b66:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8006b68:	2140      	movs	r1, #64	; 0x40
 8006b6a:	4804      	ldr	r0, [pc, #16]	; (8006b7c <Displ_BackLight+0x58>)
 8006b6c:	f002 f848 	bl	8008c00 <HAL_GPIO_ReadPin>
 8006b70:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40020000 	.word	0x40020000

08006b80 <testLines>:




void testLines(uint16_t color)
{
 8006b80:	b590      	push	{r4, r7, lr}
 8006b82:	b08b      	sub	sp, #44	; 0x2c
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	4603      	mov	r3, r0
 8006b88:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8006b8a:	4b7c      	ldr	r3, [pc, #496]	; (8006d7c <testLines+0x1fc>)
 8006b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b90:	617b      	str	r3, [r7, #20]
                  h = _height;
 8006b92:	4b7b      	ldr	r3, [pc, #492]	; (8006d80 <testLines+0x200>)
 8006b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b98:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f7ff f810 	bl	8005bc0 <Displ_CLS>

    x1 = y1 = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e00f      	b.n	8006bd4 <testLines+0x54>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	b218      	sxth	r0, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	b219      	sxth	r1, r3
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	b21a      	sxth	r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	b21c      	sxth	r4, r3
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	4623      	mov	r3, r4
 8006bca:	f7ff f9e2 	bl	8005f92 <Displ_Line>
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3306      	adds	r3, #6
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	dbeb      	blt.n	8006bb4 <testLines+0x34>
    x2    = w - 1;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e00f      	b.n	8006c08 <testLines+0x88>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	b218      	sxth	r0, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	b219      	sxth	r1, r3
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	b21a      	sxth	r2, r3
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	b21c      	sxth	r4, r3
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	f7ff f9c8 	bl	8005f92 <Displ_Line>
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	3306      	adds	r3, #6
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	dbeb      	blt.n	8006be8 <testLines+0x68>

    Displ_CLS(BLACK);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7fe ffd5 	bl	8005bc0 <Displ_CLS>

    x1    = w - 1;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e00f      	b.n	8006c4c <testLines+0xcc>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	b218      	sxth	r0, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	b219      	sxth	r1, r3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	b21a      	sxth	r2, r3
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	b21c      	sxth	r4, r3
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4623      	mov	r3, r4
 8006c42:	f7ff f9a6 	bl	8005f92 <Displ_Line>
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	3306      	adds	r3, #6
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dbeb      	blt.n	8006c2c <testLines+0xac>
    x2    = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	e00f      	b.n	8006c7e <testLines+0xfe>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	b218      	sxth	r0, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	b219      	sxth	r1, r3
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	b21a      	sxth	r2, r3
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	b21c      	sxth	r4, r3
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	4623      	mov	r3, r4
 8006c74:	f7ff f98d 	bl	8005f92 <Displ_Line>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	3306      	adds	r3, #6
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	dbeb      	blt.n	8006c5e <testLines+0xde>

    Displ_CLS(BLACK);
 8006c86:	2000      	movs	r0, #0
 8006c88:	f7fe ff9a 	bl	8005bc0 <Displ_CLS>

    x1    = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e00f      	b.n	8006cc0 <testLines+0x140>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	b218      	sxth	r0, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	b219      	sxth	r1, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	b21a      	sxth	r2, r3
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	b21c      	sxth	r4, r3
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4623      	mov	r3, r4
 8006cb6:	f7ff f96c 	bl	8005f92 <Displ_Line>
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3306      	adds	r3, #6
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	dbeb      	blt.n	8006ca0 <testLines+0x120>
    x2    = w - 1;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e00f      	b.n	8006cf4 <testLines+0x174>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	b218      	sxth	r0, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	b219      	sxth	r1, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	b21a      	sxth	r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	b21c      	sxth	r4, r3
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	4623      	mov	r3, r4
 8006cea:	f7ff f952 	bl	8005f92 <Displ_Line>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	3306      	adds	r3, #6
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	dbeb      	blt.n	8006cd4 <testLines+0x154>

    Displ_CLS(BLACK);
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f7fe ff5f 	bl	8005bc0 <Displ_CLS>

    x1    = w - 1;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	e00f      	b.n	8006d38 <testLines+0x1b8>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	b218      	sxth	r0, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	b219      	sxth	r1, r3
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	b21a      	sxth	r2, r3
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	b21c      	sxth	r4, r3
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	f7ff f930 	bl	8005f92 <Displ_Line>
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3306      	adds	r3, #6
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	dbeb      	blt.n	8006d18 <testLines+0x198>
    x2    = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006d44:	2300      	movs	r3, #0
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e00f      	b.n	8006d6a <testLines+0x1ea>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	b218      	sxth	r0, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b219      	sxth	r1, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	b21a      	sxth	r2, r3
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	b21c      	sxth	r4, r3
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	4623      	mov	r3, r4
 8006d60:	f7ff f917 	bl	8005f92 <Displ_Line>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3306      	adds	r3, #6
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	dbeb      	blt.n	8006d4a <testLines+0x1ca>

}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	3724      	adds	r7, #36	; 0x24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd90      	pop	{r4, r7, pc}
 8006d7c:	2000896e 	.word	0x2000896e
 8006d80:	20008970 	.word	0x20008970

08006d84 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	80fb      	strh	r3, [r7, #6]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8006d94:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <testFastLines+0x94>)
 8006d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <testFastLines+0x98>)
 8006d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006da2:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8006da4:	2000      	movs	r0, #0
 8006da6:	f7fe ff0b 	bl	8005bc0 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	e011      	b.n	8006dd4 <testFastLines+0x50>
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	b219      	sxth	r1, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	b21a      	sxth	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	b218      	sxth	r0, r3
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f7ff f8e2 	bl	8005f92 <Displ_Line>
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3305      	adds	r3, #5
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	dbe9      	blt.n	8006db0 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e011      	b.n	8006e06 <testFastLines+0x82>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	b218      	sxth	r0, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	b21a      	sxth	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	b219      	sxth	r1, r3
 8006df4:	88bb      	ldrh	r3, [r7, #4]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f7ff f8c9 	bl	8005f92 <Displ_Line>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3305      	adds	r3, #5
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	dbe9      	blt.n	8006de2 <testFastLines+0x5e>
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	2000896e 	.word	0x2000896e
 8006e1c:	20008970 	.word	0x20008970

08006e20 <testRects>:




void testRects(uint16_t color)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b08b      	sub	sp, #44	; 0x2c
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	4603      	mov	r3, r0
 8006e28:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8006e2a:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <testRects+0xa0>)
 8006e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e30:	0fda      	lsrs	r2, r3, #31
 8006e32:	4413      	add	r3, r2
 8006e34:	105b      	asrs	r3, r3, #1
 8006e36:	b21b      	sxth	r3, r3
 8006e38:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8006e3a:	4b22      	ldr	r3, [pc, #136]	; (8006ec4 <testRects+0xa4>)
 8006e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e40:	0fda      	lsrs	r2, r3, #31
 8006e42:	4413      	add	r3, r2
 8006e44:	105b      	asrs	r3, r3, #1
 8006e46:	b21b      	sxth	r3, r3
 8006e48:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f7fe feb8 	bl	8005bc0 <Displ_CLS>
	n     = min(_width, _height);
 8006e50:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <testRects+0xa4>)
 8006e52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <testRects+0xa0>)
 8006e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	bfa8      	it	ge
 8006e60:	4613      	movge	r3, r2
 8006e62:	b21b      	sxth	r3, r3
 8006e64:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8006e66:	2302      	movs	r3, #2
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	e020      	b.n	8006eae <testRects+0x8e>
		i2 = i / 2;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	0fda      	lsrs	r2, r3, #31
 8006e70:	4413      	add	r3, r2
 8006e72:	105b      	asrs	r3, r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	b218      	sxth	r0, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	b219      	sxth	r1, r3
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	b21a      	sxth	r2, r3
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	b21c      	sxth	r4, r3
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	f7ff f9a6 	bl	80061f4 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	3306      	adds	r3, #6
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	dbda      	blt.n	8006e6c <testRects+0x4c>
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	3724      	adds	r7, #36	; 0x24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd90      	pop	{r4, r7, pc}
 8006ec0:	2000896e 	.word	0x2000896e
 8006ec4:	20008970 	.word	0x20008970

08006ec8 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b08b      	sub	sp, #44	; 0x2c
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	4603      	mov	r3, r0
 8006ed0:	460a      	mov	r2, r1
 8006ed2:	80fb      	strh	r3, [r7, #6]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8006ed8:	4b30      	ldr	r3, [pc, #192]	; (8006f9c <testFilledRects+0xd4>)
 8006eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ede:	0fda      	lsrs	r2, r3, #31
 8006ee0:	4413      	add	r3, r2
 8006ee2:	105b      	asrs	r3, r3, #1
 8006ee4:	b21b      	sxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8006eea:	4b2d      	ldr	r3, [pc, #180]	; (8006fa0 <testFilledRects+0xd8>)
 8006eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ef0:	0fda      	lsrs	r2, r3, #31
 8006ef2:	4413      	add	r3, r2
 8006ef4:	105b      	asrs	r3, r3, #1
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006efc:	2000      	movs	r0, #0
 8006efe:	f7fe fe5f 	bl	8005bc0 <Displ_CLS>
	n = min(_width, _height);
 8006f02:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <testFilledRects+0xd8>)
 8006f04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <testFilledRects+0xd4>)
 8006f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	bfa8      	it	ge
 8006f12:	4613      	movge	r3, r2
 8006f14:	b21b      	sxth	r3, r3
 8006f16:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	e035      	b.n	8006f8a <testFilledRects+0xc2>
		i2    = i / 2;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	0fda      	lsrs	r2, r3, #31
 8006f22:	4413      	add	r3, r2
 8006f24:	105b      	asrs	r3, r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	b298      	uxth	r0, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	b299      	uxth	r1, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	b29c      	uxth	r4, r3
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	f7fe fc83 	bl	8005858 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	b218      	sxth	r0, r3
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	b219      	sxth	r1, r3
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	b21a      	sxth	r2, r3
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	b21c      	sxth	r4, r3
 8006f76:	88bb      	ldrh	r3, [r7, #4]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	4623      	mov	r3, r4
 8006f80:	f7ff f938 	bl	80061f4 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	3b06      	subs	r3, #6
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dcc6      	bgt.n	8006f1e <testFilledRects+0x56>
	}
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	3724      	adds	r7, #36	; 0x24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd90      	pop	{r4, r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000896e 	.word	0x2000896e
 8006fa0:	20008970 	.word	0x20008970

08006fa4 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	460a      	mov	r2, r1
 8006fae:	71fb      	strb	r3, [r7, #7]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8006fb4:	4b18      	ldr	r3, [pc, #96]	; (8007018 <testFilledCircles+0x74>)
 8006fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	4b17      	ldr	r3, [pc, #92]	; (800701c <testFilledCircles+0x78>)
 8006fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7fe fdf8 	bl	8005bc0 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e017      	b.n	8007006 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e00c      	b.n	8006ff6 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	b218      	sxth	r0, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	b219      	sxth	r1, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	b21a      	sxth	r2, r3
 8006fe8:	88bb      	ldrh	r3, [r7, #4]
 8006fea:	f7fe ff9f 	bl	8005f2c <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	dbee      	blt.n	8006fdc <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	429a      	cmp	r2, r3
 800700c:	dbe3      	blt.n	8006fd6 <testFilledCircles+0x32>
        }
    }
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	2000896e 	.word	0x2000896e
 800701c:	20008970 	.word	0x20008970

08007020 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	460a      	mov	r2, r1
 800702a:	71fb      	strb	r3, [r7, #7]
 800702c:	4613      	mov	r3, r2
 800702e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8007036:	4b19      	ldr	r3, [pc, #100]	; (800709c <testCircles+0x7c>)
 8007038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800703c:	461a      	mov	r2, r3
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	4413      	add	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8007044:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <testCircles+0x80>)
 8007046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800704a:	461a      	mov	r2, r3
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	4413      	add	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e017      	b.n	8007088 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	e00c      	b.n	8007078 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	b218      	sxth	r0, r3
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	b219      	sxth	r1, r3
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	b21a      	sxth	r2, r3
 800706a:	88bb      	ldrh	r3, [r7, #4]
 800706c:	f7fe fcd4 	bl	8005a18 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	dbee      	blt.n	800705e <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	dbe3      	blt.n	8007058 <testCircles+0x38>
        }
    }
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	2000896e 	.word	0x2000896e
 80070a0:	20008970 	.word	0x20008970

080070a4 <testTriangles>:




void testTriangles()
{
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a6:	b089      	sub	sp, #36	; 0x24
 80070a8:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 80070aa:	4b2e      	ldr	r3, [pc, #184]	; (8007164 <testTriangles+0xc0>)
 80070ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070b0:	0fda      	lsrs	r2, r3, #31
 80070b2:	4413      	add	r3, r2
 80070b4:	105b      	asrs	r3, r3, #1
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 80070bc:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <testTriangles+0xc4>)
 80070be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070c2:	0fda      	lsrs	r2, r3, #31
 80070c4:	4413      	add	r3, r2
 80070c6:	105b      	asrs	r3, r3, #1
 80070c8:	b21b      	sxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 80070ce:	2000      	movs	r0, #0
 80070d0:	f7fe fd76 	bl	8005bc0 <Displ_CLS>
    n     = min(cx, cy);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	4293      	cmp	r3, r2
 80070da:	bfa8      	it	ge
 80070dc:	4613      	movge	r3, r2
 80070de:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e035      	b.n	8007152 <testTriangles+0xae>
    	Displ_drawTriangle(
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80070f6:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8007104:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	b29b      	uxth	r3, r3
 800710e:	4413      	add	r3, r2
 8007110:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8007112:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	b29b      	uxth	r3, r3
 800711c:	4413      	add	r3, r2
 800711e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8007120:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	b291      	uxth	r1, r2
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	b292      	uxth	r2, r2
 800712a:	440a      	add	r2, r1
 800712c:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800712e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8007130:	68f9      	ldr	r1, [r7, #12]
 8007132:	10c9      	asrs	r1, r1, #3
 8007134:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8007136:	f001 011f 	and.w	r1, r1, #31
 800713a:	b289      	uxth	r1, r1
 800713c:	9102      	str	r1, [sp, #8]
 800713e:	9201      	str	r2, [sp, #4]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	4633      	mov	r3, r6
 8007144:	462a      	mov	r2, r5
 8007146:	4621      	mov	r1, r4
 8007148:	f7ff f897 	bl	800627a <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3305      	adds	r3, #5
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	dbc5      	blt.n	80070e6 <testTriangles+0x42>
    }
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007164:	2000896e 	.word	0x2000896e
 8007168:	20008970 	.word	0x20008970

0800716c <testFilledTriangles>:





void testFilledTriangles() {
 800716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8007172:	4b53      	ldr	r3, [pc, #332]	; (80072c0 <testFilledTriangles+0x154>)
 8007174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007178:	0fda      	lsrs	r2, r3, #31
 800717a:	4413      	add	r3, r2
 800717c:	105b      	asrs	r3, r3, #1
 800717e:	b21b      	sxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8007184:	4b4f      	ldr	r3, [pc, #316]	; (80072c4 <testFilledTriangles+0x158>)
 8007186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800718a:	0fda      	lsrs	r2, r3, #31
 800718c:	4413      	add	r3, r2
 800718e:	105b      	asrs	r3, r3, #1
 8007190:	b21b      	sxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8007196:	2000      	movs	r0, #0
 8007198:	f7fe fd12 	bl	8005bc0 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	bfa8      	it	ge
 80071a4:	4613      	movge	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e080      	b.n	80072ac <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	b21c      	sxth	r4, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	b21d      	sxth	r5, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	b21e      	sxth	r6, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	fa0f fc83 	sxth.w	ip, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	b21b      	sxth	r3, r3
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	b291      	uxth	r1, r2
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	b292      	uxth	r2, r2
 80071f0:	440a      	add	r2, r1
 80071f2:	b292      	uxth	r2, r2
 80071f4:	b212      	sxth	r2, r2
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	00c9      	lsls	r1, r1, #3
 80071fa:	b209      	sxth	r1, r1
 80071fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8007200:	b208      	sxth	r0, r1
 8007202:	68f9      	ldr	r1, [r7, #12]
 8007204:	10c9      	asrs	r1, r1, #3
 8007206:	b209      	sxth	r1, r1
 8007208:	f001 011f 	and.w	r1, r1, #31
 800720c:	b209      	sxth	r1, r1
 800720e:	4301      	orrs	r1, r0
 8007210:	b209      	sxth	r1, r1
 8007212:	b289      	uxth	r1, r1
 8007214:	9102      	str	r1, [sp, #8]
 8007216:	9201      	str	r2, [sp, #4]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	4663      	mov	r3, ip
 800721c:	4632      	mov	r2, r6
 800721e:	4629      	mov	r1, r5
 8007220:	4620      	mov	r0, r4
 8007222:	f7ff f864 	bl	80062ee <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	b21c      	sxth	r4, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	b29b      	uxth	r3, r3
 8007236:	b21d      	sxth	r5, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	b29b      	uxth	r3, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	b21e      	sxth	r6, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	b29b      	uxth	r3, r3
 800724e:	4413      	add	r3, r2
 8007250:	b29b      	uxth	r3, r3
 8007252:	fa0f fc83 	sxth.w	ip, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	b29b      	uxth	r3, r3
 800725e:	4413      	add	r3, r2
 8007260:	b29b      	uxth	r3, r3
 8007262:	b21a      	sxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	b299      	uxth	r1, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	b29b      	uxth	r3, r3
 800726c:	440b      	add	r3, r1
 800726e:	b29b      	uxth	r3, r3
 8007270:	b219      	sxth	r1, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	b21b      	sxth	r3, r3
 8007278:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800727c:	f023 0307 	bic.w	r3, r3, #7
 8007280:	b218      	sxth	r0, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	b21b      	sxth	r3, r3
 8007288:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800728c:	b21b      	sxth	r3, r3
 800728e:	4303      	orrs	r3, r0
 8007290:	b21b      	sxth	r3, r3
 8007292:	b29b      	uxth	r3, r3
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	9101      	str	r1, [sp, #4]
 8007298:	9200      	str	r2, [sp, #0]
 800729a:	4663      	mov	r3, ip
 800729c:	4632      	mov	r2, r6
 800729e:	4629      	mov	r1, r5
 80072a0:	4620      	mov	r0, r4
 80072a2:	f7fe ffea 	bl	800627a <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3b05      	subs	r3, #5
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b0a      	cmp	r3, #10
 80072b0:	f73f af7b 	bgt.w	80071aa <testFilledTriangles+0x3e>
    }
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072be:	bf00      	nop
 80072c0:	2000896e 	.word	0x2000896e
 80072c4:	20008970 	.word	0x20008970

080072c8 <testRoundRects>:





void testRoundRects() {
 80072c8:	b5b0      	push	{r4, r5, r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 80072ce:	4b33      	ldr	r3, [pc, #204]	; (800739c <testRoundRects+0xd4>)
 80072d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072d4:	0fda      	lsrs	r2, r3, #31
 80072d6:	4413      	add	r3, r2
 80072d8:	105b      	asrs	r3, r3, #1
 80072da:	b21b      	sxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 80072e0:	4b2f      	ldr	r3, [pc, #188]	; (80073a0 <testRoundRects+0xd8>)
 80072e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e6:	0fda      	lsrs	r2, r3, #31
 80072e8:	4413      	add	r3, r2
 80072ea:	105b      	asrs	r3, r3, #1
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80072f2:	2000      	movs	r0, #0
 80072f4:	f7fe fc64 	bl	8005bc0 <Displ_CLS>
    w     = min(_width, _height);
 80072f8:	4b29      	ldr	r3, [pc, #164]	; (80073a0 <testRoundRects+0xd8>)
 80072fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80072fe:	4b27      	ldr	r3, [pc, #156]	; (800739c <testRoundRects+0xd4>)
 8007300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007304:	4293      	cmp	r3, r2
 8007306:	bfa8      	it	ge
 8007308:	4613      	movge	r3, r2
 800730a:	b21b      	sxth	r3, r3
 800730c:	60fb      	str	r3, [r7, #12]
    red = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8007312:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	fb92 f3f3 	sdiv	r3, r2, r3
 800731c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	e031      	b.n	8007388 <testRoundRects+0xc0>
        i2 = i / 2;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	0fda      	lsrs	r2, r3, #31
 8007328:	4413      	add	r3, r2
 800732a:	105b      	asrs	r3, r3, #1
 800732c:	607b      	str	r3, [r7, #4]
        red += step;
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4413      	add	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	b29b      	uxth	r3, r3
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	b29b      	uxth	r3, r3
 8007342:	b218      	sxth	r0, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	b29b      	uxth	r3, r3
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	b29b      	uxth	r3, r3
 8007350:	b219      	sxth	r1, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	b21c      	sxth	r4, r3
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	b21d      	sxth	r5, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	da00      	bge.n	8007362 <testRoundRects+0x9a>
 8007360:	3307      	adds	r3, #7
 8007362:	10db      	asrs	r3, r3, #3
 8007364:	b21a      	sxth	r2, r3
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007370:	f023 0307 	bic.w	r3, r3, #7
 8007374:	b29b      	uxth	r3, r3
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	9200      	str	r2, [sp, #0]
 800737a:	462b      	mov	r3, r5
 800737c:	4622      	mov	r2, r4
 800737e:	f7ff fa27 	bl	80067d0 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3306      	adds	r3, #6
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	dbc9      	blt.n	8007324 <testRoundRects+0x5c>
    }
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bdb0      	pop	{r4, r5, r7, pc}
 800739a:	bf00      	nop
 800739c:	2000896e 	.word	0x2000896e
 80073a0:	20008970 	.word	0x20008970

080073a4 <testFilledRoundRects>:





void testFilledRoundRects() {
 80073a4:	b5b0      	push	{r4, r5, r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 80073aa:	4b36      	ldr	r3, [pc, #216]	; (8007484 <testFilledRoundRects+0xe0>)
 80073ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073b0:	0fda      	lsrs	r2, r3, #31
 80073b2:	4413      	add	r3, r2
 80073b4:	105b      	asrs	r3, r3, #1
 80073b6:	b21b      	sxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 80073bc:	4b32      	ldr	r3, [pc, #200]	; (8007488 <testFilledRoundRects+0xe4>)
 80073be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073c2:	0fda      	lsrs	r2, r3, #31
 80073c4:	4413      	add	r3, r2
 80073c6:	105b      	asrs	r3, r3, #1
 80073c8:	b21b      	sxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 80073ce:	2000      	movs	r0, #0
 80073d0:	f7fe fbf6 	bl	8005bc0 <Displ_CLS>
    green = 256;
 80073d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073d8:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 80073da:	4b2b      	ldr	r3, [pc, #172]	; (8007488 <testFilledRoundRects+0xe4>)
 80073dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <testFilledRoundRects+0xe0>)
 80073e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	bfa8      	it	ge
 80073ea:	4613      	movge	r3, r2
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80073f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f8:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 80073fa:	4b23      	ldr	r3, [pc, #140]	; (8007488 <testFilledRoundRects+0xe4>)
 80073fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007400:	4b20      	ldr	r3, [pc, #128]	; (8007484 <testFilledRoundRects+0xe0>)
 8007402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007406:	4293      	cmp	r3, r2
 8007408:	bfa8      	it	ge
 800740a:	4613      	movge	r3, r2
 800740c:	b21b      	sxth	r3, r3
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e02f      	b.n	8007472 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	0fda      	lsrs	r2, r3, #31
 8007416:	4413      	add	r3, r2
 8007418:	105b      	asrs	r3, r3, #1
 800741a:	603b      	str	r3, [r7, #0]
        green -= step;
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	b29a      	uxth	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	b218      	sxth	r0, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	b29a      	uxth	r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	b29b      	uxth	r3, r3
 800743e:	b219      	sxth	r1, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	b21c      	sxth	r4, r3
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	b21d      	sxth	r5, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da00      	bge.n	8007450 <testFilledRoundRects+0xac>
 800744e:	3307      	adds	r3, #7
 8007450:	10db      	asrs	r3, r3, #3
 8007452:	b21b      	sxth	r3, r3
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	00d2      	lsls	r2, r2, #3
 8007458:	b292      	uxth	r2, r2
 800745a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800745e:	b292      	uxth	r2, r2
 8007460:	9201      	str	r2, [sp, #4]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	462b      	mov	r3, r5
 8007466:	4622      	mov	r2, r4
 8007468:	f7ff faa7 	bl	80069ba <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	3b06      	subs	r3, #6
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b14      	cmp	r3, #20
 8007476:	dccc      	bgt.n	8007412 <testFilledRoundRects+0x6e>
    }
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bdb0      	pop	{r4, r5, r7, pc}
 8007482:	bf00      	nop
 8007484:	2000896e 	.word	0x2000896e
 8007488:	20008970 	.word	0x20008970

0800748c <testFillScreen>:




void testFillScreen()
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8007490:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8007494:	f7fe fb94 	bl	8005bc0 <Displ_CLS>
	Displ_CLS(GREEN);
 8007498:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800749c:	f7fe fb90 	bl	8005bc0 <Displ_CLS>
	Displ_CLS(BLUE);
 80074a0:	201f      	movs	r0, #31
 80074a2:	f7fe fb8d 	bl	8005bc0 <Displ_CLS>
	Displ_CLS(YELLOW);
 80074a6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80074aa:	f7fe fb89 	bl	8005bc0 <Displ_CLS>
	Displ_CLS(BLACK);
 80074ae:	2000      	movs	r0, #0
 80074b0:	f7fe fb86 	bl	8005bc0 <Displ_CLS>
}
 80074b4:	bf00      	nop
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <Displ_TestAll>:





void Displ_TestAll (){
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
	testFillScreen();
 80074bc:	f7ff ffe6 	bl	800748c <testFillScreen>
	testLines(CYAN);
 80074c0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80074c4:	f7ff fb5c 	bl	8006b80 <testLines>
	testFastLines(RED, BLUE);
 80074c8:	211f      	movs	r1, #31
 80074ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80074ce:	f7ff fc59 	bl	8006d84 <testFastLines>
	testRects(GREEN);
 80074d2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80074d6:	f7ff fca3 	bl	8006e20 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 80074da:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80074de:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80074e2:	f7ff fcf1 	bl	8006ec8 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 80074e6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80074ea:	200a      	movs	r0, #10
 80074ec:	f7ff fd5a 	bl	8006fa4 <testFilledCircles>
	testCircles(10, WHITE);
 80074f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074f4:	200a      	movs	r0, #10
 80074f6:	f7ff fd93 	bl	8007020 <testCircles>
	testTriangles();
 80074fa:	f7ff fdd3 	bl	80070a4 <testTriangles>
	testFilledTriangles();
 80074fe:	f7ff fe35 	bl	800716c <testFilledTriangles>
	testRoundRects();
 8007502:	f7ff fee1 	bl	80072c8 <testRoundRects>
	testFilledRoundRects();
 8007506:	f7ff ff4d 	bl	80073a4 <testFilledRoundRects>
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <Reset_Handler>:
 8007510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007548 <LoopFillZerobss+0x12>
 8007514:	480d      	ldr	r0, [pc, #52]	; (800754c <LoopFillZerobss+0x16>)
 8007516:	490e      	ldr	r1, [pc, #56]	; (8007550 <LoopFillZerobss+0x1a>)
 8007518:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <LoopFillZerobss+0x1e>)
 800751a:	2300      	movs	r3, #0
 800751c:	e002      	b.n	8007524 <LoopCopyDataInit>

0800751e <CopyDataInit>:
 800751e:	58d4      	ldr	r4, [r2, r3]
 8007520:	50c4      	str	r4, [r0, r3]
 8007522:	3304      	adds	r3, #4

08007524 <LoopCopyDataInit>:
 8007524:	18c4      	adds	r4, r0, r3
 8007526:	428c      	cmp	r4, r1
 8007528:	d3f9      	bcc.n	800751e <CopyDataInit>
 800752a:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <LoopFillZerobss+0x22>)
 800752c:	4c0b      	ldr	r4, [pc, #44]	; (800755c <LoopFillZerobss+0x26>)
 800752e:	2300      	movs	r3, #0
 8007530:	e001      	b.n	8007536 <LoopFillZerobss>

08007532 <FillZerobss>:
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	3204      	adds	r2, #4

08007536 <LoopFillZerobss>:
 8007536:	42a2      	cmp	r2, r4
 8007538:	d3fb      	bcc.n	8007532 <FillZerobss>
 800753a:	f7fd fb07 	bl	8004b4c <SystemInit>
 800753e:	f006 fad9 	bl	800daf4 <__libc_init_array>
 8007542:	f7fb ff87 	bl	8003454 <main>
 8007546:	4770      	bx	lr
 8007548:	20020000 	.word	0x20020000
 800754c:	20000000 	.word	0x20000000
 8007550:	20000228 	.word	0x20000228
 8007554:	08015940 	.word	0x08015940
 8007558:	20000228 	.word	0x20000228
 800755c:	20009acc 	.word	0x20009acc

08007560 <ADC_IRQHandler>:
 8007560:	e7fe      	b.n	8007560 <ADC_IRQHandler>
	...

08007564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <HAL_Init+0x40>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <HAL_Init+0x40>)
 800756e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <HAL_Init+0x40>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <HAL_Init+0x40>)
 800757a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800757e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <HAL_Init+0x40>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a07      	ldr	r2, [pc, #28]	; (80075a4 <HAL_Init+0x40>)
 8007586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800758a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800758c:	2003      	movs	r0, #3
 800758e:	f000 fd53 	bl	8008038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007592:	2000      	movs	r0, #0
 8007594:	f000 f808 	bl	80075a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007598:	f7fc feb2 	bl	8004300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40023c00 	.word	0x40023c00

080075a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80075b0:	4b12      	ldr	r3, [pc, #72]	; (80075fc <HAL_InitTick+0x54>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4b12      	ldr	r3, [pc, #72]	; (8007600 <HAL_InitTick+0x58>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	4619      	mov	r1, r3
 80075ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075be:	fbb3 f3f1 	udiv	r3, r3, r1
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fd6b 	bl	80080a2 <HAL_SYSTICK_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e00e      	b.n	80075f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b0f      	cmp	r3, #15
 80075da:	d80a      	bhi.n	80075f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075dc:	2200      	movs	r2, #0
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e4:	f000 fd33 	bl	800804e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80075e8:	4a06      	ldr	r2, [pc, #24]	; (8007604 <HAL_InitTick+0x5c>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e000      	b.n	80075f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000030 	.word	0x20000030
 8007600:	20000048 	.word	0x20000048
 8007604:	20000044 	.word	0x20000044

08007608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_IncTick+0x20>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	4b06      	ldr	r3, [pc, #24]	; (800762c <HAL_IncTick+0x24>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4413      	add	r3, r2
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <HAL_IncTick+0x24>)
 800761a:	6013      	str	r3, [r2, #0]
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000048 	.word	0x20000048
 800762c:	2000997c 	.word	0x2000997c

08007630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return uwTick;
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <HAL_GetTick+0x14>)
 8007636:	681b      	ldr	r3, [r3, #0]
}
 8007638:	4618      	mov	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000997c 	.word	0x2000997c

08007648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007650:	f7ff ffee 	bl	8007630 <HAL_GetTick>
 8007654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007660:	d005      	beq.n	800766e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <HAL_Delay+0x44>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800766e:	bf00      	nop
 8007670:	f7ff ffde 	bl	8007630 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	429a      	cmp	r2, r3
 800767e:	d8f7      	bhi.n	8007670 <HAL_Delay+0x28>
  {
  }
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000048 	.word	0x20000048

08007690 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e033      	b.n	800770e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fc fe4e 	bl	8004350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f003 0310 	and.w	r3, r3, #16
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d118      	bne.n	8007700 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80076d6:	f023 0302 	bic.w	r3, r3, #2
 80076da:	f043 0202 	orr.w	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa5a 	bl	8007b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
 80076fe:	e001      	b.n	8007704 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772e:	2b01      	cmp	r3, #1
 8007730:	d101      	bne.n	8007736 <HAL_ADC_Start_DMA+0x1e>
 8007732:	2302      	movs	r3, #2
 8007734:	e0e9      	b.n	800790a <HAL_ADC_Start_DMA+0x1f2>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b01      	cmp	r3, #1
 800774a:	d018      	beq.n	800777e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800775c:	4b6d      	ldr	r3, [pc, #436]	; (8007914 <HAL_ADC_Start_DMA+0x1fc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a6d      	ldr	r2, [pc, #436]	; (8007918 <HAL_ADC_Start_DMA+0x200>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	0c9a      	lsrs	r2, r3, #18
 8007768:	4613      	mov	r3, r2
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	4413      	add	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007770:	e002      	b.n	8007778 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3b01      	subs	r3, #1
 8007776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1f9      	bne.n	8007772 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778c:	d107      	bne.n	800779e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800779c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 80a1 	bne.w	80078f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077b6:	f023 0301 	bic.w	r3, r3, #1
 80077ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ec:	d106      	bne.n	80077fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	f023 0206 	bic.w	r2, r3, #6
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	645a      	str	r2, [r3, #68]	; 0x44
 80077fa:	e002      	b.n	8007802 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800780a:	4b44      	ldr	r3, [pc, #272]	; (800791c <HAL_ADC_Start_DMA+0x204>)
 800780c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	4a43      	ldr	r2, [pc, #268]	; (8007920 <HAL_ADC_Start_DMA+0x208>)
 8007814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	4a42      	ldr	r2, [pc, #264]	; (8007924 <HAL_ADC_Start_DMA+0x20c>)
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	4a41      	ldr	r2, [pc, #260]	; (8007928 <HAL_ADC_Start_DMA+0x210>)
 8007824:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800782e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800783e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800784e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	334c      	adds	r3, #76	; 0x4c
 800785a:	4619      	mov	r1, r3
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f000 fcda 	bl	8008218 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2b00      	cmp	r3, #0
 800786e:	d12a      	bne.n	80078c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2d      	ldr	r2, [pc, #180]	; (800792c <HAL_ADC_Start_DMA+0x214>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d015      	beq.n	80078a6 <HAL_ADC_Start_DMA+0x18e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2c      	ldr	r2, [pc, #176]	; (8007930 <HAL_ADC_Start_DMA+0x218>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d105      	bne.n	8007890 <HAL_ADC_Start_DMA+0x178>
 8007884:	4b25      	ldr	r3, [pc, #148]	; (800791c <HAL_ADC_Start_DMA+0x204>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <HAL_ADC_Start_DMA+0x21c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d136      	bne.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
 800789a:	4b20      	ldr	r3, [pc, #128]	; (800791c <HAL_ADC_Start_DMA+0x204>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f003 0310 	and.w	r3, r3, #16
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d130      	bne.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d129      	bne.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078c2:	609a      	str	r2, [r3, #8]
 80078c4:	e020      	b.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a18      	ldr	r2, [pc, #96]	; (800792c <HAL_ADC_Start_DMA+0x214>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d11b      	bne.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d114      	bne.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078ec:	609a      	str	r2, [r3, #8]
 80078ee:	e00b      	b.n	8007908 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	f043 0210 	orr.w	r2, r3, #16
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	f043 0201 	orr.w	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000030 	.word	0x20000030
 8007918:	431bde83 	.word	0x431bde83
 800791c:	40012300 	.word	0x40012300
 8007920:	08007d95 	.word	0x08007d95
 8007924:	08007e4f 	.word	0x08007e4f
 8007928:	08007e6b 	.word	0x08007e6b
 800792c:	40012000 	.word	0x40012000
 8007930:	40012100 	.word	0x40012100
 8007934:	40012200 	.word	0x40012200

08007938 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_ADC_ConfigChannel+0x1c>
 8007950:	2302      	movs	r3, #2
 8007952:	e113      	b.n	8007b7c <HAL_ADC_ConfigChannel+0x244>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b09      	cmp	r3, #9
 8007962:	d925      	bls.n	80079b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68d9      	ldr	r1, [r3, #12]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	4613      	mov	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4413      	add	r3, r2
 8007978:	3b1e      	subs	r3, #30
 800797a:	2207      	movs	r2, #7
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	43da      	mvns	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	400a      	ands	r2, r1
 8007988:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68d9      	ldr	r1, [r3, #12]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	4618      	mov	r0, r3
 800799c:	4603      	mov	r3, r0
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4403      	add	r3, r0
 80079a2:	3b1e      	subs	r3, #30
 80079a4:	409a      	lsls	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	60da      	str	r2, [r3, #12]
 80079ae:	e022      	b.n	80079f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6919      	ldr	r1, [r3, #16]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	4613      	mov	r3, r2
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4413      	add	r3, r2
 80079c4:	2207      	movs	r2, #7
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43da      	mvns	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	400a      	ands	r2, r1
 80079d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6919      	ldr	r1, [r3, #16]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	4618      	mov	r0, r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4403      	add	r3, r0
 80079ec:	409a      	lsls	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b06      	cmp	r3, #6
 80079fc:	d824      	bhi.n	8007a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3b05      	subs	r3, #5
 8007a10:	221f      	movs	r2, #31
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43da      	mvns	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	400a      	ands	r2, r1
 8007a1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	3b05      	subs	r3, #5
 8007a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34
 8007a46:	e04c      	b.n	8007ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b0c      	cmp	r3, #12
 8007a4e:	d824      	bhi.n	8007a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	3b23      	subs	r3, #35	; 0x23
 8007a62:	221f      	movs	r2, #31
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	43da      	mvns	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	400a      	ands	r2, r1
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	4618      	mov	r0, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	3b23      	subs	r3, #35	; 0x23
 8007a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30
 8007a98:	e023      	b.n	8007ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3b41      	subs	r3, #65	; 0x41
 8007aac:	221f      	movs	r2, #31
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	43da      	mvns	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	400a      	ands	r2, r1
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	4618      	mov	r0, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3b41      	subs	r3, #65	; 0x41
 8007ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ae2:	4b29      	ldr	r3, [pc, #164]	; (8007b88 <HAL_ADC_ConfigChannel+0x250>)
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a28      	ldr	r2, [pc, #160]	; (8007b8c <HAL_ADC_ConfigChannel+0x254>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10f      	bne.n	8007b10 <HAL_ADC_ConfigChannel+0x1d8>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b12      	cmp	r3, #18
 8007af6:	d10b      	bne.n	8007b10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <HAL_ADC_ConfigChannel+0x254>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d12b      	bne.n	8007b72 <HAL_ADC_ConfigChannel+0x23a>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1c      	ldr	r2, [pc, #112]	; (8007b90 <HAL_ADC_ConfigChannel+0x258>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <HAL_ADC_ConfigChannel+0x1f4>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b11      	cmp	r3, #17
 8007b2a:	d122      	bne.n	8007b72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <HAL_ADC_ConfigChannel+0x258>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d111      	bne.n	8007b72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007b4e:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <HAL_ADC_ConfigChannel+0x25c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a11      	ldr	r2, [pc, #68]	; (8007b98 <HAL_ADC_ConfigChannel+0x260>)
 8007b54:	fba2 2303 	umull	r2, r3, r2, r3
 8007b58:	0c9a      	lsrs	r2, r3, #18
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b64:	e002      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f9      	bne.n	8007b66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40012300 	.word	0x40012300
 8007b8c:	40012000 	.word	0x40012000
 8007b90:	10000012 	.word	0x10000012
 8007b94:	20000030 	.word	0x20000030
 8007b98:	431bde83 	.word	0x431bde83

08007b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ba4:	4b79      	ldr	r3, [pc, #484]	; (8007d8c <ADC_Init+0x1f0>)
 8007ba6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	021a      	lsls	r2, r3, #8
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6859      	ldr	r1, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6899      	ldr	r1, [r3, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	4a58      	ldr	r2, [pc, #352]	; (8007d90 <ADC_Init+0x1f4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d022      	beq.n	8007c7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6899      	ldr	r1, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6899      	ldr	r1, [r3, #8]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	609a      	str	r2, [r3, #8]
 8007c78:	e00f      	b.n	8007c9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0202 	bic.w	r2, r2, #2
 8007ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6899      	ldr	r1, [r3, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7e1b      	ldrb	r3, [r3, #24]
 8007cb4:	005a      	lsls	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007ce6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6859      	ldr	r1, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	035a      	lsls	r2, r3, #13
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	e007      	b.n	8007d10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	051a      	lsls	r2, r3, #20
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6899      	ldr	r1, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d52:	025a      	lsls	r2, r3, #9
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6899      	ldr	r1, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	029a      	lsls	r2, r3, #10
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	609a      	str	r2, [r3, #8]
}
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	40012300 	.word	0x40012300
 8007d90:	0f000001 	.word	0x0f000001

08007d94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d13c      	bne.n	8007e28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d12b      	bne.n	8007e20 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d127      	bne.n	8007e20 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d006      	beq.n	8007dec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d119      	bne.n	8007e20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 0220 	bic.w	r2, r2, #32
 8007dfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f043 0201 	orr.w	r2, r3, #1
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7fc f943 	bl	80040ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e26:	e00e      	b.n	8007e46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7fc f979 	bl	800412c <HAL_ADC_ErrorCallback>
}
 8007e3a:	e004      	b.n	8007e46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7fc f945 	bl	80040ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2240      	movs	r2, #64	; 0x40
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e82:	f043 0204 	orr.w	r2, r3, #4
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7fc f94e 	bl	800412c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <__NVIC_SetPriorityGrouping+0x44>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007eca:	4a04      	ldr	r2, [pc, #16]	; (8007edc <__NVIC_SetPriorityGrouping+0x44>)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	60d3      	str	r3, [r2, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	e000ed00 	.word	0xe000ed00

08007ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	f003 0307 	and.w	r3, r3, #7
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	e000ed00 	.word	0xe000ed00

08007efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	db0b      	blt.n	8007f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	f003 021f 	and.w	r2, r3, #31
 8007f14:	4907      	ldr	r1, [pc, #28]	; (8007f34 <__NVIC_EnableIRQ+0x38>)
 8007f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	e000e100 	.word	0xe000e100

08007f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	db0a      	blt.n	8007f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	490c      	ldr	r1, [pc, #48]	; (8007f84 <__NVIC_SetPriority+0x4c>)
 8007f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f56:	0112      	lsls	r2, r2, #4
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f60:	e00a      	b.n	8007f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	4908      	ldr	r1, [pc, #32]	; (8007f88 <__NVIC_SetPriority+0x50>)
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	0112      	lsls	r2, r2, #4
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	440b      	add	r3, r1
 8007f76:	761a      	strb	r2, [r3, #24]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	e000e100 	.word	0xe000e100
 8007f88:	e000ed00 	.word	0xe000ed00

08007f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f1c3 0307 	rsb	r3, r3, #7
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	bf28      	it	cs
 8007faa:	2304      	movcs	r3, #4
 8007fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	2b06      	cmp	r3, #6
 8007fb4:	d902      	bls.n	8007fbc <NVIC_EncodePriority+0x30>
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3b03      	subs	r3, #3
 8007fba:	e000      	b.n	8007fbe <NVIC_EncodePriority+0x32>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	43da      	mvns	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	401a      	ands	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	fa01 f303 	lsl.w	r3, r1, r3
 8007fde:	43d9      	mvns	r1, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fe4:	4313      	orrs	r3, r2
         );
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3724      	adds	r7, #36	; 0x24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008004:	d301      	bcc.n	800800a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008006:	2301      	movs	r3, #1
 8008008:	e00f      	b.n	800802a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <SysTick_Config+0x40>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3b01      	subs	r3, #1
 8008010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008012:	210f      	movs	r1, #15
 8008014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008018:	f7ff ff8e 	bl	8007f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <SysTick_Config+0x40>)
 800801e:	2200      	movs	r2, #0
 8008020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008022:	4b04      	ldr	r3, [pc, #16]	; (8008034 <SysTick_Config+0x40>)
 8008024:	2207      	movs	r2, #7
 8008026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	e000e010 	.word	0xe000e010

08008038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ff29 	bl	8007e98 <__NVIC_SetPriorityGrouping>
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800804e:	b580      	push	{r7, lr}
 8008050:	b086      	sub	sp, #24
 8008052:	af00      	add	r7, sp, #0
 8008054:	4603      	mov	r3, r0
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008060:	f7ff ff3e 	bl	8007ee0 <__NVIC_GetPriorityGrouping>
 8008064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7ff ff8e 	bl	8007f8c <NVIC_EncodePriority>
 8008070:	4602      	mov	r2, r0
 8008072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff ff5d 	bl	8007f38 <__NVIC_SetPriority>
}
 800807e:	bf00      	nop
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	4603      	mov	r3, r0
 800808e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff ff31 	bl	8007efc <__NVIC_EnableIRQ>
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff ffa2 	bl	8007ff4 <SysTick_Config>
 80080b0:	4603      	mov	r3, r0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80080c8:	f7ff fab2 	bl	8007630 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e099      	b.n	800820c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0201 	bic.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080f8:	e00f      	b.n	800811a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080fa:	f7ff fa99 	bl	8007630 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b05      	cmp	r3, #5
 8008106:	d908      	bls.n	800811a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2203      	movs	r2, #3
 8008112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e078      	b.n	800820c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e8      	bne.n	80080fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4b38      	ldr	r3, [pc, #224]	; (8008214 <HAL_DMA_Init+0x158>)
 8008134:	4013      	ands	r3, r2
 8008136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800815e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b04      	cmp	r3, #4
 8008172:	d107      	bne.n	8008184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817c:	4313      	orrs	r3, r2
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d117      	bne.n	80081de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fb0d 	bl	80087e0 <DMA_CheckFifoParam>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2240      	movs	r2, #64	; 0x40
 80081d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80081da:	2301      	movs	r3, #1
 80081dc:	e016      	b.n	800820c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fac4 	bl	8008774 <DMA_CalcBaseAndBitshift>
 80081ec:	4603      	mov	r3, r0
 80081ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f4:	223f      	movs	r2, #63	; 0x3f
 80081f6:	409a      	lsls	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	f010803f 	.word	0xf010803f

08008218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <HAL_DMA_Start_IT+0x26>
 800823a:	2302      	movs	r3, #2
 800823c:	e040      	b.n	80082c0 <HAL_DMA_Start_IT+0xa8>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d12f      	bne.n	80082b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fa56 	bl	8008718 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008270:	223f      	movs	r2, #63	; 0x3f
 8008272:	409a      	lsls	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0216 	orr.w	r2, r2, #22
 8008286:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0208 	orr.w	r2, r2, #8
 800829e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e005      	b.n	80082be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80082ba:	2302      	movs	r3, #2
 80082bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80082d6:	f7ff f9ab 	bl	8007630 <HAL_GetTick>
 80082da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d008      	beq.n	80082fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2280      	movs	r2, #128	; 0x80
 80082ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e052      	b.n	80083a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0216 	bic.w	r2, r2, #22
 8008308:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695a      	ldr	r2, [r3, #20]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008318:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <HAL_DMA_Abort+0x62>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008326:	2b00      	cmp	r3, #0
 8008328:	d007      	beq.n	800833a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0208 	bic.w	r2, r2, #8
 8008338:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0201 	bic.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800834a:	e013      	b.n	8008374 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800834c:	f7ff f970 	bl	8007630 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b05      	cmp	r3, #5
 8008358:	d90c      	bls.n	8008374 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2203      	movs	r2, #3
 8008364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e015      	b.n	80083a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e4      	bne.n	800834c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008386:	223f      	movs	r2, #63	; 0x3f
 8008388:	409a      	lsls	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d004      	beq.n	80083c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2280      	movs	r2, #128	; 0x80
 80083c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e00c      	b.n	80083e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2205      	movs	r2, #5
 80083ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80083f8:	4b8e      	ldr	r3, [pc, #568]	; (8008634 <HAL_DMA_IRQHandler+0x248>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a8e      	ldr	r2, [pc, #568]	; (8008638 <HAL_DMA_IRQHandler+0x24c>)
 80083fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008402:	0a9b      	lsrs	r3, r3, #10
 8008404:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008416:	2208      	movs	r2, #8
 8008418:	409a      	lsls	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4013      	ands	r3, r2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01a      	beq.n	8008458 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d013      	beq.n	8008458 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0204 	bic.w	r2, r2, #4
 800843e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008444:	2208      	movs	r2, #8
 8008446:	409a      	lsls	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	f043 0201 	orr.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800845c:	2201      	movs	r2, #1
 800845e:	409a      	lsls	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4013      	ands	r3, r2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d012      	beq.n	800848e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00b      	beq.n	800848e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847a:	2201      	movs	r2, #1
 800847c:	409a      	lsls	r2, r3
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	f043 0202 	orr.w	r2, r3, #2
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008492:	2204      	movs	r2, #4
 8008494:	409a      	lsls	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4013      	ands	r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d012      	beq.n	80084c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b0:	2204      	movs	r2, #4
 80084b2:	409a      	lsls	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084bc:	f043 0204 	orr.w	r2, r3, #4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c8:	2210      	movs	r2, #16
 80084ca:	409a      	lsls	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d043      	beq.n	800855c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d03c      	beq.n	800855c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e6:	2210      	movs	r2, #16
 80084e8:	409a      	lsls	r2, r3
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d018      	beq.n	800852e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d108      	bne.n	800851c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d024      	beq.n	800855c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
 800851a:	e01f      	b.n	800855c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01b      	beq.n	800855c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
 800852c:	e016      	b.n	800855c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0208 	bic.w	r2, r2, #8
 800854a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008560:	2220      	movs	r2, #32
 8008562:	409a      	lsls	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 808f 	beq.w	800868c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8087 	beq.w	800868c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	2220      	movs	r2, #32
 8008584:	409a      	lsls	r2, r3
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b05      	cmp	r3, #5
 8008594:	d136      	bne.n	8008604 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0216 	bic.w	r2, r2, #22
 80085a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695a      	ldr	r2, [r3, #20]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <HAL_DMA_IRQHandler+0x1da>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0208 	bic.w	r2, r2, #8
 80085d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085da:	223f      	movs	r2, #63	; 0x3f
 80085dc:	409a      	lsls	r2, r3
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d07e      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4798      	blx	r3
        }
        return;
 8008602:	e079      	b.n	80086f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01d      	beq.n	800864e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10d      	bne.n	800863c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008624:	2b00      	cmp	r3, #0
 8008626:	d031      	beq.n	800868c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
 8008630:	e02c      	b.n	800868c <HAL_DMA_IRQHandler+0x2a0>
 8008632:	bf00      	nop
 8008634:	20000030 	.word	0x20000030
 8008638:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d023      	beq.n	800868c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3
 800864c:	e01e      	b.n	800868c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10f      	bne.n	800867c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0210 	bic.w	r2, r2, #16
 800866a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008690:	2b00      	cmp	r3, #0
 8008692:	d032      	beq.n	80086fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d022      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2205      	movs	r2, #5
 80086a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d307      	bcc.n	80086d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f2      	bne.n	80086b8 <HAL_DMA_IRQHandler+0x2cc>
 80086d2:	e000      	b.n	80086d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80086d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
 80086f6:	e000      	b.n	80086fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80086f8:	bf00      	nop
    }
  }
}
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008734:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d108      	bne.n	8008758 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008756:	e007      	b.n	8008768 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	60da      	str	r2, [r3, #12]
}
 8008768:	bf00      	nop
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	3b10      	subs	r3, #16
 8008784:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <DMA_CalcBaseAndBitshift+0x64>)
 8008786:	fba2 2303 	umull	r2, r3, r2, r3
 800878a:	091b      	lsrs	r3, r3, #4
 800878c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800878e:	4a13      	ldr	r2, [pc, #76]	; (80087dc <DMA_CalcBaseAndBitshift+0x68>)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d909      	bls.n	80087b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	659a      	str	r2, [r3, #88]	; 0x58
 80087b4:	e007      	b.n	80087c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80087be:	f023 0303 	bic.w	r3, r3, #3
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	aaaaaaab 	.word	0xaaaaaaab
 80087dc:	08015540 	.word	0x08015540

080087e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d11f      	bne.n	800883a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d856      	bhi.n	80088ae <DMA_CheckFifoParam+0xce>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <DMA_CheckFifoParam+0x28>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	08008819 	.word	0x08008819
 800880c:	0800882b 	.word	0x0800882b
 8008810:	08008819 	.word	0x08008819
 8008814:	080088af 	.word	0x080088af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d046      	beq.n	80088b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008828:	e043      	b.n	80088b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008832:	d140      	bne.n	80088b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008838:	e03d      	b.n	80088b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008842:	d121      	bne.n	8008888 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b03      	cmp	r3, #3
 8008848:	d837      	bhi.n	80088ba <DMA_CheckFifoParam+0xda>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <DMA_CheckFifoParam+0x70>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008861 	.word	0x08008861
 8008854:	08008867 	.word	0x08008867
 8008858:	08008861 	.word	0x08008861
 800885c:	08008879 	.word	0x08008879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
      break;
 8008864:	e030      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d025      	beq.n	80088be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008876:	e022      	b.n	80088be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008880:	d11f      	bne.n	80088c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008886:	e01c      	b.n	80088c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d903      	bls.n	8008896 <DMA_CheckFifoParam+0xb6>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b03      	cmp	r3, #3
 8008892:	d003      	beq.n	800889c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008894:	e018      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	73fb      	strb	r3, [r7, #15]
      break;
 800889a:	e015      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00e      	beq.n	80088c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e00b      	b.n	80088c6 <DMA_CheckFifoParam+0xe6>
      break;
 80088ae:	bf00      	nop
 80088b0:	e00a      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      break;
 80088b2:	bf00      	nop
 80088b4:	e008      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      break;
 80088b6:	bf00      	nop
 80088b8:	e006      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      break;
 80088ba:	bf00      	nop
 80088bc:	e004      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      break;
 80088be:	bf00      	nop
 80088c0:	e002      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80088c2:	bf00      	nop
 80088c4:	e000      	b.n	80088c8 <DMA_CheckFifoParam+0xe8>
      break;
 80088c6:	bf00      	nop
    }
  } 
  
  return status; 
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088d8:	b480      	push	{r7}
 80088da:	b089      	sub	sp, #36	; 0x24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
 80088f2:	e165      	b.n	8008bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80088f4:	2201      	movs	r2, #1
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	fa02 f303 	lsl.w	r3, r2, r3
 80088fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4013      	ands	r3, r2
 8008906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	429a      	cmp	r2, r3
 800890e:	f040 8154 	bne.w	8008bba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b01      	cmp	r3, #1
 800891c:	d005      	beq.n	800892a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008926:	2b02      	cmp	r3, #2
 8008928:	d130      	bne.n	800898c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	2203      	movs	r2, #3
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	43db      	mvns	r3, r3
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	4013      	ands	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	fa02 f303 	lsl.w	r3, r2, r3
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	4313      	orrs	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008960:	2201      	movs	r2, #1
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	43db      	mvns	r3, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4013      	ands	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	f003 0201 	and.w	r2, r3, #1
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	4313      	orrs	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	2b03      	cmp	r3, #3
 8008996:	d017      	beq.n	80089c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	2203      	movs	r2, #3
 80089a4:	fa02 f303 	lsl.w	r3, r2, r3
 80089a8:	43db      	mvns	r3, r3
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	4013      	ands	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4313      	orrs	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d123      	bne.n	8008a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	08da      	lsrs	r2, r3, #3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3208      	adds	r2, #8
 80089dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	220f      	movs	r2, #15
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	43db      	mvns	r3, r3
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	4013      	ands	r3, r2
 80089f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	08da      	lsrs	r2, r3, #3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3208      	adds	r2, #8
 8008a16:	69b9      	ldr	r1, [r7, #24]
 8008a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	2203      	movs	r2, #3
 8008a28:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2c:	43db      	mvns	r3, r3
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	4013      	ands	r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f003 0203 	and.w	r2, r3, #3
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80ae 	beq.w	8008bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	4b5d      	ldr	r3, [pc, #372]	; (8008bd8 <HAL_GPIO_Init+0x300>)
 8008a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a66:	4a5c      	ldr	r2, [pc, #368]	; (8008bd8 <HAL_GPIO_Init+0x300>)
 8008a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a6e:	4b5a      	ldr	r3, [pc, #360]	; (8008bd8 <HAL_GPIO_Init+0x300>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a7a:	4a58      	ldr	r2, [pc, #352]	; (8008bdc <HAL_GPIO_Init+0x304>)
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	089b      	lsrs	r3, r3, #2
 8008a80:	3302      	adds	r3, #2
 8008a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	220f      	movs	r2, #15
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a4f      	ldr	r2, [pc, #316]	; (8008be0 <HAL_GPIO_Init+0x308>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d025      	beq.n	8008af2 <HAL_GPIO_Init+0x21a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a4e      	ldr	r2, [pc, #312]	; (8008be4 <HAL_GPIO_Init+0x30c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d01f      	beq.n	8008aee <HAL_GPIO_Init+0x216>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a4d      	ldr	r2, [pc, #308]	; (8008be8 <HAL_GPIO_Init+0x310>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d019      	beq.n	8008aea <HAL_GPIO_Init+0x212>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a4c      	ldr	r2, [pc, #304]	; (8008bec <HAL_GPIO_Init+0x314>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d013      	beq.n	8008ae6 <HAL_GPIO_Init+0x20e>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a4b      	ldr	r2, [pc, #300]	; (8008bf0 <HAL_GPIO_Init+0x318>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00d      	beq.n	8008ae2 <HAL_GPIO_Init+0x20a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a4a      	ldr	r2, [pc, #296]	; (8008bf4 <HAL_GPIO_Init+0x31c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d007      	beq.n	8008ade <HAL_GPIO_Init+0x206>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a49      	ldr	r2, [pc, #292]	; (8008bf8 <HAL_GPIO_Init+0x320>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d101      	bne.n	8008ada <HAL_GPIO_Init+0x202>
 8008ad6:	2306      	movs	r3, #6
 8008ad8:	e00c      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008ada:	2307      	movs	r3, #7
 8008adc:	e00a      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008ade:	2305      	movs	r3, #5
 8008ae0:	e008      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008ae2:	2304      	movs	r3, #4
 8008ae4:	e006      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e004      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e002      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <HAL_GPIO_Init+0x21c>
 8008af2:	2300      	movs	r3, #0
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	f002 0203 	and.w	r2, r2, #3
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	4093      	lsls	r3, r2
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b04:	4935      	ldr	r1, [pc, #212]	; (8008bdc <HAL_GPIO_Init+0x304>)
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	089b      	lsrs	r3, r3, #2
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b12:	4b3a      	ldr	r3, [pc, #232]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b36:	4a31      	ldr	r2, [pc, #196]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b3c:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	43db      	mvns	r3, r3
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b60:	4a26      	ldr	r2, [pc, #152]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008b66:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	43db      	mvns	r3, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4013      	ands	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b8a:	4a1c      	ldr	r2, [pc, #112]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008bb4:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <HAL_GPIO_Init+0x324>)
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	2b0f      	cmp	r3, #15
 8008bc4:	f67f ae96 	bls.w	80088f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	3724      	adds	r7, #36	; 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	40013800 	.word	0x40013800
 8008be0:	40020000 	.word	0x40020000
 8008be4:	40020400 	.word	0x40020400
 8008be8:	40020800 	.word	0x40020800
 8008bec:	40020c00 	.word	0x40020c00
 8008bf0:	40021000 	.word	0x40021000
 8008bf4:	40021400 	.word	0x40021400
 8008bf8:	40021800 	.word	0x40021800
 8008bfc:	40013c00 	.word	0x40013c00

08008c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	887b      	ldrh	r3, [r7, #2]
 8008c12:	4013      	ands	r3, r2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
 8008c1c:	e001      	b.n	8008c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	807b      	strh	r3, [r7, #2]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008c40:	787b      	ldrb	r3, [r7, #1]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c46:	887a      	ldrh	r2, [r7, #2]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008c4c:	e003      	b.n	8008c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008c4e:	887b      	ldrh	r3, [r7, #2]
 8008c50:	041a      	lsls	r2, r3, #16
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	619a      	str	r2, [r3, #24]
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c74:	887a      	ldrh	r2, [r7, #2]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	041a      	lsls	r2, r3, #16
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	43d9      	mvns	r1, r3
 8008c80:	887b      	ldrh	r3, [r7, #2]
 8008c82:	400b      	ands	r3, r1
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	619a      	str	r2, [r3, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
	...

08008c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008ca2:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d006      	beq.n	8008cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008cae:	4a05      	ldr	r2, [pc, #20]	; (8008cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fb f9da 	bl	8004070 <HAL_GPIO_EXTI_Callback>
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40013c00 	.word	0x40013c00

08008cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e12b      	b.n	8008f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fb fc42 	bl	8004578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2224      	movs	r2, #36	; 0x24
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d2c:	f001 f87c 	bl	8009e28 <HAL_RCC_GetPCLK1Freq>
 8008d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4a81      	ldr	r2, [pc, #516]	; (8008f3c <HAL_I2C_Init+0x274>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d807      	bhi.n	8008d4c <HAL_I2C_Init+0x84>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4a80      	ldr	r2, [pc, #512]	; (8008f40 <HAL_I2C_Init+0x278>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bf94      	ite	ls
 8008d44:	2301      	movls	r3, #1
 8008d46:	2300      	movhi	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	e006      	b.n	8008d5a <HAL_I2C_Init+0x92>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a7d      	ldr	r2, [pc, #500]	; (8008f44 <HAL_I2C_Init+0x27c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	bf94      	ite	ls
 8008d54:	2301      	movls	r3, #1
 8008d56:	2300      	movhi	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e0e7      	b.n	8008f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4a78      	ldr	r2, [pc, #480]	; (8008f48 <HAL_I2C_Init+0x280>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	0c9b      	lsrs	r3, r3, #18
 8008d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	4a6a      	ldr	r2, [pc, #424]	; (8008f3c <HAL_I2C_Init+0x274>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d802      	bhi.n	8008d9c <HAL_I2C_Init+0xd4>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	e009      	b.n	8008db0 <HAL_I2C_Init+0xe8>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008da2:	fb02 f303 	mul.w	r3, r2, r3
 8008da6:	4a69      	ldr	r2, [pc, #420]	; (8008f4c <HAL_I2C_Init+0x284>)
 8008da8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dac:	099b      	lsrs	r3, r3, #6
 8008dae:	3301      	adds	r3, #1
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6812      	ldr	r2, [r2, #0]
 8008db4:	430b      	orrs	r3, r1
 8008db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	495c      	ldr	r1, [pc, #368]	; (8008f3c <HAL_I2C_Init+0x274>)
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	d819      	bhi.n	8008e04 <HAL_I2C_Init+0x13c>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	1e59      	subs	r1, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8008dde:	1c59      	adds	r1, r3, #1
 8008de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008de4:	400b      	ands	r3, r1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <HAL_I2C_Init+0x138>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1e59      	subs	r1, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008df8:	3301      	adds	r3, #1
 8008dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dfe:	e051      	b.n	8008ea4 <HAL_I2C_Init+0x1dc>
 8008e00:	2304      	movs	r3, #4
 8008e02:	e04f      	b.n	8008ea4 <HAL_I2C_Init+0x1dc>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d111      	bne.n	8008e30 <HAL_I2C_Init+0x168>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	1e58      	subs	r0, r3, #1
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6859      	ldr	r1, [r3, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	440b      	add	r3, r1
 8008e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e1e:	3301      	adds	r3, #1
 8008e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	e012      	b.n	8008e56 <HAL_I2C_Init+0x18e>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	1e58      	subs	r0, r3, #1
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6859      	ldr	r1, [r3, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	0099      	lsls	r1, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e46:	3301      	adds	r3, #1
 8008e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bf0c      	ite	eq
 8008e50:	2301      	moveq	r3, #1
 8008e52:	2300      	movne	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <HAL_I2C_Init+0x196>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e022      	b.n	8008ea4 <HAL_I2C_Init+0x1dc>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10e      	bne.n	8008e84 <HAL_I2C_Init+0x1bc>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	1e58      	subs	r0, r3, #1
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6859      	ldr	r1, [r3, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	440b      	add	r3, r1
 8008e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e78:	3301      	adds	r3, #1
 8008e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e82:	e00f      	b.n	8008ea4 <HAL_I2C_Init+0x1dc>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	1e58      	subs	r0, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6859      	ldr	r1, [r3, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	0099      	lsls	r1, r3, #2
 8008e94:	440b      	add	r3, r1
 8008e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	6809      	ldr	r1, [r1, #0]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69da      	ldr	r2, [r3, #28]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6911      	ldr	r1, [r2, #16]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68d2      	ldr	r2, [r2, #12]
 8008ede:	4311      	orrs	r1, r2
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6812      	ldr	r2, [r2, #0]
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695a      	ldr	r2, [r3, #20]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	000186a0 	.word	0x000186a0
 8008f40:	001e847f 	.word	0x001e847f
 8008f44:	003d08ff 	.word	0x003d08ff
 8008f48:	431bde83 	.word	0x431bde83
 8008f4c:	10624dd3 	.word	0x10624dd3

08008f50 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08c      	sub	sp, #48	; 0x30
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	4608      	mov	r0, r1
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4603      	mov	r3, r0
 8008f60:	817b      	strh	r3, [r7, #10]
 8008f62:	460b      	mov	r3, r1
 8008f64:	813b      	strh	r3, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f6a:	f7fe fb61 	bl	8007630 <HAL_GetTick>
 8008f6e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	f040 8176 	bne.w	800926e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f82:	4b95      	ldr	r3, [pc, #596]	; (80091d8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	4a94      	ldr	r2, [pc, #592]	; (80091dc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	0a1a      	lsrs	r2, r3, #8
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009a      	lsls	r2, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d116      	bne.n	8008fd6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f043 0220 	orr.w	r2, r3, #32
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e14c      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d0db      	beq.n	8008f9c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_I2C_Mem_Read_DMA+0xa2>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e13e      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b01      	cmp	r3, #1
 8009006:	d007      	beq.n	8009018 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2222      	movs	r2, #34	; 0x22
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2240      	movs	r2, #64	; 0x40
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904e:	b29a      	uxth	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a62      	ldr	r2, [pc, #392]	; (80091e0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8009058:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800905a:	897a      	ldrh	r2, [r7, #10]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8009060:	893a      	ldrh	r2, [r7, #8]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80cc 	beq.w	8009214 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02d      	beq.n	80090e0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	4a56      	ldr	r2, [pc, #344]	; (80091e4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800908a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009090:	4a55      	ldr	r2, [pc, #340]	; (80091e8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8009092:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	2200      	movs	r2, #0
 800909a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	2200      	movs	r2, #0
 80090a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	2200      	movs	r2, #0
 80090aa:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	2200      	movs	r2, #0
 80090b2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3310      	adds	r3, #16
 80090be:	4619      	mov	r1, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	461a      	mov	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ca:	f7ff f8a5 	bl	8008218 <HAL_DMA_Start_IT>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80090d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 8087 	bne.w	80091ec <HAL_I2C_Mem_Read_DMA+0x29c>
 80090de:	e013      	b.n	8009108 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0b3      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009108:	88f8      	ldrh	r0, [r7, #6]
 800910a:	893a      	ldrh	r2, [r7, #8]
 800910c:	8979      	ldrh	r1, [r7, #10]
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	2323      	movs	r3, #35	; 0x23
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	4603      	mov	r3, r0
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fa03 	bl	8009524 <I2C_RequestMemoryRead>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d023      	beq.n	800916c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff f93d 	bl	80083a8 <HAL_DMA_Abort_IT>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	2200      	movs	r2, #0
 800913a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800914a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e081      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009170:	2b01      	cmp	r3, #1
 8009172:	d108      	bne.n	8009186 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	e007      	b.n	8009196 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009194:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009196:	2300      	movs	r3, #0
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	61bb      	str	r3, [r7, #24]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091c2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091d2:	605a      	str	r2, [r3, #4]
 80091d4:	e049      	b.n	800926a <HAL_I2C_Mem_Read_DMA+0x31a>
 80091d6:	bf00      	nop
 80091d8:	20000030 	.word	0x20000030
 80091dc:	14f8b589 	.word	0x14f8b589
 80091e0:	ffff0000 	.word	0xffff0000
 80091e4:	080096f5 	.word	0x080096f5
 80091e8:	0800989f 	.word	0x0800989f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009200:	f043 0210 	orr.w	r2, r3, #16
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e02d      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009214:	88f8      	ldrh	r0, [r7, #6]
 8009216:	893a      	ldrh	r2, [r7, #8]
 8009218:	8979      	ldrh	r1, [r7, #10]
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	2323      	movs	r3, #35	; 0x23
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4603      	mov	r3, r0
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f97d 	bl	8009524 <I2C_RequestMemoryRead>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e01d      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009258:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e000      	b.n	8009270 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800926e:	2302      	movs	r3, #2
  }
}
 8009270:	4618      	mov	r0, r3
 8009272:	3728      	adds	r7, #40	; 0x28
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	; 0x28
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	460b      	mov	r3, r1
 8009286:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009288:	f7fe f9d2 	bl	8007630 <HAL_GetTick>
 800928c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b20      	cmp	r3, #32
 800929c:	f040 8111 	bne.w	80094c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	2319      	movs	r3, #25
 80092a6:	2201      	movs	r2, #1
 80092a8:	4988      	ldr	r1, [pc, #544]	; (80094cc <HAL_I2C_IsDeviceReady+0x254>)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fb34 	bl	8009918 <I2C_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80092b6:	2302      	movs	r3, #2
 80092b8:	e104      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_I2C_IsDeviceReady+0x50>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e0fd      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d007      	beq.n	80092ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2224      	movs	r2, #36	; 0x24
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a70      	ldr	r2, [pc, #448]	; (80094d0 <HAL_I2C_IsDeviceReady+0x258>)
 8009310:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009320:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 faf2 	bl	8009918 <I2C_WaitOnFlagUntilTimeout>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00d      	beq.n	8009356 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009348:	d103      	bne.n	8009352 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009350:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e0b6      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009356:	897b      	ldrh	r3, [r7, #10]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	461a      	mov	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009364:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009366:	f7fe f963 	bl	8007630 <HAL_GetTick>
 800936a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b02      	cmp	r3, #2
 8009378:	bf0c      	ite	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	2300      	movne	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800938c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009390:	bf0c      	ite	eq
 8009392:	2301      	moveq	r3, #1
 8009394:	2300      	movne	r3, #0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800939a:	e025      	b.n	80093e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800939c:	f7fe f948 	bl	8007630 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d302      	bcc.n	80093b2 <HAL_I2C_IsDeviceReady+0x13a>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d103      	bne.n	80093ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	22a0      	movs	r2, #160	; 0xa0
 80093b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	bf0c      	ite	eq
 80093c8:	2301      	moveq	r3, #1
 80093ca:	2300      	movne	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093de:	bf0c      	ite	eq
 80093e0:	2301      	moveq	r3, #1
 80093e2:	2300      	movne	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2ba0      	cmp	r3, #160	; 0xa0
 80093f2:	d005      	beq.n	8009400 <HAL_I2C_IsDeviceReady+0x188>
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_I2C_IsDeviceReady+0x188>
 80093fa:	7dbb      	ldrb	r3, [r7, #22]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0cd      	beq.n	800939c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2220      	movs	r2, #32
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b02      	cmp	r3, #2
 8009414:	d129      	bne.n	800946a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009424:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009426:	2300      	movs	r3, #0
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	2319      	movs	r3, #25
 8009442:	2201      	movs	r2, #1
 8009444:	4921      	ldr	r1, [pc, #132]	; (80094cc <HAL_I2C_IsDeviceReady+0x254>)
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 fa66 	bl	8009918 <I2C_WaitOnFlagUntilTimeout>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e036      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2220      	movs	r2, #32
 800945a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	e02c      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009478:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009482:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2319      	movs	r3, #25
 800948a:	2201      	movs	r2, #1
 800948c:	490f      	ldr	r1, [pc, #60]	; (80094cc <HAL_I2C_IsDeviceReady+0x254>)
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fa42 	bl	8009918 <I2C_WaitOnFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e012      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	3301      	adds	r3, #1
 80094a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	f4ff af32 	bcc.w	8009312 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80094c2:	2302      	movs	r3, #2
  }
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	00100002 	.word	0x00100002
 80094d0:	ffff0000 	.word	0xffff0000

080094d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af02      	add	r7, sp, #8
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	4608      	mov	r0, r1
 800952e:	4611      	mov	r1, r2
 8009530:	461a      	mov	r2, r3
 8009532:	4603      	mov	r3, r0
 8009534:	817b      	strh	r3, [r7, #10]
 8009536:	460b      	mov	r3, r1
 8009538:	813b      	strh	r3, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800954c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800955c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	2200      	movs	r2, #0
 8009566:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f9d4 	bl	8009918 <I2C_WaitOnFlagUntilTimeout>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00d      	beq.n	8009592 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009584:	d103      	bne.n	800958e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e0aa      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009592:	897b      	ldrh	r3, [r7, #10]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	6a3a      	ldr	r2, [r7, #32]
 80095a6:	4952      	ldr	r1, [pc, #328]	; (80096f0 <I2C_RequestMemoryRead+0x1cc>)
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fa0c 	bl	80099c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e097      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d0:	6a39      	ldr	r1, [r7, #32]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fa76 	bl	8009ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00d      	beq.n	80095fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d107      	bne.n	80095f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e076      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d105      	bne.n	800960c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009600:	893b      	ldrh	r3, [r7, #8]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	611a      	str	r2, [r3, #16]
 800960a:	e021      	b.n	8009650 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800960c:	893b      	ldrh	r3, [r7, #8]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	b29b      	uxth	r3, r3
 8009612:	b2da      	uxtb	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800961a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961c:	6a39      	ldr	r1, [r7, #32]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fa50 	bl	8009ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	2b04      	cmp	r3, #4
 8009630:	d107      	bne.n	8009642 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e050      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009646:	893b      	ldrh	r3, [r7, #8]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009652:	6a39      	ldr	r1, [r7, #32]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 fa35 	bl	8009ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00d      	beq.n	800967c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009664:	2b04      	cmp	r3, #4
 8009666:	d107      	bne.n	8009678 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009676:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e035      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800968a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	2200      	movs	r2, #0
 8009694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f93d 	bl	8009918 <I2C_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b2:	d103      	bne.n	80096bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e013      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80096c0:	897b      	ldrh	r3, [r7, #10]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	4906      	ldr	r1, [pc, #24]	; (80096f0 <I2C_RequestMemoryRead+0x1cc>)
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 f975 	bl	80099c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	00010002 	.word	0x00010002

080096f4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009708:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009710:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009726:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009734:	2200      	movs	r2, #0
 8009736:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	2200      	movs	r2, #0
 8009746:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009748:	7cfb      	ldrb	r3, [r7, #19]
 800974a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800974e:	2b21      	cmp	r3, #33	; 0x21
 8009750:	d007      	beq.n	8009762 <I2C_DMAXferCplt+0x6e>
 8009752:	7cfb      	ldrb	r3, [r7, #19]
 8009754:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009758:	2b22      	cmp	r3, #34	; 0x22
 800975a:	d131      	bne.n	80097c0 <I2C_DMAXferCplt+0xcc>
 800975c:	7cbb      	ldrb	r3, [r7, #18]
 800975e:	2b20      	cmp	r3, #32
 8009760:	d12e      	bne.n	80097c0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009770:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009778:	7cfb      	ldrb	r3, [r7, #19]
 800977a:	2b29      	cmp	r3, #41	; 0x29
 800977c:	d10a      	bne.n	8009794 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2221      	movs	r2, #33	; 0x21
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2228      	movs	r2, #40	; 0x28
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800978c:	6978      	ldr	r0, [r7, #20]
 800978e:	f7ff feab 	bl	80094e8 <HAL_I2C_SlaveTxCpltCallback>
 8009792:	e00c      	b.n	80097ae <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009794:	7cfb      	ldrb	r3, [r7, #19]
 8009796:	2b2a      	cmp	r3, #42	; 0x2a
 8009798:	d109      	bne.n	80097ae <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2222      	movs	r2, #34	; 0x22
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2228      	movs	r2, #40	; 0x28
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80097a8:	6978      	ldr	r0, [r7, #20]
 80097aa:	f7ff fea7 	bl	80094fc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80097bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80097be:	e06a      	b.n	8009896 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d064      	beq.n	8009896 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d107      	bne.n	80097e6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097e4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80097f4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097fc:	d009      	beq.n	8009812 <I2C_DMAXferCplt+0x11e>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d006      	beq.n	8009812 <I2C_DMAXferCplt+0x11e>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800980a:	d002      	beq.n	8009812 <I2C_DMAXferCplt+0x11e>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b20      	cmp	r3, #32
 8009810:	d107      	bne.n	8009822 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009820:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009830:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009840:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2200      	movs	r2, #0
 8009846:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8009850:	6978      	ldr	r0, [r7, #20]
 8009852:	f7ff fe5d 	bl	8009510 <HAL_I2C_ErrorCallback>
}
 8009856:	e01e      	b.n	8009896 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2220      	movs	r2, #32
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b40      	cmp	r3, #64	; 0x40
 800986a:	d10a      	bne.n	8009882 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2200      	movs	r2, #0
 8009878:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800987a:	6978      	ldr	r0, [r7, #20]
 800987c:	f7fa fbe4 	bl	8004048 <HAL_I2C_MemRxCpltCallback>
}
 8009880:	e009      	b.n	8009896 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2212      	movs	r2, #18
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009890:	6978      	ldr	r0, [r7, #20]
 8009892:	f7ff fe1f 	bl	80094d4 <HAL_I2C_MasterRxCpltCallback>
}
 8009896:	bf00      	nop
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b8:	2200      	movs	r2, #0
 80098ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	2200      	movs	r2, #0
 80098ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fe ff17 	bl	8008700 <HAL_DMA_GetError>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d01b      	beq.n	8009910 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098e6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	f043 0210 	orr.w	r2, r3, #16
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff fe00 	bl	8009510 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	4613      	mov	r3, r2
 8009926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009928:	e025      	b.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009930:	d021      	beq.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009932:	f7fd fe7d 	bl	8007630 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d302      	bcc.n	8009948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d116      	bne.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f043 0220 	orr.w	r2, r3, #32
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e023      	b.n	80099be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	0c1b      	lsrs	r3, r3, #16
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d10d      	bne.n	800999c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	43da      	mvns	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4013      	ands	r3, r2
 800998c:	b29b      	uxth	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf0c      	ite	eq
 8009992:	2301      	moveq	r3, #1
 8009994:	2300      	movne	r3, #0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	e00c      	b.n	80099b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	43da      	mvns	r2, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	4013      	ands	r3, r2
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bf0c      	ite	eq
 80099ae:	2301      	moveq	r3, #1
 80099b0:	2300      	movne	r3, #0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	461a      	mov	r2, r3
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d0b6      	beq.n	800992a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099d4:	e051      	b.n	8009a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099e4:	d123      	bne.n	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	f043 0204 	orr.w	r2, r3, #4
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e046      	b.n	8009abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a34:	d021      	beq.n	8009a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a36:	f7fd fdfb 	bl	8007630 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d302      	bcc.n	8009a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d116      	bne.n	8009a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2220      	movs	r2, #32
 8009a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	f043 0220 	orr.w	r2, r3, #32
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e020      	b.n	8009abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	0c1b      	lsrs	r3, r3, #16
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d10c      	bne.n	8009a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	43da      	mvns	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bf14      	ite	ne
 8009a96:	2301      	movne	r3, #1
 8009a98:	2300      	moveq	r3, #0
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	e00b      	b.n	8009ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	43da      	mvns	r2, r3
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	bf14      	ite	ne
 8009ab0:	2301      	movne	r3, #1
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d18d      	bne.n	80099d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ad0:	e02d      	b.n	8009b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f837 	bl	8009b46 <I2C_IsAcknowledgeFailed>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e02d      	b.n	8009b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ae8:	d021      	beq.n	8009b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aea:	f7fd fda1 	bl	8007630 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d302      	bcc.n	8009b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d116      	bne.n	8009b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	f043 0220 	orr.w	r2, r3, #32
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e007      	b.n	8009b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b38:	2b80      	cmp	r3, #128	; 0x80
 8009b3a:	d1ca      	bne.n	8009ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b5c:	d11b      	bne.n	8009b96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f043 0204 	orr.w	r2, r3, #4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009bae:	2300      	movs	r3, #0
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	4a1f      	ldr	r2, [pc, #124]	; (8009c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8009bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <HAL_PWREx_EnableOverDrive+0x94>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bd0:	f7fd fd2e 	bl	8007630 <HAL_GetTick>
 8009bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009bd6:	e009      	b.n	8009bec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009bd8:	f7fd fd2a 	bl	8007630 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be6:	d901      	bls.n	8009bec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e01f      	b.n	8009c2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009bec:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf8:	d1ee      	bne.n	8009bd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c00:	f7fd fd16 	bl	8007630 <HAL_GetTick>
 8009c04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c06:	e009      	b.n	8009c1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c08:	f7fd fd12 	bl	8007630 <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c16:	d901      	bls.n	8009c1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e007      	b.n	8009c2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c1c:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c28:	d1ee      	bne.n	8009c08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40023800 	.word	0x40023800
 8009c38:	420e0040 	.word	0x420e0040
 8009c3c:	40007000 	.word	0x40007000
 8009c40:	420e0044 	.word	0x420e0044

08009c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e0cc      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c58:	4b68      	ldr	r3, [pc, #416]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d90c      	bls.n	8009c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c66:	4b65      	ldr	r3, [pc, #404]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	4b63      	ldr	r3, [pc, #396]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d001      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0b8      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d020      	beq.n	8009cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c98:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	4a58      	ldr	r2, [pc, #352]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cb0:	4b53      	ldr	r3, [pc, #332]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	4a52      	ldr	r2, [pc, #328]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cbc:	4b50      	ldr	r3, [pc, #320]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	494d      	ldr	r1, [pc, #308]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d044      	beq.n	8009d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d107      	bne.n	8009cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ce2:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d119      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e07f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d003      	beq.n	8009d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d107      	bne.n	8009d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d02:	4b3f      	ldr	r3, [pc, #252]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e06f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d12:	4b3b      	ldr	r3, [pc, #236]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e067      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f023 0203 	bic.w	r2, r3, #3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4934      	ldr	r1, [pc, #208]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d34:	f7fd fc7c 	bl	8007630 <HAL_GetTick>
 8009d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d3a:	e00a      	b.n	8009d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d3c:	f7fd fc78 	bl	8007630 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e04f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 020c 	and.w	r2, r3, #12
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d1eb      	bne.n	8009d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d64:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d20c      	bcs.n	8009d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d72:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d7a:	4b20      	ldr	r3, [pc, #128]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 030f 	and.w	r3, r3, #15
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d001      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e032      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	4916      	ldr	r1, [pc, #88]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	490e      	ldr	r1, [pc, #56]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dca:	f000 f855 	bl	8009e78 <HAL_RCC_GetSysClockFreq>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	091b      	lsrs	r3, r3, #4
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	490a      	ldr	r1, [pc, #40]	; (8009e04 <HAL_RCC_ClockConfig+0x1c0>)
 8009ddc:	5ccb      	ldrb	r3, [r1, r3]
 8009dde:	fa22 f303 	lsr.w	r3, r2, r3
 8009de2:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <HAL_RCC_ClockConfig+0x1c4>)
 8009de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <HAL_RCC_ClockConfig+0x1c8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd fbdc 	bl	80075a8 <HAL_InitTick>

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40023c00 	.word	0x40023c00
 8009e00:	40023800 	.word	0x40023800
 8009e04:	0801551c 	.word	0x0801551c
 8009e08:	20000030 	.word	0x20000030
 8009e0c:	20000044 	.word	0x20000044

08009e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e10:	b480      	push	{r7}
 8009e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e14:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e16:	681b      	ldr	r3, [r3, #0]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000030 	.word	0x20000030

08009e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e2c:	f7ff fff0 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e30:	4602      	mov	r2, r0
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	0a9b      	lsrs	r3, r3, #10
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	4903      	ldr	r1, [pc, #12]	; (8009e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e3e:	5ccb      	ldrb	r3, [r1, r3]
 8009e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40023800 	.word	0x40023800
 8009e4c:	0801552c 	.word	0x0801552c

08009e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e54:	f7ff ffdc 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	0b5b      	lsrs	r3, r3, #13
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	4903      	ldr	r1, [pc, #12]	; (8009e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e66:	5ccb      	ldrb	r3, [r1, r3]
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40023800 	.word	0x40023800
 8009e74:	0801552c 	.word	0x0801552c

08009e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e7c:	b0ae      	sub	sp, #184	; 0xb8
 8009e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e9e:	4bcb      	ldr	r3, [pc, #812]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 030c 	and.w	r3, r3, #12
 8009ea6:	2b0c      	cmp	r3, #12
 8009ea8:	f200 8206 	bhi.w	800a2b8 <HAL_RCC_GetSysClockFreq+0x440>
 8009eac:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009ee9 	.word	0x08009ee9
 8009eb8:	0800a2b9 	.word	0x0800a2b9
 8009ebc:	0800a2b9 	.word	0x0800a2b9
 8009ec0:	0800a2b9 	.word	0x0800a2b9
 8009ec4:	08009ef1 	.word	0x08009ef1
 8009ec8:	0800a2b9 	.word	0x0800a2b9
 8009ecc:	0800a2b9 	.word	0x0800a2b9
 8009ed0:	0800a2b9 	.word	0x0800a2b9
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	0800a2b9 	.word	0x0800a2b9
 8009edc:	0800a2b9 	.word	0x0800a2b9
 8009ee0:	0800a2b9 	.word	0x0800a2b9
 8009ee4:	0800a0e9 	.word	0x0800a0e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ee8:	4bb9      	ldr	r3, [pc, #740]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8009eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009eee:	e1e7      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ef0:	4bb8      	ldr	r3, [pc, #736]	; (800a1d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009ef6:	e1e3      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ef8:	4bb4      	ldr	r3, [pc, #720]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f04:	4bb1      	ldr	r3, [pc, #708]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d071      	beq.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f10:	4bae      	ldr	r3, [pc, #696]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	099b      	lsrs	r3, r3, #6
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f36:	4622      	mov	r2, r4
 8009f38:	462b      	mov	r3, r5
 8009f3a:	f04f 0000 	mov.w	r0, #0
 8009f3e:	f04f 0100 	mov.w	r1, #0
 8009f42:	0159      	lsls	r1, r3, #5
 8009f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f48:	0150      	lsls	r0, r2, #5
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4621      	mov	r1, r4
 8009f50:	1a51      	subs	r1, r2, r1
 8009f52:	6439      	str	r1, [r7, #64]	; 0x40
 8009f54:	4629      	mov	r1, r5
 8009f56:	eb63 0301 	sbc.w	r3, r3, r1
 8009f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f5c:	f04f 0200 	mov.w	r2, #0
 8009f60:	f04f 0300 	mov.w	r3, #0
 8009f64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009f68:	4649      	mov	r1, r9
 8009f6a:	018b      	lsls	r3, r1, #6
 8009f6c:	4641      	mov	r1, r8
 8009f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f72:	4641      	mov	r1, r8
 8009f74:	018a      	lsls	r2, r1, #6
 8009f76:	4641      	mov	r1, r8
 8009f78:	1a51      	subs	r1, r2, r1
 8009f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009f90:	4649      	mov	r1, r9
 8009f92:	00cb      	lsls	r3, r1, #3
 8009f94:	4641      	mov	r1, r8
 8009f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f9a:	4641      	mov	r1, r8
 8009f9c:	00ca      	lsls	r2, r1, #3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	189b      	adds	r3, r3, r2
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8009faa:	462b      	mov	r3, r5
 8009fac:	460a      	mov	r2, r1
 8009fae:	eb42 0303 	adc.w	r3, r2, r3
 8009fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	024b      	lsls	r3, r1, #9
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009fca:	4621      	mov	r1, r4
 8009fcc:	024a      	lsls	r2, r1, #9
 8009fce:	4610      	mov	r0, r2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009fe0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009fe4:	f7f6 feaa 	bl	8000d3c <__aeabi_uldivmod>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4613      	mov	r3, r2
 8009fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ff2:	e067      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ff4:	4b75      	ldr	r3, [pc, #468]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	099b      	lsrs	r3, r3, #6
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a000:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a00e:	2300      	movs	r3, #0
 800a010:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a012:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a016:	4622      	mov	r2, r4
 800a018:	462b      	mov	r3, r5
 800a01a:	f04f 0000 	mov.w	r0, #0
 800a01e:	f04f 0100 	mov.w	r1, #0
 800a022:	0159      	lsls	r1, r3, #5
 800a024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a028:	0150      	lsls	r0, r2, #5
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4621      	mov	r1, r4
 800a030:	1a51      	subs	r1, r2, r1
 800a032:	62b9      	str	r1, [r7, #40]	; 0x28
 800a034:	4629      	mov	r1, r5
 800a036:	eb63 0301 	sbc.w	r3, r3, r1
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a048:	4649      	mov	r1, r9
 800a04a:	018b      	lsls	r3, r1, #6
 800a04c:	4641      	mov	r1, r8
 800a04e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a052:	4641      	mov	r1, r8
 800a054:	018a      	lsls	r2, r1, #6
 800a056:	4641      	mov	r1, r8
 800a058:	ebb2 0a01 	subs.w	sl, r2, r1
 800a05c:	4649      	mov	r1, r9
 800a05e:	eb63 0b01 	sbc.w	fp, r3, r1
 800a062:	f04f 0200 	mov.w	r2, #0
 800a066:	f04f 0300 	mov.w	r3, #0
 800a06a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a06e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a076:	4692      	mov	sl, r2
 800a078:	469b      	mov	fp, r3
 800a07a:	4623      	mov	r3, r4
 800a07c:	eb1a 0303 	adds.w	r3, sl, r3
 800a080:	623b      	str	r3, [r7, #32]
 800a082:	462b      	mov	r3, r5
 800a084:	eb4b 0303 	adc.w	r3, fp, r3
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
 800a08a:	f04f 0200 	mov.w	r2, #0
 800a08e:	f04f 0300 	mov.w	r3, #0
 800a092:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a096:	4629      	mov	r1, r5
 800a098:	028b      	lsls	r3, r1, #10
 800a09a:	4621      	mov	r1, r4
 800a09c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	028a      	lsls	r2, r1, #10
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	673b      	str	r3, [r7, #112]	; 0x70
 800a0b0:	677a      	str	r2, [r7, #116]	; 0x74
 800a0b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a0b6:	f7f6 fe41 	bl	8000d3c <__aeabi_uldivmod>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4613      	mov	r3, r2
 800a0c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a0c4:	4b41      	ldr	r3, [pc, #260]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	0c1b      	lsrs	r3, r3, #16
 800a0ca:	f003 0303 	and.w	r3, r3, #3
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800a0d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a0e6:	e0eb      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0e8:	4b38      	ldr	r3, [pc, #224]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0f4:	4b35      	ldr	r3, [pc, #212]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d06b      	beq.n	800a1d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a100:	4b32      	ldr	r3, [pc, #200]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x354>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	099b      	lsrs	r3, r3, #6
 800a106:	2200      	movs	r2, #0
 800a108:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a10c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	663b      	str	r3, [r7, #96]	; 0x60
 800a114:	2300      	movs	r3, #0
 800a116:	667b      	str	r3, [r7, #100]	; 0x64
 800a118:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a11c:	4622      	mov	r2, r4
 800a11e:	462b      	mov	r3, r5
 800a120:	f04f 0000 	mov.w	r0, #0
 800a124:	f04f 0100 	mov.w	r1, #0
 800a128:	0159      	lsls	r1, r3, #5
 800a12a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a12e:	0150      	lsls	r0, r2, #5
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4621      	mov	r1, r4
 800a136:	1a51      	subs	r1, r2, r1
 800a138:	61b9      	str	r1, [r7, #24]
 800a13a:	4629      	mov	r1, r5
 800a13c:	eb63 0301 	sbc.w	r3, r3, r1
 800a140:	61fb      	str	r3, [r7, #28]
 800a142:	f04f 0200 	mov.w	r2, #0
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a14e:	4659      	mov	r1, fp
 800a150:	018b      	lsls	r3, r1, #6
 800a152:	4651      	mov	r1, sl
 800a154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a158:	4651      	mov	r1, sl
 800a15a:	018a      	lsls	r2, r1, #6
 800a15c:	4651      	mov	r1, sl
 800a15e:	ebb2 0801 	subs.w	r8, r2, r1
 800a162:	4659      	mov	r1, fp
 800a164:	eb63 0901 	sbc.w	r9, r3, r1
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a17c:	4690      	mov	r8, r2
 800a17e:	4699      	mov	r9, r3
 800a180:	4623      	mov	r3, r4
 800a182:	eb18 0303 	adds.w	r3, r8, r3
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	462b      	mov	r3, r5
 800a18a:	eb49 0303 	adc.w	r3, r9, r3
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	f04f 0300 	mov.w	r3, #0
 800a198:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a19c:	4629      	mov	r1, r5
 800a19e:	024b      	lsls	r3, r1, #9
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	024a      	lsls	r2, r1, #9
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a1b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1bc:	f7f6 fdbe 	bl	8000d3c <__aeabi_uldivmod>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1ca:	e065      	b.n	800a298 <HAL_RCC_GetSysClockFreq+0x420>
 800a1cc:	40023800 	.word	0x40023800
 800a1d0:	00f42400 	.word	0x00f42400
 800a1d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d8:	4b3d      	ldr	r3, [pc, #244]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	099b      	lsrs	r3, r3, #6
 800a1de:	2200      	movs	r2, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a1e8:	653b      	str	r3, [r7, #80]	; 0x50
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	657b      	str	r3, [r7, #84]	; 0x54
 800a1ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	464b      	mov	r3, r9
 800a1f6:	f04f 0000 	mov.w	r0, #0
 800a1fa:	f04f 0100 	mov.w	r1, #0
 800a1fe:	0159      	lsls	r1, r3, #5
 800a200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a204:	0150      	lsls	r0, r2, #5
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4641      	mov	r1, r8
 800a20c:	1a51      	subs	r1, r2, r1
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	4649      	mov	r1, r9
 800a212:	eb63 0301 	sbc.w	r3, r3, r1
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a224:	4659      	mov	r1, fp
 800a226:	018b      	lsls	r3, r1, #6
 800a228:	4651      	mov	r1, sl
 800a22a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a22e:	4651      	mov	r1, sl
 800a230:	018a      	lsls	r2, r1, #6
 800a232:	4651      	mov	r1, sl
 800a234:	1a54      	subs	r4, r2, r1
 800a236:	4659      	mov	r1, fp
 800a238:	eb63 0501 	sbc.w	r5, r3, r1
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	f04f 0300 	mov.w	r3, #0
 800a244:	00eb      	lsls	r3, r5, #3
 800a246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a24a:	00e2      	lsls	r2, r4, #3
 800a24c:	4614      	mov	r4, r2
 800a24e:	461d      	mov	r5, r3
 800a250:	4643      	mov	r3, r8
 800a252:	18e3      	adds	r3, r4, r3
 800a254:	603b      	str	r3, [r7, #0]
 800a256:	464b      	mov	r3, r9
 800a258:	eb45 0303 	adc.w	r3, r5, r3
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a26a:	4629      	mov	r1, r5
 800a26c:	028b      	lsls	r3, r1, #10
 800a26e:	4621      	mov	r1, r4
 800a270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a274:	4621      	mov	r1, r4
 800a276:	028a      	lsls	r2, r1, #10
 800a278:	4610      	mov	r0, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a280:	2200      	movs	r2, #0
 800a282:	64bb      	str	r3, [r7, #72]	; 0x48
 800a284:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a286:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a28a:	f7f6 fd57 	bl	8000d3c <__aeabi_uldivmod>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4613      	mov	r3, r2
 800a294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a298:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	0f1b      	lsrs	r3, r3, #28
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800a2a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a2aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a2b6:	e003      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a2ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a2be:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	37b8      	adds	r7, #184	; 0xb8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ce:	bf00      	nop
 800a2d0:	40023800 	.word	0x40023800
 800a2d4:	00f42400 	.word	0x00f42400

0800a2d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e28d      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8083 	beq.w	800a3fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a2f8:	4b94      	ldr	r3, [pc, #592]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f003 030c 	and.w	r3, r3, #12
 800a300:	2b04      	cmp	r3, #4
 800a302:	d019      	beq.n	800a338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a304:	4b91      	ldr	r3, [pc, #580]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d106      	bne.n	800a31e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a310:	4b8e      	ldr	r3, [pc, #568]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a31c:	d00c      	beq.n	800a338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a31e:	4b8b      	ldr	r3, [pc, #556]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a326:	2b0c      	cmp	r3, #12
 800a328:	d112      	bne.n	800a350 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a32a:	4b88      	ldr	r3, [pc, #544]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a336:	d10b      	bne.n	800a350 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a338:	4b84      	ldr	r3, [pc, #528]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d05b      	beq.n	800a3fc <HAL_RCC_OscConfig+0x124>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d157      	bne.n	800a3fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e25a      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a358:	d106      	bne.n	800a368 <HAL_RCC_OscConfig+0x90>
 800a35a:	4b7c      	ldr	r3, [pc, #496]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a7b      	ldr	r2, [pc, #492]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	e01d      	b.n	800a3a4 <HAL_RCC_OscConfig+0xcc>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a370:	d10c      	bne.n	800a38c <HAL_RCC_OscConfig+0xb4>
 800a372:	4b76      	ldr	r3, [pc, #472]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a75      	ldr	r2, [pc, #468]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	4b73      	ldr	r3, [pc, #460]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a72      	ldr	r2, [pc, #456]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	e00b      	b.n	800a3a4 <HAL_RCC_OscConfig+0xcc>
 800a38c:	4b6f      	ldr	r3, [pc, #444]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a6e      	ldr	r2, [pc, #440]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	4b6c      	ldr	r3, [pc, #432]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a6b      	ldr	r2, [pc, #428]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a39e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d013      	beq.n	800a3d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ac:	f7fd f940 	bl	8007630 <HAL_GetTick>
 800a3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3b2:	e008      	b.n	800a3c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3b4:	f7fd f93c 	bl	8007630 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b64      	cmp	r3, #100	; 0x64
 800a3c0:	d901      	bls.n	800a3c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e21f      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3c6:	4b61      	ldr	r3, [pc, #388]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d0f0      	beq.n	800a3b4 <HAL_RCC_OscConfig+0xdc>
 800a3d2:	e014      	b.n	800a3fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d4:	f7fd f92c 	bl	8007630 <HAL_GetTick>
 800a3d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3da:	e008      	b.n	800a3ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3dc:	f7fd f928 	bl	8007630 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b64      	cmp	r3, #100	; 0x64
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e20b      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3ee:	4b57      	ldr	r3, [pc, #348]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1f0      	bne.n	800a3dc <HAL_RCC_OscConfig+0x104>
 800a3fa:	e000      	b.n	800a3fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d06f      	beq.n	800a4ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a40a:	4b50      	ldr	r3, [pc, #320]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f003 030c 	and.w	r3, r3, #12
 800a412:	2b00      	cmp	r3, #0
 800a414:	d017      	beq.n	800a446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a416:	4b4d      	ldr	r3, [pc, #308]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a41e:	2b08      	cmp	r3, #8
 800a420:	d105      	bne.n	800a42e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a422:	4b4a      	ldr	r3, [pc, #296]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a42e:	4b47      	ldr	r3, [pc, #284]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a436:	2b0c      	cmp	r3, #12
 800a438:	d11c      	bne.n	800a474 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a43a:	4b44      	ldr	r3, [pc, #272]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d116      	bne.n	800a474 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a446:	4b41      	ldr	r3, [pc, #260]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <HAL_RCC_OscConfig+0x186>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d001      	beq.n	800a45e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e1d3      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a45e:	4b3b      	ldr	r3, [pc, #236]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	4937      	ldr	r1, [pc, #220]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a472:	e03a      	b.n	800a4ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d020      	beq.n	800a4be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a47c:	4b34      	ldr	r3, [pc, #208]	; (800a550 <HAL_RCC_OscConfig+0x278>)
 800a47e:	2201      	movs	r2, #1
 800a480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a482:	f7fd f8d5 	bl	8007630 <HAL_GetTick>
 800a486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a488:	e008      	b.n	800a49c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a48a:	f7fd f8d1 	bl	8007630 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	2b02      	cmp	r3, #2
 800a496:	d901      	bls.n	800a49c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a498:	2303      	movs	r3, #3
 800a49a:	e1b4      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a49c:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0302 	and.w	r3, r3, #2
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0f0      	beq.n	800a48a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4a8:	4b28      	ldr	r3, [pc, #160]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4925      	ldr	r1, [pc, #148]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	600b      	str	r3, [r1, #0]
 800a4bc:	e015      	b.n	800a4ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4be:	4b24      	ldr	r3, [pc, #144]	; (800a550 <HAL_RCC_OscConfig+0x278>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c4:	f7fd f8b4 	bl	8007630 <HAL_GetTick>
 800a4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4ca:	e008      	b.n	800a4de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4cc:	f7fd f8b0 	bl	8007630 <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e193      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4de:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1f0      	bne.n	800a4cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0308 	and.w	r3, r3, #8
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d036      	beq.n	800a564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d016      	beq.n	800a52c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4fe:	4b15      	ldr	r3, [pc, #84]	; (800a554 <HAL_RCC_OscConfig+0x27c>)
 800a500:	2201      	movs	r2, #1
 800a502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a504:	f7fd f894 	bl	8007630 <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a50c:	f7fd f890 	bl	8007630 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b02      	cmp	r3, #2
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e173      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a51e:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <HAL_RCC_OscConfig+0x274>)
 800a520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f0      	beq.n	800a50c <HAL_RCC_OscConfig+0x234>
 800a52a:	e01b      	b.n	800a564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a52c:	4b09      	ldr	r3, [pc, #36]	; (800a554 <HAL_RCC_OscConfig+0x27c>)
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a532:	f7fd f87d 	bl	8007630 <HAL_GetTick>
 800a536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a538:	e00e      	b.n	800a558 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a53a:	f7fd f879 	bl	8007630 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b02      	cmp	r3, #2
 800a546:	d907      	bls.n	800a558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e15c      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
 800a54c:	40023800 	.word	0x40023800
 800a550:	42470000 	.word	0x42470000
 800a554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a558:	4b8a      	ldr	r3, [pc, #552]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1ea      	bne.n	800a53a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8097 	beq.w	800a6a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a572:	2300      	movs	r3, #0
 800a574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a576:	4b83      	ldr	r3, [pc, #524]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10f      	bne.n	800a5a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a582:	2300      	movs	r3, #0
 800a584:	60bb      	str	r3, [r7, #8]
 800a586:	4b7f      	ldr	r3, [pc, #508]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58a:	4a7e      	ldr	r2, [pc, #504]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a58c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a590:	6413      	str	r3, [r2, #64]	; 0x40
 800a592:	4b7c      	ldr	r3, [pc, #496]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a59a:	60bb      	str	r3, [r7, #8]
 800a59c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5a2:	4b79      	ldr	r3, [pc, #484]	; (800a788 <HAL_RCC_OscConfig+0x4b0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d118      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a5ae:	4b76      	ldr	r3, [pc, #472]	; (800a788 <HAL_RCC_OscConfig+0x4b0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a75      	ldr	r2, [pc, #468]	; (800a788 <HAL_RCC_OscConfig+0x4b0>)
 800a5b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5ba:	f7fd f839 	bl	8007630 <HAL_GetTick>
 800a5be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5c0:	e008      	b.n	800a5d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5c2:	f7fd f835 	bl	8007630 <HAL_GetTick>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d901      	bls.n	800a5d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e118      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5d4:	4b6c      	ldr	r3, [pc, #432]	; (800a788 <HAL_RCC_OscConfig+0x4b0>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0f0      	beq.n	800a5c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d106      	bne.n	800a5f6 <HAL_RCC_OscConfig+0x31e>
 800a5e8:	4b66      	ldr	r3, [pc, #408]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ec:	4a65      	ldr	r2, [pc, #404]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a5ee:	f043 0301 	orr.w	r3, r3, #1
 800a5f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f4:	e01c      	b.n	800a630 <HAL_RCC_OscConfig+0x358>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	d10c      	bne.n	800a618 <HAL_RCC_OscConfig+0x340>
 800a5fe:	4b61      	ldr	r3, [pc, #388]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	4a60      	ldr	r2, [pc, #384]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a604:	f043 0304 	orr.w	r3, r3, #4
 800a608:	6713      	str	r3, [r2, #112]	; 0x70
 800a60a:	4b5e      	ldr	r3, [pc, #376]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	4a5d      	ldr	r2, [pc, #372]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a610:	f043 0301 	orr.w	r3, r3, #1
 800a614:	6713      	str	r3, [r2, #112]	; 0x70
 800a616:	e00b      	b.n	800a630 <HAL_RCC_OscConfig+0x358>
 800a618:	4b5a      	ldr	r3, [pc, #360]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61c:	4a59      	ldr	r2, [pc, #356]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a61e:	f023 0301 	bic.w	r3, r3, #1
 800a622:	6713      	str	r3, [r2, #112]	; 0x70
 800a624:	4b57      	ldr	r3, [pc, #348]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a628:	4a56      	ldr	r2, [pc, #344]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a62a:	f023 0304 	bic.w	r3, r3, #4
 800a62e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d015      	beq.n	800a664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a638:	f7fc fffa 	bl	8007630 <HAL_GetTick>
 800a63c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a63e:	e00a      	b.n	800a656 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a640:	f7fc fff6 	bl	8007630 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64e:	4293      	cmp	r3, r2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e0d7      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a656:	4b4b      	ldr	r3, [pc, #300]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0ee      	beq.n	800a640 <HAL_RCC_OscConfig+0x368>
 800a662:	e014      	b.n	800a68e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a664:	f7fc ffe4 	bl	8007630 <HAL_GetTick>
 800a668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a66a:	e00a      	b.n	800a682 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a66c:	f7fc ffe0 	bl	8007630 <HAL_GetTick>
 800a670:	4602      	mov	r2, r0
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d901      	bls.n	800a682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e0c1      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a682:	4b40      	ldr	r3, [pc, #256]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1ee      	bne.n	800a66c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d105      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a694:	4b3b      	ldr	r3, [pc, #236]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	4a3a      	ldr	r2, [pc, #232]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a69a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a69e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 80ad 	beq.w	800a804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a6aa:	4b36      	ldr	r3, [pc, #216]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 030c 	and.w	r3, r3, #12
 800a6b2:	2b08      	cmp	r3, #8
 800a6b4:	d060      	beq.n	800a778 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d145      	bne.n	800a74a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6be:	4b33      	ldr	r3, [pc, #204]	; (800a78c <HAL_RCC_OscConfig+0x4b4>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c4:	f7fc ffb4 	bl	8007630 <HAL_GetTick>
 800a6c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6ca:	e008      	b.n	800a6de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6cc:	f7fc ffb0 	bl	8007630 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d901      	bls.n	800a6de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e093      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6de:	4b29      	ldr	r3, [pc, #164]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f0      	bne.n	800a6cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69da      	ldr	r2, [r3, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	019b      	lsls	r3, r3, #6
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	085b      	lsrs	r3, r3, #1
 800a702:	3b01      	subs	r3, #1
 800a704:	041b      	lsls	r3, r3, #16
 800a706:	431a      	orrs	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	061b      	lsls	r3, r3, #24
 800a70e:	431a      	orrs	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a714:	071b      	lsls	r3, r3, #28
 800a716:	491b      	ldr	r1, [pc, #108]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <HAL_RCC_OscConfig+0x4b4>)
 800a71e:	2201      	movs	r2, #1
 800a720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a722:	f7fc ff85 	bl	8007630 <HAL_GetTick>
 800a726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a728:	e008      	b.n	800a73c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a72a:	f7fc ff81 	bl	8007630 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	2b02      	cmp	r3, #2
 800a736:	d901      	bls.n	800a73c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e064      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a73c:	4b11      	ldr	r3, [pc, #68]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0f0      	beq.n	800a72a <HAL_RCC_OscConfig+0x452>
 800a748:	e05c      	b.n	800a804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a74a:	4b10      	ldr	r3, [pc, #64]	; (800a78c <HAL_RCC_OscConfig+0x4b4>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a750:	f7fc ff6e 	bl	8007630 <HAL_GetTick>
 800a754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a756:	e008      	b.n	800a76a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a758:	f7fc ff6a 	bl	8007630 <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	2b02      	cmp	r3, #2
 800a764:	d901      	bls.n	800a76a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e04d      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a76a:	4b06      	ldr	r3, [pc, #24]	; (800a784 <HAL_RCC_OscConfig+0x4ac>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1f0      	bne.n	800a758 <HAL_RCC_OscConfig+0x480>
 800a776:	e045      	b.n	800a804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d107      	bne.n	800a790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e040      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
 800a784:	40023800 	.word	0x40023800
 800a788:	40007000 	.word	0x40007000
 800a78c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a790:	4b1f      	ldr	r3, [pc, #124]	; (800a810 <HAL_RCC_OscConfig+0x538>)
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d030      	beq.n	800a800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d129      	bne.n	800a800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d122      	bne.n	800a800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a7c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d119      	bne.n	800a800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d10f      	bne.n	800a800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d107      	bne.n	800a800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d001      	beq.n	800a804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e000      	b.n	800a806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	40023800 	.word	0x40023800

0800a814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e07b      	b.n	800a91e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d108      	bne.n	800a840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a836:	d009      	beq.n	800a84c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	61da      	str	r2, [r3, #28]
 800a83e:	e005      	b.n	800a84c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7f9 fece 	bl	8004608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d0:	ea42 0103 	orr.w	r1, r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	0c1b      	lsrs	r3, r3, #16
 800a8ea:	f003 0104 	and.w	r1, r3, #4
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	f003 0210 	and.w	r2, r3, #16
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69da      	ldr	r2, [r3, #28]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a90c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b088      	sub	sp, #32
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	603b      	str	r3, [r7, #0]
 800a932:	4613      	mov	r3, r2
 800a934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a940:	2b01      	cmp	r3, #1
 800a942:	d101      	bne.n	800a948 <HAL_SPI_Transmit+0x22>
 800a944:	2302      	movs	r3, #2
 800a946:	e126      	b.n	800ab96 <HAL_SPI_Transmit+0x270>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a950:	f7fc fe6e 	bl	8007630 <HAL_GetTick>
 800a954:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b01      	cmp	r3, #1
 800a964:	d002      	beq.n	800a96c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a966:	2302      	movs	r3, #2
 800a968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a96a:	e10b      	b.n	800ab84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <HAL_SPI_Transmit+0x52>
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a97c:	e102      	b.n	800ab84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2203      	movs	r2, #3
 800a982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	88fa      	ldrh	r2, [r7, #6]
 800a996:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	88fa      	ldrh	r2, [r7, #6]
 800a99c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9c4:	d10f      	bne.n	800a9e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f0:	2b40      	cmp	r3, #64	; 0x40
 800a9f2:	d007      	beq.n	800aa04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa0c:	d14b      	bne.n	800aaa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <HAL_SPI_Transmit+0xf6>
 800aa16:	8afb      	ldrh	r3, [r7, #22]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d13e      	bne.n	800aa9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa20:	881a      	ldrh	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	1c9a      	adds	r2, r3, #2
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa40:	e02b      	b.n	800aa9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d112      	bne.n	800aa76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa54:	881a      	ldrh	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa60:	1c9a      	adds	r2, r3, #2
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	86da      	strh	r2, [r3, #54]	; 0x36
 800aa74:	e011      	b.n	800aa9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa76:	f7fc fddb 	bl	8007630 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d803      	bhi.n	800aa8e <HAL_SPI_Transmit+0x168>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8c:	d102      	bne.n	800aa94 <HAL_SPI_Transmit+0x16e>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa98:	e074      	b.n	800ab84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1ce      	bne.n	800aa42 <HAL_SPI_Transmit+0x11c>
 800aaa4:	e04c      	b.n	800ab40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <HAL_SPI_Transmit+0x18e>
 800aaae:	8afb      	ldrh	r3, [r7, #22]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d140      	bne.n	800ab36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	7812      	ldrb	r2, [r2, #0]
 800aac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	3b01      	subs	r3, #1
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aada:	e02c      	b.n	800ab36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d113      	bne.n	800ab12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	7812      	ldrb	r2, [r2, #0]
 800aaf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ab10:	e011      	b.n	800ab36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab12:	f7fc fd8d 	bl	8007630 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d803      	bhi.n	800ab2a <HAL_SPI_Transmit+0x204>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab28:	d102      	bne.n	800ab30 <HAL_SPI_Transmit+0x20a>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab34:	e026      	b.n	800ab84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1cd      	bne.n	800aadc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 fafd 	bl	800b144 <SPI_EndRxTxTransaction>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab5e:	2300      	movs	r3, #0
 800ab60:	613b      	str	r3, [r7, #16]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	613b      	str	r3, [r7, #16]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	613b      	str	r3, [r7, #16]
 800ab72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	77fb      	strb	r3, [r7, #31]
 800ab80:	e000      	b.n	800ab84 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ab82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3720      	adds	r7, #32
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
	...

0800aba0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d101      	bne.n	800abc0 <HAL_SPI_Transmit_DMA+0x20>
 800abbc:	2302      	movs	r3, #2
 800abbe:	e09b      	b.n	800acf8 <HAL_SPI_Transmit_DMA+0x158>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d002      	beq.n	800abda <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800abd4:	2302      	movs	r3, #2
 800abd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abd8:	e089      	b.n	800acee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <HAL_SPI_Transmit_DMA+0x46>
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abea:	e080      	b.n	800acee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2203      	movs	r2, #3
 800abf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	88fa      	ldrh	r2, [r7, #6]
 800ac04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	88fa      	ldrh	r2, [r7, #6]
 800ac0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac32:	d10f      	bne.n	800ac54 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac58:	4a29      	ldr	r2, [pc, #164]	; (800ad00 <HAL_SPI_Transmit_DMA+0x160>)
 800ac5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac60:	4a28      	ldr	r2, [pc, #160]	; (800ad04 <HAL_SPI_Transmit_DMA+0x164>)
 800ac62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac68:	4a27      	ldr	r2, [pc, #156]	; (800ad08 <HAL_SPI_Transmit_DMA+0x168>)
 800ac6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac70:	2200      	movs	r2, #0
 800ac72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	330c      	adds	r3, #12
 800ac84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ac8c:	f7fd fac4 	bl	8008218 <HAL_DMA_Start_IT>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00c      	beq.n	800acb0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac9a:	f043 0210 	orr.w	r2, r3, #16
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800acae:	e01e      	b.n	800acee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acba:	2b40      	cmp	r3, #64	; 0x40
 800acbc:	d007      	beq.n	800acce <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800accc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 0220 	orr.w	r2, r2, #32
 800acdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f042 0202 	orr.w	r2, r2, #2
 800acec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	0800afb1 	.word	0x0800afb1
 800ad04:	0800af09 	.word	0x0800af09
 800ad08:	0800afcd 	.word	0x0800afcd

0800ad0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10e      	bne.n	800ad4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d009      	beq.n	800ad4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d004      	beq.n	800ad4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	4798      	blx	r3
    return;
 800ad4a:	e0ce      	b.n	800aeea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d009      	beq.n	800ad6a <HAL_SPI_IRQHandler+0x5e>
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d004      	beq.n	800ad6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
    return;
 800ad68:	e0bf      	b.n	800aeea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	f003 0320 	and.w	r3, r3, #32
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <HAL_SPI_IRQHandler+0x7e>
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d105      	bne.n	800ad8a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80b0 	beq.w	800aeea <HAL_SPI_IRQHandler+0x1de>
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 80aa 	beq.w	800aeea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d023      	beq.n	800ade8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d011      	beq.n	800add0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb0:	f043 0204 	orr.w	r2, r3, #4
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	617b      	str	r3, [r7, #20]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	e00b      	b.n	800ade8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800add0:	2300      	movs	r3, #0
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	613b      	str	r3, [r7, #16]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	693b      	ldr	r3, [r7, #16]
        return;
 800ade6:	e080      	b.n	800aeea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d014      	beq.n	800ae1c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf6:	f043 0201 	orr.w	r2, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00c      	beq.n	800ae40 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2a:	f043 0208 	orr.w	r2, r3, #8
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae32:	2300      	movs	r3, #0
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	60bb      	str	r3, [r7, #8]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d04f      	beq.n	800aee8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	f003 0302 	and.w	r3, r3, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <HAL_SPI_IRQHandler+0x168>
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d034      	beq.n	800aede <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0203 	bic.w	r2, r2, #3
 800ae82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d011      	beq.n	800aeb0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae90:	4a17      	ldr	r2, [pc, #92]	; (800aef0 <HAL_SPI_IRQHandler+0x1e4>)
 800ae92:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fd fa85 	bl	80083a8 <HAL_DMA_Abort_IT>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d016      	beq.n	800aee6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aebc:	4a0c      	ldr	r2, [pc, #48]	; (800aef0 <HAL_SPI_IRQHandler+0x1e4>)
 800aebe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fd fa6f 	bl	80083a8 <HAL_DMA_Abort_IT>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800aedc:	e003      	b.n	800aee6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fa fc8e 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aee4:	e000      	b.n	800aee8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800aee6:	bf00      	nop
    return;
 800aee8:	bf00      	nop
  }
}
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	0800b00d 	.word	0x0800b00d

0800aef4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af16:	f7fc fb8b 	bl	8007630 <HAL_GetTick>
 800af1a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af2a:	d03b      	beq.n	800afa4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0220 	bic.w	r2, r2, #32
 800af3a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 0202 	bic.w	r2, r2, #2
 800af4a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	2164      	movs	r1, #100	; 0x64
 800af50:	6978      	ldr	r0, [r7, #20]
 800af52:	f000 f8f7 	bl	800b144 <SPI_EndRxTxTransaction>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af60:	f043 0220 	orr.w	r2, r3, #32
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2200      	movs	r2, #0
 800af8a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800af9c:	6978      	ldr	r0, [r7, #20]
 800af9e:	f7fa fc2f 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800afa2:	e002      	b.n	800afaa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800afa4:	6978      	ldr	r0, [r7, #20]
 800afa6:	f7fa fc41 	bl	800582c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff ff98 	bl	800aef4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afc4:	bf00      	nop
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0203 	bic.w	r2, r2, #3
 800afe8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afee:	f043 0210 	orr.w	r2, r3, #16
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7fa fbfe 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b004:	bf00      	nop
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7fa fbea 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b02c:	bf00      	nop
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	4613      	mov	r3, r2
 800b042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b044:	f7fc faf4 	bl	8007630 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	4413      	add	r3, r2
 800b052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b054:	f7fc faec 	bl	8007630 <HAL_GetTick>
 800b058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b05a:	4b39      	ldr	r3, [pc, #228]	; (800b140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	015b      	lsls	r3, r3, #5
 800b060:	0d1b      	lsrs	r3, r3, #20
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	fb02 f303 	mul.w	r3, r2, r3
 800b068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b06a:	e054      	b.n	800b116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b072:	d050      	beq.n	800b116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b074:	f7fc fadc 	bl	8007630 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	69fa      	ldr	r2, [r7, #28]
 800b080:	429a      	cmp	r2, r3
 800b082:	d902      	bls.n	800b08a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d13d      	bne.n	800b106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0a2:	d111      	bne.n	800b0c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ac:	d004      	beq.n	800b0b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b6:	d107      	bne.n	800b0c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d0:	d10f      	bne.n	800b0f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e017      	b.n	800b136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	3b01      	subs	r3, #1
 800b114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	689a      	ldr	r2, [r3, #8]
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	4013      	ands	r3, r2
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	429a      	cmp	r2, r3
 800b124:	bf0c      	ite	eq
 800b126:	2301      	moveq	r3, #1
 800b128:	2300      	movne	r3, #0
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	461a      	mov	r2, r3
 800b12e:	79fb      	ldrb	r3, [r7, #7]
 800b130:	429a      	cmp	r2, r3
 800b132:	d19b      	bne.n	800b06c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000030 	.word	0x20000030

0800b144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af02      	add	r7, sp, #8
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b150:	4b1b      	ldr	r3, [pc, #108]	; (800b1c0 <SPI_EndRxTxTransaction+0x7c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1b      	ldr	r2, [pc, #108]	; (800b1c4 <SPI_EndRxTxTransaction+0x80>)
 800b156:	fba2 2303 	umull	r2, r3, r2, r3
 800b15a:	0d5b      	lsrs	r3, r3, #21
 800b15c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b160:	fb02 f303 	mul.w	r3, r2, r3
 800b164:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b16e:	d112      	bne.n	800b196 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	2180      	movs	r1, #128	; 0x80
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff ff5a 	bl	800b034 <SPI_WaitFlagStateUntilTimeout>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d016      	beq.n	800b1b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b18a:	f043 0220 	orr.w	r2, r3, #32
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e00f      	b.n	800b1b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ac:	2b80      	cmp	r3, #128	; 0x80
 800b1ae:	d0f2      	beq.n	800b196 <SPI_EndRxTxTransaction+0x52>
 800b1b0:	e000      	b.n	800b1b4 <SPI_EndRxTxTransaction+0x70>
        break;
 800b1b2:	bf00      	nop
  }

  return HAL_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20000030 	.word	0x20000030
 800b1c4:	165e9f81 	.word	0x165e9f81

0800b1c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e041      	b.n	800b25e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d106      	bne.n	800b1f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7f9 faac 	bl	800474c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3304      	adds	r3, #4
 800b204:	4619      	mov	r1, r3
 800b206:	4610      	mov	r0, r2
 800b208:	f000 faa0 	bl	800b74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d001      	beq.n	800b280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e04e      	b.n	800b31e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2202      	movs	r2, #2
 800b284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68da      	ldr	r2, [r3, #12]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0201 	orr.w	r2, r2, #1
 800b296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a23      	ldr	r2, [pc, #140]	; (800b32c <HAL_TIM_Base_Start_IT+0xc4>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d022      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2aa:	d01d      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a1f      	ldr	r2, [pc, #124]	; (800b330 <HAL_TIM_Base_Start_IT+0xc8>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d018      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a1e      	ldr	r2, [pc, #120]	; (800b334 <HAL_TIM_Base_Start_IT+0xcc>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d013      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a1c      	ldr	r2, [pc, #112]	; (800b338 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d00e      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a1b      	ldr	r2, [pc, #108]	; (800b33c <HAL_TIM_Base_Start_IT+0xd4>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d009      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a19      	ldr	r2, [pc, #100]	; (800b340 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d004      	beq.n	800b2e8 <HAL_TIM_Base_Start_IT+0x80>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a18      	ldr	r2, [pc, #96]	; (800b344 <HAL_TIM_Base_Start_IT+0xdc>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d111      	bne.n	800b30c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f003 0307 	and.w	r3, r3, #7
 800b2f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b06      	cmp	r3, #6
 800b2f8:	d010      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f042 0201 	orr.w	r2, r2, #1
 800b308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b30a:	e007      	b.n	800b31c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0201 	orr.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	40010000 	.word	0x40010000
 800b330:	40000400 	.word	0x40000400
 800b334:	40000800 	.word	0x40000800
 800b338:	40000c00 	.word	0x40000c00
 800b33c:	40010400 	.word	0x40010400
 800b340:	40014000 	.word	0x40014000
 800b344:	40001800 	.word	0x40001800

0800b348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d122      	bne.n	800b3a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f003 0302 	and.w	r3, r3, #2
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d11b      	bne.n	800b3a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f06f 0202 	mvn.w	r2, #2
 800b374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	f003 0303 	and.w	r3, r3, #3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f9bf 	bl	800b70e <HAL_TIM_IC_CaptureCallback>
 800b390:	e005      	b.n	800b39e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f9b1 	bl	800b6fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f9c2 	bl	800b722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f003 0304 	and.w	r3, r3, #4
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d122      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d11b      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0204 	mvn.w	r2, #4
 800b3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d003      	beq.n	800b3e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f995 	bl	800b70e <HAL_TIM_IC_CaptureCallback>
 800b3e4:	e005      	b.n	800b3f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f987 	bl	800b6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f998 	bl	800b722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	f003 0308 	and.w	r3, r3, #8
 800b402:	2b08      	cmp	r3, #8
 800b404:	d122      	bne.n	800b44c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f003 0308 	and.w	r3, r3, #8
 800b410:	2b08      	cmp	r3, #8
 800b412:	d11b      	bne.n	800b44c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f06f 0208 	mvn.w	r2, #8
 800b41c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2204      	movs	r2, #4
 800b422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f96b 	bl	800b70e <HAL_TIM_IC_CaptureCallback>
 800b438:	e005      	b.n	800b446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f95d 	bl	800b6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f96e 	bl	800b722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	f003 0310 	and.w	r3, r3, #16
 800b456:	2b10      	cmp	r3, #16
 800b458:	d122      	bne.n	800b4a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f003 0310 	and.w	r3, r3, #16
 800b464:	2b10      	cmp	r3, #16
 800b466:	d11b      	bne.n	800b4a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f06f 0210 	mvn.w	r2, #16
 800b470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2208      	movs	r2, #8
 800b476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f941 	bl	800b70e <HAL_TIM_IC_CaptureCallback>
 800b48c:	e005      	b.n	800b49a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f933 	bl	800b6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f944 	bl	800b722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d10e      	bne.n	800b4cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d107      	bne.n	800b4cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f06f 0201 	mvn.w	r2, #1
 800b4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f90d 	bl	800b6e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4d6:	2b80      	cmp	r3, #128	; 0x80
 800b4d8:	d10e      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4e4:	2b80      	cmp	r3, #128	; 0x80
 800b4e6:	d107      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 faea 	bl	800bacc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b502:	2b40      	cmp	r3, #64	; 0x40
 800b504:	d10e      	bne.n	800b524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b510:	2b40      	cmp	r3, #64	; 0x40
 800b512:	d107      	bne.n	800b524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f909 	bl	800b736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	f003 0320 	and.w	r3, r3, #32
 800b52e:	2b20      	cmp	r3, #32
 800b530:	d10e      	bne.n	800b550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b20      	cmp	r3, #32
 800b53e:	d107      	bne.n	800b550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f06f 0220 	mvn.w	r2, #32
 800b548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fab4 	bl	800bab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_TIM_ConfigClockSource+0x1c>
 800b570:	2302      	movs	r3, #2
 800b572:	e0b4      	b.n	800b6de <HAL_TIM_ConfigClockSource+0x186>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b59a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ac:	d03e      	beq.n	800b62c <HAL_TIM_ConfigClockSource+0xd4>
 800b5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b2:	f200 8087 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ba:	f000 8086 	beq.w	800b6ca <HAL_TIM_ConfigClockSource+0x172>
 800b5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c2:	d87f      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5c4:	2b70      	cmp	r3, #112	; 0x70
 800b5c6:	d01a      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0xa6>
 800b5c8:	2b70      	cmp	r3, #112	; 0x70
 800b5ca:	d87b      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5cc:	2b60      	cmp	r3, #96	; 0x60
 800b5ce:	d050      	beq.n	800b672 <HAL_TIM_ConfigClockSource+0x11a>
 800b5d0:	2b60      	cmp	r3, #96	; 0x60
 800b5d2:	d877      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5d4:	2b50      	cmp	r3, #80	; 0x50
 800b5d6:	d03c      	beq.n	800b652 <HAL_TIM_ConfigClockSource+0xfa>
 800b5d8:	2b50      	cmp	r3, #80	; 0x50
 800b5da:	d873      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5dc:	2b40      	cmp	r3, #64	; 0x40
 800b5de:	d058      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x13a>
 800b5e0:	2b40      	cmp	r3, #64	; 0x40
 800b5e2:	d86f      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5e4:	2b30      	cmp	r3, #48	; 0x30
 800b5e6:	d064      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b5e8:	2b30      	cmp	r3, #48	; 0x30
 800b5ea:	d86b      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	d060      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	d867      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d05c      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b5f8:	2b10      	cmp	r3, #16
 800b5fa:	d05a      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b5fc:	e062      	b.n	800b6c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	6899      	ldr	r1, [r3, #8]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f000 f9b7 	bl	800b980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	609a      	str	r2, [r3, #8]
      break;
 800b62a:	e04f      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	6899      	ldr	r1, [r3, #8]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f000 f9a0 	bl	800b980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689a      	ldr	r2, [r3, #8]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b64e:	609a      	str	r2, [r3, #8]
      break;
 800b650:	e03c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6859      	ldr	r1, [r3, #4]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	461a      	mov	r2, r3
 800b660:	f000 f914 	bl	800b88c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2150      	movs	r1, #80	; 0x50
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 f96d 	bl	800b94a <TIM_ITRx_SetConfig>
      break;
 800b670:	e02c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6859      	ldr	r1, [r3, #4]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	461a      	mov	r2, r3
 800b680:	f000 f933 	bl	800b8ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2160      	movs	r1, #96	; 0x60
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 f95d 	bl	800b94a <TIM_ITRx_SetConfig>
      break;
 800b690:	e01c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6818      	ldr	r0, [r3, #0]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	6859      	ldr	r1, [r3, #4]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f000 f8f4 	bl	800b88c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2140      	movs	r1, #64	; 0x40
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 f94d 	bl	800b94a <TIM_ITRx_SetConfig>
      break;
 800b6b0:	e00c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4610      	mov	r0, r2
 800b6be:	f000 f944 	bl	800b94a <TIM_ITRx_SetConfig>
      break;
 800b6c2:	e003      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c8:	e000      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b6ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b702:	bf00      	nop
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b716:	bf00      	nop
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b722:	b480      	push	{r7}
 800b724:	b083      	sub	sp, #12
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b736:	b480      	push	{r7}
 800b738:	b083      	sub	sp, #12
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
	...

0800b74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a40      	ldr	r2, [pc, #256]	; (800b860 <TIM_Base_SetConfig+0x114>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d013      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76a:	d00f      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a3d      	ldr	r2, [pc, #244]	; (800b864 <TIM_Base_SetConfig+0x118>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00b      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a3c      	ldr	r2, [pc, #240]	; (800b868 <TIM_Base_SetConfig+0x11c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d007      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a3b      	ldr	r2, [pc, #236]	; (800b86c <TIM_Base_SetConfig+0x120>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d003      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a3a      	ldr	r2, [pc, #232]	; (800b870 <TIM_Base_SetConfig+0x124>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d108      	bne.n	800b79e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a2f      	ldr	r2, [pc, #188]	; (800b860 <TIM_Base_SetConfig+0x114>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d02b      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ac:	d027      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a2c      	ldr	r2, [pc, #176]	; (800b864 <TIM_Base_SetConfig+0x118>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d023      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a2b      	ldr	r2, [pc, #172]	; (800b868 <TIM_Base_SetConfig+0x11c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d01f      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <TIM_Base_SetConfig+0x120>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d01b      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a29      	ldr	r2, [pc, #164]	; (800b870 <TIM_Base_SetConfig+0x124>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d017      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a28      	ldr	r2, [pc, #160]	; (800b874 <TIM_Base_SetConfig+0x128>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d013      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a27      	ldr	r2, [pc, #156]	; (800b878 <TIM_Base_SetConfig+0x12c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d00f      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a26      	ldr	r2, [pc, #152]	; (800b87c <TIM_Base_SetConfig+0x130>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00b      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a25      	ldr	r2, [pc, #148]	; (800b880 <TIM_Base_SetConfig+0x134>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d007      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a24      	ldr	r2, [pc, #144]	; (800b884 <TIM_Base_SetConfig+0x138>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d003      	beq.n	800b7fe <TIM_Base_SetConfig+0xb2>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a23      	ldr	r2, [pc, #140]	; (800b888 <TIM_Base_SetConfig+0x13c>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d108      	bne.n	800b810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	689a      	ldr	r2, [r3, #8]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a0a      	ldr	r2, [pc, #40]	; (800b860 <TIM_Base_SetConfig+0x114>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d003      	beq.n	800b844 <TIM_Base_SetConfig+0xf8>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a0c      	ldr	r2, [pc, #48]	; (800b870 <TIM_Base_SetConfig+0x124>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d103      	bne.n	800b84c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	691a      	ldr	r2, [r3, #16]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	615a      	str	r2, [r3, #20]
}
 800b852:	bf00      	nop
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	40010000 	.word	0x40010000
 800b864:	40000400 	.word	0x40000400
 800b868:	40000800 	.word	0x40000800
 800b86c:	40000c00 	.word	0x40000c00
 800b870:	40010400 	.word	0x40010400
 800b874:	40014000 	.word	0x40014000
 800b878:	40014400 	.word	0x40014400
 800b87c:	40014800 	.word	0x40014800
 800b880:	40001800 	.word	0x40001800
 800b884:	40001c00 	.word	0x40001c00
 800b888:	40002000 	.word	0x40002000

0800b88c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	f023 0201 	bic.w	r2, r3, #1
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f023 030a 	bic.w	r3, r3, #10
 800b8c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	621a      	str	r2, [r3, #32]
}
 800b8de:	bf00      	nop
 800b8e0:	371c      	adds	r7, #28
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	f023 0210 	bic.w	r2, r3, #16
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	031b      	lsls	r3, r3, #12
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	4313      	orrs	r3, r2
 800b930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	621a      	str	r2, [r3, #32]
}
 800b93e:	bf00      	nop
 800b940:	371c      	adds	r7, #28
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b085      	sub	sp, #20
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4313      	orrs	r3, r2
 800b968:	f043 0307 	orr.w	r3, r3, #7
 800b96c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	609a      	str	r2, [r3, #8]
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b99a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	021a      	lsls	r2, r3, #8
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	609a      	str	r2, [r3, #8]
}
 800b9b4:	bf00      	nop
 800b9b6:	371c      	adds	r7, #28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e05a      	b.n	800ba8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a21      	ldr	r2, [pc, #132]	; (800ba9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d022      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba24:	d01d      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a1d      	ldr	r2, [pc, #116]	; (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d018      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a1b      	ldr	r2, [pc, #108]	; (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d013      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a1a      	ldr	r2, [pc, #104]	; (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00e      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a18      	ldr	r2, [pc, #96]	; (800baac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d009      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a17      	ldr	r2, [pc, #92]	; (800bab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d004      	beq.n	800ba62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a15      	ldr	r2, [pc, #84]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d10c      	bne.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	40010000 	.word	0x40010000
 800baa0:	40000400 	.word	0x40000400
 800baa4:	40000800 	.word	0x40000800
 800baa8:	40000c00 	.word	0x40000c00
 800baac:	40010400 	.word	0x40010400
 800bab0:	40014000 	.word	0x40014000
 800bab4:	40001800 	.word	0x40001800

0800bab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e03f      	b.n	800bb72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d106      	bne.n	800bb0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7f8 fe46 	bl	8004798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2224      	movs	r2, #36	; 0x24
 800bb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fddf 	bl	800c6e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	695a      	ldr	r2, [r3, #20]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b08a      	sub	sp, #40	; 0x28
 800bb7e:	af02      	add	r7, sp, #8
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	603b      	str	r3, [r7, #0]
 800bb86:	4613      	mov	r3, r2
 800bb88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b20      	cmp	r3, #32
 800bb98:	d17c      	bne.n	800bc94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <HAL_UART_Transmit+0x2c>
 800bba0:	88fb      	ldrh	r3, [r7, #6]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e075      	b.n	800bc96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_UART_Transmit+0x3e>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e06e      	b.n	800bc96 <HAL_UART_Transmit+0x11c>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2221      	movs	r2, #33	; 0x21
 800bbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbce:	f7fb fd2f 	bl	8007630 <HAL_GetTick>
 800bbd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	88fa      	ldrh	r2, [r7, #6]
 800bbd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	88fa      	ldrh	r2, [r7, #6]
 800bbde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe8:	d108      	bne.n	800bbfc <HAL_UART_Transmit+0x82>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d104      	bne.n	800bbfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	61bb      	str	r3, [r7, #24]
 800bbfa:	e003      	b.n	800bc04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bc0c:	e02a      	b.n	800bc64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2200      	movs	r2, #0
 800bc16:	2180      	movs	r1, #128	; 0x80
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 fb1f 	bl	800c25c <UART_WaitOnFlagUntilTimeout>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e036      	b.n	800bc96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10b      	bne.n	800bc46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	881b      	ldrh	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	3302      	adds	r3, #2
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	e007      	b.n	800bc56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	3301      	adds	r3, #1
 800bc54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1cf      	bne.n	800bc0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2200      	movs	r2, #0
 800bc76:	2140      	movs	r1, #64	; 0x40
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 faef 	bl	800c25c <UART_WaitOnFlagUntilTimeout>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e006      	b.n	800bc96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	e000      	b.n	800bc96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bc94:	2302      	movs	r3, #2
  }
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3720      	adds	r7, #32
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	60b9      	str	r1, [r7, #8]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b20      	cmp	r3, #32
 800bcb6:	d11d      	bne.n	800bcf4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d002      	beq.n	800bcc4 <HAL_UART_Receive_IT+0x26>
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e016      	b.n	800bcf6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d101      	bne.n	800bcd6 <HAL_UART_Receive_IT+0x38>
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e00f      	b.n	800bcf6 <HAL_UART_Receive_IT+0x58>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bce4:	88fb      	ldrh	r3, [r7, #6]
 800bce6:	461a      	mov	r2, r3
 800bce8:	68b9      	ldr	r1, [r7, #8]
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f000 fb24 	bl	800c338 <UART_Start_Receive_IT>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	e000      	b.n	800bcf6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bcf4:	2302      	movs	r3, #2
  }
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b0ba      	sub	sp, #232	; 0xe8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bd26:	2300      	movs	r3, #0
 800bd28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd36:	f003 030f 	and.w	r3, r3, #15
 800bd3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bd3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10f      	bne.n	800bd66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd4a:	f003 0320 	and.w	r3, r3, #32
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d009      	beq.n	800bd66 <HAL_UART_IRQHandler+0x66>
 800bd52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fc07 	bl	800c572 <UART_Receive_IT>
      return;
 800bd64:	e256      	b.n	800c214 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80de 	beq.w	800bf2c <HAL_UART_IRQHandler+0x22c>
 800bd70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d106      	bne.n	800bd8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 80d1 	beq.w	800bf2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00b      	beq.n	800bdae <HAL_UART_IRQHandler+0xae>
 800bd96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d005      	beq.n	800bdae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda6:	f043 0201 	orr.w	r2, r3, #1
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00b      	beq.n	800bdd2 <HAL_UART_IRQHandler+0xd2>
 800bdba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d005      	beq.n	800bdd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdca:	f043 0202 	orr.w	r2, r3, #2
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdd6:	f003 0302 	and.w	r3, r3, #2
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00b      	beq.n	800bdf6 <HAL_UART_IRQHandler+0xf6>
 800bdde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bde2:	f003 0301 	and.w	r3, r3, #1
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdee:	f043 0204 	orr.w	r2, r3, #4
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bdf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d011      	beq.n	800be26 <HAL_UART_IRQHandler+0x126>
 800be02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be06:	f003 0320 	and.w	r3, r3, #32
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d105      	bne.n	800be1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b00      	cmp	r3, #0
 800be18:	d005      	beq.n	800be26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1e:	f043 0208 	orr.w	r2, r3, #8
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 81ed 	beq.w	800c20a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be34:	f003 0320 	and.w	r3, r3, #32
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d008      	beq.n	800be4e <HAL_UART_IRQHandler+0x14e>
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be40:	f003 0320 	and.w	r3, r3, #32
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fb92 	bl	800c572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be58:	2b40      	cmp	r3, #64	; 0x40
 800be5a:	bf0c      	ite	eq
 800be5c:	2301      	moveq	r3, #1
 800be5e:	2300      	movne	r3, #0
 800be60:	b2db      	uxtb	r3, r3
 800be62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	f003 0308 	and.w	r3, r3, #8
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d103      	bne.n	800be7a <HAL_UART_IRQHandler+0x17a>
 800be72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be76:	2b00      	cmp	r3, #0
 800be78:	d04f      	beq.n	800bf1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa9a 	bl	800c3b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8a:	2b40      	cmp	r3, #64	; 0x40
 800be8c:	d141      	bne.n	800bf12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3314      	adds	r3, #20
 800be94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be9c:	e853 3f00 	ldrex	r3, [r3]
 800bea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3314      	adds	r3, #20
 800beb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800beba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1d9      	bne.n	800be8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d013      	beq.n	800bf0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee6:	4a7d      	ldr	r2, [pc, #500]	; (800c0dc <HAL_UART_IRQHandler+0x3dc>)
 800bee8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fc fa5a 	bl	80083a8 <HAL_DMA_Abort_IT>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d016      	beq.n	800bf28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf08:	e00e      	b.n	800bf28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f990 	bl	800c230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf10:	e00a      	b.n	800bf28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f98c 	bl	800c230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf18:	e006      	b.n	800bf28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f988 	bl	800c230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bf26:	e170      	b.n	800c20a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf28:	bf00      	nop
    return;
 800bf2a:	e16e      	b.n	800c20a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	f040 814a 	bne.w	800c1ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3a:	f003 0310 	and.w	r3, r3, #16
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 8143 	beq.w	800c1ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf48:	f003 0310 	and.w	r3, r3, #16
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 813c 	beq.w	800c1ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf52:	2300      	movs	r3, #0
 800bf54:	60bb      	str	r3, [r7, #8]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60bb      	str	r3, [r7, #8]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	60bb      	str	r3, [r7, #8]
 800bf66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf72:	2b40      	cmp	r3, #64	; 0x40
 800bf74:	f040 80b4 	bne.w	800c0e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 8140 	beq.w	800c20e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf96:	429a      	cmp	r2, r3
 800bf98:	f080 8139 	bcs.w	800c20e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfae:	f000 8088 	beq.w	800c0c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	330c      	adds	r3, #12
 800bfb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bfc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	330c      	adds	r3, #12
 800bfda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bfde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfee:	e841 2300 	strex	r3, r2, [r1]
 800bff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1d9      	bne.n	800bfb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3314      	adds	r3, #20
 800c004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c00e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c010:	f023 0301 	bic.w	r3, r3, #1
 800c014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3314      	adds	r3, #20
 800c01e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c022:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c026:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c02a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e1      	bne.n	800bffe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3314      	adds	r3, #20
 800c040:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c044:	e853 3f00 	ldrex	r3, [r3]
 800c048:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c04a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c04c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3314      	adds	r3, #20
 800c05a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c05e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c060:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c064:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c06c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e3      	bne.n	800c03a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2220      	movs	r2, #32
 800c076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	330c      	adds	r3, #12
 800c086:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08a:	e853 3f00 	ldrex	r3, [r3]
 800c08e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c092:	f023 0310 	bic.w	r3, r3, #16
 800c096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	330c      	adds	r3, #12
 800c0a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c0a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800c0a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0ac:	e841 2300 	strex	r3, r2, [r1]
 800c0b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1e3      	bne.n	800c080 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fc f903 	bl	80082c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f8b6 	bl	800c244 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0d8:	e099      	b.n	800c20e <HAL_UART_IRQHandler+0x50e>
 800c0da:	bf00      	nop
 800c0dc:	0800c47b 	.word	0x0800c47b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	1ad3      	subs	r3, r2, r3
 800c0ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 808b 	beq.w	800c212 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c0fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 8086 	beq.w	800c212 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	330c      	adds	r3, #12
 800c10c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	e853 3f00 	ldrex	r3, [r3]
 800c114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c11c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	330c      	adds	r3, #12
 800c126:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c12a:	647a      	str	r2, [r7, #68]	; 0x44
 800c12c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e3      	bne.n	800c106 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3314      	adds	r3, #20
 800c144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	623b      	str	r3, [r7, #32]
   return(result);
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	f023 0301 	bic.w	r3, r3, #1
 800c154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3314      	adds	r3, #20
 800c15e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c162:	633a      	str	r2, [r7, #48]	; 0x30
 800c164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e3      	bne.n	800c13e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	330c      	adds	r3, #12
 800c18a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	60fb      	str	r3, [r7, #12]
   return(result);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0310 	bic.w	r3, r3, #16
 800c19a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	330c      	adds	r3, #12
 800c1a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c1a8:	61fa      	str	r2, [r7, #28]
 800c1aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	69b9      	ldr	r1, [r7, #24]
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e3      	bne.n	800c184 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f83e 	bl	800c244 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1c8:	e023      	b.n	800c212 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <HAL_UART_IRQHandler+0x4ea>
 800c1d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f95d 	bl	800c4a2 <UART_Transmit_IT>
    return;
 800c1e8:	e014      	b.n	800c214 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00e      	beq.n	800c214 <HAL_UART_IRQHandler+0x514>
 800c1f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d008      	beq.n	800c214 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f99d 	bl	800c542 <UART_EndTransmit_IT>
    return;
 800c208:	e004      	b.n	800c214 <HAL_UART_IRQHandler+0x514>
    return;
 800c20a:	bf00      	nop
 800c20c:	e002      	b.n	800c214 <HAL_UART_IRQHandler+0x514>
      return;
 800c20e:	bf00      	nop
 800c210:	e000      	b.n	800c214 <HAL_UART_IRQHandler+0x514>
      return;
 800c212:	bf00      	nop
  }
}
 800c214:	37e8      	adds	r7, #232	; 0xe8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop

0800c21c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b090      	sub	sp, #64	; 0x40
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	603b      	str	r3, [r7, #0]
 800c268:	4613      	mov	r3, r2
 800c26a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c26c:	e050      	b.n	800c310 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c274:	d04c      	beq.n	800c310 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d007      	beq.n	800c28c <UART_WaitOnFlagUntilTimeout+0x30>
 800c27c:	f7fb f9d8 	bl	8007630 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c288:	429a      	cmp	r2, r3
 800c28a:	d241      	bcs.n	800c310 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	330c      	adds	r3, #12
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	e853 3f00 	ldrex	r3, [r3]
 800c29a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	330c      	adds	r3, #12
 800c2aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2ac:	637a      	str	r2, [r7, #52]	; 0x34
 800c2ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e5      	bne.n	800c28c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	f023 0301 	bic.w	r3, r3, #1
 800c2d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3314      	adds	r3, #20
 800c2de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2e0:	623a      	str	r2, [r7, #32]
 800c2e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e4:	69f9      	ldr	r1, [r7, #28]
 800c2e6:	6a3a      	ldr	r2, [r7, #32]
 800c2e8:	e841 2300 	strex	r3, r2, [r1]
 800c2ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1e5      	bne.n	800c2c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2220      	movs	r2, #32
 800c300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e00f      	b.n	800c330 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	4013      	ands	r3, r2
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	bf0c      	ite	eq
 800c320:	2301      	moveq	r3, #1
 800c322:	2300      	movne	r3, #0
 800c324:	b2db      	uxtb	r3, r3
 800c326:	461a      	mov	r2, r3
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d09f      	beq.n	800c26e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3740      	adds	r7, #64	; 0x40
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	4613      	mov	r3, r2
 800c344:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	88fa      	ldrh	r2, [r7, #6]
 800c350:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	88fa      	ldrh	r2, [r7, #6]
 800c356:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2222      	movs	r2, #34	; 0x22
 800c362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68da      	ldr	r2, [r3, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c384:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	695a      	ldr	r2, [r3, #20]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f042 0201 	orr.w	r2, r2, #1
 800c394:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68da      	ldr	r2, [r3, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f042 0220 	orr.w	r2, r2, #32
 800c3a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b095      	sub	sp, #84	; 0x54
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c6:	e853 3f00 	ldrex	r3, [r3]
 800c3ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	330c      	adds	r3, #12
 800c3da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3dc:	643a      	str	r2, [r7, #64]	; 0x40
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3e4:	e841 2300 	strex	r3, r2, [r1]
 800c3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1e5      	bne.n	800c3bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3314      	adds	r3, #20
 800c3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	e853 3f00 	ldrex	r3, [r3]
 800c3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f023 0301 	bic.w	r3, r3, #1
 800c406:	64bb      	str	r3, [r7, #72]	; 0x48
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3314      	adds	r3, #20
 800c40e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c410:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c418:	e841 2300 	strex	r3, r2, [r1]
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e5      	bne.n	800c3f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d119      	bne.n	800c460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	330c      	adds	r3, #12
 800c432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	e853 3f00 	ldrex	r3, [r3]
 800c43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f023 0310 	bic.w	r3, r3, #16
 800c442:	647b      	str	r3, [r7, #68]	; 0x44
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	330c      	adds	r3, #12
 800c44a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c44c:	61ba      	str	r2, [r7, #24]
 800c44e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c450:	6979      	ldr	r1, [r7, #20]
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	e841 2300 	strex	r3, r2, [r1]
 800c458:	613b      	str	r3, [r7, #16]
   return(result);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1e5      	bne.n	800c42c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2220      	movs	r2, #32
 800c464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c46e:	bf00      	nop
 800c470:	3754      	adds	r7, #84	; 0x54
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b084      	sub	sp, #16
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f7ff fecb 	bl	800c230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c49a:	bf00      	nop
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b21      	cmp	r3, #33	; 0x21
 800c4b4:	d13e      	bne.n	800c534 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4be:	d114      	bne.n	800c4ea <UART_Transmit_IT+0x48>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d110      	bne.n	800c4ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a1b      	ldr	r3, [r3, #32]
 800c4cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	1c9a      	adds	r2, r3, #2
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	621a      	str	r2, [r3, #32]
 800c4e8:	e008      	b.n	800c4fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	1c59      	adds	r1, r3, #1
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	6211      	str	r1, [r2, #32]
 800c4f4:	781a      	ldrb	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c500:	b29b      	uxth	r3, r3
 800c502:	3b01      	subs	r3, #1
 800c504:	b29b      	uxth	r3, r3
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	4619      	mov	r1, r3
 800c50a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10f      	bne.n	800c530 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68da      	ldr	r2, [r3, #12]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c51e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68da      	ldr	r2, [r3, #12]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c52e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	e000      	b.n	800c536 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c534:	2302      	movs	r3, #2
  }
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68da      	ldr	r2, [r3, #12]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2220      	movs	r2, #32
 800c55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fe5a 	bl	800c21c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b08c      	sub	sp, #48	; 0x30
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b22      	cmp	r3, #34	; 0x22
 800c584:	f040 80ab 	bne.w	800c6de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c590:	d117      	bne.n	800c5c2 <UART_Receive_IT+0x50>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d113      	bne.n	800c5c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ba:	1c9a      	adds	r2, r3, #2
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	629a      	str	r2, [r3, #40]	; 0x28
 800c5c0:	e026      	b.n	800c610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5d4:	d007      	beq.n	800c5e6 <UART_Receive_IT+0x74>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10a      	bne.n	800c5f4 <UART_Receive_IT+0x82>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	e008      	b.n	800c606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c600:	b2da      	uxtb	r2, r3
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c614:	b29b      	uxth	r3, r3
 800c616:	3b01      	subs	r3, #1
 800c618:	b29b      	uxth	r3, r3
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4619      	mov	r1, r3
 800c61e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c620:	2b00      	cmp	r3, #0
 800c622:	d15a      	bne.n	800c6da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68da      	ldr	r2, [r3, #12]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 0220 	bic.w	r2, r2, #32
 800c632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68da      	ldr	r2, [r3, #12]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	695a      	ldr	r2, [r3, #20]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f022 0201 	bic.w	r2, r2, #1
 800c652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2220      	movs	r2, #32
 800c658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c660:	2b01      	cmp	r3, #1
 800c662:	d135      	bne.n	800c6d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	330c      	adds	r3, #12
 800c670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	613b      	str	r3, [r7, #16]
   return(result);
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f023 0310 	bic.w	r3, r3, #16
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	330c      	adds	r3, #12
 800c688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68a:	623a      	str	r2, [r7, #32]
 800c68c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68e:	69f9      	ldr	r1, [r7, #28]
 800c690:	6a3a      	ldr	r2, [r7, #32]
 800c692:	e841 2300 	strex	r3, r2, [r1]
 800c696:	61bb      	str	r3, [r7, #24]
   return(result);
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1e5      	bne.n	800c66a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0310 	and.w	r3, r3, #16
 800c6a8:	2b10      	cmp	r3, #16
 800c6aa:	d10a      	bne.n	800c6c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff fdbb 	bl	800c244 <HAL_UARTEx_RxEventCallback>
 800c6ce:	e002      	b.n	800c6d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7f7 fd81 	bl	80041d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e002      	b.n	800c6e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e000      	b.n	800c6e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c6de:	2302      	movs	r3, #2
  }
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3730      	adds	r7, #48	; 0x30
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6ec:	b0c0      	sub	sp, #256	; 0x100
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c704:	68d9      	ldr	r1, [r3, #12]
 800c706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	ea40 0301 	orr.w	r3, r0, r1
 800c710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c716:	689a      	ldr	r2, [r3, #8]
 800c718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	431a      	orrs	r2, r3
 800c720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	431a      	orrs	r2, r3
 800c728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c72c:	69db      	ldr	r3, [r3, #28]
 800c72e:	4313      	orrs	r3, r2
 800c730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c740:	f021 010c 	bic.w	r1, r1, #12
 800c744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c74e:	430b      	orrs	r3, r1
 800c750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c762:	6999      	ldr	r1, [r3, #24]
 800c764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	ea40 0301 	orr.w	r3, r0, r1
 800c76e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	4b8f      	ldr	r3, [pc, #572]	; (800c9b4 <UART_SetConfig+0x2cc>)
 800c778:	429a      	cmp	r2, r3
 800c77a:	d005      	beq.n	800c788 <UART_SetConfig+0xa0>
 800c77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	4b8d      	ldr	r3, [pc, #564]	; (800c9b8 <UART_SetConfig+0x2d0>)
 800c784:	429a      	cmp	r2, r3
 800c786:	d104      	bne.n	800c792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c788:	f7fd fb62 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
 800c78c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c790:	e003      	b.n	800c79a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c792:	f7fd fb49 	bl	8009e28 <HAL_RCC_GetPCLK1Freq>
 800c796:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7a4:	f040 810c 	bne.w	800c9c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c7b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c7b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	462b      	mov	r3, r5
 800c7be:	1891      	adds	r1, r2, r2
 800c7c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7c2:	415b      	adcs	r3, r3
 800c7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	eb12 0801 	adds.w	r8, r2, r1
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	eb43 0901 	adc.w	r9, r3, r1
 800c7d6:	f04f 0200 	mov.w	r2, #0
 800c7da:	f04f 0300 	mov.w	r3, #0
 800c7de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7ea:	4690      	mov	r8, r2
 800c7ec:	4699      	mov	r9, r3
 800c7ee:	4623      	mov	r3, r4
 800c7f0:	eb18 0303 	adds.w	r3, r8, r3
 800c7f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7f8:	462b      	mov	r3, r5
 800c7fa:	eb49 0303 	adc.w	r3, r9, r3
 800c7fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c80e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c816:	460b      	mov	r3, r1
 800c818:	18db      	adds	r3, r3, r3
 800c81a:	653b      	str	r3, [r7, #80]	; 0x50
 800c81c:	4613      	mov	r3, r2
 800c81e:	eb42 0303 	adc.w	r3, r2, r3
 800c822:	657b      	str	r3, [r7, #84]	; 0x54
 800c824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c82c:	f7f4 fa86 	bl	8000d3c <__aeabi_uldivmod>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4b61      	ldr	r3, [pc, #388]	; (800c9bc <UART_SetConfig+0x2d4>)
 800c836:	fba3 2302 	umull	r2, r3, r3, r2
 800c83a:	095b      	lsrs	r3, r3, #5
 800c83c:	011c      	lsls	r4, r3, #4
 800c83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c842:	2200      	movs	r2, #0
 800c844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c848:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c84c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c850:	4642      	mov	r2, r8
 800c852:	464b      	mov	r3, r9
 800c854:	1891      	adds	r1, r2, r2
 800c856:	64b9      	str	r1, [r7, #72]	; 0x48
 800c858:	415b      	adcs	r3, r3
 800c85a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c85c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c860:	4641      	mov	r1, r8
 800c862:	eb12 0a01 	adds.w	sl, r2, r1
 800c866:	4649      	mov	r1, r9
 800c868:	eb43 0b01 	adc.w	fp, r3, r1
 800c86c:	f04f 0200 	mov.w	r2, #0
 800c870:	f04f 0300 	mov.w	r3, #0
 800c874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c87c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c880:	4692      	mov	sl, r2
 800c882:	469b      	mov	fp, r3
 800c884:	4643      	mov	r3, r8
 800c886:	eb1a 0303 	adds.w	r3, sl, r3
 800c88a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c88e:	464b      	mov	r3, r9
 800c890:	eb4b 0303 	adc.w	r3, fp, r3
 800c894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c8a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	18db      	adds	r3, r3, r3
 800c8b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	eb42 0303 	adc.w	r3, r2, r3
 800c8b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c8be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c8c2:	f7f4 fa3b 	bl	8000d3c <__aeabi_uldivmod>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	4b3b      	ldr	r3, [pc, #236]	; (800c9bc <UART_SetConfig+0x2d4>)
 800c8ce:	fba3 2301 	umull	r2, r3, r3, r1
 800c8d2:	095b      	lsrs	r3, r3, #5
 800c8d4:	2264      	movs	r2, #100	; 0x64
 800c8d6:	fb02 f303 	mul.w	r3, r2, r3
 800c8da:	1acb      	subs	r3, r1, r3
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c8e2:	4b36      	ldr	r3, [pc, #216]	; (800c9bc <UART_SetConfig+0x2d4>)
 800c8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800c8e8:	095b      	lsrs	r3, r3, #5
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8f0:	441c      	add	r4, r3
 800c8f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c904:	4642      	mov	r2, r8
 800c906:	464b      	mov	r3, r9
 800c908:	1891      	adds	r1, r2, r2
 800c90a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c90c:	415b      	adcs	r3, r3
 800c90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c914:	4641      	mov	r1, r8
 800c916:	1851      	adds	r1, r2, r1
 800c918:	6339      	str	r1, [r7, #48]	; 0x30
 800c91a:	4649      	mov	r1, r9
 800c91c:	414b      	adcs	r3, r1
 800c91e:	637b      	str	r3, [r7, #52]	; 0x34
 800c920:	f04f 0200 	mov.w	r2, #0
 800c924:	f04f 0300 	mov.w	r3, #0
 800c928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c92c:	4659      	mov	r1, fp
 800c92e:	00cb      	lsls	r3, r1, #3
 800c930:	4651      	mov	r1, sl
 800c932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c936:	4651      	mov	r1, sl
 800c938:	00ca      	lsls	r2, r1, #3
 800c93a:	4610      	mov	r0, r2
 800c93c:	4619      	mov	r1, r3
 800c93e:	4603      	mov	r3, r0
 800c940:	4642      	mov	r2, r8
 800c942:	189b      	adds	r3, r3, r2
 800c944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c948:	464b      	mov	r3, r9
 800c94a:	460a      	mov	r2, r1
 800c94c:	eb42 0303 	adc.w	r3, r2, r3
 800c950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c960:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c968:	460b      	mov	r3, r1
 800c96a:	18db      	adds	r3, r3, r3
 800c96c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c96e:	4613      	mov	r3, r2
 800c970:	eb42 0303 	adc.w	r3, r2, r3
 800c974:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c97a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c97e:	f7f4 f9dd 	bl	8000d3c <__aeabi_uldivmod>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4b0d      	ldr	r3, [pc, #52]	; (800c9bc <UART_SetConfig+0x2d4>)
 800c988:	fba3 1302 	umull	r1, r3, r3, r2
 800c98c:	095b      	lsrs	r3, r3, #5
 800c98e:	2164      	movs	r1, #100	; 0x64
 800c990:	fb01 f303 	mul.w	r3, r1, r3
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	3332      	adds	r3, #50	; 0x32
 800c99a:	4a08      	ldr	r2, [pc, #32]	; (800c9bc <UART_SetConfig+0x2d4>)
 800c99c:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a0:	095b      	lsrs	r3, r3, #5
 800c9a2:	f003 0207 	and.w	r2, r3, #7
 800c9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4422      	add	r2, r4
 800c9ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c9b0:	e106      	b.n	800cbc0 <UART_SetConfig+0x4d8>
 800c9b2:	bf00      	nop
 800c9b4:	40011000 	.word	0x40011000
 800c9b8:	40011400 	.word	0x40011400
 800c9bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c9ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c9d2:	4642      	mov	r2, r8
 800c9d4:	464b      	mov	r3, r9
 800c9d6:	1891      	adds	r1, r2, r2
 800c9d8:	6239      	str	r1, [r7, #32]
 800c9da:	415b      	adcs	r3, r3
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9e2:	4641      	mov	r1, r8
 800c9e4:	1854      	adds	r4, r2, r1
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	eb43 0501 	adc.w	r5, r3, r1
 800c9ec:	f04f 0200 	mov.w	r2, #0
 800c9f0:	f04f 0300 	mov.w	r3, #0
 800c9f4:	00eb      	lsls	r3, r5, #3
 800c9f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9fa:	00e2      	lsls	r2, r4, #3
 800c9fc:	4614      	mov	r4, r2
 800c9fe:	461d      	mov	r5, r3
 800ca00:	4643      	mov	r3, r8
 800ca02:	18e3      	adds	r3, r4, r3
 800ca04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca08:	464b      	mov	r3, r9
 800ca0a:	eb45 0303 	adc.w	r3, r5, r3
 800ca0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca22:	f04f 0200 	mov.w	r2, #0
 800ca26:	f04f 0300 	mov.w	r3, #0
 800ca2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca2e:	4629      	mov	r1, r5
 800ca30:	008b      	lsls	r3, r1, #2
 800ca32:	4621      	mov	r1, r4
 800ca34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca38:	4621      	mov	r1, r4
 800ca3a:	008a      	lsls	r2, r1, #2
 800ca3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca40:	f7f4 f97c 	bl	8000d3c <__aeabi_uldivmod>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4b60      	ldr	r3, [pc, #384]	; (800cbcc <UART_SetConfig+0x4e4>)
 800ca4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	011c      	lsls	r4, r3, #4
 800ca52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca56:	2200      	movs	r2, #0
 800ca58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ca60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ca64:	4642      	mov	r2, r8
 800ca66:	464b      	mov	r3, r9
 800ca68:	1891      	adds	r1, r2, r2
 800ca6a:	61b9      	str	r1, [r7, #24]
 800ca6c:	415b      	adcs	r3, r3
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca74:	4641      	mov	r1, r8
 800ca76:	1851      	adds	r1, r2, r1
 800ca78:	6139      	str	r1, [r7, #16]
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	414b      	adcs	r3, r1
 800ca7e:	617b      	str	r3, [r7, #20]
 800ca80:	f04f 0200 	mov.w	r2, #0
 800ca84:	f04f 0300 	mov.w	r3, #0
 800ca88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ca8c:	4659      	mov	r1, fp
 800ca8e:	00cb      	lsls	r3, r1, #3
 800ca90:	4651      	mov	r1, sl
 800ca92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca96:	4651      	mov	r1, sl
 800ca98:	00ca      	lsls	r2, r1, #3
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4603      	mov	r3, r0
 800caa0:	4642      	mov	r2, r8
 800caa2:	189b      	adds	r3, r3, r2
 800caa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800caa8:	464b      	mov	r3, r9
 800caaa:	460a      	mov	r2, r1
 800caac:	eb42 0303 	adc.w	r3, r2, r3
 800cab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	67bb      	str	r3, [r7, #120]	; 0x78
 800cabe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cac0:	f04f 0200 	mov.w	r2, #0
 800cac4:	f04f 0300 	mov.w	r3, #0
 800cac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cacc:	4649      	mov	r1, r9
 800cace:	008b      	lsls	r3, r1, #2
 800cad0:	4641      	mov	r1, r8
 800cad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cad6:	4641      	mov	r1, r8
 800cad8:	008a      	lsls	r2, r1, #2
 800cada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cade:	f7f4 f92d 	bl	8000d3c <__aeabi_uldivmod>
 800cae2:	4602      	mov	r2, r0
 800cae4:	460b      	mov	r3, r1
 800cae6:	4611      	mov	r1, r2
 800cae8:	4b38      	ldr	r3, [pc, #224]	; (800cbcc <UART_SetConfig+0x4e4>)
 800caea:	fba3 2301 	umull	r2, r3, r3, r1
 800caee:	095b      	lsrs	r3, r3, #5
 800caf0:	2264      	movs	r2, #100	; 0x64
 800caf2:	fb02 f303 	mul.w	r3, r2, r3
 800caf6:	1acb      	subs	r3, r1, r3
 800caf8:	011b      	lsls	r3, r3, #4
 800cafa:	3332      	adds	r3, #50	; 0x32
 800cafc:	4a33      	ldr	r2, [pc, #204]	; (800cbcc <UART_SetConfig+0x4e4>)
 800cafe:	fba2 2303 	umull	r2, r3, r2, r3
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb08:	441c      	add	r4, r3
 800cb0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb0e:	2200      	movs	r2, #0
 800cb10:	673b      	str	r3, [r7, #112]	; 0x70
 800cb12:	677a      	str	r2, [r7, #116]	; 0x74
 800cb14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cb18:	4642      	mov	r2, r8
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	1891      	adds	r1, r2, r2
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	415b      	adcs	r3, r3
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb28:	4641      	mov	r1, r8
 800cb2a:	1851      	adds	r1, r2, r1
 800cb2c:	6039      	str	r1, [r7, #0]
 800cb2e:	4649      	mov	r1, r9
 800cb30:	414b      	adcs	r3, r1
 800cb32:	607b      	str	r3, [r7, #4]
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	f04f 0300 	mov.w	r3, #0
 800cb3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb40:	4659      	mov	r1, fp
 800cb42:	00cb      	lsls	r3, r1, #3
 800cb44:	4651      	mov	r1, sl
 800cb46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb4a:	4651      	mov	r1, sl
 800cb4c:	00ca      	lsls	r2, r1, #3
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4619      	mov	r1, r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	4642      	mov	r2, r8
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb5a:	464b      	mov	r3, r9
 800cb5c:	460a      	mov	r2, r1
 800cb5e:	eb42 0303 	adc.w	r3, r2, r3
 800cb62:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	663b      	str	r3, [r7, #96]	; 0x60
 800cb6e:	667a      	str	r2, [r7, #100]	; 0x64
 800cb70:	f04f 0200 	mov.w	r2, #0
 800cb74:	f04f 0300 	mov.w	r3, #0
 800cb78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	008b      	lsls	r3, r1, #2
 800cb80:	4641      	mov	r1, r8
 800cb82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb86:	4641      	mov	r1, r8
 800cb88:	008a      	lsls	r2, r1, #2
 800cb8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cb8e:	f7f4 f8d5 	bl	8000d3c <__aeabi_uldivmod>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <UART_SetConfig+0x4e4>)
 800cb98:	fba3 1302 	umull	r1, r3, r3, r2
 800cb9c:	095b      	lsrs	r3, r3, #5
 800cb9e:	2164      	movs	r1, #100	; 0x64
 800cba0:	fb01 f303 	mul.w	r3, r1, r3
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	011b      	lsls	r3, r3, #4
 800cba8:	3332      	adds	r3, #50	; 0x32
 800cbaa:	4a08      	ldr	r2, [pc, #32]	; (800cbcc <UART_SetConfig+0x4e4>)
 800cbac:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb0:	095b      	lsrs	r3, r3, #5
 800cbb2:	f003 020f 	and.w	r2, r3, #15
 800cbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4422      	add	r2, r4
 800cbbe:	609a      	str	r2, [r3, #8]
}
 800cbc0:	bf00      	nop
 800cbc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbcc:	51eb851f 	.word	0x51eb851f

0800cbd0 <atoi>:
 800cbd0:	220a      	movs	r2, #10
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	f000 be54 	b.w	800d880 <strtol>

0800cbd8 <__cvt>:
 800cbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbdc:	ec55 4b10 	vmov	r4, r5, d0
 800cbe0:	2d00      	cmp	r5, #0
 800cbe2:	460e      	mov	r6, r1
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	462b      	mov	r3, r5
 800cbe8:	bfbb      	ittet	lt
 800cbea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbee:	461d      	movlt	r5, r3
 800cbf0:	2300      	movge	r3, #0
 800cbf2:	232d      	movlt	r3, #45	; 0x2d
 800cbf4:	700b      	strb	r3, [r1, #0]
 800cbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbfc:	4691      	mov	r9, r2
 800cbfe:	f023 0820 	bic.w	r8, r3, #32
 800cc02:	bfbc      	itt	lt
 800cc04:	4622      	movlt	r2, r4
 800cc06:	4614      	movlt	r4, r2
 800cc08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc0c:	d005      	beq.n	800cc1a <__cvt+0x42>
 800cc0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cc12:	d100      	bne.n	800cc16 <__cvt+0x3e>
 800cc14:	3601      	adds	r6, #1
 800cc16:	2102      	movs	r1, #2
 800cc18:	e000      	b.n	800cc1c <__cvt+0x44>
 800cc1a:	2103      	movs	r1, #3
 800cc1c:	ab03      	add	r3, sp, #12
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	ab02      	add	r3, sp, #8
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	ec45 4b10 	vmov	d0, r4, r5
 800cc28:	4653      	mov	r3, sl
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	f001 f840 	bl	800dcb0 <_dtoa_r>
 800cc30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc34:	4607      	mov	r7, r0
 800cc36:	d102      	bne.n	800cc3e <__cvt+0x66>
 800cc38:	f019 0f01 	tst.w	r9, #1
 800cc3c:	d022      	beq.n	800cc84 <__cvt+0xac>
 800cc3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc42:	eb07 0906 	add.w	r9, r7, r6
 800cc46:	d110      	bne.n	800cc6a <__cvt+0x92>
 800cc48:	783b      	ldrb	r3, [r7, #0]
 800cc4a:	2b30      	cmp	r3, #48	; 0x30
 800cc4c:	d10a      	bne.n	800cc64 <__cvt+0x8c>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2300      	movs	r3, #0
 800cc52:	4620      	mov	r0, r4
 800cc54:	4629      	mov	r1, r5
 800cc56:	f7f3 ff61 	bl	8000b1c <__aeabi_dcmpeq>
 800cc5a:	b918      	cbnz	r0, 800cc64 <__cvt+0x8c>
 800cc5c:	f1c6 0601 	rsb	r6, r6, #1
 800cc60:	f8ca 6000 	str.w	r6, [sl]
 800cc64:	f8da 3000 	ldr.w	r3, [sl]
 800cc68:	4499      	add	r9, r3
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4620      	mov	r0, r4
 800cc70:	4629      	mov	r1, r5
 800cc72:	f7f3 ff53 	bl	8000b1c <__aeabi_dcmpeq>
 800cc76:	b108      	cbz	r0, 800cc7c <__cvt+0xa4>
 800cc78:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc7c:	2230      	movs	r2, #48	; 0x30
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	454b      	cmp	r3, r9
 800cc82:	d307      	bcc.n	800cc94 <__cvt+0xbc>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc88:	1bdb      	subs	r3, r3, r7
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	b004      	add	sp, #16
 800cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc94:	1c59      	adds	r1, r3, #1
 800cc96:	9103      	str	r1, [sp, #12]
 800cc98:	701a      	strb	r2, [r3, #0]
 800cc9a:	e7f0      	b.n	800cc7e <__cvt+0xa6>

0800cc9c <__exponent>:
 800cc9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2900      	cmp	r1, #0
 800cca2:	bfb8      	it	lt
 800cca4:	4249      	neglt	r1, r1
 800cca6:	f803 2b02 	strb.w	r2, [r3], #2
 800ccaa:	bfb4      	ite	lt
 800ccac:	222d      	movlt	r2, #45	; 0x2d
 800ccae:	222b      	movge	r2, #43	; 0x2b
 800ccb0:	2909      	cmp	r1, #9
 800ccb2:	7042      	strb	r2, [r0, #1]
 800ccb4:	dd2a      	ble.n	800cd0c <__exponent+0x70>
 800ccb6:	f10d 0207 	add.w	r2, sp, #7
 800ccba:	4617      	mov	r7, r2
 800ccbc:	260a      	movs	r6, #10
 800ccbe:	4694      	mov	ip, r2
 800ccc0:	fb91 f5f6 	sdiv	r5, r1, r6
 800ccc4:	fb06 1415 	mls	r4, r6, r5, r1
 800ccc8:	3430      	adds	r4, #48	; 0x30
 800ccca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ccce:	460c      	mov	r4, r1
 800ccd0:	2c63      	cmp	r4, #99	; 0x63
 800ccd2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	dcf1      	bgt.n	800ccbe <__exponent+0x22>
 800ccda:	3130      	adds	r1, #48	; 0x30
 800ccdc:	f1ac 0402 	sub.w	r4, ip, #2
 800cce0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cce4:	1c41      	adds	r1, r0, #1
 800cce6:	4622      	mov	r2, r4
 800cce8:	42ba      	cmp	r2, r7
 800ccea:	d30a      	bcc.n	800cd02 <__exponent+0x66>
 800ccec:	f10d 0209 	add.w	r2, sp, #9
 800ccf0:	eba2 020c 	sub.w	r2, r2, ip
 800ccf4:	42bc      	cmp	r4, r7
 800ccf6:	bf88      	it	hi
 800ccf8:	2200      	movhi	r2, #0
 800ccfa:	4413      	add	r3, r2
 800ccfc:	1a18      	subs	r0, r3, r0
 800ccfe:	b003      	add	sp, #12
 800cd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd02:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cd06:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cd0a:	e7ed      	b.n	800cce8 <__exponent+0x4c>
 800cd0c:	2330      	movs	r3, #48	; 0x30
 800cd0e:	3130      	adds	r1, #48	; 0x30
 800cd10:	7083      	strb	r3, [r0, #2]
 800cd12:	70c1      	strb	r1, [r0, #3]
 800cd14:	1d03      	adds	r3, r0, #4
 800cd16:	e7f1      	b.n	800ccfc <__exponent+0x60>

0800cd18 <_printf_float>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	ed2d 8b02 	vpush	{d8}
 800cd20:	b08d      	sub	sp, #52	; 0x34
 800cd22:	460c      	mov	r4, r1
 800cd24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd28:	4616      	mov	r6, r2
 800cd2a:	461f      	mov	r7, r3
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	f000 fe91 	bl	800da54 <_localeconv_r>
 800cd32:	f8d0 a000 	ldr.w	sl, [r0]
 800cd36:	4650      	mov	r0, sl
 800cd38:	f7f3 faba 	bl	80002b0 <strlen>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	f8d8 3000 	ldr.w	r3, [r8]
 800cd48:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cd4c:	3307      	adds	r3, #7
 800cd4e:	f023 0307 	bic.w	r3, r3, #7
 800cd52:	f103 0208 	add.w	r2, r3, #8
 800cd56:	f8c8 2000 	str.w	r2, [r8]
 800cd5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd62:	9307      	str	r3, [sp, #28]
 800cd64:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd68:	ee08 0a10 	vmov	s16, r0
 800cd6c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cd70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd74:	4b9e      	ldr	r3, [pc, #632]	; (800cff0 <_printf_float+0x2d8>)
 800cd76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd7a:	f7f3 ff01 	bl	8000b80 <__aeabi_dcmpun>
 800cd7e:	bb88      	cbnz	r0, 800cde4 <_printf_float+0xcc>
 800cd80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd84:	4b9a      	ldr	r3, [pc, #616]	; (800cff0 <_printf_float+0x2d8>)
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd8a:	f7f3 fedb 	bl	8000b44 <__aeabi_dcmple>
 800cd8e:	bb48      	cbnz	r0, 800cde4 <_printf_float+0xcc>
 800cd90:	2200      	movs	r2, #0
 800cd92:	2300      	movs	r3, #0
 800cd94:	4640      	mov	r0, r8
 800cd96:	4649      	mov	r1, r9
 800cd98:	f7f3 feca 	bl	8000b30 <__aeabi_dcmplt>
 800cd9c:	b110      	cbz	r0, 800cda4 <_printf_float+0x8c>
 800cd9e:	232d      	movs	r3, #45	; 0x2d
 800cda0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cda4:	4a93      	ldr	r2, [pc, #588]	; (800cff4 <_printf_float+0x2dc>)
 800cda6:	4b94      	ldr	r3, [pc, #592]	; (800cff8 <_printf_float+0x2e0>)
 800cda8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cdac:	bf94      	ite	ls
 800cdae:	4690      	movls	r8, r2
 800cdb0:	4698      	movhi	r8, r3
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	9b05      	ldr	r3, [sp, #20]
 800cdb8:	f023 0304 	bic.w	r3, r3, #4
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	f04f 0900 	mov.w	r9, #0
 800cdc2:	9700      	str	r7, [sp, #0]
 800cdc4:	4633      	mov	r3, r6
 800cdc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cdc8:	4621      	mov	r1, r4
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f000 f9da 	bl	800d184 <_printf_common>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	f040 8090 	bne.w	800cef6 <_printf_float+0x1de>
 800cdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdda:	b00d      	add	sp, #52	; 0x34
 800cddc:	ecbd 8b02 	vpop	{d8}
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	4642      	mov	r2, r8
 800cde6:	464b      	mov	r3, r9
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	f7f3 fec8 	bl	8000b80 <__aeabi_dcmpun>
 800cdf0:	b140      	cbz	r0, 800ce04 <_printf_float+0xec>
 800cdf2:	464b      	mov	r3, r9
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfbc      	itt	lt
 800cdf8:	232d      	movlt	r3, #45	; 0x2d
 800cdfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cdfe:	4a7f      	ldr	r2, [pc, #508]	; (800cffc <_printf_float+0x2e4>)
 800ce00:	4b7f      	ldr	r3, [pc, #508]	; (800d000 <_printf_float+0x2e8>)
 800ce02:	e7d1      	b.n	800cda8 <_printf_float+0x90>
 800ce04:	6863      	ldr	r3, [r4, #4]
 800ce06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ce0a:	9206      	str	r2, [sp, #24]
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	d13f      	bne.n	800ce90 <_printf_float+0x178>
 800ce10:	2306      	movs	r3, #6
 800ce12:	6063      	str	r3, [r4, #4]
 800ce14:	9b05      	ldr	r3, [sp, #20]
 800ce16:	6861      	ldr	r1, [r4, #4]
 800ce18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	ab0a      	add	r3, sp, #40	; 0x28
 800ce22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ce26:	ab09      	add	r3, sp, #36	; 0x24
 800ce28:	ec49 8b10 	vmov	d0, r8, r9
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	6022      	str	r2, [r4, #0]
 800ce30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce34:	4628      	mov	r0, r5
 800ce36:	f7ff fecf 	bl	800cbd8 <__cvt>
 800ce3a:	9b06      	ldr	r3, [sp, #24]
 800ce3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce3e:	2b47      	cmp	r3, #71	; 0x47
 800ce40:	4680      	mov	r8, r0
 800ce42:	d108      	bne.n	800ce56 <_printf_float+0x13e>
 800ce44:	1cc8      	adds	r0, r1, #3
 800ce46:	db02      	blt.n	800ce4e <_printf_float+0x136>
 800ce48:	6863      	ldr	r3, [r4, #4]
 800ce4a:	4299      	cmp	r1, r3
 800ce4c:	dd41      	ble.n	800ced2 <_printf_float+0x1ba>
 800ce4e:	f1ab 0302 	sub.w	r3, fp, #2
 800ce52:	fa5f fb83 	uxtb.w	fp, r3
 800ce56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce5a:	d820      	bhi.n	800ce9e <_printf_float+0x186>
 800ce5c:	3901      	subs	r1, #1
 800ce5e:	465a      	mov	r2, fp
 800ce60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce64:	9109      	str	r1, [sp, #36]	; 0x24
 800ce66:	f7ff ff19 	bl	800cc9c <__exponent>
 800ce6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce6c:	1813      	adds	r3, r2, r0
 800ce6e:	2a01      	cmp	r2, #1
 800ce70:	4681      	mov	r9, r0
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	dc02      	bgt.n	800ce7c <_printf_float+0x164>
 800ce76:	6822      	ldr	r2, [r4, #0]
 800ce78:	07d2      	lsls	r2, r2, #31
 800ce7a:	d501      	bpl.n	800ce80 <_printf_float+0x168>
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d09c      	beq.n	800cdc2 <_printf_float+0xaa>
 800ce88:	232d      	movs	r3, #45	; 0x2d
 800ce8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce8e:	e798      	b.n	800cdc2 <_printf_float+0xaa>
 800ce90:	9a06      	ldr	r2, [sp, #24]
 800ce92:	2a47      	cmp	r2, #71	; 0x47
 800ce94:	d1be      	bne.n	800ce14 <_printf_float+0xfc>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1bc      	bne.n	800ce14 <_printf_float+0xfc>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e7b9      	b.n	800ce12 <_printf_float+0xfa>
 800ce9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cea2:	d118      	bne.n	800ced6 <_printf_float+0x1be>
 800cea4:	2900      	cmp	r1, #0
 800cea6:	6863      	ldr	r3, [r4, #4]
 800cea8:	dd0b      	ble.n	800cec2 <_printf_float+0x1aa>
 800ceaa:	6121      	str	r1, [r4, #16]
 800ceac:	b913      	cbnz	r3, 800ceb4 <_printf_float+0x19c>
 800ceae:	6822      	ldr	r2, [r4, #0]
 800ceb0:	07d0      	lsls	r0, r2, #31
 800ceb2:	d502      	bpl.n	800ceba <_printf_float+0x1a2>
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	440b      	add	r3, r1
 800ceb8:	6123      	str	r3, [r4, #16]
 800ceba:	65a1      	str	r1, [r4, #88]	; 0x58
 800cebc:	f04f 0900 	mov.w	r9, #0
 800cec0:	e7de      	b.n	800ce80 <_printf_float+0x168>
 800cec2:	b913      	cbnz	r3, 800ceca <_printf_float+0x1b2>
 800cec4:	6822      	ldr	r2, [r4, #0]
 800cec6:	07d2      	lsls	r2, r2, #31
 800cec8:	d501      	bpl.n	800cece <_printf_float+0x1b6>
 800ceca:	3302      	adds	r3, #2
 800cecc:	e7f4      	b.n	800ceb8 <_printf_float+0x1a0>
 800cece:	2301      	movs	r3, #1
 800ced0:	e7f2      	b.n	800ceb8 <_printf_float+0x1a0>
 800ced2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ced6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced8:	4299      	cmp	r1, r3
 800ceda:	db05      	blt.n	800cee8 <_printf_float+0x1d0>
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	6121      	str	r1, [r4, #16]
 800cee0:	07d8      	lsls	r0, r3, #31
 800cee2:	d5ea      	bpl.n	800ceba <_printf_float+0x1a2>
 800cee4:	1c4b      	adds	r3, r1, #1
 800cee6:	e7e7      	b.n	800ceb8 <_printf_float+0x1a0>
 800cee8:	2900      	cmp	r1, #0
 800ceea:	bfd4      	ite	le
 800ceec:	f1c1 0202 	rsble	r2, r1, #2
 800cef0:	2201      	movgt	r2, #1
 800cef2:	4413      	add	r3, r2
 800cef4:	e7e0      	b.n	800ceb8 <_printf_float+0x1a0>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	055a      	lsls	r2, r3, #21
 800cefa:	d407      	bmi.n	800cf0c <_printf_float+0x1f4>
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	4642      	mov	r2, r8
 800cf00:	4631      	mov	r1, r6
 800cf02:	4628      	mov	r0, r5
 800cf04:	47b8      	blx	r7
 800cf06:	3001      	adds	r0, #1
 800cf08:	d12c      	bne.n	800cf64 <_printf_float+0x24c>
 800cf0a:	e764      	b.n	800cdd6 <_printf_float+0xbe>
 800cf0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf10:	f240 80e0 	bls.w	800d0d4 <_printf_float+0x3bc>
 800cf14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf18:	2200      	movs	r2, #0
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f7f3 fdfe 	bl	8000b1c <__aeabi_dcmpeq>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d034      	beq.n	800cf8e <_printf_float+0x276>
 800cf24:	4a37      	ldr	r2, [pc, #220]	; (800d004 <_printf_float+0x2ec>)
 800cf26:	2301      	movs	r3, #1
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f43f af51 	beq.w	800cdd6 <_printf_float+0xbe>
 800cf34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	db02      	blt.n	800cf42 <_printf_float+0x22a>
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	07d8      	lsls	r0, r3, #31
 800cf40:	d510      	bpl.n	800cf64 <_printf_float+0x24c>
 800cf42:	ee18 3a10 	vmov	r3, s16
 800cf46:	4652      	mov	r2, sl
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	47b8      	blx	r7
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f43f af41 	beq.w	800cdd6 <_printf_float+0xbe>
 800cf54:	f04f 0800 	mov.w	r8, #0
 800cf58:	f104 091a 	add.w	r9, r4, #26
 800cf5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	4543      	cmp	r3, r8
 800cf62:	dc09      	bgt.n	800cf78 <_printf_float+0x260>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	079b      	lsls	r3, r3, #30
 800cf68:	f100 8107 	bmi.w	800d17a <_printf_float+0x462>
 800cf6c:	68e0      	ldr	r0, [r4, #12]
 800cf6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf70:	4298      	cmp	r0, r3
 800cf72:	bfb8      	it	lt
 800cf74:	4618      	movlt	r0, r3
 800cf76:	e730      	b.n	800cdda <_printf_float+0xc2>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	464a      	mov	r2, r9
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	47b8      	blx	r7
 800cf82:	3001      	adds	r0, #1
 800cf84:	f43f af27 	beq.w	800cdd6 <_printf_float+0xbe>
 800cf88:	f108 0801 	add.w	r8, r8, #1
 800cf8c:	e7e6      	b.n	800cf5c <_printf_float+0x244>
 800cf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	dc39      	bgt.n	800d008 <_printf_float+0x2f0>
 800cf94:	4a1b      	ldr	r2, [pc, #108]	; (800d004 <_printf_float+0x2ec>)
 800cf96:	2301      	movs	r3, #1
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	47b8      	blx	r7
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	f43f af19 	beq.w	800cdd6 <_printf_float+0xbe>
 800cfa4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	d102      	bne.n	800cfb2 <_printf_float+0x29a>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	07d9      	lsls	r1, r3, #31
 800cfb0:	d5d8      	bpl.n	800cf64 <_printf_float+0x24c>
 800cfb2:	ee18 3a10 	vmov	r3, s16
 800cfb6:	4652      	mov	r2, sl
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b8      	blx	r7
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	f43f af09 	beq.w	800cdd6 <_printf_float+0xbe>
 800cfc4:	f04f 0900 	mov.w	r9, #0
 800cfc8:	f104 0a1a 	add.w	sl, r4, #26
 800cfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfce:	425b      	negs	r3, r3
 800cfd0:	454b      	cmp	r3, r9
 800cfd2:	dc01      	bgt.n	800cfd8 <_printf_float+0x2c0>
 800cfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd6:	e792      	b.n	800cefe <_printf_float+0x1e6>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	4652      	mov	r2, sl
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	f43f aef7 	beq.w	800cdd6 <_printf_float+0xbe>
 800cfe8:	f109 0901 	add.w	r9, r9, #1
 800cfec:	e7ee      	b.n	800cfcc <_printf_float+0x2b4>
 800cfee:	bf00      	nop
 800cff0:	7fefffff 	.word	0x7fefffff
 800cff4:	08015548 	.word	0x08015548
 800cff8:	0801554c 	.word	0x0801554c
 800cffc:	08015550 	.word	0x08015550
 800d000:	08015554 	.word	0x08015554
 800d004:	080157c5 	.word	0x080157c5
 800d008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d00c:	429a      	cmp	r2, r3
 800d00e:	bfa8      	it	ge
 800d010:	461a      	movge	r2, r3
 800d012:	2a00      	cmp	r2, #0
 800d014:	4691      	mov	r9, r2
 800d016:	dc37      	bgt.n	800d088 <_printf_float+0x370>
 800d018:	f04f 0b00 	mov.w	fp, #0
 800d01c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d020:	f104 021a 	add.w	r2, r4, #26
 800d024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d026:	9305      	str	r3, [sp, #20]
 800d028:	eba3 0309 	sub.w	r3, r3, r9
 800d02c:	455b      	cmp	r3, fp
 800d02e:	dc33      	bgt.n	800d098 <_printf_float+0x380>
 800d030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d034:	429a      	cmp	r2, r3
 800d036:	db3b      	blt.n	800d0b0 <_printf_float+0x398>
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	07da      	lsls	r2, r3, #31
 800d03c:	d438      	bmi.n	800d0b0 <_printf_float+0x398>
 800d03e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d042:	eba2 0903 	sub.w	r9, r2, r3
 800d046:	9b05      	ldr	r3, [sp, #20]
 800d048:	1ad2      	subs	r2, r2, r3
 800d04a:	4591      	cmp	r9, r2
 800d04c:	bfa8      	it	ge
 800d04e:	4691      	movge	r9, r2
 800d050:	f1b9 0f00 	cmp.w	r9, #0
 800d054:	dc35      	bgt.n	800d0c2 <_printf_float+0x3aa>
 800d056:	f04f 0800 	mov.w	r8, #0
 800d05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d05e:	f104 0a1a 	add.w	sl, r4, #26
 800d062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	eba3 0309 	sub.w	r3, r3, r9
 800d06c:	4543      	cmp	r3, r8
 800d06e:	f77f af79 	ble.w	800cf64 <_printf_float+0x24c>
 800d072:	2301      	movs	r3, #1
 800d074:	4652      	mov	r2, sl
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	47b8      	blx	r7
 800d07c:	3001      	adds	r0, #1
 800d07e:	f43f aeaa 	beq.w	800cdd6 <_printf_float+0xbe>
 800d082:	f108 0801 	add.w	r8, r8, #1
 800d086:	e7ec      	b.n	800d062 <_printf_float+0x34a>
 800d088:	4613      	mov	r3, r2
 800d08a:	4631      	mov	r1, r6
 800d08c:	4642      	mov	r2, r8
 800d08e:	4628      	mov	r0, r5
 800d090:	47b8      	blx	r7
 800d092:	3001      	adds	r0, #1
 800d094:	d1c0      	bne.n	800d018 <_printf_float+0x300>
 800d096:	e69e      	b.n	800cdd6 <_printf_float+0xbe>
 800d098:	2301      	movs	r3, #1
 800d09a:	4631      	mov	r1, r6
 800d09c:	4628      	mov	r0, r5
 800d09e:	9205      	str	r2, [sp, #20]
 800d0a0:	47b8      	blx	r7
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	f43f ae97 	beq.w	800cdd6 <_printf_float+0xbe>
 800d0a8:	9a05      	ldr	r2, [sp, #20]
 800d0aa:	f10b 0b01 	add.w	fp, fp, #1
 800d0ae:	e7b9      	b.n	800d024 <_printf_float+0x30c>
 800d0b0:	ee18 3a10 	vmov	r3, s16
 800d0b4:	4652      	mov	r2, sl
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b8      	blx	r7
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d1be      	bne.n	800d03e <_printf_float+0x326>
 800d0c0:	e689      	b.n	800cdd6 <_printf_float+0xbe>
 800d0c2:	9a05      	ldr	r2, [sp, #20]
 800d0c4:	464b      	mov	r3, r9
 800d0c6:	4442      	add	r2, r8
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	47b8      	blx	r7
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	d1c1      	bne.n	800d056 <_printf_float+0x33e>
 800d0d2:	e680      	b.n	800cdd6 <_printf_float+0xbe>
 800d0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0d6:	2a01      	cmp	r2, #1
 800d0d8:	dc01      	bgt.n	800d0de <_printf_float+0x3c6>
 800d0da:	07db      	lsls	r3, r3, #31
 800d0dc:	d53a      	bpl.n	800d154 <_printf_float+0x43c>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4642      	mov	r2, r8
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	47b8      	blx	r7
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f43f ae74 	beq.w	800cdd6 <_printf_float+0xbe>
 800d0ee:	ee18 3a10 	vmov	r3, s16
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	47b8      	blx	r7
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	f43f ae6b 	beq.w	800cdd6 <_printf_float+0xbe>
 800d100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d104:	2200      	movs	r2, #0
 800d106:	2300      	movs	r3, #0
 800d108:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d10c:	f7f3 fd06 	bl	8000b1c <__aeabi_dcmpeq>
 800d110:	b9d8      	cbnz	r0, 800d14a <_printf_float+0x432>
 800d112:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d116:	f108 0201 	add.w	r2, r8, #1
 800d11a:	4631      	mov	r1, r6
 800d11c:	4628      	mov	r0, r5
 800d11e:	47b8      	blx	r7
 800d120:	3001      	adds	r0, #1
 800d122:	d10e      	bne.n	800d142 <_printf_float+0x42a>
 800d124:	e657      	b.n	800cdd6 <_printf_float+0xbe>
 800d126:	2301      	movs	r3, #1
 800d128:	4652      	mov	r2, sl
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f ae50 	beq.w	800cdd6 <_printf_float+0xbe>
 800d136:	f108 0801 	add.w	r8, r8, #1
 800d13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d13c:	3b01      	subs	r3, #1
 800d13e:	4543      	cmp	r3, r8
 800d140:	dcf1      	bgt.n	800d126 <_printf_float+0x40e>
 800d142:	464b      	mov	r3, r9
 800d144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d148:	e6da      	b.n	800cf00 <_printf_float+0x1e8>
 800d14a:	f04f 0800 	mov.w	r8, #0
 800d14e:	f104 0a1a 	add.w	sl, r4, #26
 800d152:	e7f2      	b.n	800d13a <_printf_float+0x422>
 800d154:	2301      	movs	r3, #1
 800d156:	4642      	mov	r2, r8
 800d158:	e7df      	b.n	800d11a <_printf_float+0x402>
 800d15a:	2301      	movs	r3, #1
 800d15c:	464a      	mov	r2, r9
 800d15e:	4631      	mov	r1, r6
 800d160:	4628      	mov	r0, r5
 800d162:	47b8      	blx	r7
 800d164:	3001      	adds	r0, #1
 800d166:	f43f ae36 	beq.w	800cdd6 <_printf_float+0xbe>
 800d16a:	f108 0801 	add.w	r8, r8, #1
 800d16e:	68e3      	ldr	r3, [r4, #12]
 800d170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d172:	1a5b      	subs	r3, r3, r1
 800d174:	4543      	cmp	r3, r8
 800d176:	dcf0      	bgt.n	800d15a <_printf_float+0x442>
 800d178:	e6f8      	b.n	800cf6c <_printf_float+0x254>
 800d17a:	f04f 0800 	mov.w	r8, #0
 800d17e:	f104 0919 	add.w	r9, r4, #25
 800d182:	e7f4      	b.n	800d16e <_printf_float+0x456>

0800d184 <_printf_common>:
 800d184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d188:	4616      	mov	r6, r2
 800d18a:	4699      	mov	r9, r3
 800d18c:	688a      	ldr	r2, [r1, #8]
 800d18e:	690b      	ldr	r3, [r1, #16]
 800d190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d194:	4293      	cmp	r3, r2
 800d196:	bfb8      	it	lt
 800d198:	4613      	movlt	r3, r2
 800d19a:	6033      	str	r3, [r6, #0]
 800d19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	b10a      	cbz	r2, 800d1aa <_printf_common+0x26>
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	6033      	str	r3, [r6, #0]
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	0699      	lsls	r1, r3, #26
 800d1ae:	bf42      	ittt	mi
 800d1b0:	6833      	ldrmi	r3, [r6, #0]
 800d1b2:	3302      	addmi	r3, #2
 800d1b4:	6033      	strmi	r3, [r6, #0]
 800d1b6:	6825      	ldr	r5, [r4, #0]
 800d1b8:	f015 0506 	ands.w	r5, r5, #6
 800d1bc:	d106      	bne.n	800d1cc <_printf_common+0x48>
 800d1be:	f104 0a19 	add.w	sl, r4, #25
 800d1c2:	68e3      	ldr	r3, [r4, #12]
 800d1c4:	6832      	ldr	r2, [r6, #0]
 800d1c6:	1a9b      	subs	r3, r3, r2
 800d1c8:	42ab      	cmp	r3, r5
 800d1ca:	dc26      	bgt.n	800d21a <_printf_common+0x96>
 800d1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1d0:	1e13      	subs	r3, r2, #0
 800d1d2:	6822      	ldr	r2, [r4, #0]
 800d1d4:	bf18      	it	ne
 800d1d6:	2301      	movne	r3, #1
 800d1d8:	0692      	lsls	r2, r2, #26
 800d1da:	d42b      	bmi.n	800d234 <_printf_common+0xb0>
 800d1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	47c0      	blx	r8
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	d01e      	beq.n	800d228 <_printf_common+0xa4>
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	6922      	ldr	r2, [r4, #16]
 800d1ee:	f003 0306 	and.w	r3, r3, #6
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	bf02      	ittt	eq
 800d1f6:	68e5      	ldreq	r5, [r4, #12]
 800d1f8:	6833      	ldreq	r3, [r6, #0]
 800d1fa:	1aed      	subeq	r5, r5, r3
 800d1fc:	68a3      	ldr	r3, [r4, #8]
 800d1fe:	bf0c      	ite	eq
 800d200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d204:	2500      	movne	r5, #0
 800d206:	4293      	cmp	r3, r2
 800d208:	bfc4      	itt	gt
 800d20a:	1a9b      	subgt	r3, r3, r2
 800d20c:	18ed      	addgt	r5, r5, r3
 800d20e:	2600      	movs	r6, #0
 800d210:	341a      	adds	r4, #26
 800d212:	42b5      	cmp	r5, r6
 800d214:	d11a      	bne.n	800d24c <_printf_common+0xc8>
 800d216:	2000      	movs	r0, #0
 800d218:	e008      	b.n	800d22c <_printf_common+0xa8>
 800d21a:	2301      	movs	r3, #1
 800d21c:	4652      	mov	r2, sl
 800d21e:	4649      	mov	r1, r9
 800d220:	4638      	mov	r0, r7
 800d222:	47c0      	blx	r8
 800d224:	3001      	adds	r0, #1
 800d226:	d103      	bne.n	800d230 <_printf_common+0xac>
 800d228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d230:	3501      	adds	r5, #1
 800d232:	e7c6      	b.n	800d1c2 <_printf_common+0x3e>
 800d234:	18e1      	adds	r1, r4, r3
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	2030      	movs	r0, #48	; 0x30
 800d23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d23e:	4422      	add	r2, r4
 800d240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d248:	3302      	adds	r3, #2
 800d24a:	e7c7      	b.n	800d1dc <_printf_common+0x58>
 800d24c:	2301      	movs	r3, #1
 800d24e:	4622      	mov	r2, r4
 800d250:	4649      	mov	r1, r9
 800d252:	4638      	mov	r0, r7
 800d254:	47c0      	blx	r8
 800d256:	3001      	adds	r0, #1
 800d258:	d0e6      	beq.n	800d228 <_printf_common+0xa4>
 800d25a:	3601      	adds	r6, #1
 800d25c:	e7d9      	b.n	800d212 <_printf_common+0x8e>
	...

0800d260 <_printf_i>:
 800d260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d264:	7e0f      	ldrb	r7, [r1, #24]
 800d266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d268:	2f78      	cmp	r7, #120	; 0x78
 800d26a:	4691      	mov	r9, r2
 800d26c:	4680      	mov	r8, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	469a      	mov	sl, r3
 800d272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d276:	d807      	bhi.n	800d288 <_printf_i+0x28>
 800d278:	2f62      	cmp	r7, #98	; 0x62
 800d27a:	d80a      	bhi.n	800d292 <_printf_i+0x32>
 800d27c:	2f00      	cmp	r7, #0
 800d27e:	f000 80d4 	beq.w	800d42a <_printf_i+0x1ca>
 800d282:	2f58      	cmp	r7, #88	; 0x58
 800d284:	f000 80c0 	beq.w	800d408 <_printf_i+0x1a8>
 800d288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d290:	e03a      	b.n	800d308 <_printf_i+0xa8>
 800d292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d296:	2b15      	cmp	r3, #21
 800d298:	d8f6      	bhi.n	800d288 <_printf_i+0x28>
 800d29a:	a101      	add	r1, pc, #4	; (adr r1, 800d2a0 <_printf_i+0x40>)
 800d29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2a0:	0800d2f9 	.word	0x0800d2f9
 800d2a4:	0800d30d 	.word	0x0800d30d
 800d2a8:	0800d289 	.word	0x0800d289
 800d2ac:	0800d289 	.word	0x0800d289
 800d2b0:	0800d289 	.word	0x0800d289
 800d2b4:	0800d289 	.word	0x0800d289
 800d2b8:	0800d30d 	.word	0x0800d30d
 800d2bc:	0800d289 	.word	0x0800d289
 800d2c0:	0800d289 	.word	0x0800d289
 800d2c4:	0800d289 	.word	0x0800d289
 800d2c8:	0800d289 	.word	0x0800d289
 800d2cc:	0800d411 	.word	0x0800d411
 800d2d0:	0800d339 	.word	0x0800d339
 800d2d4:	0800d3cb 	.word	0x0800d3cb
 800d2d8:	0800d289 	.word	0x0800d289
 800d2dc:	0800d289 	.word	0x0800d289
 800d2e0:	0800d433 	.word	0x0800d433
 800d2e4:	0800d289 	.word	0x0800d289
 800d2e8:	0800d339 	.word	0x0800d339
 800d2ec:	0800d289 	.word	0x0800d289
 800d2f0:	0800d289 	.word	0x0800d289
 800d2f4:	0800d3d3 	.word	0x0800d3d3
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	1d1a      	adds	r2, r3, #4
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	602a      	str	r2, [r5, #0]
 800d300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d308:	2301      	movs	r3, #1
 800d30a:	e09f      	b.n	800d44c <_printf_i+0x1ec>
 800d30c:	6820      	ldr	r0, [r4, #0]
 800d30e:	682b      	ldr	r3, [r5, #0]
 800d310:	0607      	lsls	r7, r0, #24
 800d312:	f103 0104 	add.w	r1, r3, #4
 800d316:	6029      	str	r1, [r5, #0]
 800d318:	d501      	bpl.n	800d31e <_printf_i+0xbe>
 800d31a:	681e      	ldr	r6, [r3, #0]
 800d31c:	e003      	b.n	800d326 <_printf_i+0xc6>
 800d31e:	0646      	lsls	r6, r0, #25
 800d320:	d5fb      	bpl.n	800d31a <_printf_i+0xba>
 800d322:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d326:	2e00      	cmp	r6, #0
 800d328:	da03      	bge.n	800d332 <_printf_i+0xd2>
 800d32a:	232d      	movs	r3, #45	; 0x2d
 800d32c:	4276      	negs	r6, r6
 800d32e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d332:	485a      	ldr	r0, [pc, #360]	; (800d49c <_printf_i+0x23c>)
 800d334:	230a      	movs	r3, #10
 800d336:	e012      	b.n	800d35e <_printf_i+0xfe>
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	6820      	ldr	r0, [r4, #0]
 800d33c:	1d19      	adds	r1, r3, #4
 800d33e:	6029      	str	r1, [r5, #0]
 800d340:	0605      	lsls	r5, r0, #24
 800d342:	d501      	bpl.n	800d348 <_printf_i+0xe8>
 800d344:	681e      	ldr	r6, [r3, #0]
 800d346:	e002      	b.n	800d34e <_printf_i+0xee>
 800d348:	0641      	lsls	r1, r0, #25
 800d34a:	d5fb      	bpl.n	800d344 <_printf_i+0xe4>
 800d34c:	881e      	ldrh	r6, [r3, #0]
 800d34e:	4853      	ldr	r0, [pc, #332]	; (800d49c <_printf_i+0x23c>)
 800d350:	2f6f      	cmp	r7, #111	; 0x6f
 800d352:	bf0c      	ite	eq
 800d354:	2308      	moveq	r3, #8
 800d356:	230a      	movne	r3, #10
 800d358:	2100      	movs	r1, #0
 800d35a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d35e:	6865      	ldr	r5, [r4, #4]
 800d360:	60a5      	str	r5, [r4, #8]
 800d362:	2d00      	cmp	r5, #0
 800d364:	bfa2      	ittt	ge
 800d366:	6821      	ldrge	r1, [r4, #0]
 800d368:	f021 0104 	bicge.w	r1, r1, #4
 800d36c:	6021      	strge	r1, [r4, #0]
 800d36e:	b90e      	cbnz	r6, 800d374 <_printf_i+0x114>
 800d370:	2d00      	cmp	r5, #0
 800d372:	d04b      	beq.n	800d40c <_printf_i+0x1ac>
 800d374:	4615      	mov	r5, r2
 800d376:	fbb6 f1f3 	udiv	r1, r6, r3
 800d37a:	fb03 6711 	mls	r7, r3, r1, r6
 800d37e:	5dc7      	ldrb	r7, [r0, r7]
 800d380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d384:	4637      	mov	r7, r6
 800d386:	42bb      	cmp	r3, r7
 800d388:	460e      	mov	r6, r1
 800d38a:	d9f4      	bls.n	800d376 <_printf_i+0x116>
 800d38c:	2b08      	cmp	r3, #8
 800d38e:	d10b      	bne.n	800d3a8 <_printf_i+0x148>
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	07de      	lsls	r6, r3, #31
 800d394:	d508      	bpl.n	800d3a8 <_printf_i+0x148>
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	6861      	ldr	r1, [r4, #4]
 800d39a:	4299      	cmp	r1, r3
 800d39c:	bfde      	ittt	le
 800d39e:	2330      	movle	r3, #48	; 0x30
 800d3a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3a8:	1b52      	subs	r2, r2, r5
 800d3aa:	6122      	str	r2, [r4, #16]
 800d3ac:	f8cd a000 	str.w	sl, [sp]
 800d3b0:	464b      	mov	r3, r9
 800d3b2:	aa03      	add	r2, sp, #12
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4640      	mov	r0, r8
 800d3b8:	f7ff fee4 	bl	800d184 <_printf_common>
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d14a      	bne.n	800d456 <_printf_i+0x1f6>
 800d3c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3c4:	b004      	add	sp, #16
 800d3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ca:	6823      	ldr	r3, [r4, #0]
 800d3cc:	f043 0320 	orr.w	r3, r3, #32
 800d3d0:	6023      	str	r3, [r4, #0]
 800d3d2:	4833      	ldr	r0, [pc, #204]	; (800d4a0 <_printf_i+0x240>)
 800d3d4:	2778      	movs	r7, #120	; 0x78
 800d3d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	6829      	ldr	r1, [r5, #0]
 800d3de:	061f      	lsls	r7, r3, #24
 800d3e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3e4:	d402      	bmi.n	800d3ec <_printf_i+0x18c>
 800d3e6:	065f      	lsls	r7, r3, #25
 800d3e8:	bf48      	it	mi
 800d3ea:	b2b6      	uxthmi	r6, r6
 800d3ec:	07df      	lsls	r7, r3, #31
 800d3ee:	bf48      	it	mi
 800d3f0:	f043 0320 	orrmi.w	r3, r3, #32
 800d3f4:	6029      	str	r1, [r5, #0]
 800d3f6:	bf48      	it	mi
 800d3f8:	6023      	strmi	r3, [r4, #0]
 800d3fa:	b91e      	cbnz	r6, 800d404 <_printf_i+0x1a4>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	f023 0320 	bic.w	r3, r3, #32
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	2310      	movs	r3, #16
 800d406:	e7a7      	b.n	800d358 <_printf_i+0xf8>
 800d408:	4824      	ldr	r0, [pc, #144]	; (800d49c <_printf_i+0x23c>)
 800d40a:	e7e4      	b.n	800d3d6 <_printf_i+0x176>
 800d40c:	4615      	mov	r5, r2
 800d40e:	e7bd      	b.n	800d38c <_printf_i+0x12c>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	6826      	ldr	r6, [r4, #0]
 800d414:	6961      	ldr	r1, [r4, #20]
 800d416:	1d18      	adds	r0, r3, #4
 800d418:	6028      	str	r0, [r5, #0]
 800d41a:	0635      	lsls	r5, r6, #24
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	d501      	bpl.n	800d424 <_printf_i+0x1c4>
 800d420:	6019      	str	r1, [r3, #0]
 800d422:	e002      	b.n	800d42a <_printf_i+0x1ca>
 800d424:	0670      	lsls	r0, r6, #25
 800d426:	d5fb      	bpl.n	800d420 <_printf_i+0x1c0>
 800d428:	8019      	strh	r1, [r3, #0]
 800d42a:	2300      	movs	r3, #0
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	4615      	mov	r5, r2
 800d430:	e7bc      	b.n	800d3ac <_printf_i+0x14c>
 800d432:	682b      	ldr	r3, [r5, #0]
 800d434:	1d1a      	adds	r2, r3, #4
 800d436:	602a      	str	r2, [r5, #0]
 800d438:	681d      	ldr	r5, [r3, #0]
 800d43a:	6862      	ldr	r2, [r4, #4]
 800d43c:	2100      	movs	r1, #0
 800d43e:	4628      	mov	r0, r5
 800d440:	f7f2 fee6 	bl	8000210 <memchr>
 800d444:	b108      	cbz	r0, 800d44a <_printf_i+0x1ea>
 800d446:	1b40      	subs	r0, r0, r5
 800d448:	6060      	str	r0, [r4, #4]
 800d44a:	6863      	ldr	r3, [r4, #4]
 800d44c:	6123      	str	r3, [r4, #16]
 800d44e:	2300      	movs	r3, #0
 800d450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d454:	e7aa      	b.n	800d3ac <_printf_i+0x14c>
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	462a      	mov	r2, r5
 800d45a:	4649      	mov	r1, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	47d0      	blx	sl
 800d460:	3001      	adds	r0, #1
 800d462:	d0ad      	beq.n	800d3c0 <_printf_i+0x160>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	079b      	lsls	r3, r3, #30
 800d468:	d413      	bmi.n	800d492 <_printf_i+0x232>
 800d46a:	68e0      	ldr	r0, [r4, #12]
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	4298      	cmp	r0, r3
 800d470:	bfb8      	it	lt
 800d472:	4618      	movlt	r0, r3
 800d474:	e7a6      	b.n	800d3c4 <_printf_i+0x164>
 800d476:	2301      	movs	r3, #1
 800d478:	4632      	mov	r2, r6
 800d47a:	4649      	mov	r1, r9
 800d47c:	4640      	mov	r0, r8
 800d47e:	47d0      	blx	sl
 800d480:	3001      	adds	r0, #1
 800d482:	d09d      	beq.n	800d3c0 <_printf_i+0x160>
 800d484:	3501      	adds	r5, #1
 800d486:	68e3      	ldr	r3, [r4, #12]
 800d488:	9903      	ldr	r1, [sp, #12]
 800d48a:	1a5b      	subs	r3, r3, r1
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dcf2      	bgt.n	800d476 <_printf_i+0x216>
 800d490:	e7eb      	b.n	800d46a <_printf_i+0x20a>
 800d492:	2500      	movs	r5, #0
 800d494:	f104 0619 	add.w	r6, r4, #25
 800d498:	e7f5      	b.n	800d486 <_printf_i+0x226>
 800d49a:	bf00      	nop
 800d49c:	08015558 	.word	0x08015558
 800d4a0:	08015569 	.word	0x08015569

0800d4a4 <sniprintf>:
 800d4a4:	b40c      	push	{r2, r3}
 800d4a6:	b530      	push	{r4, r5, lr}
 800d4a8:	4b17      	ldr	r3, [pc, #92]	; (800d508 <sniprintf+0x64>)
 800d4aa:	1e0c      	subs	r4, r1, #0
 800d4ac:	681d      	ldr	r5, [r3, #0]
 800d4ae:	b09d      	sub	sp, #116	; 0x74
 800d4b0:	da08      	bge.n	800d4c4 <sniprintf+0x20>
 800d4b2:	238b      	movs	r3, #139	; 0x8b
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4ba:	b01d      	add	sp, #116	; 0x74
 800d4bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4c0:	b002      	add	sp, #8
 800d4c2:	4770      	bx	lr
 800d4c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4cc:	bf14      	ite	ne
 800d4ce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d4d2:	4623      	moveq	r3, r4
 800d4d4:	9304      	str	r3, [sp, #16]
 800d4d6:	9307      	str	r3, [sp, #28]
 800d4d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4dc:	9002      	str	r0, [sp, #8]
 800d4de:	9006      	str	r0, [sp, #24]
 800d4e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4e6:	ab21      	add	r3, sp, #132	; 0x84
 800d4e8:	a902      	add	r1, sp, #8
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	f001 fa77 	bl	800e9e0 <_svfiprintf_r>
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	bfbc      	itt	lt
 800d4f6:	238b      	movlt	r3, #139	; 0x8b
 800d4f8:	602b      	strlt	r3, [r5, #0]
 800d4fa:	2c00      	cmp	r4, #0
 800d4fc:	d0dd      	beq.n	800d4ba <sniprintf+0x16>
 800d4fe:	9b02      	ldr	r3, [sp, #8]
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
 800d504:	e7d9      	b.n	800d4ba <sniprintf+0x16>
 800d506:	bf00      	nop
 800d508:	200000a4 	.word	0x200000a4

0800d50c <siprintf>:
 800d50c:	b40e      	push	{r1, r2, r3}
 800d50e:	b500      	push	{lr}
 800d510:	b09c      	sub	sp, #112	; 0x70
 800d512:	ab1d      	add	r3, sp, #116	; 0x74
 800d514:	9002      	str	r0, [sp, #8]
 800d516:	9006      	str	r0, [sp, #24]
 800d518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d51c:	4809      	ldr	r0, [pc, #36]	; (800d544 <siprintf+0x38>)
 800d51e:	9107      	str	r1, [sp, #28]
 800d520:	9104      	str	r1, [sp, #16]
 800d522:	4909      	ldr	r1, [pc, #36]	; (800d548 <siprintf+0x3c>)
 800d524:	f853 2b04 	ldr.w	r2, [r3], #4
 800d528:	9105      	str	r1, [sp, #20]
 800d52a:	6800      	ldr	r0, [r0, #0]
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	a902      	add	r1, sp, #8
 800d530:	f001 fa56 	bl	800e9e0 <_svfiprintf_r>
 800d534:	9b02      	ldr	r3, [sp, #8]
 800d536:	2200      	movs	r2, #0
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	b01c      	add	sp, #112	; 0x70
 800d53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d540:	b003      	add	sp, #12
 800d542:	4770      	bx	lr
 800d544:	200000a4 	.word	0x200000a4
 800d548:	ffff0208 	.word	0xffff0208

0800d54c <siscanf>:
 800d54c:	b40e      	push	{r1, r2, r3}
 800d54e:	b510      	push	{r4, lr}
 800d550:	b09f      	sub	sp, #124	; 0x7c
 800d552:	ac21      	add	r4, sp, #132	; 0x84
 800d554:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d558:	f854 2b04 	ldr.w	r2, [r4], #4
 800d55c:	9201      	str	r2, [sp, #4]
 800d55e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d562:	9004      	str	r0, [sp, #16]
 800d564:	9008      	str	r0, [sp, #32]
 800d566:	f7f2 fea3 	bl	80002b0 <strlen>
 800d56a:	4b0c      	ldr	r3, [pc, #48]	; (800d59c <siscanf+0x50>)
 800d56c:	9005      	str	r0, [sp, #20]
 800d56e:	9009      	str	r0, [sp, #36]	; 0x24
 800d570:	930d      	str	r3, [sp, #52]	; 0x34
 800d572:	480b      	ldr	r0, [pc, #44]	; (800d5a0 <siscanf+0x54>)
 800d574:	9a01      	ldr	r2, [sp, #4]
 800d576:	6800      	ldr	r0, [r0, #0]
 800d578:	9403      	str	r4, [sp, #12]
 800d57a:	2300      	movs	r3, #0
 800d57c:	9311      	str	r3, [sp, #68]	; 0x44
 800d57e:	9316      	str	r3, [sp, #88]	; 0x58
 800d580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d584:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d588:	a904      	add	r1, sp, #16
 800d58a:	4623      	mov	r3, r4
 800d58c:	f001 fb80 	bl	800ec90 <__ssvfiscanf_r>
 800d590:	b01f      	add	sp, #124	; 0x7c
 800d592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d596:	b003      	add	sp, #12
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	0800d5c7 	.word	0x0800d5c7
 800d5a0:	200000a4 	.word	0x200000a4

0800d5a4 <__sread>:
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ac:	f000 fa78 	bl	800daa0 <_read_r>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	bfab      	itete	ge
 800d5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5b8:	181b      	addge	r3, r3, r0
 800d5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5be:	bfac      	ite	ge
 800d5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5c2:	81a3      	strhlt	r3, [r4, #12]
 800d5c4:	bd10      	pop	{r4, pc}

0800d5c6 <__seofread>:
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	4770      	bx	lr

0800d5ca <__swrite>:
 800d5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ce:	461f      	mov	r7, r3
 800d5d0:	898b      	ldrh	r3, [r1, #12]
 800d5d2:	05db      	lsls	r3, r3, #23
 800d5d4:	4605      	mov	r5, r0
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	4616      	mov	r6, r2
 800d5da:	d505      	bpl.n	800d5e8 <__swrite+0x1e>
 800d5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f000 fa4a 	bl	800da7c <_lseek_r>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	463b      	mov	r3, r7
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fe:	f000 ba61 	b.w	800dac4 <_write_r>

0800d602 <__sseek>:
 800d602:	b510      	push	{r4, lr}
 800d604:	460c      	mov	r4, r1
 800d606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60a:	f000 fa37 	bl	800da7c <_lseek_r>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	bf15      	itete	ne
 800d614:	6560      	strne	r0, [r4, #84]	; 0x54
 800d616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d61e:	81a3      	strheq	r3, [r4, #12]
 800d620:	bf18      	it	ne
 800d622:	81a3      	strhne	r3, [r4, #12]
 800d624:	bd10      	pop	{r4, pc}

0800d626 <__sclose>:
 800d626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62a:	f000 ba17 	b.w	800da5c <_close_r>
	...

0800d630 <std>:
 800d630:	2300      	movs	r3, #0
 800d632:	b510      	push	{r4, lr}
 800d634:	4604      	mov	r4, r0
 800d636:	e9c0 3300 	strd	r3, r3, [r0]
 800d63a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d63e:	6083      	str	r3, [r0, #8]
 800d640:	8181      	strh	r1, [r0, #12]
 800d642:	6643      	str	r3, [r0, #100]	; 0x64
 800d644:	81c2      	strh	r2, [r0, #14]
 800d646:	6183      	str	r3, [r0, #24]
 800d648:	4619      	mov	r1, r3
 800d64a:	2208      	movs	r2, #8
 800d64c:	305c      	adds	r0, #92	; 0x5c
 800d64e:	f000 f9f9 	bl	800da44 <memset>
 800d652:	4b0d      	ldr	r3, [pc, #52]	; (800d688 <std+0x58>)
 800d654:	6263      	str	r3, [r4, #36]	; 0x24
 800d656:	4b0d      	ldr	r3, [pc, #52]	; (800d68c <std+0x5c>)
 800d658:	62a3      	str	r3, [r4, #40]	; 0x28
 800d65a:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <std+0x60>)
 800d65c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d65e:	4b0d      	ldr	r3, [pc, #52]	; (800d694 <std+0x64>)
 800d660:	6323      	str	r3, [r4, #48]	; 0x30
 800d662:	4b0d      	ldr	r3, [pc, #52]	; (800d698 <std+0x68>)
 800d664:	6224      	str	r4, [r4, #32]
 800d666:	429c      	cmp	r4, r3
 800d668:	d006      	beq.n	800d678 <std+0x48>
 800d66a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d66e:	4294      	cmp	r4, r2
 800d670:	d002      	beq.n	800d678 <std+0x48>
 800d672:	33d0      	adds	r3, #208	; 0xd0
 800d674:	429c      	cmp	r4, r3
 800d676:	d105      	bne.n	800d684 <std+0x54>
 800d678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d680:	f000 ba5c 	b.w	800db3c <__retarget_lock_init_recursive>
 800d684:	bd10      	pop	{r4, pc}
 800d686:	bf00      	nop
 800d688:	0800d5a5 	.word	0x0800d5a5
 800d68c:	0800d5cb 	.word	0x0800d5cb
 800d690:	0800d603 	.word	0x0800d603
 800d694:	0800d627 	.word	0x0800d627
 800d698:	20009980 	.word	0x20009980

0800d69c <stdio_exit_handler>:
 800d69c:	4a02      	ldr	r2, [pc, #8]	; (800d6a8 <stdio_exit_handler+0xc>)
 800d69e:	4903      	ldr	r1, [pc, #12]	; (800d6ac <stdio_exit_handler+0x10>)
 800d6a0:	4803      	ldr	r0, [pc, #12]	; (800d6b0 <stdio_exit_handler+0x14>)
 800d6a2:	f000 b8f7 	b.w	800d894 <_fwalk_sglue>
 800d6a6:	bf00      	nop
 800d6a8:	2000004c 	.word	0x2000004c
 800d6ac:	0800f775 	.word	0x0800f775
 800d6b0:	20000058 	.word	0x20000058

0800d6b4 <cleanup_stdio>:
 800d6b4:	6841      	ldr	r1, [r0, #4]
 800d6b6:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <cleanup_stdio+0x34>)
 800d6b8:	4299      	cmp	r1, r3
 800d6ba:	b510      	push	{r4, lr}
 800d6bc:	4604      	mov	r4, r0
 800d6be:	d001      	beq.n	800d6c4 <cleanup_stdio+0x10>
 800d6c0:	f002 f858 	bl	800f774 <_fflush_r>
 800d6c4:	68a1      	ldr	r1, [r4, #8]
 800d6c6:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <cleanup_stdio+0x38>)
 800d6c8:	4299      	cmp	r1, r3
 800d6ca:	d002      	beq.n	800d6d2 <cleanup_stdio+0x1e>
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f002 f851 	bl	800f774 <_fflush_r>
 800d6d2:	68e1      	ldr	r1, [r4, #12]
 800d6d4:	4b06      	ldr	r3, [pc, #24]	; (800d6f0 <cleanup_stdio+0x3c>)
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	d004      	beq.n	800d6e4 <cleanup_stdio+0x30>
 800d6da:	4620      	mov	r0, r4
 800d6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e0:	f002 b848 	b.w	800f774 <_fflush_r>
 800d6e4:	bd10      	pop	{r4, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20009980 	.word	0x20009980
 800d6ec:	200099e8 	.word	0x200099e8
 800d6f0:	20009a50 	.word	0x20009a50

0800d6f4 <global_stdio_init.part.0>:
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <global_stdio_init.part.0+0x30>)
 800d6f8:	4c0b      	ldr	r4, [pc, #44]	; (800d728 <global_stdio_init.part.0+0x34>)
 800d6fa:	4a0c      	ldr	r2, [pc, #48]	; (800d72c <global_stdio_init.part.0+0x38>)
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	4620      	mov	r0, r4
 800d700:	2200      	movs	r2, #0
 800d702:	2104      	movs	r1, #4
 800d704:	f7ff ff94 	bl	800d630 <std>
 800d708:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d70c:	2201      	movs	r2, #1
 800d70e:	2109      	movs	r1, #9
 800d710:	f7ff ff8e 	bl	800d630 <std>
 800d714:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d718:	2202      	movs	r2, #2
 800d71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d71e:	2112      	movs	r1, #18
 800d720:	f7ff bf86 	b.w	800d630 <std>
 800d724:	20009ab8 	.word	0x20009ab8
 800d728:	20009980 	.word	0x20009980
 800d72c:	0800d69d 	.word	0x0800d69d

0800d730 <__sfp_lock_acquire>:
 800d730:	4801      	ldr	r0, [pc, #4]	; (800d738 <__sfp_lock_acquire+0x8>)
 800d732:	f000 ba04 	b.w	800db3e <__retarget_lock_acquire_recursive>
 800d736:	bf00      	nop
 800d738:	20009ac1 	.word	0x20009ac1

0800d73c <__sfp_lock_release>:
 800d73c:	4801      	ldr	r0, [pc, #4]	; (800d744 <__sfp_lock_release+0x8>)
 800d73e:	f000 b9ff 	b.w	800db40 <__retarget_lock_release_recursive>
 800d742:	bf00      	nop
 800d744:	20009ac1 	.word	0x20009ac1

0800d748 <__sinit>:
 800d748:	b510      	push	{r4, lr}
 800d74a:	4604      	mov	r4, r0
 800d74c:	f7ff fff0 	bl	800d730 <__sfp_lock_acquire>
 800d750:	6a23      	ldr	r3, [r4, #32]
 800d752:	b11b      	cbz	r3, 800d75c <__sinit+0x14>
 800d754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d758:	f7ff bff0 	b.w	800d73c <__sfp_lock_release>
 800d75c:	4b04      	ldr	r3, [pc, #16]	; (800d770 <__sinit+0x28>)
 800d75e:	6223      	str	r3, [r4, #32]
 800d760:	4b04      	ldr	r3, [pc, #16]	; (800d774 <__sinit+0x2c>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1f5      	bne.n	800d754 <__sinit+0xc>
 800d768:	f7ff ffc4 	bl	800d6f4 <global_stdio_init.part.0>
 800d76c:	e7f2      	b.n	800d754 <__sinit+0xc>
 800d76e:	bf00      	nop
 800d770:	0800d6b5 	.word	0x0800d6b5
 800d774:	20009ab8 	.word	0x20009ab8

0800d778 <_strtol_l.constprop.0>:
 800d778:	2b01      	cmp	r3, #1
 800d77a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d77e:	d001      	beq.n	800d784 <_strtol_l.constprop.0+0xc>
 800d780:	2b24      	cmp	r3, #36	; 0x24
 800d782:	d906      	bls.n	800d792 <_strtol_l.constprop.0+0x1a>
 800d784:	f000 f9b0 	bl	800dae8 <__errno>
 800d788:	2316      	movs	r3, #22
 800d78a:	6003      	str	r3, [r0, #0]
 800d78c:	2000      	movs	r0, #0
 800d78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d792:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d878 <_strtol_l.constprop.0+0x100>
 800d796:	460d      	mov	r5, r1
 800d798:	462e      	mov	r6, r5
 800d79a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d79e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d7a2:	f017 0708 	ands.w	r7, r7, #8
 800d7a6:	d1f7      	bne.n	800d798 <_strtol_l.constprop.0+0x20>
 800d7a8:	2c2d      	cmp	r4, #45	; 0x2d
 800d7aa:	d132      	bne.n	800d812 <_strtol_l.constprop.0+0x9a>
 800d7ac:	782c      	ldrb	r4, [r5, #0]
 800d7ae:	2701      	movs	r7, #1
 800d7b0:	1cb5      	adds	r5, r6, #2
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d05b      	beq.n	800d86e <_strtol_l.constprop.0+0xf6>
 800d7b6:	2b10      	cmp	r3, #16
 800d7b8:	d109      	bne.n	800d7ce <_strtol_l.constprop.0+0x56>
 800d7ba:	2c30      	cmp	r4, #48	; 0x30
 800d7bc:	d107      	bne.n	800d7ce <_strtol_l.constprop.0+0x56>
 800d7be:	782c      	ldrb	r4, [r5, #0]
 800d7c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d7c4:	2c58      	cmp	r4, #88	; 0x58
 800d7c6:	d14d      	bne.n	800d864 <_strtol_l.constprop.0+0xec>
 800d7c8:	786c      	ldrb	r4, [r5, #1]
 800d7ca:	2310      	movs	r3, #16
 800d7cc:	3502      	adds	r5, #2
 800d7ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d7d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d7d6:	f04f 0e00 	mov.w	lr, #0
 800d7da:	fbb8 f9f3 	udiv	r9, r8, r3
 800d7de:	4676      	mov	r6, lr
 800d7e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800d7e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d7e8:	f1bc 0f09 	cmp.w	ip, #9
 800d7ec:	d816      	bhi.n	800d81c <_strtol_l.constprop.0+0xa4>
 800d7ee:	4664      	mov	r4, ip
 800d7f0:	42a3      	cmp	r3, r4
 800d7f2:	dd24      	ble.n	800d83e <_strtol_l.constprop.0+0xc6>
 800d7f4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800d7f8:	d008      	beq.n	800d80c <_strtol_l.constprop.0+0x94>
 800d7fa:	45b1      	cmp	r9, r6
 800d7fc:	d31c      	bcc.n	800d838 <_strtol_l.constprop.0+0xc0>
 800d7fe:	d101      	bne.n	800d804 <_strtol_l.constprop.0+0x8c>
 800d800:	45a2      	cmp	sl, r4
 800d802:	db19      	blt.n	800d838 <_strtol_l.constprop.0+0xc0>
 800d804:	fb06 4603 	mla	r6, r6, r3, r4
 800d808:	f04f 0e01 	mov.w	lr, #1
 800d80c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d810:	e7e8      	b.n	800d7e4 <_strtol_l.constprop.0+0x6c>
 800d812:	2c2b      	cmp	r4, #43	; 0x2b
 800d814:	bf04      	itt	eq
 800d816:	782c      	ldrbeq	r4, [r5, #0]
 800d818:	1cb5      	addeq	r5, r6, #2
 800d81a:	e7ca      	b.n	800d7b2 <_strtol_l.constprop.0+0x3a>
 800d81c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d820:	f1bc 0f19 	cmp.w	ip, #25
 800d824:	d801      	bhi.n	800d82a <_strtol_l.constprop.0+0xb2>
 800d826:	3c37      	subs	r4, #55	; 0x37
 800d828:	e7e2      	b.n	800d7f0 <_strtol_l.constprop.0+0x78>
 800d82a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d82e:	f1bc 0f19 	cmp.w	ip, #25
 800d832:	d804      	bhi.n	800d83e <_strtol_l.constprop.0+0xc6>
 800d834:	3c57      	subs	r4, #87	; 0x57
 800d836:	e7db      	b.n	800d7f0 <_strtol_l.constprop.0+0x78>
 800d838:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800d83c:	e7e6      	b.n	800d80c <_strtol_l.constprop.0+0x94>
 800d83e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800d842:	d105      	bne.n	800d850 <_strtol_l.constprop.0+0xd8>
 800d844:	2322      	movs	r3, #34	; 0x22
 800d846:	6003      	str	r3, [r0, #0]
 800d848:	4646      	mov	r6, r8
 800d84a:	b942      	cbnz	r2, 800d85e <_strtol_l.constprop.0+0xe6>
 800d84c:	4630      	mov	r0, r6
 800d84e:	e79e      	b.n	800d78e <_strtol_l.constprop.0+0x16>
 800d850:	b107      	cbz	r7, 800d854 <_strtol_l.constprop.0+0xdc>
 800d852:	4276      	negs	r6, r6
 800d854:	2a00      	cmp	r2, #0
 800d856:	d0f9      	beq.n	800d84c <_strtol_l.constprop.0+0xd4>
 800d858:	f1be 0f00 	cmp.w	lr, #0
 800d85c:	d000      	beq.n	800d860 <_strtol_l.constprop.0+0xe8>
 800d85e:	1e69      	subs	r1, r5, #1
 800d860:	6011      	str	r1, [r2, #0]
 800d862:	e7f3      	b.n	800d84c <_strtol_l.constprop.0+0xd4>
 800d864:	2430      	movs	r4, #48	; 0x30
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1b1      	bne.n	800d7ce <_strtol_l.constprop.0+0x56>
 800d86a:	2308      	movs	r3, #8
 800d86c:	e7af      	b.n	800d7ce <_strtol_l.constprop.0+0x56>
 800d86e:	2c30      	cmp	r4, #48	; 0x30
 800d870:	d0a5      	beq.n	800d7be <_strtol_l.constprop.0+0x46>
 800d872:	230a      	movs	r3, #10
 800d874:	e7ab      	b.n	800d7ce <_strtol_l.constprop.0+0x56>
 800d876:	bf00      	nop
 800d878:	080155ec 	.word	0x080155ec

0800d87c <_strtol_r>:
 800d87c:	f7ff bf7c 	b.w	800d778 <_strtol_l.constprop.0>

0800d880 <strtol>:
 800d880:	4613      	mov	r3, r2
 800d882:	460a      	mov	r2, r1
 800d884:	4601      	mov	r1, r0
 800d886:	4802      	ldr	r0, [pc, #8]	; (800d890 <strtol+0x10>)
 800d888:	6800      	ldr	r0, [r0, #0]
 800d88a:	f7ff bf75 	b.w	800d778 <_strtol_l.constprop.0>
 800d88e:	bf00      	nop
 800d890:	200000a4 	.word	0x200000a4

0800d894 <_fwalk_sglue>:
 800d894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d898:	4607      	mov	r7, r0
 800d89a:	4688      	mov	r8, r1
 800d89c:	4614      	mov	r4, r2
 800d89e:	2600      	movs	r6, #0
 800d8a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8a4:	f1b9 0901 	subs.w	r9, r9, #1
 800d8a8:	d505      	bpl.n	800d8b6 <_fwalk_sglue+0x22>
 800d8aa:	6824      	ldr	r4, [r4, #0]
 800d8ac:	2c00      	cmp	r4, #0
 800d8ae:	d1f7      	bne.n	800d8a0 <_fwalk_sglue+0xc>
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b6:	89ab      	ldrh	r3, [r5, #12]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d907      	bls.n	800d8cc <_fwalk_sglue+0x38>
 800d8bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	d003      	beq.n	800d8cc <_fwalk_sglue+0x38>
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	47c0      	blx	r8
 800d8ca:	4306      	orrs	r6, r0
 800d8cc:	3568      	adds	r5, #104	; 0x68
 800d8ce:	e7e9      	b.n	800d8a4 <_fwalk_sglue+0x10>

0800d8d0 <_vsniprintf_r>:
 800d8d0:	b530      	push	{r4, r5, lr}
 800d8d2:	4614      	mov	r4, r2
 800d8d4:	2c00      	cmp	r4, #0
 800d8d6:	b09b      	sub	sp, #108	; 0x6c
 800d8d8:	4605      	mov	r5, r0
 800d8da:	461a      	mov	r2, r3
 800d8dc:	da05      	bge.n	800d8ea <_vsniprintf_r+0x1a>
 800d8de:	238b      	movs	r3, #139	; 0x8b
 800d8e0:	6003      	str	r3, [r0, #0]
 800d8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8e6:	b01b      	add	sp, #108	; 0x6c
 800d8e8:	bd30      	pop	{r4, r5, pc}
 800d8ea:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d8ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d8f2:	bf14      	ite	ne
 800d8f4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d8f8:	4623      	moveq	r3, r4
 800d8fa:	9302      	str	r3, [sp, #8]
 800d8fc:	9305      	str	r3, [sp, #20]
 800d8fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d902:	9100      	str	r1, [sp, #0]
 800d904:	9104      	str	r1, [sp, #16]
 800d906:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d90a:	4669      	mov	r1, sp
 800d90c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d90e:	f001 f867 	bl	800e9e0 <_svfiprintf_r>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	bfbc      	itt	lt
 800d916:	238b      	movlt	r3, #139	; 0x8b
 800d918:	602b      	strlt	r3, [r5, #0]
 800d91a:	2c00      	cmp	r4, #0
 800d91c:	d0e3      	beq.n	800d8e6 <_vsniprintf_r+0x16>
 800d91e:	9b00      	ldr	r3, [sp, #0]
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	e7df      	b.n	800d8e6 <_vsniprintf_r+0x16>
	...

0800d928 <vsniprintf>:
 800d928:	b507      	push	{r0, r1, r2, lr}
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	4613      	mov	r3, r2
 800d92e:	460a      	mov	r2, r1
 800d930:	4601      	mov	r1, r0
 800d932:	4803      	ldr	r0, [pc, #12]	; (800d940 <vsniprintf+0x18>)
 800d934:	6800      	ldr	r0, [r0, #0]
 800d936:	f7ff ffcb 	bl	800d8d0 <_vsniprintf_r>
 800d93a:	b003      	add	sp, #12
 800d93c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d940:	200000a4 	.word	0x200000a4

0800d944 <iprintf>:
 800d944:	b40f      	push	{r0, r1, r2, r3}
 800d946:	b507      	push	{r0, r1, r2, lr}
 800d948:	4906      	ldr	r1, [pc, #24]	; (800d964 <iprintf+0x20>)
 800d94a:	ab04      	add	r3, sp, #16
 800d94c:	6808      	ldr	r0, [r1, #0]
 800d94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d952:	6881      	ldr	r1, [r0, #8]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	f001 fb3d 	bl	800efd4 <_vfiprintf_r>
 800d95a:	b003      	add	sp, #12
 800d95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d960:	b004      	add	sp, #16
 800d962:	4770      	bx	lr
 800d964:	200000a4 	.word	0x200000a4

0800d968 <strncmp>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	b16a      	cbz	r2, 800d988 <strncmp+0x20>
 800d96c:	3901      	subs	r1, #1
 800d96e:	1884      	adds	r4, r0, r2
 800d970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d974:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d978:	429a      	cmp	r2, r3
 800d97a:	d103      	bne.n	800d984 <strncmp+0x1c>
 800d97c:	42a0      	cmp	r0, r4
 800d97e:	d001      	beq.n	800d984 <strncmp+0x1c>
 800d980:	2a00      	cmp	r2, #0
 800d982:	d1f5      	bne.n	800d970 <strncmp+0x8>
 800d984:	1ad0      	subs	r0, r2, r3
 800d986:	bd10      	pop	{r4, pc}
 800d988:	4610      	mov	r0, r2
 800d98a:	e7fc      	b.n	800d986 <strncmp+0x1e>

0800d98c <strtok>:
 800d98c:	4b16      	ldr	r3, [pc, #88]	; (800d9e8 <strtok+0x5c>)
 800d98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d990:	681e      	ldr	r6, [r3, #0]
 800d992:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800d994:	4605      	mov	r5, r0
 800d996:	b9fc      	cbnz	r4, 800d9d8 <strtok+0x4c>
 800d998:	2050      	movs	r0, #80	; 0x50
 800d99a:	9101      	str	r1, [sp, #4]
 800d99c:	f001 fc34 	bl	800f208 <malloc>
 800d9a0:	9901      	ldr	r1, [sp, #4]
 800d9a2:	6470      	str	r0, [r6, #68]	; 0x44
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	b920      	cbnz	r0, 800d9b2 <strtok+0x26>
 800d9a8:	4b10      	ldr	r3, [pc, #64]	; (800d9ec <strtok+0x60>)
 800d9aa:	4811      	ldr	r0, [pc, #68]	; (800d9f0 <strtok+0x64>)
 800d9ac:	215b      	movs	r1, #91	; 0x5b
 800d9ae:	f000 f8d7 	bl	800db60 <__assert_func>
 800d9b2:	e9c0 4400 	strd	r4, r4, [r0]
 800d9b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d9ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d9be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d9c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d9c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d9ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d9ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d9d2:	6184      	str	r4, [r0, #24]
 800d9d4:	7704      	strb	r4, [r0, #28]
 800d9d6:	6244      	str	r4, [r0, #36]	; 0x24
 800d9d8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800d9da:	2301      	movs	r3, #1
 800d9dc:	4628      	mov	r0, r5
 800d9de:	b002      	add	sp, #8
 800d9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9e4:	f000 b806 	b.w	800d9f4 <__strtok_r>
 800d9e8:	200000a4 	.word	0x200000a4
 800d9ec:	0801557a 	.word	0x0801557a
 800d9f0:	08015591 	.word	0x08015591

0800d9f4 <__strtok_r>:
 800d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9f6:	b908      	cbnz	r0, 800d9fc <__strtok_r+0x8>
 800d9f8:	6810      	ldr	r0, [r2, #0]
 800d9fa:	b188      	cbz	r0, 800da20 <__strtok_r+0x2c>
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	4620      	mov	r0, r4
 800da00:	f814 5b01 	ldrb.w	r5, [r4], #1
 800da04:	460f      	mov	r7, r1
 800da06:	f817 6b01 	ldrb.w	r6, [r7], #1
 800da0a:	b91e      	cbnz	r6, 800da14 <__strtok_r+0x20>
 800da0c:	b965      	cbnz	r5, 800da28 <__strtok_r+0x34>
 800da0e:	6015      	str	r5, [r2, #0]
 800da10:	4628      	mov	r0, r5
 800da12:	e005      	b.n	800da20 <__strtok_r+0x2c>
 800da14:	42b5      	cmp	r5, r6
 800da16:	d1f6      	bne.n	800da06 <__strtok_r+0x12>
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1f0      	bne.n	800d9fe <__strtok_r+0xa>
 800da1c:	6014      	str	r4, [r2, #0]
 800da1e:	7003      	strb	r3, [r0, #0]
 800da20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da22:	461c      	mov	r4, r3
 800da24:	e00c      	b.n	800da40 <__strtok_r+0x4c>
 800da26:	b915      	cbnz	r5, 800da2e <__strtok_r+0x3a>
 800da28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da2c:	460e      	mov	r6, r1
 800da2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800da32:	42ab      	cmp	r3, r5
 800da34:	d1f7      	bne.n	800da26 <__strtok_r+0x32>
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0f3      	beq.n	800da22 <__strtok_r+0x2e>
 800da3a:	2300      	movs	r3, #0
 800da3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800da40:	6014      	str	r4, [r2, #0]
 800da42:	e7ed      	b.n	800da20 <__strtok_r+0x2c>

0800da44 <memset>:
 800da44:	4402      	add	r2, r0
 800da46:	4603      	mov	r3, r0
 800da48:	4293      	cmp	r3, r2
 800da4a:	d100      	bne.n	800da4e <memset+0xa>
 800da4c:	4770      	bx	lr
 800da4e:	f803 1b01 	strb.w	r1, [r3], #1
 800da52:	e7f9      	b.n	800da48 <memset+0x4>

0800da54 <_localeconv_r>:
 800da54:	4800      	ldr	r0, [pc, #0]	; (800da58 <_localeconv_r+0x4>)
 800da56:	4770      	bx	lr
 800da58:	20000198 	.word	0x20000198

0800da5c <_close_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	4d06      	ldr	r5, [pc, #24]	; (800da78 <_close_r+0x1c>)
 800da60:	2300      	movs	r3, #0
 800da62:	4604      	mov	r4, r0
 800da64:	4608      	mov	r0, r1
 800da66:	602b      	str	r3, [r5, #0]
 800da68:	f7f7 f805 	bl	8004a76 <_close>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d102      	bne.n	800da76 <_close_r+0x1a>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b103      	cbz	r3, 800da76 <_close_r+0x1a>
 800da74:	6023      	str	r3, [r4, #0]
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	20009abc 	.word	0x20009abc

0800da7c <_lseek_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4d07      	ldr	r5, [pc, #28]	; (800da9c <_lseek_r+0x20>)
 800da80:	4604      	mov	r4, r0
 800da82:	4608      	mov	r0, r1
 800da84:	4611      	mov	r1, r2
 800da86:	2200      	movs	r2, #0
 800da88:	602a      	str	r2, [r5, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	f7f7 f81a 	bl	8004ac4 <_lseek>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d102      	bne.n	800da9a <_lseek_r+0x1e>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b103      	cbz	r3, 800da9a <_lseek_r+0x1e>
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	20009abc 	.word	0x20009abc

0800daa0 <_read_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d07      	ldr	r5, [pc, #28]	; (800dac0 <_read_r+0x20>)
 800daa4:	4604      	mov	r4, r0
 800daa6:	4608      	mov	r0, r1
 800daa8:	4611      	mov	r1, r2
 800daaa:	2200      	movs	r2, #0
 800daac:	602a      	str	r2, [r5, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	f7f6 ffa8 	bl	8004a04 <_read>
 800dab4:	1c43      	adds	r3, r0, #1
 800dab6:	d102      	bne.n	800dabe <_read_r+0x1e>
 800dab8:	682b      	ldr	r3, [r5, #0]
 800daba:	b103      	cbz	r3, 800dabe <_read_r+0x1e>
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	bd38      	pop	{r3, r4, r5, pc}
 800dac0:	20009abc 	.word	0x20009abc

0800dac4 <_write_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4d07      	ldr	r5, [pc, #28]	; (800dae4 <_write_r+0x20>)
 800dac8:	4604      	mov	r4, r0
 800daca:	4608      	mov	r0, r1
 800dacc:	4611      	mov	r1, r2
 800dace:	2200      	movs	r2, #0
 800dad0:	602a      	str	r2, [r5, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	f7f6 ffb3 	bl	8004a3e <_write>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_write_r+0x1e>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_write_r+0x1e>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	20009abc 	.word	0x20009abc

0800dae8 <__errno>:
 800dae8:	4b01      	ldr	r3, [pc, #4]	; (800daf0 <__errno+0x8>)
 800daea:	6818      	ldr	r0, [r3, #0]
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	200000a4 	.word	0x200000a4

0800daf4 <__libc_init_array>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	4d0d      	ldr	r5, [pc, #52]	; (800db2c <__libc_init_array+0x38>)
 800daf8:	4c0d      	ldr	r4, [pc, #52]	; (800db30 <__libc_init_array+0x3c>)
 800dafa:	1b64      	subs	r4, r4, r5
 800dafc:	10a4      	asrs	r4, r4, #2
 800dafe:	2600      	movs	r6, #0
 800db00:	42a6      	cmp	r6, r4
 800db02:	d109      	bne.n	800db18 <__libc_init_array+0x24>
 800db04:	4d0b      	ldr	r5, [pc, #44]	; (800db34 <__libc_init_array+0x40>)
 800db06:	4c0c      	ldr	r4, [pc, #48]	; (800db38 <__libc_init_array+0x44>)
 800db08:	f003 f8d2 	bl	8010cb0 <_init>
 800db0c:	1b64      	subs	r4, r4, r5
 800db0e:	10a4      	asrs	r4, r4, #2
 800db10:	2600      	movs	r6, #0
 800db12:	42a6      	cmp	r6, r4
 800db14:	d105      	bne.n	800db22 <__libc_init_array+0x2e>
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1c:	4798      	blx	r3
 800db1e:	3601      	adds	r6, #1
 800db20:	e7ee      	b.n	800db00 <__libc_init_array+0xc>
 800db22:	f855 3b04 	ldr.w	r3, [r5], #4
 800db26:	4798      	blx	r3
 800db28:	3601      	adds	r6, #1
 800db2a:	e7f2      	b.n	800db12 <__libc_init_array+0x1e>
 800db2c:	08015938 	.word	0x08015938
 800db30:	08015938 	.word	0x08015938
 800db34:	08015938 	.word	0x08015938
 800db38:	0801593c 	.word	0x0801593c

0800db3c <__retarget_lock_init_recursive>:
 800db3c:	4770      	bx	lr

0800db3e <__retarget_lock_acquire_recursive>:
 800db3e:	4770      	bx	lr

0800db40 <__retarget_lock_release_recursive>:
 800db40:	4770      	bx	lr

0800db42 <memcpy>:
 800db42:	440a      	add	r2, r1
 800db44:	4291      	cmp	r1, r2
 800db46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800db4a:	d100      	bne.n	800db4e <memcpy+0xc>
 800db4c:	4770      	bx	lr
 800db4e:	b510      	push	{r4, lr}
 800db50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db58:	4291      	cmp	r1, r2
 800db5a:	d1f9      	bne.n	800db50 <memcpy+0xe>
 800db5c:	bd10      	pop	{r4, pc}
	...

0800db60 <__assert_func>:
 800db60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db62:	4614      	mov	r4, r2
 800db64:	461a      	mov	r2, r3
 800db66:	4b09      	ldr	r3, [pc, #36]	; (800db8c <__assert_func+0x2c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4605      	mov	r5, r0
 800db6c:	68d8      	ldr	r0, [r3, #12]
 800db6e:	b14c      	cbz	r4, 800db84 <__assert_func+0x24>
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <__assert_func+0x30>)
 800db72:	9100      	str	r1, [sp, #0]
 800db74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db78:	4906      	ldr	r1, [pc, #24]	; (800db94 <__assert_func+0x34>)
 800db7a:	462b      	mov	r3, r5
 800db7c:	f002 f9aa 	bl	800fed4 <fiprintf>
 800db80:	f002 fbdc 	bl	801033c <abort>
 800db84:	4b04      	ldr	r3, [pc, #16]	; (800db98 <__assert_func+0x38>)
 800db86:	461c      	mov	r4, r3
 800db88:	e7f3      	b.n	800db72 <__assert_func+0x12>
 800db8a:	bf00      	nop
 800db8c:	200000a4 	.word	0x200000a4
 800db90:	080156ec 	.word	0x080156ec
 800db94:	080156f9 	.word	0x080156f9
 800db98:	08015727 	.word	0x08015727

0800db9c <quorem>:
 800db9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	6903      	ldr	r3, [r0, #16]
 800dba2:	690c      	ldr	r4, [r1, #16]
 800dba4:	42a3      	cmp	r3, r4
 800dba6:	4607      	mov	r7, r0
 800dba8:	db7e      	blt.n	800dca8 <quorem+0x10c>
 800dbaa:	3c01      	subs	r4, #1
 800dbac:	f101 0814 	add.w	r8, r1, #20
 800dbb0:	f100 0514 	add.w	r5, r0, #20
 800dbb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dbca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbce:	fbb2 f6f3 	udiv	r6, r2, r3
 800dbd2:	d331      	bcc.n	800dc38 <quorem+0x9c>
 800dbd4:	f04f 0e00 	mov.w	lr, #0
 800dbd8:	4640      	mov	r0, r8
 800dbda:	46ac      	mov	ip, r5
 800dbdc:	46f2      	mov	sl, lr
 800dbde:	f850 2b04 	ldr.w	r2, [r0], #4
 800dbe2:	b293      	uxth	r3, r2
 800dbe4:	fb06 e303 	mla	r3, r6, r3, lr
 800dbe8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dbec:	0c1a      	lsrs	r2, r3, #16
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	ebaa 0303 	sub.w	r3, sl, r3
 800dbf4:	f8dc a000 	ldr.w	sl, [ip]
 800dbf8:	fa13 f38a 	uxtah	r3, r3, sl
 800dbfc:	fb06 220e 	mla	r2, r6, lr, r2
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	9b00      	ldr	r3, [sp, #0]
 800dc04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc08:	b292      	uxth	r2, r2
 800dc0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc12:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc16:	4581      	cmp	r9, r0
 800dc18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc1c:	f84c 3b04 	str.w	r3, [ip], #4
 800dc20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc24:	d2db      	bcs.n	800dbde <quorem+0x42>
 800dc26:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc2a:	b92b      	cbnz	r3, 800dc38 <quorem+0x9c>
 800dc2c:	9b01      	ldr	r3, [sp, #4]
 800dc2e:	3b04      	subs	r3, #4
 800dc30:	429d      	cmp	r5, r3
 800dc32:	461a      	mov	r2, r3
 800dc34:	d32c      	bcc.n	800dc90 <quorem+0xf4>
 800dc36:	613c      	str	r4, [r7, #16]
 800dc38:	4638      	mov	r0, r7
 800dc3a:	f002 f84b 	bl	800fcd4 <__mcmp>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	db22      	blt.n	800dc88 <quorem+0xec>
 800dc42:	3601      	adds	r6, #1
 800dc44:	4629      	mov	r1, r5
 800dc46:	2000      	movs	r0, #0
 800dc48:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc4c:	f8d1 c000 	ldr.w	ip, [r1]
 800dc50:	b293      	uxth	r3, r2
 800dc52:	1ac3      	subs	r3, r0, r3
 800dc54:	0c12      	lsrs	r2, r2, #16
 800dc56:	fa13 f38c 	uxtah	r3, r3, ip
 800dc5a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dc5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc68:	45c1      	cmp	r9, r8
 800dc6a:	f841 3b04 	str.w	r3, [r1], #4
 800dc6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc72:	d2e9      	bcs.n	800dc48 <quorem+0xac>
 800dc74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc7c:	b922      	cbnz	r2, 800dc88 <quorem+0xec>
 800dc7e:	3b04      	subs	r3, #4
 800dc80:	429d      	cmp	r5, r3
 800dc82:	461a      	mov	r2, r3
 800dc84:	d30a      	bcc.n	800dc9c <quorem+0x100>
 800dc86:	613c      	str	r4, [r7, #16]
 800dc88:	4630      	mov	r0, r6
 800dc8a:	b003      	add	sp, #12
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	6812      	ldr	r2, [r2, #0]
 800dc92:	3b04      	subs	r3, #4
 800dc94:	2a00      	cmp	r2, #0
 800dc96:	d1ce      	bne.n	800dc36 <quorem+0x9a>
 800dc98:	3c01      	subs	r4, #1
 800dc9a:	e7c9      	b.n	800dc30 <quorem+0x94>
 800dc9c:	6812      	ldr	r2, [r2, #0]
 800dc9e:	3b04      	subs	r3, #4
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	d1f0      	bne.n	800dc86 <quorem+0xea>
 800dca4:	3c01      	subs	r4, #1
 800dca6:	e7eb      	b.n	800dc80 <quorem+0xe4>
 800dca8:	2000      	movs	r0, #0
 800dcaa:	e7ee      	b.n	800dc8a <quorem+0xee>
 800dcac:	0000      	movs	r0, r0
	...

0800dcb0 <_dtoa_r>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	ed2d 8b04 	vpush	{d8-d9}
 800dcb8:	69c5      	ldr	r5, [r0, #28]
 800dcba:	b093      	sub	sp, #76	; 0x4c
 800dcbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcc0:	ec57 6b10 	vmov	r6, r7, d0
 800dcc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dcc8:	9107      	str	r1, [sp, #28]
 800dcca:	4604      	mov	r4, r0
 800dccc:	920a      	str	r2, [sp, #40]	; 0x28
 800dcce:	930d      	str	r3, [sp, #52]	; 0x34
 800dcd0:	b975      	cbnz	r5, 800dcf0 <_dtoa_r+0x40>
 800dcd2:	2010      	movs	r0, #16
 800dcd4:	f001 fa98 	bl	800f208 <malloc>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	61e0      	str	r0, [r4, #28]
 800dcdc:	b920      	cbnz	r0, 800dce8 <_dtoa_r+0x38>
 800dcde:	4bae      	ldr	r3, [pc, #696]	; (800df98 <_dtoa_r+0x2e8>)
 800dce0:	21ef      	movs	r1, #239	; 0xef
 800dce2:	48ae      	ldr	r0, [pc, #696]	; (800df9c <_dtoa_r+0x2ec>)
 800dce4:	f7ff ff3c 	bl	800db60 <__assert_func>
 800dce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dcec:	6005      	str	r5, [r0, #0]
 800dcee:	60c5      	str	r5, [r0, #12]
 800dcf0:	69e3      	ldr	r3, [r4, #28]
 800dcf2:	6819      	ldr	r1, [r3, #0]
 800dcf4:	b151      	cbz	r1, 800dd0c <_dtoa_r+0x5c>
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	604a      	str	r2, [r1, #4]
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	4093      	lsls	r3, r2
 800dcfe:	608b      	str	r3, [r1, #8]
 800dd00:	4620      	mov	r0, r4
 800dd02:	f001 fdab 	bl	800f85c <_Bfree>
 800dd06:	69e3      	ldr	r3, [r4, #28]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]
 800dd0c:	1e3b      	subs	r3, r7, #0
 800dd0e:	bfbb      	ittet	lt
 800dd10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd14:	9303      	strlt	r3, [sp, #12]
 800dd16:	2300      	movge	r3, #0
 800dd18:	2201      	movlt	r2, #1
 800dd1a:	bfac      	ite	ge
 800dd1c:	f8c8 3000 	strge.w	r3, [r8]
 800dd20:	f8c8 2000 	strlt.w	r2, [r8]
 800dd24:	4b9e      	ldr	r3, [pc, #632]	; (800dfa0 <_dtoa_r+0x2f0>)
 800dd26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dd2a:	ea33 0308 	bics.w	r3, r3, r8
 800dd2e:	d11b      	bne.n	800dd68 <_dtoa_r+0xb8>
 800dd30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd32:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dd3c:	4333      	orrs	r3, r6
 800dd3e:	f000 8593 	beq.w	800e868 <_dtoa_r+0xbb8>
 800dd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd44:	b963      	cbnz	r3, 800dd60 <_dtoa_r+0xb0>
 800dd46:	4b97      	ldr	r3, [pc, #604]	; (800dfa4 <_dtoa_r+0x2f4>)
 800dd48:	e027      	b.n	800dd9a <_dtoa_r+0xea>
 800dd4a:	4b97      	ldr	r3, [pc, #604]	; (800dfa8 <_dtoa_r+0x2f8>)
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	3308      	adds	r3, #8
 800dd50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd52:	6013      	str	r3, [r2, #0]
 800dd54:	9800      	ldr	r0, [sp, #0]
 800dd56:	b013      	add	sp, #76	; 0x4c
 800dd58:	ecbd 8b04 	vpop	{d8-d9}
 800dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd60:	4b90      	ldr	r3, [pc, #576]	; (800dfa4 <_dtoa_r+0x2f4>)
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	3303      	adds	r3, #3
 800dd66:	e7f3      	b.n	800dd50 <_dtoa_r+0xa0>
 800dd68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	ec51 0b17 	vmov	r0, r1, d7
 800dd72:	eeb0 8a47 	vmov.f32	s16, s14
 800dd76:	eef0 8a67 	vmov.f32	s17, s15
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f7f2 fece 	bl	8000b1c <__aeabi_dcmpeq>
 800dd80:	4681      	mov	r9, r0
 800dd82:	b160      	cbz	r0, 800dd9e <_dtoa_r+0xee>
 800dd84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd86:	2301      	movs	r3, #1
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 8568 	beq.w	800e862 <_dtoa_r+0xbb2>
 800dd92:	4b86      	ldr	r3, [pc, #536]	; (800dfac <_dtoa_r+0x2fc>)
 800dd94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	e7da      	b.n	800dd54 <_dtoa_r+0xa4>
 800dd9e:	aa10      	add	r2, sp, #64	; 0x40
 800dda0:	a911      	add	r1, sp, #68	; 0x44
 800dda2:	4620      	mov	r0, r4
 800dda4:	eeb0 0a48 	vmov.f32	s0, s16
 800dda8:	eef0 0a68 	vmov.f32	s1, s17
 800ddac:	f002 f838 	bl	800fe20 <__d2b>
 800ddb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ddb4:	4682      	mov	sl, r0
 800ddb6:	2d00      	cmp	r5, #0
 800ddb8:	d07f      	beq.n	800deba <_dtoa_r+0x20a>
 800ddba:	ee18 3a90 	vmov	r3, s17
 800ddbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ddc6:	ec51 0b18 	vmov	r0, r1, d8
 800ddca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ddce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ddd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4b75      	ldr	r3, [pc, #468]	; (800dfb0 <_dtoa_r+0x300>)
 800dddc:	f7f2 fa7e 	bl	80002dc <__aeabi_dsub>
 800dde0:	a367      	add	r3, pc, #412	; (adr r3, 800df80 <_dtoa_r+0x2d0>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	f7f2 fc31 	bl	800064c <__aeabi_dmul>
 800ddea:	a367      	add	r3, pc, #412	; (adr r3, 800df88 <_dtoa_r+0x2d8>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f7f2 fa76 	bl	80002e0 <__adddf3>
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	460f      	mov	r7, r1
 800ddfa:	f7f2 fbbd 	bl	8000578 <__aeabi_i2d>
 800ddfe:	a364      	add	r3, pc, #400	; (adr r3, 800df90 <_dtoa_r+0x2e0>)
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	f7f2 fc22 	bl	800064c <__aeabi_dmul>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4630      	mov	r0, r6
 800de0e:	4639      	mov	r1, r7
 800de10:	f7f2 fa66 	bl	80002e0 <__adddf3>
 800de14:	4606      	mov	r6, r0
 800de16:	460f      	mov	r7, r1
 800de18:	f7f2 fec8 	bl	8000bac <__aeabi_d2iz>
 800de1c:	2200      	movs	r2, #0
 800de1e:	4683      	mov	fp, r0
 800de20:	2300      	movs	r3, #0
 800de22:	4630      	mov	r0, r6
 800de24:	4639      	mov	r1, r7
 800de26:	f7f2 fe83 	bl	8000b30 <__aeabi_dcmplt>
 800de2a:	b148      	cbz	r0, 800de40 <_dtoa_r+0x190>
 800de2c:	4658      	mov	r0, fp
 800de2e:	f7f2 fba3 	bl	8000578 <__aeabi_i2d>
 800de32:	4632      	mov	r2, r6
 800de34:	463b      	mov	r3, r7
 800de36:	f7f2 fe71 	bl	8000b1c <__aeabi_dcmpeq>
 800de3a:	b908      	cbnz	r0, 800de40 <_dtoa_r+0x190>
 800de3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800de40:	f1bb 0f16 	cmp.w	fp, #22
 800de44:	d857      	bhi.n	800def6 <_dtoa_r+0x246>
 800de46:	4b5b      	ldr	r3, [pc, #364]	; (800dfb4 <_dtoa_r+0x304>)
 800de48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	ec51 0b18 	vmov	r0, r1, d8
 800de54:	f7f2 fe6c 	bl	8000b30 <__aeabi_dcmplt>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d04e      	beq.n	800defa <_dtoa_r+0x24a>
 800de5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800de60:	2300      	movs	r3, #0
 800de62:	930c      	str	r3, [sp, #48]	; 0x30
 800de64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de66:	1b5b      	subs	r3, r3, r5
 800de68:	1e5a      	subs	r2, r3, #1
 800de6a:	bf45      	ittet	mi
 800de6c:	f1c3 0301 	rsbmi	r3, r3, #1
 800de70:	9305      	strmi	r3, [sp, #20]
 800de72:	2300      	movpl	r3, #0
 800de74:	2300      	movmi	r3, #0
 800de76:	9206      	str	r2, [sp, #24]
 800de78:	bf54      	ite	pl
 800de7a:	9305      	strpl	r3, [sp, #20]
 800de7c:	9306      	strmi	r3, [sp, #24]
 800de7e:	f1bb 0f00 	cmp.w	fp, #0
 800de82:	db3c      	blt.n	800defe <_dtoa_r+0x24e>
 800de84:	9b06      	ldr	r3, [sp, #24]
 800de86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800de8a:	445b      	add	r3, fp
 800de8c:	9306      	str	r3, [sp, #24]
 800de8e:	2300      	movs	r3, #0
 800de90:	9308      	str	r3, [sp, #32]
 800de92:	9b07      	ldr	r3, [sp, #28]
 800de94:	2b09      	cmp	r3, #9
 800de96:	d868      	bhi.n	800df6a <_dtoa_r+0x2ba>
 800de98:	2b05      	cmp	r3, #5
 800de9a:	bfc4      	itt	gt
 800de9c:	3b04      	subgt	r3, #4
 800de9e:	9307      	strgt	r3, [sp, #28]
 800dea0:	9b07      	ldr	r3, [sp, #28]
 800dea2:	f1a3 0302 	sub.w	r3, r3, #2
 800dea6:	bfcc      	ite	gt
 800dea8:	2500      	movgt	r5, #0
 800deaa:	2501      	movle	r5, #1
 800deac:	2b03      	cmp	r3, #3
 800deae:	f200 8085 	bhi.w	800dfbc <_dtoa_r+0x30c>
 800deb2:	e8df f003 	tbb	[pc, r3]
 800deb6:	3b2e      	.short	0x3b2e
 800deb8:	5839      	.short	0x5839
 800deba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800debe:	441d      	add	r5, r3
 800dec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dec4:	2b20      	cmp	r3, #32
 800dec6:	bfc1      	itttt	gt
 800dec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800decc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ded0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ded4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ded8:	bfd6      	itet	le
 800deda:	f1c3 0320 	rsble	r3, r3, #32
 800dede:	ea48 0003 	orrgt.w	r0, r8, r3
 800dee2:	fa06 f003 	lslle.w	r0, r6, r3
 800dee6:	f7f2 fb37 	bl	8000558 <__aeabi_ui2d>
 800deea:	2201      	movs	r2, #1
 800deec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800def0:	3d01      	subs	r5, #1
 800def2:	920e      	str	r2, [sp, #56]	; 0x38
 800def4:	e76f      	b.n	800ddd6 <_dtoa_r+0x126>
 800def6:	2301      	movs	r3, #1
 800def8:	e7b3      	b.n	800de62 <_dtoa_r+0x1b2>
 800defa:	900c      	str	r0, [sp, #48]	; 0x30
 800defc:	e7b2      	b.n	800de64 <_dtoa_r+0x1b4>
 800defe:	9b05      	ldr	r3, [sp, #20]
 800df00:	eba3 030b 	sub.w	r3, r3, fp
 800df04:	9305      	str	r3, [sp, #20]
 800df06:	f1cb 0300 	rsb	r3, fp, #0
 800df0a:	9308      	str	r3, [sp, #32]
 800df0c:	2300      	movs	r3, #0
 800df0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800df10:	e7bf      	b.n	800de92 <_dtoa_r+0x1e2>
 800df12:	2300      	movs	r3, #0
 800df14:	9309      	str	r3, [sp, #36]	; 0x24
 800df16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dc52      	bgt.n	800dfc2 <_dtoa_r+0x312>
 800df1c:	2301      	movs	r3, #1
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	9304      	str	r3, [sp, #16]
 800df22:	461a      	mov	r2, r3
 800df24:	920a      	str	r2, [sp, #40]	; 0x28
 800df26:	e00b      	b.n	800df40 <_dtoa_r+0x290>
 800df28:	2301      	movs	r3, #1
 800df2a:	e7f3      	b.n	800df14 <_dtoa_r+0x264>
 800df2c:	2300      	movs	r3, #0
 800df2e:	9309      	str	r3, [sp, #36]	; 0x24
 800df30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df32:	445b      	add	r3, fp
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	3301      	adds	r3, #1
 800df38:	2b01      	cmp	r3, #1
 800df3a:	9304      	str	r3, [sp, #16]
 800df3c:	bfb8      	it	lt
 800df3e:	2301      	movlt	r3, #1
 800df40:	69e0      	ldr	r0, [r4, #28]
 800df42:	2100      	movs	r1, #0
 800df44:	2204      	movs	r2, #4
 800df46:	f102 0614 	add.w	r6, r2, #20
 800df4a:	429e      	cmp	r6, r3
 800df4c:	d93d      	bls.n	800dfca <_dtoa_r+0x31a>
 800df4e:	6041      	str	r1, [r0, #4]
 800df50:	4620      	mov	r0, r4
 800df52:	f001 fc43 	bl	800f7dc <_Balloc>
 800df56:	9000      	str	r0, [sp, #0]
 800df58:	2800      	cmp	r0, #0
 800df5a:	d139      	bne.n	800dfd0 <_dtoa_r+0x320>
 800df5c:	4b16      	ldr	r3, [pc, #88]	; (800dfb8 <_dtoa_r+0x308>)
 800df5e:	4602      	mov	r2, r0
 800df60:	f240 11af 	movw	r1, #431	; 0x1af
 800df64:	e6bd      	b.n	800dce2 <_dtoa_r+0x32>
 800df66:	2301      	movs	r3, #1
 800df68:	e7e1      	b.n	800df2e <_dtoa_r+0x27e>
 800df6a:	2501      	movs	r5, #1
 800df6c:	2300      	movs	r3, #0
 800df6e:	9307      	str	r3, [sp, #28]
 800df70:	9509      	str	r5, [sp, #36]	; 0x24
 800df72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df76:	9301      	str	r3, [sp, #4]
 800df78:	9304      	str	r3, [sp, #16]
 800df7a:	2200      	movs	r2, #0
 800df7c:	2312      	movs	r3, #18
 800df7e:	e7d1      	b.n	800df24 <_dtoa_r+0x274>
 800df80:	636f4361 	.word	0x636f4361
 800df84:	3fd287a7 	.word	0x3fd287a7
 800df88:	8b60c8b3 	.word	0x8b60c8b3
 800df8c:	3fc68a28 	.word	0x3fc68a28
 800df90:	509f79fb 	.word	0x509f79fb
 800df94:	3fd34413 	.word	0x3fd34413
 800df98:	0801557a 	.word	0x0801557a
 800df9c:	08015735 	.word	0x08015735
 800dfa0:	7ff00000 	.word	0x7ff00000
 800dfa4:	08015731 	.word	0x08015731
 800dfa8:	08015728 	.word	0x08015728
 800dfac:	080157c6 	.word	0x080157c6
 800dfb0:	3ff80000 	.word	0x3ff80000
 800dfb4:	08015850 	.word	0x08015850
 800dfb8:	0801578d 	.word	0x0801578d
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc0:	e7d7      	b.n	800df72 <_dtoa_r+0x2c2>
 800dfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	e7ba      	b.n	800df40 <_dtoa_r+0x290>
 800dfca:	3101      	adds	r1, #1
 800dfcc:	0052      	lsls	r2, r2, #1
 800dfce:	e7ba      	b.n	800df46 <_dtoa_r+0x296>
 800dfd0:	69e3      	ldr	r3, [r4, #28]
 800dfd2:	9a00      	ldr	r2, [sp, #0]
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	9b04      	ldr	r3, [sp, #16]
 800dfd8:	2b0e      	cmp	r3, #14
 800dfda:	f200 80a8 	bhi.w	800e12e <_dtoa_r+0x47e>
 800dfde:	2d00      	cmp	r5, #0
 800dfe0:	f000 80a5 	beq.w	800e12e <_dtoa_r+0x47e>
 800dfe4:	f1bb 0f00 	cmp.w	fp, #0
 800dfe8:	dd38      	ble.n	800e05c <_dtoa_r+0x3ac>
 800dfea:	4bc0      	ldr	r3, [pc, #768]	; (800e2ec <_dtoa_r+0x63c>)
 800dfec:	f00b 020f 	and.w	r2, fp, #15
 800dff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dff8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dffc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e000:	d019      	beq.n	800e036 <_dtoa_r+0x386>
 800e002:	4bbb      	ldr	r3, [pc, #748]	; (800e2f0 <_dtoa_r+0x640>)
 800e004:	ec51 0b18 	vmov	r0, r1, d8
 800e008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e00c:	f7f2 fc48 	bl	80008a0 <__aeabi_ddiv>
 800e010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e014:	f008 080f 	and.w	r8, r8, #15
 800e018:	2503      	movs	r5, #3
 800e01a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e2f0 <_dtoa_r+0x640>
 800e01e:	f1b8 0f00 	cmp.w	r8, #0
 800e022:	d10a      	bne.n	800e03a <_dtoa_r+0x38a>
 800e024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e028:	4632      	mov	r2, r6
 800e02a:	463b      	mov	r3, r7
 800e02c:	f7f2 fc38 	bl	80008a0 <__aeabi_ddiv>
 800e030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e034:	e02b      	b.n	800e08e <_dtoa_r+0x3de>
 800e036:	2502      	movs	r5, #2
 800e038:	e7ef      	b.n	800e01a <_dtoa_r+0x36a>
 800e03a:	f018 0f01 	tst.w	r8, #1
 800e03e:	d008      	beq.n	800e052 <_dtoa_r+0x3a2>
 800e040:	4630      	mov	r0, r6
 800e042:	4639      	mov	r1, r7
 800e044:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e048:	f7f2 fb00 	bl	800064c <__aeabi_dmul>
 800e04c:	3501      	adds	r5, #1
 800e04e:	4606      	mov	r6, r0
 800e050:	460f      	mov	r7, r1
 800e052:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e056:	f109 0908 	add.w	r9, r9, #8
 800e05a:	e7e0      	b.n	800e01e <_dtoa_r+0x36e>
 800e05c:	f000 809f 	beq.w	800e19e <_dtoa_r+0x4ee>
 800e060:	f1cb 0600 	rsb	r6, fp, #0
 800e064:	4ba1      	ldr	r3, [pc, #644]	; (800e2ec <_dtoa_r+0x63c>)
 800e066:	4fa2      	ldr	r7, [pc, #648]	; (800e2f0 <_dtoa_r+0x640>)
 800e068:	f006 020f 	and.w	r2, r6, #15
 800e06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	ec51 0b18 	vmov	r0, r1, d8
 800e078:	f7f2 fae8 	bl	800064c <__aeabi_dmul>
 800e07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e080:	1136      	asrs	r6, r6, #4
 800e082:	2300      	movs	r3, #0
 800e084:	2502      	movs	r5, #2
 800e086:	2e00      	cmp	r6, #0
 800e088:	d17e      	bne.n	800e188 <_dtoa_r+0x4d8>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1d0      	bne.n	800e030 <_dtoa_r+0x380>
 800e08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e090:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 8084 	beq.w	800e1a2 <_dtoa_r+0x4f2>
 800e09a:	4b96      	ldr	r3, [pc, #600]	; (800e2f4 <_dtoa_r+0x644>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	4640      	mov	r0, r8
 800e0a0:	4649      	mov	r1, r9
 800e0a2:	f7f2 fd45 	bl	8000b30 <__aeabi_dcmplt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d07b      	beq.n	800e1a2 <_dtoa_r+0x4f2>
 800e0aa:	9b04      	ldr	r3, [sp, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d078      	beq.n	800e1a2 <_dtoa_r+0x4f2>
 800e0b0:	9b01      	ldr	r3, [sp, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	dd39      	ble.n	800e12a <_dtoa_r+0x47a>
 800e0b6:	4b90      	ldr	r3, [pc, #576]	; (800e2f8 <_dtoa_r+0x648>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	4640      	mov	r0, r8
 800e0bc:	4649      	mov	r1, r9
 800e0be:	f7f2 fac5 	bl	800064c <__aeabi_dmul>
 800e0c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0c6:	9e01      	ldr	r6, [sp, #4]
 800e0c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e0cc:	3501      	adds	r5, #1
 800e0ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f7f2 fa50 	bl	8000578 <__aeabi_i2d>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	464b      	mov	r3, r9
 800e0dc:	f7f2 fab6 	bl	800064c <__aeabi_dmul>
 800e0e0:	4b86      	ldr	r3, [pc, #536]	; (800e2fc <_dtoa_r+0x64c>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f7f2 f8fc 	bl	80002e0 <__adddf3>
 800e0e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0f0:	9303      	str	r3, [sp, #12]
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	d158      	bne.n	800e1a8 <_dtoa_r+0x4f8>
 800e0f6:	4b82      	ldr	r3, [pc, #520]	; (800e300 <_dtoa_r+0x650>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	4649      	mov	r1, r9
 800e0fe:	f7f2 f8ed 	bl	80002dc <__aeabi_dsub>
 800e102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e106:	4680      	mov	r8, r0
 800e108:	4689      	mov	r9, r1
 800e10a:	f7f2 fd2f 	bl	8000b6c <__aeabi_dcmpgt>
 800e10e:	2800      	cmp	r0, #0
 800e110:	f040 8296 	bne.w	800e640 <_dtoa_r+0x990>
 800e114:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e118:	4640      	mov	r0, r8
 800e11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e11e:	4649      	mov	r1, r9
 800e120:	f7f2 fd06 	bl	8000b30 <__aeabi_dcmplt>
 800e124:	2800      	cmp	r0, #0
 800e126:	f040 8289 	bne.w	800e63c <_dtoa_r+0x98c>
 800e12a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e130:	2b00      	cmp	r3, #0
 800e132:	f2c0 814e 	blt.w	800e3d2 <_dtoa_r+0x722>
 800e136:	f1bb 0f0e 	cmp.w	fp, #14
 800e13a:	f300 814a 	bgt.w	800e3d2 <_dtoa_r+0x722>
 800e13e:	4b6b      	ldr	r3, [pc, #428]	; (800e2ec <_dtoa_r+0x63c>)
 800e140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e144:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f280 80dc 	bge.w	800e308 <_dtoa_r+0x658>
 800e150:	9b04      	ldr	r3, [sp, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	f300 80d8 	bgt.w	800e308 <_dtoa_r+0x658>
 800e158:	f040 826f 	bne.w	800e63a <_dtoa_r+0x98a>
 800e15c:	4b68      	ldr	r3, [pc, #416]	; (800e300 <_dtoa_r+0x650>)
 800e15e:	2200      	movs	r2, #0
 800e160:	4640      	mov	r0, r8
 800e162:	4649      	mov	r1, r9
 800e164:	f7f2 fa72 	bl	800064c <__aeabi_dmul>
 800e168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e16c:	f7f2 fcf4 	bl	8000b58 <__aeabi_dcmpge>
 800e170:	9e04      	ldr	r6, [sp, #16]
 800e172:	4637      	mov	r7, r6
 800e174:	2800      	cmp	r0, #0
 800e176:	f040 8245 	bne.w	800e604 <_dtoa_r+0x954>
 800e17a:	9d00      	ldr	r5, [sp, #0]
 800e17c:	2331      	movs	r3, #49	; 0x31
 800e17e:	f805 3b01 	strb.w	r3, [r5], #1
 800e182:	f10b 0b01 	add.w	fp, fp, #1
 800e186:	e241      	b.n	800e60c <_dtoa_r+0x95c>
 800e188:	07f2      	lsls	r2, r6, #31
 800e18a:	d505      	bpl.n	800e198 <_dtoa_r+0x4e8>
 800e18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e190:	f7f2 fa5c 	bl	800064c <__aeabi_dmul>
 800e194:	3501      	adds	r5, #1
 800e196:	2301      	movs	r3, #1
 800e198:	1076      	asrs	r6, r6, #1
 800e19a:	3708      	adds	r7, #8
 800e19c:	e773      	b.n	800e086 <_dtoa_r+0x3d6>
 800e19e:	2502      	movs	r5, #2
 800e1a0:	e775      	b.n	800e08e <_dtoa_r+0x3de>
 800e1a2:	9e04      	ldr	r6, [sp, #16]
 800e1a4:	465f      	mov	r7, fp
 800e1a6:	e792      	b.n	800e0ce <_dtoa_r+0x41e>
 800e1a8:	9900      	ldr	r1, [sp, #0]
 800e1aa:	4b50      	ldr	r3, [pc, #320]	; (800e2ec <_dtoa_r+0x63c>)
 800e1ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1b0:	4431      	add	r1, r6
 800e1b2:	9102      	str	r1, [sp, #8]
 800e1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1b6:	eeb0 9a47 	vmov.f32	s18, s14
 800e1ba:	eef0 9a67 	vmov.f32	s19, s15
 800e1be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e1c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	d044      	beq.n	800e254 <_dtoa_r+0x5a4>
 800e1ca:	494e      	ldr	r1, [pc, #312]	; (800e304 <_dtoa_r+0x654>)
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	f7f2 fb67 	bl	80008a0 <__aeabi_ddiv>
 800e1d2:	ec53 2b19 	vmov	r2, r3, d9
 800e1d6:	f7f2 f881 	bl	80002dc <__aeabi_dsub>
 800e1da:	9d00      	ldr	r5, [sp, #0]
 800e1dc:	ec41 0b19 	vmov	d9, r0, r1
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	f7f2 fce2 	bl	8000bac <__aeabi_d2iz>
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	f7f2 f9c5 	bl	8000578 <__aeabi_i2d>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4640      	mov	r0, r8
 800e1f4:	4649      	mov	r1, r9
 800e1f6:	f7f2 f871 	bl	80002dc <__aeabi_dsub>
 800e1fa:	3630      	adds	r6, #48	; 0x30
 800e1fc:	f805 6b01 	strb.w	r6, [r5], #1
 800e200:	ec53 2b19 	vmov	r2, r3, d9
 800e204:	4680      	mov	r8, r0
 800e206:	4689      	mov	r9, r1
 800e208:	f7f2 fc92 	bl	8000b30 <__aeabi_dcmplt>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d164      	bne.n	800e2da <_dtoa_r+0x62a>
 800e210:	4642      	mov	r2, r8
 800e212:	464b      	mov	r3, r9
 800e214:	4937      	ldr	r1, [pc, #220]	; (800e2f4 <_dtoa_r+0x644>)
 800e216:	2000      	movs	r0, #0
 800e218:	f7f2 f860 	bl	80002dc <__aeabi_dsub>
 800e21c:	ec53 2b19 	vmov	r2, r3, d9
 800e220:	f7f2 fc86 	bl	8000b30 <__aeabi_dcmplt>
 800e224:	2800      	cmp	r0, #0
 800e226:	f040 80b6 	bne.w	800e396 <_dtoa_r+0x6e6>
 800e22a:	9b02      	ldr	r3, [sp, #8]
 800e22c:	429d      	cmp	r5, r3
 800e22e:	f43f af7c 	beq.w	800e12a <_dtoa_r+0x47a>
 800e232:	4b31      	ldr	r3, [pc, #196]	; (800e2f8 <_dtoa_r+0x648>)
 800e234:	ec51 0b19 	vmov	r0, r1, d9
 800e238:	2200      	movs	r2, #0
 800e23a:	f7f2 fa07 	bl	800064c <__aeabi_dmul>
 800e23e:	4b2e      	ldr	r3, [pc, #184]	; (800e2f8 <_dtoa_r+0x648>)
 800e240:	ec41 0b19 	vmov	d9, r0, r1
 800e244:	2200      	movs	r2, #0
 800e246:	4640      	mov	r0, r8
 800e248:	4649      	mov	r1, r9
 800e24a:	f7f2 f9ff 	bl	800064c <__aeabi_dmul>
 800e24e:	4680      	mov	r8, r0
 800e250:	4689      	mov	r9, r1
 800e252:	e7c5      	b.n	800e1e0 <_dtoa_r+0x530>
 800e254:	ec51 0b17 	vmov	r0, r1, d7
 800e258:	f7f2 f9f8 	bl	800064c <__aeabi_dmul>
 800e25c:	9b02      	ldr	r3, [sp, #8]
 800e25e:	9d00      	ldr	r5, [sp, #0]
 800e260:	930f      	str	r3, [sp, #60]	; 0x3c
 800e262:	ec41 0b19 	vmov	d9, r0, r1
 800e266:	4649      	mov	r1, r9
 800e268:	4640      	mov	r0, r8
 800e26a:	f7f2 fc9f 	bl	8000bac <__aeabi_d2iz>
 800e26e:	4606      	mov	r6, r0
 800e270:	f7f2 f982 	bl	8000578 <__aeabi_i2d>
 800e274:	3630      	adds	r6, #48	; 0x30
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	4640      	mov	r0, r8
 800e27c:	4649      	mov	r1, r9
 800e27e:	f7f2 f82d 	bl	80002dc <__aeabi_dsub>
 800e282:	f805 6b01 	strb.w	r6, [r5], #1
 800e286:	9b02      	ldr	r3, [sp, #8]
 800e288:	429d      	cmp	r5, r3
 800e28a:	4680      	mov	r8, r0
 800e28c:	4689      	mov	r9, r1
 800e28e:	f04f 0200 	mov.w	r2, #0
 800e292:	d124      	bne.n	800e2de <_dtoa_r+0x62e>
 800e294:	4b1b      	ldr	r3, [pc, #108]	; (800e304 <_dtoa_r+0x654>)
 800e296:	ec51 0b19 	vmov	r0, r1, d9
 800e29a:	f7f2 f821 	bl	80002e0 <__adddf3>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	f7f2 fc61 	bl	8000b6c <__aeabi_dcmpgt>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d173      	bne.n	800e396 <_dtoa_r+0x6e6>
 800e2ae:	ec53 2b19 	vmov	r2, r3, d9
 800e2b2:	4914      	ldr	r1, [pc, #80]	; (800e304 <_dtoa_r+0x654>)
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	f7f2 f811 	bl	80002dc <__aeabi_dsub>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	f7f2 fc35 	bl	8000b30 <__aeabi_dcmplt>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	f43f af2f 	beq.w	800e12a <_dtoa_r+0x47a>
 800e2cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e2ce:	1e6b      	subs	r3, r5, #1
 800e2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2d6:	2b30      	cmp	r3, #48	; 0x30
 800e2d8:	d0f8      	beq.n	800e2cc <_dtoa_r+0x61c>
 800e2da:	46bb      	mov	fp, r7
 800e2dc:	e04a      	b.n	800e374 <_dtoa_r+0x6c4>
 800e2de:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <_dtoa_r+0x648>)
 800e2e0:	f7f2 f9b4 	bl	800064c <__aeabi_dmul>
 800e2e4:	4680      	mov	r8, r0
 800e2e6:	4689      	mov	r9, r1
 800e2e8:	e7bd      	b.n	800e266 <_dtoa_r+0x5b6>
 800e2ea:	bf00      	nop
 800e2ec:	08015850 	.word	0x08015850
 800e2f0:	08015828 	.word	0x08015828
 800e2f4:	3ff00000 	.word	0x3ff00000
 800e2f8:	40240000 	.word	0x40240000
 800e2fc:	401c0000 	.word	0x401c0000
 800e300:	40140000 	.word	0x40140000
 800e304:	3fe00000 	.word	0x3fe00000
 800e308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e30c:	9d00      	ldr	r5, [sp, #0]
 800e30e:	4642      	mov	r2, r8
 800e310:	464b      	mov	r3, r9
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f7f2 fac3 	bl	80008a0 <__aeabi_ddiv>
 800e31a:	f7f2 fc47 	bl	8000bac <__aeabi_d2iz>
 800e31e:	9001      	str	r0, [sp, #4]
 800e320:	f7f2 f92a 	bl	8000578 <__aeabi_i2d>
 800e324:	4642      	mov	r2, r8
 800e326:	464b      	mov	r3, r9
 800e328:	f7f2 f990 	bl	800064c <__aeabi_dmul>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4630      	mov	r0, r6
 800e332:	4639      	mov	r1, r7
 800e334:	f7f1 ffd2 	bl	80002dc <__aeabi_dsub>
 800e338:	9e01      	ldr	r6, [sp, #4]
 800e33a:	9f04      	ldr	r7, [sp, #16]
 800e33c:	3630      	adds	r6, #48	; 0x30
 800e33e:	f805 6b01 	strb.w	r6, [r5], #1
 800e342:	9e00      	ldr	r6, [sp, #0]
 800e344:	1bae      	subs	r6, r5, r6
 800e346:	42b7      	cmp	r7, r6
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	d134      	bne.n	800e3b8 <_dtoa_r+0x708>
 800e34e:	f7f1 ffc7 	bl	80002e0 <__adddf3>
 800e352:	4642      	mov	r2, r8
 800e354:	464b      	mov	r3, r9
 800e356:	4606      	mov	r6, r0
 800e358:	460f      	mov	r7, r1
 800e35a:	f7f2 fc07 	bl	8000b6c <__aeabi_dcmpgt>
 800e35e:	b9c8      	cbnz	r0, 800e394 <_dtoa_r+0x6e4>
 800e360:	4642      	mov	r2, r8
 800e362:	464b      	mov	r3, r9
 800e364:	4630      	mov	r0, r6
 800e366:	4639      	mov	r1, r7
 800e368:	f7f2 fbd8 	bl	8000b1c <__aeabi_dcmpeq>
 800e36c:	b110      	cbz	r0, 800e374 <_dtoa_r+0x6c4>
 800e36e:	9b01      	ldr	r3, [sp, #4]
 800e370:	07db      	lsls	r3, r3, #31
 800e372:	d40f      	bmi.n	800e394 <_dtoa_r+0x6e4>
 800e374:	4651      	mov	r1, sl
 800e376:	4620      	mov	r0, r4
 800e378:	f001 fa70 	bl	800f85c <_Bfree>
 800e37c:	2300      	movs	r3, #0
 800e37e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e380:	702b      	strb	r3, [r5, #0]
 800e382:	f10b 0301 	add.w	r3, fp, #1
 800e386:	6013      	str	r3, [r2, #0]
 800e388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f43f ace2 	beq.w	800dd54 <_dtoa_r+0xa4>
 800e390:	601d      	str	r5, [r3, #0]
 800e392:	e4df      	b.n	800dd54 <_dtoa_r+0xa4>
 800e394:	465f      	mov	r7, fp
 800e396:	462b      	mov	r3, r5
 800e398:	461d      	mov	r5, r3
 800e39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e39e:	2a39      	cmp	r2, #57	; 0x39
 800e3a0:	d106      	bne.n	800e3b0 <_dtoa_r+0x700>
 800e3a2:	9a00      	ldr	r2, [sp, #0]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d1f7      	bne.n	800e398 <_dtoa_r+0x6e8>
 800e3a8:	9900      	ldr	r1, [sp, #0]
 800e3aa:	2230      	movs	r2, #48	; 0x30
 800e3ac:	3701      	adds	r7, #1
 800e3ae:	700a      	strb	r2, [r1, #0]
 800e3b0:	781a      	ldrb	r2, [r3, #0]
 800e3b2:	3201      	adds	r2, #1
 800e3b4:	701a      	strb	r2, [r3, #0]
 800e3b6:	e790      	b.n	800e2da <_dtoa_r+0x62a>
 800e3b8:	4ba3      	ldr	r3, [pc, #652]	; (800e648 <_dtoa_r+0x998>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f7f2 f946 	bl	800064c <__aeabi_dmul>
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	460f      	mov	r7, r1
 800e3c8:	f7f2 fba8 	bl	8000b1c <__aeabi_dcmpeq>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d09e      	beq.n	800e30e <_dtoa_r+0x65e>
 800e3d0:	e7d0      	b.n	800e374 <_dtoa_r+0x6c4>
 800e3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3d4:	2a00      	cmp	r2, #0
 800e3d6:	f000 80ca 	beq.w	800e56e <_dtoa_r+0x8be>
 800e3da:	9a07      	ldr	r2, [sp, #28]
 800e3dc:	2a01      	cmp	r2, #1
 800e3de:	f300 80ad 	bgt.w	800e53c <_dtoa_r+0x88c>
 800e3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3e4:	2a00      	cmp	r2, #0
 800e3e6:	f000 80a5 	beq.w	800e534 <_dtoa_r+0x884>
 800e3ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e3ee:	9e08      	ldr	r6, [sp, #32]
 800e3f0:	9d05      	ldr	r5, [sp, #20]
 800e3f2:	9a05      	ldr	r2, [sp, #20]
 800e3f4:	441a      	add	r2, r3
 800e3f6:	9205      	str	r2, [sp, #20]
 800e3f8:	9a06      	ldr	r2, [sp, #24]
 800e3fa:	2101      	movs	r1, #1
 800e3fc:	441a      	add	r2, r3
 800e3fe:	4620      	mov	r0, r4
 800e400:	9206      	str	r2, [sp, #24]
 800e402:	f001 fae1 	bl	800f9c8 <__i2b>
 800e406:	4607      	mov	r7, r0
 800e408:	b165      	cbz	r5, 800e424 <_dtoa_r+0x774>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd09      	ble.n	800e424 <_dtoa_r+0x774>
 800e410:	42ab      	cmp	r3, r5
 800e412:	9a05      	ldr	r2, [sp, #20]
 800e414:	bfa8      	it	ge
 800e416:	462b      	movge	r3, r5
 800e418:	1ad2      	subs	r2, r2, r3
 800e41a:	9205      	str	r2, [sp, #20]
 800e41c:	9a06      	ldr	r2, [sp, #24]
 800e41e:	1aed      	subs	r5, r5, r3
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	9306      	str	r3, [sp, #24]
 800e424:	9b08      	ldr	r3, [sp, #32]
 800e426:	b1f3      	cbz	r3, 800e466 <_dtoa_r+0x7b6>
 800e428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 80a3 	beq.w	800e576 <_dtoa_r+0x8c6>
 800e430:	2e00      	cmp	r6, #0
 800e432:	dd10      	ble.n	800e456 <_dtoa_r+0x7a6>
 800e434:	4639      	mov	r1, r7
 800e436:	4632      	mov	r2, r6
 800e438:	4620      	mov	r0, r4
 800e43a:	f001 fb85 	bl	800fb48 <__pow5mult>
 800e43e:	4652      	mov	r2, sl
 800e440:	4601      	mov	r1, r0
 800e442:	4607      	mov	r7, r0
 800e444:	4620      	mov	r0, r4
 800e446:	f001 fad5 	bl	800f9f4 <__multiply>
 800e44a:	4651      	mov	r1, sl
 800e44c:	4680      	mov	r8, r0
 800e44e:	4620      	mov	r0, r4
 800e450:	f001 fa04 	bl	800f85c <_Bfree>
 800e454:	46c2      	mov	sl, r8
 800e456:	9b08      	ldr	r3, [sp, #32]
 800e458:	1b9a      	subs	r2, r3, r6
 800e45a:	d004      	beq.n	800e466 <_dtoa_r+0x7b6>
 800e45c:	4651      	mov	r1, sl
 800e45e:	4620      	mov	r0, r4
 800e460:	f001 fb72 	bl	800fb48 <__pow5mult>
 800e464:	4682      	mov	sl, r0
 800e466:	2101      	movs	r1, #1
 800e468:	4620      	mov	r0, r4
 800e46a:	f001 faad 	bl	800f9c8 <__i2b>
 800e46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e470:	2b00      	cmp	r3, #0
 800e472:	4606      	mov	r6, r0
 800e474:	f340 8081 	ble.w	800e57a <_dtoa_r+0x8ca>
 800e478:	461a      	mov	r2, r3
 800e47a:	4601      	mov	r1, r0
 800e47c:	4620      	mov	r0, r4
 800e47e:	f001 fb63 	bl	800fb48 <__pow5mult>
 800e482:	9b07      	ldr	r3, [sp, #28]
 800e484:	2b01      	cmp	r3, #1
 800e486:	4606      	mov	r6, r0
 800e488:	dd7a      	ble.n	800e580 <_dtoa_r+0x8d0>
 800e48a:	f04f 0800 	mov.w	r8, #0
 800e48e:	6933      	ldr	r3, [r6, #16]
 800e490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e494:	6918      	ldr	r0, [r3, #16]
 800e496:	f001 fa49 	bl	800f92c <__hi0bits>
 800e49a:	f1c0 0020 	rsb	r0, r0, #32
 800e49e:	9b06      	ldr	r3, [sp, #24]
 800e4a0:	4418      	add	r0, r3
 800e4a2:	f010 001f 	ands.w	r0, r0, #31
 800e4a6:	f000 8094 	beq.w	800e5d2 <_dtoa_r+0x922>
 800e4aa:	f1c0 0320 	rsb	r3, r0, #32
 800e4ae:	2b04      	cmp	r3, #4
 800e4b0:	f340 8085 	ble.w	800e5be <_dtoa_r+0x90e>
 800e4b4:	9b05      	ldr	r3, [sp, #20]
 800e4b6:	f1c0 001c 	rsb	r0, r0, #28
 800e4ba:	4403      	add	r3, r0
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	9b06      	ldr	r3, [sp, #24]
 800e4c0:	4403      	add	r3, r0
 800e4c2:	4405      	add	r5, r0
 800e4c4:	9306      	str	r3, [sp, #24]
 800e4c6:	9b05      	ldr	r3, [sp, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dd05      	ble.n	800e4d8 <_dtoa_r+0x828>
 800e4cc:	4651      	mov	r1, sl
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f001 fb93 	bl	800fbfc <__lshift>
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	9b06      	ldr	r3, [sp, #24]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	dd05      	ble.n	800e4ea <_dtoa_r+0x83a>
 800e4de:	4631      	mov	r1, r6
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f001 fb8a 	bl	800fbfc <__lshift>
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d072      	beq.n	800e5d6 <_dtoa_r+0x926>
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	f001 fbee 	bl	800fcd4 <__mcmp>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	da6c      	bge.n	800e5d6 <_dtoa_r+0x926>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4651      	mov	r1, sl
 800e500:	220a      	movs	r2, #10
 800e502:	4620      	mov	r0, r4
 800e504:	f001 f9cc 	bl	800f8a0 <__multadd>
 800e508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e50a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e50e:	4682      	mov	sl, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	f000 81b0 	beq.w	800e876 <_dtoa_r+0xbc6>
 800e516:	2300      	movs	r3, #0
 800e518:	4639      	mov	r1, r7
 800e51a:	220a      	movs	r2, #10
 800e51c:	4620      	mov	r0, r4
 800e51e:	f001 f9bf 	bl	800f8a0 <__multadd>
 800e522:	9b01      	ldr	r3, [sp, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	4607      	mov	r7, r0
 800e528:	f300 8096 	bgt.w	800e658 <_dtoa_r+0x9a8>
 800e52c:	9b07      	ldr	r3, [sp, #28]
 800e52e:	2b02      	cmp	r3, #2
 800e530:	dc59      	bgt.n	800e5e6 <_dtoa_r+0x936>
 800e532:	e091      	b.n	800e658 <_dtoa_r+0x9a8>
 800e534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e53a:	e758      	b.n	800e3ee <_dtoa_r+0x73e>
 800e53c:	9b04      	ldr	r3, [sp, #16]
 800e53e:	1e5e      	subs	r6, r3, #1
 800e540:	9b08      	ldr	r3, [sp, #32]
 800e542:	42b3      	cmp	r3, r6
 800e544:	bfbf      	itttt	lt
 800e546:	9b08      	ldrlt	r3, [sp, #32]
 800e548:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e54a:	9608      	strlt	r6, [sp, #32]
 800e54c:	1af3      	sublt	r3, r6, r3
 800e54e:	bfb4      	ite	lt
 800e550:	18d2      	addlt	r2, r2, r3
 800e552:	1b9e      	subge	r6, r3, r6
 800e554:	9b04      	ldr	r3, [sp, #16]
 800e556:	bfbc      	itt	lt
 800e558:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e55a:	2600      	movlt	r6, #0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bfb7      	itett	lt
 800e560:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e564:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e568:	1a9d      	sublt	r5, r3, r2
 800e56a:	2300      	movlt	r3, #0
 800e56c:	e741      	b.n	800e3f2 <_dtoa_r+0x742>
 800e56e:	9e08      	ldr	r6, [sp, #32]
 800e570:	9d05      	ldr	r5, [sp, #20]
 800e572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e574:	e748      	b.n	800e408 <_dtoa_r+0x758>
 800e576:	9a08      	ldr	r2, [sp, #32]
 800e578:	e770      	b.n	800e45c <_dtoa_r+0x7ac>
 800e57a:	9b07      	ldr	r3, [sp, #28]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	dc19      	bgt.n	800e5b4 <_dtoa_r+0x904>
 800e580:	9b02      	ldr	r3, [sp, #8]
 800e582:	b9bb      	cbnz	r3, 800e5b4 <_dtoa_r+0x904>
 800e584:	9b03      	ldr	r3, [sp, #12]
 800e586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e58a:	b99b      	cbnz	r3, 800e5b4 <_dtoa_r+0x904>
 800e58c:	9b03      	ldr	r3, [sp, #12]
 800e58e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e592:	0d1b      	lsrs	r3, r3, #20
 800e594:	051b      	lsls	r3, r3, #20
 800e596:	b183      	cbz	r3, 800e5ba <_dtoa_r+0x90a>
 800e598:	9b05      	ldr	r3, [sp, #20]
 800e59a:	3301      	adds	r3, #1
 800e59c:	9305      	str	r3, [sp, #20]
 800e59e:	9b06      	ldr	r3, [sp, #24]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	9306      	str	r3, [sp, #24]
 800e5a4:	f04f 0801 	mov.w	r8, #1
 800e5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f47f af6f 	bne.w	800e48e <_dtoa_r+0x7de>
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	e774      	b.n	800e49e <_dtoa_r+0x7ee>
 800e5b4:	f04f 0800 	mov.w	r8, #0
 800e5b8:	e7f6      	b.n	800e5a8 <_dtoa_r+0x8f8>
 800e5ba:	4698      	mov	r8, r3
 800e5bc:	e7f4      	b.n	800e5a8 <_dtoa_r+0x8f8>
 800e5be:	d082      	beq.n	800e4c6 <_dtoa_r+0x816>
 800e5c0:	9a05      	ldr	r2, [sp, #20]
 800e5c2:	331c      	adds	r3, #28
 800e5c4:	441a      	add	r2, r3
 800e5c6:	9205      	str	r2, [sp, #20]
 800e5c8:	9a06      	ldr	r2, [sp, #24]
 800e5ca:	441a      	add	r2, r3
 800e5cc:	441d      	add	r5, r3
 800e5ce:	9206      	str	r2, [sp, #24]
 800e5d0:	e779      	b.n	800e4c6 <_dtoa_r+0x816>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	e7f4      	b.n	800e5c0 <_dtoa_r+0x910>
 800e5d6:	9b04      	ldr	r3, [sp, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	dc37      	bgt.n	800e64c <_dtoa_r+0x99c>
 800e5dc:	9b07      	ldr	r3, [sp, #28]
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	dd34      	ble.n	800e64c <_dtoa_r+0x99c>
 800e5e2:	9b04      	ldr	r3, [sp, #16]
 800e5e4:	9301      	str	r3, [sp, #4]
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	b963      	cbnz	r3, 800e604 <_dtoa_r+0x954>
 800e5ea:	4631      	mov	r1, r6
 800e5ec:	2205      	movs	r2, #5
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f001 f956 	bl	800f8a0 <__multadd>
 800e5f4:	4601      	mov	r1, r0
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	4650      	mov	r0, sl
 800e5fa:	f001 fb6b 	bl	800fcd4 <__mcmp>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	f73f adbb 	bgt.w	800e17a <_dtoa_r+0x4ca>
 800e604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e606:	9d00      	ldr	r5, [sp, #0]
 800e608:	ea6f 0b03 	mvn.w	fp, r3
 800e60c:	f04f 0800 	mov.w	r8, #0
 800e610:	4631      	mov	r1, r6
 800e612:	4620      	mov	r0, r4
 800e614:	f001 f922 	bl	800f85c <_Bfree>
 800e618:	2f00      	cmp	r7, #0
 800e61a:	f43f aeab 	beq.w	800e374 <_dtoa_r+0x6c4>
 800e61e:	f1b8 0f00 	cmp.w	r8, #0
 800e622:	d005      	beq.n	800e630 <_dtoa_r+0x980>
 800e624:	45b8      	cmp	r8, r7
 800e626:	d003      	beq.n	800e630 <_dtoa_r+0x980>
 800e628:	4641      	mov	r1, r8
 800e62a:	4620      	mov	r0, r4
 800e62c:	f001 f916 	bl	800f85c <_Bfree>
 800e630:	4639      	mov	r1, r7
 800e632:	4620      	mov	r0, r4
 800e634:	f001 f912 	bl	800f85c <_Bfree>
 800e638:	e69c      	b.n	800e374 <_dtoa_r+0x6c4>
 800e63a:	2600      	movs	r6, #0
 800e63c:	4637      	mov	r7, r6
 800e63e:	e7e1      	b.n	800e604 <_dtoa_r+0x954>
 800e640:	46bb      	mov	fp, r7
 800e642:	4637      	mov	r7, r6
 800e644:	e599      	b.n	800e17a <_dtoa_r+0x4ca>
 800e646:	bf00      	nop
 800e648:	40240000 	.word	0x40240000
 800e64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 80c8 	beq.w	800e7e4 <_dtoa_r+0xb34>
 800e654:	9b04      	ldr	r3, [sp, #16]
 800e656:	9301      	str	r3, [sp, #4]
 800e658:	2d00      	cmp	r5, #0
 800e65a:	dd05      	ble.n	800e668 <_dtoa_r+0x9b8>
 800e65c:	4639      	mov	r1, r7
 800e65e:	462a      	mov	r2, r5
 800e660:	4620      	mov	r0, r4
 800e662:	f001 facb 	bl	800fbfc <__lshift>
 800e666:	4607      	mov	r7, r0
 800e668:	f1b8 0f00 	cmp.w	r8, #0
 800e66c:	d05b      	beq.n	800e726 <_dtoa_r+0xa76>
 800e66e:	6879      	ldr	r1, [r7, #4]
 800e670:	4620      	mov	r0, r4
 800e672:	f001 f8b3 	bl	800f7dc <_Balloc>
 800e676:	4605      	mov	r5, r0
 800e678:	b928      	cbnz	r0, 800e686 <_dtoa_r+0x9d6>
 800e67a:	4b83      	ldr	r3, [pc, #524]	; (800e888 <_dtoa_r+0xbd8>)
 800e67c:	4602      	mov	r2, r0
 800e67e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e682:	f7ff bb2e 	b.w	800dce2 <_dtoa_r+0x32>
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	3202      	adds	r2, #2
 800e68a:	0092      	lsls	r2, r2, #2
 800e68c:	f107 010c 	add.w	r1, r7, #12
 800e690:	300c      	adds	r0, #12
 800e692:	f7ff fa56 	bl	800db42 <memcpy>
 800e696:	2201      	movs	r2, #1
 800e698:	4629      	mov	r1, r5
 800e69a:	4620      	mov	r0, r4
 800e69c:	f001 faae 	bl	800fbfc <__lshift>
 800e6a0:	9b00      	ldr	r3, [sp, #0]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	9304      	str	r3, [sp, #16]
 800e6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	9308      	str	r3, [sp, #32]
 800e6ae:	9b02      	ldr	r3, [sp, #8]
 800e6b0:	f003 0301 	and.w	r3, r3, #1
 800e6b4:	46b8      	mov	r8, r7
 800e6b6:	9306      	str	r3, [sp, #24]
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	9b04      	ldr	r3, [sp, #16]
 800e6bc:	4631      	mov	r1, r6
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	4650      	mov	r0, sl
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	f7ff fa6a 	bl	800db9c <quorem>
 800e6c8:	4641      	mov	r1, r8
 800e6ca:	9002      	str	r0, [sp, #8]
 800e6cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	f001 faff 	bl	800fcd4 <__mcmp>
 800e6d6:	463a      	mov	r2, r7
 800e6d8:	9005      	str	r0, [sp, #20]
 800e6da:	4631      	mov	r1, r6
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f001 fb15 	bl	800fd0c <__mdiff>
 800e6e2:	68c2      	ldr	r2, [r0, #12]
 800e6e4:	4605      	mov	r5, r0
 800e6e6:	bb02      	cbnz	r2, 800e72a <_dtoa_r+0xa7a>
 800e6e8:	4601      	mov	r1, r0
 800e6ea:	4650      	mov	r0, sl
 800e6ec:	f001 faf2 	bl	800fcd4 <__mcmp>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6f8:	f001 f8b0 	bl	800f85c <_Bfree>
 800e6fc:	9b07      	ldr	r3, [sp, #28]
 800e6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e700:	9d04      	ldr	r5, [sp, #16]
 800e702:	ea43 0102 	orr.w	r1, r3, r2
 800e706:	9b06      	ldr	r3, [sp, #24]
 800e708:	4319      	orrs	r1, r3
 800e70a:	d110      	bne.n	800e72e <_dtoa_r+0xa7e>
 800e70c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e710:	d029      	beq.n	800e766 <_dtoa_r+0xab6>
 800e712:	9b05      	ldr	r3, [sp, #20]
 800e714:	2b00      	cmp	r3, #0
 800e716:	dd02      	ble.n	800e71e <_dtoa_r+0xa6e>
 800e718:	9b02      	ldr	r3, [sp, #8]
 800e71a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e71e:	9b01      	ldr	r3, [sp, #4]
 800e720:	f883 9000 	strb.w	r9, [r3]
 800e724:	e774      	b.n	800e610 <_dtoa_r+0x960>
 800e726:	4638      	mov	r0, r7
 800e728:	e7ba      	b.n	800e6a0 <_dtoa_r+0x9f0>
 800e72a:	2201      	movs	r2, #1
 800e72c:	e7e1      	b.n	800e6f2 <_dtoa_r+0xa42>
 800e72e:	9b05      	ldr	r3, [sp, #20]
 800e730:	2b00      	cmp	r3, #0
 800e732:	db04      	blt.n	800e73e <_dtoa_r+0xa8e>
 800e734:	9907      	ldr	r1, [sp, #28]
 800e736:	430b      	orrs	r3, r1
 800e738:	9906      	ldr	r1, [sp, #24]
 800e73a:	430b      	orrs	r3, r1
 800e73c:	d120      	bne.n	800e780 <_dtoa_r+0xad0>
 800e73e:	2a00      	cmp	r2, #0
 800e740:	dded      	ble.n	800e71e <_dtoa_r+0xa6e>
 800e742:	4651      	mov	r1, sl
 800e744:	2201      	movs	r2, #1
 800e746:	4620      	mov	r0, r4
 800e748:	f001 fa58 	bl	800fbfc <__lshift>
 800e74c:	4631      	mov	r1, r6
 800e74e:	4682      	mov	sl, r0
 800e750:	f001 fac0 	bl	800fcd4 <__mcmp>
 800e754:	2800      	cmp	r0, #0
 800e756:	dc03      	bgt.n	800e760 <_dtoa_r+0xab0>
 800e758:	d1e1      	bne.n	800e71e <_dtoa_r+0xa6e>
 800e75a:	f019 0f01 	tst.w	r9, #1
 800e75e:	d0de      	beq.n	800e71e <_dtoa_r+0xa6e>
 800e760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e764:	d1d8      	bne.n	800e718 <_dtoa_r+0xa68>
 800e766:	9a01      	ldr	r2, [sp, #4]
 800e768:	2339      	movs	r3, #57	; 0x39
 800e76a:	7013      	strb	r3, [r2, #0]
 800e76c:	462b      	mov	r3, r5
 800e76e:	461d      	mov	r5, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e776:	2a39      	cmp	r2, #57	; 0x39
 800e778:	d06c      	beq.n	800e854 <_dtoa_r+0xba4>
 800e77a:	3201      	adds	r2, #1
 800e77c:	701a      	strb	r2, [r3, #0]
 800e77e:	e747      	b.n	800e610 <_dtoa_r+0x960>
 800e780:	2a00      	cmp	r2, #0
 800e782:	dd07      	ble.n	800e794 <_dtoa_r+0xae4>
 800e784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e788:	d0ed      	beq.n	800e766 <_dtoa_r+0xab6>
 800e78a:	9a01      	ldr	r2, [sp, #4]
 800e78c:	f109 0301 	add.w	r3, r9, #1
 800e790:	7013      	strb	r3, [r2, #0]
 800e792:	e73d      	b.n	800e610 <_dtoa_r+0x960>
 800e794:	9b04      	ldr	r3, [sp, #16]
 800e796:	9a08      	ldr	r2, [sp, #32]
 800e798:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d043      	beq.n	800e828 <_dtoa_r+0xb78>
 800e7a0:	4651      	mov	r1, sl
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	220a      	movs	r2, #10
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f001 f87a 	bl	800f8a0 <__multadd>
 800e7ac:	45b8      	cmp	r8, r7
 800e7ae:	4682      	mov	sl, r0
 800e7b0:	f04f 0300 	mov.w	r3, #0
 800e7b4:	f04f 020a 	mov.w	r2, #10
 800e7b8:	4641      	mov	r1, r8
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	d107      	bne.n	800e7ce <_dtoa_r+0xb1e>
 800e7be:	f001 f86f 	bl	800f8a0 <__multadd>
 800e7c2:	4680      	mov	r8, r0
 800e7c4:	4607      	mov	r7, r0
 800e7c6:	9b04      	ldr	r3, [sp, #16]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	9304      	str	r3, [sp, #16]
 800e7cc:	e775      	b.n	800e6ba <_dtoa_r+0xa0a>
 800e7ce:	f001 f867 	bl	800f8a0 <__multadd>
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	220a      	movs	r2, #10
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f001 f860 	bl	800f8a0 <__multadd>
 800e7e0:	4607      	mov	r7, r0
 800e7e2:	e7f0      	b.n	800e7c6 <_dtoa_r+0xb16>
 800e7e4:	9b04      	ldr	r3, [sp, #16]
 800e7e6:	9301      	str	r3, [sp, #4]
 800e7e8:	9d00      	ldr	r5, [sp, #0]
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	4650      	mov	r0, sl
 800e7ee:	f7ff f9d5 	bl	800db9c <quorem>
 800e7f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e7f6:	9b00      	ldr	r3, [sp, #0]
 800e7f8:	f805 9b01 	strb.w	r9, [r5], #1
 800e7fc:	1aea      	subs	r2, r5, r3
 800e7fe:	9b01      	ldr	r3, [sp, #4]
 800e800:	4293      	cmp	r3, r2
 800e802:	dd07      	ble.n	800e814 <_dtoa_r+0xb64>
 800e804:	4651      	mov	r1, sl
 800e806:	2300      	movs	r3, #0
 800e808:	220a      	movs	r2, #10
 800e80a:	4620      	mov	r0, r4
 800e80c:	f001 f848 	bl	800f8a0 <__multadd>
 800e810:	4682      	mov	sl, r0
 800e812:	e7ea      	b.n	800e7ea <_dtoa_r+0xb3a>
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	bfc8      	it	gt
 800e81a:	461d      	movgt	r5, r3
 800e81c:	9b00      	ldr	r3, [sp, #0]
 800e81e:	bfd8      	it	le
 800e820:	2501      	movle	r5, #1
 800e822:	441d      	add	r5, r3
 800e824:	f04f 0800 	mov.w	r8, #0
 800e828:	4651      	mov	r1, sl
 800e82a:	2201      	movs	r2, #1
 800e82c:	4620      	mov	r0, r4
 800e82e:	f001 f9e5 	bl	800fbfc <__lshift>
 800e832:	4631      	mov	r1, r6
 800e834:	4682      	mov	sl, r0
 800e836:	f001 fa4d 	bl	800fcd4 <__mcmp>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	dc96      	bgt.n	800e76c <_dtoa_r+0xabc>
 800e83e:	d102      	bne.n	800e846 <_dtoa_r+0xb96>
 800e840:	f019 0f01 	tst.w	r9, #1
 800e844:	d192      	bne.n	800e76c <_dtoa_r+0xabc>
 800e846:	462b      	mov	r3, r5
 800e848:	461d      	mov	r5, r3
 800e84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e84e:	2a30      	cmp	r2, #48	; 0x30
 800e850:	d0fa      	beq.n	800e848 <_dtoa_r+0xb98>
 800e852:	e6dd      	b.n	800e610 <_dtoa_r+0x960>
 800e854:	9a00      	ldr	r2, [sp, #0]
 800e856:	429a      	cmp	r2, r3
 800e858:	d189      	bne.n	800e76e <_dtoa_r+0xabe>
 800e85a:	f10b 0b01 	add.w	fp, fp, #1
 800e85e:	2331      	movs	r3, #49	; 0x31
 800e860:	e796      	b.n	800e790 <_dtoa_r+0xae0>
 800e862:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <_dtoa_r+0xbdc>)
 800e864:	f7ff ba99 	b.w	800dd9a <_dtoa_r+0xea>
 800e868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f47f aa6d 	bne.w	800dd4a <_dtoa_r+0x9a>
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <_dtoa_r+0xbe0>)
 800e872:	f7ff ba92 	b.w	800dd9a <_dtoa_r+0xea>
 800e876:	9b01      	ldr	r3, [sp, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	dcb5      	bgt.n	800e7e8 <_dtoa_r+0xb38>
 800e87c:	9b07      	ldr	r3, [sp, #28]
 800e87e:	2b02      	cmp	r3, #2
 800e880:	f73f aeb1 	bgt.w	800e5e6 <_dtoa_r+0x936>
 800e884:	e7b0      	b.n	800e7e8 <_dtoa_r+0xb38>
 800e886:	bf00      	nop
 800e888:	0801578d 	.word	0x0801578d
 800e88c:	080157c5 	.word	0x080157c5
 800e890:	08015728 	.word	0x08015728

0800e894 <_free_r>:
 800e894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e896:	2900      	cmp	r1, #0
 800e898:	d044      	beq.n	800e924 <_free_r+0x90>
 800e89a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e89e:	9001      	str	r0, [sp, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e8a6:	bfb8      	it	lt
 800e8a8:	18e4      	addlt	r4, r4, r3
 800e8aa:	f000 ff8b 	bl	800f7c4 <__malloc_lock>
 800e8ae:	4a1e      	ldr	r2, [pc, #120]	; (800e928 <_free_r+0x94>)
 800e8b0:	9801      	ldr	r0, [sp, #4]
 800e8b2:	6813      	ldr	r3, [r2, #0]
 800e8b4:	b933      	cbnz	r3, 800e8c4 <_free_r+0x30>
 800e8b6:	6063      	str	r3, [r4, #4]
 800e8b8:	6014      	str	r4, [r2, #0]
 800e8ba:	b003      	add	sp, #12
 800e8bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8c0:	f000 bf86 	b.w	800f7d0 <__malloc_unlock>
 800e8c4:	42a3      	cmp	r3, r4
 800e8c6:	d908      	bls.n	800e8da <_free_r+0x46>
 800e8c8:	6825      	ldr	r5, [r4, #0]
 800e8ca:	1961      	adds	r1, r4, r5
 800e8cc:	428b      	cmp	r3, r1
 800e8ce:	bf01      	itttt	eq
 800e8d0:	6819      	ldreq	r1, [r3, #0]
 800e8d2:	685b      	ldreq	r3, [r3, #4]
 800e8d4:	1949      	addeq	r1, r1, r5
 800e8d6:	6021      	streq	r1, [r4, #0]
 800e8d8:	e7ed      	b.n	800e8b6 <_free_r+0x22>
 800e8da:	461a      	mov	r2, r3
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	b10b      	cbz	r3, 800e8e4 <_free_r+0x50>
 800e8e0:	42a3      	cmp	r3, r4
 800e8e2:	d9fa      	bls.n	800e8da <_free_r+0x46>
 800e8e4:	6811      	ldr	r1, [r2, #0]
 800e8e6:	1855      	adds	r5, r2, r1
 800e8e8:	42a5      	cmp	r5, r4
 800e8ea:	d10b      	bne.n	800e904 <_free_r+0x70>
 800e8ec:	6824      	ldr	r4, [r4, #0]
 800e8ee:	4421      	add	r1, r4
 800e8f0:	1854      	adds	r4, r2, r1
 800e8f2:	42a3      	cmp	r3, r4
 800e8f4:	6011      	str	r1, [r2, #0]
 800e8f6:	d1e0      	bne.n	800e8ba <_free_r+0x26>
 800e8f8:	681c      	ldr	r4, [r3, #0]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	6053      	str	r3, [r2, #4]
 800e8fe:	440c      	add	r4, r1
 800e900:	6014      	str	r4, [r2, #0]
 800e902:	e7da      	b.n	800e8ba <_free_r+0x26>
 800e904:	d902      	bls.n	800e90c <_free_r+0x78>
 800e906:	230c      	movs	r3, #12
 800e908:	6003      	str	r3, [r0, #0]
 800e90a:	e7d6      	b.n	800e8ba <_free_r+0x26>
 800e90c:	6825      	ldr	r5, [r4, #0]
 800e90e:	1961      	adds	r1, r4, r5
 800e910:	428b      	cmp	r3, r1
 800e912:	bf04      	itt	eq
 800e914:	6819      	ldreq	r1, [r3, #0]
 800e916:	685b      	ldreq	r3, [r3, #4]
 800e918:	6063      	str	r3, [r4, #4]
 800e91a:	bf04      	itt	eq
 800e91c:	1949      	addeq	r1, r1, r5
 800e91e:	6021      	streq	r1, [r4, #0]
 800e920:	6054      	str	r4, [r2, #4]
 800e922:	e7ca      	b.n	800e8ba <_free_r+0x26>
 800e924:	b003      	add	sp, #12
 800e926:	bd30      	pop	{r4, r5, pc}
 800e928:	20009ac4 	.word	0x20009ac4

0800e92c <__ssputs_r>:
 800e92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e930:	688e      	ldr	r6, [r1, #8]
 800e932:	461f      	mov	r7, r3
 800e934:	42be      	cmp	r6, r7
 800e936:	680b      	ldr	r3, [r1, #0]
 800e938:	4682      	mov	sl, r0
 800e93a:	460c      	mov	r4, r1
 800e93c:	4690      	mov	r8, r2
 800e93e:	d82c      	bhi.n	800e99a <__ssputs_r+0x6e>
 800e940:	898a      	ldrh	r2, [r1, #12]
 800e942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e946:	d026      	beq.n	800e996 <__ssputs_r+0x6a>
 800e948:	6965      	ldr	r5, [r4, #20]
 800e94a:	6909      	ldr	r1, [r1, #16]
 800e94c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e950:	eba3 0901 	sub.w	r9, r3, r1
 800e954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e958:	1c7b      	adds	r3, r7, #1
 800e95a:	444b      	add	r3, r9
 800e95c:	106d      	asrs	r5, r5, #1
 800e95e:	429d      	cmp	r5, r3
 800e960:	bf38      	it	cc
 800e962:	461d      	movcc	r5, r3
 800e964:	0553      	lsls	r3, r2, #21
 800e966:	d527      	bpl.n	800e9b8 <__ssputs_r+0x8c>
 800e968:	4629      	mov	r1, r5
 800e96a:	f000 fc75 	bl	800f258 <_malloc_r>
 800e96e:	4606      	mov	r6, r0
 800e970:	b360      	cbz	r0, 800e9cc <__ssputs_r+0xa0>
 800e972:	6921      	ldr	r1, [r4, #16]
 800e974:	464a      	mov	r2, r9
 800e976:	f7ff f8e4 	bl	800db42 <memcpy>
 800e97a:	89a3      	ldrh	r3, [r4, #12]
 800e97c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e984:	81a3      	strh	r3, [r4, #12]
 800e986:	6126      	str	r6, [r4, #16]
 800e988:	6165      	str	r5, [r4, #20]
 800e98a:	444e      	add	r6, r9
 800e98c:	eba5 0509 	sub.w	r5, r5, r9
 800e990:	6026      	str	r6, [r4, #0]
 800e992:	60a5      	str	r5, [r4, #8]
 800e994:	463e      	mov	r6, r7
 800e996:	42be      	cmp	r6, r7
 800e998:	d900      	bls.n	800e99c <__ssputs_r+0x70>
 800e99a:	463e      	mov	r6, r7
 800e99c:	6820      	ldr	r0, [r4, #0]
 800e99e:	4632      	mov	r2, r6
 800e9a0:	4641      	mov	r1, r8
 800e9a2:	f001 fc7f 	bl	80102a4 <memmove>
 800e9a6:	68a3      	ldr	r3, [r4, #8]
 800e9a8:	1b9b      	subs	r3, r3, r6
 800e9aa:	60a3      	str	r3, [r4, #8]
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	4433      	add	r3, r6
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b8:	462a      	mov	r2, r5
 800e9ba:	f001 fad7 	bl	800ff6c <_realloc_r>
 800e9be:	4606      	mov	r6, r0
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d1e0      	bne.n	800e986 <__ssputs_r+0x5a>
 800e9c4:	6921      	ldr	r1, [r4, #16]
 800e9c6:	4650      	mov	r0, sl
 800e9c8:	f7ff ff64 	bl	800e894 <_free_r>
 800e9cc:	230c      	movs	r3, #12
 800e9ce:	f8ca 3000 	str.w	r3, [sl]
 800e9d2:	89a3      	ldrh	r3, [r4, #12]
 800e9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9d8:	81a3      	strh	r3, [r4, #12]
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9de:	e7e9      	b.n	800e9b4 <__ssputs_r+0x88>

0800e9e0 <_svfiprintf_r>:
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	4698      	mov	r8, r3
 800e9e6:	898b      	ldrh	r3, [r1, #12]
 800e9e8:	061b      	lsls	r3, r3, #24
 800e9ea:	b09d      	sub	sp, #116	; 0x74
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	4614      	mov	r4, r2
 800e9f2:	d50e      	bpl.n	800ea12 <_svfiprintf_r+0x32>
 800e9f4:	690b      	ldr	r3, [r1, #16]
 800e9f6:	b963      	cbnz	r3, 800ea12 <_svfiprintf_r+0x32>
 800e9f8:	2140      	movs	r1, #64	; 0x40
 800e9fa:	f000 fc2d 	bl	800f258 <_malloc_r>
 800e9fe:	6028      	str	r0, [r5, #0]
 800ea00:	6128      	str	r0, [r5, #16]
 800ea02:	b920      	cbnz	r0, 800ea0e <_svfiprintf_r+0x2e>
 800ea04:	230c      	movs	r3, #12
 800ea06:	603b      	str	r3, [r7, #0]
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea0c:	e0d0      	b.n	800ebb0 <_svfiprintf_r+0x1d0>
 800ea0e:	2340      	movs	r3, #64	; 0x40
 800ea10:	616b      	str	r3, [r5, #20]
 800ea12:	2300      	movs	r3, #0
 800ea14:	9309      	str	r3, [sp, #36]	; 0x24
 800ea16:	2320      	movs	r3, #32
 800ea18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea20:	2330      	movs	r3, #48	; 0x30
 800ea22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ebc8 <_svfiprintf_r+0x1e8>
 800ea26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea2a:	f04f 0901 	mov.w	r9, #1
 800ea2e:	4623      	mov	r3, r4
 800ea30:	469a      	mov	sl, r3
 800ea32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea36:	b10a      	cbz	r2, 800ea3c <_svfiprintf_r+0x5c>
 800ea38:	2a25      	cmp	r2, #37	; 0x25
 800ea3a:	d1f9      	bne.n	800ea30 <_svfiprintf_r+0x50>
 800ea3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea40:	d00b      	beq.n	800ea5a <_svfiprintf_r+0x7a>
 800ea42:	465b      	mov	r3, fp
 800ea44:	4622      	mov	r2, r4
 800ea46:	4629      	mov	r1, r5
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7ff ff6f 	bl	800e92c <__ssputs_r>
 800ea4e:	3001      	adds	r0, #1
 800ea50:	f000 80a9 	beq.w	800eba6 <_svfiprintf_r+0x1c6>
 800ea54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea56:	445a      	add	r2, fp
 800ea58:	9209      	str	r2, [sp, #36]	; 0x24
 800ea5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 80a1 	beq.w	800eba6 <_svfiprintf_r+0x1c6>
 800ea64:	2300      	movs	r3, #0
 800ea66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea6e:	f10a 0a01 	add.w	sl, sl, #1
 800ea72:	9304      	str	r3, [sp, #16]
 800ea74:	9307      	str	r3, [sp, #28]
 800ea76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea7c:	4654      	mov	r4, sl
 800ea7e:	2205      	movs	r2, #5
 800ea80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea84:	4850      	ldr	r0, [pc, #320]	; (800ebc8 <_svfiprintf_r+0x1e8>)
 800ea86:	f7f1 fbc3 	bl	8000210 <memchr>
 800ea8a:	9a04      	ldr	r2, [sp, #16]
 800ea8c:	b9d8      	cbnz	r0, 800eac6 <_svfiprintf_r+0xe6>
 800ea8e:	06d0      	lsls	r0, r2, #27
 800ea90:	bf44      	itt	mi
 800ea92:	2320      	movmi	r3, #32
 800ea94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea98:	0711      	lsls	r1, r2, #28
 800ea9a:	bf44      	itt	mi
 800ea9c:	232b      	movmi	r3, #43	; 0x2b
 800ea9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaa2:	f89a 3000 	ldrb.w	r3, [sl]
 800eaa6:	2b2a      	cmp	r3, #42	; 0x2a
 800eaa8:	d015      	beq.n	800ead6 <_svfiprintf_r+0xf6>
 800eaaa:	9a07      	ldr	r2, [sp, #28]
 800eaac:	4654      	mov	r4, sl
 800eaae:	2000      	movs	r0, #0
 800eab0:	f04f 0c0a 	mov.w	ip, #10
 800eab4:	4621      	mov	r1, r4
 800eab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaba:	3b30      	subs	r3, #48	; 0x30
 800eabc:	2b09      	cmp	r3, #9
 800eabe:	d94d      	bls.n	800eb5c <_svfiprintf_r+0x17c>
 800eac0:	b1b0      	cbz	r0, 800eaf0 <_svfiprintf_r+0x110>
 800eac2:	9207      	str	r2, [sp, #28]
 800eac4:	e014      	b.n	800eaf0 <_svfiprintf_r+0x110>
 800eac6:	eba0 0308 	sub.w	r3, r0, r8
 800eaca:	fa09 f303 	lsl.w	r3, r9, r3
 800eace:	4313      	orrs	r3, r2
 800ead0:	9304      	str	r3, [sp, #16]
 800ead2:	46a2      	mov	sl, r4
 800ead4:	e7d2      	b.n	800ea7c <_svfiprintf_r+0x9c>
 800ead6:	9b03      	ldr	r3, [sp, #12]
 800ead8:	1d19      	adds	r1, r3, #4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	9103      	str	r1, [sp, #12]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	bfbb      	ittet	lt
 800eae2:	425b      	neglt	r3, r3
 800eae4:	f042 0202 	orrlt.w	r2, r2, #2
 800eae8:	9307      	strge	r3, [sp, #28]
 800eaea:	9307      	strlt	r3, [sp, #28]
 800eaec:	bfb8      	it	lt
 800eaee:	9204      	strlt	r2, [sp, #16]
 800eaf0:	7823      	ldrb	r3, [r4, #0]
 800eaf2:	2b2e      	cmp	r3, #46	; 0x2e
 800eaf4:	d10c      	bne.n	800eb10 <_svfiprintf_r+0x130>
 800eaf6:	7863      	ldrb	r3, [r4, #1]
 800eaf8:	2b2a      	cmp	r3, #42	; 0x2a
 800eafa:	d134      	bne.n	800eb66 <_svfiprintf_r+0x186>
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	1d1a      	adds	r2, r3, #4
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	9203      	str	r2, [sp, #12]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bfb8      	it	lt
 800eb08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb0c:	3402      	adds	r4, #2
 800eb0e:	9305      	str	r3, [sp, #20]
 800eb10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ebd8 <_svfiprintf_r+0x1f8>
 800eb14:	7821      	ldrb	r1, [r4, #0]
 800eb16:	2203      	movs	r2, #3
 800eb18:	4650      	mov	r0, sl
 800eb1a:	f7f1 fb79 	bl	8000210 <memchr>
 800eb1e:	b138      	cbz	r0, 800eb30 <_svfiprintf_r+0x150>
 800eb20:	9b04      	ldr	r3, [sp, #16]
 800eb22:	eba0 000a 	sub.w	r0, r0, sl
 800eb26:	2240      	movs	r2, #64	; 0x40
 800eb28:	4082      	lsls	r2, r0
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	3401      	adds	r4, #1
 800eb2e:	9304      	str	r3, [sp, #16]
 800eb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb34:	4825      	ldr	r0, [pc, #148]	; (800ebcc <_svfiprintf_r+0x1ec>)
 800eb36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb3a:	2206      	movs	r2, #6
 800eb3c:	f7f1 fb68 	bl	8000210 <memchr>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d038      	beq.n	800ebb6 <_svfiprintf_r+0x1d6>
 800eb44:	4b22      	ldr	r3, [pc, #136]	; (800ebd0 <_svfiprintf_r+0x1f0>)
 800eb46:	bb1b      	cbnz	r3, 800eb90 <_svfiprintf_r+0x1b0>
 800eb48:	9b03      	ldr	r3, [sp, #12]
 800eb4a:	3307      	adds	r3, #7
 800eb4c:	f023 0307 	bic.w	r3, r3, #7
 800eb50:	3308      	adds	r3, #8
 800eb52:	9303      	str	r3, [sp, #12]
 800eb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb56:	4433      	add	r3, r6
 800eb58:	9309      	str	r3, [sp, #36]	; 0x24
 800eb5a:	e768      	b.n	800ea2e <_svfiprintf_r+0x4e>
 800eb5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb60:	460c      	mov	r4, r1
 800eb62:	2001      	movs	r0, #1
 800eb64:	e7a6      	b.n	800eab4 <_svfiprintf_r+0xd4>
 800eb66:	2300      	movs	r3, #0
 800eb68:	3401      	adds	r4, #1
 800eb6a:	9305      	str	r3, [sp, #20]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	f04f 0c0a 	mov.w	ip, #10
 800eb72:	4620      	mov	r0, r4
 800eb74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb78:	3a30      	subs	r2, #48	; 0x30
 800eb7a:	2a09      	cmp	r2, #9
 800eb7c:	d903      	bls.n	800eb86 <_svfiprintf_r+0x1a6>
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d0c6      	beq.n	800eb10 <_svfiprintf_r+0x130>
 800eb82:	9105      	str	r1, [sp, #20]
 800eb84:	e7c4      	b.n	800eb10 <_svfiprintf_r+0x130>
 800eb86:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e7f0      	b.n	800eb72 <_svfiprintf_r+0x192>
 800eb90:	ab03      	add	r3, sp, #12
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	462a      	mov	r2, r5
 800eb96:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <_svfiprintf_r+0x1f4>)
 800eb98:	a904      	add	r1, sp, #16
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	f7fe f8bc 	bl	800cd18 <_printf_float>
 800eba0:	1c42      	adds	r2, r0, #1
 800eba2:	4606      	mov	r6, r0
 800eba4:	d1d6      	bne.n	800eb54 <_svfiprintf_r+0x174>
 800eba6:	89ab      	ldrh	r3, [r5, #12]
 800eba8:	065b      	lsls	r3, r3, #25
 800ebaa:	f53f af2d 	bmi.w	800ea08 <_svfiprintf_r+0x28>
 800ebae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebb0:	b01d      	add	sp, #116	; 0x74
 800ebb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb6:	ab03      	add	r3, sp, #12
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	462a      	mov	r2, r5
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <_svfiprintf_r+0x1f4>)
 800ebbe:	a904      	add	r1, sp, #16
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	f7fe fb4d 	bl	800d260 <_printf_i>
 800ebc6:	e7eb      	b.n	800eba0 <_svfiprintf_r+0x1c0>
 800ebc8:	0801579e 	.word	0x0801579e
 800ebcc:	080157a8 	.word	0x080157a8
 800ebd0:	0800cd19 	.word	0x0800cd19
 800ebd4:	0800e92d 	.word	0x0800e92d
 800ebd8:	080157a4 	.word	0x080157a4

0800ebdc <_sungetc_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	1c4b      	adds	r3, r1, #1
 800ebe0:	4614      	mov	r4, r2
 800ebe2:	d103      	bne.n	800ebec <_sungetc_r+0x10>
 800ebe4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ebe8:	4628      	mov	r0, r5
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	8993      	ldrh	r3, [r2, #12]
 800ebee:	f023 0320 	bic.w	r3, r3, #32
 800ebf2:	8193      	strh	r3, [r2, #12]
 800ebf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebf6:	6852      	ldr	r2, [r2, #4]
 800ebf8:	b2cd      	uxtb	r5, r1
 800ebfa:	b18b      	cbz	r3, 800ec20 <_sungetc_r+0x44>
 800ebfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	dd08      	ble.n	800ec14 <_sungetc_r+0x38>
 800ec02:	6823      	ldr	r3, [r4, #0]
 800ec04:	1e5a      	subs	r2, r3, #1
 800ec06:	6022      	str	r2, [r4, #0]
 800ec08:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ec0c:	6863      	ldr	r3, [r4, #4]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	6063      	str	r3, [r4, #4]
 800ec12:	e7e9      	b.n	800ebe8 <_sungetc_r+0xc>
 800ec14:	4621      	mov	r1, r4
 800ec16:	f001 f96f 	bl	800fef8 <__submore>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d0f1      	beq.n	800ec02 <_sungetc_r+0x26>
 800ec1e:	e7e1      	b.n	800ebe4 <_sungetc_r+0x8>
 800ec20:	6921      	ldr	r1, [r4, #16]
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	b151      	cbz	r1, 800ec3c <_sungetc_r+0x60>
 800ec26:	4299      	cmp	r1, r3
 800ec28:	d208      	bcs.n	800ec3c <_sungetc_r+0x60>
 800ec2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ec2e:	42a9      	cmp	r1, r5
 800ec30:	d104      	bne.n	800ec3c <_sungetc_r+0x60>
 800ec32:	3b01      	subs	r3, #1
 800ec34:	3201      	adds	r2, #1
 800ec36:	6023      	str	r3, [r4, #0]
 800ec38:	6062      	str	r2, [r4, #4]
 800ec3a:	e7d5      	b.n	800ebe8 <_sungetc_r+0xc>
 800ec3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ec40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec44:	6363      	str	r3, [r4, #52]	; 0x34
 800ec46:	2303      	movs	r3, #3
 800ec48:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec4a:	4623      	mov	r3, r4
 800ec4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	2301      	movs	r3, #1
 800ec54:	e7dc      	b.n	800ec10 <_sungetc_r+0x34>

0800ec56 <__ssrefill_r>:
 800ec56:	b510      	push	{r4, lr}
 800ec58:	460c      	mov	r4, r1
 800ec5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ec5c:	b169      	cbz	r1, 800ec7a <__ssrefill_r+0x24>
 800ec5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec62:	4299      	cmp	r1, r3
 800ec64:	d001      	beq.n	800ec6a <__ssrefill_r+0x14>
 800ec66:	f7ff fe15 	bl	800e894 <_free_r>
 800ec6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec6c:	6063      	str	r3, [r4, #4]
 800ec6e:	2000      	movs	r0, #0
 800ec70:	6360      	str	r0, [r4, #52]	; 0x34
 800ec72:	b113      	cbz	r3, 800ec7a <__ssrefill_r+0x24>
 800ec74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec76:	6023      	str	r3, [r4, #0]
 800ec78:	bd10      	pop	{r4, pc}
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	6023      	str	r3, [r4, #0]
 800ec7e:	2300      	movs	r3, #0
 800ec80:	6063      	str	r3, [r4, #4]
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	f043 0320 	orr.w	r3, r3, #32
 800ec88:	81a3      	strh	r3, [r4, #12]
 800ec8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec8e:	e7f3      	b.n	800ec78 <__ssrefill_r+0x22>

0800ec90 <__ssvfiscanf_r>:
 800ec90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec94:	460c      	mov	r4, r1
 800ec96:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800eca0:	49a6      	ldr	r1, [pc, #664]	; (800ef3c <__ssvfiscanf_r+0x2ac>)
 800eca2:	91a0      	str	r1, [sp, #640]	; 0x280
 800eca4:	f10d 0804 	add.w	r8, sp, #4
 800eca8:	49a5      	ldr	r1, [pc, #660]	; (800ef40 <__ssvfiscanf_r+0x2b0>)
 800ecaa:	4fa6      	ldr	r7, [pc, #664]	; (800ef44 <__ssvfiscanf_r+0x2b4>)
 800ecac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ef48 <__ssvfiscanf_r+0x2b8>
 800ecb0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ecb4:	4606      	mov	r6, r0
 800ecb6:	91a1      	str	r1, [sp, #644]	; 0x284
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	7813      	ldrb	r3, [r2, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 815a 	beq.w	800ef76 <__ssvfiscanf_r+0x2e6>
 800ecc2:	5cf9      	ldrb	r1, [r7, r3]
 800ecc4:	f011 0108 	ands.w	r1, r1, #8
 800ecc8:	f102 0501 	add.w	r5, r2, #1
 800eccc:	d019      	beq.n	800ed02 <__ssvfiscanf_r+0x72>
 800ecce:	6863      	ldr	r3, [r4, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dd0f      	ble.n	800ecf4 <__ssvfiscanf_r+0x64>
 800ecd4:	6823      	ldr	r3, [r4, #0]
 800ecd6:	781a      	ldrb	r2, [r3, #0]
 800ecd8:	5cba      	ldrb	r2, [r7, r2]
 800ecda:	0712      	lsls	r2, r2, #28
 800ecdc:	d401      	bmi.n	800ece2 <__ssvfiscanf_r+0x52>
 800ecde:	462a      	mov	r2, r5
 800ece0:	e7eb      	b.n	800ecba <__ssvfiscanf_r+0x2a>
 800ece2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ece4:	3201      	adds	r2, #1
 800ece6:	9245      	str	r2, [sp, #276]	; 0x114
 800ece8:	6862      	ldr	r2, [r4, #4]
 800ecea:	3301      	adds	r3, #1
 800ecec:	3a01      	subs	r2, #1
 800ecee:	6062      	str	r2, [r4, #4]
 800ecf0:	6023      	str	r3, [r4, #0]
 800ecf2:	e7ec      	b.n	800ecce <__ssvfiscanf_r+0x3e>
 800ecf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4798      	blx	r3
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d0e9      	beq.n	800ecd4 <__ssvfiscanf_r+0x44>
 800ed00:	e7ed      	b.n	800ecde <__ssvfiscanf_r+0x4e>
 800ed02:	2b25      	cmp	r3, #37	; 0x25
 800ed04:	d012      	beq.n	800ed2c <__ssvfiscanf_r+0x9c>
 800ed06:	469a      	mov	sl, r3
 800ed08:	6863      	ldr	r3, [r4, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f340 8091 	ble.w	800ee32 <__ssvfiscanf_r+0x1a2>
 800ed10:	6822      	ldr	r2, [r4, #0]
 800ed12:	7813      	ldrb	r3, [r2, #0]
 800ed14:	4553      	cmp	r3, sl
 800ed16:	f040 812e 	bne.w	800ef76 <__ssvfiscanf_r+0x2e6>
 800ed1a:	6863      	ldr	r3, [r4, #4]
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	6063      	str	r3, [r4, #4]
 800ed20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ed22:	3201      	adds	r2, #1
 800ed24:	3301      	adds	r3, #1
 800ed26:	6022      	str	r2, [r4, #0]
 800ed28:	9345      	str	r3, [sp, #276]	; 0x114
 800ed2a:	e7d8      	b.n	800ecde <__ssvfiscanf_r+0x4e>
 800ed2c:	9141      	str	r1, [sp, #260]	; 0x104
 800ed2e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ed30:	7853      	ldrb	r3, [r2, #1]
 800ed32:	2b2a      	cmp	r3, #42	; 0x2a
 800ed34:	bf02      	ittt	eq
 800ed36:	2310      	moveq	r3, #16
 800ed38:	1c95      	addeq	r5, r2, #2
 800ed3a:	9341      	streq	r3, [sp, #260]	; 0x104
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	46aa      	mov	sl, r5
 800ed40:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ed44:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ed48:	2b09      	cmp	r3, #9
 800ed4a:	d91c      	bls.n	800ed86 <__ssvfiscanf_r+0xf6>
 800ed4c:	487e      	ldr	r0, [pc, #504]	; (800ef48 <__ssvfiscanf_r+0x2b8>)
 800ed4e:	2203      	movs	r2, #3
 800ed50:	f7f1 fa5e 	bl	8000210 <memchr>
 800ed54:	b138      	cbz	r0, 800ed66 <__ssvfiscanf_r+0xd6>
 800ed56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ed58:	eba0 0009 	sub.w	r0, r0, r9
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4083      	lsls	r3, r0
 800ed60:	4313      	orrs	r3, r2
 800ed62:	9341      	str	r3, [sp, #260]	; 0x104
 800ed64:	4655      	mov	r5, sl
 800ed66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed6a:	2b78      	cmp	r3, #120	; 0x78
 800ed6c:	d806      	bhi.n	800ed7c <__ssvfiscanf_r+0xec>
 800ed6e:	2b57      	cmp	r3, #87	; 0x57
 800ed70:	d810      	bhi.n	800ed94 <__ssvfiscanf_r+0x104>
 800ed72:	2b25      	cmp	r3, #37	; 0x25
 800ed74:	d0c7      	beq.n	800ed06 <__ssvfiscanf_r+0x76>
 800ed76:	d857      	bhi.n	800ee28 <__ssvfiscanf_r+0x198>
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d065      	beq.n	800ee48 <__ssvfiscanf_r+0x1b8>
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ed80:	230a      	movs	r3, #10
 800ed82:	9342      	str	r3, [sp, #264]	; 0x108
 800ed84:	e076      	b.n	800ee74 <__ssvfiscanf_r+0x1e4>
 800ed86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ed88:	fb02 1103 	mla	r1, r2, r3, r1
 800ed8c:	3930      	subs	r1, #48	; 0x30
 800ed8e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ed90:	4655      	mov	r5, sl
 800ed92:	e7d4      	b.n	800ed3e <__ssvfiscanf_r+0xae>
 800ed94:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ed98:	2a20      	cmp	r2, #32
 800ed9a:	d8ef      	bhi.n	800ed7c <__ssvfiscanf_r+0xec>
 800ed9c:	a101      	add	r1, pc, #4	; (adr r1, 800eda4 <__ssvfiscanf_r+0x114>)
 800ed9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800ee57 	.word	0x0800ee57
 800eda8:	0800ed7d 	.word	0x0800ed7d
 800edac:	0800ed7d 	.word	0x0800ed7d
 800edb0:	0800eeb5 	.word	0x0800eeb5
 800edb4:	0800ed7d 	.word	0x0800ed7d
 800edb8:	0800ed7d 	.word	0x0800ed7d
 800edbc:	0800ed7d 	.word	0x0800ed7d
 800edc0:	0800ed7d 	.word	0x0800ed7d
 800edc4:	0800ed7d 	.word	0x0800ed7d
 800edc8:	0800ed7d 	.word	0x0800ed7d
 800edcc:	0800ed7d 	.word	0x0800ed7d
 800edd0:	0800eecb 	.word	0x0800eecb
 800edd4:	0800eeb1 	.word	0x0800eeb1
 800edd8:	0800ee2f 	.word	0x0800ee2f
 800eddc:	0800ee2f 	.word	0x0800ee2f
 800ede0:	0800ee2f 	.word	0x0800ee2f
 800ede4:	0800ed7d 	.word	0x0800ed7d
 800ede8:	0800ee6d 	.word	0x0800ee6d
 800edec:	0800ed7d 	.word	0x0800ed7d
 800edf0:	0800ed7d 	.word	0x0800ed7d
 800edf4:	0800ed7d 	.word	0x0800ed7d
 800edf8:	0800ed7d 	.word	0x0800ed7d
 800edfc:	0800eedb 	.word	0x0800eedb
 800ee00:	0800eea9 	.word	0x0800eea9
 800ee04:	0800ee4f 	.word	0x0800ee4f
 800ee08:	0800ed7d 	.word	0x0800ed7d
 800ee0c:	0800ed7d 	.word	0x0800ed7d
 800ee10:	0800eed7 	.word	0x0800eed7
 800ee14:	0800ed7d 	.word	0x0800ed7d
 800ee18:	0800eeb1 	.word	0x0800eeb1
 800ee1c:	0800ed7d 	.word	0x0800ed7d
 800ee20:	0800ed7d 	.word	0x0800ed7d
 800ee24:	0800ee57 	.word	0x0800ee57
 800ee28:	3b45      	subs	r3, #69	; 0x45
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d8a6      	bhi.n	800ed7c <__ssvfiscanf_r+0xec>
 800ee2e:	2305      	movs	r3, #5
 800ee30:	e01f      	b.n	800ee72 <__ssvfiscanf_r+0x1e2>
 800ee32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ee34:	4621      	mov	r1, r4
 800ee36:	4630      	mov	r0, r6
 800ee38:	4798      	blx	r3
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	f43f af68 	beq.w	800ed10 <__ssvfiscanf_r+0x80>
 800ee40:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ee42:	2800      	cmp	r0, #0
 800ee44:	f040 808d 	bne.w	800ef62 <__ssvfiscanf_r+0x2d2>
 800ee48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee4c:	e08f      	b.n	800ef6e <__ssvfiscanf_r+0x2de>
 800ee4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee50:	f042 0220 	orr.w	r2, r2, #32
 800ee54:	9241      	str	r2, [sp, #260]	; 0x104
 800ee56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee5c:	9241      	str	r2, [sp, #260]	; 0x104
 800ee5e:	2210      	movs	r2, #16
 800ee60:	2b6f      	cmp	r3, #111	; 0x6f
 800ee62:	9242      	str	r2, [sp, #264]	; 0x108
 800ee64:	bf34      	ite	cc
 800ee66:	2303      	movcc	r3, #3
 800ee68:	2304      	movcs	r3, #4
 800ee6a:	e002      	b.n	800ee72 <__ssvfiscanf_r+0x1e2>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9342      	str	r3, [sp, #264]	; 0x108
 800ee70:	2303      	movs	r3, #3
 800ee72:	9347      	str	r3, [sp, #284]	; 0x11c
 800ee74:	6863      	ldr	r3, [r4, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd3d      	ble.n	800eef6 <__ssvfiscanf_r+0x266>
 800ee7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ee7c:	0659      	lsls	r1, r3, #25
 800ee7e:	d404      	bmi.n	800ee8a <__ssvfiscanf_r+0x1fa>
 800ee80:	6823      	ldr	r3, [r4, #0]
 800ee82:	781a      	ldrb	r2, [r3, #0]
 800ee84:	5cba      	ldrb	r2, [r7, r2]
 800ee86:	0712      	lsls	r2, r2, #28
 800ee88:	d43c      	bmi.n	800ef04 <__ssvfiscanf_r+0x274>
 800ee8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	dc4b      	bgt.n	800ef28 <__ssvfiscanf_r+0x298>
 800ee90:	466b      	mov	r3, sp
 800ee92:	4622      	mov	r2, r4
 800ee94:	a941      	add	r1, sp, #260	; 0x104
 800ee96:	4630      	mov	r0, r6
 800ee98:	f000 fa5e 	bl	800f358 <_scanf_chars>
 800ee9c:	2801      	cmp	r0, #1
 800ee9e:	d06a      	beq.n	800ef76 <__ssvfiscanf_r+0x2e6>
 800eea0:	2802      	cmp	r0, #2
 800eea2:	f47f af1c 	bne.w	800ecde <__ssvfiscanf_r+0x4e>
 800eea6:	e7cb      	b.n	800ee40 <__ssvfiscanf_r+0x1b0>
 800eea8:	2308      	movs	r3, #8
 800eeaa:	9342      	str	r3, [sp, #264]	; 0x108
 800eeac:	2304      	movs	r3, #4
 800eeae:	e7e0      	b.n	800ee72 <__ssvfiscanf_r+0x1e2>
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	e7d5      	b.n	800ee60 <__ssvfiscanf_r+0x1d0>
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4640      	mov	r0, r8
 800eeb8:	f000 fb9c 	bl	800f5f4 <__sccl>
 800eebc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eec2:	9341      	str	r3, [sp, #260]	; 0x104
 800eec4:	4605      	mov	r5, r0
 800eec6:	2301      	movs	r3, #1
 800eec8:	e7d3      	b.n	800ee72 <__ssvfiscanf_r+0x1e2>
 800eeca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eed0:	9341      	str	r3, [sp, #260]	; 0x104
 800eed2:	2300      	movs	r3, #0
 800eed4:	e7cd      	b.n	800ee72 <__ssvfiscanf_r+0x1e2>
 800eed6:	2302      	movs	r3, #2
 800eed8:	e7cb      	b.n	800ee72 <__ssvfiscanf_r+0x1e2>
 800eeda:	9841      	ldr	r0, [sp, #260]	; 0x104
 800eedc:	06c3      	lsls	r3, r0, #27
 800eede:	f53f aefe 	bmi.w	800ecde <__ssvfiscanf_r+0x4e>
 800eee2:	9b00      	ldr	r3, [sp, #0]
 800eee4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eee6:	1d19      	adds	r1, r3, #4
 800eee8:	9100      	str	r1, [sp, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	07c0      	lsls	r0, r0, #31
 800eeee:	bf4c      	ite	mi
 800eef0:	801a      	strhmi	r2, [r3, #0]
 800eef2:	601a      	strpl	r2, [r3, #0]
 800eef4:	e6f3      	b.n	800ecde <__ssvfiscanf_r+0x4e>
 800eef6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eef8:	4621      	mov	r1, r4
 800eefa:	4630      	mov	r0, r6
 800eefc:	4798      	blx	r3
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d0bb      	beq.n	800ee7a <__ssvfiscanf_r+0x1ea>
 800ef02:	e79d      	b.n	800ee40 <__ssvfiscanf_r+0x1b0>
 800ef04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ef06:	3201      	adds	r2, #1
 800ef08:	9245      	str	r2, [sp, #276]	; 0x114
 800ef0a:	6862      	ldr	r2, [r4, #4]
 800ef0c:	3a01      	subs	r2, #1
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	6062      	str	r2, [r4, #4]
 800ef12:	dd02      	ble.n	800ef1a <__ssvfiscanf_r+0x28a>
 800ef14:	3301      	adds	r3, #1
 800ef16:	6023      	str	r3, [r4, #0]
 800ef18:	e7b2      	b.n	800ee80 <__ssvfiscanf_r+0x1f0>
 800ef1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4798      	blx	r3
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d0ac      	beq.n	800ee80 <__ssvfiscanf_r+0x1f0>
 800ef26:	e78b      	b.n	800ee40 <__ssvfiscanf_r+0x1b0>
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	dc0f      	bgt.n	800ef4c <__ssvfiscanf_r+0x2bc>
 800ef2c:	466b      	mov	r3, sp
 800ef2e:	4622      	mov	r2, r4
 800ef30:	a941      	add	r1, sp, #260	; 0x104
 800ef32:	4630      	mov	r0, r6
 800ef34:	f000 fa6a 	bl	800f40c <_scanf_i>
 800ef38:	e7b0      	b.n	800ee9c <__ssvfiscanf_r+0x20c>
 800ef3a:	bf00      	nop
 800ef3c:	0800ebdd 	.word	0x0800ebdd
 800ef40:	0800ec57 	.word	0x0800ec57
 800ef44:	080155ec 	.word	0x080155ec
 800ef48:	080157a4 	.word	0x080157a4
 800ef4c:	4b0b      	ldr	r3, [pc, #44]	; (800ef7c <__ssvfiscanf_r+0x2ec>)
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f43f aec5 	beq.w	800ecde <__ssvfiscanf_r+0x4e>
 800ef54:	466b      	mov	r3, sp
 800ef56:	4622      	mov	r2, r4
 800ef58:	a941      	add	r1, sp, #260	; 0x104
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f3af 8000 	nop.w
 800ef60:	e79c      	b.n	800ee9c <__ssvfiscanf_r+0x20c>
 800ef62:	89a3      	ldrh	r3, [r4, #12]
 800ef64:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ef68:	bf18      	it	ne
 800ef6a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ef6e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ef72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef76:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ef78:	e7f9      	b.n	800ef6e <__ssvfiscanf_r+0x2de>
 800ef7a:	bf00      	nop
 800ef7c:	00000000 	.word	0x00000000

0800ef80 <__sfputc_r>:
 800ef80:	6893      	ldr	r3, [r2, #8]
 800ef82:	3b01      	subs	r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	b410      	push	{r4}
 800ef88:	6093      	str	r3, [r2, #8]
 800ef8a:	da08      	bge.n	800ef9e <__sfputc_r+0x1e>
 800ef8c:	6994      	ldr	r4, [r2, #24]
 800ef8e:	42a3      	cmp	r3, r4
 800ef90:	db01      	blt.n	800ef96 <__sfputc_r+0x16>
 800ef92:	290a      	cmp	r1, #10
 800ef94:	d103      	bne.n	800ef9e <__sfputc_r+0x1e>
 800ef96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef9a:	f001 b88b 	b.w	80100b4 <__swbuf_r>
 800ef9e:	6813      	ldr	r3, [r2, #0]
 800efa0:	1c58      	adds	r0, r3, #1
 800efa2:	6010      	str	r0, [r2, #0]
 800efa4:	7019      	strb	r1, [r3, #0]
 800efa6:	4608      	mov	r0, r1
 800efa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efac:	4770      	bx	lr

0800efae <__sfputs_r>:
 800efae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb0:	4606      	mov	r6, r0
 800efb2:	460f      	mov	r7, r1
 800efb4:	4614      	mov	r4, r2
 800efb6:	18d5      	adds	r5, r2, r3
 800efb8:	42ac      	cmp	r4, r5
 800efba:	d101      	bne.n	800efc0 <__sfputs_r+0x12>
 800efbc:	2000      	movs	r0, #0
 800efbe:	e007      	b.n	800efd0 <__sfputs_r+0x22>
 800efc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc4:	463a      	mov	r2, r7
 800efc6:	4630      	mov	r0, r6
 800efc8:	f7ff ffda 	bl	800ef80 <__sfputc_r>
 800efcc:	1c43      	adds	r3, r0, #1
 800efce:	d1f3      	bne.n	800efb8 <__sfputs_r+0xa>
 800efd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efd4 <_vfiprintf_r>:
 800efd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd8:	460d      	mov	r5, r1
 800efda:	b09d      	sub	sp, #116	; 0x74
 800efdc:	4614      	mov	r4, r2
 800efde:	4698      	mov	r8, r3
 800efe0:	4606      	mov	r6, r0
 800efe2:	b118      	cbz	r0, 800efec <_vfiprintf_r+0x18>
 800efe4:	6a03      	ldr	r3, [r0, #32]
 800efe6:	b90b      	cbnz	r3, 800efec <_vfiprintf_r+0x18>
 800efe8:	f7fe fbae 	bl	800d748 <__sinit>
 800efec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efee:	07d9      	lsls	r1, r3, #31
 800eff0:	d405      	bmi.n	800effe <_vfiprintf_r+0x2a>
 800eff2:	89ab      	ldrh	r3, [r5, #12]
 800eff4:	059a      	lsls	r2, r3, #22
 800eff6:	d402      	bmi.n	800effe <_vfiprintf_r+0x2a>
 800eff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800effa:	f7fe fda0 	bl	800db3e <__retarget_lock_acquire_recursive>
 800effe:	89ab      	ldrh	r3, [r5, #12]
 800f000:	071b      	lsls	r3, r3, #28
 800f002:	d501      	bpl.n	800f008 <_vfiprintf_r+0x34>
 800f004:	692b      	ldr	r3, [r5, #16]
 800f006:	b99b      	cbnz	r3, 800f030 <_vfiprintf_r+0x5c>
 800f008:	4629      	mov	r1, r5
 800f00a:	4630      	mov	r0, r6
 800f00c:	f001 f890 	bl	8010130 <__swsetup_r>
 800f010:	b170      	cbz	r0, 800f030 <_vfiprintf_r+0x5c>
 800f012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f014:	07dc      	lsls	r4, r3, #31
 800f016:	d504      	bpl.n	800f022 <_vfiprintf_r+0x4e>
 800f018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f01c:	b01d      	add	sp, #116	; 0x74
 800f01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f022:	89ab      	ldrh	r3, [r5, #12]
 800f024:	0598      	lsls	r0, r3, #22
 800f026:	d4f7      	bmi.n	800f018 <_vfiprintf_r+0x44>
 800f028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f02a:	f7fe fd89 	bl	800db40 <__retarget_lock_release_recursive>
 800f02e:	e7f3      	b.n	800f018 <_vfiprintf_r+0x44>
 800f030:	2300      	movs	r3, #0
 800f032:	9309      	str	r3, [sp, #36]	; 0x24
 800f034:	2320      	movs	r3, #32
 800f036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f03e:	2330      	movs	r3, #48	; 0x30
 800f040:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f1f4 <_vfiprintf_r+0x220>
 800f044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f048:	f04f 0901 	mov.w	r9, #1
 800f04c:	4623      	mov	r3, r4
 800f04e:	469a      	mov	sl, r3
 800f050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f054:	b10a      	cbz	r2, 800f05a <_vfiprintf_r+0x86>
 800f056:	2a25      	cmp	r2, #37	; 0x25
 800f058:	d1f9      	bne.n	800f04e <_vfiprintf_r+0x7a>
 800f05a:	ebba 0b04 	subs.w	fp, sl, r4
 800f05e:	d00b      	beq.n	800f078 <_vfiprintf_r+0xa4>
 800f060:	465b      	mov	r3, fp
 800f062:	4622      	mov	r2, r4
 800f064:	4629      	mov	r1, r5
 800f066:	4630      	mov	r0, r6
 800f068:	f7ff ffa1 	bl	800efae <__sfputs_r>
 800f06c:	3001      	adds	r0, #1
 800f06e:	f000 80a9 	beq.w	800f1c4 <_vfiprintf_r+0x1f0>
 800f072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f074:	445a      	add	r2, fp
 800f076:	9209      	str	r2, [sp, #36]	; 0x24
 800f078:	f89a 3000 	ldrb.w	r3, [sl]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f000 80a1 	beq.w	800f1c4 <_vfiprintf_r+0x1f0>
 800f082:	2300      	movs	r3, #0
 800f084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f08c:	f10a 0a01 	add.w	sl, sl, #1
 800f090:	9304      	str	r3, [sp, #16]
 800f092:	9307      	str	r3, [sp, #28]
 800f094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f098:	931a      	str	r3, [sp, #104]	; 0x68
 800f09a:	4654      	mov	r4, sl
 800f09c:	2205      	movs	r2, #5
 800f09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0a2:	4854      	ldr	r0, [pc, #336]	; (800f1f4 <_vfiprintf_r+0x220>)
 800f0a4:	f7f1 f8b4 	bl	8000210 <memchr>
 800f0a8:	9a04      	ldr	r2, [sp, #16]
 800f0aa:	b9d8      	cbnz	r0, 800f0e4 <_vfiprintf_r+0x110>
 800f0ac:	06d1      	lsls	r1, r2, #27
 800f0ae:	bf44      	itt	mi
 800f0b0:	2320      	movmi	r3, #32
 800f0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b6:	0713      	lsls	r3, r2, #28
 800f0b8:	bf44      	itt	mi
 800f0ba:	232b      	movmi	r3, #43	; 0x2b
 800f0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f0c6:	d015      	beq.n	800f0f4 <_vfiprintf_r+0x120>
 800f0c8:	9a07      	ldr	r2, [sp, #28]
 800f0ca:	4654      	mov	r4, sl
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	f04f 0c0a 	mov.w	ip, #10
 800f0d2:	4621      	mov	r1, r4
 800f0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d8:	3b30      	subs	r3, #48	; 0x30
 800f0da:	2b09      	cmp	r3, #9
 800f0dc:	d94d      	bls.n	800f17a <_vfiprintf_r+0x1a6>
 800f0de:	b1b0      	cbz	r0, 800f10e <_vfiprintf_r+0x13a>
 800f0e0:	9207      	str	r2, [sp, #28]
 800f0e2:	e014      	b.n	800f10e <_vfiprintf_r+0x13a>
 800f0e4:	eba0 0308 	sub.w	r3, r0, r8
 800f0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	9304      	str	r3, [sp, #16]
 800f0f0:	46a2      	mov	sl, r4
 800f0f2:	e7d2      	b.n	800f09a <_vfiprintf_r+0xc6>
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	1d19      	adds	r1, r3, #4
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	9103      	str	r1, [sp, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	bfbb      	ittet	lt
 800f100:	425b      	neglt	r3, r3
 800f102:	f042 0202 	orrlt.w	r2, r2, #2
 800f106:	9307      	strge	r3, [sp, #28]
 800f108:	9307      	strlt	r3, [sp, #28]
 800f10a:	bfb8      	it	lt
 800f10c:	9204      	strlt	r2, [sp, #16]
 800f10e:	7823      	ldrb	r3, [r4, #0]
 800f110:	2b2e      	cmp	r3, #46	; 0x2e
 800f112:	d10c      	bne.n	800f12e <_vfiprintf_r+0x15a>
 800f114:	7863      	ldrb	r3, [r4, #1]
 800f116:	2b2a      	cmp	r3, #42	; 0x2a
 800f118:	d134      	bne.n	800f184 <_vfiprintf_r+0x1b0>
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	1d1a      	adds	r2, r3, #4
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	9203      	str	r2, [sp, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	bfb8      	it	lt
 800f126:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f12a:	3402      	adds	r4, #2
 800f12c:	9305      	str	r3, [sp, #20]
 800f12e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f204 <_vfiprintf_r+0x230>
 800f132:	7821      	ldrb	r1, [r4, #0]
 800f134:	2203      	movs	r2, #3
 800f136:	4650      	mov	r0, sl
 800f138:	f7f1 f86a 	bl	8000210 <memchr>
 800f13c:	b138      	cbz	r0, 800f14e <_vfiprintf_r+0x17a>
 800f13e:	9b04      	ldr	r3, [sp, #16]
 800f140:	eba0 000a 	sub.w	r0, r0, sl
 800f144:	2240      	movs	r2, #64	; 0x40
 800f146:	4082      	lsls	r2, r0
 800f148:	4313      	orrs	r3, r2
 800f14a:	3401      	adds	r4, #1
 800f14c:	9304      	str	r3, [sp, #16]
 800f14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f152:	4829      	ldr	r0, [pc, #164]	; (800f1f8 <_vfiprintf_r+0x224>)
 800f154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f158:	2206      	movs	r2, #6
 800f15a:	f7f1 f859 	bl	8000210 <memchr>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d03f      	beq.n	800f1e2 <_vfiprintf_r+0x20e>
 800f162:	4b26      	ldr	r3, [pc, #152]	; (800f1fc <_vfiprintf_r+0x228>)
 800f164:	bb1b      	cbnz	r3, 800f1ae <_vfiprintf_r+0x1da>
 800f166:	9b03      	ldr	r3, [sp, #12]
 800f168:	3307      	adds	r3, #7
 800f16a:	f023 0307 	bic.w	r3, r3, #7
 800f16e:	3308      	adds	r3, #8
 800f170:	9303      	str	r3, [sp, #12]
 800f172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f174:	443b      	add	r3, r7
 800f176:	9309      	str	r3, [sp, #36]	; 0x24
 800f178:	e768      	b.n	800f04c <_vfiprintf_r+0x78>
 800f17a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f17e:	460c      	mov	r4, r1
 800f180:	2001      	movs	r0, #1
 800f182:	e7a6      	b.n	800f0d2 <_vfiprintf_r+0xfe>
 800f184:	2300      	movs	r3, #0
 800f186:	3401      	adds	r4, #1
 800f188:	9305      	str	r3, [sp, #20]
 800f18a:	4619      	mov	r1, r3
 800f18c:	f04f 0c0a 	mov.w	ip, #10
 800f190:	4620      	mov	r0, r4
 800f192:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f196:	3a30      	subs	r2, #48	; 0x30
 800f198:	2a09      	cmp	r2, #9
 800f19a:	d903      	bls.n	800f1a4 <_vfiprintf_r+0x1d0>
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d0c6      	beq.n	800f12e <_vfiprintf_r+0x15a>
 800f1a0:	9105      	str	r1, [sp, #20]
 800f1a2:	e7c4      	b.n	800f12e <_vfiprintf_r+0x15a>
 800f1a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e7f0      	b.n	800f190 <_vfiprintf_r+0x1bc>
 800f1ae:	ab03      	add	r3, sp, #12
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	462a      	mov	r2, r5
 800f1b4:	4b12      	ldr	r3, [pc, #72]	; (800f200 <_vfiprintf_r+0x22c>)
 800f1b6:	a904      	add	r1, sp, #16
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f7fd fdad 	bl	800cd18 <_printf_float>
 800f1be:	4607      	mov	r7, r0
 800f1c0:	1c78      	adds	r0, r7, #1
 800f1c2:	d1d6      	bne.n	800f172 <_vfiprintf_r+0x19e>
 800f1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1c6:	07d9      	lsls	r1, r3, #31
 800f1c8:	d405      	bmi.n	800f1d6 <_vfiprintf_r+0x202>
 800f1ca:	89ab      	ldrh	r3, [r5, #12]
 800f1cc:	059a      	lsls	r2, r3, #22
 800f1ce:	d402      	bmi.n	800f1d6 <_vfiprintf_r+0x202>
 800f1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1d2:	f7fe fcb5 	bl	800db40 <__retarget_lock_release_recursive>
 800f1d6:	89ab      	ldrh	r3, [r5, #12]
 800f1d8:	065b      	lsls	r3, r3, #25
 800f1da:	f53f af1d 	bmi.w	800f018 <_vfiprintf_r+0x44>
 800f1de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1e0:	e71c      	b.n	800f01c <_vfiprintf_r+0x48>
 800f1e2:	ab03      	add	r3, sp, #12
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	4b05      	ldr	r3, [pc, #20]	; (800f200 <_vfiprintf_r+0x22c>)
 800f1ea:	a904      	add	r1, sp, #16
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f7fe f837 	bl	800d260 <_printf_i>
 800f1f2:	e7e4      	b.n	800f1be <_vfiprintf_r+0x1ea>
 800f1f4:	0801579e 	.word	0x0801579e
 800f1f8:	080157a8 	.word	0x080157a8
 800f1fc:	0800cd19 	.word	0x0800cd19
 800f200:	0800efaf 	.word	0x0800efaf
 800f204:	080157a4 	.word	0x080157a4

0800f208 <malloc>:
 800f208:	4b02      	ldr	r3, [pc, #8]	; (800f214 <malloc+0xc>)
 800f20a:	4601      	mov	r1, r0
 800f20c:	6818      	ldr	r0, [r3, #0]
 800f20e:	f000 b823 	b.w	800f258 <_malloc_r>
 800f212:	bf00      	nop
 800f214:	200000a4 	.word	0x200000a4

0800f218 <sbrk_aligned>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	4e0e      	ldr	r6, [pc, #56]	; (800f254 <sbrk_aligned+0x3c>)
 800f21c:	460c      	mov	r4, r1
 800f21e:	6831      	ldr	r1, [r6, #0]
 800f220:	4605      	mov	r5, r0
 800f222:	b911      	cbnz	r1, 800f22a <sbrk_aligned+0x12>
 800f224:	f001 f87a 	bl	801031c <_sbrk_r>
 800f228:	6030      	str	r0, [r6, #0]
 800f22a:	4621      	mov	r1, r4
 800f22c:	4628      	mov	r0, r5
 800f22e:	f001 f875 	bl	801031c <_sbrk_r>
 800f232:	1c43      	adds	r3, r0, #1
 800f234:	d00a      	beq.n	800f24c <sbrk_aligned+0x34>
 800f236:	1cc4      	adds	r4, r0, #3
 800f238:	f024 0403 	bic.w	r4, r4, #3
 800f23c:	42a0      	cmp	r0, r4
 800f23e:	d007      	beq.n	800f250 <sbrk_aligned+0x38>
 800f240:	1a21      	subs	r1, r4, r0
 800f242:	4628      	mov	r0, r5
 800f244:	f001 f86a 	bl	801031c <_sbrk_r>
 800f248:	3001      	adds	r0, #1
 800f24a:	d101      	bne.n	800f250 <sbrk_aligned+0x38>
 800f24c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f250:	4620      	mov	r0, r4
 800f252:	bd70      	pop	{r4, r5, r6, pc}
 800f254:	20009ac8 	.word	0x20009ac8

0800f258 <_malloc_r>:
 800f258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f25c:	1ccd      	adds	r5, r1, #3
 800f25e:	f025 0503 	bic.w	r5, r5, #3
 800f262:	3508      	adds	r5, #8
 800f264:	2d0c      	cmp	r5, #12
 800f266:	bf38      	it	cc
 800f268:	250c      	movcc	r5, #12
 800f26a:	2d00      	cmp	r5, #0
 800f26c:	4607      	mov	r7, r0
 800f26e:	db01      	blt.n	800f274 <_malloc_r+0x1c>
 800f270:	42a9      	cmp	r1, r5
 800f272:	d905      	bls.n	800f280 <_malloc_r+0x28>
 800f274:	230c      	movs	r3, #12
 800f276:	603b      	str	r3, [r7, #0]
 800f278:	2600      	movs	r6, #0
 800f27a:	4630      	mov	r0, r6
 800f27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f280:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f354 <_malloc_r+0xfc>
 800f284:	f000 fa9e 	bl	800f7c4 <__malloc_lock>
 800f288:	f8d8 3000 	ldr.w	r3, [r8]
 800f28c:	461c      	mov	r4, r3
 800f28e:	bb5c      	cbnz	r4, 800f2e8 <_malloc_r+0x90>
 800f290:	4629      	mov	r1, r5
 800f292:	4638      	mov	r0, r7
 800f294:	f7ff ffc0 	bl	800f218 <sbrk_aligned>
 800f298:	1c43      	adds	r3, r0, #1
 800f29a:	4604      	mov	r4, r0
 800f29c:	d155      	bne.n	800f34a <_malloc_r+0xf2>
 800f29e:	f8d8 4000 	ldr.w	r4, [r8]
 800f2a2:	4626      	mov	r6, r4
 800f2a4:	2e00      	cmp	r6, #0
 800f2a6:	d145      	bne.n	800f334 <_malloc_r+0xdc>
 800f2a8:	2c00      	cmp	r4, #0
 800f2aa:	d048      	beq.n	800f33e <_malloc_r+0xe6>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	4631      	mov	r1, r6
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	eb04 0903 	add.w	r9, r4, r3
 800f2b6:	f001 f831 	bl	801031c <_sbrk_r>
 800f2ba:	4581      	cmp	r9, r0
 800f2bc:	d13f      	bne.n	800f33e <_malloc_r+0xe6>
 800f2be:	6821      	ldr	r1, [r4, #0]
 800f2c0:	1a6d      	subs	r5, r5, r1
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	f7ff ffa7 	bl	800f218 <sbrk_aligned>
 800f2ca:	3001      	adds	r0, #1
 800f2cc:	d037      	beq.n	800f33e <_malloc_r+0xe6>
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	442b      	add	r3, r5
 800f2d2:	6023      	str	r3, [r4, #0]
 800f2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d038      	beq.n	800f34e <_malloc_r+0xf6>
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	42a2      	cmp	r2, r4
 800f2e0:	d12b      	bne.n	800f33a <_malloc_r+0xe2>
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	605a      	str	r2, [r3, #4]
 800f2e6:	e00f      	b.n	800f308 <_malloc_r+0xb0>
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	1b52      	subs	r2, r2, r5
 800f2ec:	d41f      	bmi.n	800f32e <_malloc_r+0xd6>
 800f2ee:	2a0b      	cmp	r2, #11
 800f2f0:	d917      	bls.n	800f322 <_malloc_r+0xca>
 800f2f2:	1961      	adds	r1, r4, r5
 800f2f4:	42a3      	cmp	r3, r4
 800f2f6:	6025      	str	r5, [r4, #0]
 800f2f8:	bf18      	it	ne
 800f2fa:	6059      	strne	r1, [r3, #4]
 800f2fc:	6863      	ldr	r3, [r4, #4]
 800f2fe:	bf08      	it	eq
 800f300:	f8c8 1000 	streq.w	r1, [r8]
 800f304:	5162      	str	r2, [r4, r5]
 800f306:	604b      	str	r3, [r1, #4]
 800f308:	4638      	mov	r0, r7
 800f30a:	f104 060b 	add.w	r6, r4, #11
 800f30e:	f000 fa5f 	bl	800f7d0 <__malloc_unlock>
 800f312:	f026 0607 	bic.w	r6, r6, #7
 800f316:	1d23      	adds	r3, r4, #4
 800f318:	1af2      	subs	r2, r6, r3
 800f31a:	d0ae      	beq.n	800f27a <_malloc_r+0x22>
 800f31c:	1b9b      	subs	r3, r3, r6
 800f31e:	50a3      	str	r3, [r4, r2]
 800f320:	e7ab      	b.n	800f27a <_malloc_r+0x22>
 800f322:	42a3      	cmp	r3, r4
 800f324:	6862      	ldr	r2, [r4, #4]
 800f326:	d1dd      	bne.n	800f2e4 <_malloc_r+0x8c>
 800f328:	f8c8 2000 	str.w	r2, [r8]
 800f32c:	e7ec      	b.n	800f308 <_malloc_r+0xb0>
 800f32e:	4623      	mov	r3, r4
 800f330:	6864      	ldr	r4, [r4, #4]
 800f332:	e7ac      	b.n	800f28e <_malloc_r+0x36>
 800f334:	4634      	mov	r4, r6
 800f336:	6876      	ldr	r6, [r6, #4]
 800f338:	e7b4      	b.n	800f2a4 <_malloc_r+0x4c>
 800f33a:	4613      	mov	r3, r2
 800f33c:	e7cc      	b.n	800f2d8 <_malloc_r+0x80>
 800f33e:	230c      	movs	r3, #12
 800f340:	603b      	str	r3, [r7, #0]
 800f342:	4638      	mov	r0, r7
 800f344:	f000 fa44 	bl	800f7d0 <__malloc_unlock>
 800f348:	e797      	b.n	800f27a <_malloc_r+0x22>
 800f34a:	6025      	str	r5, [r4, #0]
 800f34c:	e7dc      	b.n	800f308 <_malloc_r+0xb0>
 800f34e:	605b      	str	r3, [r3, #4]
 800f350:	deff      	udf	#255	; 0xff
 800f352:	bf00      	nop
 800f354:	20009ac4 	.word	0x20009ac4

0800f358 <_scanf_chars>:
 800f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f35c:	4615      	mov	r5, r2
 800f35e:	688a      	ldr	r2, [r1, #8]
 800f360:	4680      	mov	r8, r0
 800f362:	460c      	mov	r4, r1
 800f364:	b932      	cbnz	r2, 800f374 <_scanf_chars+0x1c>
 800f366:	698a      	ldr	r2, [r1, #24]
 800f368:	2a00      	cmp	r2, #0
 800f36a:	bf0c      	ite	eq
 800f36c:	2201      	moveq	r2, #1
 800f36e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f372:	608a      	str	r2, [r1, #8]
 800f374:	6822      	ldr	r2, [r4, #0]
 800f376:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f408 <_scanf_chars+0xb0>
 800f37a:	06d1      	lsls	r1, r2, #27
 800f37c:	bf5f      	itttt	pl
 800f37e:	681a      	ldrpl	r2, [r3, #0]
 800f380:	1d11      	addpl	r1, r2, #4
 800f382:	6019      	strpl	r1, [r3, #0]
 800f384:	6816      	ldrpl	r6, [r2, #0]
 800f386:	2700      	movs	r7, #0
 800f388:	69a0      	ldr	r0, [r4, #24]
 800f38a:	b188      	cbz	r0, 800f3b0 <_scanf_chars+0x58>
 800f38c:	2801      	cmp	r0, #1
 800f38e:	d107      	bne.n	800f3a0 <_scanf_chars+0x48>
 800f390:	682a      	ldr	r2, [r5, #0]
 800f392:	7811      	ldrb	r1, [r2, #0]
 800f394:	6962      	ldr	r2, [r4, #20]
 800f396:	5c52      	ldrb	r2, [r2, r1]
 800f398:	b952      	cbnz	r2, 800f3b0 <_scanf_chars+0x58>
 800f39a:	2f00      	cmp	r7, #0
 800f39c:	d031      	beq.n	800f402 <_scanf_chars+0xaa>
 800f39e:	e022      	b.n	800f3e6 <_scanf_chars+0x8e>
 800f3a0:	2802      	cmp	r0, #2
 800f3a2:	d120      	bne.n	800f3e6 <_scanf_chars+0x8e>
 800f3a4:	682b      	ldr	r3, [r5, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f3ac:	071b      	lsls	r3, r3, #28
 800f3ae:	d41a      	bmi.n	800f3e6 <_scanf_chars+0x8e>
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	06da      	lsls	r2, r3, #27
 800f3b4:	bf5e      	ittt	pl
 800f3b6:	682b      	ldrpl	r3, [r5, #0]
 800f3b8:	781b      	ldrbpl	r3, [r3, #0]
 800f3ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f3be:	682a      	ldr	r2, [r5, #0]
 800f3c0:	686b      	ldr	r3, [r5, #4]
 800f3c2:	3201      	adds	r2, #1
 800f3c4:	602a      	str	r2, [r5, #0]
 800f3c6:	68a2      	ldr	r2, [r4, #8]
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	3a01      	subs	r2, #1
 800f3cc:	606b      	str	r3, [r5, #4]
 800f3ce:	3701      	adds	r7, #1
 800f3d0:	60a2      	str	r2, [r4, #8]
 800f3d2:	b142      	cbz	r2, 800f3e6 <_scanf_chars+0x8e>
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	dcd7      	bgt.n	800f388 <_scanf_chars+0x30>
 800f3d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f3dc:	4629      	mov	r1, r5
 800f3de:	4640      	mov	r0, r8
 800f3e0:	4798      	blx	r3
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d0d0      	beq.n	800f388 <_scanf_chars+0x30>
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	f013 0310 	ands.w	r3, r3, #16
 800f3ec:	d105      	bne.n	800f3fa <_scanf_chars+0xa2>
 800f3ee:	68e2      	ldr	r2, [r4, #12]
 800f3f0:	3201      	adds	r2, #1
 800f3f2:	60e2      	str	r2, [r4, #12]
 800f3f4:	69a2      	ldr	r2, [r4, #24]
 800f3f6:	b102      	cbz	r2, 800f3fa <_scanf_chars+0xa2>
 800f3f8:	7033      	strb	r3, [r6, #0]
 800f3fa:	6923      	ldr	r3, [r4, #16]
 800f3fc:	443b      	add	r3, r7
 800f3fe:	6123      	str	r3, [r4, #16]
 800f400:	2000      	movs	r0, #0
 800f402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f406:	bf00      	nop
 800f408:	080155ec 	.word	0x080155ec

0800f40c <_scanf_i>:
 800f40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f410:	4698      	mov	r8, r3
 800f412:	4b74      	ldr	r3, [pc, #464]	; (800f5e4 <_scanf_i+0x1d8>)
 800f414:	460c      	mov	r4, r1
 800f416:	4682      	mov	sl, r0
 800f418:	4616      	mov	r6, r2
 800f41a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f41e:	b087      	sub	sp, #28
 800f420:	ab03      	add	r3, sp, #12
 800f422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f426:	4b70      	ldr	r3, [pc, #448]	; (800f5e8 <_scanf_i+0x1dc>)
 800f428:	69a1      	ldr	r1, [r4, #24]
 800f42a:	4a70      	ldr	r2, [pc, #448]	; (800f5ec <_scanf_i+0x1e0>)
 800f42c:	2903      	cmp	r1, #3
 800f42e:	bf18      	it	ne
 800f430:	461a      	movne	r2, r3
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	9201      	str	r2, [sp, #4]
 800f436:	1e5a      	subs	r2, r3, #1
 800f438:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f43c:	bf88      	it	hi
 800f43e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f442:	4627      	mov	r7, r4
 800f444:	bf82      	ittt	hi
 800f446:	eb03 0905 	addhi.w	r9, r3, r5
 800f44a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f44e:	60a3      	strhi	r3, [r4, #8]
 800f450:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f454:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f458:	bf98      	it	ls
 800f45a:	f04f 0900 	movls.w	r9, #0
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	463d      	mov	r5, r7
 800f462:	f04f 0b00 	mov.w	fp, #0
 800f466:	6831      	ldr	r1, [r6, #0]
 800f468:	ab03      	add	r3, sp, #12
 800f46a:	7809      	ldrb	r1, [r1, #0]
 800f46c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f470:	2202      	movs	r2, #2
 800f472:	f7f0 fecd 	bl	8000210 <memchr>
 800f476:	b328      	cbz	r0, 800f4c4 <_scanf_i+0xb8>
 800f478:	f1bb 0f01 	cmp.w	fp, #1
 800f47c:	d159      	bne.n	800f532 <_scanf_i+0x126>
 800f47e:	6862      	ldr	r2, [r4, #4]
 800f480:	b92a      	cbnz	r2, 800f48e <_scanf_i+0x82>
 800f482:	6822      	ldr	r2, [r4, #0]
 800f484:	2308      	movs	r3, #8
 800f486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f48a:	6063      	str	r3, [r4, #4]
 800f48c:	6022      	str	r2, [r4, #0]
 800f48e:	6822      	ldr	r2, [r4, #0]
 800f490:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f494:	6022      	str	r2, [r4, #0]
 800f496:	68a2      	ldr	r2, [r4, #8]
 800f498:	1e51      	subs	r1, r2, #1
 800f49a:	60a1      	str	r1, [r4, #8]
 800f49c:	b192      	cbz	r2, 800f4c4 <_scanf_i+0xb8>
 800f49e:	6832      	ldr	r2, [r6, #0]
 800f4a0:	1c51      	adds	r1, r2, #1
 800f4a2:	6031      	str	r1, [r6, #0]
 800f4a4:	7812      	ldrb	r2, [r2, #0]
 800f4a6:	f805 2b01 	strb.w	r2, [r5], #1
 800f4aa:	6872      	ldr	r2, [r6, #4]
 800f4ac:	3a01      	subs	r2, #1
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	6072      	str	r2, [r6, #4]
 800f4b2:	dc07      	bgt.n	800f4c4 <_scanf_i+0xb8>
 800f4b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	4650      	mov	r0, sl
 800f4bc:	4790      	blx	r2
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	f040 8085 	bne.w	800f5ce <_scanf_i+0x1c2>
 800f4c4:	f10b 0b01 	add.w	fp, fp, #1
 800f4c8:	f1bb 0f03 	cmp.w	fp, #3
 800f4cc:	d1cb      	bne.n	800f466 <_scanf_i+0x5a>
 800f4ce:	6863      	ldr	r3, [r4, #4]
 800f4d0:	b90b      	cbnz	r3, 800f4d6 <_scanf_i+0xca>
 800f4d2:	230a      	movs	r3, #10
 800f4d4:	6063      	str	r3, [r4, #4]
 800f4d6:	6863      	ldr	r3, [r4, #4]
 800f4d8:	4945      	ldr	r1, [pc, #276]	; (800f5f0 <_scanf_i+0x1e4>)
 800f4da:	6960      	ldr	r0, [r4, #20]
 800f4dc:	1ac9      	subs	r1, r1, r3
 800f4de:	f000 f889 	bl	800f5f4 <__sccl>
 800f4e2:	f04f 0b00 	mov.w	fp, #0
 800f4e6:	68a3      	ldr	r3, [r4, #8]
 800f4e8:	6822      	ldr	r2, [r4, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d03d      	beq.n	800f56a <_scanf_i+0x15e>
 800f4ee:	6831      	ldr	r1, [r6, #0]
 800f4f0:	6960      	ldr	r0, [r4, #20]
 800f4f2:	f891 c000 	ldrb.w	ip, [r1]
 800f4f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d035      	beq.n	800f56a <_scanf_i+0x15e>
 800f4fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f502:	d124      	bne.n	800f54e <_scanf_i+0x142>
 800f504:	0510      	lsls	r0, r2, #20
 800f506:	d522      	bpl.n	800f54e <_scanf_i+0x142>
 800f508:	f10b 0b01 	add.w	fp, fp, #1
 800f50c:	f1b9 0f00 	cmp.w	r9, #0
 800f510:	d003      	beq.n	800f51a <_scanf_i+0x10e>
 800f512:	3301      	adds	r3, #1
 800f514:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f518:	60a3      	str	r3, [r4, #8]
 800f51a:	6873      	ldr	r3, [r6, #4]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	2b00      	cmp	r3, #0
 800f520:	6073      	str	r3, [r6, #4]
 800f522:	dd1b      	ble.n	800f55c <_scanf_i+0x150>
 800f524:	6833      	ldr	r3, [r6, #0]
 800f526:	3301      	adds	r3, #1
 800f528:	6033      	str	r3, [r6, #0]
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	3b01      	subs	r3, #1
 800f52e:	60a3      	str	r3, [r4, #8]
 800f530:	e7d9      	b.n	800f4e6 <_scanf_i+0xda>
 800f532:	f1bb 0f02 	cmp.w	fp, #2
 800f536:	d1ae      	bne.n	800f496 <_scanf_i+0x8a>
 800f538:	6822      	ldr	r2, [r4, #0]
 800f53a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f53e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f542:	d1bf      	bne.n	800f4c4 <_scanf_i+0xb8>
 800f544:	2310      	movs	r3, #16
 800f546:	6063      	str	r3, [r4, #4]
 800f548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f54c:	e7a2      	b.n	800f494 <_scanf_i+0x88>
 800f54e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f552:	6022      	str	r2, [r4, #0]
 800f554:	780b      	ldrb	r3, [r1, #0]
 800f556:	f805 3b01 	strb.w	r3, [r5], #1
 800f55a:	e7de      	b.n	800f51a <_scanf_i+0x10e>
 800f55c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f560:	4631      	mov	r1, r6
 800f562:	4650      	mov	r0, sl
 800f564:	4798      	blx	r3
 800f566:	2800      	cmp	r0, #0
 800f568:	d0df      	beq.n	800f52a <_scanf_i+0x11e>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	05d9      	lsls	r1, r3, #23
 800f56e:	d50d      	bpl.n	800f58c <_scanf_i+0x180>
 800f570:	42bd      	cmp	r5, r7
 800f572:	d909      	bls.n	800f588 <_scanf_i+0x17c>
 800f574:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f578:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f57c:	4632      	mov	r2, r6
 800f57e:	4650      	mov	r0, sl
 800f580:	4798      	blx	r3
 800f582:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800f586:	464d      	mov	r5, r9
 800f588:	42bd      	cmp	r5, r7
 800f58a:	d028      	beq.n	800f5de <_scanf_i+0x1d2>
 800f58c:	6822      	ldr	r2, [r4, #0]
 800f58e:	f012 0210 	ands.w	r2, r2, #16
 800f592:	d113      	bne.n	800f5bc <_scanf_i+0x1b0>
 800f594:	702a      	strb	r2, [r5, #0]
 800f596:	6863      	ldr	r3, [r4, #4]
 800f598:	9e01      	ldr	r6, [sp, #4]
 800f59a:	4639      	mov	r1, r7
 800f59c:	4650      	mov	r0, sl
 800f59e:	47b0      	blx	r6
 800f5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5a4:	6821      	ldr	r1, [r4, #0]
 800f5a6:	1d1a      	adds	r2, r3, #4
 800f5a8:	f8c8 2000 	str.w	r2, [r8]
 800f5ac:	f011 0f20 	tst.w	r1, #32
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	d00f      	beq.n	800f5d4 <_scanf_i+0x1c8>
 800f5b4:	6018      	str	r0, [r3, #0]
 800f5b6:	68e3      	ldr	r3, [r4, #12]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	60e3      	str	r3, [r4, #12]
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	1bed      	subs	r5, r5, r7
 800f5c0:	445d      	add	r5, fp
 800f5c2:	442b      	add	r3, r5
 800f5c4:	6123      	str	r3, [r4, #16]
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	b007      	add	sp, #28
 800f5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ce:	f04f 0b00 	mov.w	fp, #0
 800f5d2:	e7ca      	b.n	800f56a <_scanf_i+0x15e>
 800f5d4:	07ca      	lsls	r2, r1, #31
 800f5d6:	bf4c      	ite	mi
 800f5d8:	8018      	strhmi	r0, [r3, #0]
 800f5da:	6018      	strpl	r0, [r3, #0]
 800f5dc:	e7eb      	b.n	800f5b6 <_scanf_i+0x1aa>
 800f5de:	2001      	movs	r0, #1
 800f5e0:	e7f2      	b.n	800f5c8 <_scanf_i+0x1bc>
 800f5e2:	bf00      	nop
 800f5e4:	08011468 	.word	0x08011468
 800f5e8:	080100b1 	.word	0x080100b1
 800f5ec:	0800d87d 	.word	0x0800d87d
 800f5f0:	080157bf 	.word	0x080157bf

0800f5f4 <__sccl>:
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	780b      	ldrb	r3, [r1, #0]
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	2b5e      	cmp	r3, #94	; 0x5e
 800f5fc:	bf0b      	itete	eq
 800f5fe:	784b      	ldrbeq	r3, [r1, #1]
 800f600:	1c4a      	addne	r2, r1, #1
 800f602:	1c8a      	addeq	r2, r1, #2
 800f604:	2100      	movne	r1, #0
 800f606:	bf08      	it	eq
 800f608:	2101      	moveq	r1, #1
 800f60a:	3801      	subs	r0, #1
 800f60c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f610:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f614:	42a8      	cmp	r0, r5
 800f616:	d1fb      	bne.n	800f610 <__sccl+0x1c>
 800f618:	b90b      	cbnz	r3, 800f61e <__sccl+0x2a>
 800f61a:	1e50      	subs	r0, r2, #1
 800f61c:	bd70      	pop	{r4, r5, r6, pc}
 800f61e:	f081 0101 	eor.w	r1, r1, #1
 800f622:	54e1      	strb	r1, [r4, r3]
 800f624:	4610      	mov	r0, r2
 800f626:	4602      	mov	r2, r0
 800f628:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f62c:	2d2d      	cmp	r5, #45	; 0x2d
 800f62e:	d005      	beq.n	800f63c <__sccl+0x48>
 800f630:	2d5d      	cmp	r5, #93	; 0x5d
 800f632:	d016      	beq.n	800f662 <__sccl+0x6e>
 800f634:	2d00      	cmp	r5, #0
 800f636:	d0f1      	beq.n	800f61c <__sccl+0x28>
 800f638:	462b      	mov	r3, r5
 800f63a:	e7f2      	b.n	800f622 <__sccl+0x2e>
 800f63c:	7846      	ldrb	r6, [r0, #1]
 800f63e:	2e5d      	cmp	r6, #93	; 0x5d
 800f640:	d0fa      	beq.n	800f638 <__sccl+0x44>
 800f642:	42b3      	cmp	r3, r6
 800f644:	dcf8      	bgt.n	800f638 <__sccl+0x44>
 800f646:	3002      	adds	r0, #2
 800f648:	461a      	mov	r2, r3
 800f64a:	3201      	adds	r2, #1
 800f64c:	4296      	cmp	r6, r2
 800f64e:	54a1      	strb	r1, [r4, r2]
 800f650:	dcfb      	bgt.n	800f64a <__sccl+0x56>
 800f652:	1af2      	subs	r2, r6, r3
 800f654:	3a01      	subs	r2, #1
 800f656:	1c5d      	adds	r5, r3, #1
 800f658:	42b3      	cmp	r3, r6
 800f65a:	bfa8      	it	ge
 800f65c:	2200      	movge	r2, #0
 800f65e:	18ab      	adds	r3, r5, r2
 800f660:	e7e1      	b.n	800f626 <__sccl+0x32>
 800f662:	4610      	mov	r0, r2
 800f664:	e7da      	b.n	800f61c <__sccl+0x28>
	...

0800f668 <__sflush_r>:
 800f668:	898a      	ldrh	r2, [r1, #12]
 800f66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66e:	4605      	mov	r5, r0
 800f670:	0710      	lsls	r0, r2, #28
 800f672:	460c      	mov	r4, r1
 800f674:	d458      	bmi.n	800f728 <__sflush_r+0xc0>
 800f676:	684b      	ldr	r3, [r1, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	dc05      	bgt.n	800f688 <__sflush_r+0x20>
 800f67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f67e:	2b00      	cmp	r3, #0
 800f680:	dc02      	bgt.n	800f688 <__sflush_r+0x20>
 800f682:	2000      	movs	r0, #0
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f68a:	2e00      	cmp	r6, #0
 800f68c:	d0f9      	beq.n	800f682 <__sflush_r+0x1a>
 800f68e:	2300      	movs	r3, #0
 800f690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f694:	682f      	ldr	r7, [r5, #0]
 800f696:	6a21      	ldr	r1, [r4, #32]
 800f698:	602b      	str	r3, [r5, #0]
 800f69a:	d032      	beq.n	800f702 <__sflush_r+0x9a>
 800f69c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	075a      	lsls	r2, r3, #29
 800f6a2:	d505      	bpl.n	800f6b0 <__sflush_r+0x48>
 800f6a4:	6863      	ldr	r3, [r4, #4]
 800f6a6:	1ac0      	subs	r0, r0, r3
 800f6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6aa:	b10b      	cbz	r3, 800f6b0 <__sflush_r+0x48>
 800f6ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6ae:	1ac0      	subs	r0, r0, r3
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6b6:	6a21      	ldr	r1, [r4, #32]
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	47b0      	blx	r6
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	d106      	bne.n	800f6d0 <__sflush_r+0x68>
 800f6c2:	6829      	ldr	r1, [r5, #0]
 800f6c4:	291d      	cmp	r1, #29
 800f6c6:	d82b      	bhi.n	800f720 <__sflush_r+0xb8>
 800f6c8:	4a29      	ldr	r2, [pc, #164]	; (800f770 <__sflush_r+0x108>)
 800f6ca:	410a      	asrs	r2, r1
 800f6cc:	07d6      	lsls	r6, r2, #31
 800f6ce:	d427      	bmi.n	800f720 <__sflush_r+0xb8>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	6062      	str	r2, [r4, #4]
 800f6d4:	04d9      	lsls	r1, r3, #19
 800f6d6:	6922      	ldr	r2, [r4, #16]
 800f6d8:	6022      	str	r2, [r4, #0]
 800f6da:	d504      	bpl.n	800f6e6 <__sflush_r+0x7e>
 800f6dc:	1c42      	adds	r2, r0, #1
 800f6de:	d101      	bne.n	800f6e4 <__sflush_r+0x7c>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b903      	cbnz	r3, 800f6e6 <__sflush_r+0x7e>
 800f6e4:	6560      	str	r0, [r4, #84]	; 0x54
 800f6e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6e8:	602f      	str	r7, [r5, #0]
 800f6ea:	2900      	cmp	r1, #0
 800f6ec:	d0c9      	beq.n	800f682 <__sflush_r+0x1a>
 800f6ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6f2:	4299      	cmp	r1, r3
 800f6f4:	d002      	beq.n	800f6fc <__sflush_r+0x94>
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f7ff f8cc 	bl	800e894 <_free_r>
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	6360      	str	r0, [r4, #52]	; 0x34
 800f700:	e7c0      	b.n	800f684 <__sflush_r+0x1c>
 800f702:	2301      	movs	r3, #1
 800f704:	4628      	mov	r0, r5
 800f706:	47b0      	blx	r6
 800f708:	1c41      	adds	r1, r0, #1
 800f70a:	d1c8      	bne.n	800f69e <__sflush_r+0x36>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d0c5      	beq.n	800f69e <__sflush_r+0x36>
 800f712:	2b1d      	cmp	r3, #29
 800f714:	d001      	beq.n	800f71a <__sflush_r+0xb2>
 800f716:	2b16      	cmp	r3, #22
 800f718:	d101      	bne.n	800f71e <__sflush_r+0xb6>
 800f71a:	602f      	str	r7, [r5, #0]
 800f71c:	e7b1      	b.n	800f682 <__sflush_r+0x1a>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f724:	81a3      	strh	r3, [r4, #12]
 800f726:	e7ad      	b.n	800f684 <__sflush_r+0x1c>
 800f728:	690f      	ldr	r7, [r1, #16]
 800f72a:	2f00      	cmp	r7, #0
 800f72c:	d0a9      	beq.n	800f682 <__sflush_r+0x1a>
 800f72e:	0793      	lsls	r3, r2, #30
 800f730:	680e      	ldr	r6, [r1, #0]
 800f732:	bf08      	it	eq
 800f734:	694b      	ldreq	r3, [r1, #20]
 800f736:	600f      	str	r7, [r1, #0]
 800f738:	bf18      	it	ne
 800f73a:	2300      	movne	r3, #0
 800f73c:	eba6 0807 	sub.w	r8, r6, r7
 800f740:	608b      	str	r3, [r1, #8]
 800f742:	f1b8 0f00 	cmp.w	r8, #0
 800f746:	dd9c      	ble.n	800f682 <__sflush_r+0x1a>
 800f748:	6a21      	ldr	r1, [r4, #32]
 800f74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f74c:	4643      	mov	r3, r8
 800f74e:	463a      	mov	r2, r7
 800f750:	4628      	mov	r0, r5
 800f752:	47b0      	blx	r6
 800f754:	2800      	cmp	r0, #0
 800f756:	dc06      	bgt.n	800f766 <__sflush_r+0xfe>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f764:	e78e      	b.n	800f684 <__sflush_r+0x1c>
 800f766:	4407      	add	r7, r0
 800f768:	eba8 0800 	sub.w	r8, r8, r0
 800f76c:	e7e9      	b.n	800f742 <__sflush_r+0xda>
 800f76e:	bf00      	nop
 800f770:	dfbffffe 	.word	0xdfbffffe

0800f774 <_fflush_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	690b      	ldr	r3, [r1, #16]
 800f778:	4605      	mov	r5, r0
 800f77a:	460c      	mov	r4, r1
 800f77c:	b913      	cbnz	r3, 800f784 <_fflush_r+0x10>
 800f77e:	2500      	movs	r5, #0
 800f780:	4628      	mov	r0, r5
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	b118      	cbz	r0, 800f78e <_fflush_r+0x1a>
 800f786:	6a03      	ldr	r3, [r0, #32]
 800f788:	b90b      	cbnz	r3, 800f78e <_fflush_r+0x1a>
 800f78a:	f7fd ffdd 	bl	800d748 <__sinit>
 800f78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d0f3      	beq.n	800f77e <_fflush_r+0xa>
 800f796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f798:	07d0      	lsls	r0, r2, #31
 800f79a:	d404      	bmi.n	800f7a6 <_fflush_r+0x32>
 800f79c:	0599      	lsls	r1, r3, #22
 800f79e:	d402      	bmi.n	800f7a6 <_fflush_r+0x32>
 800f7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7a2:	f7fe f9cc 	bl	800db3e <__retarget_lock_acquire_recursive>
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	f7ff ff5d 	bl	800f668 <__sflush_r>
 800f7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7b0:	07da      	lsls	r2, r3, #31
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	d4e4      	bmi.n	800f780 <_fflush_r+0xc>
 800f7b6:	89a3      	ldrh	r3, [r4, #12]
 800f7b8:	059b      	lsls	r3, r3, #22
 800f7ba:	d4e1      	bmi.n	800f780 <_fflush_r+0xc>
 800f7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7be:	f7fe f9bf 	bl	800db40 <__retarget_lock_release_recursive>
 800f7c2:	e7dd      	b.n	800f780 <_fflush_r+0xc>

0800f7c4 <__malloc_lock>:
 800f7c4:	4801      	ldr	r0, [pc, #4]	; (800f7cc <__malloc_lock+0x8>)
 800f7c6:	f7fe b9ba 	b.w	800db3e <__retarget_lock_acquire_recursive>
 800f7ca:	bf00      	nop
 800f7cc:	20009ac0 	.word	0x20009ac0

0800f7d0 <__malloc_unlock>:
 800f7d0:	4801      	ldr	r0, [pc, #4]	; (800f7d8 <__malloc_unlock+0x8>)
 800f7d2:	f7fe b9b5 	b.w	800db40 <__retarget_lock_release_recursive>
 800f7d6:	bf00      	nop
 800f7d8:	20009ac0 	.word	0x20009ac0

0800f7dc <_Balloc>:
 800f7dc:	b570      	push	{r4, r5, r6, lr}
 800f7de:	69c6      	ldr	r6, [r0, #28]
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	460d      	mov	r5, r1
 800f7e4:	b976      	cbnz	r6, 800f804 <_Balloc+0x28>
 800f7e6:	2010      	movs	r0, #16
 800f7e8:	f7ff fd0e 	bl	800f208 <malloc>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	61e0      	str	r0, [r4, #28]
 800f7f0:	b920      	cbnz	r0, 800f7fc <_Balloc+0x20>
 800f7f2:	4b18      	ldr	r3, [pc, #96]	; (800f854 <_Balloc+0x78>)
 800f7f4:	4818      	ldr	r0, [pc, #96]	; (800f858 <_Balloc+0x7c>)
 800f7f6:	216b      	movs	r1, #107	; 0x6b
 800f7f8:	f7fe f9b2 	bl	800db60 <__assert_func>
 800f7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f800:	6006      	str	r6, [r0, #0]
 800f802:	60c6      	str	r6, [r0, #12]
 800f804:	69e6      	ldr	r6, [r4, #28]
 800f806:	68f3      	ldr	r3, [r6, #12]
 800f808:	b183      	cbz	r3, 800f82c <_Balloc+0x50>
 800f80a:	69e3      	ldr	r3, [r4, #28]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f812:	b9b8      	cbnz	r0, 800f844 <_Balloc+0x68>
 800f814:	2101      	movs	r1, #1
 800f816:	fa01 f605 	lsl.w	r6, r1, r5
 800f81a:	1d72      	adds	r2, r6, #5
 800f81c:	0092      	lsls	r2, r2, #2
 800f81e:	4620      	mov	r0, r4
 800f820:	f000 fd93 	bl	801034a <_calloc_r>
 800f824:	b160      	cbz	r0, 800f840 <_Balloc+0x64>
 800f826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f82a:	e00e      	b.n	800f84a <_Balloc+0x6e>
 800f82c:	2221      	movs	r2, #33	; 0x21
 800f82e:	2104      	movs	r1, #4
 800f830:	4620      	mov	r0, r4
 800f832:	f000 fd8a 	bl	801034a <_calloc_r>
 800f836:	69e3      	ldr	r3, [r4, #28]
 800f838:	60f0      	str	r0, [r6, #12]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1e4      	bne.n	800f80a <_Balloc+0x2e>
 800f840:	2000      	movs	r0, #0
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	6802      	ldr	r2, [r0, #0]
 800f846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f84a:	2300      	movs	r3, #0
 800f84c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f850:	e7f7      	b.n	800f842 <_Balloc+0x66>
 800f852:	bf00      	nop
 800f854:	0801557a 	.word	0x0801557a
 800f858:	080157ca 	.word	0x080157ca

0800f85c <_Bfree>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	69c6      	ldr	r6, [r0, #28]
 800f860:	4605      	mov	r5, r0
 800f862:	460c      	mov	r4, r1
 800f864:	b976      	cbnz	r6, 800f884 <_Bfree+0x28>
 800f866:	2010      	movs	r0, #16
 800f868:	f7ff fcce 	bl	800f208 <malloc>
 800f86c:	4602      	mov	r2, r0
 800f86e:	61e8      	str	r0, [r5, #28]
 800f870:	b920      	cbnz	r0, 800f87c <_Bfree+0x20>
 800f872:	4b09      	ldr	r3, [pc, #36]	; (800f898 <_Bfree+0x3c>)
 800f874:	4809      	ldr	r0, [pc, #36]	; (800f89c <_Bfree+0x40>)
 800f876:	218f      	movs	r1, #143	; 0x8f
 800f878:	f7fe f972 	bl	800db60 <__assert_func>
 800f87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f880:	6006      	str	r6, [r0, #0]
 800f882:	60c6      	str	r6, [r0, #12]
 800f884:	b13c      	cbz	r4, 800f896 <_Bfree+0x3a>
 800f886:	69eb      	ldr	r3, [r5, #28]
 800f888:	6862      	ldr	r2, [r4, #4]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f890:	6021      	str	r1, [r4, #0]
 800f892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	0801557a 	.word	0x0801557a
 800f89c:	080157ca 	.word	0x080157ca

0800f8a0 <__multadd>:
 800f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	690d      	ldr	r5, [r1, #16]
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	460c      	mov	r4, r1
 800f8aa:	461e      	mov	r6, r3
 800f8ac:	f101 0c14 	add.w	ip, r1, #20
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	f8dc 3000 	ldr.w	r3, [ip]
 800f8b6:	b299      	uxth	r1, r3
 800f8b8:	fb02 6101 	mla	r1, r2, r1, r6
 800f8bc:	0c1e      	lsrs	r6, r3, #16
 800f8be:	0c0b      	lsrs	r3, r1, #16
 800f8c0:	fb02 3306 	mla	r3, r2, r6, r3
 800f8c4:	b289      	uxth	r1, r1
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8cc:	4285      	cmp	r5, r0
 800f8ce:	f84c 1b04 	str.w	r1, [ip], #4
 800f8d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8d6:	dcec      	bgt.n	800f8b2 <__multadd+0x12>
 800f8d8:	b30e      	cbz	r6, 800f91e <__multadd+0x7e>
 800f8da:	68a3      	ldr	r3, [r4, #8]
 800f8dc:	42ab      	cmp	r3, r5
 800f8de:	dc19      	bgt.n	800f914 <__multadd+0x74>
 800f8e0:	6861      	ldr	r1, [r4, #4]
 800f8e2:	4638      	mov	r0, r7
 800f8e4:	3101      	adds	r1, #1
 800f8e6:	f7ff ff79 	bl	800f7dc <_Balloc>
 800f8ea:	4680      	mov	r8, r0
 800f8ec:	b928      	cbnz	r0, 800f8fa <__multadd+0x5a>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	4b0c      	ldr	r3, [pc, #48]	; (800f924 <__multadd+0x84>)
 800f8f2:	480d      	ldr	r0, [pc, #52]	; (800f928 <__multadd+0x88>)
 800f8f4:	21ba      	movs	r1, #186	; 0xba
 800f8f6:	f7fe f933 	bl	800db60 <__assert_func>
 800f8fa:	6922      	ldr	r2, [r4, #16]
 800f8fc:	3202      	adds	r2, #2
 800f8fe:	f104 010c 	add.w	r1, r4, #12
 800f902:	0092      	lsls	r2, r2, #2
 800f904:	300c      	adds	r0, #12
 800f906:	f7fe f91c 	bl	800db42 <memcpy>
 800f90a:	4621      	mov	r1, r4
 800f90c:	4638      	mov	r0, r7
 800f90e:	f7ff ffa5 	bl	800f85c <_Bfree>
 800f912:	4644      	mov	r4, r8
 800f914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f918:	3501      	adds	r5, #1
 800f91a:	615e      	str	r6, [r3, #20]
 800f91c:	6125      	str	r5, [r4, #16]
 800f91e:	4620      	mov	r0, r4
 800f920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f924:	0801578d 	.word	0x0801578d
 800f928:	080157ca 	.word	0x080157ca

0800f92c <__hi0bits>:
 800f92c:	0c03      	lsrs	r3, r0, #16
 800f92e:	041b      	lsls	r3, r3, #16
 800f930:	b9d3      	cbnz	r3, 800f968 <__hi0bits+0x3c>
 800f932:	0400      	lsls	r0, r0, #16
 800f934:	2310      	movs	r3, #16
 800f936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f93a:	bf04      	itt	eq
 800f93c:	0200      	lsleq	r0, r0, #8
 800f93e:	3308      	addeq	r3, #8
 800f940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f944:	bf04      	itt	eq
 800f946:	0100      	lsleq	r0, r0, #4
 800f948:	3304      	addeq	r3, #4
 800f94a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f94e:	bf04      	itt	eq
 800f950:	0080      	lsleq	r0, r0, #2
 800f952:	3302      	addeq	r3, #2
 800f954:	2800      	cmp	r0, #0
 800f956:	db05      	blt.n	800f964 <__hi0bits+0x38>
 800f958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f95c:	f103 0301 	add.w	r3, r3, #1
 800f960:	bf08      	it	eq
 800f962:	2320      	moveq	r3, #32
 800f964:	4618      	mov	r0, r3
 800f966:	4770      	bx	lr
 800f968:	2300      	movs	r3, #0
 800f96a:	e7e4      	b.n	800f936 <__hi0bits+0xa>

0800f96c <__lo0bits>:
 800f96c:	6803      	ldr	r3, [r0, #0]
 800f96e:	f013 0207 	ands.w	r2, r3, #7
 800f972:	d00c      	beq.n	800f98e <__lo0bits+0x22>
 800f974:	07d9      	lsls	r1, r3, #31
 800f976:	d422      	bmi.n	800f9be <__lo0bits+0x52>
 800f978:	079a      	lsls	r2, r3, #30
 800f97a:	bf49      	itett	mi
 800f97c:	085b      	lsrmi	r3, r3, #1
 800f97e:	089b      	lsrpl	r3, r3, #2
 800f980:	6003      	strmi	r3, [r0, #0]
 800f982:	2201      	movmi	r2, #1
 800f984:	bf5c      	itt	pl
 800f986:	6003      	strpl	r3, [r0, #0]
 800f988:	2202      	movpl	r2, #2
 800f98a:	4610      	mov	r0, r2
 800f98c:	4770      	bx	lr
 800f98e:	b299      	uxth	r1, r3
 800f990:	b909      	cbnz	r1, 800f996 <__lo0bits+0x2a>
 800f992:	0c1b      	lsrs	r3, r3, #16
 800f994:	2210      	movs	r2, #16
 800f996:	b2d9      	uxtb	r1, r3
 800f998:	b909      	cbnz	r1, 800f99e <__lo0bits+0x32>
 800f99a:	3208      	adds	r2, #8
 800f99c:	0a1b      	lsrs	r3, r3, #8
 800f99e:	0719      	lsls	r1, r3, #28
 800f9a0:	bf04      	itt	eq
 800f9a2:	091b      	lsreq	r3, r3, #4
 800f9a4:	3204      	addeq	r2, #4
 800f9a6:	0799      	lsls	r1, r3, #30
 800f9a8:	bf04      	itt	eq
 800f9aa:	089b      	lsreq	r3, r3, #2
 800f9ac:	3202      	addeq	r2, #2
 800f9ae:	07d9      	lsls	r1, r3, #31
 800f9b0:	d403      	bmi.n	800f9ba <__lo0bits+0x4e>
 800f9b2:	085b      	lsrs	r3, r3, #1
 800f9b4:	f102 0201 	add.w	r2, r2, #1
 800f9b8:	d003      	beq.n	800f9c2 <__lo0bits+0x56>
 800f9ba:	6003      	str	r3, [r0, #0]
 800f9bc:	e7e5      	b.n	800f98a <__lo0bits+0x1e>
 800f9be:	2200      	movs	r2, #0
 800f9c0:	e7e3      	b.n	800f98a <__lo0bits+0x1e>
 800f9c2:	2220      	movs	r2, #32
 800f9c4:	e7e1      	b.n	800f98a <__lo0bits+0x1e>
	...

0800f9c8 <__i2b>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	f7ff ff05 	bl	800f7dc <_Balloc>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	b928      	cbnz	r0, 800f9e2 <__i2b+0x1a>
 800f9d6:	4b05      	ldr	r3, [pc, #20]	; (800f9ec <__i2b+0x24>)
 800f9d8:	4805      	ldr	r0, [pc, #20]	; (800f9f0 <__i2b+0x28>)
 800f9da:	f240 1145 	movw	r1, #325	; 0x145
 800f9de:	f7fe f8bf 	bl	800db60 <__assert_func>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	6144      	str	r4, [r0, #20]
 800f9e6:	6103      	str	r3, [r0, #16]
 800f9e8:	bd10      	pop	{r4, pc}
 800f9ea:	bf00      	nop
 800f9ec:	0801578d 	.word	0x0801578d
 800f9f0:	080157ca 	.word	0x080157ca

0800f9f4 <__multiply>:
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	4691      	mov	r9, r2
 800f9fa:	690a      	ldr	r2, [r1, #16]
 800f9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	bfb8      	it	lt
 800fa04:	460b      	movlt	r3, r1
 800fa06:	460c      	mov	r4, r1
 800fa08:	bfbc      	itt	lt
 800fa0a:	464c      	movlt	r4, r9
 800fa0c:	4699      	movlt	r9, r3
 800fa0e:	6927      	ldr	r7, [r4, #16]
 800fa10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	6861      	ldr	r1, [r4, #4]
 800fa18:	eb07 060a 	add.w	r6, r7, sl
 800fa1c:	42b3      	cmp	r3, r6
 800fa1e:	b085      	sub	sp, #20
 800fa20:	bfb8      	it	lt
 800fa22:	3101      	addlt	r1, #1
 800fa24:	f7ff feda 	bl	800f7dc <_Balloc>
 800fa28:	b930      	cbnz	r0, 800fa38 <__multiply+0x44>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	4b44      	ldr	r3, [pc, #272]	; (800fb40 <__multiply+0x14c>)
 800fa2e:	4845      	ldr	r0, [pc, #276]	; (800fb44 <__multiply+0x150>)
 800fa30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fa34:	f7fe f894 	bl	800db60 <__assert_func>
 800fa38:	f100 0514 	add.w	r5, r0, #20
 800fa3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa40:	462b      	mov	r3, r5
 800fa42:	2200      	movs	r2, #0
 800fa44:	4543      	cmp	r3, r8
 800fa46:	d321      	bcc.n	800fa8c <__multiply+0x98>
 800fa48:	f104 0314 	add.w	r3, r4, #20
 800fa4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa50:	f109 0314 	add.w	r3, r9, #20
 800fa54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa58:	9202      	str	r2, [sp, #8]
 800fa5a:	1b3a      	subs	r2, r7, r4
 800fa5c:	3a15      	subs	r2, #21
 800fa5e:	f022 0203 	bic.w	r2, r2, #3
 800fa62:	3204      	adds	r2, #4
 800fa64:	f104 0115 	add.w	r1, r4, #21
 800fa68:	428f      	cmp	r7, r1
 800fa6a:	bf38      	it	cc
 800fa6c:	2204      	movcc	r2, #4
 800fa6e:	9201      	str	r2, [sp, #4]
 800fa70:	9a02      	ldr	r2, [sp, #8]
 800fa72:	9303      	str	r3, [sp, #12]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d80c      	bhi.n	800fa92 <__multiply+0x9e>
 800fa78:	2e00      	cmp	r6, #0
 800fa7a:	dd03      	ble.n	800fa84 <__multiply+0x90>
 800fa7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d05b      	beq.n	800fb3c <__multiply+0x148>
 800fa84:	6106      	str	r6, [r0, #16]
 800fa86:	b005      	add	sp, #20
 800fa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8c:	f843 2b04 	str.w	r2, [r3], #4
 800fa90:	e7d8      	b.n	800fa44 <__multiply+0x50>
 800fa92:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa96:	f1ba 0f00 	cmp.w	sl, #0
 800fa9a:	d024      	beq.n	800fae6 <__multiply+0xf2>
 800fa9c:	f104 0e14 	add.w	lr, r4, #20
 800faa0:	46a9      	mov	r9, r5
 800faa2:	f04f 0c00 	mov.w	ip, #0
 800faa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800faaa:	f8d9 1000 	ldr.w	r1, [r9]
 800faae:	fa1f fb82 	uxth.w	fp, r2
 800fab2:	b289      	uxth	r1, r1
 800fab4:	fb0a 110b 	mla	r1, sl, fp, r1
 800fab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fabc:	f8d9 2000 	ldr.w	r2, [r9]
 800fac0:	4461      	add	r1, ip
 800fac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fac6:	fb0a c20b 	mla	r2, sl, fp, ip
 800faca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800face:	b289      	uxth	r1, r1
 800fad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fad4:	4577      	cmp	r7, lr
 800fad6:	f849 1b04 	str.w	r1, [r9], #4
 800fada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fade:	d8e2      	bhi.n	800faa6 <__multiply+0xb2>
 800fae0:	9a01      	ldr	r2, [sp, #4]
 800fae2:	f845 c002 	str.w	ip, [r5, r2]
 800fae6:	9a03      	ldr	r2, [sp, #12]
 800fae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800faec:	3304      	adds	r3, #4
 800faee:	f1b9 0f00 	cmp.w	r9, #0
 800faf2:	d021      	beq.n	800fb38 <__multiply+0x144>
 800faf4:	6829      	ldr	r1, [r5, #0]
 800faf6:	f104 0c14 	add.w	ip, r4, #20
 800fafa:	46ae      	mov	lr, r5
 800fafc:	f04f 0a00 	mov.w	sl, #0
 800fb00:	f8bc b000 	ldrh.w	fp, [ip]
 800fb04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb08:	fb09 220b 	mla	r2, r9, fp, r2
 800fb0c:	4452      	add	r2, sl
 800fb0e:	b289      	uxth	r1, r1
 800fb10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb14:	f84e 1b04 	str.w	r1, [lr], #4
 800fb18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb20:	f8be 1000 	ldrh.w	r1, [lr]
 800fb24:	fb09 110a 	mla	r1, r9, sl, r1
 800fb28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fb2c:	4567      	cmp	r7, ip
 800fb2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb32:	d8e5      	bhi.n	800fb00 <__multiply+0x10c>
 800fb34:	9a01      	ldr	r2, [sp, #4]
 800fb36:	50a9      	str	r1, [r5, r2]
 800fb38:	3504      	adds	r5, #4
 800fb3a:	e799      	b.n	800fa70 <__multiply+0x7c>
 800fb3c:	3e01      	subs	r6, #1
 800fb3e:	e79b      	b.n	800fa78 <__multiply+0x84>
 800fb40:	0801578d 	.word	0x0801578d
 800fb44:	080157ca 	.word	0x080157ca

0800fb48 <__pow5mult>:
 800fb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	f012 0203 	ands.w	r2, r2, #3
 800fb52:	4606      	mov	r6, r0
 800fb54:	460f      	mov	r7, r1
 800fb56:	d007      	beq.n	800fb68 <__pow5mult+0x20>
 800fb58:	4c25      	ldr	r4, [pc, #148]	; (800fbf0 <__pow5mult+0xa8>)
 800fb5a:	3a01      	subs	r2, #1
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb62:	f7ff fe9d 	bl	800f8a0 <__multadd>
 800fb66:	4607      	mov	r7, r0
 800fb68:	10ad      	asrs	r5, r5, #2
 800fb6a:	d03d      	beq.n	800fbe8 <__pow5mult+0xa0>
 800fb6c:	69f4      	ldr	r4, [r6, #28]
 800fb6e:	b97c      	cbnz	r4, 800fb90 <__pow5mult+0x48>
 800fb70:	2010      	movs	r0, #16
 800fb72:	f7ff fb49 	bl	800f208 <malloc>
 800fb76:	4602      	mov	r2, r0
 800fb78:	61f0      	str	r0, [r6, #28]
 800fb7a:	b928      	cbnz	r0, 800fb88 <__pow5mult+0x40>
 800fb7c:	4b1d      	ldr	r3, [pc, #116]	; (800fbf4 <__pow5mult+0xac>)
 800fb7e:	481e      	ldr	r0, [pc, #120]	; (800fbf8 <__pow5mult+0xb0>)
 800fb80:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fb84:	f7fd ffec 	bl	800db60 <__assert_func>
 800fb88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb8c:	6004      	str	r4, [r0, #0]
 800fb8e:	60c4      	str	r4, [r0, #12]
 800fb90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fb94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb98:	b94c      	cbnz	r4, 800fbae <__pow5mult+0x66>
 800fb9a:	f240 2171 	movw	r1, #625	; 0x271
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f7ff ff12 	bl	800f9c8 <__i2b>
 800fba4:	2300      	movs	r3, #0
 800fba6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbaa:	4604      	mov	r4, r0
 800fbac:	6003      	str	r3, [r0, #0]
 800fbae:	f04f 0900 	mov.w	r9, #0
 800fbb2:	07eb      	lsls	r3, r5, #31
 800fbb4:	d50a      	bpl.n	800fbcc <__pow5mult+0x84>
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	4622      	mov	r2, r4
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ff1a 	bl	800f9f4 <__multiply>
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f7ff fe49 	bl	800f85c <_Bfree>
 800fbca:	4647      	mov	r7, r8
 800fbcc:	106d      	asrs	r5, r5, #1
 800fbce:	d00b      	beq.n	800fbe8 <__pow5mult+0xa0>
 800fbd0:	6820      	ldr	r0, [r4, #0]
 800fbd2:	b938      	cbnz	r0, 800fbe4 <__pow5mult+0x9c>
 800fbd4:	4622      	mov	r2, r4
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f7ff ff0b 	bl	800f9f4 <__multiply>
 800fbde:	6020      	str	r0, [r4, #0]
 800fbe0:	f8c0 9000 	str.w	r9, [r0]
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	e7e4      	b.n	800fbb2 <__pow5mult+0x6a>
 800fbe8:	4638      	mov	r0, r7
 800fbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbee:	bf00      	nop
 800fbf0:	08015918 	.word	0x08015918
 800fbf4:	0801557a 	.word	0x0801557a
 800fbf8:	080157ca 	.word	0x080157ca

0800fbfc <__lshift>:
 800fbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	460c      	mov	r4, r1
 800fc02:	6849      	ldr	r1, [r1, #4]
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc0a:	68a3      	ldr	r3, [r4, #8]
 800fc0c:	4607      	mov	r7, r0
 800fc0e:	4691      	mov	r9, r2
 800fc10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc14:	f108 0601 	add.w	r6, r8, #1
 800fc18:	42b3      	cmp	r3, r6
 800fc1a:	db0b      	blt.n	800fc34 <__lshift+0x38>
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f7ff fddd 	bl	800f7dc <_Balloc>
 800fc22:	4605      	mov	r5, r0
 800fc24:	b948      	cbnz	r0, 800fc3a <__lshift+0x3e>
 800fc26:	4602      	mov	r2, r0
 800fc28:	4b28      	ldr	r3, [pc, #160]	; (800fccc <__lshift+0xd0>)
 800fc2a:	4829      	ldr	r0, [pc, #164]	; (800fcd0 <__lshift+0xd4>)
 800fc2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fc30:	f7fd ff96 	bl	800db60 <__assert_func>
 800fc34:	3101      	adds	r1, #1
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	e7ee      	b.n	800fc18 <__lshift+0x1c>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f100 0114 	add.w	r1, r0, #20
 800fc40:	f100 0210 	add.w	r2, r0, #16
 800fc44:	4618      	mov	r0, r3
 800fc46:	4553      	cmp	r3, sl
 800fc48:	db33      	blt.n	800fcb2 <__lshift+0xb6>
 800fc4a:	6920      	ldr	r0, [r4, #16]
 800fc4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc50:	f104 0314 	add.w	r3, r4, #20
 800fc54:	f019 091f 	ands.w	r9, r9, #31
 800fc58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc60:	d02b      	beq.n	800fcba <__lshift+0xbe>
 800fc62:	f1c9 0e20 	rsb	lr, r9, #32
 800fc66:	468a      	mov	sl, r1
 800fc68:	2200      	movs	r2, #0
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	fa00 f009 	lsl.w	r0, r0, r9
 800fc70:	4310      	orrs	r0, r2
 800fc72:	f84a 0b04 	str.w	r0, [sl], #4
 800fc76:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc7a:	459c      	cmp	ip, r3
 800fc7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc80:	d8f3      	bhi.n	800fc6a <__lshift+0x6e>
 800fc82:	ebac 0304 	sub.w	r3, ip, r4
 800fc86:	3b15      	subs	r3, #21
 800fc88:	f023 0303 	bic.w	r3, r3, #3
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	f104 0015 	add.w	r0, r4, #21
 800fc92:	4584      	cmp	ip, r0
 800fc94:	bf38      	it	cc
 800fc96:	2304      	movcc	r3, #4
 800fc98:	50ca      	str	r2, [r1, r3]
 800fc9a:	b10a      	cbz	r2, 800fca0 <__lshift+0xa4>
 800fc9c:	f108 0602 	add.w	r6, r8, #2
 800fca0:	3e01      	subs	r6, #1
 800fca2:	4638      	mov	r0, r7
 800fca4:	612e      	str	r6, [r5, #16]
 800fca6:	4621      	mov	r1, r4
 800fca8:	f7ff fdd8 	bl	800f85c <_Bfree>
 800fcac:	4628      	mov	r0, r5
 800fcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	e7c5      	b.n	800fc46 <__lshift+0x4a>
 800fcba:	3904      	subs	r1, #4
 800fcbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcc4:	459c      	cmp	ip, r3
 800fcc6:	d8f9      	bhi.n	800fcbc <__lshift+0xc0>
 800fcc8:	e7ea      	b.n	800fca0 <__lshift+0xa4>
 800fcca:	bf00      	nop
 800fccc:	0801578d 	.word	0x0801578d
 800fcd0:	080157ca 	.word	0x080157ca

0800fcd4 <__mcmp>:
 800fcd4:	b530      	push	{r4, r5, lr}
 800fcd6:	6902      	ldr	r2, [r0, #16]
 800fcd8:	690c      	ldr	r4, [r1, #16]
 800fcda:	1b12      	subs	r2, r2, r4
 800fcdc:	d10e      	bne.n	800fcfc <__mcmp+0x28>
 800fcde:	f100 0314 	add.w	r3, r0, #20
 800fce2:	3114      	adds	r1, #20
 800fce4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fce8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcf4:	42a5      	cmp	r5, r4
 800fcf6:	d003      	beq.n	800fd00 <__mcmp+0x2c>
 800fcf8:	d305      	bcc.n	800fd06 <__mcmp+0x32>
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	bd30      	pop	{r4, r5, pc}
 800fd00:	4283      	cmp	r3, r0
 800fd02:	d3f3      	bcc.n	800fcec <__mcmp+0x18>
 800fd04:	e7fa      	b.n	800fcfc <__mcmp+0x28>
 800fd06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd0a:	e7f7      	b.n	800fcfc <__mcmp+0x28>

0800fd0c <__mdiff>:
 800fd0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	460c      	mov	r4, r1
 800fd12:	4606      	mov	r6, r0
 800fd14:	4611      	mov	r1, r2
 800fd16:	4620      	mov	r0, r4
 800fd18:	4690      	mov	r8, r2
 800fd1a:	f7ff ffdb 	bl	800fcd4 <__mcmp>
 800fd1e:	1e05      	subs	r5, r0, #0
 800fd20:	d110      	bne.n	800fd44 <__mdiff+0x38>
 800fd22:	4629      	mov	r1, r5
 800fd24:	4630      	mov	r0, r6
 800fd26:	f7ff fd59 	bl	800f7dc <_Balloc>
 800fd2a:	b930      	cbnz	r0, 800fd3a <__mdiff+0x2e>
 800fd2c:	4b3a      	ldr	r3, [pc, #232]	; (800fe18 <__mdiff+0x10c>)
 800fd2e:	4602      	mov	r2, r0
 800fd30:	f240 2137 	movw	r1, #567	; 0x237
 800fd34:	4839      	ldr	r0, [pc, #228]	; (800fe1c <__mdiff+0x110>)
 800fd36:	f7fd ff13 	bl	800db60 <__assert_func>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd44:	bfa4      	itt	ge
 800fd46:	4643      	movge	r3, r8
 800fd48:	46a0      	movge	r8, r4
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd50:	bfa6      	itte	ge
 800fd52:	461c      	movge	r4, r3
 800fd54:	2500      	movge	r5, #0
 800fd56:	2501      	movlt	r5, #1
 800fd58:	f7ff fd40 	bl	800f7dc <_Balloc>
 800fd5c:	b920      	cbnz	r0, 800fd68 <__mdiff+0x5c>
 800fd5e:	4b2e      	ldr	r3, [pc, #184]	; (800fe18 <__mdiff+0x10c>)
 800fd60:	4602      	mov	r2, r0
 800fd62:	f240 2145 	movw	r1, #581	; 0x245
 800fd66:	e7e5      	b.n	800fd34 <__mdiff+0x28>
 800fd68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd6c:	6926      	ldr	r6, [r4, #16]
 800fd6e:	60c5      	str	r5, [r0, #12]
 800fd70:	f104 0914 	add.w	r9, r4, #20
 800fd74:	f108 0514 	add.w	r5, r8, #20
 800fd78:	f100 0e14 	add.w	lr, r0, #20
 800fd7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd84:	f108 0210 	add.w	r2, r8, #16
 800fd88:	46f2      	mov	sl, lr
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd94:	fa11 f88b 	uxtah	r8, r1, fp
 800fd98:	b299      	uxth	r1, r3
 800fd9a:	0c1b      	lsrs	r3, r3, #16
 800fd9c:	eba8 0801 	sub.w	r8, r8, r1
 800fda0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fda4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fda8:	fa1f f888 	uxth.w	r8, r8
 800fdac:	1419      	asrs	r1, r3, #16
 800fdae:	454e      	cmp	r6, r9
 800fdb0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdb4:	f84a 3b04 	str.w	r3, [sl], #4
 800fdb8:	d8e8      	bhi.n	800fd8c <__mdiff+0x80>
 800fdba:	1b33      	subs	r3, r6, r4
 800fdbc:	3b15      	subs	r3, #21
 800fdbe:	f023 0303 	bic.w	r3, r3, #3
 800fdc2:	3304      	adds	r3, #4
 800fdc4:	3415      	adds	r4, #21
 800fdc6:	42a6      	cmp	r6, r4
 800fdc8:	bf38      	it	cc
 800fdca:	2304      	movcc	r3, #4
 800fdcc:	441d      	add	r5, r3
 800fdce:	4473      	add	r3, lr
 800fdd0:	469e      	mov	lr, r3
 800fdd2:	462e      	mov	r6, r5
 800fdd4:	4566      	cmp	r6, ip
 800fdd6:	d30e      	bcc.n	800fdf6 <__mdiff+0xea>
 800fdd8:	f10c 0203 	add.w	r2, ip, #3
 800fddc:	1b52      	subs	r2, r2, r5
 800fdde:	f022 0203 	bic.w	r2, r2, #3
 800fde2:	3d03      	subs	r5, #3
 800fde4:	45ac      	cmp	ip, r5
 800fde6:	bf38      	it	cc
 800fde8:	2200      	movcc	r2, #0
 800fdea:	4413      	add	r3, r2
 800fdec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fdf0:	b17a      	cbz	r2, 800fe12 <__mdiff+0x106>
 800fdf2:	6107      	str	r7, [r0, #16]
 800fdf4:	e7a4      	b.n	800fd40 <__mdiff+0x34>
 800fdf6:	f856 8b04 	ldr.w	r8, [r6], #4
 800fdfa:	fa11 f288 	uxtah	r2, r1, r8
 800fdfe:	1414      	asrs	r4, r2, #16
 800fe00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe04:	b292      	uxth	r2, r2
 800fe06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe0a:	f84e 2b04 	str.w	r2, [lr], #4
 800fe0e:	1421      	asrs	r1, r4, #16
 800fe10:	e7e0      	b.n	800fdd4 <__mdiff+0xc8>
 800fe12:	3f01      	subs	r7, #1
 800fe14:	e7ea      	b.n	800fdec <__mdiff+0xe0>
 800fe16:	bf00      	nop
 800fe18:	0801578d 	.word	0x0801578d
 800fe1c:	080157ca 	.word	0x080157ca

0800fe20 <__d2b>:
 800fe20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	460f      	mov	r7, r1
 800fe26:	2101      	movs	r1, #1
 800fe28:	ec59 8b10 	vmov	r8, r9, d0
 800fe2c:	4616      	mov	r6, r2
 800fe2e:	f7ff fcd5 	bl	800f7dc <_Balloc>
 800fe32:	4604      	mov	r4, r0
 800fe34:	b930      	cbnz	r0, 800fe44 <__d2b+0x24>
 800fe36:	4602      	mov	r2, r0
 800fe38:	4b24      	ldr	r3, [pc, #144]	; (800fecc <__d2b+0xac>)
 800fe3a:	4825      	ldr	r0, [pc, #148]	; (800fed0 <__d2b+0xb0>)
 800fe3c:	f240 310f 	movw	r1, #783	; 0x30f
 800fe40:	f7fd fe8e 	bl	800db60 <__assert_func>
 800fe44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe4c:	bb2d      	cbnz	r5, 800fe9a <__d2b+0x7a>
 800fe4e:	9301      	str	r3, [sp, #4]
 800fe50:	f1b8 0300 	subs.w	r3, r8, #0
 800fe54:	d026      	beq.n	800fea4 <__d2b+0x84>
 800fe56:	4668      	mov	r0, sp
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	f7ff fd87 	bl	800f96c <__lo0bits>
 800fe5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe62:	b1e8      	cbz	r0, 800fea0 <__d2b+0x80>
 800fe64:	f1c0 0320 	rsb	r3, r0, #32
 800fe68:	fa02 f303 	lsl.w	r3, r2, r3
 800fe6c:	430b      	orrs	r3, r1
 800fe6e:	40c2      	lsrs	r2, r0
 800fe70:	6163      	str	r3, [r4, #20]
 800fe72:	9201      	str	r2, [sp, #4]
 800fe74:	9b01      	ldr	r3, [sp, #4]
 800fe76:	61a3      	str	r3, [r4, #24]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	bf14      	ite	ne
 800fe7c:	2202      	movne	r2, #2
 800fe7e:	2201      	moveq	r2, #1
 800fe80:	6122      	str	r2, [r4, #16]
 800fe82:	b1bd      	cbz	r5, 800feb4 <__d2b+0x94>
 800fe84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe88:	4405      	add	r5, r0
 800fe8a:	603d      	str	r5, [r7, #0]
 800fe8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe90:	6030      	str	r0, [r6, #0]
 800fe92:	4620      	mov	r0, r4
 800fe94:	b003      	add	sp, #12
 800fe96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe9e:	e7d6      	b.n	800fe4e <__d2b+0x2e>
 800fea0:	6161      	str	r1, [r4, #20]
 800fea2:	e7e7      	b.n	800fe74 <__d2b+0x54>
 800fea4:	a801      	add	r0, sp, #4
 800fea6:	f7ff fd61 	bl	800f96c <__lo0bits>
 800feaa:	9b01      	ldr	r3, [sp, #4]
 800feac:	6163      	str	r3, [r4, #20]
 800feae:	3020      	adds	r0, #32
 800feb0:	2201      	movs	r2, #1
 800feb2:	e7e5      	b.n	800fe80 <__d2b+0x60>
 800feb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800feb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800febc:	6038      	str	r0, [r7, #0]
 800febe:	6918      	ldr	r0, [r3, #16]
 800fec0:	f7ff fd34 	bl	800f92c <__hi0bits>
 800fec4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fec8:	e7e2      	b.n	800fe90 <__d2b+0x70>
 800feca:	bf00      	nop
 800fecc:	0801578d 	.word	0x0801578d
 800fed0:	080157ca 	.word	0x080157ca

0800fed4 <fiprintf>:
 800fed4:	b40e      	push	{r1, r2, r3}
 800fed6:	b503      	push	{r0, r1, lr}
 800fed8:	4601      	mov	r1, r0
 800feda:	ab03      	add	r3, sp, #12
 800fedc:	4805      	ldr	r0, [pc, #20]	; (800fef4 <fiprintf+0x20>)
 800fede:	f853 2b04 	ldr.w	r2, [r3], #4
 800fee2:	6800      	ldr	r0, [r0, #0]
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	f7ff f875 	bl	800efd4 <_vfiprintf_r>
 800feea:	b002      	add	sp, #8
 800feec:	f85d eb04 	ldr.w	lr, [sp], #4
 800fef0:	b003      	add	sp, #12
 800fef2:	4770      	bx	lr
 800fef4:	200000a4 	.word	0x200000a4

0800fef8 <__submore>:
 800fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefc:	460c      	mov	r4, r1
 800fefe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ff00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff04:	4299      	cmp	r1, r3
 800ff06:	d11d      	bne.n	800ff44 <__submore+0x4c>
 800ff08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ff0c:	f7ff f9a4 	bl	800f258 <_malloc_r>
 800ff10:	b918      	cbnz	r0, 800ff1a <__submore+0x22>
 800ff12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff1e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ff24:	6360      	str	r0, [r4, #52]	; 0x34
 800ff26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ff2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ff2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ff32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ff3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ff3e:	6020      	str	r0, [r4, #0]
 800ff40:	2000      	movs	r0, #0
 800ff42:	e7e8      	b.n	800ff16 <__submore+0x1e>
 800ff44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ff46:	0077      	lsls	r7, r6, #1
 800ff48:	463a      	mov	r2, r7
 800ff4a:	f000 f80f 	bl	800ff6c <_realloc_r>
 800ff4e:	4605      	mov	r5, r0
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d0de      	beq.n	800ff12 <__submore+0x1a>
 800ff54:	eb00 0806 	add.w	r8, r0, r6
 800ff58:	4601      	mov	r1, r0
 800ff5a:	4632      	mov	r2, r6
 800ff5c:	4640      	mov	r0, r8
 800ff5e:	f7fd fdf0 	bl	800db42 <memcpy>
 800ff62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ff66:	f8c4 8000 	str.w	r8, [r4]
 800ff6a:	e7e9      	b.n	800ff40 <__submore+0x48>

0800ff6c <_realloc_r>:
 800ff6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff70:	4680      	mov	r8, r0
 800ff72:	4614      	mov	r4, r2
 800ff74:	460e      	mov	r6, r1
 800ff76:	b921      	cbnz	r1, 800ff82 <_realloc_r+0x16>
 800ff78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	f7ff b96b 	b.w	800f258 <_malloc_r>
 800ff82:	b92a      	cbnz	r2, 800ff90 <_realloc_r+0x24>
 800ff84:	f7fe fc86 	bl	800e894 <_free_r>
 800ff88:	4625      	mov	r5, r4
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff90:	f000 fa03 	bl	801039a <_malloc_usable_size_r>
 800ff94:	4284      	cmp	r4, r0
 800ff96:	4607      	mov	r7, r0
 800ff98:	d802      	bhi.n	800ffa0 <_realloc_r+0x34>
 800ff9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff9e:	d812      	bhi.n	800ffc6 <_realloc_r+0x5a>
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	f7ff f958 	bl	800f258 <_malloc_r>
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d0ed      	beq.n	800ff8a <_realloc_r+0x1e>
 800ffae:	42bc      	cmp	r4, r7
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	bf28      	it	cs
 800ffb6:	463a      	movcs	r2, r7
 800ffb8:	f7fd fdc3 	bl	800db42 <memcpy>
 800ffbc:	4631      	mov	r1, r6
 800ffbe:	4640      	mov	r0, r8
 800ffc0:	f7fe fc68 	bl	800e894 <_free_r>
 800ffc4:	e7e1      	b.n	800ff8a <_realloc_r+0x1e>
 800ffc6:	4635      	mov	r5, r6
 800ffc8:	e7df      	b.n	800ff8a <_realloc_r+0x1e>
	...

0800ffcc <_strtoul_l.constprop.0>:
 800ffcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffd0:	4f36      	ldr	r7, [pc, #216]	; (80100ac <_strtoul_l.constprop.0+0xe0>)
 800ffd2:	4686      	mov	lr, r0
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffdc:	5d3e      	ldrb	r6, [r7, r4]
 800ffde:	f016 0608 	ands.w	r6, r6, #8
 800ffe2:	d1f8      	bne.n	800ffd6 <_strtoul_l.constprop.0+0xa>
 800ffe4:	2c2d      	cmp	r4, #45	; 0x2d
 800ffe6:	d130      	bne.n	801004a <_strtoul_l.constprop.0+0x7e>
 800ffe8:	782c      	ldrb	r4, [r5, #0]
 800ffea:	2601      	movs	r6, #1
 800ffec:	1c85      	adds	r5, r0, #2
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d057      	beq.n	80100a2 <_strtoul_l.constprop.0+0xd6>
 800fff2:	2b10      	cmp	r3, #16
 800fff4:	d109      	bne.n	801000a <_strtoul_l.constprop.0+0x3e>
 800fff6:	2c30      	cmp	r4, #48	; 0x30
 800fff8:	d107      	bne.n	801000a <_strtoul_l.constprop.0+0x3e>
 800fffa:	7828      	ldrb	r0, [r5, #0]
 800fffc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010000:	2858      	cmp	r0, #88	; 0x58
 8010002:	d149      	bne.n	8010098 <_strtoul_l.constprop.0+0xcc>
 8010004:	786c      	ldrb	r4, [r5, #1]
 8010006:	2310      	movs	r3, #16
 8010008:	3502      	adds	r5, #2
 801000a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801000e:	2700      	movs	r7, #0
 8010010:	fbb8 f8f3 	udiv	r8, r8, r3
 8010014:	fb03 f908 	mul.w	r9, r3, r8
 8010018:	ea6f 0909 	mvn.w	r9, r9
 801001c:	4638      	mov	r0, r7
 801001e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010022:	f1bc 0f09 	cmp.w	ip, #9
 8010026:	d815      	bhi.n	8010054 <_strtoul_l.constprop.0+0x88>
 8010028:	4664      	mov	r4, ip
 801002a:	42a3      	cmp	r3, r4
 801002c:	dd23      	ble.n	8010076 <_strtoul_l.constprop.0+0xaa>
 801002e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8010032:	d007      	beq.n	8010044 <_strtoul_l.constprop.0+0x78>
 8010034:	4580      	cmp	r8, r0
 8010036:	d31b      	bcc.n	8010070 <_strtoul_l.constprop.0+0xa4>
 8010038:	d101      	bne.n	801003e <_strtoul_l.constprop.0+0x72>
 801003a:	45a1      	cmp	r9, r4
 801003c:	db18      	blt.n	8010070 <_strtoul_l.constprop.0+0xa4>
 801003e:	fb00 4003 	mla	r0, r0, r3, r4
 8010042:	2701      	movs	r7, #1
 8010044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010048:	e7e9      	b.n	801001e <_strtoul_l.constprop.0+0x52>
 801004a:	2c2b      	cmp	r4, #43	; 0x2b
 801004c:	bf04      	itt	eq
 801004e:	782c      	ldrbeq	r4, [r5, #0]
 8010050:	1c85      	addeq	r5, r0, #2
 8010052:	e7cc      	b.n	800ffee <_strtoul_l.constprop.0+0x22>
 8010054:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010058:	f1bc 0f19 	cmp.w	ip, #25
 801005c:	d801      	bhi.n	8010062 <_strtoul_l.constprop.0+0x96>
 801005e:	3c37      	subs	r4, #55	; 0x37
 8010060:	e7e3      	b.n	801002a <_strtoul_l.constprop.0+0x5e>
 8010062:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010066:	f1bc 0f19 	cmp.w	ip, #25
 801006a:	d804      	bhi.n	8010076 <_strtoul_l.constprop.0+0xaa>
 801006c:	3c57      	subs	r4, #87	; 0x57
 801006e:	e7dc      	b.n	801002a <_strtoul_l.constprop.0+0x5e>
 8010070:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010074:	e7e6      	b.n	8010044 <_strtoul_l.constprop.0+0x78>
 8010076:	1c7b      	adds	r3, r7, #1
 8010078:	d106      	bne.n	8010088 <_strtoul_l.constprop.0+0xbc>
 801007a:	2322      	movs	r3, #34	; 0x22
 801007c:	f8ce 3000 	str.w	r3, [lr]
 8010080:	4638      	mov	r0, r7
 8010082:	b932      	cbnz	r2, 8010092 <_strtoul_l.constprop.0+0xc6>
 8010084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010088:	b106      	cbz	r6, 801008c <_strtoul_l.constprop.0+0xc0>
 801008a:	4240      	negs	r0, r0
 801008c:	2a00      	cmp	r2, #0
 801008e:	d0f9      	beq.n	8010084 <_strtoul_l.constprop.0+0xb8>
 8010090:	b107      	cbz	r7, 8010094 <_strtoul_l.constprop.0+0xc8>
 8010092:	1e69      	subs	r1, r5, #1
 8010094:	6011      	str	r1, [r2, #0]
 8010096:	e7f5      	b.n	8010084 <_strtoul_l.constprop.0+0xb8>
 8010098:	2430      	movs	r4, #48	; 0x30
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1b5      	bne.n	801000a <_strtoul_l.constprop.0+0x3e>
 801009e:	2308      	movs	r3, #8
 80100a0:	e7b3      	b.n	801000a <_strtoul_l.constprop.0+0x3e>
 80100a2:	2c30      	cmp	r4, #48	; 0x30
 80100a4:	d0a9      	beq.n	800fffa <_strtoul_l.constprop.0+0x2e>
 80100a6:	230a      	movs	r3, #10
 80100a8:	e7af      	b.n	801000a <_strtoul_l.constprop.0+0x3e>
 80100aa:	bf00      	nop
 80100ac:	080155ec 	.word	0x080155ec

080100b0 <_strtoul_r>:
 80100b0:	f7ff bf8c 	b.w	800ffcc <_strtoul_l.constprop.0>

080100b4 <__swbuf_r>:
 80100b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b6:	460e      	mov	r6, r1
 80100b8:	4614      	mov	r4, r2
 80100ba:	4605      	mov	r5, r0
 80100bc:	b118      	cbz	r0, 80100c6 <__swbuf_r+0x12>
 80100be:	6a03      	ldr	r3, [r0, #32]
 80100c0:	b90b      	cbnz	r3, 80100c6 <__swbuf_r+0x12>
 80100c2:	f7fd fb41 	bl	800d748 <__sinit>
 80100c6:	69a3      	ldr	r3, [r4, #24]
 80100c8:	60a3      	str	r3, [r4, #8]
 80100ca:	89a3      	ldrh	r3, [r4, #12]
 80100cc:	071a      	lsls	r2, r3, #28
 80100ce:	d525      	bpl.n	801011c <__swbuf_r+0x68>
 80100d0:	6923      	ldr	r3, [r4, #16]
 80100d2:	b31b      	cbz	r3, 801011c <__swbuf_r+0x68>
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	6922      	ldr	r2, [r4, #16]
 80100d8:	1a98      	subs	r0, r3, r2
 80100da:	6963      	ldr	r3, [r4, #20]
 80100dc:	b2f6      	uxtb	r6, r6
 80100de:	4283      	cmp	r3, r0
 80100e0:	4637      	mov	r7, r6
 80100e2:	dc04      	bgt.n	80100ee <__swbuf_r+0x3a>
 80100e4:	4621      	mov	r1, r4
 80100e6:	4628      	mov	r0, r5
 80100e8:	f7ff fb44 	bl	800f774 <_fflush_r>
 80100ec:	b9e0      	cbnz	r0, 8010128 <__swbuf_r+0x74>
 80100ee:	68a3      	ldr	r3, [r4, #8]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	60a3      	str	r3, [r4, #8]
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	6022      	str	r2, [r4, #0]
 80100fa:	701e      	strb	r6, [r3, #0]
 80100fc:	6962      	ldr	r2, [r4, #20]
 80100fe:	1c43      	adds	r3, r0, #1
 8010100:	429a      	cmp	r2, r3
 8010102:	d004      	beq.n	801010e <__swbuf_r+0x5a>
 8010104:	89a3      	ldrh	r3, [r4, #12]
 8010106:	07db      	lsls	r3, r3, #31
 8010108:	d506      	bpl.n	8010118 <__swbuf_r+0x64>
 801010a:	2e0a      	cmp	r6, #10
 801010c:	d104      	bne.n	8010118 <__swbuf_r+0x64>
 801010e:	4621      	mov	r1, r4
 8010110:	4628      	mov	r0, r5
 8010112:	f7ff fb2f 	bl	800f774 <_fflush_r>
 8010116:	b938      	cbnz	r0, 8010128 <__swbuf_r+0x74>
 8010118:	4638      	mov	r0, r7
 801011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801011c:	4621      	mov	r1, r4
 801011e:	4628      	mov	r0, r5
 8010120:	f000 f806 	bl	8010130 <__swsetup_r>
 8010124:	2800      	cmp	r0, #0
 8010126:	d0d5      	beq.n	80100d4 <__swbuf_r+0x20>
 8010128:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801012c:	e7f4      	b.n	8010118 <__swbuf_r+0x64>
	...

08010130 <__swsetup_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4b2a      	ldr	r3, [pc, #168]	; (80101dc <__swsetup_r+0xac>)
 8010134:	4605      	mov	r5, r0
 8010136:	6818      	ldr	r0, [r3, #0]
 8010138:	460c      	mov	r4, r1
 801013a:	b118      	cbz	r0, 8010144 <__swsetup_r+0x14>
 801013c:	6a03      	ldr	r3, [r0, #32]
 801013e:	b90b      	cbnz	r3, 8010144 <__swsetup_r+0x14>
 8010140:	f7fd fb02 	bl	800d748 <__sinit>
 8010144:	89a3      	ldrh	r3, [r4, #12]
 8010146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801014a:	0718      	lsls	r0, r3, #28
 801014c:	d422      	bmi.n	8010194 <__swsetup_r+0x64>
 801014e:	06d9      	lsls	r1, r3, #27
 8010150:	d407      	bmi.n	8010162 <__swsetup_r+0x32>
 8010152:	2309      	movs	r3, #9
 8010154:	602b      	str	r3, [r5, #0]
 8010156:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801015a:	81a3      	strh	r3, [r4, #12]
 801015c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010160:	e034      	b.n	80101cc <__swsetup_r+0x9c>
 8010162:	0758      	lsls	r0, r3, #29
 8010164:	d512      	bpl.n	801018c <__swsetup_r+0x5c>
 8010166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010168:	b141      	cbz	r1, 801017c <__swsetup_r+0x4c>
 801016a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801016e:	4299      	cmp	r1, r3
 8010170:	d002      	beq.n	8010178 <__swsetup_r+0x48>
 8010172:	4628      	mov	r0, r5
 8010174:	f7fe fb8e 	bl	800e894 <_free_r>
 8010178:	2300      	movs	r3, #0
 801017a:	6363      	str	r3, [r4, #52]	; 0x34
 801017c:	89a3      	ldrh	r3, [r4, #12]
 801017e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010182:	81a3      	strh	r3, [r4, #12]
 8010184:	2300      	movs	r3, #0
 8010186:	6063      	str	r3, [r4, #4]
 8010188:	6923      	ldr	r3, [r4, #16]
 801018a:	6023      	str	r3, [r4, #0]
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	f043 0308 	orr.w	r3, r3, #8
 8010192:	81a3      	strh	r3, [r4, #12]
 8010194:	6923      	ldr	r3, [r4, #16]
 8010196:	b94b      	cbnz	r3, 80101ac <__swsetup_r+0x7c>
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801019e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101a2:	d003      	beq.n	80101ac <__swsetup_r+0x7c>
 80101a4:	4621      	mov	r1, r4
 80101a6:	4628      	mov	r0, r5
 80101a8:	f000 f840 	bl	801022c <__smakebuf_r>
 80101ac:	89a0      	ldrh	r0, [r4, #12]
 80101ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101b2:	f010 0301 	ands.w	r3, r0, #1
 80101b6:	d00a      	beq.n	80101ce <__swsetup_r+0x9e>
 80101b8:	2300      	movs	r3, #0
 80101ba:	60a3      	str	r3, [r4, #8]
 80101bc:	6963      	ldr	r3, [r4, #20]
 80101be:	425b      	negs	r3, r3
 80101c0:	61a3      	str	r3, [r4, #24]
 80101c2:	6923      	ldr	r3, [r4, #16]
 80101c4:	b943      	cbnz	r3, 80101d8 <__swsetup_r+0xa8>
 80101c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101ca:	d1c4      	bne.n	8010156 <__swsetup_r+0x26>
 80101cc:	bd38      	pop	{r3, r4, r5, pc}
 80101ce:	0781      	lsls	r1, r0, #30
 80101d0:	bf58      	it	pl
 80101d2:	6963      	ldrpl	r3, [r4, #20]
 80101d4:	60a3      	str	r3, [r4, #8]
 80101d6:	e7f4      	b.n	80101c2 <__swsetup_r+0x92>
 80101d8:	2000      	movs	r0, #0
 80101da:	e7f7      	b.n	80101cc <__swsetup_r+0x9c>
 80101dc:	200000a4 	.word	0x200000a4

080101e0 <__swhatbuf_r>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	460c      	mov	r4, r1
 80101e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101e8:	2900      	cmp	r1, #0
 80101ea:	b096      	sub	sp, #88	; 0x58
 80101ec:	4615      	mov	r5, r2
 80101ee:	461e      	mov	r6, r3
 80101f0:	da0d      	bge.n	801020e <__swhatbuf_r+0x2e>
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80101f8:	f04f 0100 	mov.w	r1, #0
 80101fc:	bf0c      	ite	eq
 80101fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010202:	2340      	movne	r3, #64	; 0x40
 8010204:	2000      	movs	r0, #0
 8010206:	6031      	str	r1, [r6, #0]
 8010208:	602b      	str	r3, [r5, #0]
 801020a:	b016      	add	sp, #88	; 0x58
 801020c:	bd70      	pop	{r4, r5, r6, pc}
 801020e:	466a      	mov	r2, sp
 8010210:	f000 f862 	bl	80102d8 <_fstat_r>
 8010214:	2800      	cmp	r0, #0
 8010216:	dbec      	blt.n	80101f2 <__swhatbuf_r+0x12>
 8010218:	9901      	ldr	r1, [sp, #4]
 801021a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801021e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010222:	4259      	negs	r1, r3
 8010224:	4159      	adcs	r1, r3
 8010226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801022a:	e7eb      	b.n	8010204 <__swhatbuf_r+0x24>

0801022c <__smakebuf_r>:
 801022c:	898b      	ldrh	r3, [r1, #12]
 801022e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010230:	079d      	lsls	r5, r3, #30
 8010232:	4606      	mov	r6, r0
 8010234:	460c      	mov	r4, r1
 8010236:	d507      	bpl.n	8010248 <__smakebuf_r+0x1c>
 8010238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801023c:	6023      	str	r3, [r4, #0]
 801023e:	6123      	str	r3, [r4, #16]
 8010240:	2301      	movs	r3, #1
 8010242:	6163      	str	r3, [r4, #20]
 8010244:	b002      	add	sp, #8
 8010246:	bd70      	pop	{r4, r5, r6, pc}
 8010248:	ab01      	add	r3, sp, #4
 801024a:	466a      	mov	r2, sp
 801024c:	f7ff ffc8 	bl	80101e0 <__swhatbuf_r>
 8010250:	9900      	ldr	r1, [sp, #0]
 8010252:	4605      	mov	r5, r0
 8010254:	4630      	mov	r0, r6
 8010256:	f7fe ffff 	bl	800f258 <_malloc_r>
 801025a:	b948      	cbnz	r0, 8010270 <__smakebuf_r+0x44>
 801025c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010260:	059a      	lsls	r2, r3, #22
 8010262:	d4ef      	bmi.n	8010244 <__smakebuf_r+0x18>
 8010264:	f023 0303 	bic.w	r3, r3, #3
 8010268:	f043 0302 	orr.w	r3, r3, #2
 801026c:	81a3      	strh	r3, [r4, #12]
 801026e:	e7e3      	b.n	8010238 <__smakebuf_r+0xc>
 8010270:	89a3      	ldrh	r3, [r4, #12]
 8010272:	6020      	str	r0, [r4, #0]
 8010274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010278:	81a3      	strh	r3, [r4, #12]
 801027a:	9b00      	ldr	r3, [sp, #0]
 801027c:	6163      	str	r3, [r4, #20]
 801027e:	9b01      	ldr	r3, [sp, #4]
 8010280:	6120      	str	r0, [r4, #16]
 8010282:	b15b      	cbz	r3, 801029c <__smakebuf_r+0x70>
 8010284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010288:	4630      	mov	r0, r6
 801028a:	f000 f837 	bl	80102fc <_isatty_r>
 801028e:	b128      	cbz	r0, 801029c <__smakebuf_r+0x70>
 8010290:	89a3      	ldrh	r3, [r4, #12]
 8010292:	f023 0303 	bic.w	r3, r3, #3
 8010296:	f043 0301 	orr.w	r3, r3, #1
 801029a:	81a3      	strh	r3, [r4, #12]
 801029c:	89a3      	ldrh	r3, [r4, #12]
 801029e:	431d      	orrs	r5, r3
 80102a0:	81a5      	strh	r5, [r4, #12]
 80102a2:	e7cf      	b.n	8010244 <__smakebuf_r+0x18>

080102a4 <memmove>:
 80102a4:	4288      	cmp	r0, r1
 80102a6:	b510      	push	{r4, lr}
 80102a8:	eb01 0402 	add.w	r4, r1, r2
 80102ac:	d902      	bls.n	80102b4 <memmove+0x10>
 80102ae:	4284      	cmp	r4, r0
 80102b0:	4623      	mov	r3, r4
 80102b2:	d807      	bhi.n	80102c4 <memmove+0x20>
 80102b4:	1e43      	subs	r3, r0, #1
 80102b6:	42a1      	cmp	r1, r4
 80102b8:	d008      	beq.n	80102cc <memmove+0x28>
 80102ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102c2:	e7f8      	b.n	80102b6 <memmove+0x12>
 80102c4:	4402      	add	r2, r0
 80102c6:	4601      	mov	r1, r0
 80102c8:	428a      	cmp	r2, r1
 80102ca:	d100      	bne.n	80102ce <memmove+0x2a>
 80102cc:	bd10      	pop	{r4, pc}
 80102ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102d6:	e7f7      	b.n	80102c8 <memmove+0x24>

080102d8 <_fstat_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	4d07      	ldr	r5, [pc, #28]	; (80102f8 <_fstat_r+0x20>)
 80102dc:	2300      	movs	r3, #0
 80102de:	4604      	mov	r4, r0
 80102e0:	4608      	mov	r0, r1
 80102e2:	4611      	mov	r1, r2
 80102e4:	602b      	str	r3, [r5, #0]
 80102e6:	f7f4 fbd2 	bl	8004a8e <_fstat>
 80102ea:	1c43      	adds	r3, r0, #1
 80102ec:	d102      	bne.n	80102f4 <_fstat_r+0x1c>
 80102ee:	682b      	ldr	r3, [r5, #0]
 80102f0:	b103      	cbz	r3, 80102f4 <_fstat_r+0x1c>
 80102f2:	6023      	str	r3, [r4, #0]
 80102f4:	bd38      	pop	{r3, r4, r5, pc}
 80102f6:	bf00      	nop
 80102f8:	20009abc 	.word	0x20009abc

080102fc <_isatty_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d06      	ldr	r5, [pc, #24]	; (8010318 <_isatty_r+0x1c>)
 8010300:	2300      	movs	r3, #0
 8010302:	4604      	mov	r4, r0
 8010304:	4608      	mov	r0, r1
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	f7f4 fbd1 	bl	8004aae <_isatty>
 801030c:	1c43      	adds	r3, r0, #1
 801030e:	d102      	bne.n	8010316 <_isatty_r+0x1a>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	b103      	cbz	r3, 8010316 <_isatty_r+0x1a>
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	20009abc 	.word	0x20009abc

0801031c <_sbrk_r>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4d06      	ldr	r5, [pc, #24]	; (8010338 <_sbrk_r+0x1c>)
 8010320:	2300      	movs	r3, #0
 8010322:	4604      	mov	r4, r0
 8010324:	4608      	mov	r0, r1
 8010326:	602b      	str	r3, [r5, #0]
 8010328:	f7f4 fbda 	bl	8004ae0 <_sbrk>
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	d102      	bne.n	8010336 <_sbrk_r+0x1a>
 8010330:	682b      	ldr	r3, [r5, #0]
 8010332:	b103      	cbz	r3, 8010336 <_sbrk_r+0x1a>
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	20009abc 	.word	0x20009abc

0801033c <abort>:
 801033c:	b508      	push	{r3, lr}
 801033e:	2006      	movs	r0, #6
 8010340:	f000 f868 	bl	8010414 <raise>
 8010344:	2001      	movs	r0, #1
 8010346:	f7f4 fb53 	bl	80049f0 <_exit>

0801034a <_calloc_r>:
 801034a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801034c:	fba1 2402 	umull	r2, r4, r1, r2
 8010350:	b94c      	cbnz	r4, 8010366 <_calloc_r+0x1c>
 8010352:	4611      	mov	r1, r2
 8010354:	9201      	str	r2, [sp, #4]
 8010356:	f7fe ff7f 	bl	800f258 <_malloc_r>
 801035a:	9a01      	ldr	r2, [sp, #4]
 801035c:	4605      	mov	r5, r0
 801035e:	b930      	cbnz	r0, 801036e <_calloc_r+0x24>
 8010360:	4628      	mov	r0, r5
 8010362:	b003      	add	sp, #12
 8010364:	bd30      	pop	{r4, r5, pc}
 8010366:	220c      	movs	r2, #12
 8010368:	6002      	str	r2, [r0, #0]
 801036a:	2500      	movs	r5, #0
 801036c:	e7f8      	b.n	8010360 <_calloc_r+0x16>
 801036e:	4621      	mov	r1, r4
 8010370:	f7fd fb68 	bl	800da44 <memset>
 8010374:	e7f4      	b.n	8010360 <_calloc_r+0x16>

08010376 <__ascii_mbtowc>:
 8010376:	b082      	sub	sp, #8
 8010378:	b901      	cbnz	r1, 801037c <__ascii_mbtowc+0x6>
 801037a:	a901      	add	r1, sp, #4
 801037c:	b142      	cbz	r2, 8010390 <__ascii_mbtowc+0x1a>
 801037e:	b14b      	cbz	r3, 8010394 <__ascii_mbtowc+0x1e>
 8010380:	7813      	ldrb	r3, [r2, #0]
 8010382:	600b      	str	r3, [r1, #0]
 8010384:	7812      	ldrb	r2, [r2, #0]
 8010386:	1e10      	subs	r0, r2, #0
 8010388:	bf18      	it	ne
 801038a:	2001      	movne	r0, #1
 801038c:	b002      	add	sp, #8
 801038e:	4770      	bx	lr
 8010390:	4610      	mov	r0, r2
 8010392:	e7fb      	b.n	801038c <__ascii_mbtowc+0x16>
 8010394:	f06f 0001 	mvn.w	r0, #1
 8010398:	e7f8      	b.n	801038c <__ascii_mbtowc+0x16>

0801039a <_malloc_usable_size_r>:
 801039a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801039e:	1f18      	subs	r0, r3, #4
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	bfbc      	itt	lt
 80103a4:	580b      	ldrlt	r3, [r1, r0]
 80103a6:	18c0      	addlt	r0, r0, r3
 80103a8:	4770      	bx	lr

080103aa <__ascii_wctomb>:
 80103aa:	b149      	cbz	r1, 80103c0 <__ascii_wctomb+0x16>
 80103ac:	2aff      	cmp	r2, #255	; 0xff
 80103ae:	bf85      	ittet	hi
 80103b0:	238a      	movhi	r3, #138	; 0x8a
 80103b2:	6003      	strhi	r3, [r0, #0]
 80103b4:	700a      	strbls	r2, [r1, #0]
 80103b6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80103ba:	bf98      	it	ls
 80103bc:	2001      	movls	r0, #1
 80103be:	4770      	bx	lr
 80103c0:	4608      	mov	r0, r1
 80103c2:	4770      	bx	lr

080103c4 <_raise_r>:
 80103c4:	291f      	cmp	r1, #31
 80103c6:	b538      	push	{r3, r4, r5, lr}
 80103c8:	4604      	mov	r4, r0
 80103ca:	460d      	mov	r5, r1
 80103cc:	d904      	bls.n	80103d8 <_raise_r+0x14>
 80103ce:	2316      	movs	r3, #22
 80103d0:	6003      	str	r3, [r0, #0]
 80103d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103d6:	bd38      	pop	{r3, r4, r5, pc}
 80103d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80103da:	b112      	cbz	r2, 80103e2 <_raise_r+0x1e>
 80103dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103e0:	b94b      	cbnz	r3, 80103f6 <_raise_r+0x32>
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 f830 	bl	8010448 <_getpid_r>
 80103e8:	462a      	mov	r2, r5
 80103ea:	4601      	mov	r1, r0
 80103ec:	4620      	mov	r0, r4
 80103ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103f2:	f000 b817 	b.w	8010424 <_kill_r>
 80103f6:	2b01      	cmp	r3, #1
 80103f8:	d00a      	beq.n	8010410 <_raise_r+0x4c>
 80103fa:	1c59      	adds	r1, r3, #1
 80103fc:	d103      	bne.n	8010406 <_raise_r+0x42>
 80103fe:	2316      	movs	r3, #22
 8010400:	6003      	str	r3, [r0, #0]
 8010402:	2001      	movs	r0, #1
 8010404:	e7e7      	b.n	80103d6 <_raise_r+0x12>
 8010406:	2400      	movs	r4, #0
 8010408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801040c:	4628      	mov	r0, r5
 801040e:	4798      	blx	r3
 8010410:	2000      	movs	r0, #0
 8010412:	e7e0      	b.n	80103d6 <_raise_r+0x12>

08010414 <raise>:
 8010414:	4b02      	ldr	r3, [pc, #8]	; (8010420 <raise+0xc>)
 8010416:	4601      	mov	r1, r0
 8010418:	6818      	ldr	r0, [r3, #0]
 801041a:	f7ff bfd3 	b.w	80103c4 <_raise_r>
 801041e:	bf00      	nop
 8010420:	200000a4 	.word	0x200000a4

08010424 <_kill_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4d07      	ldr	r5, [pc, #28]	; (8010444 <_kill_r+0x20>)
 8010428:	2300      	movs	r3, #0
 801042a:	4604      	mov	r4, r0
 801042c:	4608      	mov	r0, r1
 801042e:	4611      	mov	r1, r2
 8010430:	602b      	str	r3, [r5, #0]
 8010432:	f7f4 facd 	bl	80049d0 <_kill>
 8010436:	1c43      	adds	r3, r0, #1
 8010438:	d102      	bne.n	8010440 <_kill_r+0x1c>
 801043a:	682b      	ldr	r3, [r5, #0]
 801043c:	b103      	cbz	r3, 8010440 <_kill_r+0x1c>
 801043e:	6023      	str	r3, [r4, #0]
 8010440:	bd38      	pop	{r3, r4, r5, pc}
 8010442:	bf00      	nop
 8010444:	20009abc 	.word	0x20009abc

08010448 <_getpid_r>:
 8010448:	f7f4 baba 	b.w	80049c0 <_getpid>

0801044c <acos>:
 801044c:	b538      	push	{r3, r4, r5, lr}
 801044e:	ed2d 8b02 	vpush	{d8}
 8010452:	ec55 4b10 	vmov	r4, r5, d0
 8010456:	f000 f82f 	bl	80104b8 <__ieee754_acos>
 801045a:	4622      	mov	r2, r4
 801045c:	462b      	mov	r3, r5
 801045e:	4620      	mov	r0, r4
 8010460:	4629      	mov	r1, r5
 8010462:	eeb0 8a40 	vmov.f32	s16, s0
 8010466:	eef0 8a60 	vmov.f32	s17, s1
 801046a:	f7f0 fb89 	bl	8000b80 <__aeabi_dcmpun>
 801046e:	b9a8      	cbnz	r0, 801049c <acos+0x50>
 8010470:	ec45 4b10 	vmov	d0, r4, r5
 8010474:	f000 faac 	bl	80109d0 <fabs>
 8010478:	4b0c      	ldr	r3, [pc, #48]	; (80104ac <acos+0x60>)
 801047a:	ec51 0b10 	vmov	r0, r1, d0
 801047e:	2200      	movs	r2, #0
 8010480:	f7f0 fb74 	bl	8000b6c <__aeabi_dcmpgt>
 8010484:	b150      	cbz	r0, 801049c <acos+0x50>
 8010486:	f7fd fb2f 	bl	800dae8 <__errno>
 801048a:	ecbd 8b02 	vpop	{d8}
 801048e:	2321      	movs	r3, #33	; 0x21
 8010490:	6003      	str	r3, [r0, #0]
 8010492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010496:	4806      	ldr	r0, [pc, #24]	; (80104b0 <acos+0x64>)
 8010498:	f000 bc02 	b.w	8010ca0 <nan>
 801049c:	eeb0 0a48 	vmov.f32	s0, s16
 80104a0:	eef0 0a68 	vmov.f32	s1, s17
 80104a4:	ecbd 8b02 	vpop	{d8}
 80104a8:	bd38      	pop	{r3, r4, r5, pc}
 80104aa:	bf00      	nop
 80104ac:	3ff00000 	.word	0x3ff00000
 80104b0:	08015727 	.word	0x08015727
 80104b4:	00000000 	.word	0x00000000

080104b8 <__ieee754_acos>:
 80104b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	ec55 4b10 	vmov	r4, r5, d0
 80104c0:	49b7      	ldr	r1, [pc, #732]	; (80107a0 <__ieee754_acos+0x2e8>)
 80104c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104c6:	428b      	cmp	r3, r1
 80104c8:	dd1b      	ble.n	8010502 <__ieee754_acos+0x4a>
 80104ca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80104ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80104d2:	4323      	orrs	r3, r4
 80104d4:	d106      	bne.n	80104e4 <__ieee754_acos+0x2c>
 80104d6:	2d00      	cmp	r5, #0
 80104d8:	f300 8211 	bgt.w	80108fe <__ieee754_acos+0x446>
 80104dc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010738 <__ieee754_acos+0x280>
 80104e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e4:	ee10 2a10 	vmov	r2, s0
 80104e8:	462b      	mov	r3, r5
 80104ea:	ee10 0a10 	vmov	r0, s0
 80104ee:	4629      	mov	r1, r5
 80104f0:	f7ef fef4 	bl	80002dc <__aeabi_dsub>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	f7f0 f9d2 	bl	80008a0 <__aeabi_ddiv>
 80104fc:	ec41 0b10 	vmov	d0, r0, r1
 8010500:	e7ee      	b.n	80104e0 <__ieee754_acos+0x28>
 8010502:	49a8      	ldr	r1, [pc, #672]	; (80107a4 <__ieee754_acos+0x2ec>)
 8010504:	428b      	cmp	r3, r1
 8010506:	f300 8087 	bgt.w	8010618 <__ieee754_acos+0x160>
 801050a:	4aa7      	ldr	r2, [pc, #668]	; (80107a8 <__ieee754_acos+0x2f0>)
 801050c:	4293      	cmp	r3, r2
 801050e:	f340 81f9 	ble.w	8010904 <__ieee754_acos+0x44c>
 8010512:	ee10 2a10 	vmov	r2, s0
 8010516:	ee10 0a10 	vmov	r0, s0
 801051a:	462b      	mov	r3, r5
 801051c:	4629      	mov	r1, r5
 801051e:	f7f0 f895 	bl	800064c <__aeabi_dmul>
 8010522:	a387      	add	r3, pc, #540	; (adr r3, 8010740 <__ieee754_acos+0x288>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	4606      	mov	r6, r0
 801052a:	460f      	mov	r7, r1
 801052c:	f7f0 f88e 	bl	800064c <__aeabi_dmul>
 8010530:	a385      	add	r3, pc, #532	; (adr r3, 8010748 <__ieee754_acos+0x290>)
 8010532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010536:	f7ef fed3 	bl	80002e0 <__adddf3>
 801053a:	4632      	mov	r2, r6
 801053c:	463b      	mov	r3, r7
 801053e:	f7f0 f885 	bl	800064c <__aeabi_dmul>
 8010542:	a383      	add	r3, pc, #524	; (adr r3, 8010750 <__ieee754_acos+0x298>)
 8010544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010548:	f7ef fec8 	bl	80002dc <__aeabi_dsub>
 801054c:	4632      	mov	r2, r6
 801054e:	463b      	mov	r3, r7
 8010550:	f7f0 f87c 	bl	800064c <__aeabi_dmul>
 8010554:	a380      	add	r3, pc, #512	; (adr r3, 8010758 <__ieee754_acos+0x2a0>)
 8010556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055a:	f7ef fec1 	bl	80002e0 <__adddf3>
 801055e:	4632      	mov	r2, r6
 8010560:	463b      	mov	r3, r7
 8010562:	f7f0 f873 	bl	800064c <__aeabi_dmul>
 8010566:	a37e      	add	r3, pc, #504	; (adr r3, 8010760 <__ieee754_acos+0x2a8>)
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	f7ef feb6 	bl	80002dc <__aeabi_dsub>
 8010570:	4632      	mov	r2, r6
 8010572:	463b      	mov	r3, r7
 8010574:	f7f0 f86a 	bl	800064c <__aeabi_dmul>
 8010578:	a37b      	add	r3, pc, #492	; (adr r3, 8010768 <__ieee754_acos+0x2b0>)
 801057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057e:	f7ef feaf 	bl	80002e0 <__adddf3>
 8010582:	4632      	mov	r2, r6
 8010584:	463b      	mov	r3, r7
 8010586:	f7f0 f861 	bl	800064c <__aeabi_dmul>
 801058a:	a379      	add	r3, pc, #484	; (adr r3, 8010770 <__ieee754_acos+0x2b8>)
 801058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010590:	4680      	mov	r8, r0
 8010592:	4689      	mov	r9, r1
 8010594:	4630      	mov	r0, r6
 8010596:	4639      	mov	r1, r7
 8010598:	f7f0 f858 	bl	800064c <__aeabi_dmul>
 801059c:	a376      	add	r3, pc, #472	; (adr r3, 8010778 <__ieee754_acos+0x2c0>)
 801059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a2:	f7ef fe9b 	bl	80002dc <__aeabi_dsub>
 80105a6:	4632      	mov	r2, r6
 80105a8:	463b      	mov	r3, r7
 80105aa:	f7f0 f84f 	bl	800064c <__aeabi_dmul>
 80105ae:	a374      	add	r3, pc, #464	; (adr r3, 8010780 <__ieee754_acos+0x2c8>)
 80105b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b4:	f7ef fe94 	bl	80002e0 <__adddf3>
 80105b8:	4632      	mov	r2, r6
 80105ba:	463b      	mov	r3, r7
 80105bc:	f7f0 f846 	bl	800064c <__aeabi_dmul>
 80105c0:	a371      	add	r3, pc, #452	; (adr r3, 8010788 <__ieee754_acos+0x2d0>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	f7ef fe89 	bl	80002dc <__aeabi_dsub>
 80105ca:	4632      	mov	r2, r6
 80105cc:	463b      	mov	r3, r7
 80105ce:	f7f0 f83d 	bl	800064c <__aeabi_dmul>
 80105d2:	4b76      	ldr	r3, [pc, #472]	; (80107ac <__ieee754_acos+0x2f4>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	f7ef fe83 	bl	80002e0 <__adddf3>
 80105da:	4602      	mov	r2, r0
 80105dc:	460b      	mov	r3, r1
 80105de:	4640      	mov	r0, r8
 80105e0:	4649      	mov	r1, r9
 80105e2:	f7f0 f95d 	bl	80008a0 <__aeabi_ddiv>
 80105e6:	4622      	mov	r2, r4
 80105e8:	462b      	mov	r3, r5
 80105ea:	f7f0 f82f 	bl	800064c <__aeabi_dmul>
 80105ee:	4602      	mov	r2, r0
 80105f0:	460b      	mov	r3, r1
 80105f2:	a167      	add	r1, pc, #412	; (adr r1, 8010790 <__ieee754_acos+0x2d8>)
 80105f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105f8:	f7ef fe70 	bl	80002dc <__aeabi_dsub>
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	4620      	mov	r0, r4
 8010602:	4629      	mov	r1, r5
 8010604:	f7ef fe6a 	bl	80002dc <__aeabi_dsub>
 8010608:	4602      	mov	r2, r0
 801060a:	460b      	mov	r3, r1
 801060c:	a162      	add	r1, pc, #392	; (adr r1, 8010798 <__ieee754_acos+0x2e0>)
 801060e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010612:	f7ef fe63 	bl	80002dc <__aeabi_dsub>
 8010616:	e771      	b.n	80104fc <__ieee754_acos+0x44>
 8010618:	2d00      	cmp	r5, #0
 801061a:	f280 80cb 	bge.w	80107b4 <__ieee754_acos+0x2fc>
 801061e:	ee10 0a10 	vmov	r0, s0
 8010622:	4b62      	ldr	r3, [pc, #392]	; (80107ac <__ieee754_acos+0x2f4>)
 8010624:	2200      	movs	r2, #0
 8010626:	4629      	mov	r1, r5
 8010628:	f7ef fe5a 	bl	80002e0 <__adddf3>
 801062c:	4b60      	ldr	r3, [pc, #384]	; (80107b0 <__ieee754_acos+0x2f8>)
 801062e:	2200      	movs	r2, #0
 8010630:	f7f0 f80c 	bl	800064c <__aeabi_dmul>
 8010634:	a342      	add	r3, pc, #264	; (adr r3, 8010740 <__ieee754_acos+0x288>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	4604      	mov	r4, r0
 801063c:	460d      	mov	r5, r1
 801063e:	f7f0 f805 	bl	800064c <__aeabi_dmul>
 8010642:	a341      	add	r3, pc, #260	; (adr r3, 8010748 <__ieee754_acos+0x290>)
 8010644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010648:	f7ef fe4a 	bl	80002e0 <__adddf3>
 801064c:	4622      	mov	r2, r4
 801064e:	462b      	mov	r3, r5
 8010650:	f7ef fffc 	bl	800064c <__aeabi_dmul>
 8010654:	a33e      	add	r3, pc, #248	; (adr r3, 8010750 <__ieee754_acos+0x298>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	f7ef fe3f 	bl	80002dc <__aeabi_dsub>
 801065e:	4622      	mov	r2, r4
 8010660:	462b      	mov	r3, r5
 8010662:	f7ef fff3 	bl	800064c <__aeabi_dmul>
 8010666:	a33c      	add	r3, pc, #240	; (adr r3, 8010758 <__ieee754_acos+0x2a0>)
 8010668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066c:	f7ef fe38 	bl	80002e0 <__adddf3>
 8010670:	4622      	mov	r2, r4
 8010672:	462b      	mov	r3, r5
 8010674:	f7ef ffea 	bl	800064c <__aeabi_dmul>
 8010678:	a339      	add	r3, pc, #228	; (adr r3, 8010760 <__ieee754_acos+0x2a8>)
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	f7ef fe2d 	bl	80002dc <__aeabi_dsub>
 8010682:	4622      	mov	r2, r4
 8010684:	462b      	mov	r3, r5
 8010686:	f7ef ffe1 	bl	800064c <__aeabi_dmul>
 801068a:	a337      	add	r3, pc, #220	; (adr r3, 8010768 <__ieee754_acos+0x2b0>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fe26 	bl	80002e0 <__adddf3>
 8010694:	4622      	mov	r2, r4
 8010696:	462b      	mov	r3, r5
 8010698:	f7ef ffd8 	bl	800064c <__aeabi_dmul>
 801069c:	ec45 4b10 	vmov	d0, r4, r5
 80106a0:	4680      	mov	r8, r0
 80106a2:	4689      	mov	r9, r1
 80106a4:	f000 f99e 	bl	80109e4 <__ieee754_sqrt>
 80106a8:	a331      	add	r3, pc, #196	; (adr r3, 8010770 <__ieee754_acos+0x2b8>)
 80106aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ae:	4620      	mov	r0, r4
 80106b0:	4629      	mov	r1, r5
 80106b2:	ec57 6b10 	vmov	r6, r7, d0
 80106b6:	f7ef ffc9 	bl	800064c <__aeabi_dmul>
 80106ba:	a32f      	add	r3, pc, #188	; (adr r3, 8010778 <__ieee754_acos+0x2c0>)
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	f7ef fe0c 	bl	80002dc <__aeabi_dsub>
 80106c4:	4622      	mov	r2, r4
 80106c6:	462b      	mov	r3, r5
 80106c8:	f7ef ffc0 	bl	800064c <__aeabi_dmul>
 80106cc:	a32c      	add	r3, pc, #176	; (adr r3, 8010780 <__ieee754_acos+0x2c8>)
 80106ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d2:	f7ef fe05 	bl	80002e0 <__adddf3>
 80106d6:	4622      	mov	r2, r4
 80106d8:	462b      	mov	r3, r5
 80106da:	f7ef ffb7 	bl	800064c <__aeabi_dmul>
 80106de:	a32a      	add	r3, pc, #168	; (adr r3, 8010788 <__ieee754_acos+0x2d0>)
 80106e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e4:	f7ef fdfa 	bl	80002dc <__aeabi_dsub>
 80106e8:	4622      	mov	r2, r4
 80106ea:	462b      	mov	r3, r5
 80106ec:	f7ef ffae 	bl	800064c <__aeabi_dmul>
 80106f0:	4b2e      	ldr	r3, [pc, #184]	; (80107ac <__ieee754_acos+0x2f4>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	f7ef fdf4 	bl	80002e0 <__adddf3>
 80106f8:	4602      	mov	r2, r0
 80106fa:	460b      	mov	r3, r1
 80106fc:	4640      	mov	r0, r8
 80106fe:	4649      	mov	r1, r9
 8010700:	f7f0 f8ce 	bl	80008a0 <__aeabi_ddiv>
 8010704:	4632      	mov	r2, r6
 8010706:	463b      	mov	r3, r7
 8010708:	f7ef ffa0 	bl	800064c <__aeabi_dmul>
 801070c:	a320      	add	r3, pc, #128	; (adr r3, 8010790 <__ieee754_acos+0x2d8>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	f7ef fde3 	bl	80002dc <__aeabi_dsub>
 8010716:	4632      	mov	r2, r6
 8010718:	463b      	mov	r3, r7
 801071a:	f7ef fde1 	bl	80002e0 <__adddf3>
 801071e:	4602      	mov	r2, r0
 8010720:	460b      	mov	r3, r1
 8010722:	f7ef fddd 	bl	80002e0 <__adddf3>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	a103      	add	r1, pc, #12	; (adr r1, 8010738 <__ieee754_acos+0x280>)
 801072c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010730:	e76f      	b.n	8010612 <__ieee754_acos+0x15a>
 8010732:	bf00      	nop
 8010734:	f3af 8000 	nop.w
 8010738:	54442d18 	.word	0x54442d18
 801073c:	400921fb 	.word	0x400921fb
 8010740:	0dfdf709 	.word	0x0dfdf709
 8010744:	3f023de1 	.word	0x3f023de1
 8010748:	7501b288 	.word	0x7501b288
 801074c:	3f49efe0 	.word	0x3f49efe0
 8010750:	b5688f3b 	.word	0xb5688f3b
 8010754:	3fa48228 	.word	0x3fa48228
 8010758:	0e884455 	.word	0x0e884455
 801075c:	3fc9c155 	.word	0x3fc9c155
 8010760:	03eb6f7d 	.word	0x03eb6f7d
 8010764:	3fd4d612 	.word	0x3fd4d612
 8010768:	55555555 	.word	0x55555555
 801076c:	3fc55555 	.word	0x3fc55555
 8010770:	b12e9282 	.word	0xb12e9282
 8010774:	3fb3b8c5 	.word	0x3fb3b8c5
 8010778:	1b8d0159 	.word	0x1b8d0159
 801077c:	3fe6066c 	.word	0x3fe6066c
 8010780:	9c598ac8 	.word	0x9c598ac8
 8010784:	40002ae5 	.word	0x40002ae5
 8010788:	1c8a2d4b 	.word	0x1c8a2d4b
 801078c:	40033a27 	.word	0x40033a27
 8010790:	33145c07 	.word	0x33145c07
 8010794:	3c91a626 	.word	0x3c91a626
 8010798:	54442d18 	.word	0x54442d18
 801079c:	3ff921fb 	.word	0x3ff921fb
 80107a0:	3fefffff 	.word	0x3fefffff
 80107a4:	3fdfffff 	.word	0x3fdfffff
 80107a8:	3c600000 	.word	0x3c600000
 80107ac:	3ff00000 	.word	0x3ff00000
 80107b0:	3fe00000 	.word	0x3fe00000
 80107b4:	ee10 2a10 	vmov	r2, s0
 80107b8:	462b      	mov	r3, r5
 80107ba:	496d      	ldr	r1, [pc, #436]	; (8010970 <__ieee754_acos+0x4b8>)
 80107bc:	2000      	movs	r0, #0
 80107be:	f7ef fd8d 	bl	80002dc <__aeabi_dsub>
 80107c2:	4b6c      	ldr	r3, [pc, #432]	; (8010974 <__ieee754_acos+0x4bc>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	f7ef ff41 	bl	800064c <__aeabi_dmul>
 80107ca:	4604      	mov	r4, r0
 80107cc:	460d      	mov	r5, r1
 80107ce:	ec45 4b10 	vmov	d0, r4, r5
 80107d2:	f000 f907 	bl	80109e4 <__ieee754_sqrt>
 80107d6:	a34e      	add	r3, pc, #312	; (adr r3, 8010910 <__ieee754_acos+0x458>)
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	4620      	mov	r0, r4
 80107de:	4629      	mov	r1, r5
 80107e0:	ec59 8b10 	vmov	r8, r9, d0
 80107e4:	f7ef ff32 	bl	800064c <__aeabi_dmul>
 80107e8:	a34b      	add	r3, pc, #300	; (adr r3, 8010918 <__ieee754_acos+0x460>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	f7ef fd77 	bl	80002e0 <__adddf3>
 80107f2:	4622      	mov	r2, r4
 80107f4:	462b      	mov	r3, r5
 80107f6:	f7ef ff29 	bl	800064c <__aeabi_dmul>
 80107fa:	a349      	add	r3, pc, #292	; (adr r3, 8010920 <__ieee754_acos+0x468>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	f7ef fd6c 	bl	80002dc <__aeabi_dsub>
 8010804:	4622      	mov	r2, r4
 8010806:	462b      	mov	r3, r5
 8010808:	f7ef ff20 	bl	800064c <__aeabi_dmul>
 801080c:	a346      	add	r3, pc, #280	; (adr r3, 8010928 <__ieee754_acos+0x470>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef fd65 	bl	80002e0 <__adddf3>
 8010816:	4622      	mov	r2, r4
 8010818:	462b      	mov	r3, r5
 801081a:	f7ef ff17 	bl	800064c <__aeabi_dmul>
 801081e:	a344      	add	r3, pc, #272	; (adr r3, 8010930 <__ieee754_acos+0x478>)
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f7ef fd5a 	bl	80002dc <__aeabi_dsub>
 8010828:	4622      	mov	r2, r4
 801082a:	462b      	mov	r3, r5
 801082c:	f7ef ff0e 	bl	800064c <__aeabi_dmul>
 8010830:	a341      	add	r3, pc, #260	; (adr r3, 8010938 <__ieee754_acos+0x480>)
 8010832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010836:	f7ef fd53 	bl	80002e0 <__adddf3>
 801083a:	4622      	mov	r2, r4
 801083c:	462b      	mov	r3, r5
 801083e:	f7ef ff05 	bl	800064c <__aeabi_dmul>
 8010842:	a33f      	add	r3, pc, #252	; (adr r3, 8010940 <__ieee754_acos+0x488>)
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	4682      	mov	sl, r0
 801084a:	468b      	mov	fp, r1
 801084c:	4620      	mov	r0, r4
 801084e:	4629      	mov	r1, r5
 8010850:	f7ef fefc 	bl	800064c <__aeabi_dmul>
 8010854:	a33c      	add	r3, pc, #240	; (adr r3, 8010948 <__ieee754_acos+0x490>)
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	f7ef fd3f 	bl	80002dc <__aeabi_dsub>
 801085e:	4622      	mov	r2, r4
 8010860:	462b      	mov	r3, r5
 8010862:	f7ef fef3 	bl	800064c <__aeabi_dmul>
 8010866:	a33a      	add	r3, pc, #232	; (adr r3, 8010950 <__ieee754_acos+0x498>)
 8010868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086c:	f7ef fd38 	bl	80002e0 <__adddf3>
 8010870:	4622      	mov	r2, r4
 8010872:	462b      	mov	r3, r5
 8010874:	f7ef feea 	bl	800064c <__aeabi_dmul>
 8010878:	a337      	add	r3, pc, #220	; (adr r3, 8010958 <__ieee754_acos+0x4a0>)
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	f7ef fd2d 	bl	80002dc <__aeabi_dsub>
 8010882:	4622      	mov	r2, r4
 8010884:	462b      	mov	r3, r5
 8010886:	f7ef fee1 	bl	800064c <__aeabi_dmul>
 801088a:	4b39      	ldr	r3, [pc, #228]	; (8010970 <__ieee754_acos+0x4b8>)
 801088c:	2200      	movs	r2, #0
 801088e:	f7ef fd27 	bl	80002e0 <__adddf3>
 8010892:	4602      	mov	r2, r0
 8010894:	460b      	mov	r3, r1
 8010896:	4650      	mov	r0, sl
 8010898:	4659      	mov	r1, fp
 801089a:	f7f0 f801 	bl	80008a0 <__aeabi_ddiv>
 801089e:	4642      	mov	r2, r8
 80108a0:	464b      	mov	r3, r9
 80108a2:	f7ef fed3 	bl	800064c <__aeabi_dmul>
 80108a6:	2600      	movs	r6, #0
 80108a8:	4682      	mov	sl, r0
 80108aa:	468b      	mov	fp, r1
 80108ac:	4632      	mov	r2, r6
 80108ae:	464b      	mov	r3, r9
 80108b0:	4630      	mov	r0, r6
 80108b2:	4649      	mov	r1, r9
 80108b4:	f7ef feca 	bl	800064c <__aeabi_dmul>
 80108b8:	4602      	mov	r2, r0
 80108ba:	460b      	mov	r3, r1
 80108bc:	4620      	mov	r0, r4
 80108be:	4629      	mov	r1, r5
 80108c0:	f7ef fd0c 	bl	80002dc <__aeabi_dsub>
 80108c4:	4632      	mov	r2, r6
 80108c6:	4604      	mov	r4, r0
 80108c8:	460d      	mov	r5, r1
 80108ca:	464b      	mov	r3, r9
 80108cc:	4640      	mov	r0, r8
 80108ce:	4649      	mov	r1, r9
 80108d0:	f7ef fd06 	bl	80002e0 <__adddf3>
 80108d4:	4602      	mov	r2, r0
 80108d6:	460b      	mov	r3, r1
 80108d8:	4620      	mov	r0, r4
 80108da:	4629      	mov	r1, r5
 80108dc:	f7ef ffe0 	bl	80008a0 <__aeabi_ddiv>
 80108e0:	4602      	mov	r2, r0
 80108e2:	460b      	mov	r3, r1
 80108e4:	4650      	mov	r0, sl
 80108e6:	4659      	mov	r1, fp
 80108e8:	f7ef fcfa 	bl	80002e0 <__adddf3>
 80108ec:	4632      	mov	r2, r6
 80108ee:	464b      	mov	r3, r9
 80108f0:	f7ef fcf6 	bl	80002e0 <__adddf3>
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	f7ef fcf2 	bl	80002e0 <__adddf3>
 80108fc:	e5fe      	b.n	80104fc <__ieee754_acos+0x44>
 80108fe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010960 <__ieee754_acos+0x4a8>
 8010902:	e5ed      	b.n	80104e0 <__ieee754_acos+0x28>
 8010904:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010968 <__ieee754_acos+0x4b0>
 8010908:	e5ea      	b.n	80104e0 <__ieee754_acos+0x28>
 801090a:	bf00      	nop
 801090c:	f3af 8000 	nop.w
 8010910:	0dfdf709 	.word	0x0dfdf709
 8010914:	3f023de1 	.word	0x3f023de1
 8010918:	7501b288 	.word	0x7501b288
 801091c:	3f49efe0 	.word	0x3f49efe0
 8010920:	b5688f3b 	.word	0xb5688f3b
 8010924:	3fa48228 	.word	0x3fa48228
 8010928:	0e884455 	.word	0x0e884455
 801092c:	3fc9c155 	.word	0x3fc9c155
 8010930:	03eb6f7d 	.word	0x03eb6f7d
 8010934:	3fd4d612 	.word	0x3fd4d612
 8010938:	55555555 	.word	0x55555555
 801093c:	3fc55555 	.word	0x3fc55555
 8010940:	b12e9282 	.word	0xb12e9282
 8010944:	3fb3b8c5 	.word	0x3fb3b8c5
 8010948:	1b8d0159 	.word	0x1b8d0159
 801094c:	3fe6066c 	.word	0x3fe6066c
 8010950:	9c598ac8 	.word	0x9c598ac8
 8010954:	40002ae5 	.word	0x40002ae5
 8010958:	1c8a2d4b 	.word	0x1c8a2d4b
 801095c:	40033a27 	.word	0x40033a27
	...
 8010968:	54442d18 	.word	0x54442d18
 801096c:	3ff921fb 	.word	0x3ff921fb
 8010970:	3ff00000 	.word	0x3ff00000
 8010974:	3fe00000 	.word	0x3fe00000

08010978 <sqrt>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	ed2d 8b02 	vpush	{d8}
 801097e:	ec55 4b10 	vmov	r4, r5, d0
 8010982:	f000 f82f 	bl	80109e4 <__ieee754_sqrt>
 8010986:	4622      	mov	r2, r4
 8010988:	462b      	mov	r3, r5
 801098a:	4620      	mov	r0, r4
 801098c:	4629      	mov	r1, r5
 801098e:	eeb0 8a40 	vmov.f32	s16, s0
 8010992:	eef0 8a60 	vmov.f32	s17, s1
 8010996:	f7f0 f8f3 	bl	8000b80 <__aeabi_dcmpun>
 801099a:	b990      	cbnz	r0, 80109c2 <sqrt+0x4a>
 801099c:	2200      	movs	r2, #0
 801099e:	2300      	movs	r3, #0
 80109a0:	4620      	mov	r0, r4
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7f0 f8c4 	bl	8000b30 <__aeabi_dcmplt>
 80109a8:	b158      	cbz	r0, 80109c2 <sqrt+0x4a>
 80109aa:	f7fd f89d 	bl	800dae8 <__errno>
 80109ae:	2321      	movs	r3, #33	; 0x21
 80109b0:	6003      	str	r3, [r0, #0]
 80109b2:	2200      	movs	r2, #0
 80109b4:	2300      	movs	r3, #0
 80109b6:	4610      	mov	r0, r2
 80109b8:	4619      	mov	r1, r3
 80109ba:	f7ef ff71 	bl	80008a0 <__aeabi_ddiv>
 80109be:	ec41 0b18 	vmov	d8, r0, r1
 80109c2:	eeb0 0a48 	vmov.f32	s0, s16
 80109c6:	eef0 0a68 	vmov.f32	s1, s17
 80109ca:	ecbd 8b02 	vpop	{d8}
 80109ce:	bd38      	pop	{r3, r4, r5, pc}

080109d0 <fabs>:
 80109d0:	ec51 0b10 	vmov	r0, r1, d0
 80109d4:	ee10 2a10 	vmov	r2, s0
 80109d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80109dc:	ec43 2b10 	vmov	d0, r2, r3
 80109e0:	4770      	bx	lr
	...

080109e4 <__ieee754_sqrt>:
 80109e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e8:	ec55 4b10 	vmov	r4, r5, d0
 80109ec:	4e67      	ldr	r6, [pc, #412]	; (8010b8c <__ieee754_sqrt+0x1a8>)
 80109ee:	43ae      	bics	r6, r5
 80109f0:	ee10 0a10 	vmov	r0, s0
 80109f4:	ee10 2a10 	vmov	r2, s0
 80109f8:	4629      	mov	r1, r5
 80109fa:	462b      	mov	r3, r5
 80109fc:	d10d      	bne.n	8010a1a <__ieee754_sqrt+0x36>
 80109fe:	f7ef fe25 	bl	800064c <__aeabi_dmul>
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	4620      	mov	r0, r4
 8010a08:	4629      	mov	r1, r5
 8010a0a:	f7ef fc69 	bl	80002e0 <__adddf3>
 8010a0e:	4604      	mov	r4, r0
 8010a10:	460d      	mov	r5, r1
 8010a12:	ec45 4b10 	vmov	d0, r4, r5
 8010a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1a:	2d00      	cmp	r5, #0
 8010a1c:	dc0b      	bgt.n	8010a36 <__ieee754_sqrt+0x52>
 8010a1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010a22:	4326      	orrs	r6, r4
 8010a24:	d0f5      	beq.n	8010a12 <__ieee754_sqrt+0x2e>
 8010a26:	b135      	cbz	r5, 8010a36 <__ieee754_sqrt+0x52>
 8010a28:	f7ef fc58 	bl	80002dc <__aeabi_dsub>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	f7ef ff36 	bl	80008a0 <__aeabi_ddiv>
 8010a34:	e7eb      	b.n	8010a0e <__ieee754_sqrt+0x2a>
 8010a36:	1509      	asrs	r1, r1, #20
 8010a38:	f000 808d 	beq.w	8010b56 <__ieee754_sqrt+0x172>
 8010a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a40:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a48:	07c9      	lsls	r1, r1, #31
 8010a4a:	bf5c      	itt	pl
 8010a4c:	005b      	lslpl	r3, r3, #1
 8010a4e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010a52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a56:	bf58      	it	pl
 8010a58:	0052      	lslpl	r2, r2, #1
 8010a5a:	2500      	movs	r5, #0
 8010a5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010a60:	1076      	asrs	r6, r6, #1
 8010a62:	0052      	lsls	r2, r2, #1
 8010a64:	f04f 0e16 	mov.w	lr, #22
 8010a68:	46ac      	mov	ip, r5
 8010a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a6e:	eb0c 0001 	add.w	r0, ip, r1
 8010a72:	4298      	cmp	r0, r3
 8010a74:	bfde      	ittt	le
 8010a76:	1a1b      	suble	r3, r3, r0
 8010a78:	eb00 0c01 	addle.w	ip, r0, r1
 8010a7c:	186d      	addle	r5, r5, r1
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	f1be 0e01 	subs.w	lr, lr, #1
 8010a84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010a88:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010a8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010a90:	d1ed      	bne.n	8010a6e <__ieee754_sqrt+0x8a>
 8010a92:	4674      	mov	r4, lr
 8010a94:	2720      	movs	r7, #32
 8010a96:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010a9a:	4563      	cmp	r3, ip
 8010a9c:	eb01 000e 	add.w	r0, r1, lr
 8010aa0:	dc02      	bgt.n	8010aa8 <__ieee754_sqrt+0xc4>
 8010aa2:	d113      	bne.n	8010acc <__ieee754_sqrt+0xe8>
 8010aa4:	4290      	cmp	r0, r2
 8010aa6:	d811      	bhi.n	8010acc <__ieee754_sqrt+0xe8>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	eb00 0e01 	add.w	lr, r0, r1
 8010aae:	da57      	bge.n	8010b60 <__ieee754_sqrt+0x17c>
 8010ab0:	f1be 0f00 	cmp.w	lr, #0
 8010ab4:	db54      	blt.n	8010b60 <__ieee754_sqrt+0x17c>
 8010ab6:	f10c 0801 	add.w	r8, ip, #1
 8010aba:	eba3 030c 	sub.w	r3, r3, ip
 8010abe:	4290      	cmp	r0, r2
 8010ac0:	bf88      	it	hi
 8010ac2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8010ac6:	1a12      	subs	r2, r2, r0
 8010ac8:	440c      	add	r4, r1
 8010aca:	46c4      	mov	ip, r8
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	3f01      	subs	r7, #1
 8010ad0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010ad4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010ad8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010adc:	d1dd      	bne.n	8010a9a <__ieee754_sqrt+0xb6>
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	d01b      	beq.n	8010b1a <__ieee754_sqrt+0x136>
 8010ae2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010b90 <__ieee754_sqrt+0x1ac>
 8010ae6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010b94 <__ieee754_sqrt+0x1b0>
 8010aea:	e9da 0100 	ldrd	r0, r1, [sl]
 8010aee:	e9db 2300 	ldrd	r2, r3, [fp]
 8010af2:	f7ef fbf3 	bl	80002dc <__aeabi_dsub>
 8010af6:	e9da 8900 	ldrd	r8, r9, [sl]
 8010afa:	4602      	mov	r2, r0
 8010afc:	460b      	mov	r3, r1
 8010afe:	4640      	mov	r0, r8
 8010b00:	4649      	mov	r1, r9
 8010b02:	f7f0 f81f 	bl	8000b44 <__aeabi_dcmple>
 8010b06:	b140      	cbz	r0, 8010b1a <__ieee754_sqrt+0x136>
 8010b08:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010b0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b10:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b14:	d126      	bne.n	8010b64 <__ieee754_sqrt+0x180>
 8010b16:	3501      	adds	r5, #1
 8010b18:	463c      	mov	r4, r7
 8010b1a:	106a      	asrs	r2, r5, #1
 8010b1c:	0863      	lsrs	r3, r4, #1
 8010b1e:	07e9      	lsls	r1, r5, #31
 8010b20:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010b24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010b28:	bf48      	it	mi
 8010b2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010b2e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010b32:	461c      	mov	r4, r3
 8010b34:	e76d      	b.n	8010a12 <__ieee754_sqrt+0x2e>
 8010b36:	0ad3      	lsrs	r3, r2, #11
 8010b38:	3815      	subs	r0, #21
 8010b3a:	0552      	lsls	r2, r2, #21
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d0fa      	beq.n	8010b36 <__ieee754_sqrt+0x152>
 8010b40:	02dc      	lsls	r4, r3, #11
 8010b42:	d50a      	bpl.n	8010b5a <__ieee754_sqrt+0x176>
 8010b44:	f1c1 0420 	rsb	r4, r1, #32
 8010b48:	fa22 f404 	lsr.w	r4, r2, r4
 8010b4c:	1e4d      	subs	r5, r1, #1
 8010b4e:	408a      	lsls	r2, r1
 8010b50:	4323      	orrs	r3, r4
 8010b52:	1b41      	subs	r1, r0, r5
 8010b54:	e772      	b.n	8010a3c <__ieee754_sqrt+0x58>
 8010b56:	4608      	mov	r0, r1
 8010b58:	e7f0      	b.n	8010b3c <__ieee754_sqrt+0x158>
 8010b5a:	005b      	lsls	r3, r3, #1
 8010b5c:	3101      	adds	r1, #1
 8010b5e:	e7ef      	b.n	8010b40 <__ieee754_sqrt+0x15c>
 8010b60:	46e0      	mov	r8, ip
 8010b62:	e7aa      	b.n	8010aba <__ieee754_sqrt+0xd6>
 8010b64:	f7ef fbbc 	bl	80002e0 <__adddf3>
 8010b68:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	460b      	mov	r3, r1
 8010b70:	4640      	mov	r0, r8
 8010b72:	4649      	mov	r1, r9
 8010b74:	f7ef ffdc 	bl	8000b30 <__aeabi_dcmplt>
 8010b78:	b120      	cbz	r0, 8010b84 <__ieee754_sqrt+0x1a0>
 8010b7a:	1ca0      	adds	r0, r4, #2
 8010b7c:	bf08      	it	eq
 8010b7e:	3501      	addeq	r5, #1
 8010b80:	3402      	adds	r4, #2
 8010b82:	e7ca      	b.n	8010b1a <__ieee754_sqrt+0x136>
 8010b84:	3401      	adds	r4, #1
 8010b86:	f024 0401 	bic.w	r4, r4, #1
 8010b8a:	e7c6      	b.n	8010b1a <__ieee754_sqrt+0x136>
 8010b8c:	7ff00000 	.word	0x7ff00000
 8010b90:	20000218 	.word	0x20000218
 8010b94:	20000220 	.word	0x20000220

08010b98 <round>:
 8010b98:	ec53 2b10 	vmov	r2, r3, d0
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8010ba2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8010ba6:	2813      	cmp	r0, #19
 8010ba8:	ee10 5a10 	vmov	r5, s0
 8010bac:	4619      	mov	r1, r3
 8010bae:	dc18      	bgt.n	8010be2 <round+0x4a>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	da09      	bge.n	8010bc8 <round+0x30>
 8010bb4:	3001      	adds	r0, #1
 8010bb6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8010bba:	d103      	bne.n	8010bc4 <round+0x2c>
 8010bbc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010bc0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	e02a      	b.n	8010c1e <round+0x86>
 8010bc8:	4c16      	ldr	r4, [pc, #88]	; (8010c24 <round+0x8c>)
 8010bca:	4104      	asrs	r4, r0
 8010bcc:	ea03 0604 	and.w	r6, r3, r4
 8010bd0:	4316      	orrs	r6, r2
 8010bd2:	d011      	beq.n	8010bf8 <round+0x60>
 8010bd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010bd8:	4103      	asrs	r3, r0
 8010bda:	440b      	add	r3, r1
 8010bdc:	ea23 0104 	bic.w	r1, r3, r4
 8010be0:	e7f0      	b.n	8010bc4 <round+0x2c>
 8010be2:	2833      	cmp	r0, #51	; 0x33
 8010be4:	dd0b      	ble.n	8010bfe <round+0x66>
 8010be6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010bea:	d105      	bne.n	8010bf8 <round+0x60>
 8010bec:	ee10 0a10 	vmov	r0, s0
 8010bf0:	f7ef fb76 	bl	80002e0 <__adddf3>
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	ec43 2b10 	vmov	d0, r2, r3
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8010c02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c06:	40f4      	lsrs	r4, r6
 8010c08:	4214      	tst	r4, r2
 8010c0a:	d0f5      	beq.n	8010bf8 <round+0x60>
 8010c0c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8010c10:	2301      	movs	r3, #1
 8010c12:	4083      	lsls	r3, r0
 8010c14:	195b      	adds	r3, r3, r5
 8010c16:	bf28      	it	cs
 8010c18:	3101      	addcs	r1, #1
 8010c1a:	ea23 0304 	bic.w	r3, r3, r4
 8010c1e:	461a      	mov	r2, r3
 8010c20:	460b      	mov	r3, r1
 8010c22:	e7e9      	b.n	8010bf8 <round+0x60>
 8010c24:	000fffff 	.word	0x000fffff

08010c28 <trunc>:
 8010c28:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8010c2c:	ec5c bb10 	vmov	fp, ip, d0
 8010c30:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8010c34:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8010c38:	2913      	cmp	r1, #19
 8010c3a:	4664      	mov	r4, ip
 8010c3c:	dc11      	bgt.n	8010c62 <trunc+0x3a>
 8010c3e:	2900      	cmp	r1, #0
 8010c40:	bfa7      	ittee	ge
 8010c42:	4b15      	ldrge	r3, [pc, #84]	; (8010c98 <trunc+0x70>)
 8010c44:	fa43 f101 	asrge.w	r1, r3, r1
 8010c48:	2200      	movlt	r2, #0
 8010c4a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8010c4e:	bfa4      	itt	ge
 8010c50:	2200      	movge	r2, #0
 8010c52:	ea01 030c 	andge.w	r3, r1, ip
 8010c56:	4693      	mov	fp, r2
 8010c58:	469c      	mov	ip, r3
 8010c5a:	ec4c bb10 	vmov	d0, fp, ip
 8010c5e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8010c62:	2933      	cmp	r1, #51	; 0x33
 8010c64:	dd0d      	ble.n	8010c82 <trunc+0x5a>
 8010c66:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010c6a:	d1f6      	bne.n	8010c5a <trunc+0x32>
 8010c6c:	4663      	mov	r3, ip
 8010c6e:	ee10 2a10 	vmov	r2, s0
 8010c72:	ee10 0a10 	vmov	r0, s0
 8010c76:	4621      	mov	r1, r4
 8010c78:	f7ef fb32 	bl	80002e0 <__adddf3>
 8010c7c:	4683      	mov	fp, r0
 8010c7e:	468c      	mov	ip, r1
 8010c80:	e7eb      	b.n	8010c5a <trunc+0x32>
 8010c82:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8010c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c8a:	40c3      	lsrs	r3, r0
 8010c8c:	ea2b 0603 	bic.w	r6, fp, r3
 8010c90:	46b3      	mov	fp, r6
 8010c92:	46a4      	mov	ip, r4
 8010c94:	e7e1      	b.n	8010c5a <trunc+0x32>
 8010c96:	bf00      	nop
 8010c98:	fff00000 	.word	0xfff00000
 8010c9c:	00000000 	.word	0x00000000

08010ca0 <nan>:
 8010ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ca8 <nan+0x8>
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	00000000 	.word	0x00000000
 8010cac:	7ff80000 	.word	0x7ff80000

08010cb0 <_init>:
 8010cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb2:	bf00      	nop
 8010cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb6:	bc08      	pop	{r3}
 8010cb8:	469e      	mov	lr, r3
 8010cba:	4770      	bx	lr

08010cbc <_fini>:
 8010cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cbe:	bf00      	nop
 8010cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cc2:	bc08      	pop	{r3}
 8010cc4:	469e      	mov	lr, r3
 8010cc6:	4770      	bx	lr
