
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006004  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c8  080063c8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d0  080063d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080063d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  2000007c  08006454  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08006454  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001009a  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002608  00000000  00000000  00030189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcb  00000000  00000000  000336b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245ca  00000000  00000000  00034283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001284b  00000000  00000000  0005884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df2b2  00000000  00000000  0006b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046d4  00000000  00000000  0014a34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061bc 	.word	0x080061bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080061bc 	.word	0x080061bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <cmd_error>:
extern UART_HandleTypeDef huart2;
extern uint8_t adc_conv_request;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	printf("Error in command <%s>\r\n", cmd_str);
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <cmd_error+0x18>)
 80005c8:	f004 ff2a 	bl	8005420 <iprintf>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	080061d4 	.word	0x080061d4

080005d8 <cmd_L>:

int cmd_L(uint8_t* cmd_str) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b30      	cmp	r3, #48	; 0x30
 80005e8:	d002      	beq.n	80005f0 <cmd_L+0x18>
 80005ea:	2b31      	cmp	r3, #49	; 0x31
 80005ec:	d005      	beq.n	80005fa <cmd_L+0x22>
 80005ee:	e009      	b.n	8000604 <cmd_L+0x2c>
	case '0':
		printf("-LED OFF-\r\n");
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <cmd_L+0x38>)
 80005f2:	f004 ff7b 	bl	80054ec <puts>
		return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e006      	b.n	8000608 <cmd_L+0x30>
		break;
	case '1':
		printf("-LED ON-\r\n");
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <cmd_L+0x3c>)
 80005fc:	f004 ff76 	bl	80054ec <puts>
		return 0;
 8000600:	2300      	movs	r3, #0
 8000602:	e001      	b.n	8000608 <cmd_L+0x30>
		break;
	}
	return -1;
 8000604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	080061ec 	.word	0x080061ec
 8000614:	080061f8 	.word	0x080061f8

08000618 <cmd_help>:

int cmd_help(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	printf("\r\nCommand Help:\r\n");
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <cmd_help+0x1c>)
 800061e:	f004 ff65 	bl	80054ec <puts>
	printf("C: Start ADC conversion\r\n");
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <cmd_help+0x20>)
 8000624:	f004 ff62 	bl	80054ec <puts>
	printf("L[0,1]: LED on / off\r\n");
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <cmd_help+0x24>)
 800062a:	f004 ff5f 	bl	80054ec <puts>
	return 0;
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08006204 	.word	0x08006204
 8000638:	08006218 	.word	0x08006218
 800063c:	08006234 	.word	0x08006234

08000640 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064c:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3b3f      	subs	r3, #63	; 0x3f
 8000654:	2b2d      	cmp	r3, #45	; 0x2d
 8000656:	d86d      	bhi.n	8000734 <cmd_process+0xf4>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <cmd_process+0x20>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	0800072f 	.word	0x0800072f
 8000664:	08000735 	.word	0x08000735
 8000668:	08000735 	.word	0x08000735
 800066c:	08000735 	.word	0x08000735
 8000670:	08000723 	.word	0x08000723
 8000674:	08000735 	.word	0x08000735
 8000678:	08000735 	.word	0x08000735
 800067c:	08000735 	.word	0x08000735
 8000680:	08000735 	.word	0x08000735
 8000684:	0800072f 	.word	0x0800072f
 8000688:	08000735 	.word	0x08000735
 800068c:	08000735 	.word	0x08000735
 8000690:	08000735 	.word	0x08000735
 8000694:	08000719 	.word	0x08000719
 8000698:	08000735 	.word	0x08000735
 800069c:	08000735 	.word	0x08000735
 80006a0:	08000735 	.word	0x08000735
 80006a4:	08000735 	.word	0x08000735
 80006a8:	08000735 	.word	0x08000735
 80006ac:	08000735 	.word	0x08000735
 80006b0:	08000735 	.word	0x08000735
 80006b4:	08000735 	.word	0x08000735
 80006b8:	08000735 	.word	0x08000735
 80006bc:	08000735 	.word	0x08000735
 80006c0:	08000735 	.word	0x08000735
 80006c4:	08000735 	.word	0x08000735
 80006c8:	08000735 	.word	0x08000735
 80006cc:	08000735 	.word	0x08000735
 80006d0:	08000735 	.word	0x08000735
 80006d4:	08000735 	.word	0x08000735
 80006d8:	08000735 	.word	0x08000735
 80006dc:	08000735 	.word	0x08000735
 80006e0:	08000735 	.word	0x08000735
 80006e4:	08000735 	.word	0x08000735
 80006e8:	08000735 	.word	0x08000735
 80006ec:	08000735 	.word	0x08000735
 80006f0:	08000723 	.word	0x08000723
 80006f4:	08000735 	.word	0x08000735
 80006f8:	08000735 	.word	0x08000735
 80006fc:	08000735 	.word	0x08000735
 8000700:	08000735 	.word	0x08000735
 8000704:	0800072f 	.word	0x0800072f
 8000708:	08000735 	.word	0x08000735
 800070c:	08000735 	.word	0x08000735
 8000710:	08000735 	.word	0x08000735
 8000714:	08000719 	.word	0x08000719
	case 'L':
	case 'l':
		retval = cmd_L(cmd_str);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff5d 	bl	80005d8 <cmd_L>
 800071e:	60f8      	str	r0, [r7, #12]
		break;
 8000720:	e008      	b.n	8000734 <cmd_process+0xf4>
	case 'C':
	case 'c':
		adc_conv_request = 1;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <cmd_process+0x100>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
		break;
 800072c:	e002      	b.n	8000734 <cmd_process+0xf4>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 800072e:	f7ff ff73 	bl	8000618 <cmd_help>
 8000732:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8000734:	68fb      	ldr	r3, [r7, #12]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000291 	.word	0x20000291

08000744 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff fd5f 	bl	8000210 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <CMD_Handler+0x3c>)
 8000758:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <CMD_Handler+0x3c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d105      	bne.n	800076e <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ff2a 	bl	80005bc <cmd_error>
		return -1;
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076c:	e003      	b.n	8000776 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff66 	bl	8000640 <cmd_process>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000098 	.word	0x20000098

08000784 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800078c:	1d39      	adds	r1, r7, #4
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000792:	2201      	movs	r2, #1
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <__io_putchar+0x20>)
 8000796:	f003 fd56 	bl	8004246 <HAL_UART_Transmit>
  return ch;
 800079a:	687b      	ldr	r3, [r7, #4]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000234 	.word	0x20000234

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fee7 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f8d7 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 faa5 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ba:	f000 fa7b 	bl	8000cb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007be:	f000 fa4f 	bl	8000c60 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007c2:	f000 fa01 	bl	8000bc8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007c6:	f000 f93f 	bl	8000a48 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007ca:	f000 f99d 	bl	8000b08 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80007ce:	4853      	ldr	r0, [pc, #332]	; (800091c <main+0x174>)
 80007d0:	f003 f8b0 	bl	8003934 <HAL_TIM_Base_Start_IT>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <main+0x36>
    Error_Handler();
 80007da:	f000 fbdf 	bl	8000f9c <Error_Handler>
  }

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, &rx_byte, 1) != HAL_OK) {
 80007de:	2201      	movs	r2, #1
 80007e0:	494f      	ldr	r1, [pc, #316]	; (8000920 <main+0x178>)
 80007e2:	4850      	ldr	r0, [pc, #320]	; (8000924 <main+0x17c>)
 80007e4:	f003 fdc1 	bl	800436a <HAL_UART_Receive_IT>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <main+0x4a>
    Error_Handler();
 80007ee:	f000 fbd5 	bl	8000f9c <Error_Handler>
  }
  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	2212      	movs	r2, #18
 80007f8:	494b      	ldr	r1, [pc, #300]	; (8000928 <main+0x180>)
 80007fa:	484a      	ldr	r0, [pc, #296]	; (8000924 <main+0x17c>)
 80007fc:	f003 fd23 	bl	8004246 <HAL_UART_Transmit>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <main+0x62>
    Error_Handler();
 8000806:	f000 fbc9 	bl	8000f9c <Error_Handler>
    /* USER CODE BEGIN 3 */

	  //HAL_GPIO_TogglePin (LED2_PORT, LED2_PIN);

	  // Handle UART communication
	  if (rx_cmd_ready) {
 800080a:	4b48      	ldr	r3, [pc, #288]	; (800092c <main+0x184>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <main+0x7e>
		  CMD_Handler(rx_buff);
 8000814:	4846      	ldr	r0, [pc, #280]	; (8000930 <main+0x188>)
 8000816:	f7ff ff95 	bl	8000744 <CMD_Handler>
		  rx_count = 0;
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <main+0x18c>)
 800081c:	2200      	movs	r2, #0
 800081e:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8000820:	4b42      	ldr	r3, [pc, #264]	; (800092c <main+0x184>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	  }
	  if (adc_conv_request) {
 8000826:	4b44      	ldr	r3, [pc, #272]	; (8000938 <main+0x190>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d02d      	beq.n	800088a <main+0xe2>
		  adc_conv_request = 0;
 800082e:	4b42      	ldr	r3, [pc, #264]	; (8000938 <main+0x190>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
		  //HAL_ADC_Start_IT (&hadc1);
		  for (int i=0; i<ADC_BUF_SIZE; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	e00e      	b.n	8000858 <main+0xb0>
			adc1_raw[i]= 9999;
 800083a:	4a40      	ldr	r2, [pc, #256]	; (800093c <main+0x194>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f242 710f 	movw	r1, #9999	; 0x270f
 8000842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		    adc2_raw[i]= 9999;
 8000846:	4a3e      	ldr	r2, [pc, #248]	; (8000940 <main+0x198>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f242 710f 	movw	r1, #9999	; 0x270f
 800084e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for (int i=0; i<ADC_BUF_SIZE; i++) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d9ed      	bls.n	800083a <main+0x92>
		  }
		  //if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adc_raw, ADC_BUF_SIZE) != HAL_OK) {
		  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc1_raw[0], 4) != HAL_OK) {
 800085e:	2204      	movs	r2, #4
 8000860:	4936      	ldr	r1, [pc, #216]	; (800093c <main+0x194>)
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <main+0x19c>)
 8000864:	f000 ff42 	bl	80016ec <HAL_ADC_Start_DMA>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <main+0xcc>
			printf("Error starting ADC1 DMA\r\n");
 800086e:	4836      	ldr	r0, [pc, #216]	; (8000948 <main+0x1a0>)
 8000870:	f004 fe3c 	bl	80054ec <puts>
		  }
		  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&adc2_raw[0], 4) != HAL_OK) {
 8000874:	2204      	movs	r2, #4
 8000876:	4932      	ldr	r1, [pc, #200]	; (8000940 <main+0x198>)
 8000878:	4834      	ldr	r0, [pc, #208]	; (800094c <main+0x1a4>)
 800087a:	f000 ff37 	bl	80016ec <HAL_ADC_Start_DMA>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <main+0xe2>
		  	printf("Error starting ADC2 DMA\r\n");
 8000884:	4832      	ldr	r0, [pc, #200]	; (8000950 <main+0x1a8>)
 8000886:	f004 fe31 	bl	80054ec <puts>
		  }
	  }

	  if (adc1_conv_done) {
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <main+0x1ac>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d01e      	beq.n	80008d2 <main+0x12a>
		  if (adc1_conv_done == 1) {
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <main+0x1ac>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10b      	bne.n	80008b6 <main+0x10e>
			  printf("ADC1: %u %u\r\n",adc1_raw[0],adc1_raw[1]);
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <main+0x194>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <main+0x194>)
 80008a8:	885b      	ldrh	r3, [r3, #2]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	482a      	ldr	r0, [pc, #168]	; (8000958 <main+0x1b0>)
 80008b0:	f004 fdb6 	bl	8005420 <iprintf>
 80008b4:	e00a      	b.n	80008cc <main+0x124>
		  } else {
  			  printf("ADC1: %u %u\r\n",adc1_raw[2],adc1_raw[3]);
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <main+0x194>)
 80008b8:	889b      	ldrh	r3, [r3, #4]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <main+0x194>)
 80008c0:	88db      	ldrh	r3, [r3, #6]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	4824      	ldr	r0, [pc, #144]	; (8000958 <main+0x1b0>)
 80008c8:	f004 fdaa 	bl	8005420 <iprintf>
		  }
		  adc1_conv_done = 0;
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <main+0x1ac>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	  }
	  if (adc2_conv_done) {
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <main+0x1b4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d096      	beq.n	800080a <main+0x62>
		  if (adc2_conv_done == 1) {
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <main+0x1b4>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d10b      	bne.n	80008fe <main+0x156>
			  printf("ADC2: %u %u\r\n",adc2_raw[0],adc2_raw[1]);
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <main+0x198>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4619      	mov	r1, r3
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <main+0x198>)
 80008f0:	885b      	ldrh	r3, [r3, #2]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	481a      	ldr	r0, [pc, #104]	; (8000960 <main+0x1b8>)
 80008f8:	f004 fd92 	bl	8005420 <iprintf>
 80008fc:	e00a      	b.n	8000914 <main+0x16c>
		  } else {
			  printf("ADC2: %u %u\r\n",adc2_raw[2],adc2_raw[3]);
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <main+0x198>)
 8000900:	889b      	ldrh	r3, [r3, #4]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <main+0x198>)
 8000908:	88db      	ldrh	r3, [r3, #6]
 800090a:	b29b      	uxth	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <main+0x1b8>)
 8000910:	f004 fd86 	bl	8005420 <iprintf>
		  }
		  adc2_conv_done = 0;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <main+0x1b4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	  if (rx_cmd_ready) {
 800091a:	e776      	b.n	800080a <main+0x62>
 800091c:	200001ec 	.word	0x200001ec
 8000920:	2000027a 	.word	0x2000027a
 8000924:	20000234 	.word	0x20000234
 8000928:	20000000 	.word	0x20000000
 800092c:	20000290 	.word	0x20000290
 8000930:	2000027c 	.word	0x2000027c
 8000934:	20000278 	.word	0x20000278
 8000938:	20000291 	.word	0x20000291
 800093c:	20000294 	.word	0x20000294
 8000940:	2000029c 	.word	0x2000029c
 8000944:	2000009c 	.word	0x2000009c
 8000948:	0800624c 	.word	0x0800624c
 800094c:	200000e4 	.word	0x200000e4
 8000950:	08006268 	.word	0x08006268
 8000954:	20000292 	.word	0x20000292
 8000958:	08006284 	.word	0x08006284
 800095c:	20000293 	.word	0x20000293
 8000960:	08006294 	.word	0x08006294

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	; 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2234      	movs	r2, #52	; 0x34
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fdc2 	bl	80054fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <SystemClock_Config+0xdc>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <SystemClock_Config+0xdc>)
 8000992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <SystemClock_Config+0xdc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <SystemClock_Config+0xe0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <SystemClock_Config+0xe0>)
 80009ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SystemClock_Config+0xe0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2310      	movs	r3, #16
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d4:	2308      	movs	r3, #8
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d8:	23b4      	movs	r3, #180	; 0xb4
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009dc:	2302      	movs	r3, #2
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fcb3 	bl	8003358 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f8:	f000 fad0 	bl	8000f9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009fc:	f002 f912 	bl	8002c24 <HAL_PWREx_EnableOverDrive>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a06:	f000 fac9 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2105      	movs	r1, #5
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 f94b 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a34:	f000 fab2 	bl	8000f9c <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	; 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a5c:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <MX_ADC1_Init+0xb8>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <MX_ADC1_Init+0xbc>)
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa8:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000aaa:	f000 fddb 	bl	8001664 <HAL_ADC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f000 fa72 	bl	8000f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000aca:	f000 ff1f 	bl	800190c <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ad4:	f000 fa62 	bl	8000f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_ADC1_Init+0xb4>)
 8000ae6:	f000 ff11 	bl	800190c <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af0:	f000 fa54 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000009c 	.word	0x2000009c
 8000b00:	40012000 	.word	0x40012000
 8000b04:	0f000001 	.word	0x0f000001

08000b08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_ADC2_Init+0xb8>)
 8000b1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b68:	4814      	ldr	r0, [pc, #80]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b6a:	f000 fd7b 	bl	8001664 <HAL_ADC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000b74:	f000 fa12 	bl	8000f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b80:	2301      	movs	r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000b8a:	f000 febf 	bl	800190c <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000b94:	f000 fa02 	bl	8000f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_ADC2_Init+0xb4>)
 8000ba6:	f000 feb1 	bl	800190c <HAL_ADC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000bb0:	f000 f9f4 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	40012100 	.word	0x40012100
 8000bc4:	0f000001 	.word	0x0f000001

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bfa:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8000bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c0e:	f002 fe41 	bl	8003894 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c18:	f000 f9c0 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c2a:	f002 fffb 	bl	8003c24 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c34:	f000 f9b2 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c46:	f003 fa21 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f9a4 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001ec 	.word	0x200001ec

08000c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_USART2_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c98:	f003 fa88 	bl	80041ac <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f97b 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000234 	.word	0x20000234
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_DMA_Init+0x4c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <MX_DMA_Init+0x4c>)
 8000cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_DMA_Init+0x4c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2038      	movs	r0, #56	; 0x38
 8000cdc:	f001 f9a1 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ce0:	2038      	movs	r0, #56	; 0x38
 8000ce2:	f001 f9ba 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	203a      	movs	r0, #58	; 0x3a
 8000cec:	f001 f999 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cf0:	203a      	movs	r0, #58	; 0x3a
 8000cf2:	f001 f9b2 	bl	800205a <HAL_NVIC_EnableIRQ>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MX_GPIO_Init+0xd8>)
 8000d92:	f001 ff13 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000dae:	f001 fd71 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000db2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_GPIO_Init+0xd8>)
 8000dcc:	f001 fd62 	bl	8002894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020800 	.word	0x40020800

08000de4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	//if (adc_read_idx > 1) { adc_read_idx = 0; }
	//adc_raw[adc_read_idx++] = HAL_ADC_GetValue(&hadc1);
	if (hadc == &hadc1) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d103      	bne.n	8000dfc <HAL_ADC_ConvCpltCallback+0x18>
		adc1_conv_done = 2;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_ADC_ConvCpltCallback+0x30>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	701a      	strb	r2, [r3, #0]
	} else {
		adc2_conv_done = 2;
	}
}
 8000dfa:	e002      	b.n	8000e02 <HAL_ADC_ConvCpltCallback+0x1e>
		adc2_conv_done = 2;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_ADC_ConvCpltCallback+0x34>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	701a      	strb	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000009c 	.word	0x2000009c
 8000e14:	20000292 	.word	0x20000292
 8000e18:	20000293 	.word	0x20000293

08000e1c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d103      	bne.n	8000e34 <HAL_ADC_ConvHalfCpltCallback+0x18>
		adc1_conv_done = 1;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	} else {
		adc2_conv_done = 1;
	}
}
 8000e32:	e002      	b.n	8000e3a <HAL_ADC_ConvHalfCpltCallback+0x1e>
		adc2_conv_done = 1;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000009c 	.word	0x2000009c
 8000e4c:	20000292 	.word	0x20000292
 8000e50:	20000293 	.word	0x20000293

08000e54 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_ADC_ErrorCallback+0x94>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d102      	bne.n	8000e6a <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e001      	b.n	8000e6e <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d82c      	bhi.n	8000ed0 <HAL_ADC_ErrorCallback+0x7c>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <HAL_ADC_ErrorCallback+0x28>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e91 	.word	0x08000e91
 8000e80:	08000ea1 	.word	0x08000ea1
 8000e84:	08000eb1 	.word	0x08000eb1
 8000e88:	08000ed1 	.word	0x08000ed1
 8000e8c:	08000ec1 	.word	0x08000ec1
	case HAL_ADC_ERROR_NONE:
		printf("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	461a      	mov	r2, r3
 8000e96:	68f9      	ldr	r1, [r7, #12]
 8000e98:	4814      	ldr	r0, [pc, #80]	; (8000eec <HAL_ADC_ErrorCallback+0x98>)
 8000e9a:	f004 fac1 	bl	8005420 <iprintf>
		break;
 8000e9e:	e01e      	b.n	8000ede <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		printf("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <HAL_ADC_ErrorCallback+0x9c>)
 8000eaa:	f004 fab9 	bl	8005420 <iprintf>
		break;
 8000eae:	e016      	b.n	8000ede <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		printf("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68f9      	ldr	r1, [r7, #12]
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_ADC_ErrorCallback+0xa0>)
 8000eba:	f004 fab1 	bl	8005420 <iprintf>
		break;
 8000ebe:	e00e      	b.n	8000ede <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		printf("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <HAL_ADC_ErrorCallback+0xa4>)
 8000eca:	f004 faa9 	bl	8005420 <iprintf>
		break;
 8000ece:	e006      	b.n	8000ede <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		printf("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		printf("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <HAL_ADC_ErrorCallback+0xa8>)
 8000ed8:	f004 faa2 	bl	8005420 <iprintf>
	}
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000009c 	.word	0x2000009c
 8000eec:	080062a4 	.word	0x080062a4
 8000ef0:	080062c0 	.word	0x080062c0
 8000ef4:	080062e4 	.word	0x080062e4
 8000ef8:	08006304 	.word	0x08006304
 8000efc:	08006320 	.word	0x08006320

08000f00 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b13      	cmp	r3, #19
 8000f10:	d902      	bls.n	8000f18 <HAL_UART_RxCpltCallback+0x18>
		rx_count = 0;		// wrap back to start
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, &rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8000f18:	2201      	movs	r2, #1
 8000f1a:	491c      	ldr	r1, [pc, #112]	; (8000f8c <HAL_UART_RxCpltCallback+0x8c>)
 8000f1c:	481c      	ldr	r0, [pc, #112]	; (8000f90 <HAL_UART_RxCpltCallback+0x90>)
 8000f1e:	f003 fa24 	bl	800436a <HAL_UART_Receive_IT>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d12a      	bne.n	8000f7e <HAL_UART_RxCpltCallback+0x7e>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_UART_RxCpltCallback+0x8c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d012      	beq.n	8000f58 <HAL_UART_RxCpltCallback+0x58>
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_UART_RxCpltCallback+0x8c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b0d      	cmp	r3, #13
 8000f3a:	d00d      	beq.n	8000f58 <HAL_UART_RxCpltCallback+0x58>
			rx_buff[rx_count++] = rx_byte;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	b291      	uxth	r1, r2
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f48:	8011      	strh	r1, [r2, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_UART_RxCpltCallback+0x8c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_UART_RxCpltCallback+0x94>)
 8000f54:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 8000f56:	e012      	b.n	8000f7e <HAL_UART_RxCpltCallback+0x7e>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00d      	beq.n	8000f7e <HAL_UART_RxCpltCallback+0x7e>
				rx_cmd_ready = 1;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_UART_RxCpltCallback+0x98>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	b291      	uxth	r1, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x88>)
 8000f74:	8011      	strh	r1, [r2, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_UART_RxCpltCallback+0x94>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	5499      	strb	r1, [r3, r2]
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000278 	.word	0x20000278
 8000f8c:	2000027a 	.word	0x2000027a
 8000f90:	20000234 	.word	0x20000234
 8000f94:	2000027c 	.word	0x2000027c
 8000f98:	20000290 	.word	0x20000290

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <Error_Handler+0x10>)
 8000fa2:	f004 fa3d 	bl	8005420 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    __disable_irq();
    while (1)
 8000faa:	e7fe      	b.n	8000faa <Error_Handler+0xe>
 8000fac:	08006340 	.word	0x08006340

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f001 f80c 	bl	800200c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a78      	ldr	r2, [pc, #480]	; (8001200 <HAL_ADC_MspInit+0x200>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d172      	bne.n	8001108 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	4b77      	ldr	r3, [pc, #476]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a76      	ldr	r2, [pc, #472]	; (8001204 <HAL_ADC_MspInit+0x204>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b74      	ldr	r3, [pc, #464]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	623b      	str	r3, [r7, #32]
 800103c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_ADC_MspInit+0x204>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001076:	2301      	movs	r3, #1
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	485f      	ldr	r0, [pc, #380]	; (8001208 <HAL_ADC_MspInit+0x208>)
 800108a:	f001 fc03 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	485a      	ldr	r0, [pc, #360]	; (800120c <HAL_ADC_MspInit+0x20c>)
 80010a2:	f001 fbf7 	bl	8002894 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010a8:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <HAL_ADC_MspInit+0x214>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010ac:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010be:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c6:	4b52      	ldr	r3, [pc, #328]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010d6:	4b4e      	ldr	r3, [pc, #312]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010dc:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010ea:	4849      	ldr	r0, [pc, #292]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010ec:	f000 ffd0 	bl	8002090 <HAL_DMA_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010f6:	f7ff ff51 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a44      	ldr	r2, [pc, #272]	; (8001210 <HAL_ADC_MspInit+0x210>)
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001100:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_ADC_MspInit+0x210>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001106:	e077      	b.n	80011f8 <HAL_ADC_MspInit+0x1f8>
  else if(hadc->Instance==ADC2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a42      	ldr	r2, [pc, #264]	; (8001218 <HAL_ADC_MspInit+0x218>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d172      	bne.n	80011f8 <HAL_ADC_MspInit+0x1f8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <HAL_ADC_MspInit+0x204>)
 800111c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <HAL_ADC_MspInit+0x204>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_ADC_MspInit+0x204>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001166:	2302      	movs	r3, #2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <HAL_ADC_MspInit+0x208>)
 800117a:	f001 fb8b 	bl	8002894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117e:	2302      	movs	r3, #2
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <HAL_ADC_MspInit+0x20c>)
 8001192:	f001 fb7f 	bl	8002894 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <HAL_ADC_MspInit+0x21c>)
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <HAL_ADC_MspInit+0x220>)
 800119a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_ADC_MspInit+0x21c>)
 800119e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011de:	f000 ff57 	bl	8002090 <HAL_DMA_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_ADC_MspInit+0x1ec>
      Error_Handler();
 80011e8:	f7ff fed8 	bl	8000f9c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_ADC_MspInit+0x21c>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011f8:	bf00      	nop
 80011fa:	3738      	adds	r7, #56	; 0x38
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020000 	.word	0x40020000
 8001210:	2000012c 	.word	0x2000012c
 8001214:	40026410 	.word	0x40026410
 8001218:	40012100 	.word	0x40012100
 800121c:	2000018c 	.word	0x2000018c
 8001220:	40026440 	.word	0x40026440

08001224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001234:	d115      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x48>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x48>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x48>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fee3 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fefc 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_UART_MspInit+0x94>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d133      	bne.n	80012fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_UART_MspInit+0x98>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_UART_MspInit+0x98>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_UART_MspInit+0x98>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_UART_MspInit+0x98>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_UART_MspInit+0x98>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_UART_MspInit+0x98>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ca:	230c      	movs	r3, #12
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <HAL_UART_MspInit+0x9c>)
 80012e6:	f001 fad5 	bl	8002894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2026      	movs	r0, #38	; 0x26
 80012f0:	f000 fe97 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f4:	2026      	movs	r0, #38	; 0x26
 80012f6:	f000 feb0 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40004400 	.word	0x40004400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f962 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <TIM2_IRQHandler+0x18>)
 800136a:	f002 fb53 	bl	8003a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_9);
 800136e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <TIM2_IRQHandler+0x1c>)
 8001374:	f001 fc3b 	bl	8002bee <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001ec 	.word	0x200001ec
 8001380:	40020000 	.word	0x40020000

08001384 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART2_IRQHandler+0x10>)
 800138a:	f003 f81f 	bl	80043cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000234 	.word	0x20000234

08001398 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <DMA2_Stream0_IRQHandler+0x10>)
 800139e:	f001 f80f 	bl	80023c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000012c 	.word	0x2000012c

080013ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <DMA2_Stream2_IRQHandler+0x10>)
 80013b2:	f001 f805 	bl	80023c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000018c 	.word	0x2000018c

080013c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00a      	b.n	80013e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d2:	f3af 8000 	nop.w
 80013d6:	4601      	mov	r1, r0
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf0      	blt.n	80013d2 <_read+0x12>
  }

  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e009      	b.n	8001420 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f9b5 	bl	8000784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbf1      	blt.n	800140c <_write+0x12>
  }
  return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_close>:

int _close(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145a:	605a      	str	r2, [r3, #4]
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_isatty>:

int _isatty(int file)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f004 f81e 	bl	800550c <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20020000 	.word	0x20020000
 80014fc:	00000400 	.word	0x00000400
 8001500:	200002a4 	.word	0x200002a4
 8001504:	200003f8 	.word	0x200003f8

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001556:	f7ff ffd7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f003 ffdd 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff f923 	bl	80007a8 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001570:	080063d8 	.word	0x080063d8
  ldr r2, =_sbss
 8001574:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001578:	200003f8 	.word	0x200003f8

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fd2f 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fcfc 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fd47 	bl	8002076 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001600:	f000 fd0f 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000014 	.word	0x20000014
 800161c:	2000001c 	.word	0x2000001c
 8001620:	20000018 	.word	0x20000018

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000001c 	.word	0x2000001c
 8001648:	200002a8 	.word	0x200002a8

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200002a8 	.word	0x200002a8

08001664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e033      	b.n	80016e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fcbc 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016aa:	f023 0302 	bic.w	r3, r3, #2
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fa5a 	bl	8001b70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
 80016d2:	e001      	b.n	80016d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_Start_DMA+0x1e>
 8001706:	2302      	movs	r3, #2
 8001708:	e0e9      	b.n	80018de <HAL_ADC_Start_DMA+0x1f2>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d018      	beq.n	8001752 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001730:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_ADC_Start_DMA+0x1fc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6d      	ldr	r2, [pc, #436]	; (80018ec <HAL_ADC_Start_DMA+0x200>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9a      	lsrs	r2, r3, #18
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3b01      	subs	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001760:	d107      	bne.n	8001772 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001770:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 80a1 	bne.w	80018c4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c0:	d106      	bne.n	80017d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f023 0206 	bic.w	r2, r3, #6
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44
 80017ce:	e002      	b.n	80017d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_ADC_Start_DMA+0x204>)
 80017e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_ADC_Start_DMA+0x208>)
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_ADC_Start_DMA+0x20c>)
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	4a41      	ldr	r2, [pc, #260]	; (80018fc <HAL_ADC_Start_DMA+0x210>)
 80017f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001802:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001812:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001822:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	334c      	adds	r3, #76	; 0x4c
 800182e:	4619      	mov	r1, r3
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f000 fcda 	bl	80021ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2b00      	cmp	r3, #0
 8001842:	d12a      	bne.n	800189a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <HAL_ADC_Start_DMA+0x214>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_ADC_Start_DMA+0x18e>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <HAL_ADC_Start_DMA+0x218>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d105      	bne.n	8001864 <HAL_ADC_Start_DMA+0x178>
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_ADC_Start_DMA+0x204>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00a      	beq.n	800187a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_ADC_Start_DMA+0x21c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d136      	bne.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_ADC_Start_DMA+0x204>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d130      	bne.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d129      	bne.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e020      	b.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <HAL_ADC_Start_DMA+0x214>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d11b      	bne.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	e00b      	b.n	80018dc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0210 	orr.w	r2, r3, #16
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000014 	.word	0x20000014
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	40012300 	.word	0x40012300
 80018f4:	08001d69 	.word	0x08001d69
 80018f8:	08001e23 	.word	0x08001e23
 80018fc:	08001e3f 	.word	0x08001e3f
 8001900:	40012000 	.word	0x40012000
 8001904:	40012100 	.word	0x40012100
 8001908:	40012200 	.word	0x40012200

0800190c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1c>
 8001924:	2302      	movs	r3, #2
 8001926:	e113      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x244>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d925      	bls.n	8001984 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1e      	subs	r3, #30
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68d9      	ldr	r1, [r3, #12]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	4603      	mov	r3, r0
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4403      	add	r3, r0
 8001976:	3b1e      	subs	r3, #30
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	e022      	b.n	80019ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	2207      	movs	r2, #7
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4403      	add	r3, r0
 80019c0:	409a      	lsls	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d824      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b05      	subs	r3, #5
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b05      	subs	r3, #5
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1a:	e04c      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d824      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b23      	subs	r3, #35	; 0x23
 8001a36:	221f      	movs	r2, #31
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b23      	subs	r3, #35	; 0x23
 8001a60:	fa00 f203 	lsl.w	r2, r0, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6c:	e023      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b41      	subs	r3, #65	; 0x41
 8001a80:	221f      	movs	r2, #31
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b41      	subs	r3, #65	; 0x41
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab6:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_ADC_ConfigChannel+0x250>)
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <HAL_ADC_ConfigChannel+0x254>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d10b      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_ADC_ConfigChannel+0x254>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x23a>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_ADC_ConfigChannel+0x258>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0x1f4>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b11      	cmp	r3, #17
 8001afe:	d122      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_ADC_ConfigChannel+0x258>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d111      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_ADC_ConfigChannel+0x25c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_ADC_ConfigChannel+0x260>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9a      	lsrs	r2, r3, #18
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f9      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	40012000 	.word	0x40012000
 8001b64:	10000012 	.word	0x10000012
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <ADC_Init+0x1f0>)
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	021a      	lsls	r2, r3, #8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <ADC_Init+0x1f4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6899      	ldr	r1, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e00f      	b.n	8001c6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0202 	bic.w	r2, r2, #2
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
 8001c88:	005a      	lsls	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001caa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	035a      	lsls	r2, r3, #13
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e007      	b.n	8001ce4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	051a      	lsls	r2, r3, #20
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6899      	ldr	r1, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d26:	025a      	lsls	r2, r3, #9
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	029a      	lsls	r2, r3, #10
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	0f000001 	.word	0x0f000001

08001d68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13c      	bne.n	8001dfc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d12b      	bne.n	8001df4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d127      	bne.n	8001df4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d119      	bne.n	8001df4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0220 	bic.w	r2, r2, #32
 8001dce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fff5 	bl	8000de4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dfa:	e00e      	b.n	8001e1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff f823 	bl	8000e54 <HAL_ADC_ErrorCallback>
}
 8001e0e:	e004      	b.n	8001e1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7fe fff3 	bl	8000e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f043 0204 	orr.w	r2, r3, #4
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7fe fff8 	bl	8000e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff fad6 	bl	800164c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e099      	b.n	80021e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff fabd 	bl	800164c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d908      	bls.n	80020ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e078      	b.n	80021e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_DMA_Init+0x158>)
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4313      	orrs	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2b04      	cmp	r3, #4
 8002180:	d117      	bne.n	80021b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fb01 	bl	800279c <DMA_CheckFifoParam>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ae:	2301      	movs	r3, #1
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fab8 	bl	8002730 <DMA_CalcBaseAndBitshift>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	f010803f 	.word	0xf010803f

080021ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_DMA_Start_IT+0x26>
 800220e:	2302      	movs	r3, #2
 8002210:	e040      	b.n	8002294 <HAL_DMA_Start_IT+0xa8>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12f      	bne.n	8002286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fa4a 	bl	80026d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	223f      	movs	r2, #63	; 0x3f
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0216 	orr.w	r2, r2, #22
 800225a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0208 	orr.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e005      	b.n	8002292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022aa:	f7ff f9cf 	bl	800164c <HAL_GetTick>
 80022ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e052      	b.n	8002374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0216 	bic.w	r2, r2, #22
 80022dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <HAL_DMA_Abort+0x62>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0208 	bic.w	r2, r2, #8
 800230c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231e:	e013      	b.n	8002348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002320:	f7ff f994 	bl	800164c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b05      	cmp	r3, #5
 800232c:	d90c      	bls.n	8002348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e015      	b.n	8002374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e4      	bne.n	8002320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d004      	beq.n	800239a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00c      	b.n	80023b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2205      	movs	r2, #5
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023cc:	4b8e      	ldr	r3, [pc, #568]	; (8002608 <HAL_DMA_IRQHandler+0x248>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a8e      	ldr	r2, [pc, #568]	; (800260c <HAL_DMA_IRQHandler+0x24c>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a9b      	lsrs	r3, r3, #10
 80023d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	2208      	movs	r2, #8
 80023ec:	409a      	lsls	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01a      	beq.n	800242c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2208      	movs	r2, #8
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2201      	movs	r2, #1
 8002450:	409a      	lsls	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0202 	orr.w	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2204      	movs	r2, #4
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d012      	beq.n	8002498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	2204      	movs	r2, #4
 8002486:	409a      	lsls	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0204 	orr.w	r2, r3, #4
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2210      	movs	r2, #16
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d043      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d03c      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2210      	movs	r2, #16
 80024bc:	409a      	lsls	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d024      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
 80024ee:	e01f      	b.n	8002530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e016      	b.n	8002530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0208 	bic.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2220      	movs	r2, #32
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 808f 	beq.w	8002660 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8087 	beq.w	8002660 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2220      	movs	r2, #32
 8002558:	409a      	lsls	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b05      	cmp	r3, #5
 8002568:	d136      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0216 	bic.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_DMA_IRQHandler+0x1da>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0208 	bic.w	r2, r2, #8
 80025a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	223f      	movs	r2, #63	; 0x3f
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07e      	beq.n	80026cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
        }
        return;
 80025d6:	e079      	b.n	80026cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01d      	beq.n	8002622 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10d      	bne.n	8002610 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d031      	beq.n	8002660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e02c      	b.n	8002660 <HAL_DMA_IRQHandler+0x2a0>
 8002606:	bf00      	nop
 8002608:	20000014 	.word	0x20000014
 800260c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	e01e      	b.n	8002660 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10f      	bne.n	8002650 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0210 	bic.w	r2, r2, #16
 800263e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	2b00      	cmp	r3, #0
 8002666:	d032      	beq.n	80026ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d022      	beq.n	80026ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2205      	movs	r2, #5
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3301      	adds	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	d307      	bcc.n	80026a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f2      	bne.n	800268c <HAL_DMA_IRQHandler+0x2cc>
 80026a6:	e000      	b.n	80026aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
 80026ca:	e000      	b.n	80026ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80026cc:	bf00      	nop
    }
  }
}
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d108      	bne.n	8002714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002712:	e007      	b.n	8002724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3b10      	subs	r3, #16
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <DMA_CalcBaseAndBitshift+0x64>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <DMA_CalcBaseAndBitshift+0x68>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d909      	bls.n	8002772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	1d1a      	adds	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	659a      	str	r2, [r3, #88]	; 0x58
 8002770:	e007      	b.n	8002782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	aaaaaaab 	.word	0xaaaaaaab
 8002798:	0800638c 	.word	0x0800638c

0800279c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11f      	bne.n	80027f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d856      	bhi.n	800286a <DMA_CheckFifoParam+0xce>
 80027bc:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <DMA_CheckFifoParam+0x28>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	080027e7 	.word	0x080027e7
 80027cc:	080027d5 	.word	0x080027d5
 80027d0:	0800286b 	.word	0x0800286b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d046      	beq.n	800286e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e4:	e043      	b.n	800286e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ee:	d140      	bne.n	8002872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e03d      	b.n	8002872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fe:	d121      	bne.n	8002844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d837      	bhi.n	8002876 <DMA_CheckFifoParam+0xda>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <DMA_CheckFifoParam+0x70>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002823 	.word	0x08002823
 8002814:	0800281d 	.word	0x0800281d
 8002818:	08002835 	.word	0x08002835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e030      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d025      	beq.n	800287a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002832:	e022      	b.n	800287a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800283c:	d11f      	bne.n	800287e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002842:	e01c      	b.n	800287e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d903      	bls.n	8002852 <DMA_CheckFifoParam+0xb6>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d003      	beq.n	8002858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002850:	e018      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      break;
 8002856:	e015      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      break;
 8002868:	e00b      	b.n	8002882 <DMA_CheckFifoParam+0xe6>
      break;
 800286a:	bf00      	nop
 800286c:	e00a      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e008      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e006      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
 8002878:	e004      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;   
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
    }
  } 
  
  return status; 
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e165      	b.n	8002b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8154 	bne.w	8002b76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80ae 	beq.w	8002b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_GPIO_Init+0x300>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a5c      	ldr	r2, [pc, #368]	; (8002b94 <HAL_GPIO_Init+0x300>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <HAL_GPIO_Init+0x300>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a36:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	; (8002b9c <HAL_GPIO_Init+0x308>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d025      	beq.n	8002aae <HAL_GPIO_Init+0x21a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <HAL_GPIO_Init+0x30c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01f      	beq.n	8002aaa <HAL_GPIO_Init+0x216>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_GPIO_Init+0x310>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0x212>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_GPIO_Init+0x314>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x20e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_GPIO_Init+0x318>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x20a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <HAL_GPIO_Init+0x31c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x206>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a49      	ldr	r2, [pc, #292]	; (8002bb4 <HAL_GPIO_Init+0x320>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x202>
 8002a92:	2306      	movs	r3, #6
 8002a94:	e00c      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e00a      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002a9a:	2305      	movs	r3, #5
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x21c>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f002 0203 	and.w	r2, r2, #3
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b46:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b70:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <HAL_GPIO_Init+0x324>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	f67f ae96 	bls.w	80028b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40021400 	.word	0x40021400
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40013c00 	.word	0x40013c00

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c00:	887a      	ldrh	r2, [r7, #2]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	400b      	ands	r3, r1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c50:	f7fe fcfc 	bl	800164c <HAL_GetTick>
 8002c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c56:	e009      	b.n	8002c6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c58:	f7fe fcf8 	bl	800164c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c66:	d901      	bls.n	8002c6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e01f      	b.n	8002cac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d1ee      	bne.n	8002c58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe fce4 	bl	800164c <HAL_GetTick>
 8002c84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c86:	e009      	b.n	8002c9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c88:	f7fe fce0 	bl	800164c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c96:	d901      	bls.n	8002c9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e007      	b.n	8002cac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	420e0040 	.word	0x420e0040
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	420e0044 	.word	0x420e0044

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0cc      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90c      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	494d      	ldr	r1, [pc, #308]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d044      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d119      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e07f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e067      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4934      	ldr	r1, [pc, #208]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fc4a 	bl	800164c <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fc46 	bl	800164c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20c      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e032      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4916      	ldr	r1, [pc, #88]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 f855 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	490a      	ldr	r1, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fbaa 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08006374 	.word	0x08006374
 8002e88:	20000014 	.word	0x20000014
 8002e8c:	20000018 	.word	0x20000018

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000014 	.word	0x20000014

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0a9b      	lsrs	r3, r3, #10
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4903      	ldr	r1, [pc, #12]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	08006384 	.word	0x08006384

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed4:	f7ff ffdc 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0b5b      	lsrs	r3, r3, #13
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08006384 	.word	0x08006384

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b0ae      	sub	sp, #184	; 0xb8
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1e:	4bcb      	ldr	r3, [pc, #812]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	f200 8206 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x440>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	08003339 	.word	0x08003339
 8002f3c:	08003339 	.word	0x08003339
 8002f40:	08003339 	.word	0x08003339
 8002f44:	08002f71 	.word	0x08002f71
 8002f48:	08003339 	.word	0x08003339
 8002f4c:	08003339 	.word	0x08003339
 8002f50:	08003339 	.word	0x08003339
 8002f54:	08002f79 	.word	0x08002f79
 8002f58:	08003339 	.word	0x08003339
 8002f5c:	08003339 	.word	0x08003339
 8002f60:	08003339 	.word	0x08003339
 8002f64:	08003169 	.word	0x08003169
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4bb9      	ldr	r3, [pc, #740]	; (8003250 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002f6e:	e1e7      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f70:	4bb8      	ldr	r3, [pc, #736]	; (8003254 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f76:	e1e3      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4bb4      	ldr	r3, [pc, #720]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f84:	4bb1      	ldr	r3, [pc, #708]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d071      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f90:	4bae      	ldr	r3, [pc, #696]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	0159      	lsls	r1, r3, #5
 8002fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc8:	0150      	lsls	r0, r2, #5
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4621      	mov	r1, r4
 8002fd0:	1a51      	subs	r1, r2, r1
 8002fd2:	6439      	str	r1, [r7, #64]	; 0x40
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fda:	647b      	str	r3, [r7, #68]	; 0x44
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002fe8:	4649      	mov	r1, r9
 8002fea:	018b      	lsls	r3, r1, #6
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	018a      	lsls	r2, r1, #6
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	1a51      	subs	r1, r2, r1
 8002ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003010:	4649      	mov	r1, r9
 8003012:	00cb      	lsls	r3, r1, #3
 8003014:	4641      	mov	r1, r8
 8003016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800301a:	4641      	mov	r1, r8
 800301c:	00ca      	lsls	r2, r1, #3
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	4603      	mov	r3, r0
 8003024:	4622      	mov	r2, r4
 8003026:	189b      	adds	r3, r3, r2
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
 800302a:	462b      	mov	r3, r5
 800302c:	460a      	mov	r2, r1
 800302e:	eb42 0303 	adc.w	r3, r2, r3
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003040:	4629      	mov	r1, r5
 8003042:	024b      	lsls	r3, r1, #9
 8003044:	4621      	mov	r1, r4
 8003046:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304a:	4621      	mov	r1, r4
 800304c:	024a      	lsls	r2, r1, #9
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800305c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003060:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003064:	f7fd f92c 	bl	80002c0 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003072:	e067      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003074:	4b75      	ldr	r3, [pc, #468]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003080:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	67bb      	str	r3, [r7, #120]	; 0x78
 800308e:	2300      	movs	r3, #0
 8003090:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003092:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003096:	4622      	mov	r2, r4
 8003098:	462b      	mov	r3, r5
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4621      	mov	r1, r4
 80030b0:	1a51      	subs	r1, r2, r1
 80030b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80030b4:	4629      	mov	r1, r5
 80030b6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80030c8:	4649      	mov	r1, r9
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	4641      	mov	r1, r8
 80030ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d2:	4641      	mov	r1, r8
 80030d4:	018a      	lsls	r2, r1, #6
 80030d6:	4641      	mov	r1, r8
 80030d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80030dc:	4649      	mov	r1, r9
 80030de:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f6:	4692      	mov	sl, r2
 80030f8:	469b      	mov	fp, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	eb1a 0303 	adds.w	r3, sl, r3
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	462b      	mov	r3, r5
 8003104:	eb4b 0303 	adc.w	r3, fp, r3
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003116:	4629      	mov	r1, r5
 8003118:	028b      	lsls	r3, r1, #10
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003120:	4621      	mov	r1, r4
 8003122:	028a      	lsls	r2, r1, #10
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800312c:	2200      	movs	r2, #0
 800312e:	673b      	str	r3, [r7, #112]	; 0x70
 8003130:	677a      	str	r2, [r7, #116]	; 0x74
 8003132:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003136:	f7fd f8c3 	bl	80002c0 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4613      	mov	r3, r2
 8003140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003144:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003166:	e0eb      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003174:	4b35      	ldr	r3, [pc, #212]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d06b      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCC_GetSysClockFreq+0x354>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	099b      	lsrs	r3, r3, #6
 8003186:	2200      	movs	r2, #0
 8003188:	66bb      	str	r3, [r7, #104]	; 0x68
 800318a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800318c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	663b      	str	r3, [r7, #96]	; 0x60
 8003194:	2300      	movs	r3, #0
 8003196:	667b      	str	r3, [r7, #100]	; 0x64
 8003198:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800319c:	4622      	mov	r2, r4
 800319e:	462b      	mov	r3, r5
 80031a0:	f04f 0000 	mov.w	r0, #0
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	0159      	lsls	r1, r3, #5
 80031aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ae:	0150      	lsls	r0, r2, #5
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4621      	mov	r1, r4
 80031b6:	1a51      	subs	r1, r2, r1
 80031b8:	61b9      	str	r1, [r7, #24]
 80031ba:	4629      	mov	r1, r5
 80031bc:	eb63 0301 	sbc.w	r3, r3, r1
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031ce:	4659      	mov	r1, fp
 80031d0:	018b      	lsls	r3, r1, #6
 80031d2:	4651      	mov	r1, sl
 80031d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d8:	4651      	mov	r1, sl
 80031da:	018a      	lsls	r2, r1, #6
 80031dc:	4651      	mov	r1, sl
 80031de:	ebb2 0801 	subs.w	r8, r2, r1
 80031e2:	4659      	mov	r1, fp
 80031e4:	eb63 0901 	sbc.w	r9, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fc:	4690      	mov	r8, r2
 80031fe:	4699      	mov	r9, r3
 8003200:	4623      	mov	r3, r4
 8003202:	eb18 0303 	adds.w	r3, r8, r3
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	462b      	mov	r3, r5
 800320a:	eb49 0303 	adc.w	r3, r9, r3
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800321c:	4629      	mov	r1, r5
 800321e:	024b      	lsls	r3, r1, #9
 8003220:	4621      	mov	r1, r4
 8003222:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003226:	4621      	mov	r1, r4
 8003228:	024a      	lsls	r2, r1, #9
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003232:	2200      	movs	r2, #0
 8003234:	65bb      	str	r3, [r7, #88]	; 0x58
 8003236:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003238:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800323c:	f7fd f840 	bl	80002c0 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800324a:	e065      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x420>
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003258:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_RCC_GetSysClockFreq+0x458>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	2200      	movs	r2, #0
 8003260:	4618      	mov	r0, r3
 8003262:	4611      	mov	r1, r2
 8003264:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003268:	653b      	str	r3, [r7, #80]	; 0x50
 800326a:	2300      	movs	r3, #0
 800326c:	657b      	str	r3, [r7, #84]	; 0x54
 800326e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003272:	4642      	mov	r2, r8
 8003274:	464b      	mov	r3, r9
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4641      	mov	r1, r8
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	4649      	mov	r1, r9
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032a4:	4659      	mov	r1, fp
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4651      	mov	r1, sl
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	4651      	mov	r1, sl
 80032b4:	1a54      	subs	r4, r2, r1
 80032b6:	4659      	mov	r1, fp
 80032b8:	eb63 0501 	sbc.w	r5, r3, r1
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	00eb      	lsls	r3, r5, #3
 80032c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ca:	00e2      	lsls	r2, r4, #3
 80032cc:	4614      	mov	r4, r2
 80032ce:	461d      	mov	r5, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	18e3      	adds	r3, r4, r3
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	464b      	mov	r3, r9
 80032d8:	eb45 0303 	adc.w	r3, r5, r3
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ea:	4629      	mov	r1, r5
 80032ec:	028b      	lsls	r3, r1, #10
 80032ee:	4621      	mov	r1, r4
 80032f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f4:	4621      	mov	r1, r4
 80032f6:	028a      	lsls	r2, r1, #10
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003300:	2200      	movs	r2, #0
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
 8003304:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003306:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800330a:	f7fc ffd9 	bl	80002c0 <__aeabi_uldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4613      	mov	r3, r2
 8003314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_RCC_GetSysClockFreq+0x458>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0f1b      	lsrs	r3, r3, #28
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800332a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003336:	e003      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_GetSysClockFreq+0x45c>)
 800333a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800333e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003340:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003344:	4618      	mov	r0, r3
 8003346:	37b8      	adds	r7, #184	; 0xb8
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400

08003358 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e28d      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8083 	beq.w	800347e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003378:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	d019      	beq.n	80033b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003384:	4b91      	ldr	r3, [pc, #580]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800338c:	2b08      	cmp	r3, #8
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003390:	4b8e      	ldr	r3, [pc, #568]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b8b      	ldr	r3, [pc, #556]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x124>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e25a      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x90>
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7b      	ldr	r2, [pc, #492]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xcc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xb4>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xcc>
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6b      	ldr	r2, [pc, #428]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe f90e 	bl	800164c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe f90a 	bl	800164c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e21f      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b61      	ldr	r3, [pc, #388]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xdc>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe f8fa 	bl	800164c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe f8f6 	bl	800164c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e20b      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x104>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06f      	beq.n	800356a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800348a:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d017      	beq.n	80034c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003496:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x186>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1d3      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x278>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe f8a3 	bl	800164c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe f89f 	bl	800164c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1b4      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x278>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe f882 	bl	800164c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe f87e 	bl	800164c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e193      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe f862 	bl	800164c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe f85e 	bl	800164c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e173      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x234>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe f84b 	bl	800164c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe f847 	bl	800164c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e15c      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b8a      	ldr	r3, [pc, #552]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b83      	ldr	r3, [pc, #524]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a75      	ldr	r2, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe f807 	bl	800164c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe f803 	bl	800164c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e118      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x31e>
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x358>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x340>
 800367e:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a60      	ldr	r2, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	4b5e      	ldr	r3, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5d      	ldr	r2, [pc, #372]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x358>
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a56      	ldr	r2, [pc, #344]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd ffc8 	bl	800164c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fd ffc4 	bl	800164c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0d7      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x368>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fd ffb2 	bl	800164c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd ffae 	bl	800164c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0c1      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b40      	ldr	r3, [pc, #256]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80ad 	beq.w	8003884 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d060      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d145      	bne.n	80037ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x4b4>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd ff82 	bl	800164c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd ff7e 	bl	800164c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e093      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	491b      	ldr	r1, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x4b4>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd ff53 	bl	800164c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fd ff4f 	bl	800164c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e064      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x452>
 80037c8:	e05c      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x4b4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fd ff3c 	bl	800164c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fd ff38 	bl	800164c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e04d      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x480>
 80037f6:	e045      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e040      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
 800380c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HAL_RCC_OscConfig+0x538>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d030      	beq.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d129      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d122      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003840:	4013      	ands	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003848:	4293      	cmp	r3, r2
 800384a:	d119      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	3b01      	subs	r3, #1
 800385a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d10f      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800

08003894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e041      	b.n	800392a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fcb2 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 faa0 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e04e      	b.n	80039ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d022      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d01d      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <HAL_TIM_Base_Start_IT+0xc8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d018      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00e      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d111      	bne.n	80039d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d010      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d6:	e007      	b.n	80039e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40010400 	.word	0x40010400
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40001800 	.word	0x40001800

08003a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d122      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d11b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0202 	mvn.w	r2, #2
 8003a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f9bf 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9b1 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f9c2 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0204 	mvn.w	r2, #4
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f995 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f987 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f998 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d11b      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0208 	mvn.w	r2, #8
 8003ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2204      	movs	r2, #4
 8003aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f96b 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f95d 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f96e 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0210 	mvn.w	r2, #16
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2208      	movs	r2, #8
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f941 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f933 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f944 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10e      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0201 	mvn.w	r2, #1
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f90d 	bl	8003db2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 faea 	bl	8004198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f909 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fab4 	bl	8004184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x1c>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0b4      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x186>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d03e      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	f200 8087 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	f000 8086 	beq.w	8003d96 <HAL_TIM_ConfigClockSource+0x172>
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	d87f      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b70      	cmp	r3, #112	; 0x70
 8003c92:	d01a      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0xa6>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d87b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b60      	cmp	r3, #96	; 0x60
 8003c9a:	d050      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x11a>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d877      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	d03c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xfa>
 8003ca4:	2b50      	cmp	r3, #80	; 0x50
 8003ca6:	d873      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d058      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0x13a>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d86f      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b30      	cmp	r3, #48	; 0x30
 8003cb2:	d064      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d86b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d060      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d867      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05c      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d05a      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	e062      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f000 f9b7 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	609a      	str	r2, [r3, #8]
      break;
 8003cf6:	e04f      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f000 f9a0 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1a:	609a      	str	r2, [r3, #8]
      break;
 8003d1c:	e03c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 f914 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2150      	movs	r1, #80	; 0x50
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f96d 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e02c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f000 f933 	bl	8003fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2160      	movs	r1, #96	; 0x60
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f95d 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d5c:	e01c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 f8f4 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f94d 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e00c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f000 f944 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d8e:	e003      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e000      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 030a 	bic.w	r3, r3, #10
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	f043 0307 	orr.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e05a      	b.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d01d      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1d      	ldr	r2, [pc, #116]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40010400 	.word	0x40010400
 800417c:	40014000 	.word	0x40014000
 8004180:	40001800 	.word	0x40001800

08004184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e03f      	b.n	800423e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd f84c 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fddf 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b08a      	sub	sp, #40	; 0x28
 800424a:	af02      	add	r7, sp, #8
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b20      	cmp	r3, #32
 8004264:	d17c      	bne.n	8004360 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_UART_Transmit+0x2c>
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e075      	b.n	8004362 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UART_Transmit+0x3e>
 8004280:	2302      	movs	r3, #2
 8004282:	e06e      	b.n	8004362 <HAL_UART_Transmit+0x11c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2221      	movs	r2, #33	; 0x21
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429a:	f7fd f9d7 	bl	800164c <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d108      	bne.n	80042c8 <HAL_UART_Transmit+0x82>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e003      	b.n	80042d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042d8:	e02a      	b.n	8004330 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fb1f 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e036      	b.n	8004362 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3302      	adds	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e007      	b.n	8004322 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1cf      	bne.n	80042da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 faef 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e006      	b.n	8004362 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	4613      	mov	r3, r2
 8004376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	d11d      	bne.n	80043c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Receive_IT+0x26>
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e016      	b.n	80043c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Receive_IT+0x38>
 800439e:	2302      	movs	r3, #2
 80043a0:	e00f      	b.n	80043c2 <HAL_UART_Receive_IT+0x58>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb24 	bl	8004a04 <UART_Start_Receive_IT>
 80043bc:	4603      	mov	r3, r0
 80043be:	e000      	b.n	80043c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b0ba      	sub	sp, #232	; 0xe8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800440a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fc07 	bl	8004c3e <UART_Receive_IT>
      return;
 8004430:	e256      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80de 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
 800443c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80d1 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 81ed 	beq.w	80048d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb92 	bl	8004c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <HAL_UART_IRQHandler+0x17a>
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d04f      	beq.n	80045e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa9a 	bl	8004a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d141      	bne.n	80045de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800458a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800459e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1d9      	bne.n	800455a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d013      	beq.n	80045d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_UART_IRQHandler+0x3dc>)
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fede 	bl	800237c <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d0:	4610      	mov	r0, r2
 80045d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	e00e      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f990 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	e00a      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f98c 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e006      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f988 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045f2:	e170      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	bf00      	nop
    return;
 80045f6:	e16e      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 814a 	bne.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8143 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 813c 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	f040 80b4 	bne.w	80047ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8140 	beq.w	80048da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004662:	429a      	cmp	r2, r3
 8004664:	f080 8139 	bcs.w	80048da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800466e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	f000 8088 	beq.w	800478e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1d9      	bne.n	800467e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e1      	bne.n	80046ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800472a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800472c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004730:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e3      	bne.n	8004706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004770:	65ba      	str	r2, [r7, #88]	; 0x58
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e3      	bne.n	800474c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fd87 	bl	800229c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004796:	b29b      	uxth	r3, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8b6 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a4:	e099      	b.n	80048da <HAL_UART_IRQHandler+0x50e>
 80047a6:	bf00      	nop
 80047a8:	08004b47 	.word	0x08004b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 808b 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8086 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047f6:	647a      	str	r2, [r7, #68]	; 0x44
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e3      	bne.n	80047d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	623b      	str	r3, [r7, #32]
   return(result);
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800482e:	633a      	str	r2, [r7, #48]	; 0x30
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e3      	bne.n	800480a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	617b      	str	r3, [r7, #20]
   return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e3      	bne.n	8004850 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f83e 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004894:	e023      	b.n	80048de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f95d 	bl	8004b6e <UART_Transmit_IT>
    return;
 80048b4:	e014      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f99d 	bl	8004c0e <UART_EndTransmit_IT>
    return;
 80048d4:	e004      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048de:	bf00      	nop
  }
}
 80048e0:	37e8      	adds	r7, #232	; 0xe8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b090      	sub	sp, #64	; 0x40
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	e050      	b.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004940:	d04c      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
 8004948:	f7fc fe80 	bl	800164c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004954:	429a      	cmp	r2, r3
 8004956:	d241      	bcs.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004978:	637a      	str	r2, [r7, #52]	; 0x34
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800497e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	613b      	str	r3, [r7, #16]
   return(result);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ac:	623a      	str	r2, [r7, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e00f      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d09f      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3740      	adds	r7, #64	; 0x40
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2222      	movs	r2, #34	; 0x22
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0220 	orr.w	r2, r2, #32
 8004a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b095      	sub	sp, #84	; 0x54
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d119      	bne.n	8004b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b18:	61ba      	str	r2, [r7, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b3a:	bf00      	nop
 8004b3c:	3754      	adds	r7, #84	; 0x54
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fecb 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	d13e      	bne.n	8004c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d114      	bne.n	8004bb6 <UART_Transmit_IT+0x48>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d110      	bne.n	8004bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]
 8004bb4:	e008      	b.n	8004bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6211      	str	r1, [r2, #32]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fe5a 	bl	80048e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08c      	sub	sp, #48	; 0x30
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b22      	cmp	r3, #34	; 0x22
 8004c50:	f040 80ab 	bne.w	8004daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d117      	bne.n	8004c8e <UART_Receive_IT+0x50>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d113      	bne.n	8004c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8c:	e026      	b.n	8004cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d007      	beq.n	8004cb2 <UART_Receive_IT+0x74>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <UART_Receive_IT+0x82>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e008      	b.n	8004cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15a      	bne.n	8004da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0220 	bic.w	r2, r2, #32
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d135      	bne.n	8004d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	623a      	str	r2, [r7, #32]
 8004d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d10a      	bne.n	8004d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fdbb 	bl	8004910 <HAL_UARTEx_RxEventCallback>
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc f8af 	bl	8000f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e002      	b.n	8004dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3730      	adds	r7, #48	; 0x30
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b0c0      	sub	sp, #256	; 0x100
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	68d9      	ldr	r1, [r3, #12]
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	ea40 0301 	orr.w	r3, r0, r1
 8004ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e0c:	f021 010c 	bic.w	r1, r1, #12
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	6999      	ldr	r1, [r3, #24]
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	ea40 0301 	orr.w	r3, r0, r1
 8004e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b8f      	ldr	r3, [pc, #572]	; (8005080 <UART_SetConfig+0x2cc>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d005      	beq.n	8004e54 <UART_SetConfig+0xa0>
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b8d      	ldr	r3, [pc, #564]	; (8005084 <UART_SetConfig+0x2d0>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d104      	bne.n	8004e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fe f83c 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8004e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e5c:	e003      	b.n	8004e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e5e:	f7fe f823 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8004e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	f040 810c 	bne.w	800508c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	1891      	adds	r1, r2, r2
 8004e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e8e:	415b      	adcs	r3, r3
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e96:	4621      	mov	r1, r4
 8004e98:	eb12 0801 	adds.w	r8, r2, r1
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	eb43 0901 	adc.w	r9, r3, r1
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eb6:	4690      	mov	r8, r2
 8004eb8:	4699      	mov	r9, r3
 8004eba:	4623      	mov	r3, r4
 8004ebc:	eb18 0303 	adds.w	r3, r8, r3
 8004ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	eb49 0303 	adc.w	r3, r9, r3
 8004eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	18db      	adds	r3, r3, r3
 8004ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee8:	4613      	mov	r3, r2
 8004eea:	eb42 0303 	adc.w	r3, r2, r3
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef8:	f7fb f9e2 	bl	80002c0 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <UART_SetConfig+0x2d4>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011c      	lsls	r4, r3, #4
 8004f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	1891      	adds	r1, r2, r2
 8004f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f24:	415b      	adcs	r3, r3
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f32:	4649      	mov	r1, r9
 8004f34:	eb43 0b01 	adc.w	fp, r3, r1
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f4c:	4692      	mov	sl, r2
 8004f4e:	469b      	mov	fp, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	eb1a 0303 	adds.w	r3, sl, r3
 8004f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	18db      	adds	r3, r3, r3
 8004f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7e:	4613      	mov	r3, r2
 8004f80:	eb42 0303 	adc.w	r3, r2, r3
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
 8004f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f8e:	f7fb f997 	bl	80002c0 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <UART_SetConfig+0x2d4>)
 8004f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2264      	movs	r2, #100	; 0x64
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	1acb      	subs	r3, r1, r3
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <UART_SetConfig+0x2d4>)
 8004fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fbc:	441c      	add	r4, r3
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	1891      	adds	r1, r2, r2
 8004fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fd8:	415b      	adcs	r3, r3
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	1851      	adds	r1, r2, r1
 8004fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	414b      	adcs	r3, r1
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	00cb      	lsls	r3, r1, #3
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005002:	4651      	mov	r1, sl
 8005004:	00ca      	lsls	r2, r1, #3
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	4603      	mov	r3, r0
 800500c:	4642      	mov	r2, r8
 800500e:	189b      	adds	r3, r3, r2
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005014:	464b      	mov	r3, r9
 8005016:	460a      	mov	r2, r1
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800502c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005034:	460b      	mov	r3, r1
 8005036:	18db      	adds	r3, r3, r3
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	4613      	mov	r3, r2
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800504a:	f7fb f939 	bl	80002c0 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <UART_SetConfig+0x2d4>)
 8005054:	fba3 1302 	umull	r1, r3, r3, r2
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2164      	movs	r1, #100	; 0x64
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	3332      	adds	r3, #50	; 0x32
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <UART_SetConfig+0x2d4>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	f003 0207 	and.w	r2, r3, #7
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4422      	add	r2, r4
 800507a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800507c:	e106      	b.n	800528c <UART_SetConfig+0x4d8>
 800507e:	bf00      	nop
 8005080:	40011000 	.word	0x40011000
 8005084:	40011400 	.word	0x40011400
 8005088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800509a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800509e:	4642      	mov	r2, r8
 80050a0:	464b      	mov	r3, r9
 80050a2:	1891      	adds	r1, r2, r2
 80050a4:	6239      	str	r1, [r7, #32]
 80050a6:	415b      	adcs	r3, r3
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ae:	4641      	mov	r1, r8
 80050b0:	1854      	adds	r4, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb43 0501 	adc.w	r5, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	00eb      	lsls	r3, r5, #3
 80050c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050c6:	00e2      	lsls	r2, r4, #3
 80050c8:	4614      	mov	r4, r2
 80050ca:	461d      	mov	r5, r3
 80050cc:	4643      	mov	r3, r8
 80050ce:	18e3      	adds	r3, r4, r3
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050d4:	464b      	mov	r3, r9
 80050d6:	eb45 0303 	adc.w	r3, r5, r3
 80050da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050fa:	4629      	mov	r1, r5
 80050fc:	008b      	lsls	r3, r1, #2
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005104:	4621      	mov	r1, r4
 8005106:	008a      	lsls	r2, r1, #2
 8005108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800510c:	f7fb f8d8 	bl	80002c0 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <UART_SetConfig+0x4e4>)
 8005116:	fba3 2302 	umull	r2, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	011c      	lsls	r4, r3, #4
 800511e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800512c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	61b9      	str	r1, [r7, #24]
 8005138:	415b      	adcs	r3, r3
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005140:	4641      	mov	r1, r8
 8005142:	1851      	adds	r1, r2, r1
 8005144:	6139      	str	r1, [r7, #16]
 8005146:	4649      	mov	r1, r9
 8005148:	414b      	adcs	r3, r1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005158:	4659      	mov	r1, fp
 800515a:	00cb      	lsls	r3, r1, #3
 800515c:	4651      	mov	r1, sl
 800515e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005162:	4651      	mov	r1, sl
 8005164:	00ca      	lsls	r2, r1, #3
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	4603      	mov	r3, r0
 800516c:	4642      	mov	r2, r8
 800516e:	189b      	adds	r3, r3, r2
 8005170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005174:	464b      	mov	r3, r9
 8005176:	460a      	mov	r2, r1
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	67bb      	str	r3, [r7, #120]	; 0x78
 800518a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005198:	4649      	mov	r1, r9
 800519a:	008b      	lsls	r3, r1, #2
 800519c:	4641      	mov	r1, r8
 800519e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a2:	4641      	mov	r1, r8
 80051a4:	008a      	lsls	r2, r1, #2
 80051a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051aa:	f7fb f889 	bl	80002c0 <__aeabi_uldivmod>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	4b38      	ldr	r3, [pc, #224]	; (8005298 <UART_SetConfig+0x4e4>)
 80051b6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2264      	movs	r2, #100	; 0x64
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	1acb      	subs	r3, r1, r3
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	3332      	adds	r3, #50	; 0x32
 80051c8:	4a33      	ldr	r2, [pc, #204]	; (8005298 <UART_SetConfig+0x4e4>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d4:	441c      	add	r4, r3
 80051d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051da:	2200      	movs	r2, #0
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
 80051de:	677a      	str	r2, [r7, #116]	; 0x74
 80051e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	415b      	adcs	r3, r3
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f4:	4641      	mov	r1, r8
 80051f6:	1851      	adds	r1, r2, r1
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	4649      	mov	r1, r9
 80051fc:	414b      	adcs	r3, r1
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800520c:	4659      	mov	r1, fp
 800520e:	00cb      	lsls	r3, r1, #3
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005216:	4651      	mov	r1, sl
 8005218:	00ca      	lsls	r2, r1, #3
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	4603      	mov	r3, r0
 8005220:	4642      	mov	r2, r8
 8005222:	189b      	adds	r3, r3, r2
 8005224:	66bb      	str	r3, [r7, #104]	; 0x68
 8005226:	464b      	mov	r3, r9
 8005228:	460a      	mov	r2, r1
 800522a:	eb42 0303 	adc.w	r3, r2, r3
 800522e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
 800523a:	667a      	str	r2, [r7, #100]	; 0x64
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005248:	4649      	mov	r1, r9
 800524a:	008b      	lsls	r3, r1, #2
 800524c:	4641      	mov	r1, r8
 800524e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005252:	4641      	mov	r1, r8
 8005254:	008a      	lsls	r2, r1, #2
 8005256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800525a:	f7fb f831 	bl	80002c0 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <UART_SetConfig+0x4e4>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <UART_SetConfig+0x4e4>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4422      	add	r2, r4
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005292:	46bd      	mov	sp, r7
 8005294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005298:	51eb851f 	.word	0x51eb851f

0800529c <std>:
 800529c:	2300      	movs	r3, #0
 800529e:	b510      	push	{r4, lr}
 80052a0:	4604      	mov	r4, r0
 80052a2:	e9c0 3300 	strd	r3, r3, [r0]
 80052a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052aa:	6083      	str	r3, [r0, #8]
 80052ac:	8181      	strh	r1, [r0, #12]
 80052ae:	6643      	str	r3, [r0, #100]	; 0x64
 80052b0:	81c2      	strh	r2, [r0, #14]
 80052b2:	6183      	str	r3, [r0, #24]
 80052b4:	4619      	mov	r1, r3
 80052b6:	2208      	movs	r2, #8
 80052b8:	305c      	adds	r0, #92	; 0x5c
 80052ba:	f000 f91f 	bl	80054fc <memset>
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <std+0x58>)
 80052c0:	6263      	str	r3, [r4, #36]	; 0x24
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <std+0x5c>)
 80052c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <std+0x60>)
 80052c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <std+0x64>)
 80052cc:	6323      	str	r3, [r4, #48]	; 0x30
 80052ce:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <std+0x68>)
 80052d0:	6224      	str	r4, [r4, #32]
 80052d2:	429c      	cmp	r4, r3
 80052d4:	d006      	beq.n	80052e4 <std+0x48>
 80052d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052da:	4294      	cmp	r4, r2
 80052dc:	d002      	beq.n	80052e4 <std+0x48>
 80052de:	33d0      	adds	r3, #208	; 0xd0
 80052e0:	429c      	cmp	r4, r3
 80052e2:	d105      	bne.n	80052f0 <std+0x54>
 80052e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ec:	f000 b938 	b.w	8005560 <__retarget_lock_init_recursive>
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	bf00      	nop
 80052f4:	08005dc1 	.word	0x08005dc1
 80052f8:	08005de3 	.word	0x08005de3
 80052fc:	08005e1b 	.word	0x08005e1b
 8005300:	08005e3f 	.word	0x08005e3f
 8005304:	200002ac 	.word	0x200002ac

08005308 <stdio_exit_handler>:
 8005308:	4a02      	ldr	r2, [pc, #8]	; (8005314 <stdio_exit_handler+0xc>)
 800530a:	4903      	ldr	r1, [pc, #12]	; (8005318 <stdio_exit_handler+0x10>)
 800530c:	4803      	ldr	r0, [pc, #12]	; (800531c <stdio_exit_handler+0x14>)
 800530e:	f000 b869 	b.w	80053e4 <_fwalk_sglue>
 8005312:	bf00      	nop
 8005314:	20000020 	.word	0x20000020
 8005318:	08005d59 	.word	0x08005d59
 800531c:	2000002c 	.word	0x2000002c

08005320 <cleanup_stdio>:
 8005320:	6841      	ldr	r1, [r0, #4]
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <cleanup_stdio+0x34>)
 8005324:	4299      	cmp	r1, r3
 8005326:	b510      	push	{r4, lr}
 8005328:	4604      	mov	r4, r0
 800532a:	d001      	beq.n	8005330 <cleanup_stdio+0x10>
 800532c:	f000 fd14 	bl	8005d58 <_fflush_r>
 8005330:	68a1      	ldr	r1, [r4, #8]
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <cleanup_stdio+0x38>)
 8005334:	4299      	cmp	r1, r3
 8005336:	d002      	beq.n	800533e <cleanup_stdio+0x1e>
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fd0d 	bl	8005d58 <_fflush_r>
 800533e:	68e1      	ldr	r1, [r4, #12]
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <cleanup_stdio+0x3c>)
 8005342:	4299      	cmp	r1, r3
 8005344:	d004      	beq.n	8005350 <cleanup_stdio+0x30>
 8005346:	4620      	mov	r0, r4
 8005348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800534c:	f000 bd04 	b.w	8005d58 <_fflush_r>
 8005350:	bd10      	pop	{r4, pc}
 8005352:	bf00      	nop
 8005354:	200002ac 	.word	0x200002ac
 8005358:	20000314 	.word	0x20000314
 800535c:	2000037c 	.word	0x2000037c

08005360 <global_stdio_init.part.0>:
 8005360:	b510      	push	{r4, lr}
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <global_stdio_init.part.0+0x30>)
 8005364:	4c0b      	ldr	r4, [pc, #44]	; (8005394 <global_stdio_init.part.0+0x34>)
 8005366:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <global_stdio_init.part.0+0x38>)
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	4620      	mov	r0, r4
 800536c:	2200      	movs	r2, #0
 800536e:	2104      	movs	r1, #4
 8005370:	f7ff ff94 	bl	800529c <std>
 8005374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005378:	2201      	movs	r2, #1
 800537a:	2109      	movs	r1, #9
 800537c:	f7ff ff8e 	bl	800529c <std>
 8005380:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005384:	2202      	movs	r2, #2
 8005386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538a:	2112      	movs	r1, #18
 800538c:	f7ff bf86 	b.w	800529c <std>
 8005390:	200003e4 	.word	0x200003e4
 8005394:	200002ac 	.word	0x200002ac
 8005398:	08005309 	.word	0x08005309

0800539c <__sfp_lock_acquire>:
 800539c:	4801      	ldr	r0, [pc, #4]	; (80053a4 <__sfp_lock_acquire+0x8>)
 800539e:	f000 b8e0 	b.w	8005562 <__retarget_lock_acquire_recursive>
 80053a2:	bf00      	nop
 80053a4:	200003e9 	.word	0x200003e9

080053a8 <__sfp_lock_release>:
 80053a8:	4801      	ldr	r0, [pc, #4]	; (80053b0 <__sfp_lock_release+0x8>)
 80053aa:	f000 b8db 	b.w	8005564 <__retarget_lock_release_recursive>
 80053ae:	bf00      	nop
 80053b0:	200003e9 	.word	0x200003e9

080053b4 <__sinit>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4604      	mov	r4, r0
 80053b8:	f7ff fff0 	bl	800539c <__sfp_lock_acquire>
 80053bc:	6a23      	ldr	r3, [r4, #32]
 80053be:	b11b      	cbz	r3, 80053c8 <__sinit+0x14>
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	f7ff bff0 	b.w	80053a8 <__sfp_lock_release>
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <__sinit+0x28>)
 80053ca:	6223      	str	r3, [r4, #32]
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <__sinit+0x2c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f5      	bne.n	80053c0 <__sinit+0xc>
 80053d4:	f7ff ffc4 	bl	8005360 <global_stdio_init.part.0>
 80053d8:	e7f2      	b.n	80053c0 <__sinit+0xc>
 80053da:	bf00      	nop
 80053dc:	08005321 	.word	0x08005321
 80053e0:	200003e4 	.word	0x200003e4

080053e4 <_fwalk_sglue>:
 80053e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e8:	4607      	mov	r7, r0
 80053ea:	4688      	mov	r8, r1
 80053ec:	4614      	mov	r4, r2
 80053ee:	2600      	movs	r6, #0
 80053f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053f4:	f1b9 0901 	subs.w	r9, r9, #1
 80053f8:	d505      	bpl.n	8005406 <_fwalk_sglue+0x22>
 80053fa:	6824      	ldr	r4, [r4, #0]
 80053fc:	2c00      	cmp	r4, #0
 80053fe:	d1f7      	bne.n	80053f0 <_fwalk_sglue+0xc>
 8005400:	4630      	mov	r0, r6
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d907      	bls.n	800541c <_fwalk_sglue+0x38>
 800540c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005410:	3301      	adds	r3, #1
 8005412:	d003      	beq.n	800541c <_fwalk_sglue+0x38>
 8005414:	4629      	mov	r1, r5
 8005416:	4638      	mov	r0, r7
 8005418:	47c0      	blx	r8
 800541a:	4306      	orrs	r6, r0
 800541c:	3568      	adds	r5, #104	; 0x68
 800541e:	e7e9      	b.n	80053f4 <_fwalk_sglue+0x10>

08005420 <iprintf>:
 8005420:	b40f      	push	{r0, r1, r2, r3}
 8005422:	b507      	push	{r0, r1, r2, lr}
 8005424:	4906      	ldr	r1, [pc, #24]	; (8005440 <iprintf+0x20>)
 8005426:	ab04      	add	r3, sp, #16
 8005428:	6808      	ldr	r0, [r1, #0]
 800542a:	f853 2b04 	ldr.w	r2, [r3], #4
 800542e:	6881      	ldr	r1, [r0, #8]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	f000 f8c1 	bl	80055b8 <_vfiprintf_r>
 8005436:	b003      	add	sp, #12
 8005438:	f85d eb04 	ldr.w	lr, [sp], #4
 800543c:	b004      	add	sp, #16
 800543e:	4770      	bx	lr
 8005440:	20000078 	.word	0x20000078

08005444 <_puts_r>:
 8005444:	6a03      	ldr	r3, [r0, #32]
 8005446:	b570      	push	{r4, r5, r6, lr}
 8005448:	6884      	ldr	r4, [r0, #8]
 800544a:	4605      	mov	r5, r0
 800544c:	460e      	mov	r6, r1
 800544e:	b90b      	cbnz	r3, 8005454 <_puts_r+0x10>
 8005450:	f7ff ffb0 	bl	80053b4 <__sinit>
 8005454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005456:	07db      	lsls	r3, r3, #31
 8005458:	d405      	bmi.n	8005466 <_puts_r+0x22>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	0598      	lsls	r0, r3, #22
 800545e:	d402      	bmi.n	8005466 <_puts_r+0x22>
 8005460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005462:	f000 f87e 	bl	8005562 <__retarget_lock_acquire_recursive>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	0719      	lsls	r1, r3, #28
 800546a:	d513      	bpl.n	8005494 <_puts_r+0x50>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	b18b      	cbz	r3, 8005494 <_puts_r+0x50>
 8005470:	3e01      	subs	r6, #1
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005478:	3b01      	subs	r3, #1
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	b9e9      	cbnz	r1, 80054ba <_puts_r+0x76>
 800547e:	2b00      	cmp	r3, #0
 8005480:	da2e      	bge.n	80054e0 <_puts_r+0x9c>
 8005482:	4622      	mov	r2, r4
 8005484:	210a      	movs	r1, #10
 8005486:	4628      	mov	r0, r5
 8005488:	f000 fcdd 	bl	8005e46 <__swbuf_r>
 800548c:	3001      	adds	r0, #1
 800548e:	d007      	beq.n	80054a0 <_puts_r+0x5c>
 8005490:	250a      	movs	r5, #10
 8005492:	e007      	b.n	80054a4 <_puts_r+0x60>
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 fd12 	bl	8005ec0 <__swsetup_r>
 800549c:	2800      	cmp	r0, #0
 800549e:	d0e7      	beq.n	8005470 <_puts_r+0x2c>
 80054a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a6:	07da      	lsls	r2, r3, #31
 80054a8:	d405      	bmi.n	80054b6 <_puts_r+0x72>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d402      	bmi.n	80054b6 <_puts_r+0x72>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f000 f857 	bl	8005564 <__retarget_lock_release_recursive>
 80054b6:	4628      	mov	r0, r5
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da04      	bge.n	80054c8 <_puts_r+0x84>
 80054be:	69a2      	ldr	r2, [r4, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dc06      	bgt.n	80054d2 <_puts_r+0x8e>
 80054c4:	290a      	cmp	r1, #10
 80054c6:	d004      	beq.n	80054d2 <_puts_r+0x8e>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	7019      	strb	r1, [r3, #0]
 80054d0:	e7cf      	b.n	8005472 <_puts_r+0x2e>
 80054d2:	4622      	mov	r2, r4
 80054d4:	4628      	mov	r0, r5
 80054d6:	f000 fcb6 	bl	8005e46 <__swbuf_r>
 80054da:	3001      	adds	r0, #1
 80054dc:	d1c9      	bne.n	8005472 <_puts_r+0x2e>
 80054de:	e7df      	b.n	80054a0 <_puts_r+0x5c>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	250a      	movs	r5, #10
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	6022      	str	r2, [r4, #0]
 80054e8:	701d      	strb	r5, [r3, #0]
 80054ea:	e7db      	b.n	80054a4 <_puts_r+0x60>

080054ec <puts>:
 80054ec:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <puts+0xc>)
 80054ee:	4601      	mov	r1, r0
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	f7ff bfa7 	b.w	8005444 <_puts_r>
 80054f6:	bf00      	nop
 80054f8:	20000078 	.word	0x20000078

080054fc <memset>:
 80054fc:	4402      	add	r2, r0
 80054fe:	4603      	mov	r3, r0
 8005500:	4293      	cmp	r3, r2
 8005502:	d100      	bne.n	8005506 <memset+0xa>
 8005504:	4770      	bx	lr
 8005506:	f803 1b01 	strb.w	r1, [r3], #1
 800550a:	e7f9      	b.n	8005500 <memset+0x4>

0800550c <__errno>:
 800550c:	4b01      	ldr	r3, [pc, #4]	; (8005514 <__errno+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000078 	.word	0x20000078

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4d0d      	ldr	r5, [pc, #52]	; (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	; (8005554 <__libc_init_array+0x3c>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2600      	movs	r6, #0
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4d0b      	ldr	r5, [pc, #44]	; (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	; (800555c <__libc_init_array+0x44>)
 800552c:	f000 fe46 	bl	80061bc <_init>
 8005530:	1b64      	subs	r4, r4, r5
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2600      	movs	r6, #0
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f855 3b04 	ldr.w	r3, [r5], #4
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	080063d0 	.word	0x080063d0
 8005554:	080063d0 	.word	0x080063d0
 8005558:	080063d0 	.word	0x080063d0
 800555c:	080063d4 	.word	0x080063d4

08005560 <__retarget_lock_init_recursive>:
 8005560:	4770      	bx	lr

08005562 <__retarget_lock_acquire_recursive>:
 8005562:	4770      	bx	lr

08005564 <__retarget_lock_release_recursive>:
 8005564:	4770      	bx	lr

08005566 <__sfputc_r>:
 8005566:	6893      	ldr	r3, [r2, #8]
 8005568:	3b01      	subs	r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	b410      	push	{r4}
 800556e:	6093      	str	r3, [r2, #8]
 8005570:	da08      	bge.n	8005584 <__sfputc_r+0x1e>
 8005572:	6994      	ldr	r4, [r2, #24]
 8005574:	42a3      	cmp	r3, r4
 8005576:	db01      	blt.n	800557c <__sfputc_r+0x16>
 8005578:	290a      	cmp	r1, #10
 800557a:	d103      	bne.n	8005584 <__sfputc_r+0x1e>
 800557c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005580:	f000 bc61 	b.w	8005e46 <__swbuf_r>
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	1c58      	adds	r0, r3, #1
 8005588:	6010      	str	r0, [r2, #0]
 800558a:	7019      	strb	r1, [r3, #0]
 800558c:	4608      	mov	r0, r1
 800558e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005592:	4770      	bx	lr

08005594 <__sfputs_r>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	4614      	mov	r4, r2
 800559c:	18d5      	adds	r5, r2, r3
 800559e:	42ac      	cmp	r4, r5
 80055a0:	d101      	bne.n	80055a6 <__sfputs_r+0x12>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e007      	b.n	80055b6 <__sfputs_r+0x22>
 80055a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055aa:	463a      	mov	r2, r7
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff ffda 	bl	8005566 <__sfputc_r>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	d1f3      	bne.n	800559e <__sfputs_r+0xa>
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055b8 <_vfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	460d      	mov	r5, r1
 80055be:	b09d      	sub	sp, #116	; 0x74
 80055c0:	4614      	mov	r4, r2
 80055c2:	4698      	mov	r8, r3
 80055c4:	4606      	mov	r6, r0
 80055c6:	b118      	cbz	r0, 80055d0 <_vfiprintf_r+0x18>
 80055c8:	6a03      	ldr	r3, [r0, #32]
 80055ca:	b90b      	cbnz	r3, 80055d0 <_vfiprintf_r+0x18>
 80055cc:	f7ff fef2 	bl	80053b4 <__sinit>
 80055d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d2:	07d9      	lsls	r1, r3, #31
 80055d4:	d405      	bmi.n	80055e2 <_vfiprintf_r+0x2a>
 80055d6:	89ab      	ldrh	r3, [r5, #12]
 80055d8:	059a      	lsls	r2, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_vfiprintf_r+0x2a>
 80055dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055de:	f7ff ffc0 	bl	8005562 <__retarget_lock_acquire_recursive>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	071b      	lsls	r3, r3, #28
 80055e6:	d501      	bpl.n	80055ec <_vfiprintf_r+0x34>
 80055e8:	692b      	ldr	r3, [r5, #16]
 80055ea:	b99b      	cbnz	r3, 8005614 <_vfiprintf_r+0x5c>
 80055ec:	4629      	mov	r1, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	f000 fc66 	bl	8005ec0 <__swsetup_r>
 80055f4:	b170      	cbz	r0, 8005614 <_vfiprintf_r+0x5c>
 80055f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055f8:	07dc      	lsls	r4, r3, #31
 80055fa:	d504      	bpl.n	8005606 <_vfiprintf_r+0x4e>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005600:	b01d      	add	sp, #116	; 0x74
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005606:	89ab      	ldrh	r3, [r5, #12]
 8005608:	0598      	lsls	r0, r3, #22
 800560a:	d4f7      	bmi.n	80055fc <_vfiprintf_r+0x44>
 800560c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800560e:	f7ff ffa9 	bl	8005564 <__retarget_lock_release_recursive>
 8005612:	e7f3      	b.n	80055fc <_vfiprintf_r+0x44>
 8005614:	2300      	movs	r3, #0
 8005616:	9309      	str	r3, [sp, #36]	; 0x24
 8005618:	2320      	movs	r3, #32
 800561a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005622:	2330      	movs	r3, #48	; 0x30
 8005624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057d8 <_vfiprintf_r+0x220>
 8005628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562c:	f04f 0901 	mov.w	r9, #1
 8005630:	4623      	mov	r3, r4
 8005632:	469a      	mov	sl, r3
 8005634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005638:	b10a      	cbz	r2, 800563e <_vfiprintf_r+0x86>
 800563a:	2a25      	cmp	r2, #37	; 0x25
 800563c:	d1f9      	bne.n	8005632 <_vfiprintf_r+0x7a>
 800563e:	ebba 0b04 	subs.w	fp, sl, r4
 8005642:	d00b      	beq.n	800565c <_vfiprintf_r+0xa4>
 8005644:	465b      	mov	r3, fp
 8005646:	4622      	mov	r2, r4
 8005648:	4629      	mov	r1, r5
 800564a:	4630      	mov	r0, r6
 800564c:	f7ff ffa2 	bl	8005594 <__sfputs_r>
 8005650:	3001      	adds	r0, #1
 8005652:	f000 80a9 	beq.w	80057a8 <_vfiprintf_r+0x1f0>
 8005656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005658:	445a      	add	r2, fp
 800565a:	9209      	str	r2, [sp, #36]	; 0x24
 800565c:	f89a 3000 	ldrb.w	r3, [sl]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80a1 	beq.w	80057a8 <_vfiprintf_r+0x1f0>
 8005666:	2300      	movs	r3, #0
 8005668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800566c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005670:	f10a 0a01 	add.w	sl, sl, #1
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567c:	931a      	str	r3, [sp, #104]	; 0x68
 800567e:	4654      	mov	r4, sl
 8005680:	2205      	movs	r2, #5
 8005682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005686:	4854      	ldr	r0, [pc, #336]	; (80057d8 <_vfiprintf_r+0x220>)
 8005688:	f7fa fdca 	bl	8000220 <memchr>
 800568c:	9a04      	ldr	r2, [sp, #16]
 800568e:	b9d8      	cbnz	r0, 80056c8 <_vfiprintf_r+0x110>
 8005690:	06d1      	lsls	r1, r2, #27
 8005692:	bf44      	itt	mi
 8005694:	2320      	movmi	r3, #32
 8005696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800569a:	0713      	lsls	r3, r2, #28
 800569c:	bf44      	itt	mi
 800569e:	232b      	movmi	r3, #43	; 0x2b
 80056a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a4:	f89a 3000 	ldrb.w	r3, [sl]
 80056a8:	2b2a      	cmp	r3, #42	; 0x2a
 80056aa:	d015      	beq.n	80056d8 <_vfiprintf_r+0x120>
 80056ac:	9a07      	ldr	r2, [sp, #28]
 80056ae:	4654      	mov	r4, sl
 80056b0:	2000      	movs	r0, #0
 80056b2:	f04f 0c0a 	mov.w	ip, #10
 80056b6:	4621      	mov	r1, r4
 80056b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056bc:	3b30      	subs	r3, #48	; 0x30
 80056be:	2b09      	cmp	r3, #9
 80056c0:	d94d      	bls.n	800575e <_vfiprintf_r+0x1a6>
 80056c2:	b1b0      	cbz	r0, 80056f2 <_vfiprintf_r+0x13a>
 80056c4:	9207      	str	r2, [sp, #28]
 80056c6:	e014      	b.n	80056f2 <_vfiprintf_r+0x13a>
 80056c8:	eba0 0308 	sub.w	r3, r0, r8
 80056cc:	fa09 f303 	lsl.w	r3, r9, r3
 80056d0:	4313      	orrs	r3, r2
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	46a2      	mov	sl, r4
 80056d6:	e7d2      	b.n	800567e <_vfiprintf_r+0xc6>
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	1d19      	adds	r1, r3, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	9103      	str	r1, [sp, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bfbb      	ittet	lt
 80056e4:	425b      	neglt	r3, r3
 80056e6:	f042 0202 	orrlt.w	r2, r2, #2
 80056ea:	9307      	strge	r3, [sp, #28]
 80056ec:	9307      	strlt	r3, [sp, #28]
 80056ee:	bfb8      	it	lt
 80056f0:	9204      	strlt	r2, [sp, #16]
 80056f2:	7823      	ldrb	r3, [r4, #0]
 80056f4:	2b2e      	cmp	r3, #46	; 0x2e
 80056f6:	d10c      	bne.n	8005712 <_vfiprintf_r+0x15a>
 80056f8:	7863      	ldrb	r3, [r4, #1]
 80056fa:	2b2a      	cmp	r3, #42	; 0x2a
 80056fc:	d134      	bne.n	8005768 <_vfiprintf_r+0x1b0>
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	1d1a      	adds	r2, r3, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	9203      	str	r2, [sp, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfb8      	it	lt
 800570a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800570e:	3402      	adds	r4, #2
 8005710:	9305      	str	r3, [sp, #20]
 8005712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057e8 <_vfiprintf_r+0x230>
 8005716:	7821      	ldrb	r1, [r4, #0]
 8005718:	2203      	movs	r2, #3
 800571a:	4650      	mov	r0, sl
 800571c:	f7fa fd80 	bl	8000220 <memchr>
 8005720:	b138      	cbz	r0, 8005732 <_vfiprintf_r+0x17a>
 8005722:	9b04      	ldr	r3, [sp, #16]
 8005724:	eba0 000a 	sub.w	r0, r0, sl
 8005728:	2240      	movs	r2, #64	; 0x40
 800572a:	4082      	lsls	r2, r0
 800572c:	4313      	orrs	r3, r2
 800572e:	3401      	adds	r4, #1
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4829      	ldr	r0, [pc, #164]	; (80057dc <_vfiprintf_r+0x224>)
 8005738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573c:	2206      	movs	r2, #6
 800573e:	f7fa fd6f 	bl	8000220 <memchr>
 8005742:	2800      	cmp	r0, #0
 8005744:	d03f      	beq.n	80057c6 <_vfiprintf_r+0x20e>
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <_vfiprintf_r+0x228>)
 8005748:	bb1b      	cbnz	r3, 8005792 <_vfiprintf_r+0x1da>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	3307      	adds	r3, #7
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	3308      	adds	r3, #8
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	443b      	add	r3, r7
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	e768      	b.n	8005630 <_vfiprintf_r+0x78>
 800575e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005762:	460c      	mov	r4, r1
 8005764:	2001      	movs	r0, #1
 8005766:	e7a6      	b.n	80056b6 <_vfiprintf_r+0xfe>
 8005768:	2300      	movs	r3, #0
 800576a:	3401      	adds	r4, #1
 800576c:	9305      	str	r3, [sp, #20]
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 0c0a 	mov.w	ip, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577a:	3a30      	subs	r2, #48	; 0x30
 800577c:	2a09      	cmp	r2, #9
 800577e:	d903      	bls.n	8005788 <_vfiprintf_r+0x1d0>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0c6      	beq.n	8005712 <_vfiprintf_r+0x15a>
 8005784:	9105      	str	r1, [sp, #20]
 8005786:	e7c4      	b.n	8005712 <_vfiprintf_r+0x15a>
 8005788:	fb0c 2101 	mla	r1, ip, r1, r2
 800578c:	4604      	mov	r4, r0
 800578e:	2301      	movs	r3, #1
 8005790:	e7f0      	b.n	8005774 <_vfiprintf_r+0x1bc>
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <_vfiprintf_r+0x22c>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4630      	mov	r0, r6
 800579e:	f3af 8000 	nop.w
 80057a2:	4607      	mov	r7, r0
 80057a4:	1c78      	adds	r0, r7, #1
 80057a6:	d1d6      	bne.n	8005756 <_vfiprintf_r+0x19e>
 80057a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057aa:	07d9      	lsls	r1, r3, #31
 80057ac:	d405      	bmi.n	80057ba <_vfiprintf_r+0x202>
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	059a      	lsls	r2, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_vfiprintf_r+0x202>
 80057b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b6:	f7ff fed5 	bl	8005564 <__retarget_lock_release_recursive>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	065b      	lsls	r3, r3, #25
 80057be:	f53f af1d 	bmi.w	80055fc <_vfiprintf_r+0x44>
 80057c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057c4:	e71c      	b.n	8005600 <_vfiprintf_r+0x48>
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <_vfiprintf_r+0x22c>)
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f919 	bl	8005a08 <_printf_i>
 80057d6:	e7e4      	b.n	80057a2 <_vfiprintf_r+0x1ea>
 80057d8:	08006394 	.word	0x08006394
 80057dc:	0800639e 	.word	0x0800639e
 80057e0:	00000000 	.word	0x00000000
 80057e4:	08005595 	.word	0x08005595
 80057e8:	0800639a 	.word	0x0800639a

080057ec <sbrk_aligned>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4e0e      	ldr	r6, [pc, #56]	; (8005828 <sbrk_aligned+0x3c>)
 80057f0:	460c      	mov	r4, r1
 80057f2:	6831      	ldr	r1, [r6, #0]
 80057f4:	4605      	mov	r5, r0
 80057f6:	b911      	cbnz	r1, 80057fe <sbrk_aligned+0x12>
 80057f8:	f000 fc72 	bl	80060e0 <_sbrk_r>
 80057fc:	6030      	str	r0, [r6, #0]
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 fc6d 	bl	80060e0 <_sbrk_r>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d00a      	beq.n	8005820 <sbrk_aligned+0x34>
 800580a:	1cc4      	adds	r4, r0, #3
 800580c:	f024 0403 	bic.w	r4, r4, #3
 8005810:	42a0      	cmp	r0, r4
 8005812:	d007      	beq.n	8005824 <sbrk_aligned+0x38>
 8005814:	1a21      	subs	r1, r4, r0
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fc62 	bl	80060e0 <_sbrk_r>
 800581c:	3001      	adds	r0, #1
 800581e:	d101      	bne.n	8005824 <sbrk_aligned+0x38>
 8005820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005824:	4620      	mov	r0, r4
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	200003f0 	.word	0x200003f0

0800582c <_malloc_r>:
 800582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005830:	1ccd      	adds	r5, r1, #3
 8005832:	f025 0503 	bic.w	r5, r5, #3
 8005836:	3508      	adds	r5, #8
 8005838:	2d0c      	cmp	r5, #12
 800583a:	bf38      	it	cc
 800583c:	250c      	movcc	r5, #12
 800583e:	2d00      	cmp	r5, #0
 8005840:	4607      	mov	r7, r0
 8005842:	db01      	blt.n	8005848 <_malloc_r+0x1c>
 8005844:	42a9      	cmp	r1, r5
 8005846:	d905      	bls.n	8005854 <_malloc_r+0x28>
 8005848:	230c      	movs	r3, #12
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	2600      	movs	r6, #0
 800584e:	4630      	mov	r0, r6
 8005850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005854:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005928 <_malloc_r+0xfc>
 8005858:	f000 faa6 	bl	8005da8 <__malloc_lock>
 800585c:	f8d8 3000 	ldr.w	r3, [r8]
 8005860:	461c      	mov	r4, r3
 8005862:	bb5c      	cbnz	r4, 80058bc <_malloc_r+0x90>
 8005864:	4629      	mov	r1, r5
 8005866:	4638      	mov	r0, r7
 8005868:	f7ff ffc0 	bl	80057ec <sbrk_aligned>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	4604      	mov	r4, r0
 8005870:	d155      	bne.n	800591e <_malloc_r+0xf2>
 8005872:	f8d8 4000 	ldr.w	r4, [r8]
 8005876:	4626      	mov	r6, r4
 8005878:	2e00      	cmp	r6, #0
 800587a:	d145      	bne.n	8005908 <_malloc_r+0xdc>
 800587c:	2c00      	cmp	r4, #0
 800587e:	d048      	beq.n	8005912 <_malloc_r+0xe6>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	4631      	mov	r1, r6
 8005884:	4638      	mov	r0, r7
 8005886:	eb04 0903 	add.w	r9, r4, r3
 800588a:	f000 fc29 	bl	80060e0 <_sbrk_r>
 800588e:	4581      	cmp	r9, r0
 8005890:	d13f      	bne.n	8005912 <_malloc_r+0xe6>
 8005892:	6821      	ldr	r1, [r4, #0]
 8005894:	1a6d      	subs	r5, r5, r1
 8005896:	4629      	mov	r1, r5
 8005898:	4638      	mov	r0, r7
 800589a:	f7ff ffa7 	bl	80057ec <sbrk_aligned>
 800589e:	3001      	adds	r0, #1
 80058a0:	d037      	beq.n	8005912 <_malloc_r+0xe6>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	442b      	add	r3, r5
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	f8d8 3000 	ldr.w	r3, [r8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d038      	beq.n	8005922 <_malloc_r+0xf6>
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	42a2      	cmp	r2, r4
 80058b4:	d12b      	bne.n	800590e <_malloc_r+0xe2>
 80058b6:	2200      	movs	r2, #0
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	e00f      	b.n	80058dc <_malloc_r+0xb0>
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	1b52      	subs	r2, r2, r5
 80058c0:	d41f      	bmi.n	8005902 <_malloc_r+0xd6>
 80058c2:	2a0b      	cmp	r2, #11
 80058c4:	d917      	bls.n	80058f6 <_malloc_r+0xca>
 80058c6:	1961      	adds	r1, r4, r5
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	6025      	str	r5, [r4, #0]
 80058cc:	bf18      	it	ne
 80058ce:	6059      	strne	r1, [r3, #4]
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	bf08      	it	eq
 80058d4:	f8c8 1000 	streq.w	r1, [r8]
 80058d8:	5162      	str	r2, [r4, r5]
 80058da:	604b      	str	r3, [r1, #4]
 80058dc:	4638      	mov	r0, r7
 80058de:	f104 060b 	add.w	r6, r4, #11
 80058e2:	f000 fa67 	bl	8005db4 <__malloc_unlock>
 80058e6:	f026 0607 	bic.w	r6, r6, #7
 80058ea:	1d23      	adds	r3, r4, #4
 80058ec:	1af2      	subs	r2, r6, r3
 80058ee:	d0ae      	beq.n	800584e <_malloc_r+0x22>
 80058f0:	1b9b      	subs	r3, r3, r6
 80058f2:	50a3      	str	r3, [r4, r2]
 80058f4:	e7ab      	b.n	800584e <_malloc_r+0x22>
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	6862      	ldr	r2, [r4, #4]
 80058fa:	d1dd      	bne.n	80058b8 <_malloc_r+0x8c>
 80058fc:	f8c8 2000 	str.w	r2, [r8]
 8005900:	e7ec      	b.n	80058dc <_malloc_r+0xb0>
 8005902:	4623      	mov	r3, r4
 8005904:	6864      	ldr	r4, [r4, #4]
 8005906:	e7ac      	b.n	8005862 <_malloc_r+0x36>
 8005908:	4634      	mov	r4, r6
 800590a:	6876      	ldr	r6, [r6, #4]
 800590c:	e7b4      	b.n	8005878 <_malloc_r+0x4c>
 800590e:	4613      	mov	r3, r2
 8005910:	e7cc      	b.n	80058ac <_malloc_r+0x80>
 8005912:	230c      	movs	r3, #12
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	4638      	mov	r0, r7
 8005918:	f000 fa4c 	bl	8005db4 <__malloc_unlock>
 800591c:	e797      	b.n	800584e <_malloc_r+0x22>
 800591e:	6025      	str	r5, [r4, #0]
 8005920:	e7dc      	b.n	80058dc <_malloc_r+0xb0>
 8005922:	605b      	str	r3, [r3, #4]
 8005924:	deff      	udf	#255	; 0xff
 8005926:	bf00      	nop
 8005928:	200003ec 	.word	0x200003ec

0800592c <_printf_common>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	4616      	mov	r6, r2
 8005932:	4699      	mov	r9, r3
 8005934:	688a      	ldr	r2, [r1, #8]
 8005936:	690b      	ldr	r3, [r1, #16]
 8005938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800593c:	4293      	cmp	r3, r2
 800593e:	bfb8      	it	lt
 8005940:	4613      	movlt	r3, r2
 8005942:	6033      	str	r3, [r6, #0]
 8005944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005948:	4607      	mov	r7, r0
 800594a:	460c      	mov	r4, r1
 800594c:	b10a      	cbz	r2, 8005952 <_printf_common+0x26>
 800594e:	3301      	adds	r3, #1
 8005950:	6033      	str	r3, [r6, #0]
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	0699      	lsls	r1, r3, #26
 8005956:	bf42      	ittt	mi
 8005958:	6833      	ldrmi	r3, [r6, #0]
 800595a:	3302      	addmi	r3, #2
 800595c:	6033      	strmi	r3, [r6, #0]
 800595e:	6825      	ldr	r5, [r4, #0]
 8005960:	f015 0506 	ands.w	r5, r5, #6
 8005964:	d106      	bne.n	8005974 <_printf_common+0x48>
 8005966:	f104 0a19 	add.w	sl, r4, #25
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	6832      	ldr	r2, [r6, #0]
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	42ab      	cmp	r3, r5
 8005972:	dc26      	bgt.n	80059c2 <_printf_common+0x96>
 8005974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005978:	1e13      	subs	r3, r2, #0
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	bf18      	it	ne
 800597e:	2301      	movne	r3, #1
 8005980:	0692      	lsls	r2, r2, #26
 8005982:	d42b      	bmi.n	80059dc <_printf_common+0xb0>
 8005984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005988:	4649      	mov	r1, r9
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d01e      	beq.n	80059d0 <_printf_common+0xa4>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	6922      	ldr	r2, [r4, #16]
 8005996:	f003 0306 	and.w	r3, r3, #6
 800599a:	2b04      	cmp	r3, #4
 800599c:	bf02      	ittt	eq
 800599e:	68e5      	ldreq	r5, [r4, #12]
 80059a0:	6833      	ldreq	r3, [r6, #0]
 80059a2:	1aed      	subeq	r5, r5, r3
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	bf0c      	ite	eq
 80059a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ac:	2500      	movne	r5, #0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	bfc4      	itt	gt
 80059b2:	1a9b      	subgt	r3, r3, r2
 80059b4:	18ed      	addgt	r5, r5, r3
 80059b6:	2600      	movs	r6, #0
 80059b8:	341a      	adds	r4, #26
 80059ba:	42b5      	cmp	r5, r6
 80059bc:	d11a      	bne.n	80059f4 <_printf_common+0xc8>
 80059be:	2000      	movs	r0, #0
 80059c0:	e008      	b.n	80059d4 <_printf_common+0xa8>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4652      	mov	r2, sl
 80059c6:	4649      	mov	r1, r9
 80059c8:	4638      	mov	r0, r7
 80059ca:	47c0      	blx	r8
 80059cc:	3001      	adds	r0, #1
 80059ce:	d103      	bne.n	80059d8 <_printf_common+0xac>
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	3501      	adds	r5, #1
 80059da:	e7c6      	b.n	800596a <_printf_common+0x3e>
 80059dc:	18e1      	adds	r1, r4, r3
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	2030      	movs	r0, #48	; 0x30
 80059e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059e6:	4422      	add	r2, r4
 80059e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059f0:	3302      	adds	r3, #2
 80059f2:	e7c7      	b.n	8005984 <_printf_common+0x58>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4622      	mov	r2, r4
 80059f8:	4649      	mov	r1, r9
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	3001      	adds	r0, #1
 8005a00:	d0e6      	beq.n	80059d0 <_printf_common+0xa4>
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7d9      	b.n	80059ba <_printf_common+0x8e>
	...

08005a08 <_printf_i>:
 8005a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	7e0f      	ldrb	r7, [r1, #24]
 8005a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a10:	2f78      	cmp	r7, #120	; 0x78
 8005a12:	4691      	mov	r9, r2
 8005a14:	4680      	mov	r8, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	469a      	mov	sl, r3
 8005a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a1e:	d807      	bhi.n	8005a30 <_printf_i+0x28>
 8005a20:	2f62      	cmp	r7, #98	; 0x62
 8005a22:	d80a      	bhi.n	8005a3a <_printf_i+0x32>
 8005a24:	2f00      	cmp	r7, #0
 8005a26:	f000 80d4 	beq.w	8005bd2 <_printf_i+0x1ca>
 8005a2a:	2f58      	cmp	r7, #88	; 0x58
 8005a2c:	f000 80c0 	beq.w	8005bb0 <_printf_i+0x1a8>
 8005a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a38:	e03a      	b.n	8005ab0 <_printf_i+0xa8>
 8005a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a3e:	2b15      	cmp	r3, #21
 8005a40:	d8f6      	bhi.n	8005a30 <_printf_i+0x28>
 8005a42:	a101      	add	r1, pc, #4	; (adr r1, 8005a48 <_printf_i+0x40>)
 8005a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a48:	08005aa1 	.word	0x08005aa1
 8005a4c:	08005ab5 	.word	0x08005ab5
 8005a50:	08005a31 	.word	0x08005a31
 8005a54:	08005a31 	.word	0x08005a31
 8005a58:	08005a31 	.word	0x08005a31
 8005a5c:	08005a31 	.word	0x08005a31
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005a31 	.word	0x08005a31
 8005a68:	08005a31 	.word	0x08005a31
 8005a6c:	08005a31 	.word	0x08005a31
 8005a70:	08005a31 	.word	0x08005a31
 8005a74:	08005bb9 	.word	0x08005bb9
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005b73 	.word	0x08005b73
 8005a80:	08005a31 	.word	0x08005a31
 8005a84:	08005a31 	.word	0x08005a31
 8005a88:	08005bdb 	.word	0x08005bdb
 8005a8c:	08005a31 	.word	0x08005a31
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005a31 	.word	0x08005a31
 8005a98:	08005a31 	.word	0x08005a31
 8005a9c:	08005b7b 	.word	0x08005b7b
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	602a      	str	r2, [r5, #0]
 8005aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e09f      	b.n	8005bf4 <_printf_i+0x1ec>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	0607      	lsls	r7, r0, #24
 8005aba:	f103 0104 	add.w	r1, r3, #4
 8005abe:	6029      	str	r1, [r5, #0]
 8005ac0:	d501      	bpl.n	8005ac6 <_printf_i+0xbe>
 8005ac2:	681e      	ldr	r6, [r3, #0]
 8005ac4:	e003      	b.n	8005ace <_printf_i+0xc6>
 8005ac6:	0646      	lsls	r6, r0, #25
 8005ac8:	d5fb      	bpl.n	8005ac2 <_printf_i+0xba>
 8005aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	da03      	bge.n	8005ada <_printf_i+0xd2>
 8005ad2:	232d      	movs	r3, #45	; 0x2d
 8005ad4:	4276      	negs	r6, r6
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ada:	485a      	ldr	r0, [pc, #360]	; (8005c44 <_printf_i+0x23c>)
 8005adc:	230a      	movs	r3, #10
 8005ade:	e012      	b.n	8005b06 <_printf_i+0xfe>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6029      	str	r1, [r5, #0]
 8005ae8:	0605      	lsls	r5, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xe8>
 8005aec:	681e      	ldr	r6, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0xee>
 8005af0:	0641      	lsls	r1, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xe4>
 8005af4:	881e      	ldrh	r6, [r3, #0]
 8005af6:	4853      	ldr	r0, [pc, #332]	; (8005c44 <_printf_i+0x23c>)
 8005af8:	2f6f      	cmp	r7, #111	; 0x6f
 8005afa:	bf0c      	ite	eq
 8005afc:	2308      	moveq	r3, #8
 8005afe:	230a      	movne	r3, #10
 8005b00:	2100      	movs	r1, #0
 8005b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b06:	6865      	ldr	r5, [r4, #4]
 8005b08:	60a5      	str	r5, [r4, #8]
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	bfa2      	ittt	ge
 8005b0e:	6821      	ldrge	r1, [r4, #0]
 8005b10:	f021 0104 	bicge.w	r1, r1, #4
 8005b14:	6021      	strge	r1, [r4, #0]
 8005b16:	b90e      	cbnz	r6, 8005b1c <_printf_i+0x114>
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	d04b      	beq.n	8005bb4 <_printf_i+0x1ac>
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b22:	fb03 6711 	mls	r7, r3, r1, r6
 8005b26:	5dc7      	ldrb	r7, [r0, r7]
 8005b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b2c:	4637      	mov	r7, r6
 8005b2e:	42bb      	cmp	r3, r7
 8005b30:	460e      	mov	r6, r1
 8005b32:	d9f4      	bls.n	8005b1e <_printf_i+0x116>
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d10b      	bne.n	8005b50 <_printf_i+0x148>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	07de      	lsls	r6, r3, #31
 8005b3c:	d508      	bpl.n	8005b50 <_printf_i+0x148>
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	6861      	ldr	r1, [r4, #4]
 8005b42:	4299      	cmp	r1, r3
 8005b44:	bfde      	ittt	le
 8005b46:	2330      	movle	r3, #48	; 0x30
 8005b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b50:	1b52      	subs	r2, r2, r5
 8005b52:	6122      	str	r2, [r4, #16]
 8005b54:	f8cd a000 	str.w	sl, [sp]
 8005b58:	464b      	mov	r3, r9
 8005b5a:	aa03      	add	r2, sp, #12
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4640      	mov	r0, r8
 8005b60:	f7ff fee4 	bl	800592c <_printf_common>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d14a      	bne.n	8005bfe <_printf_i+0x1f6>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b6c:	b004      	add	sp, #16
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f043 0320 	orr.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	4833      	ldr	r0, [pc, #204]	; (8005c48 <_printf_i+0x240>)
 8005b7c:	2778      	movs	r7, #120	; 0x78
 8005b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	6829      	ldr	r1, [r5, #0]
 8005b86:	061f      	lsls	r7, r3, #24
 8005b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b8c:	d402      	bmi.n	8005b94 <_printf_i+0x18c>
 8005b8e:	065f      	lsls	r7, r3, #25
 8005b90:	bf48      	it	mi
 8005b92:	b2b6      	uxthmi	r6, r6
 8005b94:	07df      	lsls	r7, r3, #31
 8005b96:	bf48      	it	mi
 8005b98:	f043 0320 	orrmi.w	r3, r3, #32
 8005b9c:	6029      	str	r1, [r5, #0]
 8005b9e:	bf48      	it	mi
 8005ba0:	6023      	strmi	r3, [r4, #0]
 8005ba2:	b91e      	cbnz	r6, 8005bac <_printf_i+0x1a4>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	f023 0320 	bic.w	r3, r3, #32
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	2310      	movs	r3, #16
 8005bae:	e7a7      	b.n	8005b00 <_printf_i+0xf8>
 8005bb0:	4824      	ldr	r0, [pc, #144]	; (8005c44 <_printf_i+0x23c>)
 8005bb2:	e7e4      	b.n	8005b7e <_printf_i+0x176>
 8005bb4:	4615      	mov	r5, r2
 8005bb6:	e7bd      	b.n	8005b34 <_printf_i+0x12c>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	6826      	ldr	r6, [r4, #0]
 8005bbc:	6961      	ldr	r1, [r4, #20]
 8005bbe:	1d18      	adds	r0, r3, #4
 8005bc0:	6028      	str	r0, [r5, #0]
 8005bc2:	0635      	lsls	r5, r6, #24
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	d501      	bpl.n	8005bcc <_printf_i+0x1c4>
 8005bc8:	6019      	str	r1, [r3, #0]
 8005bca:	e002      	b.n	8005bd2 <_printf_i+0x1ca>
 8005bcc:	0670      	lsls	r0, r6, #25
 8005bce:	d5fb      	bpl.n	8005bc8 <_printf_i+0x1c0>
 8005bd0:	8019      	strh	r1, [r3, #0]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	4615      	mov	r5, r2
 8005bd8:	e7bc      	b.n	8005b54 <_printf_i+0x14c>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	602a      	str	r2, [r5, #0]
 8005be0:	681d      	ldr	r5, [r3, #0]
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	2100      	movs	r1, #0
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7fa fb1a 	bl	8000220 <memchr>
 8005bec:	b108      	cbz	r0, 8005bf2 <_printf_i+0x1ea>
 8005bee:	1b40      	subs	r0, r0, r5
 8005bf0:	6060      	str	r0, [r4, #4]
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	e7aa      	b.n	8005b54 <_printf_i+0x14c>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	462a      	mov	r2, r5
 8005c02:	4649      	mov	r1, r9
 8005c04:	4640      	mov	r0, r8
 8005c06:	47d0      	blx	sl
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d0ad      	beq.n	8005b68 <_printf_i+0x160>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	079b      	lsls	r3, r3, #30
 8005c10:	d413      	bmi.n	8005c3a <_printf_i+0x232>
 8005c12:	68e0      	ldr	r0, [r4, #12]
 8005c14:	9b03      	ldr	r3, [sp, #12]
 8005c16:	4298      	cmp	r0, r3
 8005c18:	bfb8      	it	lt
 8005c1a:	4618      	movlt	r0, r3
 8005c1c:	e7a6      	b.n	8005b6c <_printf_i+0x164>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4632      	mov	r2, r6
 8005c22:	4649      	mov	r1, r9
 8005c24:	4640      	mov	r0, r8
 8005c26:	47d0      	blx	sl
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d09d      	beq.n	8005b68 <_printf_i+0x160>
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	9903      	ldr	r1, [sp, #12]
 8005c32:	1a5b      	subs	r3, r3, r1
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	dcf2      	bgt.n	8005c1e <_printf_i+0x216>
 8005c38:	e7eb      	b.n	8005c12 <_printf_i+0x20a>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	f104 0619 	add.w	r6, r4, #25
 8005c40:	e7f5      	b.n	8005c2e <_printf_i+0x226>
 8005c42:	bf00      	nop
 8005c44:	080063a5 	.word	0x080063a5
 8005c48:	080063b6 	.word	0x080063b6

08005c4c <__sflush_r>:
 8005c4c:	898a      	ldrh	r2, [r1, #12]
 8005c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c52:	4605      	mov	r5, r0
 8005c54:	0710      	lsls	r0, r2, #28
 8005c56:	460c      	mov	r4, r1
 8005c58:	d458      	bmi.n	8005d0c <__sflush_r+0xc0>
 8005c5a:	684b      	ldr	r3, [r1, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dc05      	bgt.n	8005c6c <__sflush_r+0x20>
 8005c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	dc02      	bgt.n	8005c6c <__sflush_r+0x20>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	d0f9      	beq.n	8005c66 <__sflush_r+0x1a>
 8005c72:	2300      	movs	r3, #0
 8005c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c78:	682f      	ldr	r7, [r5, #0]
 8005c7a:	6a21      	ldr	r1, [r4, #32]
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	d032      	beq.n	8005ce6 <__sflush_r+0x9a>
 8005c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	075a      	lsls	r2, r3, #29
 8005c86:	d505      	bpl.n	8005c94 <__sflush_r+0x48>
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	1ac0      	subs	r0, r0, r3
 8005c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c8e:	b10b      	cbz	r3, 8005c94 <__sflush_r+0x48>
 8005c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c92:	1ac0      	subs	r0, r0, r3
 8005c94:	2300      	movs	r3, #0
 8005c96:	4602      	mov	r2, r0
 8005c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c9a:	6a21      	ldr	r1, [r4, #32]
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	d106      	bne.n	8005cb4 <__sflush_r+0x68>
 8005ca6:	6829      	ldr	r1, [r5, #0]
 8005ca8:	291d      	cmp	r1, #29
 8005caa:	d82b      	bhi.n	8005d04 <__sflush_r+0xb8>
 8005cac:	4a29      	ldr	r2, [pc, #164]	; (8005d54 <__sflush_r+0x108>)
 8005cae:	410a      	asrs	r2, r1
 8005cb0:	07d6      	lsls	r6, r2, #31
 8005cb2:	d427      	bmi.n	8005d04 <__sflush_r+0xb8>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	6062      	str	r2, [r4, #4]
 8005cb8:	04d9      	lsls	r1, r3, #19
 8005cba:	6922      	ldr	r2, [r4, #16]
 8005cbc:	6022      	str	r2, [r4, #0]
 8005cbe:	d504      	bpl.n	8005cca <__sflush_r+0x7e>
 8005cc0:	1c42      	adds	r2, r0, #1
 8005cc2:	d101      	bne.n	8005cc8 <__sflush_r+0x7c>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b903      	cbnz	r3, 8005cca <__sflush_r+0x7e>
 8005cc8:	6560      	str	r0, [r4, #84]	; 0x54
 8005cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ccc:	602f      	str	r7, [r5, #0]
 8005cce:	2900      	cmp	r1, #0
 8005cd0:	d0c9      	beq.n	8005c66 <__sflush_r+0x1a>
 8005cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	d002      	beq.n	8005ce0 <__sflush_r+0x94>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 fa22 	bl	8006124 <_free_r>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ce4:	e7c0      	b.n	8005c68 <__sflush_r+0x1c>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b0      	blx	r6
 8005cec:	1c41      	adds	r1, r0, #1
 8005cee:	d1c8      	bne.n	8005c82 <__sflush_r+0x36>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0c5      	beq.n	8005c82 <__sflush_r+0x36>
 8005cf6:	2b1d      	cmp	r3, #29
 8005cf8:	d001      	beq.n	8005cfe <__sflush_r+0xb2>
 8005cfa:	2b16      	cmp	r3, #22
 8005cfc:	d101      	bne.n	8005d02 <__sflush_r+0xb6>
 8005cfe:	602f      	str	r7, [r5, #0]
 8005d00:	e7b1      	b.n	8005c66 <__sflush_r+0x1a>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	e7ad      	b.n	8005c68 <__sflush_r+0x1c>
 8005d0c:	690f      	ldr	r7, [r1, #16]
 8005d0e:	2f00      	cmp	r7, #0
 8005d10:	d0a9      	beq.n	8005c66 <__sflush_r+0x1a>
 8005d12:	0793      	lsls	r3, r2, #30
 8005d14:	680e      	ldr	r6, [r1, #0]
 8005d16:	bf08      	it	eq
 8005d18:	694b      	ldreq	r3, [r1, #20]
 8005d1a:	600f      	str	r7, [r1, #0]
 8005d1c:	bf18      	it	ne
 8005d1e:	2300      	movne	r3, #0
 8005d20:	eba6 0807 	sub.w	r8, r6, r7
 8005d24:	608b      	str	r3, [r1, #8]
 8005d26:	f1b8 0f00 	cmp.w	r8, #0
 8005d2a:	dd9c      	ble.n	8005c66 <__sflush_r+0x1a>
 8005d2c:	6a21      	ldr	r1, [r4, #32]
 8005d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d30:	4643      	mov	r3, r8
 8005d32:	463a      	mov	r2, r7
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b0      	blx	r6
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	dc06      	bgt.n	8005d4a <__sflush_r+0xfe>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d48:	e78e      	b.n	8005c68 <__sflush_r+0x1c>
 8005d4a:	4407      	add	r7, r0
 8005d4c:	eba8 0800 	sub.w	r8, r8, r0
 8005d50:	e7e9      	b.n	8005d26 <__sflush_r+0xda>
 8005d52:	bf00      	nop
 8005d54:	dfbffffe 	.word	0xdfbffffe

08005d58 <_fflush_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	690b      	ldr	r3, [r1, #16]
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	b913      	cbnz	r3, 8005d68 <_fflush_r+0x10>
 8005d62:	2500      	movs	r5, #0
 8005d64:	4628      	mov	r0, r5
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	b118      	cbz	r0, 8005d72 <_fflush_r+0x1a>
 8005d6a:	6a03      	ldr	r3, [r0, #32]
 8005d6c:	b90b      	cbnz	r3, 8005d72 <_fflush_r+0x1a>
 8005d6e:	f7ff fb21 	bl	80053b4 <__sinit>
 8005d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f3      	beq.n	8005d62 <_fflush_r+0xa>
 8005d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d7c:	07d0      	lsls	r0, r2, #31
 8005d7e:	d404      	bmi.n	8005d8a <_fflush_r+0x32>
 8005d80:	0599      	lsls	r1, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_fflush_r+0x32>
 8005d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d86:	f7ff fbec 	bl	8005562 <__retarget_lock_acquire_recursive>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	f7ff ff5d 	bl	8005c4c <__sflush_r>
 8005d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d94:	07da      	lsls	r2, r3, #31
 8005d96:	4605      	mov	r5, r0
 8005d98:	d4e4      	bmi.n	8005d64 <_fflush_r+0xc>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	059b      	lsls	r3, r3, #22
 8005d9e:	d4e1      	bmi.n	8005d64 <_fflush_r+0xc>
 8005da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da2:	f7ff fbdf 	bl	8005564 <__retarget_lock_release_recursive>
 8005da6:	e7dd      	b.n	8005d64 <_fflush_r+0xc>

08005da8 <__malloc_lock>:
 8005da8:	4801      	ldr	r0, [pc, #4]	; (8005db0 <__malloc_lock+0x8>)
 8005daa:	f7ff bbda 	b.w	8005562 <__retarget_lock_acquire_recursive>
 8005dae:	bf00      	nop
 8005db0:	200003e8 	.word	0x200003e8

08005db4 <__malloc_unlock>:
 8005db4:	4801      	ldr	r0, [pc, #4]	; (8005dbc <__malloc_unlock+0x8>)
 8005db6:	f7ff bbd5 	b.w	8005564 <__retarget_lock_release_recursive>
 8005dba:	bf00      	nop
 8005dbc:	200003e8 	.word	0x200003e8

08005dc0 <__sread>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc8:	f000 f978 	bl	80060bc <_read_r>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	bfab      	itete	ge
 8005dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8005dd4:	181b      	addge	r3, r3, r0
 8005dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dda:	bfac      	ite	ge
 8005ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dde:	81a3      	strhlt	r3, [r4, #12]
 8005de0:	bd10      	pop	{r4, pc}

08005de2 <__swrite>:
 8005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	461f      	mov	r7, r3
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	05db      	lsls	r3, r3, #23
 8005dec:	4605      	mov	r5, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	4616      	mov	r6, r2
 8005df2:	d505      	bpl.n	8005e00 <__swrite+0x1e>
 8005df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df8:	2302      	movs	r3, #2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f000 f94c 	bl	8006098 <_lseek_r>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	463b      	mov	r3, r7
 8005e10:	4628      	mov	r0, r5
 8005e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e16:	f000 b973 	b.w	8006100 <_write_r>

08005e1a <__sseek>:
 8005e1a:	b510      	push	{r4, lr}
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e22:	f000 f939 	bl	8006098 <_lseek_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	bf15      	itete	ne
 8005e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e36:	81a3      	strheq	r3, [r4, #12]
 8005e38:	bf18      	it	ne
 8005e3a:	81a3      	strhne	r3, [r4, #12]
 8005e3c:	bd10      	pop	{r4, pc}

08005e3e <__sclose>:
 8005e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e42:	f000 b8f7 	b.w	8006034 <_close_r>

08005e46 <__swbuf_r>:
 8005e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e48:	460e      	mov	r6, r1
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	b118      	cbz	r0, 8005e58 <__swbuf_r+0x12>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <__swbuf_r+0x12>
 8005e54:	f7ff faae 	bl	80053b4 <__sinit>
 8005e58:	69a3      	ldr	r3, [r4, #24]
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	071a      	lsls	r2, r3, #28
 8005e60:	d525      	bpl.n	8005eae <__swbuf_r+0x68>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	b31b      	cbz	r3, 8005eae <__swbuf_r+0x68>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	6922      	ldr	r2, [r4, #16]
 8005e6a:	1a98      	subs	r0, r3, r2
 8005e6c:	6963      	ldr	r3, [r4, #20]
 8005e6e:	b2f6      	uxtb	r6, r6
 8005e70:	4283      	cmp	r3, r0
 8005e72:	4637      	mov	r7, r6
 8005e74:	dc04      	bgt.n	8005e80 <__swbuf_r+0x3a>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff ff6d 	bl	8005d58 <_fflush_r>
 8005e7e:	b9e0      	cbnz	r0, 8005eba <__swbuf_r+0x74>
 8005e80:	68a3      	ldr	r3, [r4, #8]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	60a3      	str	r3, [r4, #8]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	6022      	str	r2, [r4, #0]
 8005e8c:	701e      	strb	r6, [r3, #0]
 8005e8e:	6962      	ldr	r2, [r4, #20]
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d004      	beq.n	8005ea0 <__swbuf_r+0x5a>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	07db      	lsls	r3, r3, #31
 8005e9a:	d506      	bpl.n	8005eaa <__swbuf_r+0x64>
 8005e9c:	2e0a      	cmp	r6, #10
 8005e9e:	d104      	bne.n	8005eaa <__swbuf_r+0x64>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f7ff ff58 	bl	8005d58 <_fflush_r>
 8005ea8:	b938      	cbnz	r0, 8005eba <__swbuf_r+0x74>
 8005eaa:	4638      	mov	r0, r7
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f000 f805 	bl	8005ec0 <__swsetup_r>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0d5      	beq.n	8005e66 <__swbuf_r+0x20>
 8005eba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ebe:	e7f4      	b.n	8005eaa <__swbuf_r+0x64>

08005ec0 <__swsetup_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4b2a      	ldr	r3, [pc, #168]	; (8005f6c <__swsetup_r+0xac>)
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	460c      	mov	r4, r1
 8005eca:	b118      	cbz	r0, 8005ed4 <__swsetup_r+0x14>
 8005ecc:	6a03      	ldr	r3, [r0, #32]
 8005ece:	b90b      	cbnz	r3, 8005ed4 <__swsetup_r+0x14>
 8005ed0:	f7ff fa70 	bl	80053b4 <__sinit>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eda:	0718      	lsls	r0, r3, #28
 8005edc:	d422      	bmi.n	8005f24 <__swsetup_r+0x64>
 8005ede:	06d9      	lsls	r1, r3, #27
 8005ee0:	d407      	bmi.n	8005ef2 <__swsetup_r+0x32>
 8005ee2:	2309      	movs	r3, #9
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef0:	e034      	b.n	8005f5c <__swsetup_r+0x9c>
 8005ef2:	0758      	lsls	r0, r3, #29
 8005ef4:	d512      	bpl.n	8005f1c <__swsetup_r+0x5c>
 8005ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ef8:	b141      	cbz	r1, 8005f0c <__swsetup_r+0x4c>
 8005efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005efe:	4299      	cmp	r1, r3
 8005f00:	d002      	beq.n	8005f08 <__swsetup_r+0x48>
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f90e 	bl	8006124 <_free_r>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	2300      	movs	r3, #0
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f043 0308 	orr.w	r3, r3, #8
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	b94b      	cbnz	r3, 8005f3c <__swsetup_r+0x7c>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f32:	d003      	beq.n	8005f3c <__swsetup_r+0x7c>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f840 	bl	8005fbc <__smakebuf_r>
 8005f3c:	89a0      	ldrh	r0, [r4, #12]
 8005f3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f42:	f010 0301 	ands.w	r3, r0, #1
 8005f46:	d00a      	beq.n	8005f5e <__swsetup_r+0x9e>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60a3      	str	r3, [r4, #8]
 8005f4c:	6963      	ldr	r3, [r4, #20]
 8005f4e:	425b      	negs	r3, r3
 8005f50:	61a3      	str	r3, [r4, #24]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	b943      	cbnz	r3, 8005f68 <__swsetup_r+0xa8>
 8005f56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f5a:	d1c4      	bne.n	8005ee6 <__swsetup_r+0x26>
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	0781      	lsls	r1, r0, #30
 8005f60:	bf58      	it	pl
 8005f62:	6963      	ldrpl	r3, [r4, #20]
 8005f64:	60a3      	str	r3, [r4, #8]
 8005f66:	e7f4      	b.n	8005f52 <__swsetup_r+0x92>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7f7      	b.n	8005f5c <__swsetup_r+0x9c>
 8005f6c:	20000078 	.word	0x20000078

08005f70 <__swhatbuf_r>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	460c      	mov	r4, r1
 8005f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	b096      	sub	sp, #88	; 0x58
 8005f7c:	4615      	mov	r5, r2
 8005f7e:	461e      	mov	r6, r3
 8005f80:	da0d      	bge.n	8005f9e <__swhatbuf_r+0x2e>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	bf0c      	ite	eq
 8005f8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f92:	2340      	movne	r3, #64	; 0x40
 8005f94:	2000      	movs	r0, #0
 8005f96:	6031      	str	r1, [r6, #0]
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	b016      	add	sp, #88	; 0x58
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	f000 f858 	bl	8006054 <_fstat_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	dbec      	blt.n	8005f82 <__swhatbuf_r+0x12>
 8005fa8:	9901      	ldr	r1, [sp, #4]
 8005faa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005fae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005fb2:	4259      	negs	r1, r3
 8005fb4:	4159      	adcs	r1, r3
 8005fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fba:	e7eb      	b.n	8005f94 <__swhatbuf_r+0x24>

08005fbc <__smakebuf_r>:
 8005fbc:	898b      	ldrh	r3, [r1, #12]
 8005fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fc0:	079d      	lsls	r5, r3, #30
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	d507      	bpl.n	8005fd8 <__smakebuf_r+0x1c>
 8005fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	6163      	str	r3, [r4, #20]
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	ab01      	add	r3, sp, #4
 8005fda:	466a      	mov	r2, sp
 8005fdc:	f7ff ffc8 	bl	8005f70 <__swhatbuf_r>
 8005fe0:	9900      	ldr	r1, [sp, #0]
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff fc21 	bl	800582c <_malloc_r>
 8005fea:	b948      	cbnz	r0, 8006000 <__smakebuf_r+0x44>
 8005fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff0:	059a      	lsls	r2, r3, #22
 8005ff2:	d4ef      	bmi.n	8005fd4 <__smakebuf_r+0x18>
 8005ff4:	f023 0303 	bic.w	r3, r3, #3
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	e7e3      	b.n	8005fc8 <__smakebuf_r+0xc>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	6020      	str	r0, [r4, #0]
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	9b00      	ldr	r3, [sp, #0]
 800600c:	6163      	str	r3, [r4, #20]
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	6120      	str	r0, [r4, #16]
 8006012:	b15b      	cbz	r3, 800602c <__smakebuf_r+0x70>
 8006014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006018:	4630      	mov	r0, r6
 800601a:	f000 f82d 	bl	8006078 <_isatty_r>
 800601e:	b128      	cbz	r0, 800602c <__smakebuf_r+0x70>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	431d      	orrs	r5, r3
 8006030:	81a5      	strh	r5, [r4, #12]
 8006032:	e7cf      	b.n	8005fd4 <__smakebuf_r+0x18>

08006034 <_close_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_close_r+0x1c>)
 8006038:	2300      	movs	r3, #0
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	602b      	str	r3, [r5, #0]
 8006040:	f7fb f9f7 	bl	8001432 <_close>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_close_r+0x1a>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	b103      	cbz	r3, 800604e <_close_r+0x1a>
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	200003f4 	.word	0x200003f4

08006054 <_fstat_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d07      	ldr	r5, [pc, #28]	; (8006074 <_fstat_r+0x20>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	4611      	mov	r1, r2
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	f7fb f9f2 	bl	800144a <_fstat>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d102      	bne.n	8006070 <_fstat_r+0x1c>
 800606a:	682b      	ldr	r3, [r5, #0]
 800606c:	b103      	cbz	r3, 8006070 <_fstat_r+0x1c>
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	bd38      	pop	{r3, r4, r5, pc}
 8006072:	bf00      	nop
 8006074:	200003f4 	.word	0x200003f4

08006078 <_isatty_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d06      	ldr	r5, [pc, #24]	; (8006094 <_isatty_r+0x1c>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fb f9f1 	bl	800146a <_isatty>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_isatty_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_isatty_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	200003f4 	.word	0x200003f4

08006098 <_lseek_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d07      	ldr	r5, [pc, #28]	; (80060b8 <_lseek_r+0x20>)
 800609c:	4604      	mov	r4, r0
 800609e:	4608      	mov	r0, r1
 80060a0:	4611      	mov	r1, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	602a      	str	r2, [r5, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f7fb f9ea 	bl	8001480 <_lseek>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_lseek_r+0x1e>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_lseek_r+0x1e>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	200003f4 	.word	0x200003f4

080060bc <_read_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d07      	ldr	r5, [pc, #28]	; (80060dc <_read_r+0x20>)
 80060c0:	4604      	mov	r4, r0
 80060c2:	4608      	mov	r0, r1
 80060c4:	4611      	mov	r1, r2
 80060c6:	2200      	movs	r2, #0
 80060c8:	602a      	str	r2, [r5, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f7fb f978 	bl	80013c0 <_read>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d102      	bne.n	80060da <_read_r+0x1e>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	b103      	cbz	r3, 80060da <_read_r+0x1e>
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	bd38      	pop	{r3, r4, r5, pc}
 80060dc:	200003f4 	.word	0x200003f4

080060e0 <_sbrk_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	; (80060fc <_sbrk_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fb f9d6 	bl	800149c <_sbrk>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_sbrk_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_sbrk_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	200003f4 	.word	0x200003f4

08006100 <_write_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d07      	ldr	r5, [pc, #28]	; (8006120 <_write_r+0x20>)
 8006104:	4604      	mov	r4, r0
 8006106:	4608      	mov	r0, r1
 8006108:	4611      	mov	r1, r2
 800610a:	2200      	movs	r2, #0
 800610c:	602a      	str	r2, [r5, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	f7fb f973 	bl	80013fa <_write>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_write_r+0x1e>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_write_r+0x1e>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	200003f4 	.word	0x200003f4

08006124 <_free_r>:
 8006124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006126:	2900      	cmp	r1, #0
 8006128:	d044      	beq.n	80061b4 <_free_r+0x90>
 800612a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612e:	9001      	str	r0, [sp, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f1a1 0404 	sub.w	r4, r1, #4
 8006136:	bfb8      	it	lt
 8006138:	18e4      	addlt	r4, r4, r3
 800613a:	f7ff fe35 	bl	8005da8 <__malloc_lock>
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <_free_r+0x94>)
 8006140:	9801      	ldr	r0, [sp, #4]
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	b933      	cbnz	r3, 8006154 <_free_r+0x30>
 8006146:	6063      	str	r3, [r4, #4]
 8006148:	6014      	str	r4, [r2, #0]
 800614a:	b003      	add	sp, #12
 800614c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006150:	f7ff be30 	b.w	8005db4 <__malloc_unlock>
 8006154:	42a3      	cmp	r3, r4
 8006156:	d908      	bls.n	800616a <_free_r+0x46>
 8006158:	6825      	ldr	r5, [r4, #0]
 800615a:	1961      	adds	r1, r4, r5
 800615c:	428b      	cmp	r3, r1
 800615e:	bf01      	itttt	eq
 8006160:	6819      	ldreq	r1, [r3, #0]
 8006162:	685b      	ldreq	r3, [r3, #4]
 8006164:	1949      	addeq	r1, r1, r5
 8006166:	6021      	streq	r1, [r4, #0]
 8006168:	e7ed      	b.n	8006146 <_free_r+0x22>
 800616a:	461a      	mov	r2, r3
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	b10b      	cbz	r3, 8006174 <_free_r+0x50>
 8006170:	42a3      	cmp	r3, r4
 8006172:	d9fa      	bls.n	800616a <_free_r+0x46>
 8006174:	6811      	ldr	r1, [r2, #0]
 8006176:	1855      	adds	r5, r2, r1
 8006178:	42a5      	cmp	r5, r4
 800617a:	d10b      	bne.n	8006194 <_free_r+0x70>
 800617c:	6824      	ldr	r4, [r4, #0]
 800617e:	4421      	add	r1, r4
 8006180:	1854      	adds	r4, r2, r1
 8006182:	42a3      	cmp	r3, r4
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	d1e0      	bne.n	800614a <_free_r+0x26>
 8006188:	681c      	ldr	r4, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	6053      	str	r3, [r2, #4]
 800618e:	440c      	add	r4, r1
 8006190:	6014      	str	r4, [r2, #0]
 8006192:	e7da      	b.n	800614a <_free_r+0x26>
 8006194:	d902      	bls.n	800619c <_free_r+0x78>
 8006196:	230c      	movs	r3, #12
 8006198:	6003      	str	r3, [r0, #0]
 800619a:	e7d6      	b.n	800614a <_free_r+0x26>
 800619c:	6825      	ldr	r5, [r4, #0]
 800619e:	1961      	adds	r1, r4, r5
 80061a0:	428b      	cmp	r3, r1
 80061a2:	bf04      	itt	eq
 80061a4:	6819      	ldreq	r1, [r3, #0]
 80061a6:	685b      	ldreq	r3, [r3, #4]
 80061a8:	6063      	str	r3, [r4, #4]
 80061aa:	bf04      	itt	eq
 80061ac:	1949      	addeq	r1, r1, r5
 80061ae:	6021      	streq	r1, [r4, #0]
 80061b0:	6054      	str	r4, [r2, #4]
 80061b2:	e7ca      	b.n	800614a <_free_r+0x26>
 80061b4:	b003      	add	sp, #12
 80061b6:	bd30      	pop	{r4, r5, pc}
 80061b8:	200003ec 	.word	0x200003ec

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
