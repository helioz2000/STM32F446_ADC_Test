
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ae0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004bb0  08010cb0  08010cb0  00020cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015860  08015860  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08015860  08015860  00025860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015868  08015868  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015868  08015868  00025868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801586c  0801586c  0002586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08015870  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009430  20000220  08015a90  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009650  08015a90  00039650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198d5  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf0  00000000  00000000  00049b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  0004d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126b  00000000  00000000  0004f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276a5  00000000  00000000  0005027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001faf4  00000000  00000000  00077920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5bcd  00000000  00000000  00097414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b18  00000000  00000000  0017cfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00184afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010c98 	.word	0x08010c98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08010c98 	.word	0x08010c98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0d0      	b.n	80011ea <calc_process_dma_buffer+0x1c6>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4960      	ldr	r1, [pc, #384]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	495b      	ldr	r1, [pc, #364]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	4956      	ldr	r1, [pc, #344]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4951      	ldr	r1, [pc, #324]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	494c      	ldr	r1, [pc, #304]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	4946      	ldr	r1, [pc, #280]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4941      	ldr	r1, [pc, #260]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	493b      	ldr	r1, [pc, #236]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].value_is_zero = 0;
 8001140:	7c7a      	ldrb	r2, [r7, #17]
 8001142:	492c      	ldr	r1, [pc, #176]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].value_is_zero = 0;
 8001154:	7c3a      	ldrb	r2, [r7, #16]
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	330d      	adds	r3, #13
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001168:	8abb      	ldrh	r3, [r7, #20]
 800116a:	82fb      	strh	r3, [r7, #22]
 800116c:	e030      	b.n	80011d0 <calc_process_dma_buffer+0x1ac>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 800116e:	8af9      	ldrh	r1, [r7, #22]
 8001170:	7c7a      	ldrb	r2, [r7, #17]
 8001172:	8a7b      	ldrh	r3, [r7, #18]
 8001174:	4c20      	ldr	r4, [pc, #128]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 800117c:	fb05 f000 	mul.w	r0, r5, r0
 8001180:	4401      	add	r1, r0
 8001182:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8001186:	491d      	ldr	r1, [pc, #116]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 8001188:	f44f 7052 	mov.w	r0, #840	; 0x348
 800118c:	fb00 f202 	mul.w	r2, r0, r2
 8001190:	4413      	add	r3, r2
 8001192:	4622      	mov	r2, r4
 8001194:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	7c3a      	ldrb	r2, [r7, #16]
 800119e:	8a7b      	ldrh	r3, [r7, #18]
 80011a0:	1c58      	adds	r0, r3, #1
 80011a2:	8278      	strh	r0, [r7, #18]
 80011a4:	461d      	mov	r5, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80011ae:	fb04 f303 	mul.w	r3, r4, r3
 80011b2:	440b      	add	r3, r1
 80011b4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 80011ba:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	442b      	add	r3, r5
 80011c4:	4602      	mov	r2, r0
 80011c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	3302      	adds	r3, #2
 80011ce:	82fb      	strh	r3, [r7, #22]
 80011d0:	8afa      	ldrh	r2, [r7, #22]
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d9ca      	bls.n	800116e <calc_process_dma_buffer+0x14a>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f93c 	bl	8001458 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011e0:	7c3b      	ldrb	r3, [r7, #16]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f938 	bl	8001458 <calc_downsample>
	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000023c 	.word	0x2000023c
 80011f8:	200024d8 	.word	0x200024d8
 80011fc:	20005958 	.word	0x20005958

08001200 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b03      	cmp	r3, #3
 8001212:	f200 8117 	bhi.w	8001444 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0fda      	lsrs	r2, r3, #31
 8001222:	4413      	add	r3, r2
 8001224:	105b      	asrs	r3, r3, #1
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0fda      	lsrs	r2, r3, #31
 8001232:	4413      	add	r3, r2
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	e0df      	b.n	8001406 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4981      	ldr	r1, [pc, #516]	; (8001450 <calc_zero_detector+0x250>)
 800124a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800124e:	fb03 f202 	mul.w	r2, r3, r2
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800125a:	461a      	mov	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4293      	cmp	r3, r2
 8001260:	f300 80ce 	bgt.w	8001400 <calc_zero_detector+0x200>
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	497a      	ldr	r1, [pc, #488]	; (8001450 <calc_zero_detector+0x250>)
 8001268:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800126c:	fb03 f202 	mul.w	r2, r3, r2
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4413      	add	r3, r2
 8001274:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001278:	461a      	mov	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4293      	cmp	r3, r2
 800127e:	f2c0 80bf 	blt.w	8001400 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4972      	ldr	r1, [pc, #456]	; (8001450 <calc_zero_detector+0x250>)
 8001286:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4413      	add	r3, r2
 8001292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4293      	cmp	r3, r2
 800129c:	da3d      	bge.n	800131a <calc_zero_detector+0x11a>
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	496a      	ldr	r1, [pc, #424]	; (8001450 <calc_zero_detector+0x250>)
 80012a6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012aa:	fb00 f202 	mul.w	r2, r0, r2
 80012ae:	4413      	add	r3, r2
 80012b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	db2e      	blt.n	800131a <calc_zero_detector+0x11a>
				detected++;
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	3301      	adds	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	dd11      	ble.n	80012ec <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	3b02      	subs	r3, #2
 80012ce:	4960      	ldr	r1, [pc, #384]	; (8001450 <calc_zero_detector+0x250>)
 80012d0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012d4:	fb00 f202 	mul.w	r2, r0, r2
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	dd02      	ble.n	80012ec <calc_zero_detector+0xec>
						detected++;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	3301      	adds	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3302      	adds	r3, #2
 80012f0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012f4:	d211      	bcs.n	800131a <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4954      	ldr	r1, [pc, #336]	; (8001450 <calc_zero_detector+0x250>)
 80012fe:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001302:	fb00 f202 	mul.w	r2, r0, r2
 8001306:	4413      	add	r3, r2
 8001308:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4293      	cmp	r3, r2
 8001312:	da02      	bge.n	800131a <calc_zero_detector+0x11a>
						detected++;
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	3301      	adds	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d90f      	bls.n	8001340 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	494c      	ldr	r1, [pc, #304]	; (8001454 <calc_zero_detector+0x254>)
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001338:	7fbb      	ldrb	r3, [r7, #30]
 800133a:	3301      	adds	r3, #1
 800133c:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800133e:	e05f      	b.n	8001400 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	4942      	ldr	r1, [pc, #264]	; (8001450 <calc_zero_detector+0x250>)
 8001348:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4293      	cmp	r3, r2
 800135e:	dd4f      	ble.n	8001400 <calc_zero_detector+0x200>
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3b01      	subs	r3, #1
 8001366:	493a      	ldr	r1, [pc, #232]	; (8001450 <calc_zero_detector+0x250>)
 8001368:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136c:	fb00 f202 	mul.w	r2, r0, r2
 8001370:	4413      	add	r3, r2
 8001372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4293      	cmp	r3, r2
 800137c:	dc40      	bgt.n	8001400 <calc_zero_detector+0x200>
				detected++;
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	3301      	adds	r3, #1
 8001382:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	dd11      	ble.n	80013ae <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3b02      	subs	r3, #2
 8001390:	492f      	ldr	r1, [pc, #188]	; (8001450 <calc_zero_detector+0x250>)
 8001392:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001396:	fb00 f202 	mul.w	r2, r0, r2
 800139a:	4413      	add	r3, r2
 800139c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	dc02      	bgt.n	80013ae <calc_zero_detector+0x1ae>
						detected++;
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	3301      	adds	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3302      	adds	r3, #2
 80013b2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013b6:	d211      	bcs.n	80013dc <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3302      	adds	r3, #2
 80013be:	4924      	ldr	r1, [pc, #144]	; (8001450 <calc_zero_detector+0x250>)
 80013c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013c4:	fb00 f202 	mul.w	r2, r0, r2
 80013c8:	4413      	add	r3, r2
 80013ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd02      	ble.n	80013dc <calc_zero_detector+0x1dc>
						detected++;
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	3301      	adds	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d90c      	bls.n	80013fc <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	491b      	ldr	r1, [pc, #108]	; (8001454 <calc_zero_detector+0x254>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013f6:	7fbb      	ldrb	r3, [r7, #30]
 80013f8:	3301      	adds	r3, #1
 80013fa:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	3301      	adds	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800140c:	f4ff af1b 	bcc.w	8001246 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 8001410:	7fbb      	ldrb	r3, [r7, #30]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d917      	bls.n	8001446 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	490e      	ldr	r1, [pc, #56]	; (8001454 <calc_zero_detector+0x254>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3308      	adds	r3, #8
 8001426:	f06f 0208 	mvn.w	r2, #8
 800142a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <calc_zero_detector+0x254>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	f06f 0208 	mvn.w	r2, #8
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e000      	b.n	8001446 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001444:	bf00      	nop
	}
}
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20007398 	.word	0x20007398
 8001454:	2000023c 	.word	0x2000023c

08001458 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing, etc)
 */
void calc_downsample(uint8_t bufnum) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 8001462:	2300      	movs	r3, #0
 8001464:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b03      	cmp	r3, #3
 800146a:	f200 8115 	bhi.w	8001698 <calc_downsample+0x240>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e083      	b.n	800157c <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	498a      	ldr	r1, [pc, #552]	; (80016a0 <calc_downsample+0x248>)
 8001478:	f44f 7252 	mov.w	r2, #840	; 0x348
 800147c:	fb03 f202 	mul.w	r2, r3, r2
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4413      	add	r3, r2
 8001484:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001488:	461c      	mov	r4, r3
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	3b01      	subs	r3, #1
 8001490:	4983      	ldr	r1, [pc, #524]	; (80016a0 <calc_downsample+0x248>)
 8001492:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	4413      	add	r3, r2
 800149c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014a0:	4423      	add	r3, r4
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	3201      	adds	r2, #1
 80014a8:	487d      	ldr	r0, [pc, #500]	; (80016a0 <calc_downsample+0x248>)
 80014aa:	f44f 7452 	mov.w	r4, #840	; 0x348
 80014ae:	fb04 f101 	mul.w	r1, r4, r1
 80014b2:	440a      	add	r2, r1
 80014b4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <calc_downsample+0x24c>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	17db      	asrs	r3, r3, #31
 80014c2:	1ad1      	subs	r1, r2, r3
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	b28c      	uxth	r4, r1
 80014ca:	4977      	ldr	r1, [pc, #476]	; (80016a8 <calc_downsample+0x250>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <calc_downsample+0x254>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	82bb      	strh	r3, [r7, #20]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	496d      	ldr	r1, [pc, #436]	; (80016a8 <calc_downsample+0x250>)
 80014f4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014f8:	fb00 f202 	mul.w	r2, r0, r2
 80014fc:	4413      	add	r3, r2
 80014fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001502:	827b      	strh	r3, [r7, #18]
 8001504:	8a7a      	ldrh	r2, [r7, #18]
 8001506:	8abb      	ldrh	r3, [r7, #20]
 8001508:	4293      	cmp	r3, r2
 800150a:	bf28      	it	cs
 800150c:	4613      	movcs	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	b298      	uxth	r0, r3
 8001514:	4965      	ldr	r1, [pc, #404]	; (80016ac <calc_downsample+0x254>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	4602      	mov	r2, r0
 8001522:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	4961      	ldr	r1, [pc, #388]	; (80016ac <calc_downsample+0x254>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3302      	adds	r3, #2
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	823b      	strh	r3, [r7, #16]
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	495a      	ldr	r1, [pc, #360]	; (80016a8 <calc_downsample+0x250>)
 800153e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001542:	fb00 f202 	mul.w	r2, r0, r2
 8001546:	4413      	add	r3, r2
 8001548:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	89fa      	ldrh	r2, [r7, #14]
 8001550:	8a3b      	ldrh	r3, [r7, #16]
 8001552:	4293      	cmp	r3, r2
 8001554:	bf38      	it	cc
 8001556:	4613      	movcc	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	b298      	uxth	r0, r3
 800155e:	4953      	ldr	r1, [pc, #332]	; (80016ac <calc_downsample+0x254>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3302      	adds	r3, #2
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	3301      	adds	r3, #1
 8001574:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3302      	adds	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f240 3245 	movw	r2, #837	; 0x345
 8001582:	4293      	cmp	r3, r2
 8001584:	f67f af76 	bls.w	8001474 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <calc_downsample+0x248>)
 800158c:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <calc_downsample+0x248>)
 80015a2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4403      	add	r3, r0
 80015b4:	0fda      	lsrs	r2, r3, #31
 80015b6:	4413      	add	r3, r2
 80015b8:	105b      	asrs	r3, r3, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	83f9      	strh	r1, [r7, #30]
 80015c4:	461c      	mov	r4, r3
 80015c6:	b280      	uxth	r0, r0
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <calc_downsample+0x250>)
 80015ca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4423      	add	r3, r4
 80015d4:	4602      	mov	r2, r0
 80015d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015e0:	d20a      	bcs.n	80015f8 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	8bfb      	ldrh	r3, [r7, #30]
 80015e6:	4930      	ldr	r1, [pc, #192]	; (80016a8 <calc_downsample+0x250>)
 80015e8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015ec:	fb00 f202 	mul.w	r2, r0, r2
 80015f0:	4413      	add	r3, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	492c      	ldr	r1, [pc, #176]	; (80016ac <calc_downsample+0x254>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3302      	adds	r3, #2
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <calc_downsample+0x254>)
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	if (range > ADC_NOISE_RAW) {
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	2b14      	cmp	r3, #20
 8001622:	d918      	bls.n	8001656 <calc_downsample+0x1fe>
		calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <calc_downsample+0x254>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	18c1      	adds	r1, r0, r3
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <calc_downsample+0x258>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdd6 	bl	8001200 <calc_zero_detector>
 8001654:	e021      	b.n	800169a <calc_downsample+0x242>
	} else {
		// mark zero crossings as invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4914      	ldr	r1, [pc, #80]	; (80016ac <calc_downsample+0x254>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	f06f 0208 	mvn.w	r2, #8
 800166a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	490f      	ldr	r1, [pc, #60]	; (80016ac <calc_downsample+0x254>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3304      	adds	r3, #4
 800167c:	f06f 0208 	mvn.w	r2, #8
 8001680:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].value_is_zero = 1;		// value is zero
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <calc_downsample+0x254>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	330d      	adds	r3, #13
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e000      	b.n	800169a <calc_downsample+0x242>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001698:	bf00      	nop
	}
}
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20005958 	.word	0x20005958
 80016a4:	55555556 	.word	0x55555556
 80016a8:	20007398 	.word	0x20007398
 80016ac:	2000023c 	.word	0x2000023c
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <calc_filter_add_v>:

/*
 * @brief  Add new value to voltage filter
 * @para newValue: The new value to add to the filter
 */
void calc_filter_add_v(float newValue) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float v_total = 0;
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	e019      	b.n	80016fe <calc_filter_add_v+0x4a>
		v_filter[i] = v_filter[i+1];
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <calc_filter_add_v+0x84>)
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4918      	ldr	r1, [pc, #96]	; (8001738 <calc_filter_add_v+0x84>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	601a      	str	r2, [r3, #0]
		v_total += v_filter[i];			// accumulate total
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <calc_filter_add_v+0x84>)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b08      	cmp	r3, #8
 8001702:	dde2      	ble.n	80016ca <calc_filter_add_v+0x16>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = newValue;
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <calc_filter_add_v+0x84>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6253      	str	r3, [r2, #36]	; 0x24
	v_total += newValue;
 800170a:	ed97 7a03 	vldr	s14, [r7, #12]
 800170e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	edc7 7a03 	vstr	s15, [r7, #12]
	v_filtered = v_total / FILTER_NUM;
 800171a:	ed97 7a03 	vldr	s14, [r7, #12]
 800171e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <calc_filter_add_v+0x88>)
 8001728:	edc3 7a00 	vstr	s15, [r3]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000290 	.word	0x20000290
 800173c:	20000358 	.word	0x20000358

08001740 <calc_filter_add_i>:
 * @para new_i_value:  The new current value to add to the filter
 * @para new_va_value: The new va value to add to the filter
 * @para new_w_value:  The new w value to add to the filter
 * @para new_pf_value: The new PF value to add to the filter
 */
void calc_filter_add_i(uint8_t channel, float new_i_value, float new_va_value, float new_w_value, float new_pf_value) {
 8001740:	b490      	push	{r4, r7}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	ed87 0a04 	vstr	s0, [r7, #16]
 800174c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001750:	ed87 1a02 	vstr	s2, [r7, #8]
 8001754:	edc7 1a01 	vstr	s3, [r7, #4]
 8001758:	75fb      	strb	r3, [r7, #23]
	float i_total=0, va_total=0, w_total=0, pf_total=0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e0a6      	b.n	80018c6 <calc_filter_add_i+0x186>
		i_filter[channel][i] = i_filter[channel][i+1];
 8001778:	7df9      	ldrb	r1, [r7, #23]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	1c58      	adds	r0, r3, #1
 800177e:	7dfa      	ldrb	r2, [r7, #23]
 8001780:	4c91      	ldr	r4, [pc, #580]	; (80019c8 <calc_filter_add_i+0x288>)
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4403      	add	r3, r0
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4423      	add	r3, r4
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	488d      	ldr	r0, [pc, #564]	; (80019c8 <calc_filter_add_i+0x288>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4403      	add	r3, r0
 80017a4:	6019      	str	r1, [r3, #0]
		i_total += i_filter[channel][i];
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4987      	ldr	r1, [pc, #540]	; (80019c8 <calc_filter_add_i+0x288>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		va_filter[channel][i] = va_filter[channel][i+1];
 80017ca:	7df9      	ldrb	r1, [r7, #23]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1c58      	adds	r0, r3, #1
 80017d0:	7dfa      	ldrb	r2, [r7, #23]
 80017d2:	4c7e      	ldr	r4, [pc, #504]	; (80019cc <calc_filter_add_i+0x28c>)
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4403      	add	r3, r0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4423      	add	r3, r4
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	4879      	ldr	r0, [pc, #484]	; (80019cc <calc_filter_add_i+0x28c>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4403      	add	r3, r0
 80017f6:	6019      	str	r1, [r3, #0]
		va_total += va_filter[channel][i];
 80017f8:	7dfa      	ldrb	r2, [r7, #23]
 80017fa:	4974      	ldr	r1, [pc, #464]	; (80019cc <calc_filter_add_i+0x28c>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		w_filter[channel][i] = w_filter[channel][i+1];
 800181c:	7df9      	ldrb	r1, [r7, #23]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c58      	adds	r0, r3, #1
 8001822:	7dfa      	ldrb	r2, [r7, #23]
 8001824:	4c6a      	ldr	r4, [pc, #424]	; (80019d0 <calc_filter_add_i+0x290>)
 8001826:	460b      	mov	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4403      	add	r3, r0
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4423      	add	r3, r4
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4866      	ldr	r0, [pc, #408]	; (80019d0 <calc_filter_add_i+0x290>)
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	6019      	str	r1, [r3, #0]
		w_total += w_filter[channel][i];
 800184a:	7dfa      	ldrb	r2, [r7, #23]
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <calc_filter_add_i+0x290>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pf_filter[channel][i] = pf_filter[channel][i+1];
 800186e:	7df9      	ldrb	r1, [r7, #23]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1c58      	adds	r0, r3, #1
 8001874:	7dfa      	ldrb	r2, [r7, #23]
 8001876:	4c57      	ldr	r4, [pc, #348]	; (80019d4 <calc_filter_add_i+0x294>)
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4423      	add	r3, r4
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	4852      	ldr	r0, [pc, #328]	; (80019d4 <calc_filter_add_i+0x294>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4403      	add	r3, r0
 800189a:	6019      	str	r1, [r3, #0]
		pf_total += pf_filter[channel][i];
 800189c:	7dfa      	ldrb	r2, [r7, #23]
 800189e:	494d      	ldr	r1, [pc, #308]	; (80019d4 <calc_filter_add_i+0x294>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	f77f af55 	ble.w	8001778 <calc_filter_add_i+0x38>
	}
	// add new measurements
	i_filter[channel][FILTER_NUM-1] = new_i_value;
 80018ce:	7dfa      	ldrb	r2, [r7, #23]
 80018d0:	493d      	ldr	r1, [pc, #244]	; (80019c8 <calc_filter_add_i+0x288>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3324      	adds	r3, #36	; 0x24
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]
	i_total += new_i_value;
 80018e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	va_filter[channel][FILTER_NUM-1] = new_va_value;
 80018f2:	7dfa      	ldrb	r2, [r7, #23]
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <calc_filter_add_i+0x28c>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3324      	adds	r3, #36	; 0x24
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]
	va_total += new_va_value;
 8001906:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800190a:	edd7 7a03 	vldr	s15, [r7, #12]
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	w_filter[channel][FILTER_NUM-1] = new_w_value;
 8001916:	7dfa      	ldrb	r2, [r7, #23]
 8001918:	492d      	ldr	r1, [pc, #180]	; (80019d0 <calc_filter_add_i+0x290>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3324      	adds	r3, #36	; 0x24
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]
	w_total += new_w_value;
 800192a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800192e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pf_filter[channel][FILTER_NUM-1] = new_pf_value;
 800193a:	7dfa      	ldrb	r2, [r7, #23]
 800193c:	4925      	ldr	r1, [pc, #148]	; (80019d4 <calc_filter_add_i+0x294>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3324      	adds	r3, #36	; 0x24
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
	pf_total += new_pf_value;
 800194e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001952:	edd7 7a01 	vldr	s15, [r7, #4]
 8001956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195a:	edc7 7a08 	vstr	s15, [r7, #32]

	i_filtered[channel] = i_total / FILTER_NUM;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001964:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <calc_filter_add_i+0x298>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	edc3 7a00 	vstr	s15, [r3]
	va_filtered[channel] = va_total / FILTER_NUM;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800197c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <calc_filter_add_i+0x29c>)
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edc3 7a00 	vstr	s15, [r3]
	w_filtered[channel] = w_total / FILTER_NUM;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001994:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <calc_filter_add_i+0x2a0>)
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	pf_filtered[channel] = pf_total / FILTER_NUM;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <calc_filter_add_i+0x2a4>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	edc3 7a00 	vstr	s15, [r3]
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc90      	pop	{r4, r7}
 80019c6:	4770      	bx	lr
 80019c8:	200002b8 	.word	0x200002b8
 80019cc:	200002e0 	.word	0x200002e0
 80019d0:	20000308 	.word	0x20000308
 80019d4:	20000330 	.word	0x20000330
 80019d8:	2000035c 	.word	0x2000035c
 80019dc:	20000360 	.word	0x20000360
 80019e0:	20000364 	.word	0x20000364
 80019e4:	20000368 	.word	0x20000368

080019e8 <calc_assign_meter_values>:


/*
 * @brief   Assign filtered values to meter values
 */
void calc_assign_meter_values(uint8_t channel) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	// assign filtered valued
	if (channel >= NUM_I_SENSORS) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d017      	beq.n	8001a28 <calc_assign_meter_values+0x40>
		metervalue_v = 0.0;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <calc_assign_meter_values+0x8c>)
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
		metervalue_i = 0.0;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <calc_assign_meter_values+0x90>)
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
		metervalue_va = 0.0;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <calc_assign_meter_values+0x94>)
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
		metervalue_w = 0.0;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <calc_assign_meter_values+0x98>)
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
		metervalue_pf = 0.0;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <calc_assign_meter_values+0x9c>)
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
		meter_readings_invalid = 1;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <calc_assign_meter_values+0xa0>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
		return;
 8001a26:	e01f      	b.n	8001a68 <calc_assign_meter_values+0x80>
	}
	metervalue_v = v_filtered;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <calc_assign_meter_values+0xa4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <calc_assign_meter_values+0x8c>)
 8001a2e:	6013      	str	r3, [r2, #0]
	metervalue_i = i_filtered[channel];
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <calc_assign_meter_values+0xa8>)
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <calc_assign_meter_values+0x90>)
 8001a3c:	6013      	str	r3, [r2, #0]
	metervalue_va = va_filtered[channel];
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <calc_assign_meter_values+0xac>)
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <calc_assign_meter_values+0x94>)
 8001a4a:	6013      	str	r3, [r2, #0]
	metervalue_w = w_filtered[channel];
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <calc_assign_meter_values+0xb0>)
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <calc_assign_meter_values+0x98>)
 8001a58:	6013      	str	r3, [r2, #0]
	metervalue_pf = pf_filtered[channel];
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <calc_assign_meter_values+0xb4>)
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <calc_assign_meter_values+0x9c>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200080b8 	.word	0x200080b8
 8001a78:	200080bc 	.word	0x200080bc
 8001a7c:	200080c0 	.word	0x200080c0
 8001a80:	200080c4 	.word	0x200080c4
 8001a84:	200080c8 	.word	0x200080c8
 8001a88:	2000028c 	.word	0x2000028c
 8001a8c:	20000358 	.word	0x20000358
 8001a90:	2000035c 	.word	0x2000035c
 8001a94:	20000360 	.word	0x20000360
 8001a98:	20000364 	.word	0x20000364
 8001a9c:	20000368 	.word	0x20000368

08001aa0 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	ed2d 8b02 	vpush	{d8}
 8001aa8:	b0a8      	sub	sp, #160	; 0xa0
 8001aaa:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t v_pp;				// Voltage channel Peak-Peak
	uint16_t i1_zero;
	uint16_t i1_pp;			// Current channel P-P
	float w=0, va=0;
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	673b      	str	r3, [r7, #112]	; 0x70
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	66fb      	str	r3, [r7, #108]	; 0x6c

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8001aee:	4bb8      	ldr	r3, [pc, #736]	; (8001dd0 <calc_measurements+0x330>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da05      	bge.n	8001b02 <calc_measurements+0x62>
		meter_readings_invalid = 1;
 8001af6:	4bb7      	ldr	r3, [pc, #732]	; (8001dd4 <calc_measurements+0x334>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b00:	e31d      	b.n	800213e <calc_measurements+0x69e>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 8001b02:	4bb3      	ldr	r3, [pc, #716]	; (8001dd0 <calc_measurements+0x330>)
 8001b04:	885b      	ldrh	r3, [r3, #2]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4bb1      	ldr	r3, [pc, #708]	; (8001dd0 <calc_measurements+0x330>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	1ad2      	subs	r2, r2, r3
 8001b0e:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dc05      	bgt.n	8001b22 <calc_measurements+0x82>
		meter_readings_invalid = 1;
 8001b16:	4baf      	ldr	r3, [pc, #700]	; (8001dd4 <calc_measurements+0x334>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b20:	e30d      	b.n	800213e <calc_measurements+0x69e>
	}

	meter_readings_invalid = 0;		// readings are valid
 8001b22:	4aac      	ldr	r2, [pc, #688]	; (8001dd4 <calc_measurements+0x334>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	7013      	strb	r3, [r2, #0]

	v_pp = sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min;
 8001b28:	4ba9      	ldr	r3, [pc, #676]	; (8001dd0 <calc_measurements+0x330>)
 8001b2a:	885a      	ldrh	r2, [r3, #2]
 8001b2c:	4ba8      	ldr	r3, [pc, #672]	; (8001dd0 <calc_measurements+0x330>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	v_zero = v_pp / 2 + sample_buf_meta[ADC_CH_V].min;
 8001b36:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4ba4      	ldr	r3, [pc, #656]	; (8001dd0 <calc_measurements+0x330>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	i1_pp = sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min;
 8001b48:	4ba1      	ldr	r3, [pc, #644]	; (8001dd0 <calc_measurements+0x330>)
 8001b4a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001b4c:	4ba0      	ldr	r3, [pc, #640]	; (8001dd0 <calc_measurements+0x330>)
 8001b4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	i1_zero = i1_pp / 2 + sample_buf_meta[ADC_CH_I1].min;
 8001b56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b9c      	ldr	r3, [pc, #624]	; (8001dd0 <calc_measurements+0x330>)
 8001b60:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b62:	4413      	add	r3, r2
 8001b64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	// Calculate values using the positive half of the sine wave

	// Add up squared measurements
	// does the positive x-ing come before the negative?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001b68:	4b99      	ldr	r3, [pc, #612]	; (8001dd0 <calc_measurements+0x330>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4b98      	ldr	r3, [pc, #608]	; (8001dd0 <calc_measurements+0x330>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f280 8091 	bge.w	8001c98 <calc_measurements+0x1f8>
		// iterate from positive to negative crossing (positive half wave)
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b76:	4b96      	ldr	r3, [pc, #600]	; (8001dd0 <calc_measurements+0x330>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b7e:	e083      	b.n	8001c88 <calc_measurements+0x1e8>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b80:	4a95      	ldr	r2, [pc, #596]	; (8001dd8 <calc_measurements+0x338>)
 8001b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b8a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			v_sq_acc += v_reading * v_reading;
 8001b96:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001b9a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	17da      	asrs	r2, r3, #31
 8001ba4:	461c      	mov	r4, r3
 8001ba6:	4615      	mov	r5, r2
 8001ba8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001bac:	eb12 0a04 	adds.w	sl, r2, r4
 8001bb0:	eb43 0b05 	adc.w	fp, r3, r5
 8001bb4:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bb8:	4a87      	ldr	r2, [pc, #540]	; (8001dd8 <calc_measurements+0x338>)
 8001bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bbe:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001bc2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			i1_sq_acc += i_reading * i_reading;
 8001bd2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001bd6:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	17da      	asrs	r2, r3, #31
 8001be0:	4698      	mov	r8, r3
 8001be2:	4691      	mov	r9, r2
 8001be4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001be8:	eb12 0108 	adds.w	r1, r2, r8
 8001bec:	6239      	str	r1, [r7, #32]
 8001bee:	eb43 0309 	adc.w	r3, r3, r9
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bf8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 8001bfc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c00:	3301      	adds	r3, #1
 8001c02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001c06:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 faea 	bl	80021e4 <calc_adc_raw_to_V>
 8001c10:	eeb0 8a40 	vmov.f32	s16, s0
 8001c14:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fb01 	bl	8002220 <calc_adc_raw_to_A>
 8001c1e:	eef0 7a40 	vmov.f32	s15, s0
 8001c22:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c26:	ee17 0a90 	vmov	r0, s15
 8001c2a:	f7fe fcad 	bl	8000588 <__aeabi_f2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001c36:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0a      	blt.n	8001c54 <calc_measurements+0x1b4>
				i1_va_acc += va_instant;
 8001c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c46:	f7fe fb41 	bl	80002cc <__adddf3>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001c52:	e014      	b.n	8001c7e <calc_measurements+0x1de>
			} else {
				i1_w_acc += abs(va_instant);
 8001c54:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c58:	f7fe ff9e 	bl	8000b98 <__aeabi_d2iz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bfb8      	it	lt
 8001c62:	425b      	neglt	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc7d 	bl	8000564 <__aeabi_i2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c72:	f7fe fb2b 	bl	80002cc <__adddf3>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c82:	3301      	adds	r3, #1
 8001c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <calc_measurements+0x330>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f6ff af75 	blt.w	8001b80 <calc_measurements+0xe0>
 8001c96:	e134      	b.n	8001f02 <calc_measurements+0x462>
			}
		}
	} else {	// negative crossing is first
		// iterate from positive x-ing to the end of the buffer ....
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001c98:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <calc_measurements+0x330>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ca0:	e08b      	b.n	8001dba <calc_measurements+0x31a>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <calc_measurements+0x338>)
 8001ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cac:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			v_sq_acc += v_reading * v_reading;
 8001cb8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001cbc:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	17da      	asrs	r2, r3, #31
 8001cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8001cc8:	657a      	str	r2, [r7, #84]	; 0x54
 8001cca:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001cce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	1851      	adds	r1, r2, r1
 8001cd6:	61b9      	str	r1, [r7, #24]
 8001cd8:	4629      	mov	r1, r5
 8001cda:	414b      	adcs	r3, r1
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ce2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <calc_measurements+0x338>)
 8001ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cec:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001cf0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			i1_sq_acc += i_reading * i_reading;
 8001d00:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001d04:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	17da      	asrs	r2, r3, #31
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d12:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d16:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	1851      	adds	r1, r2, r1
 8001d1e:	6139      	str	r1, [r7, #16]
 8001d20:	4629      	mov	r1, r5
 8001d22:	414b      	adcs	r3, r1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d2a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001d2e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d32:	3301      	adds	r3, #1
 8001d34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001d38:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fa51 	bl	80021e4 <calc_adc_raw_to_V>
 8001d42:	eeb0 8a40 	vmov.f32	s16, s0
 8001d46:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fa68 	bl	8002220 <calc_adc_raw_to_A>
 8001d50:	eef0 7a40 	vmov.f32	s15, s0
 8001d54:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d58:	ee17 0a90 	vmov	r0, s15
 8001d5c:	f7fe fc14 	bl	8000588 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001d68:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <calc_measurements+0x2e6>
				i1_va_acc += va_instant;
 8001d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d74:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d78:	f7fe faa8 	bl	80002cc <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001d84:	e014      	b.n	8001db0 <calc_measurements+0x310>
			} else {
				i1_w_acc += abs(va_instant);
 8001d86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d8a:	f7fe ff05 	bl	8000b98 <__aeabi_d2iz>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bfb8      	it	lt
 8001d94:	425b      	neglt	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbe4 	bl	8000564 <__aeabi_i2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001da4:	f7fe fa92 	bl	80002cc <__adddf3>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001db4:	3301      	adds	r3, #1
 8001db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dbe:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001dc2:	f4ff af6e 	bcc.w	8001ca2 <calc_measurements+0x202>
			}
		}
		// ..... the continue iterating from the start of the buffer to the negative crossing
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001dc6:	2314      	movs	r3, #20
 8001dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001dcc:	e092      	b.n	8001ef4 <calc_measurements+0x454>
 8001dce:	bf00      	nop
 8001dd0:	2000023c 	.word	0x2000023c
 8001dd4:	2000028c 	.word	0x2000028c
 8001dd8:	20007398 	.word	0x20007398
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001ddc:	4aa7      	ldr	r2, [pc, #668]	; (800207c <calc_measurements+0x5dc>)
 8001dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001de2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001de6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			v_sq_acc += v_reading * v_reading;
 8001df2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001df6:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	17da      	asrs	r2, r3, #31
 8001e00:	643b      	str	r3, [r7, #64]	; 0x40
 8001e02:	647a      	str	r2, [r7, #68]	; 0x44
 8001e04:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001e08:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	1851      	adds	r1, r2, r1
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	4629      	mov	r1, r5
 8001e14:	414b      	adcs	r3, r1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e1c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001e20:	4a96      	ldr	r2, [pc, #600]	; (800207c <calc_measurements+0x5dc>)
 8001e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e26:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001e2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			i1_sq_acc += i_reading * i_reading;
 8001e3a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001e3e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	17da      	asrs	r2, r3, #31
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e50:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001e54:	4621      	mov	r1, r4
 8001e56:	1851      	adds	r1, r2, r1
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	414b      	adcs	r3, r1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e64:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001e68:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001e72:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f9b4 	bl	80021e4 <calc_adc_raw_to_V>
 8001e7c:	eeb0 8a40 	vmov.f32	s16, s0
 8001e80:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f9cb 	bl	8002220 <calc_adc_raw_to_A>
 8001e8a:	eef0 7a40 	vmov.f32	s15, s0
 8001e8e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001e92:	ee17 0a90 	vmov	r0, s15
 8001e96:	f7fe fb77 	bl	8000588 <__aeabi_f2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001ea2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0a      	blt.n	8001ec0 <calc_measurements+0x420>
				i1_va_acc += va_instant;
 8001eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001eb2:	f7fe fa0b 	bl	80002cc <__adddf3>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001ebe:	e014      	b.n	8001eea <calc_measurements+0x44a>
			} else {
				i1_w_acc += abs(va_instant);
 8001ec0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ec4:	f7fe fe68 	bl	8000b98 <__aeabi_d2iz>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bfb8      	it	lt
 8001ece:	425b      	neglt	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb47 	bl	8000564 <__aeabi_i2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ede:	f7fe f9f5 	bl	80002cc <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <calc_measurements+0x5e0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f6ff af6d 	blt.w	8001ddc <calc_measurements+0x33c>
			}
		}
	}

	// Calculate measured RMS voltage
	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001f02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001f06:	2200      	movs	r2, #0
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0a:	637a      	str	r2, [r7, #52]	; 0x34
 8001f0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f10:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001f14:	f7fe feb8 	bl	8000c88 <__aeabi_ldivmod>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fb5c 	bl	80005dc <__aeabi_l2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	ec43 2b10 	vmov	d0, r2, r3
 8001f2c:	f00e fd18 	bl	8010960 <sqrt>
 8001f30:	ec53 2b10 	vmov	r2, r3, d0
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fe2e 	bl	8000b98 <__aeabi_d2iz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f94f 	bl	80021e4 <calc_adc_raw_to_V>
 8001f46:	eef0 7a40 	vmov.f32	s15, s0
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <calc_measurements+0x5e4>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
	//v_measured = calc_adc_raw_to_V(v_pp) / 2 * 0.707;		// only works for a perfect sine wave (no distortion)

	pf_measured[I1] = 1.0;		// assumed PF
 8001f50:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <calc_measurements+0x5e8>)
 8001f52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f56:	601a      	str	r2, [r3, #0]
	// do we have zero (below ADC noise) current reading?
	if (sample_buf_meta[ADC_CH_I1].value_is_zero) {	// set all measured values to zero
 8001f58:	4b49      	ldr	r3, [pc, #292]	; (8002080 <calc_measurements+0x5e0>)
 8001f5a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <calc_measurements+0x4dc>
		i_measured[I1] = 0.0;
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <calc_measurements+0x5ec>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
		va_measured[I1] = 0.0;
 8001f6a:	4b49      	ldr	r3, [pc, #292]	; (8002090 <calc_measurements+0x5f0>)
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
		w_measured[I1] = 0.0;
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <calc_measurements+0x5f4>)
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e0bc      	b.n	80020f6 <calc_measurements+0x656>

	} else {
		i_measured[I1] = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001f7c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001f80:	2200      	movs	r2, #0
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001f8e:	f7fe fe7b 	bl	8000c88 <__aeabi_ldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fb1f 	bl	80005dc <__aeabi_l2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	ec43 2b10 	vmov	d0, r2, r3
 8001fa6:	f00e fcdb 	bl	8010960 <sqrt>
 8001faa:	ec53 2b10 	vmov	r2, r3, d0
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fdf1 	bl	8000b98 <__aeabi_d2iz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f930 	bl	8002220 <calc_adc_raw_to_A>
 8001fc0:	eef0 7a40 	vmov.f32	s15, s0
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <calc_measurements+0x5ec>)
 8001fc6:	edc3 7a00 	vstr	s15, [r3]
		if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fd6:	f7fe fdbf 	bl	8000b58 <__aeabi_dcmpgt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d012      	beq.n	8002006 <calc_measurements+0x566>
 8001fe0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fabd 	bl	8000564 <__aeabi_i2d>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ff2:	f7fe fc4b 	bl	800088c <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fdf3 	bl	8000be8 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002012:	f7fe fda1 	bl	8000b58 <__aeabi_dcmpgt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <calc_measurements+0x5a2>
 800201c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa9f 	bl	8000564 <__aeabi_i2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800202e:	f7fe fc2d 	bl	800088c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdd5 	bl	8000be8 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	673b      	str	r3, [r7, #112]	; 0x70
		va_measured[I1] = v_measured * i_measured[I1];
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <calc_measurements+0x5ec>)
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <calc_measurements+0x5e4>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <calc_measurements+0x5f0>)
 8002054:	edc3 7a00 	vstr	s15, [r3]
		if (w > 0) {
 8002058:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800205c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd18      	ble.n	8002098 <calc_measurements+0x5f8>
			w_measured[I1] = va - w;
 8002066:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800206a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800206e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <calc_measurements+0x5f4>)
 8002074:	edc3 7a00 	vstr	s15, [r3]
 8002078:	e012      	b.n	80020a0 <calc_measurements+0x600>
 800207a:	bf00      	nop
 800207c:	20007398 	.word	0x20007398
 8002080:	2000023c 	.word	0x2000023c
 8002084:	2000036c 	.word	0x2000036c
 8002088:	2000037c 	.word	0x2000037c
 800208c:	20000370 	.word	0x20000370
 8002090:	20000374 	.word	0x20000374
 8002094:	20000378 	.word	0x20000378
		} else {
			w_measured[I1] = va_measured[I1];
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <calc_measurements+0x6ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <calc_measurements+0x6b0>)
 800209e:	6013      	str	r3, [r2, #0]
		}
		if (w_measured[I1] > va_measured[I1]) w_measured[I1] = va_measured[I1];		// W must be =< than VA
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <calc_measurements+0x6b0>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <calc_measurements+0x6ac>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	dd03      	ble.n	80020be <calc_measurements+0x61e>
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <calc_measurements+0x6ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <calc_measurements+0x6b0>)
 80020bc:	6013      	str	r3, [r2, #0]
		if (i_measured[I1] >= I1_MIN_PF) {			// Calculate PF if we have sufficient current
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <calc_measurements+0x6b4>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	db0a      	blt.n	80020e8 <calc_measurements+0x648>
			pf_measured[I1] = w_measured[I1] / va_measured[I1];
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <calc_measurements+0x6b0>)
 80020d4:	edd3 6a00 	vldr	s13, [r3]
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <calc_measurements+0x6ac>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <calc_measurements+0x6b8>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
		}
		sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <calc_measurements+0x6bc>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	731a      	strb	r2, [r3, #12]
		sample_buf_meta[ADC_CH_I1].measurements_valid = 1;
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <calc_measurements+0x6bc>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	// add measurements to filter
	calc_filter_add_v(v_measured);
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <calc_measurements+0x6c0>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002100:	f7ff fad8 	bl	80016b4 <calc_filter_add_v>
	calc_filter_add_i(I1, i_measured[I1], va_measured[I1], w_measured[I1], pf_measured[I1]);
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <calc_measurements+0x6b4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <calc_measurements+0x6ac>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <calc_measurements+0x6b0>)
 8002112:	edd3 6a00 	vldr	s13, [r3]
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <calc_measurements+0x6b8>)
 8002118:	ed93 6a00 	vldr	s12, [r3]
 800211c:	eef0 1a46 	vmov.f32	s3, s12
 8002120:	eeb0 1a66 	vmov.f32	s2, s13
 8002124:	eef0 0a47 	vmov.f32	s1, s14
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fb07 	bl	8001740 <calc_filter_add_i>
	calc_assign_meter_values(display_channel);
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <calc_measurements+0x6c4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc56 	bl	80019e8 <calc_assign_meter_values>

	return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	37a0      	adds	r7, #160	; 0xa0
 8002142:	46bd      	mov	sp, r7
 8002144:	ecbd 8b02 	vpop	{d8}
 8002148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214c:	20000374 	.word	0x20000374
 8002150:	20000378 	.word	0x20000378
 8002154:	20000370 	.word	0x20000370
 8002158:	2000037c 	.word	0x2000037c
 800215c:	2000023c 	.word	0x2000023c
 8002160:	2000036c 	.word	0x2000036c
 8002164:	20000381 	.word	0x20000381

08002168 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f816 	bl	80021a8 <calc_adc_raw_to_mv_float>
 800217c:	ee10 3a10 	vmov	r3, s0
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fa01 	bl	8000588 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	ec43 2b10 	vmov	d0, r2, r3
 800218e:	f00e fcf7 	bl	8010b80 <round>
 8002192:	ec53 2b10 	vmov	r2, r3, d0
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fcfd 	bl	8000b98 <__aeabi_d2iz>
 800219e:	4603      	mov	r3, r0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 80021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021be:	eddf 6a07 	vldr	s13, [pc, #28]	; 80021dc <calc_adc_raw_to_mv_float+0x34>
 80021c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021e0 <calc_adc_raw_to_mv_float+0x38>
 80021ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	457ff000 	.word	0x457ff000
 80021e0:	454e4000 	.word	0x454e4000

080021e4 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 80021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002218 <calc_adc_raw_to_V+0x34>
 80021fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002202:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800221c <calc_adc_raw_to_V+0x38>
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	457ff000 	.word	0x457ff000
 800221c:	44434000 	.word	0x44434000

08002220 <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 800222a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002236:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002254 <calc_adc_raw_to_A+0x34>
 800223a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800223e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002258 <calc_adc_raw_to_A+0x38>
 8002242:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	457ff000 	.word	0x457ff000
 8002258:	43620000 	.word	0x43620000

0800225c <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <cmd_error+0x18>)
 8002268:	f002 fe3a 	bl	8004ee0 <term_print>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	08010cb0 	.word	0x08010cb0

08002278 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b74      	cmp	r3, #116	; 0x74
 8002288:	d014      	beq.n	80022b4 <cmd_t+0x3c>
 800228a:	2b74      	cmp	r3, #116	; 0x74
 800228c:	dc17      	bgt.n	80022be <cmd_t+0x46>
 800228e:	2b54      	cmp	r3, #84	; 0x54
 8002290:	d010      	beq.n	80022b4 <cmd_t+0x3c>
 8002292:	2b54      	cmp	r3, #84	; 0x54
 8002294:	dc13      	bgt.n	80022be <cmd_t+0x46>
 8002296:	2b30      	cmp	r3, #48	; 0x30
 8002298:	d002      	beq.n	80022a0 <cmd_t+0x28>
 800229a:	2b31      	cmp	r3, #49	; 0x31
 800229c:	d005      	beq.n	80022aa <cmd_t+0x32>
 800229e:	e00e      	b.n	80022be <cmd_t+0x46>
	case '0':
		tft_display = 1;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <cmd_t+0x58>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
		return 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e00b      	b.n	80022c2 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <cmd_t+0x58>)
 80022ac:	2202      	movs	r2, #2
 80022ae:	701a      	strb	r2, [r3, #0]
		return 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e006      	b.n	80022c2 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <cmd_t+0x58>)
 80022b6:	2209      	movs	r2, #9
 80022b8:	701a      	strb	r2, [r3, #0]
		return 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e001      	b.n	80022c2 <cmd_t+0x4a>
	}
	return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200024c0 	.word	0x200024c0

080022d4 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	f107 0208 	add.w	r2, r7, #8
 80022e4:	4909      	ldr	r1, [pc, #36]	; (800230c <cmd_p+0x38>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f00b fa50 	bl	800d78c <siscanf>
 80022ec:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d002      	beq.n	80022fa <cmd_p+0x26>
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f8:	e004      	b.n	8002304 <cmd_p+0x30>
	new_time_period = value;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <cmd_p+0x3c>)
 8002300:	801a      	strh	r2, [r3, #0]
	return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	08010cc8 	.word	0x08010cc8
 8002310:	200024c2 	.word	0x200024c2

08002314 <cmd_led>:

int cmd_led(int cmd) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	dd05      	ble.n	800232e <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	2120      	movs	r1, #32
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <cmd_led+0x30>)
 8002328:	f006 fb72 	bl	8008a10 <HAL_GPIO_WritePin>
 800232c:	e004      	b.n	8002338 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2120      	movs	r1, #32
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <cmd_led+0x30>)
 8002334:	f006 fb6c 	bl	8008a10 <HAL_GPIO_WritePin>
	}
	return(0);
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40020000 	.word	0x40020000

08002348 <cmd_help>:


int cmd_help(void) {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 800234c:	4813      	ldr	r0, [pc, #76]	; (800239c <cmd_help+0x54>)
 800234e:	f002 fdc7 	bl	8004ee0 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <cmd_help+0x58>)
 8002354:	f002 fdc4 	bl	8004ee0 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002358:	4812      	ldr	r0, [pc, #72]	; (80023a4 <cmd_help+0x5c>)
 800235a:	f002 fdc1 	bl	8004ee0 <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 800235e:	4812      	ldr	r0, [pc, #72]	; (80023a8 <cmd_help+0x60>)
 8002360:	f002 fdbe 	bl	8004ee0 <term_print>
#endif
	term_print("E: Toggle ESP mode\r\n");
 8002364:	4811      	ldr	r0, [pc, #68]	; (80023ac <cmd_help+0x64>)
 8002366:	f002 fdbb 	bl	8004ee0 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 800236a:	4811      	ldr	r0, [pc, #68]	; (80023b0 <cmd_help+0x68>)
 800236c:	f002 fdb8 	bl	8004ee0 <term_print>
	term_print("M show measurements using all channels\r\n");
 8002370:	4810      	ldr	r0, [pc, #64]	; (80023b4 <cmd_help+0x6c>)
 8002372:	f002 fdb5 	bl	8004ee0 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002376:	4810      	ldr	r0, [pc, #64]	; (80023b8 <cmd_help+0x70>)
 8002378:	f002 fdb2 	bl	8004ee0 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 800237c:	480f      	ldr	r0, [pc, #60]	; (80023bc <cmd_help+0x74>)
 800237e:	f002 fdaf 	bl	8004ee0 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002382:	480f      	ldr	r0, [pc, #60]	; (80023c0 <cmd_help+0x78>)
 8002384:	f002 fdac 	bl	8004ee0 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002388:	480e      	ldr	r0, [pc, #56]	; (80023c4 <cmd_help+0x7c>)
 800238a:	f002 fda9 	bl	8004ee0 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 800238e:	480e      	ldr	r0, [pc, #56]	; (80023c8 <cmd_help+0x80>)
 8002390:	f002 fda6 	bl	8004ee0 <term_print>
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	08010ccc 	.word	0x08010ccc
 80023a0:	08010ce0 	.word	0x08010ce0
 80023a4:	08010d18 	.word	0x08010d18
 80023a8:	08010d4c 	.word	0x08010d4c
 80023ac:	08010d78 	.word	0x08010d78
 80023b0:	08010d90 	.word	0x08010d90
 80023b4:	08010dac 	.word	0x08010dac
 80023b8:	08010dd8 	.word	0x08010dd8
 80023bc:	08010e20 	.word	0x08010e20
 80023c0:	08010e54 	.word	0x08010e54
 80023c4:	08010e70 	.word	0x08010e70
 80023c8:	08010eb0 	.word	0x08010eb0

080023cc <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d8:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	3b3f      	subs	r3, #63	; 0x3f
 80023e0:	2b35      	cmp	r3, #53	; 0x35
 80023e2:	f200 80d5 	bhi.w	8002590 <cmd_process+0x1c4>
 80023e6:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <cmd_process+0x20>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	0800258b 	.word	0x0800258b
 80023f0:	08002591 	.word	0x08002591
 80023f4:	08002591 	.word	0x08002591
 80023f8:	08002591 	.word	0x08002591
 80023fc:	080024c5 	.word	0x080024c5
 8002400:	080024db 	.word	0x080024db
 8002404:	080024fd 	.word	0x080024fd
 8002408:	08002591 	.word	0x08002591
 800240c:	08002591 	.word	0x08002591
 8002410:	0800258b 	.word	0x0800258b
 8002414:	08002591 	.word	0x08002591
 8002418:	08002591 	.word	0x08002591
 800241c:	08002591 	.word	0x08002591
 8002420:	0800251b 	.word	0x0800251b
 8002424:	0800252d 	.word	0x0800252d
 8002428:	08002591 	.word	0x08002591
 800242c:	08002591 	.word	0x08002591
 8002430:	08002555 	.word	0x08002555
 8002434:	08002591 	.word	0x08002591
 8002438:	0800255f 	.word	0x0800255f
 800243c:	0800256b 	.word	0x0800256b
 8002440:	08002581 	.word	0x08002581
 8002444:	08002591 	.word	0x08002591
 8002448:	08002591 	.word	0x08002591
 800244c:	08002591 	.word	0x08002591
 8002450:	08002591 	.word	0x08002591
 8002454:	08002591 	.word	0x08002591
 8002458:	08002591 	.word	0x08002591
 800245c:	08002591 	.word	0x08002591
 8002460:	08002591 	.word	0x08002591
 8002464:	08002591 	.word	0x08002591
 8002468:	08002591 	.word	0x08002591
 800246c:	08002591 	.word	0x08002591
 8002470:	08002591 	.word	0x08002591
 8002474:	08002591 	.word	0x08002591
 8002478:	08002591 	.word	0x08002591
 800247c:	080024c5 	.word	0x080024c5
 8002480:	080024db 	.word	0x080024db
 8002484:	080024fd 	.word	0x080024fd
 8002488:	08002591 	.word	0x08002591
 800248c:	08002591 	.word	0x08002591
 8002490:	0800258b 	.word	0x0800258b
 8002494:	08002591 	.word	0x08002591
 8002498:	08002591 	.word	0x08002591
 800249c:	08002591 	.word	0x08002591
 80024a0:	0800251b 	.word	0x0800251b
 80024a4:	0800252d 	.word	0x0800252d
 80024a8:	08002591 	.word	0x08002591
 80024ac:	08002591 	.word	0x08002591
 80024b0:	08002555 	.word	0x08002555
 80024b4:	08002591 	.word	0x08002591
 80024b8:	0800255f 	.word	0x0800255f
 80024bc:	0800256b 	.word	0x0800256b
 80024c0:	08002581 	.word	0x08002581
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3301      	adds	r3, #1
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	3b31      	subs	r3, #49	; 0x31
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 feb6 	bl	8005240 <term_csv_buffer>
		retval = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
		break;
 80024d8:	e05a      	b.n	8002590 <cmd_process+0x1c4>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fd fee8 	bl	80002b0 <strlen>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d907      	bls.n	80024f6 <cmd_process+0x12a>
			display_show_curve(cmd_str[1] - 0x31);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3301      	adds	r3, #1
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	3b31      	subs	r3, #49	; 0x31
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f863 	bl	80035bc <display_show_curve>
		} else {
			//display_show_curves();
		}
		retval = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
		break;
 80024fa:	e049      	b.n	8002590 <cmd_process+0x1c4>
#endif
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <cmd_process+0x1d0>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <cmd_process+0x140>
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <cmd_process+0x1d0>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 800250a:	e041      	b.n	8002590 <cmd_process+0x1c4>
			esp_mode = 1;
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <cmd_process+0x1d0>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 8002512:	4823      	ldr	r0, [pc, #140]	; (80025a0 <cmd_process+0x1d4>)
 8002514:	f002 fce4 	bl	8004ee0 <term_print>
		break;
 8002518:	e03a      	b.n	8002590 <cmd_process+0x1c4>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3301      	adds	r3, #1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3b2f      	subs	r3, #47	; 0x2f
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fef6 	bl	8002314 <cmd_led>
 8002528:	60f8      	str	r0, [r7, #12]
		break;
 800252a:	e031      	b.n	8002590 <cmd_process+0x1c4>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fd febf 	bl	80002b0 <strlen>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d908      	bls.n	800254a <cmd_process+0x17e>
		    term_show_channel(cmd_str[1] - 0x31);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	3b31      	subs	r3, #49	; 0x31
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fdbc 	bl	80050c0 <term_show_channel>
 8002548:	e001      	b.n	800254e <cmd_process+0x182>
		} else {
			term_show_measurements();
 800254a:	f002 fd45 	bl	8004fd8 <term_show_measurements>
		}
		retval = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
		break;
 8002552:	e01d      	b.n	8002590 <cmd_process+0x1c4>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff febd 	bl	80022d4 <cmd_p>
 800255a:	60f8      	str	r0, [r7, #12]
		break;
 800255c:	e018      	b.n	8002590 <cmd_process+0x1c4>
	case 'R':
	case 'r':
		adc_restart = 1;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <cmd_process+0x1d8>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
		break;
 8002568:	e012      	b.n	8002590 <cmd_process+0x1c4>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3301      	adds	r3, #1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	3b31      	subs	r3, #49	; 0x31
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fcd9 	bl	8004f2c <term_show_buffer>
		retval = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
		break;
 800257e:	e007      	b.n	8002590 <cmd_process+0x1c4>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fe79 	bl	8002278 <cmd_t>
 8002586:	60f8      	str	r0, [r7, #12]
		break;
 8002588:	e002      	b.n	8002590 <cmd_process+0x1c4>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 800258a:	f7ff fedd 	bl	8002348 <cmd_help>
 800258e:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200024c1 	.word	0x200024c1
 80025a0:	08010ee4 	.word	0x08010ee4
 80025a4:	200024bf 	.word	0x200024bf

080025a8 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7fd fe7d 	bl	80002b0 <strlen>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <CMD_Handler+0x3c>)
 80025bc:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <CMD_Handler+0x3c>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fe48 	bl	800225c <cmd_error>
		return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d0:	e003      	b.n	80025da <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fefa 	bl	80023cc <cmd_process>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000380 	.word	0x20000380

080025e8 <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 80025ec:	2302      	movs	r3, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 ff8c 	bl	800550c <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 80025f4:	2302      	movs	r3, #2
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d002      	beq.n	8002600 <display_init+0x18>
 80025fa:	2302      	movs	r3, #2
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d107      	bne.n	8002610 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <display_init+0x3c>)
 8002602:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002606:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <display_init+0x40>)
 800260a:	22f0      	movs	r2, #240	; 0xf0
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	e007      	b.n	8002620 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <display_init+0x40>)
 8002612:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002616:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <display_init+0x3c>)
 800261a:	22f0      	movs	r2, #240	; 0xf0
 800261c:	801a      	strh	r2, [r3, #0]
	}
}
 800261e:	bf00      	nop
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20001ff2 	.word	0x20001ff2
 8002628:	20001ff4 	.word	0x20001ff4

0800262c <display_splash_screen>:

void display_splash_screen() {
 800262c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262e:	b087      	sub	sp, #28
 8002630:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002632:	2000      	movs	r0, #0
 8002634:	f003 f9c0 	bl	80059b8 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 8002638:	2302      	movs	r3, #2
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4b33      	ldr	r3, [pc, #204]	; (8002710 <display_splash_screen+0xe4>)
 8002642:	4a34      	ldr	r2, [pc, #208]	; (8002714 <display_splash_screen+0xe8>)
 8002644:	2120      	movs	r1, #32
 8002646:	4834      	ldr	r0, [pc, #208]	; (8002718 <display_splash_screen+0xec>)
 8002648:	f00b f840 	bl	800d6cc <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <display_splash_screen+0xf0>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	461c      	mov	r4, r3
 8002652:	4831      	ldr	r0, [pc, #196]	; (8002718 <display_splash_screen+0xec>)
 8002654:	f7fd fe2c 	bl	80002b0 <strlen>
 8002658:	4603      	mov	r3, r0
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <display_splash_screen+0xf4>)
 800265c:	8892      	ldrh	r2, [r2, #4]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	1ae3      	subs	r3, r4, r3
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	b29c      	uxth	r4, r3
 8002668:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <display_splash_screen+0xf8>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <display_splash_screen+0xf4>)
 8002670:	88db      	ldrh	r3, [r3, #6]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	0fda      	lsrs	r2, r3, #31
 8002676:	4413      	add	r3, r2
 8002678:	105b      	asrs	r3, r3, #1
 800267a:	b29d      	uxth	r5, r3
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <display_splash_screen+0xf4>)
 800267e:	2200      	movs	r2, #0
 8002680:	9204      	str	r2, [sp, #16]
 8002682:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002686:	9203      	str	r2, [sp, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	466e      	mov	r6, sp
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002694:	e886 0003 	stmia.w	r6, {r0, r1}
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <display_splash_screen+0xec>)
 800269c:	4629      	mov	r1, r5
 800269e:	4620      	mov	r0, r4
 80026a0:	f004 f8fc 	bl	800689c <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <display_splash_screen+0xf0>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	461c      	mov	r4, r3
 80026aa:	481f      	ldr	r0, [pc, #124]	; (8002728 <display_splash_screen+0xfc>)
 80026ac:	f7fd fe00 	bl	80002b0 <strlen>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <display_splash_screen+0x100>)
 80026b4:	8892      	ldrh	r2, [r2, #4]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	1ae3      	subs	r3, r4, r3
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	b29c      	uxth	r4, r3
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <display_splash_screen+0xf8>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <display_splash_screen+0xf4>)
 80026c8:	88db      	ldrh	r3, [r3, #6]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	0fda      	lsrs	r2, r3, #31
 80026ce:	4413      	add	r3, r2
 80026d0:	105b      	asrs	r3, r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3319      	adds	r3, #25
 80026d6:	b29d      	uxth	r5, r3
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <display_splash_screen+0x100>)
 80026da:	2200      	movs	r2, #0
 80026dc:	9204      	str	r2, [sp, #16]
 80026de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e2:	9203      	str	r2, [sp, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	9202      	str	r2, [sp, #8]
 80026e8:	466e      	mov	r6, sp
 80026ea:	1d1a      	adds	r2, r3, #4
 80026ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f0:	e886 0003 	stmia.w	r6, {r0, r1}
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <display_splash_screen+0xfc>)
 80026f8:	4629      	mov	r1, r5
 80026fa:	4620      	mov	r0, r4
 80026fc:	f004 f8ce 	bl	800689c <Displ_WString>

	Displ_BackLight('1');
 8002700:	2031      	movs	r0, #49	; 0x31
 8002702:	f004 f90b 	bl	800691c <Displ_BackLight>
}
 8002706:	bf00      	nop
 8002708:	3704      	adds	r7, #4
 800270a:	46bd      	mov	sp, r7
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270e:	bf00      	nop
 8002710:	0801547c 	.word	0x0801547c
 8002714:	08010f0c 	.word	0x08010f0c
 8002718:	20001fd0 	.word	0x20001fd0
 800271c:	20001ff2 	.word	0x20001ff2
 8002720:	20000018 	.word	0x20000018
 8002724:	20001ff4 	.word	0x20001ff4
 8002728:	08015480 	.word	0x08015480
 800272c:	2000000c 	.word	0x2000000c

08002730 <display_channel_detail>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// channel detail screen
void display_channel_detail() {
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b087      	sub	sp, #28
 8002734:	af06      	add	r7, sp, #24
	if (!meter_readings_invalid) {
 8002736:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <display_channel_detail+0x244>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 80b1 	bne.w	80028a2 <display_channel_detail+0x172>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002740:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <display_channel_detail+0x248>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff1f 	bl	8000588 <__aeabi_f2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	e9cd 2300 	strd	r2, r3, [sp]
 8002752:	4a8a      	ldr	r2, [pc, #552]	; (800297c <display_channel_detail+0x24c>)
 8002754:	2120      	movs	r1, #32
 8002756:	488a      	ldr	r0, [pc, #552]	; (8002980 <display_channel_detail+0x250>)
 8002758:	f00a ffb8 	bl	800d6cc <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 800275c:	4b89      	ldr	r3, [pc, #548]	; (8002984 <display_channel_detail+0x254>)
 800275e:	2200      	movs	r2, #0
 8002760:	9204      	str	r2, [sp, #16]
 8002762:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002766:	9203      	str	r2, [sp, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	9202      	str	r2, [sp, #8]
 800276c:	466c      	mov	r4, sp
 800276e:	1d1a      	adds	r2, r3, #4
 8002770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002774:	e884 0003 	stmia.w	r4, {r0, r1}
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a81      	ldr	r2, [pc, #516]	; (8002980 <display_channel_detail+0x250>)
 800277c:	2107      	movs	r1, #7
 800277e:	2009      	movs	r0, #9
 8002780:	f004 f88c 	bl	800689c <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i);
 8002784:	4b80      	ldr	r3, [pc, #512]	; (8002988 <display_channel_detail+0x258>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fefd 	bl	8000588 <__aeabi_f2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	e9cd 2300 	strd	r2, r3, [sp]
 8002796:	4a7d      	ldr	r2, [pc, #500]	; (800298c <display_channel_detail+0x25c>)
 8002798:	2120      	movs	r1, #32
 800279a:	4879      	ldr	r0, [pc, #484]	; (8002980 <display_channel_detail+0x250>)
 800279c:	f00a ff96 	bl	800d6cc <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 80027a0:	4b78      	ldr	r3, [pc, #480]	; (8002984 <display_channel_detail+0x254>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	9204      	str	r2, [sp, #16]
 80027a6:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80027aa:	9203      	str	r2, [sp, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	9202      	str	r2, [sp, #8]
 80027b0:	466c      	mov	r4, sp
 80027b2:	1d1a      	adds	r2, r3, #4
 80027b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a70      	ldr	r2, [pc, #448]	; (8002980 <display_channel_detail+0x250>)
 80027c0:	2107      	movs	r1, #7
 80027c2:	2078      	movs	r0, #120	; 0x78
 80027c4:	f004 f86a 	bl	800689c <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va );
 80027c8:	4b71      	ldr	r3, [pc, #452]	; (8002990 <display_channel_detail+0x260>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fedb 	bl	8000588 <__aeabi_f2d>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	e9cd 2300 	strd	r2, r3, [sp]
 80027da:	4a6e      	ldr	r2, [pc, #440]	; (8002994 <display_channel_detail+0x264>)
 80027dc:	2120      	movs	r1, #32
 80027de:	4868      	ldr	r0, [pc, #416]	; (8002980 <display_channel_detail+0x250>)
 80027e0:	f00a ff74 	bl	800d6cc <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 80027e4:	4b67      	ldr	r3, [pc, #412]	; (8002984 <display_channel_detail+0x254>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	9204      	str	r2, [sp, #16]
 80027ea:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027ee:	9203      	str	r2, [sp, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	9202      	str	r2, [sp, #8]
 80027f4:	466c      	mov	r4, sp
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <display_channel_detail+0x250>)
 8002804:	2130      	movs	r1, #48	; 0x30
 8002806:	2009      	movs	r0, #9
 8002808:	f004 f848 	bl	800689c <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w );
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <display_channel_detail+0x268>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd feb9 	bl	8000588 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	e9cd 2300 	strd	r2, r3, [sp]
 800281e:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <display_channel_detail+0x264>)
 8002820:	2120      	movs	r1, #32
 8002822:	4857      	ldr	r0, [pc, #348]	; (8002980 <display_channel_detail+0x250>)
 8002824:	f00a ff52 	bl	800d6cc <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 8002828:	4b56      	ldr	r3, [pc, #344]	; (8002984 <display_channel_detail+0x254>)
 800282a:	2200      	movs	r2, #0
 800282c:	9204      	str	r2, [sp, #16]
 800282e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002832:	9203      	str	r2, [sp, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	9202      	str	r2, [sp, #8]
 8002838:	466c      	mov	r4, sp
 800283a:	1d1a      	adds	r2, r3, #4
 800283c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002840:	e884 0003 	stmia.w	r4, {r0, r1}
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <display_channel_detail+0x250>)
 8002848:	2159      	movs	r1, #89	; 0x59
 800284a:	2009      	movs	r0, #9
 800284c:	f004 f826 	bl	800689c <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf) );
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <display_channel_detail+0x26c>)
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	eef0 7ae7 	vabs.f32	s15, s15
 800285a:	ee17 0a90 	vmov	r0, s15
 800285e:	f7fd fe93 	bl	8000588 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	e9cd 2300 	strd	r2, r3, [sp]
 800286a:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <display_channel_detail+0x270>)
 800286c:	2120      	movs	r1, #32
 800286e:	4844      	ldr	r0, [pc, #272]	; (8002980 <display_channel_detail+0x250>)
 8002870:	f00a ff2c 	bl	800d6cc <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <display_channel_detail+0x254>)
 8002876:	2200      	movs	r2, #0
 8002878:	9204      	str	r2, [sp, #16]
 800287a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287e:	9203      	str	r2, [sp, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	9202      	str	r2, [sp, #8]
 8002884:	466c      	mov	r4, sp
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800288c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <display_channel_detail+0x250>)
 8002894:	2182      	movs	r1, #130	; 0x82
 8002896:	2009      	movs	r0, #9
 8002898:	f004 f800 	bl	800689c <Displ_WString>
		} else {
			snprintf(str,sizeof(str)," 0.0");
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
		*/
		display_show_curves();
 800289c:	f000 fe52 	bl	8003544 <display_show_curves>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
		//Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
		}

}
 80028a0:	e063      	b.n	800296a <display_channel_detail+0x23a>
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <display_channel_detail+0x254>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	9204      	str	r2, [sp, #16]
 80028a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028ac:	9203      	str	r2, [sp, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	9202      	str	r2, [sp, #8]
 80028b2:	466c      	mov	r4, sp
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <display_channel_detail+0x274>)
 80028c2:	2107      	movs	r1, #7
 80028c4:	2009      	movs	r0, #9
 80028c6:	f003 ffe9 	bl	800689c <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <display_channel_detail+0x254>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	9204      	str	r2, [sp, #16]
 80028d0:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80028d4:	9203      	str	r2, [sp, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	9202      	str	r2, [sp, #8]
 80028da:	466c      	mov	r4, sp
 80028dc:	1d1a      	adds	r2, r3, #4
 80028de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <display_channel_detail+0x278>)
 80028ea:	2107      	movs	r1, #7
 80028ec:	2078      	movs	r0, #120	; 0x78
 80028ee:	f003 ffd5 	bl	800689c <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <display_channel_detail+0x254>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	9204      	str	r2, [sp, #16]
 80028f8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80028fc:	9203      	str	r2, [sp, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	9202      	str	r2, [sp, #8]
 8002902:	466c      	mov	r4, sp
 8002904:	1d1a      	adds	r2, r3, #4
 8002906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290a:	e884 0003 	stmia.w	r4, {r0, r1}
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a26      	ldr	r2, [pc, #152]	; (80029ac <display_channel_detail+0x27c>)
 8002912:	2130      	movs	r1, #48	; 0x30
 8002914:	2009      	movs	r0, #9
 8002916:	f003 ffc1 	bl	800689c <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <display_channel_detail+0x254>)
 800291c:	2200      	movs	r2, #0
 800291e:	9204      	str	r2, [sp, #16]
 8002920:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002924:	9203      	str	r2, [sp, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	9202      	str	r2, [sp, #8]
 800292a:	466c      	mov	r4, sp
 800292c:	1d1a      	adds	r2, r3, #4
 800292e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002932:	e884 0003 	stmia.w	r4, {r0, r1}
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <display_channel_detail+0x27c>)
 800293a:	2159      	movs	r1, #89	; 0x59
 800293c:	2009      	movs	r0, #9
 800293e:	f003 ffad 	bl	800689c <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <display_channel_detail+0x254>)
 8002944:	2200      	movs	r2, #0
 8002946:	9204      	str	r2, [sp, #16]
 8002948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294c:	9203      	str	r2, [sp, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	9202      	str	r2, [sp, #8]
 8002952:	466c      	mov	r4, sp
 8002954:	1d1a      	adds	r2, r3, #4
 8002956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800295a:	e884 0003 	stmia.w	r4, {r0, r1}
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <display_channel_detail+0x280>)
 8002962:	2182      	movs	r1, #130	; 0x82
 8002964:	2009      	movs	r0, #9
 8002966:	f003 ff99 	bl	800689c <Displ_WString>
}
 800296a:	bf00      	nop
 800296c:	3704      	adds	r7, #4
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	2000028c 	.word	0x2000028c
 8002978:	200080b8 	.word	0x200080b8
 800297c:	08010f28 	.word	0x08010f28
 8002980:	20001fd0 	.word	0x20001fd0
 8002984:	20000024 	.word	0x20000024
 8002988:	200080bc 	.word	0x200080bc
 800298c:	08010f30 	.word	0x08010f30
 8002990:	200080c0 	.word	0x200080c0
 8002994:	08010f38 	.word	0x08010f38
 8002998:	200080c4 	.word	0x200080c4
 800299c:	200080c8 	.word	0x200080c8
 80029a0:	08010f40 	.word	0x08010f40
 80029a4:	08010f48 	.word	0x08010f48
 80029a8:	08010f4c 	.word	0x08010f4c
 80029ac:	08010f54 	.word	0x08010f54
 80029b0:	08010f5c 	.word	0x08010f5c

080029b4 <display_usage>:

void display_usage() {
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af06      	add	r7, sp, #24
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <display_update_meter+0xc8>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	79fa      	ldrb	r2, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d045      	beq.n	8002a64 <display_update_meter+0xa0>
		switch(screen) {
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	3b01      	subs	r3, #1
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d83e      	bhi.n	8002a5e <display_update_meter+0x9a>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <display_update_meter+0x24>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a0b 	.word	0x08002a0b
 80029f0:	08002a1d 	.word	0x08002a1d
 80029f4:	08002a2f 	.word	0x08002a2f
		case 1:
			meter_readings_invalid = 1;
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <display_update_meter+0xcc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
			display_channel = I1;
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <display_update_meter+0xd0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8002a04:	f000 f858 	bl	8002ab8 <display_meter_mask>
			break;
 8002a08:	e029      	b.n	8002a5e <display_update_meter+0x9a>
		case 2:
			meter_readings_invalid = 1;
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <display_update_meter+0xcc>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
			display_channel = I2;
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <display_update_meter+0xd0>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8002a16:	f000 f84f 	bl	8002ab8 <display_meter_mask>
			break;
 8002a1a:	e020      	b.n	8002a5e <display_update_meter+0x9a>
		case 3:
			meter_readings_invalid = 1;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <display_update_meter+0xcc>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
			display_channel = I3;
 8002a22:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <display_update_meter+0xd0>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8002a28:	f000 f846 	bl	8002ab8 <display_meter_mask>
			break;
 8002a2c:	e017      	b.n	8002a5e <display_update_meter+0x9a>
		case 4:
			Displ_CLS(BLACK);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f002 ffc2 	bl	80059b8 <Displ_CLS>
			Displ_WString(20, 20, "Usage" , Font24, 1, WHITE, BLACK);
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <display_update_meter+0xd4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	9204      	str	r2, [sp, #16]
 8002a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3e:	9203      	str	r2, [sp, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	9202      	str	r2, [sp, #8]
 8002a44:	466c      	mov	r4, sp
 8002a46:	1d1a      	adds	r2, r3, #4
 8002a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a4c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <display_update_meter+0xd8>)
 8002a54:	2114      	movs	r1, #20
 8002a56:	2014      	movs	r0, #20
 8002a58:	f003 ff20 	bl	800689c <Displ_WString>
			break;
 8002a5c:	bf00      	nop
		}
		last_screen = screen;
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <display_update_meter+0xc8>)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	dc02      	bgt.n	8002a70 <display_update_meter+0xac>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	dc03      	bgt.n	8002a76 <display_update_meter+0xb2>
	case 4:
		display_usage();
		break;

	}
}
 8002a6e:	e008      	b.n	8002a82 <display_update_meter+0xbe>
	switch(screen) {
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d003      	beq.n	8002a7c <display_update_meter+0xb8>
}
 8002a74:	e005      	b.n	8002a82 <display_update_meter+0xbe>
		display_channel_detail();
 8002a76:	f7ff fe5b 	bl	8002730 <display_channel_detail>
		break;
 8002a7a:	e002      	b.n	8002a82 <display_update_meter+0xbe>
		display_usage();
 8002a7c:	f7ff ff9a 	bl	80029b4 <display_usage>
		break;
 8002a80:	bf00      	nop
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20001ff0 	.word	0x20001ff0
 8002a90:	2000028c 	.word	0x2000028c
 8002a94:	20000381 	.word	0x20000381
 8002a98:	20000018 	.word	0x20000018
 8002a9c:	08010f64 	.word	0x08010f64

08002aa0 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
	last_screen = 0;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <display_update_mask+0x14>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	20001ff0 	.word	0x20001ff0

08002ab8 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aba:	b08b      	sub	sp, #44	; 0x2c
 8002abc:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8002ac6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002aca:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 8002acc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ad0:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 ff6d 	bl	80059b8 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002ade:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002ae2:	4ba5      	ldr	r3, [pc, #660]	; (8002d78 <display_meter_mask+0x2c0>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	2000      	movs	r0, #0
 8002af8:	f003 f947 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002afc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b00:	89fa      	ldrh	r2, [r7, #14]
 8002b02:	89bb      	ldrh	r3, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	2200      	movs	r2, #0
 8002b12:	2000      	movs	r0, #0
 8002b14:	f003 f939 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b18:	89fa      	ldrh	r2, [r7, #14]
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b219      	sxth	r1, r3
 8002b22:	4b95      	ldr	r3, [pc, #596]	; (8002d78 <display_meter_mask+0x2c0>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b218      	sxth	r0, r3
 8002b2c:	89fa      	ldrh	r2, [r7, #14]
 8002b2e:	89bb      	ldrh	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b21a      	sxth	r2, r3
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f003 f923 	bl	8005d8a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 8002b44:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <display_meter_mask+0x2c0>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b218      	sxth	r0, r3
 8002b4e:	89fa      	ldrh	r2, [r7, #14]
 8002b50:	89bb      	ldrh	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b219      	sxth	r1, r3
 8002b58:	4b87      	ldr	r3, [pc, #540]	; (8002d78 <display_meter_mask+0x2c0>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2300      	movs	r3, #0
 8002b68:	f003 f90f 	bl	8005d8a <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 8002b6c:	89fb      	ldrh	r3, [r7, #14]
 8002b6e:	3309      	adds	r3, #9
 8002b70:	b29c      	uxth	r4, r3
 8002b72:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <display_meter_mask+0x2c4>)
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	9204      	str	r2, [sp, #16]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	9203      	str	r2, [sp, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	9202      	str	r2, [sp, #8]
 8002b80:	466d      	mov	r5, sp
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b88:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2256      	movs	r2, #86	; 0x56
 8002b90:	4621      	mov	r1, r4
 8002b92:	204b      	movs	r0, #75	; 0x4b
 8002b94:	f003 fc04 	bl	80063a0 <Displ_WChar>
	font_col = ORANGE;
 8002b98:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002b9c:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <display_meter_mask+0x2c0>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3b1e      	subs	r3, #30
 8002ba4:	b29c      	uxth	r4, r3
 8002ba6:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <display_meter_mask+0x2c4>)
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	9204      	str	r2, [sp, #16]
 8002bac:	893a      	ldrh	r2, [r7, #8]
 8002bae:	9203      	str	r2, [sp, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	9202      	str	r2, [sp, #8]
 8002bb4:	466d      	mov	r5, sp
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2241      	movs	r2, #65	; 0x41
 8002bc4:	2109      	movs	r1, #9
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f003 fbea 	bl	80063a0 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002bcc:	89ba      	ldrh	r2, [r7, #12]
 8002bce:	89fb      	ldrh	r3, [r7, #14]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002bd8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002be2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002be6:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <display_meter_mask+0x2c0>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f003 f8c5 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002c00:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c04:	89fa      	ldrh	r2, [r7, #14]
 8002c06:	89bb      	ldrh	r3, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b21a      	sxth	r2, r3
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	2000      	movs	r0, #0
 8002c18:	f003 f8b7 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002c1c:	89fa      	ldrh	r2, [r7, #14]
 8002c1e:	89bb      	ldrh	r3, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b219      	sxth	r1, r3
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <display_meter_mask+0x2c0>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b218      	sxth	r0, r3
 8002c30:	89fa      	ldrh	r2, [r7, #14]
 8002c32:	89bb      	ldrh	r3, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	4602      	mov	r2, r0
 8002c42:	2000      	movs	r0, #0
 8002c44:	f003 f8a1 	bl	8005d8a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <display_meter_mask+0x2c0>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	b218      	sxth	r0, r3
 8002c52:	89fa      	ldrh	r2, [r7, #14]
 8002c54:	89bb      	ldrh	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	b219      	sxth	r1, r3
 8002c5c:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <display_meter_mask+0x2c0>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	b21a      	sxth	r2, r3
 8002c66:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4623      	mov	r3, r4
 8002c70:	f003 f88b 	bl	8005d8a <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8002c74:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <display_meter_mask+0x2c0>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	3b50      	subs	r3, #80	; 0x50
 8002c7a:	b29c      	uxth	r4, r3
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	3309      	adds	r3, #9
 8002c80:	b29d      	uxth	r5, r3
 8002c82:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <display_meter_mask+0x2c4>)
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	9204      	str	r2, [sp, #16]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	9203      	str	r2, [sp, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	9202      	str	r2, [sp, #8]
 8002c90:	466e      	mov	r6, sp
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c98:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <display_meter_mask+0x2c8>)
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f003 fdfa 	bl	800689c <Displ_WString>
	// W
	ypos += box_height+1;
 8002ca8:	89ba      	ldrh	r2, [r7, #12]
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	4413      	add	r3, r2
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002cb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002cbe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <display_meter_mask+0x2c0>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002cd0:	897b      	ldrh	r3, [r7, #10]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f003 f857 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002cdc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002ce0:	89fa      	ldrh	r2, [r7, #14]
 8002ce2:	89bb      	ldrh	r3, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f003 f849 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002cf8:	89fa      	ldrh	r2, [r7, #14]
 8002cfa:	89bb      	ldrh	r3, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b219      	sxth	r1, r3
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <display_meter_mask+0x2c0>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b218      	sxth	r0, r3
 8002d0c:	89fa      	ldrh	r2, [r7, #14]
 8002d0e:	89bb      	ldrh	r3, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f003 f833 	bl	8005d8a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <display_meter_mask+0x2c0>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b218      	sxth	r0, r3
 8002d2e:	89fa      	ldrh	r2, [r7, #14]
 8002d30:	89bb      	ldrh	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b219      	sxth	r1, r3
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <display_meter_mask+0x2c0>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b21a      	sxth	r2, r3
 8002d42:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	f003 f81d 	bl	8005d8a <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <display_meter_mask+0x2c0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	3b50      	subs	r3, #80	; 0x50
 8002d56:	b29c      	uxth	r4, r3
 8002d58:	89fb      	ldrh	r3, [r7, #14]
 8002d5a:	3309      	adds	r3, #9
 8002d5c:	b29d      	uxth	r5, r3
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <display_meter_mask+0x2c4>)
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	9204      	str	r2, [sp, #16]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	9203      	str	r2, [sp, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	9202      	str	r2, [sp, #8]
 8002d6c:	466e      	mov	r6, sp
 8002d6e:	1d1a      	adds	r2, r3, #4
 8002d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d74:	e006      	b.n	8002d84 <display_meter_mask+0x2cc>
 8002d76:	bf00      	nop
 8002d78:	20001ff2 	.word	0x20001ff2
 8002d7c:	20000018 	.word	0x20000018
 8002d80:	08010f6c 	.word	0x08010f6c
 8002d84:	e886 0003 	stmia.w	r6, {r0, r1}
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2257      	movs	r2, #87	; 0x57
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f003 fb06 	bl	80063a0 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002d94:	89ba      	ldrh	r2, [r7, #12]
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002daa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <display_meter_mask+0x480>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f002 ffe1 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002dc8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002dcc:	89fa      	ldrh	r2, [r7, #14]
 8002dce:	89bb      	ldrh	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b21a      	sxth	r2, r3
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f002 ffd3 	bl	8005d8a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002de4:	89fa      	ldrh	r2, [r7, #14]
 8002de6:	89bb      	ldrh	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b219      	sxth	r1, r3
 8002dee:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <display_meter_mask+0x480>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b218      	sxth	r0, r3
 8002df8:	89fa      	ldrh	r2, [r7, #14]
 8002dfa:	89bb      	ldrh	r3, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	4602      	mov	r2, r0
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f002 ffbd 	bl	8005d8a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002e10:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <display_meter_mask+0x480>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	b218      	sxth	r0, r3
 8002e1a:	89fa      	ldrh	r2, [r7, #14]
 8002e1c:	89bb      	ldrh	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b219      	sxth	r1, r3
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <display_meter_mask+0x480>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4623      	mov	r3, r4
 8002e38:	f002 ffa7 	bl	8005d8a <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	3309      	adds	r3, #9
 8002e40:	b29c      	uxth	r4, r3
 8002e42:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <display_meter_mask+0x484>)
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	9204      	str	r2, [sp, #16]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	9203      	str	r2, [sp, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	9202      	str	r2, [sp, #8]
 8002e50:	466d      	mov	r5, sp
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <display_meter_mask+0x488>)
 8002e60:	4621      	mov	r1, r4
 8002e62:	205f      	movs	r0, #95	; 0x5f
 8002e64:	f003 fd1a 	bl	800689c <Displ_WString>
	// Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);		// Degree sign

	// Graph Box
	ypos += box_height+1;
 8002e68:	89ba      	ldrh	r2, [r7, #12]
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002e74:	231f      	movs	r3, #31
 8002e76:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <display_meter_mask+0x48c>)
 8002e7a:	881a      	ldrh	r2, [r3, #0]
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	2302      	movs	r3, #2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <display_meter_mask+0x490>)
 8002e8e:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <display_meter_mask+0x490>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <display_meter_mask+0x494>)
 8002ea6:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002ea8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002eac:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <display_meter_mask+0x480>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b218      	sxth	r0, r3
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <display_meter_mask+0x48c>)
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	b21c      	sxth	r4, r3
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	897a      	ldrh	r2, [r7, #10]
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4623      	mov	r3, r4
 8002eca:	4602      	mov	r2, r0
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f003 f88d 	bl	8005fec <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <display_meter_mask+0x498>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b218      	sxth	r0, r3
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <display_meter_mask+0x494>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b219      	sxth	r1, r3
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <display_meter_mask+0x498>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	33d2      	adds	r3, #210	; 0xd2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <display_meter_mask+0x494>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ef2:	9400      	str	r4, [sp, #0]
 8002ef4:	f002 ff49 	bl	8005d8a <Displ_Line>

	// Channel
	snprintf(str,sizeof(str),"Ch%d", display_channel+1 );
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <display_meter_mask+0x49c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <display_meter_mask+0x4a0>)
 8002f00:	2120      	movs	r1, #32
 8002f02:	4816      	ldr	r0, [pc, #88]	; (8002f5c <display_meter_mask+0x4a4>)
 8002f04:	f00a fbe2 	bl	800d6cc <sniprintf>
	Displ_WString(150, 135, str , Font24, 1, WHITE, BLACK);
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <display_meter_mask+0x484>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	9204      	str	r2, [sp, #16]
 8002f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f12:	9203      	str	r2, [sp, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	9202      	str	r2, [sp, #8]
 8002f18:	466c      	mov	r4, sp
 8002f1a:	1d1a      	adds	r2, r3, #4
 8002f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f20:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <display_meter_mask+0x4a4>)
 8002f28:	2187      	movs	r1, #135	; 0x87
 8002f2a:	2096      	movs	r0, #150	; 0x96
 8002f2c:	f003 fcb6 	bl	800689c <Displ_WString>
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f38:	20001ff2 	.word	0x20001ff2
 8002f3c:	20000018 	.word	0x20000018
 8002f40:	08010f70 	.word	0x08010f70
 8002f44:	20001ff4 	.word	0x20001ff4
 8002f48:	20000008 	.word	0x20000008
 8002f4c:	200006cc 	.word	0x200006cc
 8002f50:	2000000a 	.word	0x2000000a
 8002f54:	20000381 	.word	0x20000381
 8002f58:	08010f74 	.word	0x08010f74
 8002f5c:	20001fd0 	.word	0x20001fd0

08002f60 <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6a:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f70:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <display_align_curves+0xfc>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da20      	bge.n	8002fbc <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	e016      	b.n	8002fae <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002f80:	4a37      	ldr	r2, [pc, #220]	; (8003060 <display_align_curves+0x100>)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002f88:	4a36      	ldr	r2, [pc, #216]	; (8003064 <display_align_curves+0x104>)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002f90:	4a33      	ldr	r2, [pc, #204]	; (8003060 <display_align_curves+0x100>)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002f98:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002f9c:	4a31      	ldr	r2, [pc, #196]	; (8003064 <display_align_curves+0x104>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002fa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002fb4:	d3e4      	bcc.n	8002f80 <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002fb6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002fba:	e049      	b.n	8003050 <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <display_align_curves+0xfc>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	e019      	b.n	8002ff8 <display_align_curves+0x98>
		dest_idx++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002fca:	4a25      	ldr	r2, [pc, #148]	; (8003060 <display_align_curves+0x100>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <display_align_curves+0x104>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <display_align_curves+0x100>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002fe2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <display_align_curves+0x104>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002fee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002ffe:	d3e1      	bcc.n	8002fc4 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8003000:	2314      	movs	r3, #20
 8003002:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	e019      	b.n	800303e <display_align_curves+0xde>
		dest_idx++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3301      	adds	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <display_align_curves+0x100>)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003018:	4a12      	ldr	r2, [pc, #72]	; (8003064 <display_align_curves+0x104>)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8003020:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <display_align_curves+0x100>)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8003028:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <display_align_curves+0x104>)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8003034:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <display_align_curves+0xfc>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbe0      	blt.n	800300a <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	2000023c 	.word	0x2000023c
 8003060:	20007398 	.word	0x20007398
 8003064:	200006d0 	.word	0x200006d0

08003068 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af06      	add	r7, sp, #24
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
 8003072:	460b      	mov	r3, r1
 8003074:	717b      	strb	r3, [r7, #5]
 8003076:	4613      	mov	r3, r2
 8003078:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 800307a:	797b      	ldrb	r3, [r7, #5]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <draw_curve+0x20>
 8003080:	4b65      	ldr	r3, [pc, #404]	; (8003218 <draw_curve+0x1b0>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8003088:	4b64      	ldr	r3, [pc, #400]	; (800321c <draw_curve+0x1b4>)
 800308a:	881a      	ldrh	r2, [r3, #0]
 800308c:	4b64      	ldr	r3, [pc, #400]	; (8003220 <draw_curve+0x1b8>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b02      	subs	r3, #2
 8003096:	b299      	uxth	r1, r3
 8003098:	4b62      	ldr	r3, [pc, #392]	; (8003224 <draw_curve+0x1bc>)
 800309a:	881a      	ldrh	r2, [r3, #0]
 800309c:	2302      	movs	r3, #2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	4b5e      	ldr	r3, [pc, #376]	; (8003220 <draw_curve+0x1b8>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	2000      	movs	r0, #0
 80030ac:	9000      	str	r0, [sp, #0]
 80030ae:	2002      	movs	r0, #2
 80030b0:	f002 face 	bl	8005650 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 80030b4:	4b58      	ldr	r3, [pc, #352]	; (8003218 <draw_curve+0x1b0>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d023      	beq.n	8003104 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 80030bc:	4b5a      	ldr	r3, [pc, #360]	; (8003228 <draw_curve+0x1c0>)
 80030be:	889a      	ldrh	r2, [r3, #4]
 80030c0:	4b5a      	ldr	r3, [pc, #360]	; (800322c <draw_curve+0x1c4>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	b29c      	uxth	r4, r3
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <draw_curve+0x1c8>)
 80030ca:	881a      	ldrh	r2, [r3, #0]
 80030cc:	4b56      	ldr	r3, [pc, #344]	; (8003228 <draw_curve+0x1c0>)
 80030ce:	88db      	ldrh	r3, [r3, #6]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	b29d      	uxth	r5, r3
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <draw_curve+0x1c0>)
 80030da:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80030de:	9204      	str	r2, [sp, #16]
 80030e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80030e4:	9203      	str	r2, [sp, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	9202      	str	r2, [sp, #8]
 80030ea:	466e      	mov	r6, sp
 80030ec:	1d1a      	adds	r2, r3, #4
 80030ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030f2:	e886 0003 	stmia.w	r6, {r0, r1}
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <draw_curve+0x1cc>)
 80030fa:	4629      	mov	r1, r5
 80030fc:	4620      	mov	r0, r4
 80030fe:	f003 fbcd 	bl	800689c <Displ_WString>
		return;
 8003102:	e086      	b.n	8003212 <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8003104:	793b      	ldrb	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04c      	beq.n	80031a4 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_x_size, curve_y_zero, WHITE);
 800310a:	4b48      	ldr	r3, [pc, #288]	; (800322c <draw_curve+0x1c4>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b218      	sxth	r0, r3
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <draw_curve+0x1c8>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b219      	sxth	r1, r3
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <draw_curve+0x1c4>)
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <draw_curve+0x1d0>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	b29b      	uxth	r3, r3
 8003122:	b21a      	sxth	r2, r3
 8003124:	4b42      	ldr	r3, [pc, #264]	; (8003230 <draw_curve+0x1c8>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b21b      	sxth	r3, r3
 800312a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800312e:	9400      	str	r4, [sp, #0]
 8003130:	f002 fe2b 	bl	8005d8a <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_x_size; x++) {
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e02d      	b.n	8003196 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <draw_curve+0x1c4>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	4413      	add	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	b218      	sxth	r0, r3
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <draw_curve+0x1c8>)
 800314e:	881a      	ldrh	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	4939      	ldr	r1, [pc, #228]	; (800323c <draw_curve+0x1d4>)
 8003156:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800315a:	b29b      	uxth	r3, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29b      	uxth	r3, r3
 8003160:	b219      	sxth	r1, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b31      	ldr	r3, [pc, #196]	; (800322c <draw_curve+0x1c4>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	b29b      	uxth	r3, r3
 800316e:	b21c      	sxth	r4, r3
 8003170:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <draw_curve+0x1c8>)
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	4d31      	ldr	r5, [pc, #196]	; (800323c <draw_curve+0x1d4>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800317c:	b29b      	uxth	r3, r3
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	b29b      	uxth	r3, r3
 8003182:	b21a      	sxth	r2, r3
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	4622      	mov	r2, r4
 800318c:	f002 fdfd 	bl	8005d8a <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <draw_curve+0x1d0>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4293      	cmp	r3, r2
 80031a0:	dbcb      	blt.n	800313a <draw_curve+0xd2>
 80031a2:	e036      	b.n	8003212 <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_x_size; x++) {
 80031a4:	2301      	movs	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	e02d      	b.n	8003206 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <draw_curve+0x1c4>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b218      	sxth	r0, r3
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <draw_curve+0x1c8>)
 80031be:	881a      	ldrh	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	491d      	ldr	r1, [pc, #116]	; (800323c <draw_curve+0x1d4>)
 80031c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b219      	sxth	r1, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <draw_curve+0x1c4>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b21c      	sxth	r4, r3
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <draw_curve+0x1c8>)
 80031e2:	881a      	ldrh	r2, [r3, #0]
 80031e4:	4d15      	ldr	r5, [pc, #84]	; (800323c <draw_curve+0x1d4>)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b21a      	sxth	r2, r3
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	4622      	mov	r2, r4
 80031fc:	f002 fdc5 	bl	8005d8a <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3301      	adds	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <draw_curve+0x1d0>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4293      	cmp	r3, r2
 8003210:	dbcb      	blt.n	80031aa <draw_curve+0x142>
		}
	}
}
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003218:	2000028c 	.word	0x2000028c
 800321c:	20001ff4 	.word	0x20001ff4
 8003220:	20000008 	.word	0x20000008
 8003224:	20001ff2 	.word	0x20001ff2
 8003228:	20000018 	.word	0x20000018
 800322c:	2000000a 	.word	0x2000000a
 8003230:	200006cc 	.word	0x200006cc
 8003234:	08010f7c 	.word	0x08010f7c
 8003238:	200006ce 	.word	0x200006ce
 800323c:	20000384 	.word	0x20000384

08003240 <make_curve>:
 *             represents plus/minus values centered around the half way point of the data range.
 *          The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 * @ para bufnum      Sample buffer to use for curve
 * @ para auto_scale  1 = scale to fit available screen area, 0 = use ADC full scale
 */
void make_curve(uint8_t bufnum, uint8_t auto_scale) {
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b095      	sub	sp, #84	; 0x54
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	4613      	mov	r3, r2
 800324e:	71bb      	strb	r3, [r7, #6]
	int value;
	int scale_factor = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
	int src_idx = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
	int range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8003258:	79fa      	ldrb	r2, [r7, #7]
 800325a:	49b3      	ldr	r1, [pc, #716]	; (8003528 <make_curve+0x2e8>)
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3302      	adds	r3, #2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	79fa      	ldrb	r2, [r7, #7]
 800326e:	49ae      	ldr	r1, [pc, #696]	; (8003528 <make_curve+0x2e8>)
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	1ac3      	subs	r3, r0, r3
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
	int zero_value = range / 2 + sample_buf_meta[bufnum].min;	// zero should be half way if DC-Bias is accurate
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	0fda      	lsrs	r2, r3, #31
 8003284:	4413      	add	r3, r2
 8003286:	105b      	asrs	r3, r3, #1
 8003288:	4618      	mov	r0, r3
 800328a:	79fa      	ldrb	r2, [r7, #7]
 800328c:	49a6      	ldr	r1, [pc, #664]	; (8003528 <make_curve+0x2e8>)
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	4403      	add	r3, r0
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
	int curve_y_min;
	float fScale;

	if (auto_scale) {
 800329e:	79bb      	ldrb	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00f      	beq.n	80032c4 <make_curve+0x84>
		fScale = (float)curve_y_size / (float)range;
 80032a4:	4ba1      	ldr	r3, [pc, #644]	; (800352c <make_curve+0x2ec>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032be:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80032c2:	e00b      	b.n	80032dc <make_curve+0x9c>
	} else {
		fScale = (float)curve_y_size / ADC_FS_RAW;
 80032c4:	4b99      	ldr	r3, [pc, #612]	; (800352c <make_curve+0x2ec>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d0:	eddf 6a97 	vldr	s13, [pc, #604]	; 8003530 <make_curve+0x2f0>
 80032d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	if (fScale < 1) {
 80032dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80032e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	d51f      	bpl.n	800332e <make_curve+0xee>
		scale_factor = trunc(1/fScale)+1; // divisor
 80032ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80032f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032fa:	ee16 0a90 	vmov	r0, s13
 80032fe:	f7fd f943 	bl	8000588 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	ec43 2b10 	vmov	d0, r2, r3
 800330a:	f00d fc81 	bl	8010c10 <trunc>
 800330e:	ec51 0b10 	vmov	r0, r1, d0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	4b87      	ldr	r3, [pc, #540]	; (8003534 <make_curve+0x2f4>)
 8003318:	f7fc ffd8 	bl	80002cc <__adddf3>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	f7fd fc38 	bl	8000b98 <__aeabi_d2iz>
 8003328:	4603      	mov	r3, r0
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	e010      	b.n	8003350 <make_curve+0x110>
	} else {
		scale_factor = trunc(fScale);	// multiplier
 800332e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003330:	f7fd f92a 	bl	8000588 <__aeabi_f2d>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	ec43 2b10 	vmov	d0, r2, r3
 800333c:	f00d fc68 	bl	8010c10 <trunc>
 8003340:	ec53 2b10 	vmov	r2, r3, d0
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f7fd fc26 	bl	8000b98 <__aeabi_d2iz>
 800334c:	4603      	mov	r3, r0
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	curve_x_size = display_align_curves() / 2;		// half the data points to fit screen size
 8003350:	f7ff fe06 	bl	8002f60 <display_align_curves>
 8003354:	4603      	mov	r3, r0
 8003356:	0fda      	lsrs	r2, r3, #31
 8003358:	4413      	add	r3, r2
 800335a:	105b      	asrs	r3, r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <make_curve+0x2f8>)
 8003360:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8003362:	4b72      	ldr	r3, [pc, #456]	; (800352c <make_curve+0x2ec>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	f1c3 0301 	rsb	r3, r3, #1
 800336e:	633b      	str	r3, [r7, #48]	; 0x30

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8003370:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003380:	d567      	bpl.n	8003452 <make_curve+0x212>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	496d      	ldr	r1, [pc, #436]	; (800353c <make_curve+0x2fc>)
 8003386:	f44f 7248 	mov.w	r2, #800	; 0x320
 800338a:	fb03 f202 	mul.w	r2, r3, r2
 800338e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003390:	4413      	add	r3, r2
 8003392:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003396:	461c      	mov	r4, r3
 8003398:	79fa      	ldrb	r2, [r7, #7]
 800339a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339c:	3301      	adds	r3, #1
 800339e:	4967      	ldr	r1, [pc, #412]	; (800353c <make_curve+0x2fc>)
 80033a0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80033a4:	fb00 f202 	mul.w	r2, r0, r2
 80033a8:	4413      	add	r3, r2
 80033aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80033ae:	4423      	add	r3, r4
 80033b0:	0fda      	lsrs	r2, r3, #31
 80033b2:	4413      	add	r3, r2
 80033b4:	105b      	asrs	r3, r3, #1
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 80033b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4293      	cmp	r3, r2
 80033d0:	bfb8      	it	lt
 80033d2:	4613      	movlt	r3, r2
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <make_curve+0x300>)
 80033d6:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 80033d8:	2301      	movs	r3, #1
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
 80033dc:	e032      	b.n	8003444 <make_curve+0x204>
			src_idx+=2;
 80033de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e0:	3302      	adds	r3, #2
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	4955      	ldr	r1, [pc, #340]	; (800353c <make_curve+0x2fc>)
 80033e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80033ec:	fb03 f202 	mul.w	r2, r3, r2
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	4413      	add	r3, r2
 80033f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80033f8:	461c      	mov	r4, r3
 80033fa:	79fa      	ldrb	r2, [r7, #7]
 80033fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fe:	3301      	adds	r3, #1
 8003400:	494e      	ldr	r1, [pc, #312]	; (800353c <make_curve+0x2fc>)
 8003402:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003406:	fb00 f202 	mul.w	r2, r0, r2
 800340a:	4413      	add	r3, r2
 800340c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003410:	4423      	add	r3, r4
 8003412:	0fda      	lsrs	r2, r3, #31
 8003414:	4413      	add	r3, r2
 8003416:	105b      	asrs	r3, r3, #1
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 800341a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	1ad2      	subs	r2, r2, r3
 8003420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003422:	fb92 f3f3 	sdiv	r3, r2, r3
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	429a      	cmp	r2, r3
 8003432:	bfb8      	it	lt
 8003434:	461a      	movlt	r2, r3
 8003436:	4942      	ldr	r1, [pc, #264]	; (8003540 <make_curve+0x300>)
 8003438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800343e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003440:	3301      	adds	r3, #1
 8003442:	643b      	str	r3, [r7, #64]	; 0x40
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <make_curve+0x2f8>)
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344c:	4293      	cmp	r3, r2
 800344e:	dbc6      	blt.n	80033de <make_curve+0x19e>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 8003450:	e066      	b.n	8003520 <make_curve+0x2e0>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4939      	ldr	r1, [pc, #228]	; (800353c <make_curve+0x2fc>)
 8003456:	f44f 7248 	mov.w	r2, #800	; 0x320
 800345a:	fb03 f202 	mul.w	r2, r3, r2
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	4413      	add	r3, r2
 8003462:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003466:	461c      	mov	r4, r3
 8003468:	79fa      	ldrb	r2, [r7, #7]
 800346a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346c:	3301      	adds	r3, #1
 800346e:	4933      	ldr	r1, [pc, #204]	; (800353c <make_curve+0x2fc>)
 8003470:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003474:	fb00 f202 	mul.w	r2, r0, r2
 8003478:	4413      	add	r3, r2
 800347a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800347e:	4423      	add	r3, r4
 8003480:	0fda      	lsrs	r2, r3, #31
 8003482:	4413      	add	r3, r2
 8003484:	105b      	asrs	r3, r3, #1
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	1ad2      	subs	r2, r2, r3
 800348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	4293      	cmp	r3, r2
 80034a0:	bfb8      	it	lt
 80034a2:	4613      	movlt	r3, r2
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <make_curve+0x300>)
 80034a6:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 80034a8:	2301      	movs	r3, #1
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ac:	e032      	b.n	8003514 <make_curve+0x2d4>
			src_idx+=2;
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	3302      	adds	r3, #2
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4921      	ldr	r1, [pc, #132]	; (800353c <make_curve+0x2fc>)
 80034b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80034bc:	fb03 f202 	mul.w	r2, r3, r2
 80034c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c2:	4413      	add	r3, r2
 80034c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80034c8:	461c      	mov	r4, r3
 80034ca:	79fa      	ldrb	r2, [r7, #7]
 80034cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ce:	3301      	adds	r3, #1
 80034d0:	491a      	ldr	r1, [pc, #104]	; (800353c <make_curve+0x2fc>)
 80034d2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80034d6:	fb00 f202 	mul.w	r2, r0, r2
 80034da:	4413      	add	r3, r2
 80034dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80034e0:	4423      	add	r3, r4
 80034e2:	0fda      	lsrs	r2, r3, #31
 80034e4:	4413      	add	r3, r2
 80034e6:	105b      	asrs	r3, r3, #1
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 80034ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	1ad2      	subs	r2, r2, r3
 80034f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	623b      	str	r3, [r7, #32]
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	429a      	cmp	r2, r3
 8003502:	bfb8      	it	lt
 8003504:	461a      	movlt	r2, r3
 8003506:	490e      	ldr	r1, [pc, #56]	; (8003540 <make_curve+0x300>)
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	3301      	adds	r3, #1
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <make_curve+0x2f8>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351c:	4293      	cmp	r3, r2
 800351e:	dbc6      	blt.n	80034ae <make_curve+0x26e>
}
 8003520:	bf00      	nop
 8003522:	3754      	adds	r7, #84	; 0x54
 8003524:	46bd      	mov	sp, r7
 8003526:	bd90      	pop	{r4, r7, pc}
 8003528:	2000023c 	.word	0x2000023c
 800352c:	20000008 	.word	0x20000008
 8003530:	457ff000 	.word	0x457ff000
 8003534:	3ff00000 	.word	0x3ff00000
 8003538:	200006ce 	.word	0x200006ce
 800353c:	200006d0 	.word	0x200006d0
 8003540:	20000384 	.word	0x20000384

08003544 <display_show_curves>:

/*
 * @brief   Display curves for voltage + selected current channels on TFT display
 */
void display_show_curves(void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0

	make_curve(ADC_CH_V, 0);
 8003548:	2100      	movs	r1, #0
 800354a:	2000      	movs	r0, #0
 800354c:	f7ff fe78 	bl	8003240 <make_curve>
	draw_curve(channel_colour[ADC_CH_V], 0, (sample_buf_meta[ADC_CH_V].zero_cross_pos >= 0));
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <display_show_curves+0x6c>)
 8003552:	8818      	ldrh	r0, [r3, #0]
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <display_show_curves+0x70>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	43db      	mvns	r3, r3
 800355a:	0fdb      	lsrs	r3, r3, #31
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	2100      	movs	r1, #0
 8003562:	f7ff fd81 	bl	8003068 <draw_curve>

	switch(display_channel) {
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <display_show_curves+0x74>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d01a      	beq.n	80035a4 <display_show_curves+0x60>
 800356e:	2b02      	cmp	r3, #2
 8003570:	dc1b      	bgt.n	80035aa <display_show_curves+0x66>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <display_show_curves+0x36>
 8003576:	2b01      	cmp	r3, #1
	case I2:
		if ((NUM_I_SENSORS > 1)&&(!sample_buf_meta[ADC_CH_I2].value_is_zero)) {
			make_curve(ADC_CH_I2, 1);
			draw_curve(channel_colour[ADC_CH_I2], 1, (sample_buf_meta[ADC_CH_I2].zero_cross_pos >= 0));
		}
		break;
 8003578:	e017      	b.n	80035aa <display_show_curves+0x66>
		if (!sample_buf_meta[ADC_CH_I1].value_is_zero) {
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <display_show_curves+0x70>)
 800357c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <display_show_curves+0x64>
			make_curve(ADC_CH_I1, 1);
 8003584:	2101      	movs	r1, #1
 8003586:	2003      	movs	r0, #3
 8003588:	f7ff fe5a 	bl	8003240 <make_curve>
			draw_curve(channel_colour[ADC_CH_I1], 1, (sample_buf_meta[ADC_CH_I1].zero_cross_pos >= 0));
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <display_show_curves+0x6c>)
 800358e:	88d8      	ldrh	r0, [r3, #6]
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <display_show_curves+0x70>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	43db      	mvns	r3, r3
 8003596:	0fdb      	lsrs	r3, r3, #31
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	2101      	movs	r1, #1
 800359e:	f7ff fd63 	bl	8003068 <draw_curve>
		break;
 80035a2:	e001      	b.n	80035a8 <display_show_curves+0x64>
	case I3:
		if ((NUM_I_SENSORS > 2)&&(!sample_buf_meta[ADC_CH_I3].value_is_zero)) {
			make_curve(ADC_CH_I3, 1);
			draw_curve(channel_colour[ADC_CH_I3], 1, (sample_buf_meta[ADC_CH_I3].zero_cross_pos >= 0));
		}
		break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <display_show_curves+0x66>
		break;
 80035a8:	bf00      	nop
	}
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000000 	.word	0x20000000
 80035b4:	2000023c 	.word	0x2000023c
 80035b8:	20000381 	.word	0x20000381

080035bc <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d81b      	bhi.n	8003604 <display_show_curve+0x48>

	make_curve(bufnum, 1);
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fe35 	bl	8003240 <make_curve>
	draw_curve(channel_colour[bufnum], 0, (sample_buf_meta[bufnum].measurements_valid != 0));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <display_show_curve+0x50>)
 80035da:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80035de:	79fa      	ldrb	r2, [r7, #7]
 80035e0:	490b      	ldr	r1, [pc, #44]	; (8003610 <display_show_curve+0x54>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	330c      	adds	r3, #12
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	2100      	movs	r1, #0
 80035fe:	f7ff fd33 	bl	8003068 <draw_curve>
 8003602:	e000      	b.n	8003606 <display_show_curve+0x4a>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8003604:	bf00      	nop

}
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000000 	.word	0x20000000
 8003610:	2000023c 	.word	0x2000023c

08003614 <ee24_isConnected>:

/*
 * @ brief  Check if EEPROM device is present
 */
bool ee24_isConnected(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 200)!=HAL_OK)
 8003618:	23c8      	movs	r3, #200	; 0xc8
 800361a:	2202      	movs	r2, #2
 800361c:	21a0      	movs	r1, #160	; 0xa0
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <ee24_isConnected+0x20>)
 8003620:	f005 fea6 	bl	8009370 <HAL_I2C_IsDeviceReady>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <ee24_isConnected+0x1a>
    return false;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <ee24_isConnected+0x1c>

  return true;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20002148 	.word	0x20002148

08003638 <ee24_write_word>:

/*
 * @ brief  Blocking call to write one word to EEPROM
 */
bool ee24_write_word(uint16_t address, uint16_t *data)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af04      	add	r7, sp, #16
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <ee24_write_word+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <ee24_write_word+0x18>
 800364c:	2300      	movs	r3, #0
 800364e:	e01a      	b.n	8003686 <ee24_write_word+0x4e>
	ee24_lock = 1;
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <ee24_write_word+0x58>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK)
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	2364      	movs	r3, #100	; 0x64
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	2302      	movs	r3, #2
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2301      	movs	r3, #1
 8003666:	21a0      	movs	r1, #160	; 0xa0
 8003668:	480a      	ldr	r0, [pc, #40]	; (8003694 <ee24_write_word+0x5c>)
 800366a:	f005 fb61 	bl	8008d30 <HAL_I2C_Mem_Write>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <ee24_write_word+0x46>
	//if (HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <ee24_write_word+0x58>)
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
		return false;
 800367a:	2300      	movs	r3, #0
 800367c:	e003      	b.n	8003686 <ee24_write_word+0x4e>
	}
	ee24_lock = 0;
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <ee24_write_word+0x58>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
	return true;
 8003684:	2301      	movs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20001ff6 	.word	0x20001ff6
 8003694:	20002148 	.word	0x20002148

08003698 <ee24_read_word>:

/*
 * @ brief  Blocking call to read one word from EEPROM
 */
bool ee24_read_word(uint8_t address, uint16_t *data)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af04      	add	r7, sp, #16
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <ee24_read_word+0x58>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <ee24_read_word+0x18>
 80036ac:	2300      	movs	r3, #0
 80036ae:	e01b      	b.n	80036e8 <ee24_read_word+0x50>
	ee24_lock = 1;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <ee24_read_word+0x58>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK )
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	2364      	movs	r3, #100	; 0x64
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	2302      	movs	r3, #2
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	21a0      	movs	r1, #160	; 0xa0
 80036ca:	480a      	ldr	r0, [pc, #40]	; (80036f4 <ee24_read_word+0x5c>)
 80036cc:	f005 fc2a 	bl	8008f24 <HAL_I2C_Mem_Read>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <ee24_read_word+0x48>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <ee24_read_word+0x58>)
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
		return false;
 80036dc:	2300      	movs	r3, #0
 80036de:	e003      	b.n	80036e8 <ee24_read_word+0x50>
	}
	ee24_lock = 0;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <ee24_read_word+0x58>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
	return true;
 80036e6:	2301      	movs	r3, #1
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20001ff6 	.word	0x20001ff6
 80036f4:	20002148 	.word	0x20002148

080036f8 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80036fc:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8003700:	490d      	ldr	r1, [pc, #52]	; (8003738 <start_adcs+0x40>)
 8003702:	480e      	ldr	r0, [pc, #56]	; (800373c <start_adcs+0x44>)
 8003704:	f003 ff04 	bl	8007510 <HAL_ADC_Start_DMA>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 800370e:	480c      	ldr	r0, [pc, #48]	; (8003740 <start_adcs+0x48>)
 8003710:	f001 fbe6 	bl	8004ee0 <term_print>
  	  Error_Handler();
 8003714:	f000 ffa2 	bl	800465c <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003718:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800371c:	4909      	ldr	r1, [pc, #36]	; (8003744 <start_adcs+0x4c>)
 800371e:	480a      	ldr	r0, [pc, #40]	; (8003748 <start_adcs+0x50>)
 8003720:	f003 fef6 	bl	8007510 <HAL_ADC_Start_DMA>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 800372a:	4808      	ldr	r0, [pc, #32]	; (800374c <start_adcs+0x54>)
 800372c:	f001 fbd8 	bl	8004ee0 <term_print>
 	  Error_Handler();
 8003730:	f000 ff94 	bl	800465c <Error_Handler>
	}
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200024d8 	.word	0x200024d8
 800373c:	20001ff8 	.word	0x20001ff8
 8003740:	08010f88 	.word	0x08010f88
 8003744:	20003f18 	.word	0x20003f18
 8003748:	20002040 	.word	0x20002040
 800374c:	08010fa4 	.word	0x08010fa4

08003750 <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	460a      	mov	r2, r1
 800375a:	80fb      	strh	r3, [r7, #6]
 800375c:	4613      	mov	r3, r2
 800375e:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003766:	4293      	cmp	r3, r2
 8003768:	d803      	bhi.n	8003772 <adjust_TIM2_period+0x22>
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003770:	d205      	bcs.n	800377e <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	4619      	mov	r1, r3
 8003776:	4808      	ldr	r0, [pc, #32]	; (8003798 <adjust_TIM2_period+0x48>)
 8003778:	f001 fbb2 	bl	8004ee0 <term_print>
		return;
 800377c:	e008      	b.n	8003790 <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 800377e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4619      	mov	r1, r3
 800378a:	4804      	ldr	r0, [pc, #16]	; (800379c <adjust_TIM2_period+0x4c>)
 800378c:	f001 fba8 	bl	8004ee0 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	08010fc0 	.word	0x08010fc0
 800379c:	08010fe0 	.word	0x08010fe0

080037a0 <version_change>:

/*
 * @brief  Function to manage version change and update stored parameters
 */
void version_change(uint8_t old_major, uint8_t old_minor) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	460a      	mov	r2, r1
 80037aa:	71fb      	strb	r3, [r7, #7]
 80037ac:	4613      	mov	r3, r2
 80037ae:	71bb      	strb	r3, [r7, #6]
	// update version number in EEPROM
	eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <version_change+0x40>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <version_change+0x40>)
 80037b8:	2202      	movs	r2, #2
 80037ba:	705a      	strb	r2, [r3, #1]
	if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 80037bc:	4908      	ldr	r1, [pc, #32]	; (80037e0 <version_change+0x40>)
 80037be:	2000      	movs	r0, #0
 80037c0:	f7ff ff3a 	bl	8003638 <ee24_write_word>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <version_change+0x36>
		term_print("Error: EEPROM write failed\r\n");
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <version_change+0x44>)
 80037d2:	f001 fb85 	bl	8004ee0 <term_print>
	}
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200024ac 	.word	0x200024ac
 80037e4:	08010ff0 	.word	0x08010ff0

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ee:	f003 fdb5 	bl	800735c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f2:	f000 fae1 	bl	8003db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f6:	f000 fd53 	bl	80042a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80037fa:	f000 fd13 	bl	8004224 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80037fe:	f000 fcbd 	bl	800417c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003802:	f000 fc6f 	bl	80040e4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003806:	f000 fb49 	bl	8003e9c <MX_ADC1_Init>
  MX_ADC2_Init();
 800380a:	f000 fba7 	bl	8003f5c <MX_ADC2_Init>
  MX_SPI2_Init();
 800380e:	f000 fc33 	bl	8004078 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8003812:	f000 fcdd 	bl	80041d0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8003816:	f000 fc01 	bl	800401c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 800381a:	f7fe fee5 	bl	80025e8 <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 800381e:	2201      	movs	r2, #1
 8003820:	499c      	ldr	r1, [pc, #624]	; (8003a94 <main+0x2ac>)
 8003822:	489d      	ldr	r0, [pc, #628]	; (8003a98 <main+0x2b0>)
 8003824:	f008 faab 	bl	800bd7e <HAL_UART_Receive_IT>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <main+0x4a>
    Error_Handler();
 800382e:	f000 ff15 	bl	800465c <Error_Handler>
      Error_Handler();
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8003832:	489a      	ldr	r0, [pc, #616]	; (8003a9c <main+0x2b4>)
 8003834:	f007 fd88 	bl	800b348 <HAL_TIM_Base_Start_IT>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <main+0x5a>
     Error_Handler();
 800383e:	f000 ff0d 	bl	800465c <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 8003842:	f7ff ff59 	bl	80036f8 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 8003846:	f7fe fef1 	bl	800262c <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 800384a:	f003 fded 	bl	8007428 <HAL_GetTick>
 800384e:	4603      	mov	r3, r0
 8003850:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003854:	4a92      	ldr	r2, [pc, #584]	; (8003aa0 <main+0x2b8>)
 8003856:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8003858:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <main+0x2bc>)
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	2302      	movs	r3, #2
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	4a91      	ldr	r2, [pc, #580]	; (8003aa8 <main+0x2c0>)
 8003864:	4991      	ldr	r1, [pc, #580]	; (8003aac <main+0x2c4>)
 8003866:	4892      	ldr	r0, [pc, #584]	; (8003ab0 <main+0x2c8>)
 8003868:	f009 ff70 	bl	800d74c <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 800386c:	4890      	ldr	r0, [pc, #576]	; (8003ab0 <main+0x2c8>)
 800386e:	f7fc fd1f 	bl	80002b0 <strlen>
 8003872:	4603      	mov	r3, r0
 8003874:	b29a      	uxth	r2, r3
 8003876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800387a:	498d      	ldr	r1, [pc, #564]	; (8003ab0 <main+0x2c8>)
 800387c:	4886      	ldr	r0, [pc, #536]	; (8003a98 <main+0x2b0>)
 800387e:	f008 f9ec 	bl	800bc5a <HAL_UART_Transmit>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <main+0xa4>
	  Error_Handler();
 8003888:	f000 fee8 	bl	800465c <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 800388c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	4619      	mov	r1, r3
 8003894:	4887      	ldr	r0, [pc, #540]	; (8003ab4 <main+0x2cc>)
 8003896:	f001 fb23 	bl	8004ee0 <term_print>
  if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
  	  Error_Handler();
  }*/
#endif

  if (!ee24_isConnected()) {
 800389a:	f7ff febb 	bl	8003614 <ee24_isConnected>
 800389e:	4603      	mov	r3, r0
 80038a0:	f083 0301 	eor.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <main+0xca>
	  term_print("Error: EEPROM not found\r\n");
 80038aa:	4883      	ldr	r0, [pc, #524]	; (8003ab8 <main+0x2d0>)
 80038ac:	f001 fb18 	bl	8004ee0 <term_print>
 80038b0:	e049      	b.n	8003946 <main+0x15e>
  } else {
	  if (ee24_read_word(EEPROM_ADDR_VERSION, (uint16_t *) &eeprom_buf) != true) {
 80038b2:	4982      	ldr	r1, [pc, #520]	; (8003abc <main+0x2d4>)
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7ff feef 	bl	8003698 <ee24_read_word>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <main+0xe6>
		  term_print("Error: EEPROM read error\r\n");
 80038c6:	487e      	ldr	r0, [pc, #504]	; (8003ac0 <main+0x2d8>)
 80038c8:	f001 fb0a 	bl	8004ee0 <term_print>
 80038cc:	e03b      	b.n	8003946 <main+0x15e>
	  } else {
		term_print("EEPROM Version: V%d.%02d\r\n", eeprom_buf[0], eeprom_buf[1]);
 80038ce:	4b7b      	ldr	r3, [pc, #492]	; (8003abc <main+0x2d4>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	4b79      	ldr	r3, [pc, #484]	; (8003abc <main+0x2d4>)
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	4879      	ldr	r0, [pc, #484]	; (8003ac4 <main+0x2dc>)
 80038e0:	f001 fafe 	bl	8004ee0 <term_print>
		if ((eeprom_buf[0] == 0xFF) && (eeprom_buf[1] == 0xFF)) {		// new/blank EEPROM
 80038e4:	4b75      	ldr	r3, [pc, #468]	; (8003abc <main+0x2d4>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2bff      	cmp	r3, #255	; 0xff
 80038ec:	d117      	bne.n	800391e <main+0x136>
 80038ee:	4b73      	ldr	r3, [pc, #460]	; (8003abc <main+0x2d4>)
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d112      	bne.n	800391e <main+0x136>
			eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80038f8:	4b70      	ldr	r3, [pc, #448]	; (8003abc <main+0x2d4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <main+0x2d4>)
 8003900:	2202      	movs	r2, #2
 8003902:	705a      	strb	r2, [r3, #1]
			if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 8003904:	496d      	ldr	r1, [pc, #436]	; (8003abc <main+0x2d4>)
 8003906:	2000      	movs	r0, #0
 8003908:	f7ff fe96 	bl	8003638 <ee24_write_word>
 800390c:	4603      	mov	r3, r0
 800390e:	f083 0301 	eor.w	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <main+0x136>
				term_print("Error: EEPROM write failed\r\n");
 8003918:	486b      	ldr	r0, [pc, #428]	; (8003ac8 <main+0x2e0>)
 800391a:	f001 fae1 	bl	8004ee0 <term_print>
			}
		}
		// Detect version change
		if ((eeprom_buf[0]!=VERSION_MAJOR) || (eeprom_buf[0]!=VERSION_MINOR)) {
 800391e:	4b67      	ldr	r3, [pc, #412]	; (8003abc <main+0x2d4>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <main+0x14a>
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <main+0x2d4>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d009      	beq.n	8003946 <main+0x15e>
			version_change(eeprom_buf[0], eeprom_buf[1]);
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <main+0x2d4>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4a60      	ldr	r2, [pc, #384]	; (8003abc <main+0x2d4>)
 800393a:	7852      	ldrb	r2, [r2, #1]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff2d 	bl	80037a0 <version_change>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8003946:	f003 fd6f 	bl	8007428 <HAL_GetTick>
 800394a:	4603      	mov	r3, r0
 800394c:	3364      	adds	r3, #100	; 0x64
 800394e:	4a5f      	ldr	r2, [pc, #380]	; (8003acc <main+0x2e4>)
 8003950:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 8003952:	f003 fd69 	bl	8007428 <HAL_GetTick>
 8003956:	4603      	mov	r3, r0
 8003958:	33c8      	adds	r3, #200	; 0xc8
 800395a:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <main+0x2e8>)
 800395c:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 800395e:	f003 fd63 	bl	8007428 <HAL_GetTick>
 8003962:	4603      	mov	r3, r0
 8003964:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <main+0x2ec>)
 8003966:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 8003968:	4b5a      	ldr	r3, [pc, #360]	; (8003ad4 <main+0x2ec>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b5a      	ldr	r3, [pc, #360]	; (8003ad8 <main+0x2f0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d21b      	bcs.n	80039ac <main+0x1c4>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <main+0x2ec>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3364      	adds	r3, #100	; 0x64
 800397a:	4a54      	ldr	r2, [pc, #336]	; (8003acc <main+0x2e4>)
 800397c:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 800397e:	4b57      	ldr	r3, [pc, #348]	; (8003adc <main+0x2f4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <main+0x1ae>
 8003986:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <main+0x2ec>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800398e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003992:	4a52      	ldr	r2, [pc, #328]	; (8003adc <main+0x2f4>)
 8003994:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 8003996:	4b4f      	ldr	r3, [pc, #316]	; (8003ad4 <main+0x2ec>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800399e:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <main+0x2f8>)
 80039a0:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80039a2:	4b4c      	ldr	r3, [pc, #304]	; (8003ad4 <main+0x2ec>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	33c8      	adds	r3, #200	; 0xc8
 80039a8:	4a49      	ldr	r2, [pc, #292]	; (8003ad0 <main+0x2e8>)
 80039aa:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80039ac:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <main+0x2ec>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <main+0x2f0>)
 80039b2:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 80039b4:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <main+0x2ec>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <main+0x2e8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d316      	bcc.n	80039ee <main+0x206>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80039c0:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <main+0x2e8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	33c8      	adds	r3, #200	; 0xc8
 80039c6:	4a42      	ldr	r2, [pc, #264]	; (8003ad0 <main+0x2e8>)
 80039c8:	6013      	str	r3, [r2, #0]
		calc_measurements();
 80039ca:	f7fe f869 	bl	8001aa0 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 80039ce:	2140      	movs	r1, #64	; 0x40
 80039d0:	4844      	ldr	r0, [pc, #272]	; (8003ae4 <main+0x2fc>)
 80039d2:	f005 f805 	bl	80089e0 <HAL_GPIO_ReadPin>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <main+0x206>
 80039dc:	4b42      	ldr	r3, [pc, #264]	; (8003ae8 <main+0x300>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <main+0x206>
			display_update_meter(display_screen);
 80039e4:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <main+0x300>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe ffeb 	bl	80029c4 <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <main+0x2ec>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <main+0x2e4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	f0c0 8133 	bcc.w	8003c62 <main+0x47a>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <main+0x2ec>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3364      	adds	r3, #100	; 0x64
 8003a02:	4a32      	ldr	r2, [pc, #200]	; (8003acc <main+0x2e4>)
 8003a04:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <main+0x2b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <main+0x24e>
			if (now_ticks >= display_splash_ticks) {
 8003a0e:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <main+0x2ec>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <main+0x2b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d30d      	bcc.n	8003a36 <main+0x24e>
				display_splash_ticks = 0;
 8003a1a:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <main+0x2b8>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8003a20:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <main+0x300>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <main+0x2ec>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003a2e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003a32:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <main+0x2f4>)
 8003a34:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <main+0x304>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d06c      	beq.n	8003b1a <main+0x332>
			if (esp_mode) {
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <main+0x308>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05f      	beq.n	8003b08 <main+0x320>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <main+0x30c>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b7e      	cmp	r3, #126	; 0x7e
 8003a50:	d106      	bne.n	8003a60 <main+0x278>
					esp_mode = 0;
 8003a52:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <main+0x308>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 8003a58:	4827      	ldr	r0, [pc, #156]	; (8003af8 <main+0x310>)
 8003a5a:	f001 fa41 	bl	8004ee0 <term_print>
 8003a5e:	e056      	b.n	8003b0e <main+0x326>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <main+0x30c>)
 8003a62:	4926      	ldr	r1, [pc, #152]	; (8003afc <main+0x314>)
 8003a64:	4812      	ldr	r0, [pc, #72]	; (8003ab0 <main+0x2c8>)
 8003a66:	f009 fe71 	bl	800d74c <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8003a6a:	4811      	ldr	r0, [pc, #68]	; (8003ab0 <main+0x2c8>)
 8003a6c:	f7fc fc20 	bl	80002b0 <strlen>
 8003a70:	4603      	mov	r3, r0
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a78:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <main+0x2c8>)
 8003a7a:	4821      	ldr	r0, [pc, #132]	; (8003b00 <main+0x318>)
 8003a7c:	f008 f8ed 	bl	800bc5a <HAL_UART_Transmit>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <main+0x2a2>
						Error_Handler();
 8003a86:	f000 fde9 	bl	800465c <Error_Handler>
					}
					term_print("%s", msg_buf);
 8003a8a:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <main+0x2c8>)
 8003a8c:	481d      	ldr	r0, [pc, #116]	; (8003b04 <main+0x31c>)
 8003a8e:	f001 fa27 	bl	8004ee0 <term_print>
 8003a92:	e03c      	b.n	8003b0e <main+0x326>
 8003a94:	20002426 	.word	0x20002426
 8003a98:	2000229c 	.word	0x2000229c
 8003a9c:	20002254 	.word	0x20002254
 8003aa0:	200080d4 	.word	0x200080d4
 8003aa4:	08015480 	.word	0x08015480
 8003aa8:	0801547c 	.word	0x0801547c
 8003aac:	08011010 	.word	0x08011010
 8003ab0:	20002324 	.word	0x20002324
 8003ab4:	08011024 	.word	0x08011024
 8003ab8:	08011034 	.word	0x08011034
 8003abc:	200024ac 	.word	0x200024ac
 8003ac0:	08011050 	.word	0x08011050
 8003ac4:	0801106c 	.word	0x0801106c
 8003ac8:	08010ff0 	.word	0x08010ff0
 8003acc:	200080e8 	.word	0x200080e8
 8003ad0:	200080e4 	.word	0x200080e4
 8003ad4:	200080dc 	.word	0x200080dc
 8003ad8:	200080e0 	.word	0x200080e0
 8003adc:	200080cc 	.word	0x200080cc
 8003ae0:	200080d8 	.word	0x200080d8
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	200024c4 	.word	0x200024c4
 8003aec:	200024a8 	.word	0x200024a8
 8003af0:	200024c1 	.word	0x200024c1
 8003af4:	20002428 	.word	0x20002428
 8003af8:	08011088 	.word	0x08011088
 8003afc:	080110a4 	.word	0x080110a4
 8003b00:	200022e0 	.word	0x200022e0
 8003b04:	080110ac 	.word	0x080110ac
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 8003b08:	4893      	ldr	r0, [pc, #588]	; (8003d58 <main+0x570>)
 8003b0a:	f7fe fd4d 	bl	80025a8 <CMD_Handler>
			}
			cli_rx_count = 0;
 8003b0e:	4b93      	ldr	r3, [pc, #588]	; (8003d5c <main+0x574>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 8003b14:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <main+0x578>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 8003b1a:	4b92      	ldr	r3, [pc, #584]	; (8003d64 <main+0x57c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <main+0x344>
		  adc_restart = 0;
 8003b22:	4b90      	ldr	r3, [pc, #576]	; (8003d64 <main+0x57c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8003b28:	f7ff fde6 	bl	80036f8 <start_adcs>
		}

		if (new_time_period) {
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	; (8003d68 <main+0x580>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <main+0x35e>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8003b34:	4b8c      	ldr	r3, [pc, #560]	; (8003d68 <main+0x580>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fe08 	bl	8003750 <adjust_TIM2_period>
		  new_time_period = 0;
 8003b40:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <main+0x580>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8003b46:	4b89      	ldr	r3, [pc, #548]	; (8003d6c <main+0x584>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00f      	beq.n	8003b70 <main+0x388>
			display_screen++;
 8003b50:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <main+0x588>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b85      	ldr	r3, [pc, #532]	; (8003d70 <main+0x588>)
 8003b5a:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 8003b5c:	4b84      	ldr	r3, [pc, #528]	; (8003d70 <main+0x588>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d902      	bls.n	8003b6a <main+0x382>
				display_screen = 1;
 8003b64:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <main+0x588>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 8003b6a:	4b80      	ldr	r3, [pc, #512]	; (8003d6c <main+0x584>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 8003b70:	4b80      	ldr	r3, [pc, #512]	; (8003d74 <main+0x58c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <main+0x3a8>
 8003b78:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <main+0x590>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b7d      	ldr	r3, [pc, #500]	; (8003d74 <main+0x58c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d305      	bcc.n	8003b90 <main+0x3a8>
			Displ_BackLight('0');
 8003b84:	2030      	movs	r0, #48	; 0x30
 8003b86:	f002 fec9 	bl	800691c <Displ_BackLight>
	  		display_off_ticks = 0;
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <main+0x58c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 8003b90:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <main+0x594>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02b      	beq.n	8003bf0 <main+0x408>
			if (tft_display == 9) {
 8003b98:	4b78      	ldr	r3, [pc, #480]	; (8003d7c <main+0x594>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	d10e      	bne.n	8003bbe <main+0x3d6>
				term_print("Running TFT performance test ...\r\n");
 8003ba0:	4877      	ldr	r0, [pc, #476]	; (8003d80 <main+0x598>)
 8003ba2:	f001 f99d 	bl	8004ee0 <term_print>
				Displ_BackLight('1');
 8003ba6:	2031      	movs	r0, #49	; 0x31
 8003ba8:	f002 feb8 	bl	800691c <Displ_BackLight>
				Displ_TestAll();
 8003bac:	f003 fb80 	bl	80072b0 <Displ_TestAll>
				Displ_BackLight('0');
 8003bb0:	2030      	movs	r0, #48	; 0x30
 8003bb2:	f002 feb3 	bl	800691c <Displ_BackLight>
				term_print("....completed\r\n");
 8003bb6:	4873      	ldr	r0, [pc, #460]	; (8003d84 <main+0x59c>)
 8003bb8:	f001 f992 	bl	8004ee0 <term_print>
 8003bbc:	e015      	b.n	8003bea <main+0x402>
			} else {
				if (tft_display == 1) {
 8003bbe:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <main+0x594>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d103      	bne.n	8003bce <main+0x3e6>
					Displ_BackLight('0');
 8003bc6:	2030      	movs	r0, #48	; 0x30
 8003bc8:	f002 fea8 	bl	800691c <Displ_BackLight>
 8003bcc:	e00d      	b.n	8003bea <main+0x402>
				} else {
					Displ_BackLight('1');
 8003bce:	2031      	movs	r0, #49	; 0x31
 8003bd0:	f002 fea4 	bl	800691c <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003bd4:	f003 fc28 	bl	8007428 <HAL_GetTick>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003bde:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003be2:	4a64      	ldr	r2, [pc, #400]	; (8003d74 <main+0x58c>)
 8003be4:	6013      	str	r3, [r2, #0]
					display_update_mask();
 8003be6:	f7fe ff5b 	bl	8002aa0 <display_update_mask>
				}
			}
		tft_display = 0;
 8003bea:	4b64      	ldr	r3, [pc, #400]	; (8003d7c <main+0x594>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 8003bf0:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <main+0x5a0>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <main+0x434>
			display_activate = 0;
 8003bfa:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <main+0x5a0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 8003c00:	f7fe ff4e 	bl	8002aa0 <display_update_mask>
			Displ_BackLight('1');
 8003c04:	2031      	movs	r0, #49	; 0x31
 8003c06:	f002 fe89 	bl	800691c <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003c0a:	f003 fc0d 	bl	8007428 <HAL_GetTick>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003c14:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003c18:	4a56      	ldr	r2, [pc, #344]	; (8003d74 <main+0x58c>)
 8003c1a:	6013      	str	r3, [r2, #0]
		}

		if (touch_action) {			// touch screen
 8003c1c:	4b5b      	ldr	r3, [pc, #364]	; (8003d8c <main+0x5a4>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01d      	beq.n	8003c62 <main+0x47a>
			touch_action = 0;
 8003c26:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <main+0x5a4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
			if (now_ticks < touch_debounce_ticks){
 8003c2c:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <main+0x590>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b57      	ldr	r3, [pc, #348]	; (8003d90 <main+0x5a8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d314      	bcc.n	8003c62 <main+0x47a>
				;	// do nothing
			} else {
				touch_debounce_ticks = HAL_GetTick() + TOUCH_DEBOUNCE_TIME;
 8003c38:	f003 fbf6 	bl	8007428 <HAL_GetTick>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003c42:	4a53      	ldr	r2, [pc, #332]	; (8003d90 <main+0x5a8>)
 8003c44:	6013      	str	r3, [r2, #0]
				// if Backlight is OFF
				if (HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_RESET) {
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	4852      	ldr	r0, [pc, #328]	; (8003d94 <main+0x5ac>)
 8003c4a:	f004 fec9 	bl	80089e0 <HAL_GPIO_ReadPin>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <main+0x474>
					display_activate = 1;		// activate backlight
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <main+0x5a0>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <main+0x47a>
				} else {		// backlight is already on -> change display
					display_change = 1;
 8003c5c:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <main+0x584>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8003c62:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <main+0x5b0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	dc0b      	bgt.n	8003c82 <main+0x49a>
 8003c6a:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <main+0x5b4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	dc07      	bgt.n	8003c82 <main+0x49a>
 8003c72:	4b4b      	ldr	r3, [pc, #300]	; (8003da0 <main+0x5b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	dc03      	bgt.n	8003c82 <main+0x49a>
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	; (8003da4 <main+0x5bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	dd1b      	ble.n	8003cba <main+0x4d2>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8003c82:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <main+0x5b0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	dd02      	ble.n	8003c90 <main+0x4a8>
 8003c8a:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <main+0x5b0>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8003c90:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <main+0x5b4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	dd02      	ble.n	8003c9e <main+0x4b6>
 8003c98:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <main+0x5b4>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8003c9e:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <main+0x5b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	dd02      	ble.n	8003cac <main+0x4c4>
 8003ca6:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <main+0x5b8>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8003cac:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <main+0x5bc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	dd02      	ble.n	8003cba <main+0x4d2>
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <main+0x5bc>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <main+0x5b0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dd0e      	ble.n	8003ce0 <main+0x4f8>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fd f9ad 	bl	8001024 <calc_process_dma_buffer>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <main+0x4ee>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8003cd0:	4835      	ldr	r0, [pc, #212]	; (8003da8 <main+0x5c0>)
 8003cd2:	f001 f905 	bl	8004ee0 <term_print>
			}
			adc1_dma_l_count--;
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <main+0x5b0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <main+0x5b0>)
 8003cde:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <main+0x5b4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dd0e      	ble.n	8003d06 <main+0x51e>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2001      	movs	r0, #1
 8003cec:	f7fd f99a 	bl	8001024 <calc_process_dma_buffer>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <main+0x514>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8003cf6:	482d      	ldr	r0, [pc, #180]	; (8003dac <main+0x5c4>)
 8003cf8:	f001 f8f2 	bl	8004ee0 <term_print>
			}
			adc1_dma_h_count--;
 8003cfc:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <main+0x5b4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <main+0x5b4>)
 8003d04:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <main+0x5b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	dd0e      	ble.n	8003d2c <main+0x544>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8003d0e:	2101      	movs	r1, #1
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fd f987 	bl	8001024 <calc_process_dma_buffer>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <main+0x53a>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 8003d1c:	4824      	ldr	r0, [pc, #144]	; (8003db0 <main+0x5c8>)
 8003d1e:	f001 f8df 	bl	8004ee0 <term_print>
			}
			adc2_dma_l_count--;
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <main+0x5b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <main+0x5b8>)
 8003d2a:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <main+0x5bc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f77f ae14 	ble.w	800395e <main+0x176>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8003d36:	2101      	movs	r1, #1
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7fd f973 	bl	8001024 <calc_process_dma_buffer>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <main+0x562>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8003d44:	481b      	ldr	r0, [pc, #108]	; (8003db4 <main+0x5cc>)
 8003d46:	f001 f8cb 	bl	8004ee0 <term_print>
			}
			adc2_dma_h_count--;
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <main+0x5bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <main+0x5bc>)
 8003d52:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8003d54:	e603      	b.n	800395e <main+0x176>
 8003d56:	bf00      	nop
 8003d58:	20002428 	.word	0x20002428
 8003d5c:	20002424 	.word	0x20002424
 8003d60:	200024a8 	.word	0x200024a8
 8003d64:	200024bf 	.word	0x200024bf
 8003d68:	200024c2 	.word	0x200024c2
 8003d6c:	200024bd 	.word	0x200024bd
 8003d70:	200024c4 	.word	0x200024c4
 8003d74:	200080cc 	.word	0x200080cc
 8003d78:	200080dc 	.word	0x200080dc
 8003d7c:	200024c0 	.word	0x200024c0
 8003d80:	080110b0 	.word	0x080110b0
 8003d84:	080110d4 	.word	0x080110d4
 8003d88:	200024bc 	.word	0x200024bc
 8003d8c:	200024be 	.word	0x200024be
 8003d90:	200080d0 	.word	0x200080d0
 8003d94:	40020000 	.word	0x40020000
 8003d98:	200024c8 	.word	0x200024c8
 8003d9c:	200024cc 	.word	0x200024cc
 8003da0:	200024d0 	.word	0x200024d0
 8003da4:	200024d4 	.word	0x200024d4
 8003da8:	080110e4 	.word	0x080110e4
 8003dac:	0801110c 	.word	0x0801110c
 8003db0:	08011134 	.word	0x08011134
 8003db4:	0801115c 	.word	0x0801115c

08003db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b094      	sub	sp, #80	; 0x50
 8003dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dbe:	f107 031c 	add.w	r3, r7, #28
 8003dc2:	2234      	movs	r2, #52	; 0x34
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f009 fee4 	bl	800db94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <SystemClock_Config+0xdc>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <SystemClock_Config+0xdc>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6413      	str	r3, [r2, #64]	; 0x40
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <SystemClock_Config+0xdc>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <SystemClock_Config+0xe0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <SystemClock_Config+0xe0>)
 8003e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <SystemClock_Config+0xe0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e14:	2302      	movs	r3, #2
 8003e16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e20:	2302      	movs	r3, #2
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e24:	2300      	movs	r3, #0
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e28:	2308      	movs	r3, #8
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003e2c:	23b4      	movs	r3, #180	; 0xb4
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e30:	2302      	movs	r3, #2
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003e34:	2302      	movs	r3, #2
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	4618      	mov	r0, r3
 8003e42:	f006 fab9 	bl	800a3b8 <HAL_RCC_OscConfig>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003e4c:	f000 fc06 	bl	800465c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003e50:	f005 ff18 	bl	8009c84 <HAL_PWREx_EnableOverDrive>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003e5a:	f000 fbff 	bl	800465c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e5e:	230f      	movs	r3, #15
 8003e60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e62:	2302      	movs	r3, #2
 8003e64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	2105      	movs	r1, #5
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 ff51 	bl	8009d24 <HAL_RCC_ClockConfig>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003e88:	f000 fbe8 	bl	800465c <Error_Handler>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3750      	adds	r7, #80	; 0x50
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000

08003e9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003eb0:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <MX_ADC1_Init+0xbc>)
 8003eb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003eb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003eba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ee0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003eee:	2202      	movs	r2, #2
 8003ef0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f00:	4814      	ldr	r0, [pc, #80]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003f02:	f003 fac1 	bl	8007488 <HAL_ADC_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003f0c:	f000 fba6 	bl	800465c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480c      	ldr	r0, [pc, #48]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003f22:	f003 fc05 	bl	8007730 <HAL_ADC_ConfigChannel>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003f2c:	f000 fb96 	bl	800465c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003f30:	230a      	movs	r3, #10
 8003f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003f34:	2302      	movs	r3, #2
 8003f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f38:	463b      	mov	r3, r7
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4805      	ldr	r0, [pc, #20]	; (8003f54 <MX_ADC1_Init+0xb8>)
 8003f3e:	f003 fbf7 	bl	8007730 <HAL_ADC_ConfigChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003f48:	f000 fb88 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20001ff8 	.word	0x20001ff8
 8003f58:	40012000 	.word	0x40012000

08003f5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f62:	463b      	mov	r3, r7
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f70:	4a29      	ldr	r2, [pc, #164]	; (8004018 <MX_ADC2_Init+0xbc>)
 8003f72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fa0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fae:	2202      	movs	r2, #2
 8003fb0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003fc0:	4814      	ldr	r0, [pc, #80]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fc2:	f003 fa61 	bl	8007488 <HAL_ADC_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8003fcc:	f000 fb46 	bl	800465c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	4619      	mov	r1, r3
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003fe2:	f003 fba5 	bl	8007730 <HAL_ADC_ConfigChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003fec:	f000 fb36 	bl	800465c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003ff0:	230b      	movs	r3, #11
 8003ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4805      	ldr	r0, [pc, #20]	; (8004014 <MX_ADC2_Init+0xb8>)
 8003ffe:	f003 fb97 	bl	8007730 <HAL_ADC_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8004008:	f000 fb28 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20002040 	.word	0x20002040
 8004018:	40012100 	.word	0x40012100

0800401c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <MX_I2C1_Init+0x50>)
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <MX_I2C1_Init+0x54>)
 8004024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <MX_I2C1_Init+0x50>)
 8004028:	4a12      	ldr	r2, [pc, #72]	; (8004074 <MX_I2C1_Init+0x58>)
 800402a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <MX_I2C1_Init+0x50>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <MX_I2C1_Init+0x50>)
 8004034:	2200      	movs	r2, #0
 8004036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <MX_I2C1_Init+0x50>)
 800403a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800403e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <MX_I2C1_Init+0x50>)
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <MX_I2C1_Init+0x50>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <MX_I2C1_Init+0x50>)
 800404e:	2200      	movs	r2, #0
 8004050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <MX_I2C1_Init+0x50>)
 8004054:	2200      	movs	r2, #0
 8004056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004058:	4804      	ldr	r0, [pc, #16]	; (800406c <MX_I2C1_Init+0x50>)
 800405a:	f004 fd25 	bl	8008aa8 <HAL_I2C_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004064:	f000 fafa 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20002148 	.word	0x20002148
 8004070:	40005400 	.word	0x40005400
 8004074:	00061a80 	.word	0x00061a80

08004078 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_SPI2_Init+0x64>)
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <MX_SPI2_Init+0x68>)
 8004080:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <MX_SPI2_Init+0x64>)
 8004084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004088:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_SPI2_Init+0x64>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_SPI2_Init+0x64>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <MX_SPI2_Init+0x64>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <MX_SPI2_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_SPI2_Init+0x64>)
 80040a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <MX_SPI2_Init+0x64>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <MX_SPI2_Init+0x64>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <MX_SPI2_Init+0x64>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <MX_SPI2_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <MX_SPI2_Init+0x64>)
 80040c4:	220a      	movs	r2, #10
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040c8:	4804      	ldr	r0, [pc, #16]	; (80040dc <MX_SPI2_Init+0x64>)
 80040ca:	f006 fc13 	bl	800a8f4 <HAL_SPI_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040d4:	f000 fac2 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	2000219c 	.word	0x2000219c
 80040e0:	40003800 	.word	0x40003800

080040e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ea:	f107 0308 	add.w	r3, r7, #8
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f8:	463b      	mov	r3, r7
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <MX_TIM2_Init+0x94>)
 8004102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <MX_TIM2_Init+0x94>)
 800410a:	2200      	movs	r2, #0
 800410c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <MX_TIM2_Init+0x94>)
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <MX_TIM2_Init+0x94>)
 8004116:	f640 02ee 	movw	r2, #2286	; 0x8ee
 800411a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <MX_TIM2_Init+0x94>)
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <MX_TIM2_Init+0x94>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004128:	4813      	ldr	r0, [pc, #76]	; (8004178 <MX_TIM2_Init+0x94>)
 800412a:	f007 f8bd 	bl	800b2a8 <HAL_TIM_Base_Init>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004134:	f000 fa92 	bl	800465c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4619      	mov	r1, r3
 8004144:	480c      	ldr	r0, [pc, #48]	; (8004178 <MX_TIM2_Init+0x94>)
 8004146:	f007 fa77 	bl	800b638 <HAL_TIM_ConfigClockSource>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004150:	f000 fa84 	bl	800465c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004154:	2320      	movs	r3, #32
 8004156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800415c:	463b      	mov	r3, r7
 800415e:	4619      	mov	r1, r3
 8004160:	4805      	ldr	r0, [pc, #20]	; (8004178 <MX_TIM2_Init+0x94>)
 8004162:	f007 fc9d 	bl	800baa0 <HAL_TIMEx_MasterConfigSynchronization>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800416c:	f000 fa76 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20002254 	.word	0x20002254

0800417c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <MX_USART2_UART_Init+0x50>)
 8004184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 8004188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800418c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 8004196:	2200      	movs	r2, #0
 8004198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 80041a2:	220c      	movs	r2, #12
 80041a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041b2:	4805      	ldr	r0, [pc, #20]	; (80041c8 <MX_USART2_UART_Init+0x4c>)
 80041b4:	f007 fd04 	bl	800bbc0 <HAL_UART_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80041be:	f000 fa4d 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000229c 	.word	0x2000229c
 80041cc:	40004400 	.word	0x40004400

080041d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041d6:	4a12      	ldr	r2, [pc, #72]	; (8004220 <MX_USART3_UART_Init+0x50>)
 80041d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041f6:	220c      	movs	r2, #12
 80041f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <MX_USART3_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <MX_USART3_UART_Init+0x4c>)
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004206:	4805      	ldr	r0, [pc, #20]	; (800421c <MX_USART3_UART_Init+0x4c>)
 8004208:	f007 fcda 	bl	800bbc0 <HAL_UART_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004212:	f000 fa23 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200022e0 	.word	0x200022e0
 8004220:	40004800 	.word	0x40004800

08004224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <MX_DMA_Init+0x78>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <MX_DMA_Init+0x78>)
 8004234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <MX_DMA_Init+0x78>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <MX_DMA_Init+0x78>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <MX_DMA_Init+0x78>)
 8004250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <MX_DMA_Init+0x78>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	200f      	movs	r0, #15
 8004268:	f003 fded 	bl	8007e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800426c:	200f      	movs	r0, #15
 800426e:	f003 fe06 	bl	8007e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2038      	movs	r0, #56	; 0x38
 8004278:	f003 fde5 	bl	8007e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800427c:	2038      	movs	r0, #56	; 0x38
 800427e:	f003 fdfe 	bl	8007e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2100      	movs	r1, #0
 8004286:	203a      	movs	r0, #58	; 0x3a
 8004288:	f003 fddd 	bl	8007e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800428c:	203a      	movs	r0, #58	; 0x3a
 800428e:	f003 fdf6 	bl	8007e7e <HAL_NVIC_EnableIRQ>

}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800

080042a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	4b61      	ldr	r3, [pc, #388]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4a60      	ldr	r2, [pc, #384]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042c0:	f043 0304 	orr.w	r3, r3, #4
 80042c4:	6313      	str	r3, [r2, #48]	; 0x30
 80042c6:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b5a      	ldr	r3, [pc, #360]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	4a59      	ldr	r2, [pc, #356]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e0:	6313      	str	r3, [r2, #48]	; 0x30
 80042e2:	4b57      	ldr	r3, [pc, #348]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4b53      	ldr	r3, [pc, #332]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	4a52      	ldr	r2, [pc, #328]	; (8004440 <MX_GPIO_Init+0x1a0>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6313      	str	r3, [r2, #48]	; 0x30
 80042fe:	4b50      	ldr	r3, [pc, #320]	; (8004440 <MX_GPIO_Init+0x1a0>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <MX_GPIO_Init+0x1a0>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a4b      	ldr	r2, [pc, #300]	; (8004440 <MX_GPIO_Init+0x1a0>)
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b49      	ldr	r3, [pc, #292]	; (8004440 <MX_GPIO_Init+0x1a0>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8004326:	2200      	movs	r2, #0
 8004328:	f248 41e0 	movw	r1, #34016	; 0x84e0
 800432c:	4845      	ldr	r0, [pc, #276]	; (8004444 <MX_GPIO_Init+0x1a4>)
 800432e:	f004 fb6f 	bl	8008a10 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8004332:	2201      	movs	r2, #1
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	4844      	ldr	r0, [pc, #272]	; (8004448 <MX_GPIO_Init+0x1a8>)
 8004338:	f004 fb6a 	bl	8008a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 800433c:	2201      	movs	r2, #1
 800433e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004342:	4840      	ldr	r0, [pc, #256]	; (8004444 <MX_GPIO_Init+0x1a4>)
 8004344:	f004 fb64 	bl	8008a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8004348:	2200      	movs	r2, #0
 800434a:	21c0      	movs	r1, #192	; 0xc0
 800434c:	483f      	ldr	r0, [pc, #252]	; (800444c <MX_GPIO_Init+0x1ac>)
 800434e:	f004 fb5f 	bl	8008a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800435c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	4619      	mov	r1, r3
 8004368:	4837      	ldr	r0, [pc, #220]	; (8004448 <MX_GPIO_Init+0x1a8>)
 800436a:	f004 f9a5 	bl	80086b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 800436e:	f248 4360 	movw	r3, #33888	; 0x8460
 8004372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004374:	2301      	movs	r3, #1
 8004376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4619      	mov	r1, r3
 8004386:	482f      	ldr	r0, [pc, #188]	; (8004444 <MX_GPIO_Init+0x1a4>)
 8004388:	f004 f996 	bl	80086b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004390:	2301      	movs	r3, #1
 8004392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004398:	2302      	movs	r3, #2
 800439a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	4619      	mov	r1, r3
 80043a2:	4828      	ldr	r0, [pc, #160]	; (8004444 <MX_GPIO_Init+0x1a4>)
 80043a4:	f004 f988 	bl	80086b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ac:	2301      	movs	r3, #1
 80043ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b4:	2303      	movs	r3, #3
 80043b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	4822      	ldr	r0, [pc, #136]	; (8004448 <MX_GPIO_Init+0x1a8>)
 80043c0:	f004 f97a 	bl	80086b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80043c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d2:	2303      	movs	r3, #3
 80043d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	4619      	mov	r1, r3
 80043dc:	4819      	ldr	r0, [pc, #100]	; (8004444 <MX_GPIO_Init+0x1a4>)
 80043de:	f004 f96b 	bl	80086b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80043e2:	2310      	movs	r3, #16
 80043e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80043ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80043f0:	f107 0314 	add.w	r3, r7, #20
 80043f4:	4619      	mov	r1, r3
 80043f6:	4815      	ldr	r0, [pc, #84]	; (800444c <MX_GPIO_Init+0x1ac>)
 80043f8:	f004 f95e 	bl	80086b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 80043fc:	23c0      	movs	r3, #192	; 0xc0
 80043fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004400:	2301      	movs	r3, #1
 8004402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004408:	2300      	movs	r3, #0
 800440a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	4619      	mov	r1, r3
 8004412:	480e      	ldr	r0, [pc, #56]	; (800444c <MX_GPIO_Init+0x1ac>)
 8004414:	f004 f950 	bl	80086b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004418:	2200      	movs	r2, #0
 800441a:	2100      	movs	r1, #0
 800441c:	200a      	movs	r0, #10
 800441e:	f003 fd12 	bl	8007e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004422:	200a      	movs	r0, #10
 8004424:	f003 fd2b 	bl	8007e7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	2028      	movs	r0, #40	; 0x28
 800442e:	f003 fd0a 	bl	8007e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004432:	2028      	movs	r0, #40	; 0x28
 8004434:	f003 fd23 	bl	8007e7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004438:	bf00      	nop
 800443a:	3728      	adds	r7, #40	; 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	40020000 	.word	0x40020000
 8004448:	40020800 	.word	0x40020800
 800444c:	40020400 	.word	0x40020400

08004450 <HAL_GPIO_EXTI_Callback>:
//	my_printf("HAL_I2C_MemRxCpltCallback");
}

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	2b10      	cmp	r3, #16
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_EXTI_Callback+0x18>
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004464:	d004      	beq.n	8004470 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8004466:	e007      	b.n	8004478 <HAL_GPIO_EXTI_Callback+0x28>
		touch_action = 1;
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_GPIO_EXTI_Callback+0x34>)
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
		break;
 800446e:	e003      	b.n	8004478 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_GPIO_EXTI_Callback+0x38>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
		break;
 8004476:	bf00      	nop
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	200024be 	.word	0x200024be
 8004488:	200024bd 	.word	0x200024bd

0800448c <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_ADC_ConvCpltCallback+0x34>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d105      	bne.n	80044a8 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x38>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x38>)
 80044a4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 80044a6:	e004      	b.n	80044b2 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80044b0:	6013      	str	r3, [r2, #0]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20001ff8 	.word	0x20001ff8
 80044c4:	200024cc 	.word	0x200024cc
 80044c8:	200024d4 	.word	0x200024d4

080044cc <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d105      	bne.n	80044e8 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80044e4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80044e6:	e004      	b.n	80044f2 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a06      	ldr	r2, [pc, #24]	; (8004508 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20001ff8 	.word	0x20001ff8
 8004504:	200024c8 	.word	0x200024c8
 8004508:	200024d0 	.word	0x200024d0

0800450c <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_ADC_ErrorCallback+0x94>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d102      	bne.n	8004522 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 800451c:	2301      	movs	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e001      	b.n	8004526 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8004522:	2302      	movs	r3, #2
 8004524:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	2b04      	cmp	r3, #4
 800452c:	d82c      	bhi.n	8004588 <HAL_ADC_ErrorCallback+0x7c>
 800452e:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <HAL_ADC_ErrorCallback+0x28>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004549 	.word	0x08004549
 8004538:	08004559 	.word	0x08004559
 800453c:	08004569 	.word	0x08004569
 8004540:	08004589 	.word	0x08004589
 8004544:	08004579 	.word	0x08004579
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	461a      	mov	r2, r3
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	4814      	ldr	r0, [pc, #80]	; (80045a4 <HAL_ADC_ErrorCallback+0x98>)
 8004552:	f000 fcc5 	bl	8004ee0 <term_print>
		break;
 8004556:	e01e      	b.n	8004596 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	461a      	mov	r2, r3
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	4811      	ldr	r0, [pc, #68]	; (80045a8 <HAL_ADC_ErrorCallback+0x9c>)
 8004562:	f000 fcbd 	bl	8004ee0 <term_print>
		break;
 8004566:	e016      	b.n	8004596 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	461a      	mov	r2, r3
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	480e      	ldr	r0, [pc, #56]	; (80045ac <HAL_ADC_ErrorCallback+0xa0>)
 8004572:	f000 fcb5 	bl	8004ee0 <term_print>
		break;
 8004576:	e00e      	b.n	8004596 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	461a      	mov	r2, r3
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	480b      	ldr	r0, [pc, #44]	; (80045b0 <HAL_ADC_ErrorCallback+0xa4>)
 8004582:	f000 fcad 	bl	8004ee0 <term_print>
		break;
 8004586:	e006      	b.n	8004596 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	4619      	mov	r1, r3
 800458e:	4809      	ldr	r0, [pc, #36]	; (80045b4 <HAL_ADC_ErrorCallback+0xa8>)
 8004590:	f000 fca6 	bl	8004ee0 <term_print>
	}
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20001ff8 	.word	0x20001ff8
 80045a4:	08011184 	.word	0x08011184
 80045a8:	080111a0 	.word	0x080111a0
 80045ac:	080111c4 	.word	0x080111c4
 80045b0:	080111e4 	.word	0x080111e4
 80045b4:	08011200 	.word	0x08011200

080045b8 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a21      	ldr	r2, [pc, #132]	; (8004648 <HAL_UART_RxCpltCallback+0x90>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d13b      	bne.n	8004640 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 80045c8:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b7f      	cmp	r3, #127	; 0x7f
 80045d0:	d902      	bls.n	80045d8 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 80045d2:	4b1e      	ldr	r3, [pc, #120]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80045d8:	2201      	movs	r2, #1
 80045da:	491d      	ldr	r1, [pc, #116]	; (8004650 <HAL_UART_RxCpltCallback+0x98>)
 80045dc:	481a      	ldr	r0, [pc, #104]	; (8004648 <HAL_UART_RxCpltCallback+0x90>)
 80045de:	f007 fbce 	bl	800bd7e <HAL_UART_Receive_IT>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d12a      	bne.n	800463e <HAL_UART_RxCpltCallback+0x86>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_UART_RxCpltCallback+0x98>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d012      	beq.n	8004618 <HAL_UART_RxCpltCallback+0x60>
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_UART_RxCpltCallback+0x98>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b0d      	cmp	r3, #13
 80045fa:	d00d      	beq.n	8004618 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 80045fc:	4b13      	ldr	r3, [pc, #76]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	b291      	uxth	r1, r2
 8004606:	4a11      	ldr	r2, [pc, #68]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 8004608:	8011      	strh	r1, [r2, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_UART_RxCpltCallback+0x98>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2d9      	uxtb	r1, r3
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_UART_RxCpltCallback+0x9c>)
 8004614:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8004616:	e012      	b.n	800463e <HAL_UART_RxCpltCallback+0x86>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <HAL_UART_RxCpltCallback+0x86>
					cli_rx_cmd_ready = 1;
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <HAL_UART_RxCpltCallback+0xa0>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	b291      	uxth	r1, r2
 8004632:	4a06      	ldr	r2, [pc, #24]	; (800464c <HAL_UART_RxCpltCallback+0x94>)
 8004634:	8011      	strh	r1, [r2, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_UART_RxCpltCallback+0x9c>)
 800463a:	2100      	movs	r1, #0
 800463c:	5499      	strb	r1, [r3, r2]
		return;
 800463e:	bf00      	nop
		} else {	// this should never happen
			esp_rx_error_count++;
		}
	}
#endif
}
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000229c 	.word	0x2000229c
 800464c:	20002424 	.word	0x20002424
 8004650:	20002426 	.word	0x20002426
 8004654:	20002428 	.word	0x20002428
 8004658:	200024a8 	.word	0x200024a8

0800465c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8004660:	4802      	ldr	r0, [pc, #8]	; (800466c <Error_Handler+0x10>)
 8004662:	f009 fa85 	bl	800db70 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004666:	b672      	cpsid	i
}
 8004668:	bf00      	nop
    __disable_irq();
    while (1)
 800466a:	e7fe      	b.n	800466a <Error_Handler+0xe>
 800466c:	08011220 	.word	0x08011220

08004670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_MspInit+0x4c>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <HAL_MspInit+0x4c>)
 8004680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_MspInit+0x4c>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_MspInit+0x4c>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <HAL_MspInit+0x4c>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_MspInit+0x4c>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80046ae:	2007      	movs	r0, #7
 80046b0:	f003 fbbe 	bl	8007e30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800

080046c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a79      	ldr	r2, [pc, #484]	; (80048c4 <HAL_ADC_MspInit+0x204>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d173      	bne.n	80047ca <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	4b78      	ldr	r3, [pc, #480]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a77      	ldr	r2, [pc, #476]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b75      	ldr	r3, [pc, #468]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	4b71      	ldr	r3, [pc, #452]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a70      	ldr	r2, [pc, #448]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b6e      	ldr	r3, [pc, #440]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a69      	ldr	r2, [pc, #420]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b67      	ldr	r3, [pc, #412]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004736:	2301      	movs	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800473a:	2303      	movs	r3, #3
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004746:	4619      	mov	r1, r3
 8004748:	4860      	ldr	r0, [pc, #384]	; (80048cc <HAL_ADC_MspInit+0x20c>)
 800474a:	f003 ffb5 	bl	80086b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800474e:	2301      	movs	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004752:	2303      	movs	r3, #3
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475e:	4619      	mov	r1, r3
 8004760:	485b      	ldr	r0, [pc, #364]	; (80048d0 <HAL_ADC_MspInit+0x210>)
 8004762:	f003 ffa9 	bl	80086b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 8004768:	4a5b      	ldr	r2, [pc, #364]	; (80048d8 <HAL_ADC_MspInit+0x218>)
 800476a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 800476e:	2200      	movs	r2, #0
 8004770:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004778:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 800477a:	2200      	movs	r2, #0
 800477c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800477e:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 8004780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004784:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004786:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 8004788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 8004790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004794:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004796:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 8004798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800479c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800479e:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 80047a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047a6:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047ac:	4849      	ldr	r0, [pc, #292]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 80047ae:	f003 fb81 	bl	8007eb4 <HAL_DMA_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80047b8:	f7ff ff50 	bl	800465c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a45      	ldr	r2, [pc, #276]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
 80047c2:	4a44      	ldr	r2, [pc, #272]	; (80048d4 <HAL_ADC_MspInit+0x214>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047c8:	e078      	b.n	80048bc <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a43      	ldr	r2, [pc, #268]	; (80048dc <HAL_ADC_MspInit+0x21c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d173      	bne.n	80048bc <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80047de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e2:	6453      	str	r3, [r2, #68]	; 0x44
 80047e4:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6313      	str	r3, [r2, #48]	; 0x30
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_ADC_MspInit+0x208>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004828:	2302      	movs	r3, #2
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800482c:	2303      	movs	r3, #3
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004838:	4619      	mov	r1, r3
 800483a:	4824      	ldr	r0, [pc, #144]	; (80048cc <HAL_ADC_MspInit+0x20c>)
 800483c:	f003 ff3c 	bl	80086b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004840:	2302      	movs	r3, #2
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004844:	2303      	movs	r3, #3
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004850:	4619      	mov	r1, r3
 8004852:	481f      	ldr	r0, [pc, #124]	; (80048d0 <HAL_ADC_MspInit+0x210>)
 8004854:	f003 ff30 	bl	80086b8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 800485a:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <HAL_ADC_MspInit+0x224>)
 800485c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 8004860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004864:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 8004868:	2200      	movs	r2, #0
 800486a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 800486e:	2200      	movs	r2, #0
 8004870:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 8004874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004878:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 800487c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004880:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 8004884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004888:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 800488c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004890:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004892:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 8004894:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004898:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 800489c:	2200      	movs	r2, #0
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80048a0:	480f      	ldr	r0, [pc, #60]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 80048a2:	f003 fb07 	bl	8007eb4 <HAL_DMA_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 80048ac:	f7ff fed6 	bl	800465c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_ADC_MspInit+0x220>)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80048bc:	bf00      	nop
 80048be:	3738      	adds	r7, #56	; 0x38
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40012000 	.word	0x40012000
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40020800 	.word	0x40020800
 80048d0:	40020000 	.word	0x40020000
 80048d4:	20002088 	.word	0x20002088
 80048d8:	40026410 	.word	0x40026410
 80048dc:	40012100 	.word	0x40012100
 80048e0:	200020e8 	.word	0x200020e8
 80048e4:	40026440 	.word	0x40026440

080048e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a19      	ldr	r2, [pc, #100]	; (800496c <HAL_I2C_MspInit+0x84>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d12c      	bne.n	8004964 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_I2C_MspInit+0x88>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_I2C_MspInit+0x88>)
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	6313      	str	r3, [r2, #48]	; 0x30
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <HAL_I2C_MspInit+0x88>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800492a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800492c:	2312      	movs	r3, #18
 800492e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004934:	2303      	movs	r3, #3
 8004936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004938:	2304      	movs	r3, #4
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4619      	mov	r1, r3
 8004942:	480c      	ldr	r0, [pc, #48]	; (8004974 <HAL_I2C_MspInit+0x8c>)
 8004944:	f003 feb8 	bl	80086b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_I2C_MspInit+0x88>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	4a07      	ldr	r2, [pc, #28]	; (8004970 <HAL_I2C_MspInit+0x88>)
 8004952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004956:	6413      	str	r3, [r2, #64]	; 0x40
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_I2C_MspInit+0x88>)
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004964:	bf00      	nop
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40005400 	.word	0x40005400
 8004970:	40023800 	.word	0x40023800
 8004974:	40020400 	.word	0x40020400

08004978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a43      	ldr	r2, [pc, #268]	; (8004aa4 <HAL_SPI_MspInit+0x12c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d17f      	bne.n	8004a9a <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a8:	6413      	str	r3, [r2, #64]	; 0x40
 80049aa:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	4a3a      	ldr	r2, [pc, #232]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	6313      	str	r3, [r2, #48]	; 0x30
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	4a33      	ldr	r2, [pc, #204]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	6313      	str	r3, [r2, #48]	; 0x30
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_SPI_MspInit+0x130>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80049ee:	230c      	movs	r3, #12
 80049f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f2:	2302      	movs	r3, #2
 80049f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fa:	2303      	movs	r3, #3
 80049fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049fe:	2305      	movs	r3, #5
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4619      	mov	r1, r3
 8004a08:	4828      	ldr	r0, [pc, #160]	; (8004aac <HAL_SPI_MspInit+0x134>)
 8004a0a:	f003 fe55 	bl	80086b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8004a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	2302      	movs	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a20:	2305      	movs	r3, #5
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4821      	ldr	r0, [pc, #132]	; (8004ab0 <HAL_SPI_MspInit+0x138>)
 8004a2c:	f003 fe44 	bl	80086b8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004a30:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a32:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <HAL_SPI_MspInit+0x140>)
 8004a34:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a50:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a56:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a6e:	4811      	ldr	r0, [pc, #68]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a70:	f003 fa20 	bl	8007eb4 <HAL_DMA_Init>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004a7a:	f7ff fdef 	bl	800465c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a82:	649a      	str	r2, [r3, #72]	; 0x48
 8004a84:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <HAL_SPI_MspInit+0x13c>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2024      	movs	r0, #36	; 0x24
 8004a90:	f003 f9d9 	bl	8007e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004a94:	2024      	movs	r0, #36	; 0x24
 8004a96:	f003 f9f2 	bl	8007e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a9a:	bf00      	nop
 8004a9c:	3728      	adds	r7, #40	; 0x28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40003800 	.word	0x40003800
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40020800 	.word	0x40020800
 8004ab0:	40020400 	.word	0x40020400
 8004ab4:	200021f4 	.word	0x200021f4
 8004ab8:	40026070 	.word	0x40026070

08004abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d115      	bne.n	8004afa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <HAL_TIM_Base_MspInit+0x48>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	4a0b      	ldr	r2, [pc, #44]	; (8004b04 <HAL_TIM_Base_MspInit+0x48>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_TIM_Base_MspInit+0x48>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	201c      	movs	r0, #28
 8004af0:	f003 f9a9 	bl	8007e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004af4:	201c      	movs	r0, #28
 8004af6:	f003 f9c2 	bl	8007e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	f107 031c 	add.w	r3, r7, #28
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <HAL_UART_MspInit+0x108>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d134      	bne.n	8004b94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	4b32      	ldr	r3, [pc, #200]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6313      	str	r3, [r2, #48]	; 0x30
 8004b56:	4b2f      	ldr	r3, [pc, #188]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b62:	230c      	movs	r3, #12
 8004b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b66:	2302      	movs	r3, #2
 8004b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b72:	2307      	movs	r3, #7
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b76:	f107 031c 	add.w	r3, r7, #28
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4826      	ldr	r0, [pc, #152]	; (8004c18 <HAL_UART_MspInit+0x110>)
 8004b7e:	f003 fd9b 	bl	80086b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	2026      	movs	r0, #38	; 0x26
 8004b88:	f003 f95d 	bl	8007e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b8c:	2026      	movs	r0, #38	; 0x26
 8004b8e:	f003 f976 	bl	8007e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b92:	e039      	b.n	8004c08 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a20      	ldr	r2, [pc, #128]	; (8004c1c <HAL_UART_MspInit+0x114>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d134      	bne.n	8004c08 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <HAL_UART_MspInit+0x10c>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8004bd6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be4:	2303      	movs	r3, #3
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004be8:	2307      	movs	r3, #7
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bec:	f107 031c 	add.w	r3, r7, #28
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	480b      	ldr	r0, [pc, #44]	; (8004c20 <HAL_UART_MspInit+0x118>)
 8004bf4:	f003 fd60 	bl	80086b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	2027      	movs	r0, #39	; 0x27
 8004bfe:	f003 f922 	bl	8007e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004c02:	2027      	movs	r0, #39	; 0x27
 8004c04:	f003 f93b 	bl	8007e7e <HAL_NVIC_EnableIRQ>
}
 8004c08:	bf00      	nop
 8004c0a:	3730      	adds	r7, #48	; 0x30
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40020000 	.word	0x40020000
 8004c1c:	40004800 	.word	0x40004800
 8004c20:	40020800 	.word	0x40020800

08004c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c28:	e7fe      	b.n	8004c28 <NMI_Handler+0x4>

08004c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c2e:	e7fe      	b.n	8004c2e <HardFault_Handler+0x4>

08004c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c34:	e7fe      	b.n	8004c34 <MemManage_Handler+0x4>

08004c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c3a:	e7fe      	b.n	8004c3a <BusFault_Handler+0x4>

08004c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c40:	e7fe      	b.n	8004c40 <UsageFault_Handler+0x4>

08004c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c42:	b480      	push	{r7}
 8004c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c70:	f002 fbc6 	bl	8007400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f003 fefb 	bl	8008a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004c8c:	4802      	ldr	r0, [pc, #8]	; (8004c98 <DMA1_Stream4_IRQHandler+0x10>)
 8004c8e:	f003 faa9 	bl	80081e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200021f4 	.word	0x200021f4

08004c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ca0:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <TIM2_IRQHandler+0x18>)
 8004ca2:	f006 fbc1 	bl	800b428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8004ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004caa:	4803      	ldr	r0, [pc, #12]	; (8004cb8 <TIM2_IRQHandler+0x1c>)
 8004cac:	f003 fec9 	bl	8008a42 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20002254 	.word	0x20002254
 8004cb8:	40020000 	.word	0x40020000

08004cbc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004cc0:	4802      	ldr	r0, [pc, #8]	; (8004ccc <SPI2_IRQHandler+0x10>)
 8004cc2:	f006 f893 	bl	800adec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2000219c 	.word	0x2000219c

08004cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cd4:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <USART2_IRQHandler+0x10>)
 8004cd6:	f007 f883 	bl	800bde0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000229c 	.word	0x2000229c

08004ce4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ce8:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <USART3_IRQHandler+0x10>)
 8004cea:	f007 f879 	bl	800bde0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200022e0 	.word	0x200022e0

08004cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004cfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d00:	f003 feba 	bl	8008a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d0c:	4802      	ldr	r0, [pc, #8]	; (8004d18 <DMA2_Stream0_IRQHandler+0x10>)
 8004d0e:	f003 fa69 	bl	80081e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20002088 	.word	0x20002088

08004d1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004d20:	4802      	ldr	r0, [pc, #8]	; (8004d2c <DMA2_Stream2_IRQHandler+0x10>)
 8004d22:	f003 fa5f 	bl	80081e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200020e8 	.word	0x200020e8

08004d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return 1;
 8004d34:	2301      	movs	r3, #1
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <_kill>:

int _kill(int pid, int sig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d4a:	f008 ff85 	bl	800dc58 <__errno>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2216      	movs	r2, #22
 8004d52:	601a      	str	r2, [r3, #0]
  return -1;
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_exit>:

void _exit (int status)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ffe7 	bl	8004d40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d72:	e7fe      	b.n	8004d72 <_exit+0x12>

08004d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e00a      	b.n	8004d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d86:	f3af 8000 	nop.w
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	60ba      	str	r2, [r7, #8]
 8004d92:	b2ca      	uxtb	r2, r1
 8004d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	dbf0      	blt.n	8004d86 <_read+0x12>
  }

  return len;
 8004da4:	687b      	ldr	r3, [r7, #4]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b086      	sub	sp, #24
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e009      	b.n	8004dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	60ba      	str	r2, [r7, #8]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	dbf1      	blt.n	8004dc0 <_write+0x12>
  }
  return len;
 8004ddc:	687b      	ldr	r3, [r7, #4]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <_close>:

int _close(int file)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <_isatty>:

int _isatty(int file)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e26:	2301      	movs	r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e58:	4a14      	ldr	r2, [pc, #80]	; (8004eac <_sbrk+0x5c>)
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <_sbrk+0x60>)
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <_sbrk+0x64>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <_sbrk+0x64>)
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <_sbrk+0x68>)
 8004e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <_sbrk+0x64>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d207      	bcs.n	8004e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e80:	f008 feea 	bl	800dc58 <__errno>
 8004e84:	4603      	mov	r3, r0
 8004e86:	220c      	movs	r2, #12
 8004e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e8e:	e009      	b.n	8004ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <_sbrk+0x64>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <_sbrk+0x64>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <_sbrk+0x64>)
 8004ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20020000 	.word	0x20020000
 8004eb0:	00000400 	.word	0x00000400
 8004eb4:	200080ec 	.word	0x200080ec
 8004eb8:	20009650 	.word	0x20009650

08004ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <SystemInit+0x20>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <SystemInit+0x20>)
 8004ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8004ee0:	b40f      	push	{r0, r1, r2, r3}
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ef6:	480b      	ldr	r0, [pc, #44]	; (8004f24 <term_print+0x44>)
 8004ef8:	f008 fe2c 	bl	800db54 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8004efc:	4809      	ldr	r0, [pc, #36]	; (8004f24 <term_print+0x44>)
 8004efe:	f7fb f9d7 	bl	80002b0 <strlen>
 8004f02:	4603      	mov	r3, r0
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f0a:	4906      	ldr	r1, [pc, #24]	; (8004f24 <term_print+0x44>)
 8004f0c:	4806      	ldr	r0, [pc, #24]	; (8004f28 <term_print+0x48>)
 8004f0e:	f006 fea4 	bl	800bc5a <HAL_UART_Transmit>
 8004f12:	4603      	mov	r3, r0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f1e:	b004      	add	sp, #16
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	200080f0 	.word	0x200080f0
 8004f28:	2000229c 	.word	0x2000229c

08004f2c <term_show_buffer>:
}

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d838      	bhi.n	8004fb6 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	4619      	mov	r1, r3
 8004f48:	481d      	ldr	r0, [pc, #116]	; (8004fc0 <term_show_buffer+0x94>)
 8004f4a:	f7ff ffc9 	bl	8004ee0 <term_print>
	term_print("%3d: ", 0);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	481c      	ldr	r0, [pc, #112]	; (8004fc4 <term_show_buffer+0x98>)
 8004f52:	f7ff ffc5 	bl	8004ee0 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e020      	b.n	8004f9e <term_show_buffer+0x72>
		if (count >= 20) {
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b13      	cmp	r3, #19
 8004f60:	dd06      	ble.n	8004f70 <term_show_buffer+0x44>
			count =0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8004f66:	8a7b      	ldrh	r3, [r7, #18]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4817      	ldr	r0, [pc, #92]	; (8004fc8 <term_show_buffer+0x9c>)
 8004f6c:	f7ff ffb8 	bl	8004ee0 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	4916      	ldr	r1, [pc, #88]	; (8004fcc <term_show_buffer+0xa0>)
 8004f74:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004f78:	fb03 f202 	mul.w	r2, r3, r2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f84:	4619      	mov	r1, r3
 8004f86:	4812      	ldr	r0, [pc, #72]	; (8004fd0 <term_show_buffer+0xa4>)
 8004f88:	f7ff ffaa 	bl	8004ee0 <term_print>
		count++; address++;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	8a7b      	ldrh	r3, [r7, #18]
 8004f94:	3301      	adds	r3, #1
 8004f96:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004fa4:	d3da      	bcc.n	8004f5c <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004fa6:	480b      	ldr	r0, [pc, #44]	; (8004fd4 <term_show_buffer+0xa8>)
 8004fa8:	f7ff ff9a 	bl	8004ee0 <term_print>
	term_show_channel(bufnum);
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f886 	bl	80050c0 <term_show_channel>
 8004fb4:	e000      	b.n	8004fb8 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004fb6:	bf00      	nop
}
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	08011260 	.word	0x08011260
 8004fc4:	0801126c 	.word	0x0801126c
 8004fc8:	08011274 	.word	0x08011274
 8004fcc:	20007398 	.word	0x20007398
 8004fd0:	0801127c 	.word	0x0801127c
 8004fd4:	0801125c 	.word	0x0801125c

08004fd8 <term_show_measurements>:

void term_show_measurements() {
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b08e      	sub	sp, #56	; 0x38
 8004fde:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004fe0:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <term_show_measurements+0xc8>)
 8004fe2:	7b1b      	ldrb	r3, [r3, #12]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d008      	beq.n	8004ffa <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004fe8:	f7fc fd5a 	bl	8001aa0 <calc_measurements>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 8004ff2:	482c      	ldr	r0, [pc, #176]	; (80050a4 <term_show_measurements+0xcc>)
 8004ff4:	f7ff ff74 	bl	8004ee0 <term_print>
			return;
 8004ff8:	e047      	b.n	800508a <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i, metervalue_va,
 8004ffa:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <term_show_measurements+0xd0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fac2 	bl	8000588 <__aeabi_f2d>
 8005004:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <term_show_measurements+0xd4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fabb 	bl	8000588 <__aeabi_f2d>
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <term_show_measurements+0xd8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fb fab4 	bl	8000588 <__aeabi_f2d>
 8005020:	4680      	mov	r8, r0
 8005022:	4689      	mov	r9, r1
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <term_show_measurements+0xdc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb faad 	bl	8000588 <__aeabi_f2d>
 800502e:	4682      	mov	sl, r0
 8005030:	468b      	mov	fp, r1
 8005032:	4b21      	ldr	r3, [pc, #132]	; (80050b8 <term_show_measurements+0xe0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb faa6 	bl	8000588 <__aeabi_f2d>
 800503c:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w, metervalue_pf, acos(metervalue_pf) * (180.0 / 3.14159265) );
 8005040:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <term_show_measurements+0xe0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fb fa9f 	bl	8000588 <__aeabi_f2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ec43 2b10 	vmov	d0, r2, r3
 8005052:	f00b f9ef 	bl	8010434 <acos>
 8005056:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i, metervalue_va,
 800505a:	a30f      	add	r3, pc, #60	; (adr r3, 8005098 <term_show_measurements+0xc0>)
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f7fb faea 	bl	8000638 <__aeabi_dmul>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800506c:	ed97 7b00 	vldr	d7, [r7]
 8005070:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005074:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005078:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800507c:	e9cd 4500 	strd	r4, r5, [sp]
 8005080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005084:	480d      	ldr	r0, [pc, #52]	; (80050bc <term_show_measurements+0xe4>)
 8005086:	f7ff ff2b 	bl	8004ee0 <term_print>
}
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005092:	bf00      	nop
 8005094:	f3af 8000 	nop.w
 8005098:	1af05a77 	.word	0x1af05a77
 800509c:	404ca5dc 	.word	0x404ca5dc
 80050a0:	2000023c 	.word	0x2000023c
 80050a4:	08011284 	.word	0x08011284
 80050a8:	200080b8 	.word	0x200080b8
 80050ac:	200080bc 	.word	0x200080bc
 80050b0:	200080c0 	.word	0x200080c0
 80050b4:	200080c4 	.word	0x200080c4
 80050b8:	200080c8 	.word	0x200080c8
 80050bc:	08011298 	.word	0x08011298

080050c0 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 80050c0:	b5b0      	push	{r4, r5, r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	f200 80a5 	bhi.w	800521c <term_show_channel+0x15c>
	term_print("Measurements Buffer %d:\r\n", bufnum);
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	4619      	mov	r1, r3
 80050d6:	4853      	ldr	r0, [pc, #332]	; (8005224 <term_show_channel+0x164>)
 80050d8:	f7ff ff02 	bl	8004ee0 <term_print>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 80050dc:	79fa      	ldrb	r2, [r7, #7]
 80050de:	4952      	ldr	r1, [pc, #328]	; (8005228 <term_show_channel+0x168>)
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	330c      	adds	r3, #12
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d004      	beq.n	80050fc <term_show_channel+0x3c>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	4619      	mov	r1, r3
 80050f6:	484d      	ldr	r0, [pc, #308]	; (800522c <term_show_channel+0x16c>)
 80050f8:	f7ff fef2 	bl	8004ee0 <term_print>
		//term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
		//return;
	}

	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80050fc:	79fa      	ldrb	r2, [r7, #7]
 80050fe:	494a      	ldr	r1, [pc, #296]	; (8005228 <term_show_channel+0x168>)
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3302      	adds	r3, #2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	79fa      	ldrb	r2, [r7, #7]
 8005112:	4945      	ldr	r1, [pc, #276]	; (8005228 <term_show_channel+0x168>)
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	1ac3      	subs	r3, r0, r3
 8005122:	60fb      	str	r3, [r7, #12]
	term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, pp_reading );
 8005124:	79fa      	ldrb	r2, [r7, #7]
 8005126:	4940      	ldr	r1, [pc, #256]	; (8005228 <term_show_channel+0x168>)
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	79fa      	ldrb	r2, [r7, #7]
 8005138:	493b      	ldr	r1, [pc, #236]	; (8005228 <term_show_channel+0x168>)
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3302      	adds	r3, #2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4601      	mov	r1, r0
 800514e:	4838      	ldr	r0, [pc, #224]	; (8005230 <term_show_channel+0x170>)
 8005150:	f7ff fec6 	bl	8004ee0 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	4934      	ldr	r1, [pc, #208]	; (8005228 <term_show_channel+0x168>)
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3310      	adds	r3, #16
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b21b      	sxth	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	f7fc fffd 	bl	8002168 <calc_adc_raw_to_mv_int>
 800516e:	4604      	mov	r4, r0
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	b21b      	sxth	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	f7fc fff7 	bl	8002168 <calc_adc_raw_to_mv_int>
 800517a:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2 + sample_buf_meta[bufnum].min) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	0fda      	lsrs	r2, r3, #31
 8005180:	4413      	add	r3, r2
 8005182:	105b      	asrs	r3, r3, #1
 8005184:	b299      	uxth	r1, r3
 8005186:	79fa      	ldrb	r2, [r7, #7]
 8005188:	4827      	ldr	r0, [pc, #156]	; (8005228 <term_show_channel+0x168>)
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4403      	add	r3, r0
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	440b      	add	r3, r1
 8005198:	b29b      	uxth	r3, r3
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 800519a:	b21b      	sxth	r3, r3
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc ffe3 	bl	8002168 <calc_adc_raw_to_mv_int>
 80051a2:	4603      	mov	r3, r0
 80051a4:	462a      	mov	r2, r5
 80051a6:	4621      	mov	r1, r4
 80051a8:	4822      	ldr	r0, [pc, #136]	; (8005234 <term_show_channel+0x174>)
 80051aa:	f7ff fe99 	bl	8004ee0 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 80051ae:	79fa      	ldrb	r2, [r7, #7]
 80051b0:	491d      	ldr	r1, [pc, #116]	; (8005228 <term_show_channel+0x168>)
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b21b      	sxth	r3, r3
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fc ffd1 	bl	8002168 <calc_adc_raw_to_mv_int>
 80051c6:	4604      	mov	r4, r0
 80051c8:	79fa      	ldrb	r2, [r7, #7]
 80051ca:	4917      	ldr	r1, [pc, #92]	; (8005228 <term_show_channel+0x168>)
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3302      	adds	r3, #2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b21b      	sxth	r3, r3
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fc ffc3 	bl	8002168 <calc_adc_raw_to_mv_int>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	4621      	mov	r1, r4
 80051e8:	4813      	ldr	r0, [pc, #76]	; (8005238 <term_show_channel+0x178>)
 80051ea:	f7ff fe79 	bl	8004ee0 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 80051ee:	79fa      	ldrb	r2, [r7, #7]
 80051f0:	490d      	ldr	r1, [pc, #52]	; (8005228 <term_show_channel+0x168>)
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3304      	adds	r3, #4
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	79fa      	ldrb	r2, [r7, #7]
 8005202:	4809      	ldr	r0, [pc, #36]	; (8005228 <term_show_channel+0x168>)
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4403      	add	r3, r0
 800520e:	3308      	adds	r3, #8
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	4809      	ldr	r0, [pc, #36]	; (800523c <term_show_channel+0x17c>)
 8005216:	f7ff fe63 	bl	8004ee0 <term_print>
 800521a:	e000      	b.n	800521e <term_show_channel+0x15e>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800521c:	bf00      	nop
}
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bdb0      	pop	{r4, r5, r7, pc}
 8005224:	080112c8 	.word	0x080112c8
 8005228:	2000023c 	.word	0x2000023c
 800522c:	080112e4 	.word	0x080112e4
 8005230:	08011304 	.word	0x08011304
 8005234:	0801131c 	.word	0x0801131c
 8005238:	08011340 	.word	0x08011340
 800523c:	08011358 	.word	0x08011358

08005240 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d821      	bhi.n	8005294 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	4619      	mov	r1, r3
 8005254:	4811      	ldr	r0, [pc, #68]	; (800529c <term_csv_buffer+0x5c>)
 8005256:	f7ff fe43 	bl	8004ee0 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e011      	b.n	8005284 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	490f      	ldr	r1, [pc, #60]	; (80052a0 <term_csv_buffer+0x60>)
 8005264:	f44f 7252 	mov.w	r2, #840	; 0x348
 8005268:	fb03 f202 	mul.w	r2, r3, r2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005274:	461a      	mov	r2, r3
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	480a      	ldr	r0, [pc, #40]	; (80052a4 <term_csv_buffer+0x64>)
 800527a:	f7ff fe31 	bl	8004ee0 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800528a:	d3e9      	bcc.n	8005260 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 800528c:	4806      	ldr	r0, [pc, #24]	; (80052a8 <term_csv_buffer+0x68>)
 800528e:	f7ff fe27 	bl	8004ee0 <term_print>
 8005292:	e000      	b.n	8005296 <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8005294:	bf00      	nop
}
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08011260 	.word	0x08011260
 80052a0:	20005958 	.word	0x20005958
 80052a4:	08011378 	.word	0x08011378
 80052a8:	08011380 	.word	0x08011380

080052ac <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	480f      	ldr	r0, [pc, #60]	; (80052f0 <Displ_Select+0x44>)
 80052b4:	f003 fb94 	bl	80089e0 <HAL_GPIO_ReadPin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 80052be:	2201      	movs	r2, #1
 80052c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052c4:	480b      	ldr	r0, [pc, #44]	; (80052f4 <Displ_Select+0x48>)
 80052c6:	f003 fba3 	bl	8008a10 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <Displ_Select+0x4c>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	490a      	ldr	r1, [pc, #40]	; (80052f8 <Displ_Select+0x4c>)
 80052d0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80052d4:	4013      	ands	r3, r2
 80052d6:	600b      	str	r3, [r1, #0]
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <Displ_Select+0x4c>)
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <Displ_Select+0x4c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 80052e0:	2200      	movs	r2, #0
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	4802      	ldr	r0, [pc, #8]	; (80052f0 <Displ_Select+0x44>)
 80052e6:	f003 fb93 	bl	8008a10 <HAL_GPIO_WritePin>
		}
	}
}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40020800 	.word	0x40020800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40003800 	.word	0x40003800

080052fc <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6039      	str	r1, [r7, #0]
 8005304:	4611      	mov	r1, r2
 8005306:	461a      	mov	r2, r3
 8005308:	4603      	mov	r3, r0
 800530a:	71fb      	strb	r3, [r7, #7]
 800530c:	460b      	mov	r3, r1
 800530e:	80bb      	strh	r3, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8005314:	bf00      	nop
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <Displ_Transmit+0xa4>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0fa      	beq.n	8005316 <Displ_Transmit+0x1a>

	Displ_Select();
 8005320:	f7ff ffc4 	bl	80052ac <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	461a      	mov	r2, r3
 8005328:	2180      	movs	r1, #128	; 0x80
 800532a:	481e      	ldr	r0, [pc, #120]	; (80053a4 <Displ_Transmit+0xa8>)
 800532c:	f003 fb70 	bl	8008a10 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8005330:	79bb      	ldrb	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8005336:	88bb      	ldrh	r3, [r7, #4]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4413      	add	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e00b      	b.n	800535c <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	ba5b      	rev16	r3, r3
 800534e:	60bb      	str	r3, [r7, #8]
  return result;
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3304      	adds	r3, #4
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	d3ef      	bcc.n	8005344 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8005364:	88bb      	ldrh	r3, [r7, #4]
 8005366:	2b13      	cmp	r3, #19
 8005368:	d80d      	bhi.n	8005386 <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <Displ_Transmit+0xa4>)
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8005370:	88ba      	ldrh	r2, [r7, #4]
 8005372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	480b      	ldr	r0, [pc, #44]	; (80053a8 <Displ_Transmit+0xac>)
 800537a:	f005 fb44 	bl	800aa06 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <Displ_Transmit+0xa4>)
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8005384:	e008      	b.n	8005398 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <Displ_Transmit+0xa4>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	461a      	mov	r2, r3
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <Displ_Transmit+0xac>)
 8005394:	f005 fc74 	bl	800ac80 <HAL_SPI_Transmit_DMA>
	}
 8005398:	bf00      	nop
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000034 	.word	0x20000034
 80053a4:	40020000 	.word	0x40020000
 80053a8:	2000219c 	.word	0x2000219c

080053ac <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80053b6:	1df9      	adds	r1, r7, #7
 80053b8:	2300      	movs	r3, #0
 80053ba:	2201      	movs	r2, #1
 80053bc:	2000      	movs	r0, #0
 80053be:	f7ff ff9d 	bl	80052fc <Displ_Transmit>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7ff ff88 	bl	80052fc <Displ_Transmit>
 80053ec:	e000      	b.n	80053f0 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80053ee:	bf00      	nop
}
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
	Displ_Select();
 80053fc:	f7ff ff56 	bl	80052ac <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8005400:	2200      	movs	r2, #0
 8005402:	2140      	movs	r1, #64	; 0x40
 8005404:	4819      	ldr	r0, [pc, #100]	; (800546c <ILI9XXX_Init+0x74>)
 8005406:	f003 fb03 	bl	8008a10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800540a:	2001      	movs	r0, #1
 800540c:	f002 f818 	bl	8007440 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005410:	2201      	movs	r2, #1
 8005412:	2140      	movs	r1, #64	; 0x40
 8005414:	4815      	ldr	r0, [pc, #84]	; (800546c <ILI9XXX_Init+0x74>)
 8005416:	f003 fafb 	bl	8008a10 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 800541a:	20a5      	movs	r0, #165	; 0xa5
 800541c:	f002 f810 	bl	8007440 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005420:	203a      	movs	r0, #58	; 0x3a
 8005422:	f7ff ffc3 	bl	80053ac <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8005426:	2200      	movs	r2, #0
 8005428:	2101      	movs	r1, #1
 800542a:	4811      	ldr	r0, [pc, #68]	; (8005470 <ILI9XXX_Init+0x78>)
 800542c:	f7ff ffcd 	bl	80053ca <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005430:	20b0      	movs	r0, #176	; 0xb0
 8005432:	f7ff ffbb 	bl	80053ac <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005436:	2200      	movs	r2, #0
 8005438:	2101      	movs	r1, #1
 800543a:	480e      	ldr	r0, [pc, #56]	; (8005474 <ILI9XXX_Init+0x7c>)
 800543c:	f7ff ffc5 	bl	80053ca <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005440:	20b0      	movs	r0, #176	; 0xb0
 8005442:	f7ff ffb3 	bl	80053ac <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005446:	2200      	movs	r2, #0
 8005448:	2101      	movs	r1, #1
 800544a:	480a      	ldr	r0, [pc, #40]	; (8005474 <ILI9XXX_Init+0x7c>)
 800544c:	f7ff ffbd 	bl	80053ca <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005450:	2011      	movs	r0, #17
 8005452:	f7ff ffab 	bl	80053ac <Displ_WriteCommand>
	HAL_Delay(120);
 8005456:	2078      	movs	r0, #120	; 0x78
 8005458:	f001 fff2 	bl	8007440 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 800545c:	2029      	movs	r0, #41	; 0x29
 800545e:	f7ff ffa5 	bl	80053ac <Displ_WriteCommand>
	HAL_Delay(5);
 8005462:	2005      	movs	r0, #5
 8005464:	f001 ffec 	bl	8007440 <HAL_Delay>

}
 8005468:	bf00      	nop
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40020400 	.word	0x40020400
 8005470:	08011388 	.word	0x08011388
 8005474:	0801138c 	.word	0x0801138c

08005478 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	4611      	mov	r1, r2
 8005484:	461a      	mov	r2, r3
 8005486:	4623      	mov	r3, r4
 8005488:	80fb      	strh	r3, [r7, #6]
 800548a:	4603      	mov	r3, r0
 800548c:	80bb      	strh	r3, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	807b      	strh	r3, [r7, #2]
 8005492:	4613      	mov	r3, r2
 8005494:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8005496:	887b      	ldrh	r3, [r7, #2]
 8005498:	061a      	lsls	r2, r3, #24
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054a2:	431a      	orrs	r2, r3
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	4313      	orrs	r3, r2
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	0a12      	lsrs	r2, r2, #8
 80054b0:	b292      	uxth	r2, r2
 80054b2:	431a      	orrs	r2, r3
 80054b4:	4b14      	ldr	r3, [pc, #80]	; (8005508 <Displ_SetAddressWindow+0x90>)
 80054b6:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80054b8:	202a      	movs	r0, #42	; 0x2a
 80054ba:	f7ff ff77 	bl	80053ac <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80054be:	2200      	movs	r2, #0
 80054c0:	2104      	movs	r1, #4
 80054c2:	4811      	ldr	r0, [pc, #68]	; (8005508 <Displ_SetAddressWindow+0x90>)
 80054c4:	f7ff ff81 	bl	80053ca <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80054c8:	883b      	ldrh	r3, [r7, #0]
 80054ca:	061a      	lsls	r2, r3, #24
 80054cc:	883b      	ldrh	r3, [r7, #0]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054d4:	431a      	orrs	r2, r3
 80054d6:	88bb      	ldrh	r3, [r7, #4]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	b29b      	uxth	r3, r3
 80054dc:	4313      	orrs	r3, r2
 80054de:	88ba      	ldrh	r2, [r7, #4]
 80054e0:	0a12      	lsrs	r2, r2, #8
 80054e2:	b292      	uxth	r2, r2
 80054e4:	431a      	orrs	r2, r3
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <Displ_SetAddressWindow+0x90>)
 80054e8:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80054ea:	202b      	movs	r0, #43	; 0x2b
 80054ec:	f7ff ff5e 	bl	80053ac <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80054f0:	2200      	movs	r2, #0
 80054f2:	2104      	movs	r1, #4
 80054f4:	4804      	ldr	r0, [pc, #16]	; (8005508 <Displ_SetAddressWindow+0x90>)
 80054f6:	f7ff ff68 	bl	80053ca <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 80054fa:	202c      	movs	r0, #44	; 0x2c
 80054fc:	f7ff ff56 	bl	80053ac <Displ_WriteCommand>
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bd90      	pop	{r4, r7, pc}
 8005508:	200094f8 	.word	0x200094f8

0800550c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8005516:	2201      	movs	r2, #1
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	4809      	ldr	r0, [pc, #36]	; (8005540 <Displ_Init+0x34>)
 800551c:	f003 fa78 	bl	8008a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8005520:	2201      	movs	r2, #1
 8005522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005526:	4807      	ldr	r0, [pc, #28]	; (8005544 <Displ_Init+0x38>)
 8005528:	f003 fa72 	bl	8008a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 800552c:	f7ff ff64 	bl	80053f8 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f808 	bl	8005548 <Displ_Orientation>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40020800 	.word	0x40020800
 8005544:	40020000 	.word	0x40020000

08005548 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d837      	bhi.n	80055c8 <Displ_Orientation+0x80>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <Displ_Orientation+0x18>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005571 	.word	0x08005571
 8005564:	08005587 	.word	0x08005587
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080055b3 	.word	0x080055b3
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <Displ_Orientation+0xa0>)
 8005572:	2288      	movs	r2, #136	; 0x88
 8005574:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005576:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <Displ_Orientation+0xa4>)
 8005578:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800557c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <Displ_Orientation+0xa8>)
 8005580:	22f0      	movs	r2, #240	; 0xf0
 8005582:	801a      	strh	r2, [r3, #0]
			break;
 8005584:	e020      	b.n	80055c8 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <Displ_Orientation+0xa0>)
 8005588:	22e8      	movs	r2, #232	; 0xe8
 800558a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800558c:	4b17      	ldr	r3, [pc, #92]	; (80055ec <Displ_Orientation+0xa4>)
 800558e:	22f0      	movs	r2, #240	; 0xf0
 8005590:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <Displ_Orientation+0xa8>)
 8005594:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005598:	801a      	strh	r2, [r3, #0]
			break;
 800559a:	e015      	b.n	80055c8 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <Displ_Orientation+0xa0>)
 800559e:	2248      	movs	r2, #72	; 0x48
 80055a0:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <Displ_Orientation+0xa4>)
 80055a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055a8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <Displ_Orientation+0xa8>)
 80055ac:	22f0      	movs	r2, #240	; 0xf0
 80055ae:	801a      	strh	r2, [r3, #0]
			break;
 80055b0:	e00a      	b.n	80055c8 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <Displ_Orientation+0xa0>)
 80055b4:	2228      	movs	r2, #40	; 0x28
 80055b6:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <Displ_Orientation+0xa4>)
 80055ba:	22f0      	movs	r2, #240	; 0xf0
 80055bc:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <Displ_Orientation+0xa8>)
 80055c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055c4:	801a      	strh	r2, [r3, #0]
			break;
 80055c6:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80055c8:	2036      	movs	r0, #54	; 0x36
 80055ca:	f7ff feef 	bl	80053ac <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80055ce:	2200      	movs	r2, #0
 80055d0:	2101      	movs	r1, #1
 80055d2:	4805      	ldr	r0, [pc, #20]	; (80055e8 <Displ_Orientation+0xa0>)
 80055d4:	f7ff fef9 	bl	80053ca <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80055d8:	4a06      	ldr	r2, [pc, #24]	; (80055f4 <Displ_Orientation+0xac>)
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	7013      	strb	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200094fc 	.word	0x200094fc
 80055ec:	200084f4 	.word	0x200084f4
 80055f0:	200084f2 	.word	0x200084f2
 80055f4:	200084f0 	.word	0x200084f0

080055f8 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a05      	ldr	r2, [pc, #20]	; (800561c <HAL_SPI_ErrorCallback+0x24>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d102      	bne.n	8005610 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_SPI_ErrorCallback+0x28>)
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
	}
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40003800 	.word	0x40003800
 8005620:	20000034 	.word	0x20000034

08005624 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a05      	ldr	r2, [pc, #20]	; (8005648 <HAL_SPI_TxCpltCallback+0x24>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d102      	bne.n	800563c <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_SPI_TxCpltCallback+0x28>)
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40003800 	.word	0x40003800
 800564c:	20000034 	.word	0x20000034

08005650 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b08b      	sub	sp, #44	; 0x2c
 8005654:	af00      	add	r7, sp, #0
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	80fb      	strh	r3, [r7, #6]
 8005662:	4603      	mov	r3, r0
 8005664:	80bb      	strh	r3, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	807b      	strh	r3, [r7, #2]
 800566a:	4613      	mov	r3, r2
 800566c:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	4a4f      	ldr	r2, [pc, #316]	; (80057b0 <Displ_FillArea+0x160>)
 8005672:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005676:	4293      	cmp	r3, r2
 8005678:	f280 8096 	bge.w	80057a8 <Displ_FillArea+0x158>
 800567c:	88bb      	ldrh	r3, [r7, #4]
 800567e:	4a4d      	ldr	r2, [pc, #308]	; (80057b4 <Displ_FillArea+0x164>)
 8005680:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005684:	4293      	cmp	r3, r2
 8005686:	f280 808f 	bge.w	80057a8 <Displ_FillArea+0x158>
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 808b 	beq.w	80057a8 <Displ_FillArea+0x158>
 8005692:	883b      	ldrh	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8087 	beq.w	80057a8 <Displ_FillArea+0x158>

	x1=x + w - 1;
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	4413      	add	r3, r2
 80056a0:	3b01      	subs	r3, #1
 80056a2:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80056a4:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <Displ_FillArea+0x160>)
 80056a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056aa:	461a      	mov	r2, r3
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d903      	bls.n	80056ba <Displ_FillArea+0x6a>
		x1=_width;
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <Displ_FillArea+0x160>)
 80056b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b8:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80056ba:	88ba      	ldrh	r2, [r7, #4]
 80056bc:	883b      	ldrh	r3, [r7, #0]
 80056be:	4413      	add	r3, r2
 80056c0:	3b01      	subs	r3, #1
 80056c2:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80056c4:	4b3b      	ldr	r3, [pc, #236]	; (80057b4 <Displ_FillArea+0x164>)
 80056c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ca:	461a      	mov	r2, r3
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d903      	bls.n	80056da <Displ_FillArea+0x8a>
		y1=_height;
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <Displ_FillArea+0x164>)
 80056d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056d8:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80056da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	431a      	orrs	r2, r3
 80056e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	3301      	adds	r3, #1
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	6a39      	ldr	r1, [r7, #32]
 80056fc:	1a8a      	subs	r2, r1, r2
 80056fe:	3201      	adds	r2, #1
 8005700:	fb02 f303 	mul.w	r3, r2, r3
 8005704:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005706:	4b2c      	ldr	r3, [pc, #176]	; (80057b8 <Displ_FillArea+0x168>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005712:	d204      	bcs.n	800571e <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	3301      	adds	r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e002      	b.n	8005724 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 800571e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005722:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8005724:	2300      	movs	r3, #0
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
 8005728:	e007      	b.n	800573a <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	617a      	str	r2, [r7, #20]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	3301      	adds	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3f3      	bcc.n	800572a <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	b29a      	uxth	r2, r3
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	b29b      	uxth	r3, r3
 800574a:	88b9      	ldrh	r1, [r7, #4]
 800574c:	88f8      	ldrh	r0, [r7, #6]
 800574e:	f7ff fe93 	bl	8005478 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	0a9b      	lsrs	r3, r3, #10
 8005756:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	e00a      	b.n	8005774 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <Displ_FillArea+0x168>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff fe2e 	bl	80053ca <Displ_WriteData>
	for  (k=0;k<times;k++) {
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	3301      	adds	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
 8005774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	429a      	cmp	r2, r3
 800577a:	d3f0      	bcc.n	800575e <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 800577c:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <Displ_FillArea+0x168>)
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	005a      	lsls	r2, r3, #1
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	02db      	lsls	r3, r3, #11
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2200      	movs	r2, #0
 800578c:	4619      	mov	r1, r3
 800578e:	f7ff fe1c 	bl	80053ca <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <Displ_FillArea+0x168>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <Displ_FillArea+0x16c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d101      	bne.n	80057a0 <Displ_FillArea+0x150>
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <Displ_FillArea+0x170>)
 800579e:	e000      	b.n	80057a2 <Displ_FillArea+0x152>
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <Displ_FillArea+0x16c>)
 80057a2:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <Displ_FillArea+0x168>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e000      	b.n	80057aa <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80057a8:	bf00      	nop

}
 80057aa:	372c      	adds	r7, #44	; 0x2c
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}
 80057b0:	200084f2 	.word	0x200084f2
 80057b4:	200084f4 	.word	0x200084f4
 80057b8:	20000038 	.word	0x20000038
 80057bc:	200084f8 	.word	0x200084f8
 80057c0:	20008cf8 	.word	0x20008cf8

080057c4 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	4603      	mov	r3, r0
 80057cc:	80fb      	strh	r3, [r7, #6]
 80057ce:	460b      	mov	r3, r1
 80057d0:	80bb      	strh	r3, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <Displ_Pixel+0x44>)
 80057da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80057de:	4293      	cmp	r3, r2
 80057e0:	da0e      	bge.n	8005800 <Displ_Pixel+0x3c>
 80057e2:	88bb      	ldrh	r3, [r7, #4]
 80057e4:	4a09      	ldr	r2, [pc, #36]	; (800580c <Displ_Pixel+0x48>)
 80057e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80057ea:	4293      	cmp	r3, r2
 80057ec:	da08      	bge.n	8005800 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 80057ee:	88b9      	ldrh	r1, [r7, #4]
 80057f0:	88f8      	ldrh	r0, [r7, #6]
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2301      	movs	r3, #1
 80057f8:	2201      	movs	r2, #1
 80057fa:	f7ff ff29 	bl	8005650 <Displ_FillArea>
 80057fe:	e000      	b.n	8005802 <Displ_Pixel+0x3e>
        return;
 8005800:	bf00      	nop

}
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200084f2 	.word	0x200084f2
 800580c:	200084f4 	.word	0x200084f4

08005810 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	4623      	mov	r3, r4
 8005820:	80fb      	strh	r3, [r7, #6]
 8005822:	4603      	mov	r3, r0
 8005824:	80bb      	strh	r3, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	807b      	strh	r3, [r7, #2]
 800582a:	4613      	mov	r3, r2
 800582c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800582e:	887b      	ldrh	r3, [r7, #2]
 8005830:	f1c3 0301 	rsb	r3, r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005838:	2301      	movs	r3, #1
 800583a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	461a      	mov	r2, r3
 8005840:	03d2      	lsls	r2, r2, #15
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005852:	88f8      	ldrh	r0, [r7, #6]
 8005854:	88ba      	ldrh	r2, [r7, #4]
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	4413      	add	r3, r2
 800585a:	b29b      	uxth	r3, r3
 800585c:	883a      	ldrh	r2, [r7, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	f7ff ffb0 	bl	80057c4 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005864:	88f8      	ldrh	r0, [r7, #6]
 8005866:	88ba      	ldrh	r2, [r7, #4]
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	b29b      	uxth	r3, r3
 800586e:	883a      	ldrh	r2, [r7, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	f7ff ffa7 	bl	80057c4 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	4413      	add	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	88b9      	ldrh	r1, [r7, #4]
 8005880:	883a      	ldrh	r2, [r7, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff9e 	bl	80057c4 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8005888:	88fa      	ldrh	r2, [r7, #6]
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	88b9      	ldrh	r1, [r7, #4]
 8005892:	883a      	ldrh	r2, [r7, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff ff95 	bl	80057c4 <Displ_Pixel>

    while (x<y) {
 800589a:	e081      	b.n	80059a0 <Displ_drawCircle+0x190>
        if (f >= 0) {
 800589c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db0e      	blt.n	80058c2 <Displ_drawCircle+0xb2>
            y--;
 80058a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80058b0:	8a7b      	ldrh	r3, [r7, #18]
 80058b2:	3302      	adds	r3, #2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80058b8:	8afa      	ldrh	r2, [r7, #22]
 80058ba:	8a7b      	ldrh	r3, [r7, #18]
 80058bc:	4413      	add	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80058c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3301      	adds	r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80058ce:	8abb      	ldrh	r3, [r7, #20]
 80058d0:	3302      	adds	r3, #2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80058d6:	8afa      	ldrh	r2, [r7, #22]
 80058d8:	8abb      	ldrh	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	b29b      	uxth	r3, r3
 80058de:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	8a3b      	ldrh	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	b298      	uxth	r0, r3
 80058e8:	88ba      	ldrh	r2, [r7, #4]
 80058ea:	89fb      	ldrh	r3, [r7, #14]
 80058ec:	4413      	add	r3, r2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	883a      	ldrh	r2, [r7, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7ff ff66 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	8a3b      	ldrh	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	b298      	uxth	r0, r3
 8005900:	88ba      	ldrh	r2, [r7, #4]
 8005902:	89fb      	ldrh	r3, [r7, #14]
 8005904:	4413      	add	r3, r2
 8005906:	b29b      	uxth	r3, r3
 8005908:	883a      	ldrh	r2, [r7, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	f7ff ff5a 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	8a3b      	ldrh	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	b298      	uxth	r0, r3
 8005918:	88ba      	ldrh	r2, [r7, #4]
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	b29b      	uxth	r3, r3
 8005920:	883a      	ldrh	r2, [r7, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	f7ff ff4e 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	8a3b      	ldrh	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	b298      	uxth	r0, r3
 8005930:	88ba      	ldrh	r2, [r7, #4]
 8005932:	89fb      	ldrh	r3, [r7, #14]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	883a      	ldrh	r2, [r7, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	f7ff ff42 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	89fb      	ldrh	r3, [r7, #14]
 8005944:	4413      	add	r3, r2
 8005946:	b298      	uxth	r0, r3
 8005948:	88ba      	ldrh	r2, [r7, #4]
 800594a:	8a3b      	ldrh	r3, [r7, #16]
 800594c:	4413      	add	r3, r2
 800594e:	b29b      	uxth	r3, r3
 8005950:	883a      	ldrh	r2, [r7, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	f7ff ff36 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	89fb      	ldrh	r3, [r7, #14]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	b298      	uxth	r0, r3
 8005960:	88ba      	ldrh	r2, [r7, #4]
 8005962:	8a3b      	ldrh	r3, [r7, #16]
 8005964:	4413      	add	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	883a      	ldrh	r2, [r7, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	f7ff ff2a 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	89fb      	ldrh	r3, [r7, #14]
 8005974:	4413      	add	r3, r2
 8005976:	b298      	uxth	r0, r3
 8005978:	88ba      	ldrh	r2, [r7, #4]
 800597a:	8a3b      	ldrh	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	883a      	ldrh	r2, [r7, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	f7ff ff1e 	bl	80057c4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	89fb      	ldrh	r3, [r7, #14]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	b298      	uxth	r0, r3
 8005990:	88ba      	ldrh	r2, [r7, #4]
 8005992:	8a3b      	ldrh	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	883a      	ldrh	r2, [r7, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	f7ff ff12 	bl	80057c4 <Displ_Pixel>
    while (x<y) {
 80059a0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80059a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	f6ff af77 	blt.w	800589c <Displ_drawCircle+0x8c>
    }
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd90      	pop	{r4, r7, pc}

080059b8 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af02      	add	r7, sp, #8
 80059be:	4603      	mov	r3, r0
 80059c0:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <Displ_CLS+0x30>)
 80059c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	4b08      	ldr	r3, [pc, #32]	; (80059ec <Displ_CLS+0x34>)
 80059cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059d0:	b299      	uxth	r1, r3
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	460b      	mov	r3, r1
 80059d8:	2100      	movs	r1, #0
 80059da:	2000      	movs	r0, #0
 80059dc:	f7ff fe38 	bl	8005650 <Displ_FillArea>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200084f2 	.word	0x200084f2
 80059ec:	200084f4 	.word	0x200084f4

080059f0 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	4611      	mov	r1, r2
 80059fc:	461a      	mov	r2, r3
 80059fe:	4623      	mov	r3, r4
 8005a00:	80fb      	strh	r3, [r7, #6]
 8005a02:	4603      	mov	r3, r0
 8005a04:	80bb      	strh	r3, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	807b      	strh	r3, [r7, #2]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8005a0e:	887b      	ldrh	r3, [r7, #2]
 8005a10:	f1c3 0301 	rsb	r3, r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005a1c:	887b      	ldrh	r3, [r7, #2]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	03d2      	lsls	r2, r2, #15
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8005a2e:	887b      	ldrh	r3, [r7, #2]
 8005a30:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8005a32:	e095      	b.n	8005b60 <drawCircleHelper+0x170>
        if (f >= 0) {
 8005a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	db0e      	blt.n	8005a5a <drawCircleHelper+0x6a>
            y--;
 8005a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005a48:	8a7b      	ldrh	r3, [r7, #18]
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005a50:	8afa      	ldrh	r2, [r7, #22]
 8005a52:	8a7b      	ldrh	r3, [r7, #18]
 8005a54:	4413      	add	r3, r2
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005a5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3301      	adds	r3, #1
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005a66:	8abb      	ldrh	r3, [r7, #20]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8005a6e:	8afa      	ldrh	r2, [r7, #22]
 8005a70:	8abb      	ldrh	r3, [r7, #20]
 8005a72:	4413      	add	r3, r2
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8005a78:	787b      	ldrb	r3, [r7, #1]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d017      	beq.n	8005ab2 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	8a3b      	ldrh	r3, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	b298      	uxth	r0, r3
 8005a8a:	88ba      	ldrh	r2, [r7, #4]
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	4413      	add	r3, r2
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7ff fe95 	bl	80057c4 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	89fb      	ldrh	r3, [r7, #14]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	b298      	uxth	r0, r3
 8005aa2:	88ba      	ldrh	r2, [r7, #4]
 8005aa4:	8a3b      	ldrh	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005aac:	4619      	mov	r1, r3
 8005aae:	f7ff fe89 	bl	80057c4 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8005ab2:	787b      	ldrb	r3, [r7, #1]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d017      	beq.n	8005aec <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	8a3b      	ldrh	r3, [r7, #16]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	b298      	uxth	r0, r3
 8005ac4:	88ba      	ldrh	r2, [r7, #4]
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f7ff fe78 	bl	80057c4 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	89fb      	ldrh	r3, [r7, #14]
 8005ad8:	4413      	add	r3, r2
 8005ada:	b298      	uxth	r0, r3
 8005adc:	88ba      	ldrh	r2, [r7, #4]
 8005ade:	8a3b      	ldrh	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f7ff fe6c 	bl	80057c4 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8005aec:	787b      	ldrb	r3, [r7, #1]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d017      	beq.n	8005b26 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	b298      	uxth	r0, r3
 8005afe:	88ba      	ldrh	r2, [r7, #4]
 8005b00:	8a3b      	ldrh	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f7ff fe5b 	bl	80057c4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	8a3b      	ldrh	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	b298      	uxth	r0, r3
 8005b16:	88ba      	ldrh	r2, [r7, #4]
 8005b18:	89fb      	ldrh	r3, [r7, #14]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b20:	4619      	mov	r1, r3
 8005b22:	f7ff fe4f 	bl	80057c4 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8005b26:	787b      	ldrb	r3, [r7, #1]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	89fb      	ldrh	r3, [r7, #14]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	b298      	uxth	r0, r3
 8005b38:	88ba      	ldrh	r2, [r7, #4]
 8005b3a:	8a3b      	ldrh	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b42:	4619      	mov	r1, r3
 8005b44:	f7ff fe3e 	bl	80057c4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	8a3b      	ldrh	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	b298      	uxth	r0, r3
 8005b50:	88ba      	ldrh	r2, [r7, #4]
 8005b52:	89fb      	ldrh	r3, [r7, #14]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f7ff fe32 	bl	80057c4 <Displ_Pixel>
    while (x<y) {
 8005b60:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005b64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	f6ff af63 	blt.w	8005a34 <drawCircleHelper+0x44>
        }
    }
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd90      	pop	{r4, r7, pc}

08005b78 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b089      	sub	sp, #36	; 0x24
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	461a      	mov	r2, r3
 8005b86:	4623      	mov	r3, r4
 8005b88:	80fb      	strh	r3, [r7, #6]
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	80bb      	strh	r3, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	807b      	strh	r3, [r7, #2]
 8005b92:	4613      	mov	r3, r2
 8005b94:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	f1c3 0301 	rsb	r3, r3, #1
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8005ba4:	887b      	ldrh	r3, [r7, #2]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	03d2      	lsls	r2, r2, #15
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8005bba:	e0a7      	b.n	8005d0c <fillCircleHelper+0x194>
    if (f >= 0) {
 8005bbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	db0e      	blt.n	8005be2 <fillCircleHelper+0x6a>
      y--;
 8005bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8005bd0:	8a7b      	ldrh	r3, [r7, #18]
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8005bd8:	8afa      	ldrh	r2, [r7, #22]
 8005bda:	8a7b      	ldrh	r3, [r7, #18]
 8005bdc:	4413      	add	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8005be2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8005bee:	8abb      	ldrh	r3, [r7, #20]
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8005bf6:	8afa      	ldrh	r2, [r7, #22]
 8005bf8:	8abb      	ldrh	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8005c00:	787b      	ldrb	r3, [r7, #1]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d03d      	beq.n	8005c86 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	8a3b      	ldrh	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	b218      	sxth	r0, r3
 8005c14:	88ba      	ldrh	r2, [r7, #4]
 8005c16:	89fb      	ldrh	r3, [r7, #14]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	b219      	sxth	r1, r3
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	8a3b      	ldrh	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	b21c      	sxth	r4, r3
 8005c28:	88ba      	ldrh	r2, [r7, #4]
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c32:	4413      	add	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	b21a      	sxth	r2, r3
 8005c3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	4622      	mov	r2, r4
 8005c44:	f000 f8a1 	bl	8005d8a <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	89fb      	ldrh	r3, [r7, #14]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	b218      	sxth	r0, r3
 8005c52:	88ba      	ldrh	r2, [r7, #4]
 8005c54:	8a3b      	ldrh	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	b219      	sxth	r1, r3
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	4413      	add	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	b21c      	sxth	r4, r3
 8005c66:	88ba      	ldrh	r2, [r7, #4]
 8005c68:	8a3b      	ldrh	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c70:	4413      	add	r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3301      	adds	r3, #1
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	b21a      	sxth	r2, r3
 8005c7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	4622      	mov	r2, r4
 8005c82:	f000 f882 	bl	8005d8a <Displ_Line>
    }
    if (cornername & 0x2) {
 8005c86:	787b      	ldrb	r3, [r7, #1]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d03d      	beq.n	8005d0c <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	8a3b      	ldrh	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	b218      	sxth	r0, r3
 8005c9a:	88ba      	ldrh	r2, [r7, #4]
 8005c9c:	89fb      	ldrh	r3, [r7, #14]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	b219      	sxth	r1, r3
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	8a3b      	ldrh	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b21c      	sxth	r4, r3
 8005cae:	88ba      	ldrh	r2, [r7, #4]
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cb8:	4413      	add	r3, r2
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	b21a      	sxth	r2, r3
 8005cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	4622      	mov	r2, r4
 8005cca:	f000 f85e 	bl	8005d8a <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	89fb      	ldrh	r3, [r7, #14]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	b218      	sxth	r0, r3
 8005cd8:	88ba      	ldrh	r2, [r7, #4]
 8005cda:	8a3b      	ldrh	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	b219      	sxth	r1, r3
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	89fb      	ldrh	r3, [r7, #14]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	b21c      	sxth	r4, r3
 8005cec:	88ba      	ldrh	r2, [r7, #4]
 8005cee:	8a3b      	ldrh	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cf6:	4413      	add	r3, r2
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b21a      	sxth	r2, r3
 8005d00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	4622      	mov	r2, r4
 8005d08:	f000 f83f 	bl	8005d8a <Displ_Line>
  while (x<y) {
 8005d0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	f6ff af51 	blt.w	8005bbc <fillCircleHelper+0x44>
    }
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd90      	pop	{r4, r7, pc}

08005d24 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	4623      	mov	r3, r4
 8005d34:	80fb      	strh	r3, [r7, #6]
 8005d36:	4603      	mov	r3, r0
 8005d38:	80bb      	strh	r3, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	807b      	strh	r3, [r7, #2]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8005d42:	88ba      	ldrh	r2, [r7, #4]
 8005d44:	887b      	ldrh	r3, [r7, #2]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	b219      	sxth	r1, r3
 8005d4c:	88ba      	ldrh	r2, [r7, #4]
 8005d4e:	887b      	ldrh	r3, [r7, #2]
 8005d50:	4413      	add	r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	b21c      	sxth	r4, r3
 8005d56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d5a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d5e:	883b      	ldrh	r3, [r7, #0]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4623      	mov	r3, r4
 8005d64:	f000 f811 	bl	8005d8a <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8005d68:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d70:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d74:	883b      	ldrh	r3, [r7, #0]
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	f7ff fefb 	bl	8005b78 <fillCircleHelper>
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd90      	pop	{r4, r7, pc}

08005d8a <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005d8a:	b590      	push	{r4, r7, lr}
 8005d8c:	b08b      	sub	sp, #44	; 0x2c
 8005d8e:	af02      	add	r7, sp, #8
 8005d90:	4604      	mov	r4, r0
 8005d92:	4608      	mov	r0, r1
 8005d94:	4611      	mov	r1, r2
 8005d96:	461a      	mov	r2, r3
 8005d98:	4623      	mov	r3, r4
 8005d9a:	80fb      	strh	r3, [r7, #6]
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	80bb      	strh	r3, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
 8005da4:	4613      	mov	r3, r2
 8005da6:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005da8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005dac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d123      	bne.n	8005dfc <Displ_Line+0x72>
    	if (y1>y0){
 8005db4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	dd0e      	ble.n	8005dde <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005dc0:	88f8      	ldrh	r0, [r7, #6]
 8005dc2:	88b9      	ldrh	r1, [r7, #4]
 8005dc4:	883a      	ldrh	r2, [r7, #0]
 8005dc6:	88bb      	ldrh	r3, [r7, #4]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f7ff fc3a 	bl	8005650 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8005ddc:	e103      	b.n	8005fe6 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005dde:	88f8      	ldrh	r0, [r7, #6]
 8005de0:	8839      	ldrh	r1, [r7, #0]
 8005de2:	88ba      	ldrh	r2, [r7, #4]
 8005de4:	883b      	ldrh	r3, [r7, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3301      	adds	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4613      	mov	r3, r2
 8005df4:	2201      	movs	r2, #1
 8005df6:	f7ff fc2b 	bl	8005650 <Displ_FillArea>
    	return;
 8005dfa:	e0f4      	b.n	8005fe6 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005dfc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005e00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d121      	bne.n	8005e4c <Displ_Line+0xc2>
    	if (x1>x0)
 8005e08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	dd0d      	ble.n	8005e30 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8005e14:	88f8      	ldrh	r0, [r7, #6]
 8005e16:	88b9      	ldrh	r1, [r7, #4]
 8005e18:	887a      	ldrh	r2, [r7, #2]
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3301      	adds	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f7ff fc11 	bl	8005650 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8005e2e:	e0da      	b.n	8005fe6 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8005e30:	8878      	ldrh	r0, [r7, #2]
 8005e32:	8839      	ldrh	r1, [r7, #0]
 8005e34:	88fa      	ldrh	r2, [r7, #6]
 8005e36:	887b      	ldrh	r3, [r7, #2]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2301      	movs	r3, #1
 8005e46:	f7ff fc03 	bl	8005650 <Displ_FillArea>
    	return;
 8005e4a:	e0cc      	b.n	8005fe6 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005e4c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	dd05      	ble.n	8005e64 <Displ_Line+0xda>
 8005e58:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	e004      	b.n	8005e6e <Displ_Line+0xe4>
 8005e64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005e68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e6c:	1ad2      	subs	r2, r2, r3
 8005e6e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e76:	4299      	cmp	r1, r3
 8005e78:	dd05      	ble.n	8005e86 <Displ_Line+0xfc>
 8005e7a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	e004      	b.n	8005e90 <Displ_Line+0x106>
 8005e86:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005e8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e8e:	1acb      	subs	r3, r1, r3
 8005e90:	429a      	cmp	r2, r3
 8005e92:	bfcc      	ite	gt
 8005e94:	2301      	movgt	r3, #1
 8005e96:	2300      	movle	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005e9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	827b      	strh	r3, [r7, #18]
 8005ea8:	88bb      	ldrh	r3, [r7, #4]
 8005eaa:	80fb      	strh	r3, [r7, #6]
 8005eac:	8a7b      	ldrh	r3, [r7, #18]
 8005eae:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	823b      	strh	r3, [r7, #16]
 8005eb4:	883b      	ldrh	r3, [r7, #0]
 8005eb6:	807b      	strh	r3, [r7, #2]
 8005eb8:	8a3b      	ldrh	r3, [r7, #16]
 8005eba:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005ebc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	dd0b      	ble.n	8005ee0 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	81fb      	strh	r3, [r7, #14]
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	80fb      	strh	r3, [r7, #6]
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005ed4:	88bb      	ldrh	r3, [r7, #4]
 8005ed6:	81bb      	strh	r3, [r7, #12]
 8005ed8:	883b      	ldrh	r3, [r7, #0]
 8005eda:	80bb      	strh	r3, [r7, #4]
 8005edc:	89bb      	ldrh	r3, [r7, #12]
 8005ede:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005ee0:	887a      	ldrh	r2, [r7, #2]
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005eee:	105b      	asrs	r3, r3, #1
 8005ef0:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005ef2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ef6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	da07      	bge.n	8005f0e <Displ_Line+0x184>
        dy = y1-y0;
 8005efe:	883a      	ldrh	r2, [r7, #0]
 8005f00:	88bb      	ldrh	r3, [r7, #4]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	837b      	strh	r3, [r7, #26]
 8005f0c:	e007      	b.n	8005f1e <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005f0e:	88ba      	ldrh	r2, [r7, #4]
 8005f10:	883b      	ldrh	r3, [r7, #0]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8005f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1c:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	83bb      	strh	r3, [r7, #28]
 8005f26:	e03a      	b.n	8005f9e <Displ_Line+0x214>
    	l++;
 8005f28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8005f34:	8b3a      	ldrh	r2, [r7, #24]
 8005f36:	8afb      	ldrh	r3, [r7, #22]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005f3e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da25      	bge.n	8005f92 <Displ_Line+0x208>
        	if (steep) {
 8005f46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8005f4e:	88b8      	ldrh	r0, [r7, #4]
 8005f50:	88f9      	ldrh	r1, [r7, #6]
 8005f52:	8bfa      	ldrh	r2, [r7, #30]
 8005f54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f7ff fb78 	bl	8005650 <Displ_FillArea>
 8005f60:	e007      	b.n	8005f72 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8005f62:	88f8      	ldrh	r0, [r7, #6]
 8005f64:	88b9      	ldrh	r1, [r7, #4]
 8005f66:	8bfa      	ldrh	r2, [r7, #30]
 8005f68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f7ff fb6f 	bl	8005650 <Displ_FillArea>
            }
            y0 += ystep;
 8005f72:	88ba      	ldrh	r2, [r7, #4]
 8005f74:	8b7b      	ldrh	r3, [r7, #26]
 8005f76:	4413      	add	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005f80:	8bbb      	ldrh	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8005f88:	8b3a      	ldrh	r2, [r7, #24]
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005f92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	83bb      	strh	r3, [r7, #28]
 8005f9e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005fa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	ddbe      	ble.n	8005f28 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005faa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d019      	beq.n	8005fe6 <Displ_Line+0x25c>
    	if (steep) {
 8005fb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00b      	beq.n	8005fd2 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8005fba:	88b8      	ldrh	r0, [r7, #4]
 8005fbc:	88f9      	ldrh	r1, [r7, #6]
 8005fbe:	8bfb      	ldrh	r3, [r7, #30]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f7ff fb40 	bl	8005650 <Displ_FillArea>
 8005fd0:	e009      	b.n	8005fe6 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8005fd2:	88f8      	ldrh	r0, [r7, #6]
 8005fd4:	88b9      	ldrh	r1, [r7, #4]
 8005fd6:	8bfb      	ldrh	r3, [r7, #30]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f7ff fb35 	bl	8005650 <Displ_FillArea>
    	}
    }
}
 8005fe6:	3724      	adds	r7, #36	; 0x24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}

08005fec <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	80fb      	strh	r3, [r7, #6]
 8005ffe:	4603      	mov	r3, r0
 8006000:	80bb      	strh	r3, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	807b      	strh	r3, [r7, #2]
 8006006:	4613      	mov	r3, r2
 8006008:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 800600a:	88f8      	ldrh	r0, [r7, #6]
 800600c:	88b9      	ldrh	r1, [r7, #4]
 800600e:	887a      	ldrh	r2, [r7, #2]
 8006010:	8b3c      	ldrh	r4, [r7, #24]
 8006012:	8bbb      	ldrh	r3, [r7, #28]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	4623      	mov	r3, r4
 8006018:	f7ff fb1a 	bl	8005650 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 800601c:	88f8      	ldrh	r0, [r7, #6]
 800601e:	88ba      	ldrh	r2, [r7, #4]
 8006020:	883b      	ldrh	r3, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	b29a      	uxth	r2, r3
 8006026:	8b3b      	ldrh	r3, [r7, #24]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b299      	uxth	r1, r3
 800602c:	887a      	ldrh	r2, [r7, #2]
 800602e:	8b3c      	ldrh	r4, [r7, #24]
 8006030:	8bbb      	ldrh	r3, [r7, #28]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4623      	mov	r3, r4
 8006036:	f7ff fb0b 	bl	8005650 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 800603a:	88f8      	ldrh	r0, [r7, #6]
 800603c:	88b9      	ldrh	r1, [r7, #4]
 800603e:	8b3a      	ldrh	r2, [r7, #24]
 8006040:	883c      	ldrh	r4, [r7, #0]
 8006042:	8bbb      	ldrh	r3, [r7, #28]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4623      	mov	r3, r4
 8006048:	f7ff fb02 	bl	8005650 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	887b      	ldrh	r3, [r7, #2]
 8006050:	4413      	add	r3, r2
 8006052:	b29a      	uxth	r2, r3
 8006054:	8b3b      	ldrh	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	b298      	uxth	r0, r3
 800605a:	88b9      	ldrh	r1, [r7, #4]
 800605c:	8b3a      	ldrh	r2, [r7, #24]
 800605e:	883c      	ldrh	r4, [r7, #0]
 8006060:	8bbb      	ldrh	r3, [r7, #28]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4623      	mov	r3, r4
 8006066:	f7ff faf3 	bl	8005650 <Displ_FillArea>
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}

08006072 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8006072:	b590      	push	{r4, r7, lr}
 8006074:	b085      	sub	sp, #20
 8006076:	af02      	add	r7, sp, #8
 8006078:	4604      	mov	r4, r0
 800607a:	4608      	mov	r0, r1
 800607c:	4611      	mov	r1, r2
 800607e:	461a      	mov	r2, r3
 8006080:	4623      	mov	r3, r4
 8006082:	80fb      	strh	r3, [r7, #6]
 8006084:	4603      	mov	r3, r0
 8006086:	80bb      	strh	r3, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
 800608c:	4613      	mov	r3, r2
 800608e:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8006090:	f9b7 4000 	ldrsh.w	r4, [r7]
 8006094:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006098:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800609c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80060a0:	8c3b      	ldrh	r3, [r7, #32]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4623      	mov	r3, r4
 80060a6:	f7ff fe70 	bl	8005d8a <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80060aa:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80060ae:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80060b2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80060b6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80060ba:	8c3b      	ldrh	r3, [r7, #32]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4623      	mov	r3, r4
 80060c0:	f7ff fe63 	bl	8005d8a <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 80060c4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80060c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060cc:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80060d0:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80060d4:	8c3b      	ldrh	r3, [r7, #32]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	4623      	mov	r3, r4
 80060da:	f7ff fe56 	bl	8005d8a <Displ_Line>
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}

080060e6 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80060e6:	b590      	push	{r4, r7, lr}
 80060e8:	b091      	sub	sp, #68	; 0x44
 80060ea:	af02      	add	r7, sp, #8
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	461a      	mov	r2, r3
 80060f4:	4623      	mov	r3, r4
 80060f6:	80fb      	strh	r3, [r7, #6]
 80060f8:	4603      	mov	r3, r0
 80060fa:	80bb      	strh	r3, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]
 8006100:	4613      	mov	r3, r2
 8006102:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8006104:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006108:	f9b7 3000 	ldrsh.w	r3, [r7]
 800610c:	429a      	cmp	r2, r3
 800610e:	dd0b      	ble.n	8006128 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006110:	88bb      	ldrh	r3, [r7, #4]
 8006112:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006114:	883b      	ldrh	r3, [r7, #0]
 8006116:	80bb      	strh	r3, [r7, #4]
 8006118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800611a:	803b      	strh	r3, [r7, #0]
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	80fb      	strh	r3, [r7, #6]
 8006124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006126:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8006128:	f9b7 2000 	ldrsh.w	r2, [r7]
 800612c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006130:	429a      	cmp	r2, r3
 8006132:	dd0f      	ble.n	8006154 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8006134:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006138:	847b      	strh	r3, [r7, #34]	; 0x22
 800613a:	883b      	ldrh	r3, [r7, #0]
 800613c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006140:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006142:	803b      	strh	r3, [r7, #0]
 8006144:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006148:	843b      	strh	r3, [r7, #32]
 800614a:	887b      	ldrh	r3, [r7, #2]
 800614c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006150:	8c3b      	ldrh	r3, [r7, #32]
 8006152:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8006154:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006158:	f9b7 3000 	ldrsh.w	r3, [r7]
 800615c:	429a      	cmp	r2, r3
 800615e:	dd0b      	ble.n	8006178 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006160:	88bb      	ldrh	r3, [r7, #4]
 8006162:	83fb      	strh	r3, [r7, #30]
 8006164:	883b      	ldrh	r3, [r7, #0]
 8006166:	80bb      	strh	r3, [r7, #4]
 8006168:	8bfb      	ldrh	r3, [r7, #30]
 800616a:	803b      	strh	r3, [r7, #0]
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	83bb      	strh	r3, [r7, #28]
 8006170:	887b      	ldrh	r3, [r7, #2]
 8006172:	80fb      	strh	r3, [r7, #6]
 8006174:	8bbb      	ldrh	r3, [r7, #28]
 8006176:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8006178:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800617c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006180:	429a      	cmp	r2, r3
 8006182:	d136      	bne.n	80061f2 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800618a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 800618c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006190:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006194:	429a      	cmp	r2, r3
 8006196:	da02      	bge.n	800619e <Displ_fillTriangle+0xb8>
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800619c:	e007      	b.n	80061ae <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800619e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80061a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80061a6:	429a      	cmp	r2, r3
 80061a8:	dd01      	ble.n	80061ae <Displ_fillTriangle+0xc8>
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80061ae:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80061b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80061b6:	429a      	cmp	r2, r3
 80061b8:	da03      	bge.n	80061c2 <Displ_fillTriangle+0xdc>
 80061ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80061c0:	e008      	b.n	80061d4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80061c2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80061c6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80061ca:	429a      	cmp	r2, r3
 80061cc:	dd02      	ble.n	80061d4 <Displ_fillTriangle+0xee>
 80061ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061d2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 80061d4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80061d8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80061dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80061e0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80061e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4623      	mov	r3, r4
 80061ec:	f7ff fdcd 	bl	8005d8a <Displ_Line>
        return;
 80061f0:	e0d2      	b.n	8006398 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80061fc:	883a      	ldrh	r2, [r7, #0]
 80061fe:	88bb      	ldrh	r3, [r7, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	b29b      	uxth	r3, r3
 8006204:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8006206:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	b29b      	uxth	r3, r3
 8006210:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8006212:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800621e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	b29b      	uxth	r3, r3
 8006228:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800622a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800622e:	883b      	ldrh	r3, [r7, #0]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	b29b      	uxth	r3, r3
 8006234:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8006236:	2300      	movs	r3, #0
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800623e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006242:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006246:	429a      	cmp	r2, r3
 8006248:	d102      	bne.n	8006250 <Displ_fillTriangle+0x16a>
 800624a:	883b      	ldrh	r3, [r7, #0]
 800624c:	863b      	strh	r3, [r7, #48]	; 0x30
 800624e:	e003      	b.n	8006258 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8006250:	883b      	ldrh	r3, [r7, #0]
 8006252:	3b01      	subs	r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8006258:	88bb      	ldrh	r3, [r7, #4]
 800625a:	867b      	strh	r3, [r7, #50]	; 0x32
 800625c:	e03d      	b.n	80062da <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 800625e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006264:	fb92 f3f3 	sdiv	r3, r2, r3
 8006268:	b29a      	uxth	r2, r3
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	4413      	add	r3, r2
 800626e:	b29b      	uxth	r3, r3
 8006270:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006272:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006278:	fb92 f3f3 	sdiv	r3, r2, r3
 800627c:	b29a      	uxth	r2, r3
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	4413      	add	r3, r2
 8006282:	b29b      	uxth	r3, r3
 8006284:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8006286:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800628a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628c:	4413      	add	r3, r2
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006296:	4413      	add	r3, r2
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800629a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800629e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80062a2:	429a      	cmp	r2, r3
 80062a4:	dd05      	ble.n	80062b2 <Displ_fillTriangle+0x1cc>
 80062a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062a8:	81bb      	strh	r3, [r7, #12]
 80062aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80062ae:	89bb      	ldrh	r3, [r7, #12]
 80062b0:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80062b2:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80062b6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80062ba:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80062be:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80062c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4623      	mov	r3, r4
 80062ca:	f7ff fd5e 	bl	8005d8a <Displ_Line>
    for(y=y0; y<=last; y++) {
 80062ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80062da:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80062de:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80062e2:	429a      	cmp	r2, r3
 80062e4:	ddbb      	ble.n	800625e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80062e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062ea:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80062ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80062f2:	1a8a      	subs	r2, r1, r2
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80062fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062fe:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006302:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006306:	1a8a      	subs	r2, r1, r2
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800630e:	e03d      	b.n	800638c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8006310:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006316:	fb92 f3f3 	sdiv	r3, r2, r3
 800631a:	b29a      	uxth	r2, r3
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	4413      	add	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006324:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632a:	fb92 f3f3 	sdiv	r3, r2, r3
 800632e:	b29a      	uxth	r2, r3
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	4413      	add	r3, r2
 8006334:	b29b      	uxth	r3, r3
 8006336:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8006338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800633c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633e:	4413      	add	r3, r2
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006348:	4413      	add	r3, r2
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800634c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006350:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006354:	429a      	cmp	r2, r3
 8006356:	dd05      	ble.n	8006364 <Displ_fillTriangle+0x27e>
 8006358:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800635a:	81fb      	strh	r3, [r7, #14]
 800635c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800635e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8006364:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006368:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800636c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006370:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8006374:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4623      	mov	r3, r4
 800637c:	f7ff fd05 	bl	8005d8a <Displ_Line>
    for(; y<=y2; y++) {
 8006380:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006384:	b29b      	uxth	r3, r3
 8006386:	3301      	adds	r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	867b      	strh	r3, [r7, #50]	; 0x32
 800638c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006390:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006394:	429a      	cmp	r2, r3
 8006396:	ddbb      	ble.n	8006310 <Displ_fillTriangle+0x22a>
    }
}
 8006398:	373c      	adds	r7, #60	; 0x3c
 800639a:	46bd      	mov	sp, r7
 800639c:	bd90      	pop	{r4, r7, pc}
	...

080063a0 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80063a0:	b082      	sub	sp, #8
 80063a2:	b590      	push	{r4, r7, lr}
 80063a4:	b08f      	sub	sp, #60	; 0x3c
 80063a6:	af02      	add	r7, sp, #8
 80063a8:	647b      	str	r3, [r7, #68]	; 0x44
 80063aa:	4603      	mov	r3, r0
 80063ac:	80fb      	strh	r3, [r7, #6]
 80063ae:	460b      	mov	r3, r1
 80063b0:	80bb      	strh	r3, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80063b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063ba:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80063bc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d102      	bne.n	80063ca <Displ_WChar+0x2a>
		wsize<<= 1;
 80063c4:	7efb      	ldrb	r3, [r7, #27]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 80063ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063d2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80063dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	3b20      	subs	r3, #32
 80063e2:	4619      	mov	r1, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80063ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d005      	beq.n	8006402 <Displ_WChar+0x62>
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d107      	bne.n	800640a <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 80063fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063fe:	61fb      	str	r3, [r7, #28]
			break;
 8006400:	e005      	b.n	800640e <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	61fb      	str	r3, [r7, #28]
			break;
 8006408:	e001      	b.n	800640e <Displ_WChar+0x6e>
		default:
			mask=0x80;
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 800640e:	4b68      	ldr	r3, [pc, #416]	; (80065b0 <Displ_WChar+0x210>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006414:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	b21a      	sxth	r2, r3
 800641c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	b29b      	uxth	r3, r3
 8006424:	b21b      	sxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b21b      	sxth	r3, r3
 800642a:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 800642c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	b21a      	sxth	r2, r3
 8006434:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006438:	0a1b      	lsrs	r3, r3, #8
 800643a:	b29b      	uxth	r3, r3
 800643c:	b21b      	sxth	r3, r3
 800643e:	4313      	orrs	r3, r2
 8006440:	b21b      	sxth	r3, r3
 8006442:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8006444:	2300      	movs	r3, #0
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006448:	e06f      	b.n	800652a <Displ_WChar+0x18a>
		b=0;
 800644a:	2300      	movs	r3, #0
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 800644e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006452:	2b02      	cmp	r3, #2
 8006454:	d015      	beq.n	8006482 <Displ_WChar+0xe2>
 8006456:	2b03      	cmp	r3, #3
 8006458:	d120      	bne.n	800649c <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	4413      	add	r3, r2
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	041a      	lsls	r2, r3, #16
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	3301      	adds	r3, #1
 8006468:	6939      	ldr	r1, [r7, #16]
 800646a:	440b      	add	r3, r1
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	4313      	orrs	r3, r2
 8006472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006474:	3202      	adds	r2, #2
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	440a      	add	r2, r1
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	4313      	orrs	r3, r2
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006480:	e011      	b.n	80064a6 <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	4413      	add	r3, r2
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800648e:	3201      	adds	r2, #1
 8006490:	6939      	ldr	r1, [r7, #16]
 8006492:	440a      	add	r2, r1
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	4313      	orrs	r3, r2
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800649a:	e004      	b.n	80064a6 <Displ_WChar+0x106>
			default:
				b=pos[i];
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	4413      	add	r3, r2
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
 80064aa:	e032      	b.n	8006512 <Displ_WChar+0x172>
			if((b << j) & mask)  {
 80064ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	409a      	lsls	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d014      	beq.n	80064e4 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	623a      	str	r2, [r7, #32]
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	897a      	ldrh	r2, [r7, #10]
 80064c8:	801a      	strh	r2, [r3, #0]
				if (size==2){
 80064ca:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d11c      	bne.n	800650c <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	623a      	str	r2, [r7, #32]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	897a      	ldrh	r2, [r7, #10]
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	e013      	b.n	800650c <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	623a      	str	r2, [r7, #32]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	893a      	ldrh	r2, [r7, #8]
 80064f2:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 80064f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d107      	bne.n	800650c <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	623a      	str	r2, [r7, #32]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	893a      	ldrh	r2, [r7, #8]
 800650a:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	3301      	adds	r3, #1
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006516:	461a      	mov	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	4293      	cmp	r3, r2
 800651c:	d3c6      	bcc.n	80064ac <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 800651e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006522:	461a      	mov	r2, r3
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	4413      	add	r3, r2
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	429a      	cmp	r2, r3
 8006530:	d38b      	bcc.n	800644a <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8006538:	7efb      	ldrb	r3, [r7, #27]
 800653a:	b29a      	uxth	r2, r3
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	4413      	add	r3, r2
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29c      	uxth	r4, r3
 8006546:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800654a:	88bb      	ldrh	r3, [r7, #4]
 800654c:	4413      	add	r3, r2
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	88b9      	ldrh	r1, [r7, #4]
 8006556:	88f8      	ldrh	r0, [r7, #6]
 8006558:	4622      	mov	r2, r4
 800655a:	f7fe ff8d 	bl	8005478 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006564:	d90b      	bls.n	800657e <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8006566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f240 33ad 	movw	r3, #941	; 0x3ad
 8006574:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <Displ_WChar+0x214>)
 8006576:	4910      	ldr	r1, [pc, #64]	; (80065b8 <Displ_WChar+0x218>)
 8006578:	4810      	ldr	r0, [pc, #64]	; (80065bc <Displ_WChar+0x21c>)
 800657a:	f7fe fcb1 	bl	8004ee0 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <Displ_WChar+0x210>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	6a39      	ldr	r1, [r7, #32]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe ff1f 	bl	80053ca <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800658c:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <Displ_WChar+0x210>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <Displ_WChar+0x220>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d101      	bne.n	800659a <Displ_WChar+0x1fa>
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <Displ_WChar+0x224>)
 8006598:	e000      	b.n	800659c <Displ_WChar+0x1fc>
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <Displ_WChar+0x220>)
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <Displ_WChar+0x210>)
 800659e:	6013      	str	r3, [r2, #0]

}
 80065a0:	bf00      	nop
 80065a2:	3734      	adds	r7, #52	; 0x34
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80065aa:	b002      	add	sp, #8
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000038 	.word	0x20000038
 80065b4:	080154bc 	.word	0x080154bc
 80065b8:	08011390 	.word	0x08011390
 80065bc:	080113b0 	.word	0x080113b0
 80065c0:	200084f8 	.word	0x200084f8
 80065c4:	20008cf8 	.word	0x20008cf8

080065c8 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	461a      	mov	r2, r3
 80065d6:	4623      	mov	r3, r4
 80065d8:	80fb      	strh	r3, [r7, #6]
 80065da:	4603      	mov	r3, r0
 80065dc:	80bb      	strh	r3, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	807b      	strh	r3, [r7, #2]
 80065e2:	4613      	mov	r3, r2
 80065e4:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80065e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80065ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065ee:	4293      	cmp	r3, r2
 80065f0:	bfa8      	it	ge
 80065f2:	4613      	movge	r3, r2
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	0fda      	lsrs	r2, r3, #31
 80065f8:	4413      	add	r3, r2
 80065fa:	105b      	asrs	r3, r3, #1
 80065fc:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80065fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006606:	429a      	cmp	r2, r3
 8006608:	dd01      	ble.n	800660e <Displ_drawRoundRect+0x46>
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	8c3b      	ldrh	r3, [r7, #32]
 8006612:	4413      	add	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	b218      	sxth	r0, r3
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	4413      	add	r3, r2
 800661e:	b29a      	uxth	r2, r3
 8006620:	8c3b      	ldrh	r3, [r7, #32]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29b      	uxth	r3, r3
 800662a:	b21a      	sxth	r2, r3
 800662c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006630:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	4623      	mov	r3, r4
 800663a:	f7ff fba6 	bl	8005d8a <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 800663e:	88fa      	ldrh	r2, [r7, #6]
 8006640:	8c3b      	ldrh	r3, [r7, #32]
 8006642:	4413      	add	r3, r2
 8006644:	b29b      	uxth	r3, r3
 8006646:	b218      	sxth	r0, r3
 8006648:	88ba      	ldrh	r2, [r7, #4]
 800664a:	883b      	ldrh	r3, [r7, #0]
 800664c:	4413      	add	r3, r2
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	b219      	sxth	r1, r3
 8006656:	88fa      	ldrh	r2, [r7, #6]
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	4413      	add	r3, r2
 800665c:	b29a      	uxth	r2, r3
 800665e:	8c3b      	ldrh	r3, [r7, #32]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	b21c      	sxth	r4, r3
 800666a:	88ba      	ldrh	r2, [r7, #4]
 800666c:	883b      	ldrh	r3, [r7, #0]
 800666e:	4413      	add	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	b21a      	sxth	r2, r3
 8006678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	4622      	mov	r2, r4
 8006680:	f7ff fb83 	bl	8005d8a <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8006684:	88ba      	ldrh	r2, [r7, #4]
 8006686:	8c3b      	ldrh	r3, [r7, #32]
 8006688:	4413      	add	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	b219      	sxth	r1, r3
 800668e:	88ba      	ldrh	r2, [r7, #4]
 8006690:	883b      	ldrh	r3, [r7, #0]
 8006692:	4413      	add	r3, r2
 8006694:	b29a      	uxth	r2, r3
 8006696:	8c3b      	ldrh	r3, [r7, #32]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29b      	uxth	r3, r3
 80066a0:	b21c      	sxth	r4, r3
 80066a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80066aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4623      	mov	r3, r4
 80066b0:	f7ff fb6b 	bl	8005d8a <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	4413      	add	r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29b      	uxth	r3, r3
 80066c0:	b218      	sxth	r0, r3
 80066c2:	88ba      	ldrh	r2, [r7, #4]
 80066c4:	8c3b      	ldrh	r3, [r7, #32]
 80066c6:	4413      	add	r3, r2
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	b219      	sxth	r1, r3
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	887b      	ldrh	r3, [r7, #2]
 80066d0:	4413      	add	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	b21c      	sxth	r4, r3
 80066da:	88ba      	ldrh	r2, [r7, #4]
 80066dc:	883b      	ldrh	r3, [r7, #0]
 80066de:	4413      	add	r3, r2
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	8c3b      	ldrh	r3, [r7, #32]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	b21a      	sxth	r2, r3
 80066ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	4622      	mov	r2, r4
 80066f6:	f7ff fb48 	bl	8005d8a <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	8c3b      	ldrh	r3, [r7, #32]
 80066fe:	4413      	add	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	b218      	sxth	r0, r3
 8006704:	88ba      	ldrh	r2, [r7, #4]
 8006706:	8c3b      	ldrh	r3, [r7, #32]
 8006708:	4413      	add	r3, r2
 800670a:	b29b      	uxth	r3, r3
 800670c:	b219      	sxth	r1, r3
 800670e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2301      	movs	r3, #1
 8006718:	f7ff f96a 	bl	80059f0 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	887b      	ldrh	r3, [r7, #2]
 8006720:	4413      	add	r3, r2
 8006722:	b29a      	uxth	r2, r3
 8006724:	8c3b      	ldrh	r3, [r7, #32]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29b      	uxth	r3, r3
 800672e:	b218      	sxth	r0, r3
 8006730:	88ba      	ldrh	r2, [r7, #4]
 8006732:	8c3b      	ldrh	r3, [r7, #32]
 8006734:	4413      	add	r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	b219      	sxth	r1, r3
 800673a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800673e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2302      	movs	r3, #2
 8006744:	f7ff f954 	bl	80059f0 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	887b      	ldrh	r3, [r7, #2]
 800674c:	4413      	add	r3, r2
 800674e:	b29a      	uxth	r2, r3
 8006750:	8c3b      	ldrh	r3, [r7, #32]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29b      	uxth	r3, r3
 800675a:	b218      	sxth	r0, r3
 800675c:	88ba      	ldrh	r2, [r7, #4]
 800675e:	883b      	ldrh	r3, [r7, #0]
 8006760:	4413      	add	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	8c3b      	ldrh	r3, [r7, #32]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29b      	uxth	r3, r3
 800676e:	b219      	sxth	r1, r3
 8006770:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2304      	movs	r3, #4
 800677a:	f7ff f939 	bl	80059f0 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	8c3b      	ldrh	r3, [r7, #32]
 8006782:	4413      	add	r3, r2
 8006784:	b29b      	uxth	r3, r3
 8006786:	b218      	sxth	r0, r3
 8006788:	88ba      	ldrh	r2, [r7, #4]
 800678a:	883b      	ldrh	r3, [r7, #0]
 800678c:	4413      	add	r3, r2
 800678e:	b29a      	uxth	r2, r3
 8006790:	8c3b      	ldrh	r3, [r7, #32]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29b      	uxth	r3, r3
 800679a:	b219      	sxth	r1, r3
 800679c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80067a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2308      	movs	r3, #8
 80067a6:	f7ff f923 	bl	80059f0 <drawCircleHelper>
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd90      	pop	{r4, r7, pc}

080067b2 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80067b2:	b590      	push	{r4, r7, lr}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af02      	add	r7, sp, #8
 80067b8:	4604      	mov	r4, r0
 80067ba:	4608      	mov	r0, r1
 80067bc:	4611      	mov	r1, r2
 80067be:	461a      	mov	r2, r3
 80067c0:	4623      	mov	r3, r4
 80067c2:	80fb      	strh	r3, [r7, #6]
 80067c4:	4603      	mov	r3, r0
 80067c6:	80bb      	strh	r3, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	807b      	strh	r3, [r7, #2]
 80067cc:	4613      	mov	r3, r2
 80067ce:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80067d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80067d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067d8:	4293      	cmp	r3, r2
 80067da:	bfa8      	it	ge
 80067dc:	4613      	movge	r3, r2
 80067de:	b21b      	sxth	r3, r3
 80067e0:	0fda      	lsrs	r2, r3, #31
 80067e2:	4413      	add	r3, r2
 80067e4:	105b      	asrs	r3, r3, #1
 80067e6:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80067e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80067ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	dd01      	ble.n	80067f8 <Displ_fillRoundRect+0x46>
 80067f4:	89fb      	ldrh	r3, [r7, #14]
 80067f6:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	8c3b      	ldrh	r3, [r7, #32]
 80067fc:	4413      	add	r3, r2
 80067fe:	b298      	uxth	r0, r3
 8006800:	88b9      	ldrh	r1, [r7, #4]
 8006802:	887a      	ldrh	r2, [r7, #2]
 8006804:	8c3b      	ldrh	r3, [r7, #32]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	b29b      	uxth	r3, r3
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	b29a      	uxth	r2, r3
 800680e:	883c      	ldrh	r4, [r7, #0]
 8006810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	4623      	mov	r3, r4
 8006816:	f7fe ff1b 	bl	8005650 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	887b      	ldrh	r3, [r7, #2]
 800681e:	4413      	add	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	8c3b      	ldrh	r3, [r7, #32]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29b      	uxth	r3, r3
 800682c:	b218      	sxth	r0, r3
 800682e:	88ba      	ldrh	r2, [r7, #4]
 8006830:	8c3b      	ldrh	r3, [r7, #32]
 8006832:	4413      	add	r3, r2
 8006834:	b29b      	uxth	r3, r3
 8006836:	b219      	sxth	r1, r3
 8006838:	883a      	ldrh	r2, [r7, #0]
 800683a:	8c3b      	ldrh	r3, [r7, #32]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	b29b      	uxth	r3, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	b21b      	sxth	r3, r3
 800684a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800684e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006850:	9201      	str	r2, [sp, #4]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2301      	movs	r3, #1
 8006856:	4622      	mov	r2, r4
 8006858:	f7ff f98e 	bl	8005b78 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	8c3b      	ldrh	r3, [r7, #32]
 8006860:	4413      	add	r3, r2
 8006862:	b29b      	uxth	r3, r3
 8006864:	b218      	sxth	r0, r3
 8006866:	88ba      	ldrh	r2, [r7, #4]
 8006868:	8c3b      	ldrh	r3, [r7, #32]
 800686a:	4413      	add	r3, r2
 800686c:	b29b      	uxth	r3, r3
 800686e:	b219      	sxth	r1, r3
 8006870:	883a      	ldrh	r2, [r7, #0]
 8006872:	8c3b      	ldrh	r3, [r7, #32]
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	b21b      	sxth	r3, r3
 8006882:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006886:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2302      	movs	r3, #2
 800688e:	4622      	mov	r2, r4
 8006890:	f7ff f972 	bl	8005b78 <fillCircleHelper>
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}

0800689c <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800689c:	b082      	sub	sp, #8
 800689e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068a0:	b08b      	sub	sp, #44	; 0x2c
 80068a2:	af06      	add	r7, sp, #24
 80068a4:	603a      	str	r2, [r7, #0]
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a8:	4603      	mov	r3, r0
 80068aa:	80fb      	strh	r3, [r7, #6]
 80068ac:	460b      	mov	r3, r1
 80068ae:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 80068b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80068b2:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 80068b4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d922      	bls.n	8006902 <Displ_WString+0x66>
		delta<<=1;
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 80068c2:	e01e      	b.n	8006902 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	88bd      	ldrh	r5, [r7, #4]
 80068ca:	88fc      	ldrh	r4, [r7, #6]
 80068cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80068d4:	9303      	str	r3, [sp, #12]
 80068d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	466e      	mov	r6, sp
 80068de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80068e6:	e886 0003 	stmia.w	r6, {r0, r1}
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	4629      	mov	r1, r5
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7ff fd56 	bl	80063a0 <Displ_WChar>
        x += delta;
 80068f4:	88fa      	ldrh	r2, [r7, #6]
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	4413      	add	r3, r2
 80068fa:	80fb      	strh	r3, [r7, #6]
        str++;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	3301      	adds	r3, #1
 8006900:	603b      	str	r3, [r7, #0]
    while(*str) {
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1dc      	bne.n	80068c4 <Displ_WString+0x28>
    }
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006916:	b002      	add	sp, #8
 8006918:	4770      	bx	lr
	...

0800691c <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	2b51      	cmp	r3, #81	; 0x51
 800692a:	d00a      	beq.n	8006942 <Displ_BackLight+0x26>
 800692c:	2b51      	cmp	r3, #81	; 0x51
 800692e:	dc16      	bgt.n	800695e <Displ_BackLight+0x42>
 8006930:	2b46      	cmp	r3, #70	; 0x46
 8006932:	d008      	beq.n	8006946 <Displ_BackLight+0x2a>
 8006934:	2b46      	cmp	r3, #70	; 0x46
 8006936:	dc12      	bgt.n	800695e <Displ_BackLight+0x42>
 8006938:	2b30      	cmp	r3, #48	; 0x30
 800693a:	d00a      	beq.n	8006952 <Displ_BackLight+0x36>
 800693c:	2b31      	cmp	r3, #49	; 0x31
 800693e:	d002      	beq.n	8006946 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8006940:	e00d      	b.n	800695e <Displ_BackLight+0x42>
		__NOP();
 8006942:	bf00      	nop
		break;
 8006944:	e00c      	b.n	8006960 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8006946:	2201      	movs	r2, #1
 8006948:	2140      	movs	r1, #64	; 0x40
 800694a:	480a      	ldr	r0, [pc, #40]	; (8006974 <Displ_BackLight+0x58>)
 800694c:	f002 f860 	bl	8008a10 <HAL_GPIO_WritePin>
		break;
 8006950:	e006      	b.n	8006960 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8006952:	2200      	movs	r2, #0
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	4807      	ldr	r0, [pc, #28]	; (8006974 <Displ_BackLight+0x58>)
 8006958:	f002 f85a 	bl	8008a10 <HAL_GPIO_WritePin>
		break;
 800695c:	e000      	b.n	8006960 <Displ_BackLight+0x44>
		break;
 800695e:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8006960:	2140      	movs	r1, #64	; 0x40
 8006962:	4804      	ldr	r0, [pc, #16]	; (8006974 <Displ_BackLight+0x58>)
 8006964:	f002 f83c 	bl	80089e0 <HAL_GPIO_ReadPin>
 8006968:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40020000 	.word	0x40020000

08006978 <testLines>:




void testLines(uint16_t color)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b08b      	sub	sp, #44	; 0x2c
 800697c:	af02      	add	r7, sp, #8
 800697e:	4603      	mov	r3, r0
 8006980:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8006982:	4b7c      	ldr	r3, [pc, #496]	; (8006b74 <testLines+0x1fc>)
 8006984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006988:	617b      	str	r3, [r7, #20]
                  h = _height;
 800698a:	4b7b      	ldr	r3, [pc, #492]	; (8006b78 <testLines+0x200>)
 800698c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006990:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006992:	2000      	movs	r0, #0
 8006994:	f7ff f810 	bl	80059b8 <Displ_CLS>

    x1 = y1 = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	e00f      	b.n	80069cc <testLines+0x54>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	b218      	sxth	r0, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	b219      	sxth	r1, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	b21a      	sxth	r2, r3
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	b21c      	sxth	r4, r3
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4623      	mov	r3, r4
 80069c2:	f7ff f9e2 	bl	8005d8a <Displ_Line>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3306      	adds	r3, #6
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	dbeb      	blt.n	80069ac <testLines+0x34>
    x2    = w - 1;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e00f      	b.n	8006a00 <testLines+0x88>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	b218      	sxth	r0, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	b219      	sxth	r1, r3
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	b21a      	sxth	r2, r3
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	b21c      	sxth	r4, r3
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4623      	mov	r3, r4
 80069f6:	f7ff f9c8 	bl	8005d8a <Displ_Line>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	3306      	adds	r3, #6
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	dbeb      	blt.n	80069e0 <testLines+0x68>

    Displ_CLS(BLACK);
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f7fe ffd5 	bl	80059b8 <Displ_CLS>

    x1    = w - 1;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	e00f      	b.n	8006a44 <testLines+0xcc>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	b218      	sxth	r0, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	b219      	sxth	r1, r3
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	b21a      	sxth	r2, r3
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	b21c      	sxth	r4, r3
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	4623      	mov	r3, r4
 8006a3a:	f7ff f9a6 	bl	8005d8a <Displ_Line>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	3306      	adds	r3, #6
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	dbeb      	blt.n	8006a24 <testLines+0xac>
    x2    = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e00f      	b.n	8006a76 <testLines+0xfe>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	b218      	sxth	r0, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	b219      	sxth	r1, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	b21a      	sxth	r2, r3
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	b21c      	sxth	r4, r3
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	f7ff f98d 	bl	8005d8a <Displ_Line>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	3306      	adds	r3, #6
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	dbeb      	blt.n	8006a56 <testLines+0xde>

    Displ_CLS(BLACK);
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f7fe ff9a 	bl	80059b8 <Displ_CLS>

    x1    = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e00f      	b.n	8006ab8 <testLines+0x140>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	b218      	sxth	r0, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	b219      	sxth	r1, r3
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	b21a      	sxth	r2, r3
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	b21c      	sxth	r4, r3
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4623      	mov	r3, r4
 8006aae:	f7ff f96c 	bl	8005d8a <Displ_Line>
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3306      	adds	r3, #6
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	dbeb      	blt.n	8006a98 <testLines+0x120>
    x2    = w - 1;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	e00f      	b.n	8006aec <testLines+0x174>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	b218      	sxth	r0, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	b219      	sxth	r1, r3
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	b21a      	sxth	r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	b21c      	sxth	r4, r3
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4623      	mov	r3, r4
 8006ae2:	f7ff f952 	bl	8005d8a <Displ_Line>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	3306      	adds	r3, #6
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	dbeb      	blt.n	8006acc <testLines+0x154>

    Displ_CLS(BLACK);
 8006af4:	2000      	movs	r0, #0
 8006af6:	f7fe ff5f 	bl	80059b8 <Displ_CLS>

    x1    = w - 1;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	e00f      	b.n	8006b30 <testLines+0x1b8>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	b218      	sxth	r0, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	b219      	sxth	r1, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	b21a      	sxth	r2, r3
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	b21c      	sxth	r4, r3
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	4623      	mov	r3, r4
 8006b26:	f7ff f930 	bl	8005d8a <Displ_Line>
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3306      	adds	r3, #6
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	dbeb      	blt.n	8006b10 <testLines+0x198>
    x2    = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	e00f      	b.n	8006b62 <testLines+0x1ea>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	b218      	sxth	r0, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	b219      	sxth	r1, r3
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	b21a      	sxth	r2, r3
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	b21c      	sxth	r4, r3
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4623      	mov	r3, r4
 8006b58:	f7ff f917 	bl	8005d8a <Displ_Line>
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	3306      	adds	r3, #6
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	dbeb      	blt.n	8006b42 <testLines+0x1ca>

}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3724      	adds	r7, #36	; 0x24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}
 8006b74:	200084f2 	.word	0x200084f2
 8006b78:	200084f4 	.word	0x200084f4

08006b7c <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	4603      	mov	r3, r0
 8006b84:	460a      	mov	r2, r1
 8006b86:	80fb      	strh	r3, [r7, #6]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8006b8c:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <testFastLines+0x94>)
 8006b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <testFastLines+0x98>)
 8006b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f7fe ff0b 	bl	80059b8 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e011      	b.n	8006bcc <testFastLines+0x50>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	b219      	sxth	r1, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	b21a      	sxth	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	b218      	sxth	r0, r3
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f7ff f8e2 	bl	8005d8a <Displ_Line>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3305      	adds	r3, #5
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	dbe9      	blt.n	8006ba8 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e011      	b.n	8006bfe <testFastLines+0x82>
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	b218      	sxth	r0, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	b21a      	sxth	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	b219      	sxth	r1, r3
 8006bec:	88bb      	ldrh	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	f7ff f8c9 	bl	8005d8a <Displ_Line>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	3305      	adds	r3, #5
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	dbe9      	blt.n	8006bda <testFastLines+0x5e>
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	200084f2 	.word	0x200084f2
 8006c14:	200084f4 	.word	0x200084f4

08006c18 <testRects>:




void testRects(uint16_t color)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b08b      	sub	sp, #44	; 0x2c
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	4603      	mov	r3, r0
 8006c20:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8006c22:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <testRects+0xa0>)
 8006c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c28:	0fda      	lsrs	r2, r3, #31
 8006c2a:	4413      	add	r3, r2
 8006c2c:	105b      	asrs	r3, r3, #1
 8006c2e:	b21b      	sxth	r3, r3
 8006c30:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8006c32:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <testRects+0xa4>)
 8006c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c38:	0fda      	lsrs	r2, r3, #31
 8006c3a:	4413      	add	r3, r2
 8006c3c:	105b      	asrs	r3, r3, #1
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006c42:	2000      	movs	r0, #0
 8006c44:	f7fe feb8 	bl	80059b8 <Displ_CLS>
	n     = min(_width, _height);
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <testRects+0xa4>)
 8006c4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <testRects+0xa0>)
 8006c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	bfa8      	it	ge
 8006c58:	4613      	movge	r3, r2
 8006c5a:	b21b      	sxth	r3, r3
 8006c5c:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8006c5e:	2302      	movs	r3, #2
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e020      	b.n	8006ca6 <testRects+0x8e>
		i2 = i / 2;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	0fda      	lsrs	r2, r3, #31
 8006c68:	4413      	add	r3, r2
 8006c6a:	105b      	asrs	r3, r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	b218      	sxth	r0, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	b219      	sxth	r1, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	b21a      	sxth	r2, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	b21c      	sxth	r4, r3
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	2301      	movs	r3, #1
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	f7ff f9a6 	bl	8005fec <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	3306      	adds	r3, #6
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	dbda      	blt.n	8006c64 <testRects+0x4c>
	}
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	3724      	adds	r7, #36	; 0x24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}
 8006cb8:	200084f2 	.word	0x200084f2
 8006cbc:	200084f4 	.word	0x200084f4

08006cc0 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b08b      	sub	sp, #44	; 0x2c
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	460a      	mov	r2, r1
 8006cca:	80fb      	strh	r3, [r7, #6]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8006cd0:	4b30      	ldr	r3, [pc, #192]	; (8006d94 <testFilledRects+0xd4>)
 8006cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cd6:	0fda      	lsrs	r2, r3, #31
 8006cd8:	4413      	add	r3, r2
 8006cda:	105b      	asrs	r3, r3, #1
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <testFilledRects+0xd8>)
 8006ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ce8:	0fda      	lsrs	r2, r3, #31
 8006cea:	4413      	add	r3, r2
 8006cec:	105b      	asrs	r3, r3, #1
 8006cee:	b21b      	sxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f7fe fe5f 	bl	80059b8 <Displ_CLS>
	n = min(_width, _height);
 8006cfa:	4b27      	ldr	r3, [pc, #156]	; (8006d98 <testFilledRects+0xd8>)
 8006cfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006d00:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <testFilledRects+0xd4>)
 8006d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	bfa8      	it	ge
 8006d0a:	4613      	movge	r3, r2
 8006d0c:	b21b      	sxth	r3, r3
 8006d0e:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e035      	b.n	8006d82 <testFilledRects+0xc2>
		i2    = i / 2;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	0fda      	lsrs	r2, r3, #31
 8006d1a:	4413      	add	r3, r2
 8006d1c:	105b      	asrs	r3, r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	b298      	uxth	r0, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	b299      	uxth	r1, r3
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	b29c      	uxth	r4, r3
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4623      	mov	r3, r4
 8006d46:	f7fe fc83 	bl	8005650 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	b218      	sxth	r0, r3
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	b219      	sxth	r1, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	b21a      	sxth	r2, r3
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	b21c      	sxth	r4, r3
 8006d6e:	88bb      	ldrh	r3, [r7, #4]
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	2301      	movs	r3, #1
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4623      	mov	r3, r4
 8006d78:	f7ff f938 	bl	8005fec <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	3b06      	subs	r3, #6
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dcc6      	bgt.n	8006d16 <testFilledRects+0x56>
	}
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	3724      	adds	r7, #36	; 0x24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200084f2 	.word	0x200084f2
 8006d98:	200084f4 	.word	0x200084f4

08006d9c <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	460a      	mov	r2, r1
 8006da6:	71fb      	strb	r3, [r7, #7]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <testFilledCircles+0x74>)
 8006dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <testFilledCircles+0x78>)
 8006db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f7fe fdf8 	bl	80059b8 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e017      	b.n	8006dfe <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e00c      	b.n	8006dee <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	b218      	sxth	r0, r3
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	b219      	sxth	r1, r3
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	b21a      	sxth	r2, r3
 8006de0:	88bb      	ldrh	r3, [r7, #4]
 8006de2:	f7fe ff9f 	bl	8005d24 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	dbee      	blt.n	8006dd4 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	dbe3      	blt.n	8006dce <testFilledCircles+0x32>
        }
    }
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200084f2 	.word	0x200084f2
 8006e14:	200084f4 	.word	0x200084f4

08006e18 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	460a      	mov	r2, r1
 8006e22:	71fb      	strb	r3, [r7, #7]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <testCircles+0x7c>)
 8006e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e34:	461a      	mov	r2, r3
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	4413      	add	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8006e3c:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <testCircles+0x80>)
 8006e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e42:	461a      	mov	r2, r3
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	4413      	add	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	e017      	b.n	8006e80 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	e00c      	b.n	8006e70 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	b218      	sxth	r0, r3
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	b219      	sxth	r1, r3
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	b21a      	sxth	r2, r3
 8006e62:	88bb      	ldrh	r3, [r7, #4]
 8006e64:	f7fe fcd4 	bl	8005810 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	dbee      	blt.n	8006e56 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	dbe3      	blt.n	8006e50 <testCircles+0x38>
        }
    }
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200084f2 	.word	0x200084f2
 8006e98:	200084f4 	.word	0x200084f4

08006e9c <testTriangles>:




void testTriangles()
{
 8006e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8006ea2:	4b2e      	ldr	r3, [pc, #184]	; (8006f5c <testTriangles+0xc0>)
 8006ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ea8:	0fda      	lsrs	r2, r3, #31
 8006eaa:	4413      	add	r3, r2
 8006eac:	105b      	asrs	r3, r3, #1
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8006eb4:	4b2a      	ldr	r3, [pc, #168]	; (8006f60 <testTriangles+0xc4>)
 8006eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eba:	0fda      	lsrs	r2, r3, #31
 8006ebc:	4413      	add	r3, r2
 8006ebe:	105b      	asrs	r3, r3, #1
 8006ec0:	b21b      	sxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7fe fd76 	bl	80059b8 <Displ_CLS>
    n     = min(cx, cy);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	bfa8      	it	ge
 8006ed4:	4613      	movge	r3, r2
 8006ed6:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	e035      	b.n	8006f4a <testTriangles+0xae>
    	Displ_drawTriangle(
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006eee:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006efc:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	4413      	add	r3, r2
 8006f08:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006f0a:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4413      	add	r3, r2
 8006f16:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006f18:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	b291      	uxth	r1, r2
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	b292      	uxth	r2, r2
 8006f22:	440a      	add	r2, r1
 8006f24:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 8006f26:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	10c9      	asrs	r1, r1, #3
 8006f2c:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8006f2e:	f001 011f 	and.w	r1, r1, #31
 8006f32:	b289      	uxth	r1, r1
 8006f34:	9102      	str	r1, [sp, #8]
 8006f36:	9201      	str	r2, [sp, #4]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4633      	mov	r3, r6
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7ff f897 	bl	8006072 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3305      	adds	r3, #5
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	dbc5      	blt.n	8006ede <testTriangles+0x42>
    }
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5c:	200084f2 	.word	0x200084f2
 8006f60:	200084f4 	.word	0x200084f4

08006f64 <testFilledTriangles>:





void testFilledTriangles() {
 8006f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f66:	b089      	sub	sp, #36	; 0x24
 8006f68:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8006f6a:	4b53      	ldr	r3, [pc, #332]	; (80070b8 <testFilledTriangles+0x154>)
 8006f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f70:	0fda      	lsrs	r2, r3, #31
 8006f72:	4413      	add	r3, r2
 8006f74:	105b      	asrs	r3, r3, #1
 8006f76:	b21b      	sxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8006f7c:	4b4f      	ldr	r3, [pc, #316]	; (80070bc <testFilledTriangles+0x158>)
 8006f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f82:	0fda      	lsrs	r2, r3, #31
 8006f84:	4413      	add	r3, r2
 8006f86:	105b      	asrs	r3, r3, #1
 8006f88:	b21b      	sxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f7fe fd12 	bl	80059b8 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	bfa8      	it	ge
 8006f9c:	4613      	movge	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e080      	b.n	80070a4 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	b21c      	sxth	r4, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	b21d      	sxth	r5, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	b21e      	sxth	r6, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4413      	add	r3, r2
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	fa0f fc83 	sxth.w	ip, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b21b      	sxth	r3, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	b291      	uxth	r1, r2
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	440a      	add	r2, r1
 8006fea:	b292      	uxth	r2, r2
 8006fec:	b212      	sxth	r2, r2
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	00c9      	lsls	r1, r1, #3
 8006ff2:	b209      	sxth	r1, r1
 8006ff4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8006ff8:	b208      	sxth	r0, r1
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	10c9      	asrs	r1, r1, #3
 8006ffe:	b209      	sxth	r1, r1
 8007000:	f001 011f 	and.w	r1, r1, #31
 8007004:	b209      	sxth	r1, r1
 8007006:	4301      	orrs	r1, r0
 8007008:	b209      	sxth	r1, r1
 800700a:	b289      	uxth	r1, r1
 800700c:	9102      	str	r1, [sp, #8]
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4663      	mov	r3, ip
 8007014:	4632      	mov	r2, r6
 8007016:	4629      	mov	r1, r5
 8007018:	4620      	mov	r0, r4
 800701a:	f7ff f864 	bl	80060e6 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	b21c      	sxth	r4, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	b29b      	uxth	r3, r3
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	b29b      	uxth	r3, r3
 800702e:	b21d      	sxth	r5, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	b29b      	uxth	r3, r3
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	b29b      	uxth	r3, r3
 800703c:	b21e      	sxth	r6, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	b29b      	uxth	r3, r3
 8007046:	4413      	add	r3, r2
 8007048:	b29b      	uxth	r3, r3
 800704a:	fa0f fc83 	sxth.w	ip, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	b29b      	uxth	r3, r3
 8007056:	4413      	add	r3, r2
 8007058:	b29b      	uxth	r3, r3
 800705a:	b21a      	sxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	b299      	uxth	r1, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	b29b      	uxth	r3, r3
 8007064:	440b      	add	r3, r1
 8007066:	b29b      	uxth	r3, r3
 8007068:	b219      	sxth	r1, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	b21b      	sxth	r3, r3
 8007070:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007074:	f023 0307 	bic.w	r3, r3, #7
 8007078:	b218      	sxth	r0, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	b21b      	sxth	r3, r3
 8007080:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007084:	b21b      	sxth	r3, r3
 8007086:	4303      	orrs	r3, r0
 8007088:	b21b      	sxth	r3, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	9101      	str	r1, [sp, #4]
 8007090:	9200      	str	r2, [sp, #0]
 8007092:	4663      	mov	r3, ip
 8007094:	4632      	mov	r2, r6
 8007096:	4629      	mov	r1, r5
 8007098:	4620      	mov	r0, r4
 800709a:	f7fe ffea 	bl	8006072 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3b05      	subs	r3, #5
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b0a      	cmp	r3, #10
 80070a8:	f73f af7b 	bgt.w	8006fa2 <testFilledTriangles+0x3e>
    }
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200084f2 	.word	0x200084f2
 80070bc:	200084f4 	.word	0x200084f4

080070c0 <testRoundRects>:





void testRoundRects() {
 80070c0:	b5b0      	push	{r4, r5, r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 80070c6:	4b33      	ldr	r3, [pc, #204]	; (8007194 <testRoundRects+0xd4>)
 80070c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070cc:	0fda      	lsrs	r2, r3, #31
 80070ce:	4413      	add	r3, r2
 80070d0:	105b      	asrs	r3, r3, #1
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 80070d8:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <testRoundRects+0xd8>)
 80070da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070de:	0fda      	lsrs	r2, r3, #31
 80070e0:	4413      	add	r3, r2
 80070e2:	105b      	asrs	r3, r3, #1
 80070e4:	b21b      	sxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80070ea:	2000      	movs	r0, #0
 80070ec:	f7fe fc64 	bl	80059b8 <Displ_CLS>
    w     = min(_width, _height);
 80070f0:	4b29      	ldr	r3, [pc, #164]	; (8007198 <testRoundRects+0xd8>)
 80070f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80070f6:	4b27      	ldr	r3, [pc, #156]	; (8007194 <testRoundRects+0xd4>)
 80070f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070fc:	4293      	cmp	r3, r2
 80070fe:	bfa8      	it	ge
 8007100:	4613      	movge	r3, r2
 8007102:	b21b      	sxth	r3, r3
 8007104:	60fb      	str	r3, [r7, #12]
    red = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 800710a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	fb92 f3f3 	sdiv	r3, r2, r3
 8007114:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	e031      	b.n	8007180 <testRoundRects+0xc0>
        i2 = i / 2;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	0fda      	lsrs	r2, r3, #31
 8007120:	4413      	add	r3, r2
 8007122:	105b      	asrs	r3, r3, #1
 8007124:	607b      	str	r3, [r7, #4]
        red += step;
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4413      	add	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	b29b      	uxth	r3, r3
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	b29b      	uxth	r3, r3
 800713a:	b218      	sxth	r0, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	b29b      	uxth	r3, r3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	b219      	sxth	r1, r3
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	b21c      	sxth	r4, r3
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	b21d      	sxth	r5, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	da00      	bge.n	800715a <testRoundRects+0x9a>
 8007158:	3307      	adds	r3, #7
 800715a:	10db      	asrs	r3, r3, #3
 800715c:	b21a      	sxth	r2, r3
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	b29b      	uxth	r3, r3
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	9200      	str	r2, [sp, #0]
 8007172:	462b      	mov	r3, r5
 8007174:	4622      	mov	r2, r4
 8007176:	f7ff fa27 	bl	80065c8 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	3306      	adds	r3, #6
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	429a      	cmp	r2, r3
 8007186:	dbc9      	blt.n	800711c <testRoundRects+0x5c>
    }
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bdb0      	pop	{r4, r5, r7, pc}
 8007192:	bf00      	nop
 8007194:	200084f2 	.word	0x200084f2
 8007198:	200084f4 	.word	0x200084f4

0800719c <testFilledRoundRects>:





void testFilledRoundRects() {
 800719c:	b5b0      	push	{r4, r5, r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 80071a2:	4b36      	ldr	r3, [pc, #216]	; (800727c <testFilledRoundRects+0xe0>)
 80071a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a8:	0fda      	lsrs	r2, r3, #31
 80071aa:	4413      	add	r3, r2
 80071ac:	105b      	asrs	r3, r3, #1
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 80071b4:	4b32      	ldr	r3, [pc, #200]	; (8007280 <testFilledRoundRects+0xe4>)
 80071b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ba:	0fda      	lsrs	r2, r3, #31
 80071bc:	4413      	add	r3, r2
 80071be:	105b      	asrs	r3, r3, #1
 80071c0:	b21b      	sxth	r3, r3
 80071c2:	3b01      	subs	r3, #1
 80071c4:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 80071c6:	2000      	movs	r0, #0
 80071c8:	f7fe fbf6 	bl	80059b8 <Displ_CLS>
    green = 256;
 80071cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071d0:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 80071d2:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <testFilledRoundRects+0xe4>)
 80071d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80071d8:	4b28      	ldr	r3, [pc, #160]	; (800727c <testFilledRoundRects+0xe0>)
 80071da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071de:	4293      	cmp	r3, r2
 80071e0:	bfa8      	it	ge
 80071e2:	4613      	movge	r3, r2
 80071e4:	b21b      	sxth	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80071ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80071f0:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 80071f2:	4b23      	ldr	r3, [pc, #140]	; (8007280 <testFilledRoundRects+0xe4>)
 80071f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80071f8:	4b20      	ldr	r3, [pc, #128]	; (800727c <testFilledRoundRects+0xe0>)
 80071fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071fe:	4293      	cmp	r3, r2
 8007200:	bfa8      	it	ge
 8007202:	4613      	movge	r3, r2
 8007204:	b21b      	sxth	r3, r3
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e02f      	b.n	800726a <testFilledRoundRects+0xce>
        i2 = i / 2;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	0fda      	lsrs	r2, r3, #31
 800720e:	4413      	add	r3, r2
 8007210:	105b      	asrs	r3, r3, #1
 8007212:	603b      	str	r3, [r7, #0]
        green -= step;
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	b29a      	uxth	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	b218      	sxth	r0, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	b29a      	uxth	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	b29b      	uxth	r3, r3
 8007236:	b219      	sxth	r1, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	b21c      	sxth	r4, r3
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	b21d      	sxth	r5, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	da00      	bge.n	8007248 <testFilledRoundRects+0xac>
 8007246:	3307      	adds	r3, #7
 8007248:	10db      	asrs	r3, r3, #3
 800724a:	b21b      	sxth	r3, r3
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	00d2      	lsls	r2, r2, #3
 8007250:	b292      	uxth	r2, r2
 8007252:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8007256:	b292      	uxth	r2, r2
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	462b      	mov	r3, r5
 800725e:	4622      	mov	r2, r4
 8007260:	f7ff faa7 	bl	80067b2 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	3b06      	subs	r3, #6
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b14      	cmp	r3, #20
 800726e:	dccc      	bgt.n	800720a <testFilledRoundRects+0x6e>
    }
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bdb0      	pop	{r4, r5, r7, pc}
 800727a:	bf00      	nop
 800727c:	200084f2 	.word	0x200084f2
 8007280:	200084f4 	.word	0x200084f4

08007284 <testFillScreen>:




void testFillScreen()
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8007288:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800728c:	f7fe fb94 	bl	80059b8 <Displ_CLS>
	Displ_CLS(GREEN);
 8007290:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8007294:	f7fe fb90 	bl	80059b8 <Displ_CLS>
	Displ_CLS(BLUE);
 8007298:	201f      	movs	r0, #31
 800729a:	f7fe fb8d 	bl	80059b8 <Displ_CLS>
	Displ_CLS(YELLOW);
 800729e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80072a2:	f7fe fb89 	bl	80059b8 <Displ_CLS>
	Displ_CLS(BLACK);
 80072a6:	2000      	movs	r0, #0
 80072a8:	f7fe fb86 	bl	80059b8 <Displ_CLS>
}
 80072ac:	bf00      	nop
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <Displ_TestAll>:





void Displ_TestAll (){
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
	testFillScreen();
 80072b4:	f7ff ffe6 	bl	8007284 <testFillScreen>
	testLines(CYAN);
 80072b8:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80072bc:	f7ff fb5c 	bl	8006978 <testLines>
	testFastLines(RED, BLUE);
 80072c0:	211f      	movs	r1, #31
 80072c2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80072c6:	f7ff fc59 	bl	8006b7c <testFastLines>
	testRects(GREEN);
 80072ca:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80072ce:	f7ff fca3 	bl	8006c18 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 80072d2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80072d6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80072da:	f7ff fcf1 	bl	8006cc0 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 80072de:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80072e2:	200a      	movs	r0, #10
 80072e4:	f7ff fd5a 	bl	8006d9c <testFilledCircles>
	testCircles(10, WHITE);
 80072e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072ec:	200a      	movs	r0, #10
 80072ee:	f7ff fd93 	bl	8006e18 <testCircles>
	testTriangles();
 80072f2:	f7ff fdd3 	bl	8006e9c <testTriangles>
	testFilledTriangles();
 80072f6:	f7ff fe35 	bl	8006f64 <testFilledTriangles>
	testRoundRects();
 80072fa:	f7ff fee1 	bl	80070c0 <testRoundRects>
	testFilledRoundRects();
 80072fe:	f7ff ff4d 	bl	800719c <testFilledRoundRects>
}
 8007302:	bf00      	nop
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <Reset_Handler>:
 8007308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007340 <LoopFillZerobss+0x12>
 800730c:	480d      	ldr	r0, [pc, #52]	; (8007344 <LoopFillZerobss+0x16>)
 800730e:	490e      	ldr	r1, [pc, #56]	; (8007348 <LoopFillZerobss+0x1a>)
 8007310:	4a0e      	ldr	r2, [pc, #56]	; (800734c <LoopFillZerobss+0x1e>)
 8007312:	2300      	movs	r3, #0
 8007314:	e002      	b.n	800731c <LoopCopyDataInit>

08007316 <CopyDataInit>:
 8007316:	58d4      	ldr	r4, [r2, r3]
 8007318:	50c4      	str	r4, [r0, r3]
 800731a:	3304      	adds	r3, #4

0800731c <LoopCopyDataInit>:
 800731c:	18c4      	adds	r4, r0, r3
 800731e:	428c      	cmp	r4, r1
 8007320:	d3f9      	bcc.n	8007316 <CopyDataInit>
 8007322:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <LoopFillZerobss+0x22>)
 8007324:	4c0b      	ldr	r4, [pc, #44]	; (8007354 <LoopFillZerobss+0x26>)
 8007326:	2300      	movs	r3, #0
 8007328:	e001      	b.n	800732e <LoopFillZerobss>

0800732a <FillZerobss>:
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	3204      	adds	r2, #4

0800732e <LoopFillZerobss>:
 800732e:	42a2      	cmp	r2, r4
 8007330:	d3fb      	bcc.n	800732a <FillZerobss>
 8007332:	f7fd fdc3 	bl	8004ebc <SystemInit>
 8007336:	f006 fc95 	bl	800dc64 <__libc_init_array>
 800733a:	f7fc fa55 	bl	80037e8 <main>
 800733e:	4770      	bx	lr
 8007340:	20020000 	.word	0x20020000
 8007344:	20000000 	.word	0x20000000
 8007348:	20000220 	.word	0x20000220
 800734c:	08015870 	.word	0x08015870
 8007350:	20000220 	.word	0x20000220
 8007354:	20009650 	.word	0x20009650

08007358 <ADC_IRQHandler>:
 8007358:	e7fe      	b.n	8007358 <ADC_IRQHandler>
	...

0800735c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <HAL_Init+0x40>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a0d      	ldr	r2, [pc, #52]	; (800739c <HAL_Init+0x40>)
 8007366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800736a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <HAL_Init+0x40>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <HAL_Init+0x40>)
 8007372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <HAL_Init+0x40>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a07      	ldr	r2, [pc, #28]	; (800739c <HAL_Init+0x40>)
 800737e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007384:	2003      	movs	r0, #3
 8007386:	f000 fd53 	bl	8007e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800738a:	2000      	movs	r0, #0
 800738c:	f000 f808 	bl	80073a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007390:	f7fd f96e 	bl	8004670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40023c00 	.word	0x40023c00

080073a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80073a8:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <HAL_InitTick+0x54>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <HAL_InitTick+0x58>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	4619      	mov	r1, r3
 80073b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fd6b 	bl	8007e9a <HAL_SYSTICK_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e00e      	b.n	80073ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b0f      	cmp	r3, #15
 80073d2:	d80a      	bhi.n	80073ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073d4:	2200      	movs	r2, #0
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073dc:	f000 fd33 	bl	8007e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073e0:	4a06      	ldr	r2, [pc, #24]	; (80073fc <HAL_InitTick+0x5c>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20000030 	.word	0x20000030
 80073f8:	20000040 	.word	0x20000040
 80073fc:	2000003c 	.word	0x2000003c

08007400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <HAL_IncTick+0x20>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <HAL_IncTick+0x24>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4413      	add	r3, r2
 8007410:	4a04      	ldr	r2, [pc, #16]	; (8007424 <HAL_IncTick+0x24>)
 8007412:	6013      	str	r3, [r2, #0]
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000040 	.word	0x20000040
 8007424:	20009500 	.word	0x20009500

08007428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  return uwTick;
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <HAL_GetTick+0x14>)
 800742e:	681b      	ldr	r3, [r3, #0]
}
 8007430:	4618      	mov	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20009500 	.word	0x20009500

08007440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007448:	f7ff ffee 	bl	8007428 <HAL_GetTick>
 800744c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007458:	d005      	beq.n	8007466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800745a:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <HAL_Delay+0x44>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007466:	bf00      	nop
 8007468:	f7ff ffde 	bl	8007428 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d8f7      	bhi.n	8007468 <HAL_Delay+0x28>
  {
  }
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000040 	.word	0x20000040

08007488 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e033      	b.n	8007506 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fd f90a 	bl	80046c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d118      	bne.n	80074f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80074ce:	f023 0302 	bic.w	r3, r3, #2
 80074d2:	f043 0202 	orr.w	r2, r3, #2
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa5a 	bl	8007994 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	f043 0201 	orr.w	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40
 80074f6:	e001      	b.n	80074fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_ADC_Start_DMA+0x1e>
 800752a:	2302      	movs	r3, #2
 800752c:	e0e9      	b.n	8007702 <HAL_ADC_Start_DMA+0x1f2>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b01      	cmp	r3, #1
 8007542:	d018      	beq.n	8007576 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007554:	4b6d      	ldr	r3, [pc, #436]	; (800770c <HAL_ADC_Start_DMA+0x1fc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a6d      	ldr	r2, [pc, #436]	; (8007710 <HAL_ADC_Start_DMA+0x200>)
 800755a:	fba2 2303 	umull	r2, r3, r2, r3
 800755e:	0c9a      	lsrs	r2, r3, #18
 8007560:	4613      	mov	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4413      	add	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007568:	e002      	b.n	8007570 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3b01      	subs	r3, #1
 800756e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f9      	bne.n	800756a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007584:	d107      	bne.n	8007596 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007594:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 80a1 	bne.w	80076e8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d106      	bne.n	80075f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ea:	f023 0206 	bic.w	r2, r3, #6
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	645a      	str	r2, [r3, #68]	; 0x44
 80075f2:	e002      	b.n	80075fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007602:	4b44      	ldr	r3, [pc, #272]	; (8007714 <HAL_ADC_Start_DMA+0x204>)
 8007604:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	4a43      	ldr	r2, [pc, #268]	; (8007718 <HAL_ADC_Start_DMA+0x208>)
 800760c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	4a42      	ldr	r2, [pc, #264]	; (800771c <HAL_ADC_Start_DMA+0x20c>)
 8007614:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	4a41      	ldr	r2, [pc, #260]	; (8007720 <HAL_ADC_Start_DMA+0x210>)
 800761c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007626:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007636:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007646:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	334c      	adds	r3, #76	; 0x4c
 8007652:	4619      	mov	r1, r3
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f000 fcda 	bl	8008010 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	2b00      	cmp	r3, #0
 8007666:	d12a      	bne.n	80076be <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a2d      	ldr	r2, [pc, #180]	; (8007724 <HAL_ADC_Start_DMA+0x214>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d015      	beq.n	800769e <HAL_ADC_Start_DMA+0x18e>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <HAL_ADC_Start_DMA+0x218>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d105      	bne.n	8007688 <HAL_ADC_Start_DMA+0x178>
 800767c:	4b25      	ldr	r3, [pc, #148]	; (8007714 <HAL_ADC_Start_DMA+0x204>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a27      	ldr	r2, [pc, #156]	; (800772c <HAL_ADC_Start_DMA+0x21c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d136      	bne.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
 8007692:	4b20      	ldr	r3, [pc, #128]	; (8007714 <HAL_ADC_Start_DMA+0x204>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b00      	cmp	r3, #0
 800769c:	d130      	bne.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d129      	bne.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80076ba:	609a      	str	r2, [r3, #8]
 80076bc:	e020      	b.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a18      	ldr	r2, [pc, #96]	; (8007724 <HAL_ADC_Start_DMA+0x214>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d11b      	bne.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d114      	bne.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80076e4:	609a      	str	r2, [r3, #8]
 80076e6:	e00b      	b.n	8007700 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	f043 0210 	orr.w	r2, r3, #16
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	f043 0201 	orr.w	r2, r3, #1
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000030 	.word	0x20000030
 8007710:	431bde83 	.word	0x431bde83
 8007714:	40012300 	.word	0x40012300
 8007718:	08007b8d 	.word	0x08007b8d
 800771c:	08007c47 	.word	0x08007c47
 8007720:	08007c63 	.word	0x08007c63
 8007724:	40012000 	.word	0x40012000
 8007728:	40012100 	.word	0x40012100
 800772c:	40012200 	.word	0x40012200

08007730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_ADC_ConfigChannel+0x1c>
 8007748:	2302      	movs	r3, #2
 800774a:	e113      	b.n	8007974 <HAL_ADC_ConfigChannel+0x244>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b09      	cmp	r3, #9
 800775a:	d925      	bls.n	80077a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68d9      	ldr	r1, [r3, #12]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	3b1e      	subs	r3, #30
 8007772:	2207      	movs	r2, #7
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	43da      	mvns	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	400a      	ands	r2, r1
 8007780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68d9      	ldr	r1, [r3, #12]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	4618      	mov	r0, r3
 8007794:	4603      	mov	r3, r0
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4403      	add	r3, r0
 800779a:	3b1e      	subs	r3, #30
 800779c:	409a      	lsls	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	e022      	b.n	80077ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6919      	ldr	r1, [r3, #16]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	4613      	mov	r3, r2
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	4413      	add	r3, r2
 80077bc:	2207      	movs	r2, #7
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	43da      	mvns	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	400a      	ands	r2, r1
 80077ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6919      	ldr	r1, [r3, #16]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4618      	mov	r0, r3
 80077de:	4603      	mov	r3, r0
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	4403      	add	r3, r0
 80077e4:	409a      	lsls	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b06      	cmp	r3, #6
 80077f4:	d824      	bhi.n	8007840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	3b05      	subs	r3, #5
 8007808:	221f      	movs	r2, #31
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	43da      	mvns	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	400a      	ands	r2, r1
 8007816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	4618      	mov	r0, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	3b05      	subs	r3, #5
 8007832:	fa00 f203 	lsl.w	r2, r0, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	635a      	str	r2, [r3, #52]	; 0x34
 800783e:	e04c      	b.n	80078da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b0c      	cmp	r3, #12
 8007846:	d824      	bhi.n	8007892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	3b23      	subs	r3, #35	; 0x23
 800785a:	221f      	movs	r2, #31
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	43da      	mvns	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	400a      	ands	r2, r1
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	4618      	mov	r0, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	3b23      	subs	r3, #35	; 0x23
 8007884:	fa00 f203 	lsl.w	r2, r0, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	631a      	str	r2, [r3, #48]	; 0x30
 8007890:	e023      	b.n	80078da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	3b41      	subs	r3, #65	; 0x41
 80078a4:	221f      	movs	r2, #31
 80078a6:	fa02 f303 	lsl.w	r3, r2, r3
 80078aa:	43da      	mvns	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	400a      	ands	r2, r1
 80078b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4618      	mov	r0, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	3b41      	subs	r3, #65	; 0x41
 80078ce:	fa00 f203 	lsl.w	r2, r0, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078da:	4b29      	ldr	r3, [pc, #164]	; (8007980 <HAL_ADC_ConfigChannel+0x250>)
 80078dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a28      	ldr	r2, [pc, #160]	; (8007984 <HAL_ADC_ConfigChannel+0x254>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10f      	bne.n	8007908 <HAL_ADC_ConfigChannel+0x1d8>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b12      	cmp	r3, #18
 80078ee:	d10b      	bne.n	8007908 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <HAL_ADC_ConfigChannel+0x254>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d12b      	bne.n	800796a <HAL_ADC_ConfigChannel+0x23a>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1c      	ldr	r2, [pc, #112]	; (8007988 <HAL_ADC_ConfigChannel+0x258>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <HAL_ADC_ConfigChannel+0x1f4>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b11      	cmp	r3, #17
 8007922:	d122      	bne.n	800796a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a11      	ldr	r2, [pc, #68]	; (8007988 <HAL_ADC_ConfigChannel+0x258>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d111      	bne.n	800796a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007946:	4b11      	ldr	r3, [pc, #68]	; (800798c <HAL_ADC_ConfigChannel+0x25c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a11      	ldr	r2, [pc, #68]	; (8007990 <HAL_ADC_ConfigChannel+0x260>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	0c9a      	lsrs	r2, r3, #18
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800795c:	e002      	b.n	8007964 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	3b01      	subs	r3, #1
 8007962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f9      	bne.n	800795e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40012300 	.word	0x40012300
 8007984:	40012000 	.word	0x40012000
 8007988:	10000012 	.word	0x10000012
 800798c:	20000030 	.word	0x20000030
 8007990:	431bde83 	.word	0x431bde83

08007994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800799c:	4b79      	ldr	r3, [pc, #484]	; (8007b84 <ADC_Init+0x1f0>)
 800799e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6859      	ldr	r1, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	021a      	lsls	r2, r3, #8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80079ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6899      	ldr	r1, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	4a58      	ldr	r2, [pc, #352]	; (8007b88 <ADC_Init+0x1f4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d022      	beq.n	8007a72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6899      	ldr	r1, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6899      	ldr	r1, [r3, #8]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	e00f      	b.n	8007a92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0202 	bic.w	r2, r2, #2
 8007aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6899      	ldr	r1, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	7e1b      	ldrb	r3, [r3, #24]
 8007aac:	005a      	lsls	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01b      	beq.n	8007af8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ace:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6859      	ldr	r1, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	3b01      	subs	r3, #1
 8007aec:	035a      	lsls	r2, r3, #13
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	e007      	b.n	8007b08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	051a      	lsls	r2, r3, #20
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6899      	ldr	r1, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b4a:	025a      	lsls	r2, r3, #9
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6899      	ldr	r1, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	029a      	lsls	r2, r3, #10
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	609a      	str	r2, [r3, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	40012300 	.word	0x40012300
 8007b88:	0f000001 	.word	0x0f000001

08007b8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13c      	bne.n	8007c20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d12b      	bne.n	8007c18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d127      	bne.n	8007c18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d006      	beq.n	8007be4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d119      	bne.n	8007c18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0220 	bic.w	r2, r2, #32
 8007bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7fc fc37 	bl	800448c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007c1e:	e00e      	b.n	8007c3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7fc fc6d 	bl	800450c <HAL_ADC_ErrorCallback>
}
 8007c32:	e004      	b.n	8007c3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7fc fc39 	bl	80044cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2240      	movs	r2, #64	; 0x40
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	f043 0204 	orr.w	r2, r3, #4
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7fc fc42 	bl	800450c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007cac:	4013      	ands	r3, r2
 8007cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007cc2:	4a04      	ldr	r2, [pc, #16]	; (8007cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	60d3      	str	r3, [r2, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	e000ed00 	.word	0xe000ed00

08007cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	f003 0307 	and.w	r3, r3, #7
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	e000ed00 	.word	0xe000ed00

08007cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	db0b      	blt.n	8007d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	f003 021f 	and.w	r2, r3, #31
 8007d0c:	4907      	ldr	r1, [pc, #28]	; (8007d2c <__NVIC_EnableIRQ+0x38>)
 8007d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	2001      	movs	r0, #1
 8007d16:	fa00 f202 	lsl.w	r2, r0, r2
 8007d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	e000e100 	.word	0xe000e100

08007d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	db0a      	blt.n	8007d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	490c      	ldr	r1, [pc, #48]	; (8007d7c <__NVIC_SetPriority+0x4c>)
 8007d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d4e:	0112      	lsls	r2, r2, #4
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	440b      	add	r3, r1
 8007d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d58:	e00a      	b.n	8007d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	4908      	ldr	r1, [pc, #32]	; (8007d80 <__NVIC_SetPriority+0x50>)
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	3b04      	subs	r3, #4
 8007d68:	0112      	lsls	r2, r2, #4
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	761a      	strb	r2, [r3, #24]
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	e000e100 	.word	0xe000e100
 8007d80:	e000ed00 	.word	0xe000ed00

08007d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b089      	sub	sp, #36	; 0x24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f1c3 0307 	rsb	r3, r3, #7
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	bf28      	it	cs
 8007da2:	2304      	movcs	r3, #4
 8007da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	3304      	adds	r3, #4
 8007daa:	2b06      	cmp	r3, #6
 8007dac:	d902      	bls.n	8007db4 <NVIC_EncodePriority+0x30>
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	3b03      	subs	r3, #3
 8007db2:	e000      	b.n	8007db6 <NVIC_EncodePriority+0x32>
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc2:	43da      	mvns	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd6:	43d9      	mvns	r1, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ddc:	4313      	orrs	r3, r2
         );
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3724      	adds	r7, #36	; 0x24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dfc:	d301      	bcc.n	8007e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e00f      	b.n	8007e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e02:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <SysTick_Config+0x40>)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e0a:	210f      	movs	r1, #15
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e10:	f7ff ff8e 	bl	8007d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <SysTick_Config+0x40>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e1a:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <SysTick_Config+0x40>)
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	e000e010 	.word	0xe000e010

08007e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff29 	bl	8007c90 <__NVIC_SetPriorityGrouping>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e58:	f7ff ff3e 	bl	8007cd8 <__NVIC_GetPriorityGrouping>
 8007e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	6978      	ldr	r0, [r7, #20]
 8007e64:	f7ff ff8e 	bl	8007d84 <NVIC_EncodePriority>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff ff5d 	bl	8007d30 <__NVIC_SetPriority>
}
 8007e76:	bf00      	nop
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	4603      	mov	r3, r0
 8007e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff ff31 	bl	8007cf4 <__NVIC_EnableIRQ>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ffa2 	bl	8007dec <SysTick_Config>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ec0:	f7ff fab2 	bl	8007428 <HAL_GetTick>
 8007ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e099      	b.n	8008004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ef0:	e00f      	b.n	8007f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ef2:	f7ff fa99 	bl	8007428 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d908      	bls.n	8007f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2203      	movs	r2, #3
 8007f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e078      	b.n	8008004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e8      	bne.n	8007ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4b38      	ldr	r3, [pc, #224]	; (800800c <HAL_DMA_Init+0x158>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d107      	bne.n	8007f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	4313      	orrs	r3, r2
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d117      	bne.n	8007fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fb01 	bl	80085c0 <DMA_CheckFifoParam>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2240      	movs	r2, #64	; 0x40
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e016      	b.n	8008004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fab8 	bl	8008554 <DMA_CalcBaseAndBitshift>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fec:	223f      	movs	r2, #63	; 0x3f
 8007fee:	409a      	lsls	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	f010803f 	.word	0xf010803f

08008010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_DMA_Start_IT+0x26>
 8008032:	2302      	movs	r3, #2
 8008034:	e040      	b.n	80080b8 <HAL_DMA_Start_IT+0xa8>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d12f      	bne.n	80080aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fa4a 	bl	80084f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008068:	223f      	movs	r2, #63	; 0x3f
 800806a:	409a      	lsls	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0216 	orr.w	r2, r2, #22
 800807e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d007      	beq.n	8008098 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0208 	orr.w	r2, r2, #8
 8008096:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e005      	b.n	80080b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80080b2:	2302      	movs	r3, #2
 80080b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80080ce:	f7ff f9ab 	bl	8007428 <HAL_GetTick>
 80080d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d008      	beq.n	80080f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2280      	movs	r2, #128	; 0x80
 80080e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e052      	b.n	8008198 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0216 	bic.w	r2, r2, #22
 8008100:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695a      	ldr	r2, [r3, #20]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008110:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <HAL_DMA_Abort+0x62>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0208 	bic.w	r2, r2, #8
 8008130:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0201 	bic.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008142:	e013      	b.n	800816c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008144:	f7ff f970 	bl	8007428 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b05      	cmp	r3, #5
 8008150:	d90c      	bls.n	800816c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2203      	movs	r2, #3
 800815c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e015      	b.n	8008198 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e4      	bne.n	8008144 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817e:	223f      	movs	r2, #63	; 0x3f
 8008180:	409a      	lsls	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d004      	beq.n	80081be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2280      	movs	r2, #128	; 0x80
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e00c      	b.n	80081d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2205      	movs	r2, #5
 80081c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0201 	bic.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081f0:	4b8e      	ldr	r3, [pc, #568]	; (800842c <HAL_DMA_IRQHandler+0x248>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a8e      	ldr	r2, [pc, #568]	; (8008430 <HAL_DMA_IRQHandler+0x24c>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	0a9b      	lsrs	r3, r3, #10
 80081fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008202:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820e:	2208      	movs	r2, #8
 8008210:	409a      	lsls	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4013      	ands	r3, r2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01a      	beq.n	8008250 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d013      	beq.n	8008250 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0204 	bic.w	r2, r2, #4
 8008236:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823c:	2208      	movs	r2, #8
 800823e:	409a      	lsls	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008248:	f043 0201 	orr.w	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008254:	2201      	movs	r2, #1
 8008256:	409a      	lsls	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d012      	beq.n	8008286 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00b      	beq.n	8008286 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008272:	2201      	movs	r2, #1
 8008274:	409a      	lsls	r2, r3
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827e:	f043 0202 	orr.w	r2, r3, #2
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828a:	2204      	movs	r2, #4
 800828c:	409a      	lsls	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4013      	ands	r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d012      	beq.n	80082bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a8:	2204      	movs	r2, #4
 80082aa:	409a      	lsls	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b4:	f043 0204 	orr.w	r2, r3, #4
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c0:	2210      	movs	r2, #16
 80082c2:	409a      	lsls	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d043      	beq.n	8008354 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d03c      	beq.n	8008354 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082de:	2210      	movs	r2, #16
 80082e0:	409a      	lsls	r2, r3
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d018      	beq.n	8008326 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d108      	bne.n	8008314 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d024      	beq.n	8008354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	e01f      	b.n	8008354 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01b      	beq.n	8008354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
 8008324:	e016      	b.n	8008354 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0208 	bic.w	r2, r2, #8
 8008342:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008358:	2220      	movs	r2, #32
 800835a:	409a      	lsls	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4013      	ands	r3, r2
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 808f 	beq.w	8008484 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8087 	beq.w	8008484 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837a:	2220      	movs	r2, #32
 800837c:	409a      	lsls	r2, r3
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b05      	cmp	r3, #5
 800838c:	d136      	bne.n	80083fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0216 	bic.w	r2, r2, #22
 800839c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <HAL_DMA_IRQHandler+0x1da>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0208 	bic.w	r2, r2, #8
 80083cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d2:	223f      	movs	r2, #63	; 0x3f
 80083d4:	409a      	lsls	r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d07e      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
        }
        return;
 80083fa:	e079      	b.n	80084f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01d      	beq.n	8008446 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10d      	bne.n	8008434 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841c:	2b00      	cmp	r3, #0
 800841e:	d031      	beq.n	8008484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	4798      	blx	r3
 8008428:	e02c      	b.n	8008484 <HAL_DMA_IRQHandler+0x2a0>
 800842a:	bf00      	nop
 800842c:	20000030 	.word	0x20000030
 8008430:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d023      	beq.n	8008484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
 8008444:	e01e      	b.n	8008484 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10f      	bne.n	8008474 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0210 	bic.w	r2, r2, #16
 8008462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008488:	2b00      	cmp	r3, #0
 800848a:	d032      	beq.n	80084f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d022      	beq.n	80084de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2205      	movs	r2, #5
 800849c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60bb      	str	r3, [r7, #8]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d307      	bcc.n	80084cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f2      	bne.n	80084b0 <HAL_DMA_IRQHandler+0x2cc>
 80084ca:	e000      	b.n	80084ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80084cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	e000      	b.n	80084f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80084f0:	bf00      	nop
    }
  }
}
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008514:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d108      	bne.n	8008538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008536:	e007      	b.n	8008548 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	60da      	str	r2, [r3, #12]
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	3b10      	subs	r3, #16
 8008564:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <DMA_CalcBaseAndBitshift+0x64>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <DMA_CalcBaseAndBitshift+0x68>)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d909      	bls.n	8008596 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	659a      	str	r2, [r3, #88]	; 0x58
 8008594:	e007      	b.n	80085a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	aaaaaaab 	.word	0xaaaaaaab
 80085bc:	080154c8 	.word	0x080154c8

080085c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d11f      	bne.n	800861a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d856      	bhi.n	800868e <DMA_CheckFifoParam+0xce>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <DMA_CheckFifoParam+0x28>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	0800860b 	.word	0x0800860b
 80085f0:	080085f9 	.word	0x080085f9
 80085f4:	0800868f 	.word	0x0800868f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d046      	beq.n	8008692 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008608:	e043      	b.n	8008692 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008612:	d140      	bne.n	8008696 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008618:	e03d      	b.n	8008696 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008622:	d121      	bne.n	8008668 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d837      	bhi.n	800869a <DMA_CheckFifoParam+0xda>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <DMA_CheckFifoParam+0x70>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008641 	.word	0x08008641
 8008634:	08008647 	.word	0x08008647
 8008638:	08008641 	.word	0x08008641
 800863c:	08008659 	.word	0x08008659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
      break;
 8008644:	e030      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d025      	beq.n	800869e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008656:	e022      	b.n	800869e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008660:	d11f      	bne.n	80086a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008666:	e01c      	b.n	80086a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d903      	bls.n	8008676 <DMA_CheckFifoParam+0xb6>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d003      	beq.n	800867c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008674:	e018      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
      break;
 800867a:	e015      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00e      	beq.n	80086a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
      break;
 800868c:	e00b      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;
 800868e:	bf00      	nop
 8008690:	e00a      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      break;
 8008692:	bf00      	nop
 8008694:	e008      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      break;
 8008696:	bf00      	nop
 8008698:	e006      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      break;
 800869a:	bf00      	nop
 800869c:	e004      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      break;
 800869e:	bf00      	nop
 80086a0:	e002      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <DMA_CheckFifoParam+0xe8>
      break;
 80086a6:	bf00      	nop
    }
  } 
  
  return status; 
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop

080086b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b089      	sub	sp, #36	; 0x24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	e165      	b.n	80089a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086d4:	2201      	movs	r2, #1
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4013      	ands	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	f040 8154 	bne.w	800899a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d005      	beq.n	800870a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008706:	2b02      	cmp	r3, #2
 8008708:	d130      	bne.n	800876c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	2203      	movs	r2, #3
 8008716:	fa02 f303 	lsl.w	r3, r2, r3
 800871a:	43db      	mvns	r3, r3
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	4013      	ands	r3, r2
 8008720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	fa02 f303 	lsl.w	r3, r2, r3
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	4313      	orrs	r3, r2
 8008732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008740:	2201      	movs	r2, #1
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	fa02 f303 	lsl.w	r3, r2, r3
 8008748:	43db      	mvns	r3, r3
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	4013      	ands	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	091b      	lsrs	r3, r3, #4
 8008756:	f003 0201 	and.w	r2, r3, #1
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	4313      	orrs	r3, r2
 8008764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	2b03      	cmp	r3, #3
 8008776:	d017      	beq.n	80087a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	2203      	movs	r2, #3
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	43db      	mvns	r3, r3
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	4013      	ands	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	fa02 f303 	lsl.w	r3, r2, r3
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	4313      	orrs	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d123      	bne.n	80087fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	08da      	lsrs	r2, r3, #3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3208      	adds	r2, #8
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	220f      	movs	r2, #15
 80087cc:	fa02 f303 	lsl.w	r3, r2, r3
 80087d0:	43db      	mvns	r3, r3
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	4013      	ands	r3, r2
 80087d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	08da      	lsrs	r2, r3, #3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3208      	adds	r2, #8
 80087f6:	69b9      	ldr	r1, [r7, #24]
 80087f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	2203      	movs	r2, #3
 8008808:	fa02 f303 	lsl.w	r3, r2, r3
 800880c:	43db      	mvns	r3, r3
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	4013      	ands	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f003 0203 	and.w	r2, r3, #3
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	fa02 f303 	lsl.w	r3, r2, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4313      	orrs	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80ae 	beq.w	800899a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	4b5d      	ldr	r3, [pc, #372]	; (80089b8 <HAL_GPIO_Init+0x300>)
 8008844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008846:	4a5c      	ldr	r2, [pc, #368]	; (80089b8 <HAL_GPIO_Init+0x300>)
 8008848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800884c:	6453      	str	r3, [r2, #68]	; 0x44
 800884e:	4b5a      	ldr	r3, [pc, #360]	; (80089b8 <HAL_GPIO_Init+0x300>)
 8008850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800885a:	4a58      	ldr	r2, [pc, #352]	; (80089bc <HAL_GPIO_Init+0x304>)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	089b      	lsrs	r3, r3, #2
 8008860:	3302      	adds	r3, #2
 8008862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f003 0303 	and.w	r3, r3, #3
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	220f      	movs	r2, #15
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43db      	mvns	r3, r3
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	4013      	ands	r3, r2
 800887c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a4f      	ldr	r2, [pc, #316]	; (80089c0 <HAL_GPIO_Init+0x308>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d025      	beq.n	80088d2 <HAL_GPIO_Init+0x21a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a4e      	ldr	r2, [pc, #312]	; (80089c4 <HAL_GPIO_Init+0x30c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d01f      	beq.n	80088ce <HAL_GPIO_Init+0x216>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a4d      	ldr	r2, [pc, #308]	; (80089c8 <HAL_GPIO_Init+0x310>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d019      	beq.n	80088ca <HAL_GPIO_Init+0x212>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a4c      	ldr	r2, [pc, #304]	; (80089cc <HAL_GPIO_Init+0x314>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d013      	beq.n	80088c6 <HAL_GPIO_Init+0x20e>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a4b      	ldr	r2, [pc, #300]	; (80089d0 <HAL_GPIO_Init+0x318>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00d      	beq.n	80088c2 <HAL_GPIO_Init+0x20a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a4a      	ldr	r2, [pc, #296]	; (80089d4 <HAL_GPIO_Init+0x31c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d007      	beq.n	80088be <HAL_GPIO_Init+0x206>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a49      	ldr	r2, [pc, #292]	; (80089d8 <HAL_GPIO_Init+0x320>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d101      	bne.n	80088ba <HAL_GPIO_Init+0x202>
 80088b6:	2306      	movs	r3, #6
 80088b8:	e00c      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088ba:	2307      	movs	r3, #7
 80088bc:	e00a      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088be:	2305      	movs	r3, #5
 80088c0:	e008      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088c2:	2304      	movs	r3, #4
 80088c4:	e006      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088c6:	2303      	movs	r3, #3
 80088c8:	e004      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e002      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <HAL_GPIO_Init+0x21c>
 80088d2:	2300      	movs	r3, #0
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	f002 0203 	and.w	r2, r2, #3
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	4093      	lsls	r3, r2
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088e4:	4935      	ldr	r1, [pc, #212]	; (80089bc <HAL_GPIO_Init+0x304>)
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	089b      	lsrs	r3, r3, #2
 80088ea:	3302      	adds	r3, #2
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088f2:	4b3a      	ldr	r3, [pc, #232]	; (80089dc <HAL_GPIO_Init+0x324>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	43db      	mvns	r3, r3
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	4013      	ands	r3, r2
 8008900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008916:	4a31      	ldr	r2, [pc, #196]	; (80089dc <HAL_GPIO_Init+0x324>)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800891c:	4b2f      	ldr	r3, [pc, #188]	; (80089dc <HAL_GPIO_Init+0x324>)
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	43db      	mvns	r3, r3
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	4013      	ands	r3, r2
 800892a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008940:	4a26      	ldr	r2, [pc, #152]	; (80089dc <HAL_GPIO_Init+0x324>)
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008946:	4b25      	ldr	r3, [pc, #148]	; (80089dc <HAL_GPIO_Init+0x324>)
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	43db      	mvns	r3, r3
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	4013      	ands	r3, r2
 8008954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800896a:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <HAL_GPIO_Init+0x324>)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <HAL_GPIO_Init+0x324>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	43db      	mvns	r3, r3
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	4013      	ands	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	4313      	orrs	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008994:	4a11      	ldr	r2, [pc, #68]	; (80089dc <HAL_GPIO_Init+0x324>)
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	3301      	adds	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b0f      	cmp	r3, #15
 80089a4:	f67f ae96 	bls.w	80086d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	3724      	adds	r7, #36	; 0x24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40023800 	.word	0x40023800
 80089bc:	40013800 	.word	0x40013800
 80089c0:	40020000 	.word	0x40020000
 80089c4:	40020400 	.word	0x40020400
 80089c8:	40020800 	.word	0x40020800
 80089cc:	40020c00 	.word	0x40020c00
 80089d0:	40021000 	.word	0x40021000
 80089d4:	40021400 	.word	0x40021400
 80089d8:	40021800 	.word	0x40021800
 80089dc:	40013c00 	.word	0x40013c00

080089e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	887b      	ldrh	r3, [r7, #2]
 80089f2:	4013      	ands	r3, r2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
 80089fc:	e001      	b.n	8008a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	807b      	strh	r3, [r7, #2]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a20:	787b      	ldrb	r3, [r7, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a26:	887a      	ldrh	r2, [r7, #2]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a2c:	e003      	b.n	8008a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a2e:	887b      	ldrh	r3, [r7, #2]
 8008a30:	041a      	lsls	r2, r3, #16
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	619a      	str	r2, [r3, #24]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008a54:	887a      	ldrh	r2, [r7, #2]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	041a      	lsls	r2, r3, #16
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	43d9      	mvns	r1, r3
 8008a60:	887b      	ldrh	r3, [r7, #2]
 8008a62:	400b      	ands	r3, r1
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	619a      	str	r2, [r3, #24]
}
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a8e:	4a05      	ldr	r2, [pc, #20]	; (8008aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a94:	88fb      	ldrh	r3, [r7, #6]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fb fcda 	bl	8004450 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40013c00 	.word	0x40013c00

08008aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e12b      	b.n	8008d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7fb ff0a 	bl	80048e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2224      	movs	r2, #36	; 0x24
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0201 	bic.w	r2, r2, #1
 8008aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b0c:	f001 f9fc 	bl	8009f08 <HAL_RCC_GetPCLK1Freq>
 8008b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	4a81      	ldr	r2, [pc, #516]	; (8008d1c <HAL_I2C_Init+0x274>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d807      	bhi.n	8008b2c <HAL_I2C_Init+0x84>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4a80      	ldr	r2, [pc, #512]	; (8008d20 <HAL_I2C_Init+0x278>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bf94      	ite	ls
 8008b24:	2301      	movls	r3, #1
 8008b26:	2300      	movhi	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	e006      	b.n	8008b3a <HAL_I2C_Init+0x92>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4a7d      	ldr	r2, [pc, #500]	; (8008d24 <HAL_I2C_Init+0x27c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	bf94      	ite	ls
 8008b34:	2301      	movls	r3, #1
 8008b36:	2300      	movhi	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e0e7      	b.n	8008d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4a78      	ldr	r2, [pc, #480]	; (8008d28 <HAL_I2C_Init+0x280>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	0c9b      	lsrs	r3, r3, #18
 8008b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4a6a      	ldr	r2, [pc, #424]	; (8008d1c <HAL_I2C_Init+0x274>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d802      	bhi.n	8008b7c <HAL_I2C_Init+0xd4>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	e009      	b.n	8008b90 <HAL_I2C_Init+0xe8>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b82:	fb02 f303 	mul.w	r3, r2, r3
 8008b86:	4a69      	ldr	r2, [pc, #420]	; (8008d2c <HAL_I2C_Init+0x284>)
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	099b      	lsrs	r3, r3, #6
 8008b8e:	3301      	adds	r3, #1
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6812      	ldr	r2, [r2, #0]
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	495c      	ldr	r1, [pc, #368]	; (8008d1c <HAL_I2C_Init+0x274>)
 8008bac:	428b      	cmp	r3, r1
 8008bae:	d819      	bhi.n	8008be4 <HAL_I2C_Init+0x13c>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	1e59      	subs	r1, r3, #1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bbe:	1c59      	adds	r1, r3, #1
 8008bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008bc4:	400b      	ands	r3, r1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <HAL_I2C_Init+0x138>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1e59      	subs	r1, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bd8:	3301      	adds	r3, #1
 8008bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bde:	e051      	b.n	8008c84 <HAL_I2C_Init+0x1dc>
 8008be0:	2304      	movs	r3, #4
 8008be2:	e04f      	b.n	8008c84 <HAL_I2C_Init+0x1dc>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d111      	bne.n	8008c10 <HAL_I2C_Init+0x168>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	1e58      	subs	r0, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6859      	ldr	r1, [r3, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	440b      	add	r3, r1
 8008bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	bf0c      	ite	eq
 8008c08:	2301      	moveq	r3, #1
 8008c0a:	2300      	movne	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	e012      	b.n	8008c36 <HAL_I2C_Init+0x18e>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	1e58      	subs	r0, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	0099      	lsls	r1, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c26:	3301      	adds	r3, #1
 8008c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bf0c      	ite	eq
 8008c30:	2301      	moveq	r3, #1
 8008c32:	2300      	movne	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <HAL_I2C_Init+0x196>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e022      	b.n	8008c84 <HAL_I2C_Init+0x1dc>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10e      	bne.n	8008c64 <HAL_I2C_Init+0x1bc>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	1e58      	subs	r0, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6859      	ldr	r1, [r3, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	440b      	add	r3, r1
 8008c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c58:	3301      	adds	r3, #1
 8008c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	e00f      	b.n	8008c84 <HAL_I2C_Init+0x1dc>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	1e58      	subs	r0, r3, #1
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6859      	ldr	r1, [r3, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	0099      	lsls	r1, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	6809      	ldr	r1, [r1, #0]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69da      	ldr	r2, [r3, #28]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6911      	ldr	r1, [r2, #16]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	68d2      	ldr	r2, [r2, #12]
 8008cbe:	4311      	orrs	r1, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	695a      	ldr	r2, [r3, #20]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	000186a0 	.word	0x000186a0
 8008d20:	001e847f 	.word	0x001e847f
 8008d24:	003d08ff 	.word	0x003d08ff
 8008d28:	431bde83 	.word	0x431bde83
 8008d2c:	10624dd3 	.word	0x10624dd3

08008d30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	4608      	mov	r0, r1
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	817b      	strh	r3, [r7, #10]
 8008d42:	460b      	mov	r3, r1
 8008d44:	813b      	strh	r3, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d4a:	f7fe fb6d 	bl	8007428 <HAL_GetTick>
 8008d4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	f040 80d9 	bne.w	8008f10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	2319      	movs	r3, #25
 8008d64:	2201      	movs	r2, #1
 8008d66:	496d      	ldr	r1, [pc, #436]	; (8008f1c <HAL_I2C_Mem_Write+0x1ec>)
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fdad 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
 8008d76:	e0cc      	b.n	8008f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_I2C_Mem_Write+0x56>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e0c5      	b.n	8008f12 <HAL_I2C_Mem_Write+0x1e2>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d007      	beq.n	8008dac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2221      	movs	r2, #33	; 0x21
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2240      	movs	r2, #64	; 0x40
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a3a      	ldr	r2, [r7, #32]
 8008dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a4d      	ldr	r2, [pc, #308]	; (8008f20 <HAL_I2C_Mem_Write+0x1f0>)
 8008dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dee:	88f8      	ldrh	r0, [r7, #6]
 8008df0:	893a      	ldrh	r2, [r7, #8]
 8008df2:	8979      	ldrh	r1, [r7, #10]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fbe4 	bl	80095cc <I2C_RequestMemoryWrite>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d052      	beq.n	8008eb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e081      	b.n	8008f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fe2e 	bl	8009a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00d      	beq.n	8008e3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	d107      	bne.n	8008e36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e06b      	b.n	8008f12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d11b      	bne.n	8008eb0 <HAL_I2C_Mem_Write+0x180>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d017      	beq.n	8008eb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1aa      	bne.n	8008e0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fe1a 	bl	8009af6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00d      	beq.n	8008ee4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d107      	bne.n	8008ee0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ede:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e016      	b.n	8008f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	00100002 	.word	0x00100002
 8008f20:	ffff0000 	.word	0xffff0000

08008f24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	; 0x30
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	4611      	mov	r1, r2
 8008f30:	461a      	mov	r2, r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	817b      	strh	r3, [r7, #10]
 8008f36:	460b      	mov	r3, r1
 8008f38:	813b      	strh	r3, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f3e:	f7fe fa73 	bl	8007428 <HAL_GetTick>
 8008f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	f040 8208 	bne.w	8009362 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	2319      	movs	r3, #25
 8008f58:	2201      	movs	r2, #1
 8008f5a:	497b      	ldr	r1, [pc, #492]	; (8009148 <HAL_I2C_Mem_Read+0x224>)
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 fcb3 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e1fb      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_I2C_Mem_Read+0x56>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e1f4      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d007      	beq.n	8008fa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2222      	movs	r2, #34	; 0x22
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a5b      	ldr	r2, [pc, #364]	; (800914c <HAL_I2C_Mem_Read+0x228>)
 8008fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fe2:	88f8      	ldrh	r0, [r7, #6]
 8008fe4:	893a      	ldrh	r2, [r7, #8]
 8008fe6:	8979      	ldrh	r1, [r7, #10]
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fb80 	bl	80096f8 <I2C_RequestMemoryRead>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e1b0      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009006:	2b00      	cmp	r3, #0
 8009008:	d113      	bne.n	8009032 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800900a:	2300      	movs	r3, #0
 800900c:	623b      	str	r3, [r7, #32]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	623b      	str	r3, [r7, #32]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	623b      	str	r3, [r7, #32]
 800901e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	e184      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009036:	2b01      	cmp	r3, #1
 8009038:	d11b      	bne.n	8009072 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	61fb      	str	r3, [r7, #28]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	61fb      	str	r3, [r7, #28]
 800905e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e164      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009076:	2b02      	cmp	r3, #2
 8009078:	d11b      	bne.n	80090b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009088:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	61bb      	str	r3, [r7, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	e144      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090b2:	2300      	movs	r3, #0
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	617b      	str	r3, [r7, #20]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80090c8:	e138      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	f200 80f1 	bhi.w	80092b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d123      	bne.n	8009124 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fd49 	bl	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e139      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691a      	ldr	r2, [r3, #16]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009118:	b29b      	uxth	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009122:	e10b      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009128:	2b02      	cmp	r3, #2
 800912a:	d14e      	bne.n	80091ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	2200      	movs	r2, #0
 8009134:	4906      	ldr	r1, [pc, #24]	; (8009150 <HAL_I2C_Mem_Read+0x22c>)
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fbc6 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e10e      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
 8009146:	bf00      	nop
 8009148:	00100002 	.word	0x00100002
 800914c:	ffff0000 	.word	0xffff0000
 8009150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	b2d2      	uxtb	r2, r2
 8009170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918c:	b29b      	uxth	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	b29a      	uxth	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	b2d2      	uxtb	r2, r2
 80091a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091c8:	e0b8      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	2200      	movs	r2, #0
 80091d2:	4966      	ldr	r1, [pc, #408]	; (800936c <HAL_I2C_Mem_Read+0x448>)
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fb77 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e0bf      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009210:	3b01      	subs	r3, #1
 8009212:	b29a      	uxth	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	2200      	movs	r2, #0
 800922e:	494f      	ldr	r1, [pc, #316]	; (800936c <HAL_I2C_Mem_Read+0x448>)
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fb49 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e091      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800924e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691a      	ldr	r2, [r3, #16]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	b2d2      	uxtb	r2, r2
 800925c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800926c:	3b01      	subs	r3, #1
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009278:	b29b      	uxth	r3, r3
 800927a:	3b01      	subs	r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	b2d2      	uxtb	r2, r2
 800928e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092b4:	e042      	b.n	800933c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fc5c 	bl	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e04c      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	b2d2      	uxtb	r2, r2
 80092d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	3b01      	subs	r3, #1
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b04      	cmp	r3, #4
 8009308:	d118      	bne.n	800933c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009340:	2b00      	cmp	r3, #0
 8009342:	f47f aec2 	bne.w	80090ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2220      	movs	r2, #32
 800934a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	e000      	b.n	8009364 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009362:	2302      	movs	r3, #2
  }
}
 8009364:	4618      	mov	r0, r3
 8009366:	3728      	adds	r7, #40	; 0x28
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	00010004 	.word	0x00010004

08009370 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08a      	sub	sp, #40	; 0x28
 8009374:	af02      	add	r7, sp, #8
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	460b      	mov	r3, r1
 800937e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009380:	f7fe f852 	bl	8007428 <HAL_GetTick>
 8009384:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b20      	cmp	r3, #32
 8009394:	f040 8111 	bne.w	80095ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	2319      	movs	r3, #25
 800939e:	2201      	movs	r2, #1
 80093a0:	4988      	ldr	r1, [pc, #544]	; (80095c4 <HAL_I2C_IsDeviceReady+0x254>)
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 fa90 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80093ae:	2302      	movs	r3, #2
 80093b0:	e104      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_I2C_IsDeviceReady+0x50>
 80093bc:	2302      	movs	r3, #2
 80093be:	e0fd      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d007      	beq.n	80093e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0201 	orr.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2224      	movs	r2, #36	; 0x24
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4a70      	ldr	r2, [pc, #448]	; (80095c8 <HAL_I2C_IsDeviceReady+0x258>)
 8009408:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009418:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2200      	movs	r2, #0
 8009422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fa4e 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00d      	beq.n	800944e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009440:	d103      	bne.n	800944a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009448:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e0b6      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800944e:	897b      	ldrh	r3, [r7, #10]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	461a      	mov	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800945c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800945e:	f7fd ffe3 	bl	8007428 <HAL_GetTick>
 8009462:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b02      	cmp	r3, #2
 8009470:	bf0c      	ite	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	2300      	movne	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009488:	bf0c      	ite	eq
 800948a:	2301      	moveq	r3, #1
 800948c:	2300      	movne	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009492:	e025      	b.n	80094e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009494:	f7fd ffc8 	bl	8007428 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d302      	bcc.n	80094aa <HAL_I2C_IsDeviceReady+0x13a>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	22a0      	movs	r2, #160	; 0xa0
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b02      	cmp	r3, #2
 80094be:	bf0c      	ite	eq
 80094c0:	2301      	moveq	r3, #1
 80094c2:	2300      	movne	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d6:	bf0c      	ite	eq
 80094d8:	2301      	moveq	r3, #1
 80094da:	2300      	movne	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2ba0      	cmp	r3, #160	; 0xa0
 80094ea:	d005      	beq.n	80094f8 <HAL_I2C_IsDeviceReady+0x188>
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <HAL_I2C_IsDeviceReady+0x188>
 80094f2:	7dbb      	ldrb	r3, [r7, #22]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0cd      	beq.n	8009494 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b02      	cmp	r3, #2
 800950c:	d129      	bne.n	8009562 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800951c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2319      	movs	r3, #25
 800953a:	2201      	movs	r2, #1
 800953c:	4921      	ldr	r1, [pc, #132]	; (80095c4 <HAL_I2C_IsDeviceReady+0x254>)
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f9c2 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e036      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e02c      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009570:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800957a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	2319      	movs	r3, #25
 8009582:	2201      	movs	r2, #1
 8009584:	490f      	ldr	r1, [pc, #60]	; (80095c4 <HAL_I2C_IsDeviceReady+0x254>)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f99e 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e012      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	3301      	adds	r3, #1
 800959a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	f4ff af32 	bcc.w	800940a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80095ba:	2302      	movs	r3, #2
  }
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3720      	adds	r7, #32
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	00100002 	.word	0x00100002
 80095c8:	ffff0000 	.word	0xffff0000

080095cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	4603      	mov	r3, r0
 80095dc:	817b      	strh	r3, [r7, #10]
 80095de:	460b      	mov	r3, r1
 80095e0:	813b      	strh	r3, [r7, #8]
 80095e2:	4613      	mov	r3, r2
 80095e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 f960 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00d      	beq.n	800962a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961c:	d103      	bne.n	8009626 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009624:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e05f      	b.n	80096ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800962a:	897b      	ldrh	r3, [r7, #10]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009638:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	6a3a      	ldr	r2, [r7, #32]
 800963e:	492d      	ldr	r1, [pc, #180]	; (80096f4 <I2C_RequestMemoryWrite+0x128>)
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 f998 	bl	8009976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e04c      	b.n	80096ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009668:	6a39      	ldr	r1, [r7, #32]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fa02 	bl	8009a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00d      	beq.n	8009692 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	2b04      	cmp	r3, #4
 800967c:	d107      	bne.n	800968e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800968c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e02b      	b.n	80096ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d105      	bne.n	80096a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009698:	893b      	ldrh	r3, [r7, #8]
 800969a:	b2da      	uxtb	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	611a      	str	r2, [r3, #16]
 80096a2:	e021      	b.n	80096e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096a4:	893b      	ldrh	r3, [r7, #8]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b4:	6a39      	ldr	r1, [r7, #32]
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f9dc 	bl	8009a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d107      	bne.n	80096da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e005      	b.n	80096ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096de:	893b      	ldrh	r3, [r7, #8]
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	00010002 	.word	0x00010002

080096f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af02      	add	r7, sp, #8
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	461a      	mov	r2, r3
 8009706:	4603      	mov	r3, r0
 8009708:	817b      	strh	r3, [r7, #10]
 800970a:	460b      	mov	r3, r1
 800970c:	813b      	strh	r3, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009720:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009730:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	2200      	movs	r2, #0
 800973a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f000 f8c2 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00d      	beq.n	8009766 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009758:	d103      	bne.n	8009762 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e0aa      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009766:	897b      	ldrh	r3, [r7, #10]
 8009768:	b2db      	uxtb	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009774:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	6a3a      	ldr	r2, [r7, #32]
 800977a:	4952      	ldr	r1, [pc, #328]	; (80098c4 <I2C_RequestMemoryRead+0x1cc>)
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f8fa 	bl	8009976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e097      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800978c:	2300      	movs	r3, #0
 800978e:	617b      	str	r3, [r7, #20]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a4:	6a39      	ldr	r1, [r7, #32]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f964 	bl	8009a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00d      	beq.n	80097ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d107      	bne.n	80097ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e076      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097ce:	88fb      	ldrh	r3, [r7, #6]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d105      	bne.n	80097e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097d4:	893b      	ldrh	r3, [r7, #8]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	611a      	str	r2, [r3, #16]
 80097de:	e021      	b.n	8009824 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80097e0:	893b      	ldrh	r3, [r7, #8]
 80097e2:	0a1b      	lsrs	r3, r3, #8
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f0:	6a39      	ldr	r1, [r7, #32]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f93e 	bl	8009a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00d      	beq.n	800981a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	2b04      	cmp	r3, #4
 8009804:	d107      	bne.n	8009816 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009814:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e050      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800981a:	893b      	ldrh	r3, [r7, #8]
 800981c:	b2da      	uxtb	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009826:	6a39      	ldr	r1, [r7, #32]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 f923 	bl	8009a74 <I2C_WaitOnTXEFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00d      	beq.n	8009850 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	2b04      	cmp	r3, #4
 800983a:	d107      	bne.n	800984c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e035      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800985e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	2200      	movs	r2, #0
 8009868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f82b 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00d      	beq.n	8009894 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009886:	d103      	bne.n	8009890 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800988e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e013      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009894:	897b      	ldrh	r3, [r7, #10]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	f043 0301 	orr.w	r3, r3, #1
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	6a3a      	ldr	r2, [r7, #32]
 80098a8:	4906      	ldr	r1, [pc, #24]	; (80098c4 <I2C_RequestMemoryRead+0x1cc>)
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f863 	bl	8009976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	00010002 	.word	0x00010002

080098c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098d8:	e025      	b.n	8009926 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e0:	d021      	beq.n	8009926 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098e2:	f7fd fda1 	bl	8007428 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d302      	bcc.n	80098f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d116      	bne.n	8009926 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2220      	movs	r2, #32
 8009902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	f043 0220 	orr.w	r2, r3, #32
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e023      	b.n	800996e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	0c1b      	lsrs	r3, r3, #16
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	d10d      	bne.n	800994c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	43da      	mvns	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4013      	ands	r3, r2
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	e00c      	b.n	8009966 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	43da      	mvns	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4013      	ands	r3, r2
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	429a      	cmp	r2, r3
 800996a:	d0b6      	beq.n	80098da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009984:	e051      	b.n	8009a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009994:	d123      	bne.n	80099de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	f043 0204 	orr.w	r2, r3, #4
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e046      	b.n	8009a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e4:	d021      	beq.n	8009a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e6:	f7fd fd1f 	bl	8007428 <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d302      	bcc.n	80099fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d116      	bne.n	8009a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f043 0220 	orr.w	r2, r3, #32
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e020      	b.n	8009a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	0c1b      	lsrs	r3, r3, #16
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d10c      	bne.n	8009a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	43da      	mvns	r2, r3
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4013      	ands	r3, r2
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	bf14      	ite	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	2300      	moveq	r3, #0
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	e00b      	b.n	8009a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	43da      	mvns	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bf14      	ite	ne
 8009a60:	2301      	movne	r3, #1
 8009a62:	2300      	moveq	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d18d      	bne.n	8009986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a80:	e02d      	b.n	8009ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f8ce 	bl	8009c24 <I2C_IsAcknowledgeFailed>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e02d      	b.n	8009aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a98:	d021      	beq.n	8009ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9a:	f7fd fcc5 	bl	8007428 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d302      	bcc.n	8009ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d116      	bne.n	8009ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	f043 0220 	orr.w	r2, r3, #32
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e007      	b.n	8009aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae8:	2b80      	cmp	r3, #128	; 0x80
 8009aea:	d1ca      	bne.n	8009a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b02:	e02d      	b.n	8009b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f88d 	bl	8009c24 <I2C_IsAcknowledgeFailed>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e02d      	b.n	8009b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b1a:	d021      	beq.n	8009b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1c:	f7fd fc84 	bl	8007428 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d116      	bne.n	8009b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4c:	f043 0220 	orr.w	r2, r3, #32
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e007      	b.n	8009b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	f003 0304 	and.w	r3, r3, #4
 8009b6a:	2b04      	cmp	r3, #4
 8009b6c:	d1ca      	bne.n	8009b04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b84:	e042      	b.n	8009c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b10      	cmp	r3, #16
 8009b92:	d119      	bne.n	8009bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0210 	mvn.w	r2, #16
 8009b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e029      	b.n	8009c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc8:	f7fd fc2e 	bl	8007428 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d302      	bcc.n	8009bde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d116      	bne.n	8009c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	f043 0220 	orr.w	r2, r3, #32
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e007      	b.n	8009c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c16:	2b40      	cmp	r3, #64	; 0x40
 8009c18:	d1b5      	bne.n	8009b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c3a:	d11b      	bne.n	8009c74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	f043 0204 	orr.w	r2, r3, #4
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c8e:	2300      	movs	r3, #0
 8009c90:	603b      	str	r3, [r7, #0]
 8009c92:	4b20      	ldr	r3, [pc, #128]	; (8009d14 <HAL_PWREx_EnableOverDrive+0x90>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	4a1f      	ldr	r2, [pc, #124]	; (8009d14 <HAL_PWREx_EnableOverDrive+0x90>)
 8009c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c9e:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <HAL_PWREx_EnableOverDrive+0x90>)
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009caa:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x94>)
 8009cac:	2201      	movs	r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009cb0:	f7fd fbba 	bl	8007428 <HAL_GetTick>
 8009cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009cb6:	e009      	b.n	8009ccc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009cb8:	f7fd fbb6 	bl	8007428 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cc6:	d901      	bls.n	8009ccc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e01f      	b.n	8009d0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009ccc:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd8:	d1ee      	bne.n	8009cb8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009cda:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ce0:	f7fd fba2 	bl	8007428 <HAL_GetTick>
 8009ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ce6:	e009      	b.n	8009cfc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ce8:	f7fd fb9e 	bl	8007428 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cf6:	d901      	bls.n	8009cfc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e007      	b.n	8009d0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d08:	d1ee      	bne.n	8009ce8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40023800 	.word	0x40023800
 8009d18:	420e0040 	.word	0x420e0040
 8009d1c:	40007000 	.word	0x40007000
 8009d20:	420e0044 	.word	0x420e0044

08009d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e0cc      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d38:	4b68      	ldr	r3, [pc, #416]	; (8009edc <HAL_RCC_ClockConfig+0x1b8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d90c      	bls.n	8009d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d46:	4b65      	ldr	r3, [pc, #404]	; (8009edc <HAL_RCC_ClockConfig+0x1b8>)
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d4e:	4b63      	ldr	r3, [pc, #396]	; (8009edc <HAL_RCC_ClockConfig+0x1b8>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 030f 	and.w	r3, r3, #15
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d001      	beq.n	8009d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0b8      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d020      	beq.n	8009dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d78:	4b59      	ldr	r3, [pc, #356]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	4a58      	ldr	r2, [pc, #352]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d90:	4b53      	ldr	r3, [pc, #332]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	4a52      	ldr	r2, [pc, #328]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d9c:	4b50      	ldr	r3, [pc, #320]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	494d      	ldr	r1, [pc, #308]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d044      	beq.n	8009e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d107      	bne.n	8009dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dc2:	4b47      	ldr	r3, [pc, #284]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d119      	bne.n	8009e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e07f      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d003      	beq.n	8009de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d107      	bne.n	8009df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009de2:	4b3f      	ldr	r3, [pc, #252]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e06f      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df2:	4b3b      	ldr	r3, [pc, #236]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e067      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e02:	4b37      	ldr	r3, [pc, #220]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f023 0203 	bic.w	r2, r3, #3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	4934      	ldr	r1, [pc, #208]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e14:	f7fd fb08 	bl	8007428 <HAL_GetTick>
 8009e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1a:	e00a      	b.n	8009e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e1c:	f7fd fb04 	bl	8007428 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e04f      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e32:	4b2b      	ldr	r3, [pc, #172]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 020c 	and.w	r2, r3, #12
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d1eb      	bne.n	8009e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e44:	4b25      	ldr	r3, [pc, #148]	; (8009edc <HAL_RCC_ClockConfig+0x1b8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 030f 	and.w	r3, r3, #15
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d20c      	bcs.n	8009e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e52:	4b22      	ldr	r3, [pc, #136]	; (8009edc <HAL_RCC_ClockConfig+0x1b8>)
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e5a:	4b20      	ldr	r3, [pc, #128]	; (8009edc <HAL_RCC_ClockConfig+0x1b8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 030f 	and.w	r3, r3, #15
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d001      	beq.n	8009e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e032      	b.n	8009ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d008      	beq.n	8009e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e78:	4b19      	ldr	r3, [pc, #100]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	4916      	ldr	r1, [pc, #88]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 0308 	and.w	r3, r3, #8
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d009      	beq.n	8009eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e96:	4b12      	ldr	r3, [pc, #72]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	490e      	ldr	r1, [pc, #56]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009eaa:	f000 f855 	bl	8009f58 <HAL_RCC_GetSysClockFreq>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	091b      	lsrs	r3, r3, #4
 8009eb6:	f003 030f 	and.w	r3, r3, #15
 8009eba:	490a      	ldr	r1, [pc, #40]	; (8009ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8009ebc:	5ccb      	ldrb	r3, [r1, r3]
 8009ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec2:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009ec6:	4b09      	ldr	r3, [pc, #36]	; (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd fa68 	bl	80073a0 <HAL_InitTick>

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	40023c00 	.word	0x40023c00
 8009ee0:	40023800 	.word	0x40023800
 8009ee4:	080154a4 	.word	0x080154a4
 8009ee8:	20000030 	.word	0x20000030
 8009eec:	2000003c 	.word	0x2000003c

08009ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ef4:	4b03      	ldr	r3, [pc, #12]	; (8009f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000030 	.word	0x20000030

08009f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f0c:	f7ff fff0 	bl	8009ef0 <HAL_RCC_GetHCLKFreq>
 8009f10:	4602      	mov	r2, r0
 8009f12:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	0a9b      	lsrs	r3, r3, #10
 8009f18:	f003 0307 	and.w	r3, r3, #7
 8009f1c:	4903      	ldr	r1, [pc, #12]	; (8009f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f1e:	5ccb      	ldrb	r3, [r1, r3]
 8009f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	40023800 	.word	0x40023800
 8009f2c:	080154b4 	.word	0x080154b4

08009f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f34:	f7ff ffdc 	bl	8009ef0 <HAL_RCC_GetHCLKFreq>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	0b5b      	lsrs	r3, r3, #13
 8009f40:	f003 0307 	and.w	r3, r3, #7
 8009f44:	4903      	ldr	r1, [pc, #12]	; (8009f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f46:	5ccb      	ldrb	r3, [r1, r3]
 8009f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	40023800 	.word	0x40023800
 8009f54:	080154b4 	.word	0x080154b4

08009f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f5c:	b0ae      	sub	sp, #184	; 0xb8
 8009f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f7e:	4bcb      	ldr	r3, [pc, #812]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f003 030c 	and.w	r3, r3, #12
 8009f86:	2b0c      	cmp	r3, #12
 8009f88:	f200 8206 	bhi.w	800a398 <HAL_RCC_GetSysClockFreq+0x440>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fc9 	.word	0x08009fc9
 8009f98:	0800a399 	.word	0x0800a399
 8009f9c:	0800a399 	.word	0x0800a399
 8009fa0:	0800a399 	.word	0x0800a399
 8009fa4:	08009fd1 	.word	0x08009fd1
 8009fa8:	0800a399 	.word	0x0800a399
 8009fac:	0800a399 	.word	0x0800a399
 8009fb0:	0800a399 	.word	0x0800a399
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	0800a399 	.word	0x0800a399
 8009fbc:	0800a399 	.word	0x0800a399
 8009fc0:	0800a399 	.word	0x0800a399
 8009fc4:	0800a1c9 	.word	0x0800a1c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009fc8:	4bb9      	ldr	r3, [pc, #740]	; (800a2b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8009fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009fce:	e1e7      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009fd0:	4bb8      	ldr	r3, [pc, #736]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009fd6:	e1e3      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009fd8:	4bb4      	ldr	r3, [pc, #720]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009fe4:	4bb1      	ldr	r3, [pc, #708]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d071      	beq.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ff0:	4bae      	ldr	r3, [pc, #696]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	099b      	lsrs	r3, r3, #6
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ffc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a00c:	2300      	movs	r3, #0
 800a00e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a016:	4622      	mov	r2, r4
 800a018:	462b      	mov	r3, r5
 800a01a:	f04f 0000 	mov.w	r0, #0
 800a01e:	f04f 0100 	mov.w	r1, #0
 800a022:	0159      	lsls	r1, r3, #5
 800a024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a028:	0150      	lsls	r0, r2, #5
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4621      	mov	r1, r4
 800a030:	1a51      	subs	r1, r2, r1
 800a032:	6439      	str	r1, [r7, #64]	; 0x40
 800a034:	4629      	mov	r1, r5
 800a036:	eb63 0301 	sbc.w	r3, r3, r1
 800a03a:	647b      	str	r3, [r7, #68]	; 0x44
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a048:	4649      	mov	r1, r9
 800a04a:	018b      	lsls	r3, r1, #6
 800a04c:	4641      	mov	r1, r8
 800a04e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a052:	4641      	mov	r1, r8
 800a054:	018a      	lsls	r2, r1, #6
 800a056:	4641      	mov	r1, r8
 800a058:	1a51      	subs	r1, r2, r1
 800a05a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a05c:	4649      	mov	r1, r9
 800a05e:	eb63 0301 	sbc.w	r3, r3, r1
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	f04f 0300 	mov.w	r3, #0
 800a06c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a070:	4649      	mov	r1, r9
 800a072:	00cb      	lsls	r3, r1, #3
 800a074:	4641      	mov	r1, r8
 800a076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a07a:	4641      	mov	r1, r8
 800a07c:	00ca      	lsls	r2, r1, #3
 800a07e:	4610      	mov	r0, r2
 800a080:	4619      	mov	r1, r3
 800a082:	4603      	mov	r3, r0
 800a084:	4622      	mov	r2, r4
 800a086:	189b      	adds	r3, r3, r2
 800a088:	633b      	str	r3, [r7, #48]	; 0x30
 800a08a:	462b      	mov	r3, r5
 800a08c:	460a      	mov	r2, r1
 800a08e:	eb42 0303 	adc.w	r3, r2, r3
 800a092:	637b      	str	r3, [r7, #52]	; 0x34
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	024b      	lsls	r3, r1, #9
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	024a      	lsls	r2, r1, #9
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a0c4:	f7f6 fe30 	bl	8000d28 <__aeabi_uldivmod>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0d2:	e067      	b.n	800a1a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0d4:	4b75      	ldr	r3, [pc, #468]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	099b      	lsrs	r3, r3, #6
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a0e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ec:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	f04f 0000 	mov.w	r0, #0
 800a0fe:	f04f 0100 	mov.w	r1, #0
 800a102:	0159      	lsls	r1, r3, #5
 800a104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a108:	0150      	lsls	r0, r2, #5
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4621      	mov	r1, r4
 800a110:	1a51      	subs	r1, r2, r1
 800a112:	62b9      	str	r1, [r7, #40]	; 0x28
 800a114:	4629      	mov	r1, r5
 800a116:	eb63 0301 	sbc.w	r3, r3, r1
 800a11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	f04f 0300 	mov.w	r3, #0
 800a124:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a128:	4649      	mov	r1, r9
 800a12a:	018b      	lsls	r3, r1, #6
 800a12c:	4641      	mov	r1, r8
 800a12e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a132:	4641      	mov	r1, r8
 800a134:	018a      	lsls	r2, r1, #6
 800a136:	4641      	mov	r1, r8
 800a138:	ebb2 0a01 	subs.w	sl, r2, r1
 800a13c:	4649      	mov	r1, r9
 800a13e:	eb63 0b01 	sbc.w	fp, r3, r1
 800a142:	f04f 0200 	mov.w	r2, #0
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a14e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a156:	4692      	mov	sl, r2
 800a158:	469b      	mov	fp, r3
 800a15a:	4623      	mov	r3, r4
 800a15c:	eb1a 0303 	adds.w	r3, sl, r3
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	462b      	mov	r3, r5
 800a164:	eb4b 0303 	adc.w	r3, fp, r3
 800a168:	627b      	str	r3, [r7, #36]	; 0x24
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a176:	4629      	mov	r1, r5
 800a178:	028b      	lsls	r3, r1, #10
 800a17a:	4621      	mov	r1, r4
 800a17c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a180:	4621      	mov	r1, r4
 800a182:	028a      	lsls	r2, r1, #10
 800a184:	4610      	mov	r0, r2
 800a186:	4619      	mov	r1, r3
 800a188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a18c:	2200      	movs	r2, #0
 800a18e:	673b      	str	r3, [r7, #112]	; 0x70
 800a190:	677a      	str	r2, [r7, #116]	; 0x74
 800a192:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a196:	f7f6 fdc7 	bl	8000d28 <__aeabi_uldivmod>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4613      	mov	r3, r2
 800a1a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a1a4:	4b41      	ldr	r3, [pc, #260]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	0c1b      	lsrs	r3, r3, #16
 800a1aa:	f003 0303 	and.w	r3, r3, #3
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800a1b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a1c6:	e0eb      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1c8:	4b38      	ldr	r3, [pc, #224]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1d4:	4b35      	ldr	r3, [pc, #212]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d06b      	beq.n	800a2b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1e0:	4b32      	ldr	r3, [pc, #200]	; (800a2ac <HAL_RCC_GetSysClockFreq+0x354>)
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	099b      	lsrs	r3, r3, #6
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f2:	663b      	str	r3, [r7, #96]	; 0x60
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	667b      	str	r3, [r7, #100]	; 0x64
 800a1f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	462b      	mov	r3, r5
 800a200:	f04f 0000 	mov.w	r0, #0
 800a204:	f04f 0100 	mov.w	r1, #0
 800a208:	0159      	lsls	r1, r3, #5
 800a20a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a20e:	0150      	lsls	r0, r2, #5
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4621      	mov	r1, r4
 800a216:	1a51      	subs	r1, r2, r1
 800a218:	61b9      	str	r1, [r7, #24]
 800a21a:	4629      	mov	r1, r5
 800a21c:	eb63 0301 	sbc.w	r3, r3, r1
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	f04f 0200 	mov.w	r2, #0
 800a226:	f04f 0300 	mov.w	r3, #0
 800a22a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a22e:	4659      	mov	r1, fp
 800a230:	018b      	lsls	r3, r1, #6
 800a232:	4651      	mov	r1, sl
 800a234:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a238:	4651      	mov	r1, sl
 800a23a:	018a      	lsls	r2, r1, #6
 800a23c:	4651      	mov	r1, sl
 800a23e:	ebb2 0801 	subs.w	r8, r2, r1
 800a242:	4659      	mov	r1, fp
 800a244:	eb63 0901 	sbc.w	r9, r3, r1
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a254:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a258:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a25c:	4690      	mov	r8, r2
 800a25e:	4699      	mov	r9, r3
 800a260:	4623      	mov	r3, r4
 800a262:	eb18 0303 	adds.w	r3, r8, r3
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	462b      	mov	r3, r5
 800a26a:	eb49 0303 	adc.w	r3, r9, r3
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	f04f 0300 	mov.w	r3, #0
 800a278:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a27c:	4629      	mov	r1, r5
 800a27e:	024b      	lsls	r3, r1, #9
 800a280:	4621      	mov	r1, r4
 800a282:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a286:	4621      	mov	r1, r4
 800a288:	024a      	lsls	r2, r1, #9
 800a28a:	4610      	mov	r0, r2
 800a28c:	4619      	mov	r1, r3
 800a28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a292:	2200      	movs	r2, #0
 800a294:	65bb      	str	r3, [r7, #88]	; 0x58
 800a296:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a298:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a29c:	f7f6 fd44 	bl	8000d28 <__aeabi_uldivmod>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2aa:	e065      	b.n	800a378 <HAL_RCC_GetSysClockFreq+0x420>
 800a2ac:	40023800 	.word	0x40023800
 800a2b0:	00f42400 	.word	0x00f42400
 800a2b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2b8:	4b3d      	ldr	r3, [pc, #244]	; (800a3b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	099b      	lsrs	r3, r3, #6
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a2c8:	653b      	str	r3, [r7, #80]	; 0x50
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	657b      	str	r3, [r7, #84]	; 0x54
 800a2ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a2d2:	4642      	mov	r2, r8
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	f04f 0000 	mov.w	r0, #0
 800a2da:	f04f 0100 	mov.w	r1, #0
 800a2de:	0159      	lsls	r1, r3, #5
 800a2e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a2e4:	0150      	lsls	r0, r2, #5
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4641      	mov	r1, r8
 800a2ec:	1a51      	subs	r1, r2, r1
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	eb63 0301 	sbc.w	r3, r3, r1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a304:	4659      	mov	r1, fp
 800a306:	018b      	lsls	r3, r1, #6
 800a308:	4651      	mov	r1, sl
 800a30a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a30e:	4651      	mov	r1, sl
 800a310:	018a      	lsls	r2, r1, #6
 800a312:	4651      	mov	r1, sl
 800a314:	1a54      	subs	r4, r2, r1
 800a316:	4659      	mov	r1, fp
 800a318:	eb63 0501 	sbc.w	r5, r3, r1
 800a31c:	f04f 0200 	mov.w	r2, #0
 800a320:	f04f 0300 	mov.w	r3, #0
 800a324:	00eb      	lsls	r3, r5, #3
 800a326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a32a:	00e2      	lsls	r2, r4, #3
 800a32c:	4614      	mov	r4, r2
 800a32e:	461d      	mov	r5, r3
 800a330:	4643      	mov	r3, r8
 800a332:	18e3      	adds	r3, r4, r3
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	464b      	mov	r3, r9
 800a338:	eb45 0303 	adc.w	r3, r5, r3
 800a33c:	607b      	str	r3, [r7, #4]
 800a33e:	f04f 0200 	mov.w	r2, #0
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a34a:	4629      	mov	r1, r5
 800a34c:	028b      	lsls	r3, r1, #10
 800a34e:	4621      	mov	r1, r4
 800a350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a354:	4621      	mov	r1, r4
 800a356:	028a      	lsls	r2, r1, #10
 800a358:	4610      	mov	r0, r2
 800a35a:	4619      	mov	r1, r3
 800a35c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a360:	2200      	movs	r2, #0
 800a362:	64bb      	str	r3, [r7, #72]	; 0x48
 800a364:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a366:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a36a:	f7f6 fcdd 	bl	8000d28 <__aeabi_uldivmod>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4613      	mov	r3, r2
 800a374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a378:	4b0d      	ldr	r3, [pc, #52]	; (800a3b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	0f1b      	lsrs	r3, r3, #28
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800a386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a38a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a396:	e003      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a39a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a39e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	37b8      	adds	r7, #184	; 0xb8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ae:	bf00      	nop
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	00f42400 	.word	0x00f42400

0800a3b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e28d      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8083 	beq.w	800a4de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a3d8:	4b94      	ldr	r3, [pc, #592]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 030c 	and.w	r3, r3, #12
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d019      	beq.n	800a418 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a3e4:	4b91      	ldr	r3, [pc, #580]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d106      	bne.n	800a3fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a3f0:	4b8e      	ldr	r3, [pc, #568]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3fc:	d00c      	beq.n	800a418 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3fe:	4b8b      	ldr	r3, [pc, #556]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a406:	2b0c      	cmp	r3, #12
 800a408:	d112      	bne.n	800a430 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a40a:	4b88      	ldr	r3, [pc, #544]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a416:	d10b      	bne.n	800a430 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a418:	4b84      	ldr	r3, [pc, #528]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d05b      	beq.n	800a4dc <HAL_RCC_OscConfig+0x124>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d157      	bne.n	800a4dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e25a      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a438:	d106      	bne.n	800a448 <HAL_RCC_OscConfig+0x90>
 800a43a:	4b7c      	ldr	r3, [pc, #496]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a7b      	ldr	r2, [pc, #492]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	e01d      	b.n	800a484 <HAL_RCC_OscConfig+0xcc>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a450:	d10c      	bne.n	800a46c <HAL_RCC_OscConfig+0xb4>
 800a452:	4b76      	ldr	r3, [pc, #472]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a75      	ldr	r2, [pc, #468]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4b73      	ldr	r3, [pc, #460]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a72      	ldr	r2, [pc, #456]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	e00b      	b.n	800a484 <HAL_RCC_OscConfig+0xcc>
 800a46c:	4b6f      	ldr	r3, [pc, #444]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a6e      	ldr	r2, [pc, #440]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	4b6c      	ldr	r3, [pc, #432]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a6b      	ldr	r2, [pc, #428]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a47e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d013      	beq.n	800a4b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48c:	f7fc ffcc 	bl	8007428 <HAL_GetTick>
 800a490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a492:	e008      	b.n	800a4a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a494:	f7fc ffc8 	bl	8007428 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b64      	cmp	r3, #100	; 0x64
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e21f      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4a6:	4b61      	ldr	r3, [pc, #388]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f0      	beq.n	800a494 <HAL_RCC_OscConfig+0xdc>
 800a4b2:	e014      	b.n	800a4de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b4:	f7fc ffb8 	bl	8007428 <HAL_GetTick>
 800a4b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4ba:	e008      	b.n	800a4ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4bc:	f7fc ffb4 	bl	8007428 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	2b64      	cmp	r3, #100	; 0x64
 800a4c8:	d901      	bls.n	800a4ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e20b      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4ce:	4b57      	ldr	r3, [pc, #348]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f0      	bne.n	800a4bc <HAL_RCC_OscConfig+0x104>
 800a4da:	e000      	b.n	800a4de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d06f      	beq.n	800a5ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a4ea:	4b50      	ldr	r3, [pc, #320]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f003 030c 	and.w	r3, r3, #12
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d017      	beq.n	800a526 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a4f6:	4b4d      	ldr	r3, [pc, #308]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a4fe:	2b08      	cmp	r3, #8
 800a500:	d105      	bne.n	800a50e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a502:	4b4a      	ldr	r3, [pc, #296]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a50e:	4b47      	ldr	r3, [pc, #284]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a516:	2b0c      	cmp	r3, #12
 800a518:	d11c      	bne.n	800a554 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a51a:	4b44      	ldr	r3, [pc, #272]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d116      	bne.n	800a554 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a526:	4b41      	ldr	r3, [pc, #260]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <HAL_RCC_OscConfig+0x186>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d001      	beq.n	800a53e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e1d3      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a53e:	4b3b      	ldr	r3, [pc, #236]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	4937      	ldr	r1, [pc, #220]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a552:	e03a      	b.n	800a5ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d020      	beq.n	800a59e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a55c:	4b34      	ldr	r3, [pc, #208]	; (800a630 <HAL_RCC_OscConfig+0x278>)
 800a55e:	2201      	movs	r2, #1
 800a560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a562:	f7fc ff61 	bl	8007428 <HAL_GetTick>
 800a566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a568:	e008      	b.n	800a57c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a56a:	f7fc ff5d 	bl	8007428 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b02      	cmp	r3, #2
 800a576:	d901      	bls.n	800a57c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e1b4      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a57c:	4b2b      	ldr	r3, [pc, #172]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0f0      	beq.n	800a56a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a588:	4b28      	ldr	r3, [pc, #160]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	4925      	ldr	r1, [pc, #148]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	600b      	str	r3, [r1, #0]
 800a59c:	e015      	b.n	800a5ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a59e:	4b24      	ldr	r3, [pc, #144]	; (800a630 <HAL_RCC_OscConfig+0x278>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a4:	f7fc ff40 	bl	8007428 <HAL_GetTick>
 800a5a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5aa:	e008      	b.n	800a5be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5ac:	f7fc ff3c 	bl	8007428 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e193      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5be:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f0      	bne.n	800a5ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d036      	beq.n	800a644 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d016      	beq.n	800a60c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5de:	4b15      	ldr	r3, [pc, #84]	; (800a634 <HAL_RCC_OscConfig+0x27c>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e4:	f7fc ff20 	bl	8007428 <HAL_GetTick>
 800a5e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5ec:	f7fc ff1c 	bl	8007428 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e173      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <HAL_RCC_OscConfig+0x274>)
 800a600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0f0      	beq.n	800a5ec <HAL_RCC_OscConfig+0x234>
 800a60a:	e01b      	b.n	800a644 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a60c:	4b09      	ldr	r3, [pc, #36]	; (800a634 <HAL_RCC_OscConfig+0x27c>)
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a612:	f7fc ff09 	bl	8007428 <HAL_GetTick>
 800a616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a618:	e00e      	b.n	800a638 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a61a:	f7fc ff05 	bl	8007428 <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	2b02      	cmp	r3, #2
 800a626:	d907      	bls.n	800a638 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e15c      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
 800a62c:	40023800 	.word	0x40023800
 800a630:	42470000 	.word	0x42470000
 800a634:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a638:	4b8a      	ldr	r3, [pc, #552]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1ea      	bne.n	800a61a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8097 	beq.w	800a780 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a656:	4b83      	ldr	r3, [pc, #524]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10f      	bne.n	800a682 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]
 800a666:	4b7f      	ldr	r3, [pc, #508]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	4a7e      	ldr	r2, [pc, #504]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a670:	6413      	str	r3, [r2, #64]	; 0x40
 800a672:	4b7c      	ldr	r3, [pc, #496]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a67a:	60bb      	str	r3, [r7, #8]
 800a67c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a67e:	2301      	movs	r3, #1
 800a680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a682:	4b79      	ldr	r3, [pc, #484]	; (800a868 <HAL_RCC_OscConfig+0x4b0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d118      	bne.n	800a6c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a68e:	4b76      	ldr	r3, [pc, #472]	; (800a868 <HAL_RCC_OscConfig+0x4b0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a75      	ldr	r2, [pc, #468]	; (800a868 <HAL_RCC_OscConfig+0x4b0>)
 800a694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a69a:	f7fc fec5 	bl	8007428 <HAL_GetTick>
 800a69e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6a0:	e008      	b.n	800a6b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6a2:	f7fc fec1 	bl	8007428 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d901      	bls.n	800a6b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e118      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6b4:	4b6c      	ldr	r3, [pc, #432]	; (800a868 <HAL_RCC_OscConfig+0x4b0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0f0      	beq.n	800a6a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d106      	bne.n	800a6d6 <HAL_RCC_OscConfig+0x31e>
 800a6c8:	4b66      	ldr	r3, [pc, #408]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6cc:	4a65      	ldr	r2, [pc, #404]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6ce:	f043 0301 	orr.w	r3, r3, #1
 800a6d2:	6713      	str	r3, [r2, #112]	; 0x70
 800a6d4:	e01c      	b.n	800a710 <HAL_RCC_OscConfig+0x358>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	d10c      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x340>
 800a6de:	4b61      	ldr	r3, [pc, #388]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e2:	4a60      	ldr	r2, [pc, #384]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6e4:	f043 0304 	orr.w	r3, r3, #4
 800a6e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a6ea:	4b5e      	ldr	r3, [pc, #376]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ee:	4a5d      	ldr	r2, [pc, #372]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a6f6:	e00b      	b.n	800a710 <HAL_RCC_OscConfig+0x358>
 800a6f8:	4b5a      	ldr	r3, [pc, #360]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fc:	4a59      	ldr	r2, [pc, #356]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a6fe:	f023 0301 	bic.w	r3, r3, #1
 800a702:	6713      	str	r3, [r2, #112]	; 0x70
 800a704:	4b57      	ldr	r3, [pc, #348]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a708:	4a56      	ldr	r2, [pc, #344]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a70a:	f023 0304 	bic.w	r3, r3, #4
 800a70e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d015      	beq.n	800a744 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a718:	f7fc fe86 	bl	8007428 <HAL_GetTick>
 800a71c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a71e:	e00a      	b.n	800a736 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a720:	f7fc fe82 	bl	8007428 <HAL_GetTick>
 800a724:	4602      	mov	r2, r0
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72e:	4293      	cmp	r3, r2
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e0d7      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a736:	4b4b      	ldr	r3, [pc, #300]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0ee      	beq.n	800a720 <HAL_RCC_OscConfig+0x368>
 800a742:	e014      	b.n	800a76e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a744:	f7fc fe70 	bl	8007428 <HAL_GetTick>
 800a748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a74a:	e00a      	b.n	800a762 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a74c:	f7fc fe6c 	bl	8007428 <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	f241 3288 	movw	r2, #5000	; 0x1388
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d901      	bls.n	800a762 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e0c1      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a762:	4b40      	ldr	r3, [pc, #256]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a766:	f003 0302 	and.w	r3, r3, #2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1ee      	bne.n	800a74c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d105      	bne.n	800a780 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a774:	4b3b      	ldr	r3, [pc, #236]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	4a3a      	ldr	r2, [pc, #232]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a77a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a77e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 80ad 	beq.w	800a8e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a78a:	4b36      	ldr	r3, [pc, #216]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f003 030c 	and.w	r3, r3, #12
 800a792:	2b08      	cmp	r3, #8
 800a794:	d060      	beq.n	800a858 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d145      	bne.n	800a82a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a79e:	4b33      	ldr	r3, [pc, #204]	; (800a86c <HAL_RCC_OscConfig+0x4b4>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a4:	f7fc fe40 	bl	8007428 <HAL_GetTick>
 800a7a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7aa:	e008      	b.n	800a7be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7ac:	f7fc fe3c 	bl	8007428 <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d901      	bls.n	800a7be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e093      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7be:	4b29      	ldr	r3, [pc, #164]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f0      	bne.n	800a7ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	69da      	ldr	r2, [r3, #28]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	019b      	lsls	r3, r3, #6
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e0:	085b      	lsrs	r3, r3, #1
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	061b      	lsls	r3, r3, #24
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	491b      	ldr	r1, [pc, #108]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <HAL_RCC_OscConfig+0x4b4>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a802:	f7fc fe11 	bl	8007428 <HAL_GetTick>
 800a806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a808:	e008      	b.n	800a81c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a80a:	f7fc fe0d 	bl	8007428 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d901      	bls.n	800a81c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e064      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a81c:	4b11      	ldr	r3, [pc, #68]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f0      	beq.n	800a80a <HAL_RCC_OscConfig+0x452>
 800a828:	e05c      	b.n	800a8e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a82a:	4b10      	ldr	r3, [pc, #64]	; (800a86c <HAL_RCC_OscConfig+0x4b4>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a830:	f7fc fdfa 	bl	8007428 <HAL_GetTick>
 800a834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a836:	e008      	b.n	800a84a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a838:	f7fc fdf6 	bl	8007428 <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d901      	bls.n	800a84a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e04d      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <HAL_RCC_OscConfig+0x4ac>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f0      	bne.n	800a838 <HAL_RCC_OscConfig+0x480>
 800a856:	e045      	b.n	800a8e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d107      	bne.n	800a870 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e040      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
 800a864:	40023800 	.word	0x40023800
 800a868:	40007000 	.word	0x40007000
 800a86c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a870:	4b1f      	ldr	r3, [pc, #124]	; (800a8f0 <HAL_RCC_OscConfig+0x538>)
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d030      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a888:	429a      	cmp	r2, r3
 800a88a:	d129      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a896:	429a      	cmp	r2, r3
 800a898:	d122      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d119      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b6:	085b      	lsrs	r3, r3, #1
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d10f      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d107      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d001      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e000      	b.n	800a8e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	40023800 	.word	0x40023800

0800a8f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e07b      	b.n	800a9fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d108      	bne.n	800a920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a916:	d009      	beq.n	800a92c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	61da      	str	r2, [r3, #28]
 800a91e:	e005      	b.n	800a92c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d106      	bne.n	800a94c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7fa f816 	bl	8004978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2202      	movs	r2, #2
 800a950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a97e:	431a      	orrs	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	431a      	orrs	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9a6:	431a      	orrs	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b0:	ea42 0103 	orr.w	r1, r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	0c1b      	lsrs	r3, r3, #16
 800a9ca:	f003 0104 	and.w	r1, r3, #4
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	f003 0210 	and.w	r2, r3, #16
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	69da      	ldr	r2, [r3, #28]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b088      	sub	sp, #32
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4613      	mov	r3, r2
 800aa14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d101      	bne.n	800aa28 <HAL_SPI_Transmit+0x22>
 800aa24:	2302      	movs	r3, #2
 800aa26:	e126      	b.n	800ac76 <HAL_SPI_Transmit+0x270>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa30:	f7fc fcfa 	bl	8007428 <HAL_GetTick>
 800aa34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d002      	beq.n	800aa4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800aa46:	2302      	movs	r3, #2
 800aa48:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa4a:	e10b      	b.n	800ac64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <HAL_SPI_Transmit+0x52>
 800aa52:	88fb      	ldrh	r3, [r7, #6]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa5c:	e102      	b.n	800ac64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2203      	movs	r2, #3
 800aa62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	88fa      	ldrh	r2, [r7, #6]
 800aa76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	88fa      	ldrh	r2, [r7, #6]
 800aa7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaa4:	d10f      	bne.n	800aac6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad0:	2b40      	cmp	r3, #64	; 0x40
 800aad2:	d007      	beq.n	800aae4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaec:	d14b      	bne.n	800ab86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <HAL_SPI_Transmit+0xf6>
 800aaf6:	8afb      	ldrh	r3, [r7, #22]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d13e      	bne.n	800ab7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0c:	1c9a      	adds	r2, r3, #2
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab20:	e02b      	b.n	800ab7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d112      	bne.n	800ab56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab34:	881a      	ldrh	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	1c9a      	adds	r2, r3, #2
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	86da      	strh	r2, [r3, #54]	; 0x36
 800ab54:	e011      	b.n	800ab7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab56:	f7fc fc67 	bl	8007428 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d803      	bhi.n	800ab6e <HAL_SPI_Transmit+0x168>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab6c:	d102      	bne.n	800ab74 <HAL_SPI_Transmit+0x16e>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab78:	e074      	b.n	800ac64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1ce      	bne.n	800ab22 <HAL_SPI_Transmit+0x11c>
 800ab84:	e04c      	b.n	800ac20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <HAL_SPI_Transmit+0x18e>
 800ab8e:	8afb      	ldrh	r3, [r7, #22]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d140      	bne.n	800ac16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	330c      	adds	r3, #12
 800ab9e:	7812      	ldrb	r2, [r2, #0]
 800aba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800abba:	e02c      	b.n	800ac16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d113      	bne.n	800abf2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	330c      	adds	r3, #12
 800abd4:	7812      	ldrb	r2, [r2, #0]
 800abd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	3b01      	subs	r3, #1
 800abea:	b29a      	uxth	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	86da      	strh	r2, [r3, #54]	; 0x36
 800abf0:	e011      	b.n	800ac16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abf2:	f7fc fc19 	bl	8007428 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d803      	bhi.n	800ac0a <HAL_SPI_Transmit+0x204>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac08:	d102      	bne.n	800ac10 <HAL_SPI_Transmit+0x20a>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ac14:	e026      	b.n	800ac64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1cd      	bne.n	800abbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac20:	69ba      	ldr	r2, [r7, #24]
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 fafd 	bl	800b224 <SPI_EndRxTxTransaction>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2220      	movs	r2, #32
 800ac34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10a      	bne.n	800ac54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac3e:	2300      	movs	r3, #0
 800ac40:	613b      	str	r3, [r7, #16]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	613b      	str	r3, [r7, #16]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	77fb      	strb	r3, [r7, #31]
 800ac60:	e000      	b.n	800ac64 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ac62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac74:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_SPI_Transmit_DMA+0x20>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e09b      	b.n	800add8 <HAL_SPI_Transmit_DMA+0x158>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d002      	beq.n	800acba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800acb4:	2302      	movs	r3, #2
 800acb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acb8:	e089      	b.n	800adce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <HAL_SPI_Transmit_DMA+0x46>
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acca:	e080      	b.n	800adce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2203      	movs	r2, #3
 800acd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	88fa      	ldrh	r2, [r7, #6]
 800ace4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	88fa      	ldrh	r2, [r7, #6]
 800acea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad12:	d10f      	bne.n	800ad34 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad38:	4a29      	ldr	r2, [pc, #164]	; (800ade0 <HAL_SPI_Transmit_DMA+0x160>)
 800ad3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad40:	4a28      	ldr	r2, [pc, #160]	; (800ade4 <HAL_SPI_Transmit_DMA+0x164>)
 800ad42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad48:	4a27      	ldr	r2, [pc, #156]	; (800ade8 <HAL_SPI_Transmit_DMA+0x168>)
 800ad4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad50:	2200      	movs	r2, #0
 800ad52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	330c      	adds	r3, #12
 800ad64:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad6c:	f7fd f950 	bl	8008010 <HAL_DMA_Start_IT>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00c      	beq.n	800ad90 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	f043 0210 	orr.w	r2, r3, #16
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ad8e:	e01e      	b.n	800adce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d007      	beq.n	800adae <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adac:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f042 0220 	orr.w	r2, r2, #32
 800adbc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f042 0202 	orr.w	r2, r2, #2
 800adcc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800add6:	7dfb      	ldrb	r3, [r7, #23]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	0800b091 	.word	0x0800b091
 800ade4:	0800afe9 	.word	0x0800afe9
 800ade8:	0800b0ad 	.word	0x0800b0ad

0800adec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10e      	bne.n	800ae2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d009      	beq.n	800ae2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d004      	beq.n	800ae2c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
    return;
 800ae2a:	e0ce      	b.n	800afca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d009      	beq.n	800ae4a <HAL_SPI_IRQHandler+0x5e>
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d004      	beq.n	800ae4a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	4798      	blx	r3
    return;
 800ae48:	e0bf      	b.n	800afca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	f003 0320 	and.w	r3, r3, #32
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <HAL_SPI_IRQHandler+0x7e>
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d105      	bne.n	800ae6a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 80b0 	beq.w	800afca <HAL_SPI_IRQHandler+0x1de>
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	f003 0320 	and.w	r3, r3, #32
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 80aa 	beq.w	800afca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d023      	beq.n	800aec8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d011      	beq.n	800aeb0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae90:	f043 0204 	orr.w	r2, r3, #4
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	e00b      	b.n	800aec8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	613b      	str	r3, [r7, #16]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	613b      	str	r3, [r7, #16]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	613b      	str	r3, [r7, #16]
 800aec4:	693b      	ldr	r3, [r7, #16]
        return;
 800aec6:	e080      	b.n	800afca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d014      	beq.n	800aefc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed6:	f043 0201 	orr.w	r2, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00c      	beq.n	800af20 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0a:	f043 0208 	orr.w	r2, r3, #8
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	60bb      	str	r3, [r7, #8]
 800af1e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af24:	2b00      	cmp	r3, #0
 800af26:	d04f      	beq.n	800afc8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <HAL_SPI_IRQHandler+0x168>
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d034      	beq.n	800afbe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 0203 	bic.w	r2, r2, #3
 800af62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d011      	beq.n	800af90 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	4a17      	ldr	r2, [pc, #92]	; (800afd0 <HAL_SPI_IRQHandler+0x1e4>)
 800af72:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fd f911 	bl	80081a0 <HAL_DMA_Abort_IT>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af94:	2b00      	cmp	r3, #0
 800af96:	d016      	beq.n	800afc6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af9c:	4a0c      	ldr	r2, [pc, #48]	; (800afd0 <HAL_SPI_IRQHandler+0x1e4>)
 800af9e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fd f8fb 	bl	80081a0 <HAL_DMA_Abort_IT>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00a      	beq.n	800afc6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800afbc:	e003      	b.n	800afc6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fa fb1a 	bl	80055f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800afc4:	e000      	b.n	800afc8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800afc6:	bf00      	nop
    return;
 800afc8:	bf00      	nop
  }
}
 800afca:	3720      	adds	r7, #32
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	0800b0ed 	.word	0x0800b0ed

0800afd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aff6:	f7fc fa17 	bl	8007428 <HAL_GetTick>
 800affa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b00a:	d03b      	beq.n	800b084 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0220 	bic.w	r2, r2, #32
 800b01a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0202 	bic.w	r2, r2, #2
 800b02a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	2164      	movs	r1, #100	; 0x64
 800b030:	6978      	ldr	r0, [r7, #20]
 800b032:	f000 f8f7 	bl	800b224 <SPI_EndRxTxTransaction>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d005      	beq.n	800b048 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	f043 0220 	orr.w	r2, r3, #32
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10a      	bne.n	800b066 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b050:	2300      	movs	r3, #0
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2200      	movs	r2, #0
 800b06a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b07c:	6978      	ldr	r0, [r7, #20]
 800b07e:	f7fa fabb 	bl	80055f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b082:	e002      	b.n	800b08a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b084:	6978      	ldr	r0, [r7, #20]
 800b086:	f7fa facd 	bl	8005624 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff ff98 	bl	800afd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0a4:	bf00      	nop
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f022 0203 	bic.w	r2, r2, #3
 800b0c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ce:	f043 0210 	orr.w	r2, r3, #16
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7fa fa8a 	bl	80055f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0e4:	bf00      	nop
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f7fa fa76 	bl	80055f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b10c:	bf00      	nop
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	603b      	str	r3, [r7, #0]
 800b120:	4613      	mov	r3, r2
 800b122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b124:	f7fc f980 	bl	8007428 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	1a9b      	subs	r3, r3, r2
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	4413      	add	r3, r2
 800b132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b134:	f7fc f978 	bl	8007428 <HAL_GetTick>
 800b138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b13a:	4b39      	ldr	r3, [pc, #228]	; (800b220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	015b      	lsls	r3, r3, #5
 800b140:	0d1b      	lsrs	r3, r3, #20
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	fb02 f303 	mul.w	r3, r2, r3
 800b148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b14a:	e054      	b.n	800b1f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b152:	d050      	beq.n	800b1f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b154:	f7fc f968 	bl	8007428 <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	69fa      	ldr	r2, [r7, #28]
 800b160:	429a      	cmp	r2, r3
 800b162:	d902      	bls.n	800b16a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d13d      	bne.n	800b1e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b182:	d111      	bne.n	800b1a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b18c:	d004      	beq.n	800b198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b196:	d107      	bne.n	800b1a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b0:	d10f      	bne.n	800b1d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e017      	b.n	800b216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	4013      	ands	r3, r2
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	429a      	cmp	r2, r3
 800b204:	bf0c      	ite	eq
 800b206:	2301      	moveq	r3, #1
 800b208:	2300      	movne	r3, #0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	461a      	mov	r2, r3
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	429a      	cmp	r2, r3
 800b212:	d19b      	bne.n	800b14c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000030 	.word	0x20000030

0800b224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af02      	add	r7, sp, #8
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b230:	4b1b      	ldr	r3, [pc, #108]	; (800b2a0 <SPI_EndRxTxTransaction+0x7c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1b      	ldr	r2, [pc, #108]	; (800b2a4 <SPI_EndRxTxTransaction+0x80>)
 800b236:	fba2 2303 	umull	r2, r3, r2, r3
 800b23a:	0d5b      	lsrs	r3, r3, #21
 800b23c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b240:	fb02 f303 	mul.w	r3, r2, r3
 800b244:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b24e:	d112      	bne.n	800b276 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2200      	movs	r2, #0
 800b258:	2180      	movs	r1, #128	; 0x80
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff ff5a 	bl	800b114 <SPI_WaitFlagStateUntilTimeout>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d016      	beq.n	800b294 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26a:	f043 0220 	orr.w	r2, r3, #32
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b272:	2303      	movs	r3, #3
 800b274:	e00f      	b.n	800b296 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	3b01      	subs	r3, #1
 800b280:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28c:	2b80      	cmp	r3, #128	; 0x80
 800b28e:	d0f2      	beq.n	800b276 <SPI_EndRxTxTransaction+0x52>
 800b290:	e000      	b.n	800b294 <SPI_EndRxTxTransaction+0x70>
        break;
 800b292:	bf00      	nop
  }

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	20000030 	.word	0x20000030
 800b2a4:	165e9f81 	.word	0x165e9f81

0800b2a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e041      	b.n	800b33e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d106      	bne.n	800b2d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7f9 fbf4 	bl	8004abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	f000 faa0 	bl	800b82c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d001      	beq.n	800b360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e04e      	b.n	800b3fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0201 	orr.w	r2, r2, #1
 800b376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a23      	ldr	r2, [pc, #140]	; (800b40c <HAL_TIM_Base_Start_IT+0xc4>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d022      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38a:	d01d      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <HAL_TIM_Base_Start_IT+0xc8>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d018      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <HAL_TIM_Base_Start_IT+0xcc>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d013      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1c      	ldr	r2, [pc, #112]	; (800b418 <HAL_TIM_Base_Start_IT+0xd0>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d00e      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a1b      	ldr	r2, [pc, #108]	; (800b41c <HAL_TIM_Base_Start_IT+0xd4>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d009      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a19      	ldr	r2, [pc, #100]	; (800b420 <HAL_TIM_Base_Start_IT+0xd8>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d004      	beq.n	800b3c8 <HAL_TIM_Base_Start_IT+0x80>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a18      	ldr	r2, [pc, #96]	; (800b424 <HAL_TIM_Base_Start_IT+0xdc>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d111      	bne.n	800b3ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b06      	cmp	r3, #6
 800b3d8:	d010      	beq.n	800b3fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f042 0201 	orr.w	r2, r2, #1
 800b3e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ea:	e007      	b.n	800b3fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	40010000 	.word	0x40010000
 800b410:	40000400 	.word	0x40000400
 800b414:	40000800 	.word	0x40000800
 800b418:	40000c00 	.word	0x40000c00
 800b41c:	40010400 	.word	0x40010400
 800b420:	40014000 	.word	0x40014000
 800b424:	40001800 	.word	0x40001800

0800b428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	f003 0302 	and.w	r3, r3, #2
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d122      	bne.n	800b484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	f003 0302 	and.w	r3, r3, #2
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d11b      	bne.n	800b484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f06f 0202 	mvn.w	r2, #2
 800b454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f9bf 	bl	800b7ee <HAL_TIM_IC_CaptureCallback>
 800b470:	e005      	b.n	800b47e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f9b1 	bl	800b7da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9c2 	bl	800b802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d122      	bne.n	800b4d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d11b      	bne.n	800b4d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f06f 0204 	mvn.w	r2, #4
 800b4a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2202      	movs	r2, #2
 800b4ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d003      	beq.n	800b4c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f995 	bl	800b7ee <HAL_TIM_IC_CaptureCallback>
 800b4c4:	e005      	b.n	800b4d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f987 	bl	800b7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f998 	bl	800b802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	f003 0308 	and.w	r3, r3, #8
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d122      	bne.n	800b52c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f003 0308 	and.w	r3, r3, #8
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d11b      	bne.n	800b52c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f06f 0208 	mvn.w	r2, #8
 800b4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2204      	movs	r2, #4
 800b502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f96b 	bl	800b7ee <HAL_TIM_IC_CaptureCallback>
 800b518:	e005      	b.n	800b526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f95d 	bl	800b7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f96e 	bl	800b802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	f003 0310 	and.w	r3, r3, #16
 800b536:	2b10      	cmp	r3, #16
 800b538:	d122      	bne.n	800b580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f003 0310 	and.w	r3, r3, #16
 800b544:	2b10      	cmp	r3, #16
 800b546:	d11b      	bne.n	800b580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f06f 0210 	mvn.w	r2, #16
 800b550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2208      	movs	r2, #8
 800b556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f941 	bl	800b7ee <HAL_TIM_IC_CaptureCallback>
 800b56c:	e005      	b.n	800b57a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f933 	bl	800b7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f944 	bl	800b802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d10e      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d107      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0201 	mvn.w	r2, #1
 800b5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f90d 	bl	800b7c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b6:	2b80      	cmp	r3, #128	; 0x80
 800b5b8:	d10e      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c4:	2b80      	cmp	r3, #128	; 0x80
 800b5c6:	d107      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 faea 	bl	800bbac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e2:	2b40      	cmp	r3, #64	; 0x40
 800b5e4:	d10e      	bne.n	800b604 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f0:	2b40      	cmp	r3, #64	; 0x40
 800b5f2:	d107      	bne.n	800b604 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f909 	bl	800b816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	f003 0320 	and.w	r3, r3, #32
 800b60e:	2b20      	cmp	r3, #32
 800b610:	d10e      	bne.n	800b630 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f003 0320 	and.w	r3, r3, #32
 800b61c:	2b20      	cmp	r3, #32
 800b61e:	d107      	bne.n	800b630 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f06f 0220 	mvn.w	r2, #32
 800b628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fab4 	bl	800bb98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_TIM_ConfigClockSource+0x1c>
 800b650:	2302      	movs	r3, #2
 800b652:	e0b4      	b.n	800b7be <HAL_TIM_ConfigClockSource+0x186>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b67a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b68c:	d03e      	beq.n	800b70c <HAL_TIM_ConfigClockSource+0xd4>
 800b68e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b692:	f200 8087 	bhi.w	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b69a:	f000 8086 	beq.w	800b7aa <HAL_TIM_ConfigClockSource+0x172>
 800b69e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a2:	d87f      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6a4:	2b70      	cmp	r3, #112	; 0x70
 800b6a6:	d01a      	beq.n	800b6de <HAL_TIM_ConfigClockSource+0xa6>
 800b6a8:	2b70      	cmp	r3, #112	; 0x70
 800b6aa:	d87b      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6ac:	2b60      	cmp	r3, #96	; 0x60
 800b6ae:	d050      	beq.n	800b752 <HAL_TIM_ConfigClockSource+0x11a>
 800b6b0:	2b60      	cmp	r3, #96	; 0x60
 800b6b2:	d877      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6b4:	2b50      	cmp	r3, #80	; 0x50
 800b6b6:	d03c      	beq.n	800b732 <HAL_TIM_ConfigClockSource+0xfa>
 800b6b8:	2b50      	cmp	r3, #80	; 0x50
 800b6ba:	d873      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6bc:	2b40      	cmp	r3, #64	; 0x40
 800b6be:	d058      	beq.n	800b772 <HAL_TIM_ConfigClockSource+0x13a>
 800b6c0:	2b40      	cmp	r3, #64	; 0x40
 800b6c2:	d86f      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6c4:	2b30      	cmp	r3, #48	; 0x30
 800b6c6:	d064      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x15a>
 800b6c8:	2b30      	cmp	r3, #48	; 0x30
 800b6ca:	d86b      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6cc:	2b20      	cmp	r3, #32
 800b6ce:	d060      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x15a>
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	d867      	bhi.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d05c      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x15a>
 800b6d8:	2b10      	cmp	r3, #16
 800b6da:	d05a      	beq.n	800b792 <HAL_TIM_ConfigClockSource+0x15a>
 800b6dc:	e062      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6818      	ldr	r0, [r3, #0]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	6899      	ldr	r1, [r3, #8]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f000 f9b7 	bl	800ba60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	609a      	str	r2, [r3, #8]
      break;
 800b70a:	e04f      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	6899      	ldr	r1, [r3, #8]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	f000 f9a0 	bl	800ba60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689a      	ldr	r2, [r3, #8]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b72e:	609a      	str	r2, [r3, #8]
      break;
 800b730:	e03c      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	6859      	ldr	r1, [r3, #4]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	461a      	mov	r2, r3
 800b740:	f000 f914 	bl	800b96c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2150      	movs	r1, #80	; 0x50
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f96d 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b750:	e02c      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	6859      	ldr	r1, [r3, #4]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	461a      	mov	r2, r3
 800b760:	f000 f933 	bl	800b9ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2160      	movs	r1, #96	; 0x60
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f95d 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b770:	e01c      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6818      	ldr	r0, [r3, #0]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	6859      	ldr	r1, [r3, #4]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	461a      	mov	r2, r3
 800b780:	f000 f8f4 	bl	800b96c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2140      	movs	r1, #64	; 0x40
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 f94d 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b790:	e00c      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f000 f944 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b7a2:	e003      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a8:	e000      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b7aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
	...

0800b82c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a40      	ldr	r2, [pc, #256]	; (800b940 <TIM_Base_SetConfig+0x114>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d013      	beq.n	800b86c <TIM_Base_SetConfig+0x40>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b84a:	d00f      	beq.n	800b86c <TIM_Base_SetConfig+0x40>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a3d      	ldr	r2, [pc, #244]	; (800b944 <TIM_Base_SetConfig+0x118>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00b      	beq.n	800b86c <TIM_Base_SetConfig+0x40>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a3c      	ldr	r2, [pc, #240]	; (800b948 <TIM_Base_SetConfig+0x11c>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d007      	beq.n	800b86c <TIM_Base_SetConfig+0x40>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a3b      	ldr	r2, [pc, #236]	; (800b94c <TIM_Base_SetConfig+0x120>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d003      	beq.n	800b86c <TIM_Base_SetConfig+0x40>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a3a      	ldr	r2, [pc, #232]	; (800b950 <TIM_Base_SetConfig+0x124>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d108      	bne.n	800b87e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a2f      	ldr	r2, [pc, #188]	; (800b940 <TIM_Base_SetConfig+0x114>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d02b      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88c:	d027      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a2c      	ldr	r2, [pc, #176]	; (800b944 <TIM_Base_SetConfig+0x118>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d023      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a2b      	ldr	r2, [pc, #172]	; (800b948 <TIM_Base_SetConfig+0x11c>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d01f      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a2a      	ldr	r2, [pc, #168]	; (800b94c <TIM_Base_SetConfig+0x120>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d01b      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a29      	ldr	r2, [pc, #164]	; (800b950 <TIM_Base_SetConfig+0x124>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d017      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a28      	ldr	r2, [pc, #160]	; (800b954 <TIM_Base_SetConfig+0x128>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d013      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a27      	ldr	r2, [pc, #156]	; (800b958 <TIM_Base_SetConfig+0x12c>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d00f      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a26      	ldr	r2, [pc, #152]	; (800b95c <TIM_Base_SetConfig+0x130>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d00b      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a25      	ldr	r2, [pc, #148]	; (800b960 <TIM_Base_SetConfig+0x134>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d007      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a24      	ldr	r2, [pc, #144]	; (800b964 <TIM_Base_SetConfig+0x138>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d003      	beq.n	800b8de <TIM_Base_SetConfig+0xb2>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a23      	ldr	r2, [pc, #140]	; (800b968 <TIM_Base_SetConfig+0x13c>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d108      	bne.n	800b8f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a0a      	ldr	r2, [pc, #40]	; (800b940 <TIM_Base_SetConfig+0x114>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d003      	beq.n	800b924 <TIM_Base_SetConfig+0xf8>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a0c      	ldr	r2, [pc, #48]	; (800b950 <TIM_Base_SetConfig+0x124>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d103      	bne.n	800b92c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	691a      	ldr	r2, [r3, #16]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	615a      	str	r2, [r3, #20]
}
 800b932:	bf00      	nop
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	40010000 	.word	0x40010000
 800b944:	40000400 	.word	0x40000400
 800b948:	40000800 	.word	0x40000800
 800b94c:	40000c00 	.word	0x40000c00
 800b950:	40010400 	.word	0x40010400
 800b954:	40014000 	.word	0x40014000
 800b958:	40014400 	.word	0x40014400
 800b95c:	40014800 	.word	0x40014800
 800b960:	40001800 	.word	0x40001800
 800b964:	40001c00 	.word	0x40001c00
 800b968:	40002000 	.word	0x40002000

0800b96c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	f023 0201 	bic.w	r2, r3, #1
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	011b      	lsls	r3, r3, #4
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f023 030a 	bic.w	r3, r3, #10
 800b9a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	621a      	str	r2, [r3, #32]
}
 800b9be:	bf00      	nop
 800b9c0:	371c      	adds	r7, #28
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b087      	sub	sp, #28
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	f023 0210 	bic.w	r2, r3, #16
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	031b      	lsls	r3, r3, #12
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	621a      	str	r2, [r3, #32]
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	f043 0307 	orr.w	r3, r3, #7
 800ba4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	609a      	str	r2, [r3, #8]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	021a      	lsls	r2, r3, #8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	431a      	orrs	r2, r3
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	609a      	str	r2, [r3, #8]
}
 800ba94:	bf00      	nop
 800ba96:	371c      	adds	r7, #28
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bab4:	2302      	movs	r3, #2
 800bab6:	e05a      	b.n	800bb6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a21      	ldr	r2, [pc, #132]	; (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d022      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb04:	d01d      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a1d      	ldr	r2, [pc, #116]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d018      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1b      	ldr	r2, [pc, #108]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d013      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a1a      	ldr	r2, [pc, #104]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00e      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a18      	ldr	r2, [pc, #96]	; (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d009      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a17      	ldr	r2, [pc, #92]	; (800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d004      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a15      	ldr	r2, [pc, #84]	; (800bb94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d10c      	bne.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000800 	.word	0x40000800
 800bb88:	40000c00 	.word	0x40000c00
 800bb8c:	40010400 	.word	0x40010400
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40001800 	.word	0x40001800

0800bb98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e03f      	b.n	800bc52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7f8 ff8e 	bl	8004b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2224      	movs	r2, #36	; 0x24
 800bbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68da      	ldr	r2, [r3, #12]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fddf 	bl	800c7c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	691a      	ldr	r2, [r3, #16]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	695a      	ldr	r2, [r3, #20]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b08a      	sub	sp, #40	; 0x28
 800bc5e:	af02      	add	r7, sp, #8
 800bc60:	60f8      	str	r0, [r7, #12]
 800bc62:	60b9      	str	r1, [r7, #8]
 800bc64:	603b      	str	r3, [r7, #0]
 800bc66:	4613      	mov	r3, r2
 800bc68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	d17c      	bne.n	800bd74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <HAL_UART_Transmit+0x2c>
 800bc80:	88fb      	ldrh	r3, [r7, #6]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e075      	b.n	800bd76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d101      	bne.n	800bc98 <HAL_UART_Transmit+0x3e>
 800bc94:	2302      	movs	r3, #2
 800bc96:	e06e      	b.n	800bd76 <HAL_UART_Transmit+0x11c>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2221      	movs	r2, #33	; 0x21
 800bcaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bcae:	f7fb fbbb 	bl	8007428 <HAL_GetTick>
 800bcb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	88fa      	ldrh	r2, [r7, #6]
 800bcb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	88fa      	ldrh	r2, [r7, #6]
 800bcbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcc8:	d108      	bne.n	800bcdc <HAL_UART_Transmit+0x82>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d104      	bne.n	800bcdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	61bb      	str	r3, [r7, #24]
 800bcda:	e003      	b.n	800bce4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bcec:	e02a      	b.n	800bd44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2180      	movs	r1, #128	; 0x80
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 fb1f 	bl	800c33c <UART_WaitOnFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e036      	b.n	800bd76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10b      	bne.n	800bd26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	3302      	adds	r3, #2
 800bd22:	61bb      	str	r3, [r7, #24]
 800bd24:	e007      	b.n	800bd36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	781a      	ldrb	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	3301      	adds	r3, #1
 800bd34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1cf      	bne.n	800bcee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2140      	movs	r1, #64	; 0x40
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 faef 	bl	800c33c <UART_WaitOnFlagUntilTimeout>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e006      	b.n	800bd76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2220      	movs	r2, #32
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	e000      	b.n	800bd76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bd74:	2302      	movs	r3, #2
  }
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	60f8      	str	r0, [r7, #12]
 800bd86:	60b9      	str	r1, [r7, #8]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	d11d      	bne.n	800bdd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <HAL_UART_Receive_IT+0x26>
 800bd9e:	88fb      	ldrh	r3, [r7, #6]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e016      	b.n	800bdd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d101      	bne.n	800bdb6 <HAL_UART_Receive_IT+0x38>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	e00f      	b.n	800bdd6 <HAL_UART_Receive_IT+0x58>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 fb24 	bl	800c418 <UART_Start_Receive_IT>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	e000      	b.n	800bdd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bdd4:	2302      	movs	r3, #2
  }
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
	...

0800bde0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b0ba      	sub	sp, #232	; 0xe8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800be06:	2300      	movs	r3, #0
 800be08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800be0c:	2300      	movs	r3, #0
 800be0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10f      	bne.n	800be46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be2a:	f003 0320 	and.w	r3, r3, #32
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <HAL_UART_IRQHandler+0x66>
 800be32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be36:	f003 0320 	and.w	r3, r3, #32
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fc07 	bl	800c652 <UART_Receive_IT>
      return;
 800be44:	e256      	b.n	800c2f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 80de 	beq.w	800c00c <HAL_UART_IRQHandler+0x22c>
 800be50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 80d1 	beq.w	800c00c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00b      	beq.n	800be8e <HAL_UART_IRQHandler+0xae>
 800be76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	f043 0201 	orr.w	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00b      	beq.n	800beb2 <HAL_UART_IRQHandler+0xd2>
 800be9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d005      	beq.n	800beb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	f043 0202 	orr.w	r2, r3, #2
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800beb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00b      	beq.n	800bed6 <HAL_UART_IRQHandler+0xf6>
 800bebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d005      	beq.n	800bed6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	f043 0204 	orr.w	r2, r3, #4
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beda:	f003 0308 	and.w	r3, r3, #8
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d011      	beq.n	800bf06 <HAL_UART_IRQHandler+0x126>
 800bee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800beee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d005      	beq.n	800bf06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befe:	f043 0208 	orr.w	r2, r3, #8
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 81ed 	beq.w	800c2ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf14:	f003 0320 	and.w	r3, r3, #32
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d008      	beq.n	800bf2e <HAL_UART_IRQHandler+0x14e>
 800bf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf20:	f003 0320 	and.w	r3, r3, #32
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fb92 	bl	800c652 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	bf0c      	ite	eq
 800bf3c:	2301      	moveq	r3, #1
 800bf3e:	2300      	movne	r3, #0
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d103      	bne.n	800bf5a <HAL_UART_IRQHandler+0x17a>
 800bf52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d04f      	beq.n	800bffa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fa9a 	bl	800c494 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6a:	2b40      	cmp	r3, #64	; 0x40
 800bf6c:	d141      	bne.n	800bff2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3314      	adds	r3, #20
 800bf74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf7c:	e853 3f00 	ldrex	r3, [r3]
 800bf80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3314      	adds	r3, #20
 800bf96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bfb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1d9      	bne.n	800bf6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d013      	beq.n	800bfea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc6:	4a7d      	ldr	r2, [pc, #500]	; (800c1bc <HAL_UART_IRQHandler+0x3dc>)
 800bfc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fc f8e6 	bl	80081a0 <HAL_DMA_Abort_IT>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d016      	beq.n	800c008 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe8:	e00e      	b.n	800c008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f990 	bl	800c310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff0:	e00a      	b.n	800c008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f98c 	bl	800c310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff8:	e006      	b.n	800c008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f988 	bl	800c310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c006:	e170      	b.n	800c2ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c008:	bf00      	nop
    return;
 800c00a:	e16e      	b.n	800c2ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c010:	2b01      	cmp	r3, #1
 800c012:	f040 814a 	bne.w	800c2aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 8143 	beq.w	800c2aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c028:	f003 0310 	and.w	r3, r3, #16
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 813c 	beq.w	800c2aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c032:	2300      	movs	r3, #0
 800c034:	60bb      	str	r3, [r7, #8]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	60bb      	str	r3, [r7, #8]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	60bb      	str	r3, [r7, #8]
 800c046:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c052:	2b40      	cmp	r3, #64	; 0x40
 800c054:	f040 80b4 	bne.w	800c1c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8140 	beq.w	800c2ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c076:	429a      	cmp	r2, r3
 800c078:	f080 8139 	bcs.w	800c2ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c082:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c08e:	f000 8088 	beq.w	800c1a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	330c      	adds	r3, #12
 800c098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c0be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c0c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1d9      	bne.n	800c092 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3314      	adds	r3, #20
 800c0e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c0ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0f0:	f023 0301 	bic.w	r3, r3, #1
 800c0f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3314      	adds	r3, #20
 800c0fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c102:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c106:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c10a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c10e:	e841 2300 	strex	r3, r2, [r1]
 800c112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e1      	bne.n	800c0de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3314      	adds	r3, #20
 800c120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3314      	adds	r3, #20
 800c13a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c13e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c146:	e841 2300 	strex	r3, r2, [r1]
 800c14a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c14c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1e3      	bne.n	800c11a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2220      	movs	r2, #32
 800c156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	330c      	adds	r3, #12
 800c166:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c16a:	e853 3f00 	ldrex	r3, [r3]
 800c16e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c172:	f023 0310 	bic.w	r3, r3, #16
 800c176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	330c      	adds	r3, #12
 800c180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c184:	65ba      	str	r2, [r7, #88]	; 0x58
 800c186:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c18a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c18c:	e841 2300 	strex	r3, r2, [r1]
 800c190:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e3      	bne.n	800c160 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fb ff8f 	bl	80080c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f8b6 	bl	800c324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1b8:	e099      	b.n	800c2ee <HAL_UART_IRQHandler+0x50e>
 800c1ba:	bf00      	nop
 800c1bc:	0800c55b 	.word	0x0800c55b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 808b 	beq.w	800c2f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c1dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 8086 	beq.w	800c2f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	330c      	adds	r3, #12
 800c1ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	e853 3f00 	ldrex	r3, [r3]
 800c1f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	330c      	adds	r3, #12
 800c206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c20a:	647a      	str	r2, [r7, #68]	; 0x44
 800c20c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e3      	bne.n	800c1e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3314      	adds	r3, #20
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	623b      	str	r3, [r7, #32]
   return(result);
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	f023 0301 	bic.w	r3, r3, #1
 800c234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3314      	adds	r3, #20
 800c23e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c242:	633a      	str	r2, [r7, #48]	; 0x30
 800c244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e3      	bne.n	800c21e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2220      	movs	r2, #32
 800c25a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	330c      	adds	r3, #12
 800c26a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	60fb      	str	r3, [r7, #12]
   return(result);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f023 0310 	bic.w	r3, r3, #16
 800c27a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	330c      	adds	r3, #12
 800c284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c288:	61fa      	str	r2, [r7, #28]
 800c28a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	69b9      	ldr	r1, [r7, #24]
 800c28e:	69fa      	ldr	r2, [r7, #28]
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	617b      	str	r3, [r7, #20]
   return(result);
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e3      	bne.n	800c264 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c29c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f83e 	bl	800c324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c2a8:	e023      	b.n	800c2f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d009      	beq.n	800c2ca <HAL_UART_IRQHandler+0x4ea>
 800c2b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f95d 	bl	800c582 <UART_Transmit_IT>
    return;
 800c2c8:	e014      	b.n	800c2f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00e      	beq.n	800c2f4 <HAL_UART_IRQHandler+0x514>
 800c2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d008      	beq.n	800c2f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f99d 	bl	800c622 <UART_EndTransmit_IT>
    return;
 800c2e8:	e004      	b.n	800c2f4 <HAL_UART_IRQHandler+0x514>
    return;
 800c2ea:	bf00      	nop
 800c2ec:	e002      	b.n	800c2f4 <HAL_UART_IRQHandler+0x514>
      return;
 800c2ee:	bf00      	nop
 800c2f0:	e000      	b.n	800c2f4 <HAL_UART_IRQHandler+0x514>
      return;
 800c2f2:	bf00      	nop
  }
}
 800c2f4:	37e8      	adds	r7, #232	; 0xe8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop

0800c2fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b090      	sub	sp, #64	; 0x40
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	4613      	mov	r3, r2
 800c34a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c34c:	e050      	b.n	800c3f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c34e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c354:	d04c      	beq.n	800c3f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d007      	beq.n	800c36c <UART_WaitOnFlagUntilTimeout+0x30>
 800c35c:	f7fb f864 	bl	8007428 <HAL_GetTick>
 800c360:	4602      	mov	r2, r0
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c368:	429a      	cmp	r2, r3
 800c36a:	d241      	bcs.n	800c3f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	330c      	adds	r3, #12
 800c372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	e853 3f00 	ldrex	r3, [r3]
 800c37a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	330c      	adds	r3, #12
 800c38a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c38c:	637a      	str	r2, [r7, #52]	; 0x34
 800c38e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c394:	e841 2300 	strex	r3, r2, [r1]
 800c398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e5      	bne.n	800c36c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3314      	adds	r3, #20
 800c3a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f023 0301 	bic.w	r3, r3, #1
 800c3b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3314      	adds	r3, #20
 800c3be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c0:	623a      	str	r2, [r7, #32]
 800c3c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c4:	69f9      	ldr	r1, [r7, #28]
 800c3c6:	6a3a      	ldr	r2, [r7, #32]
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e5      	bne.n	800c3a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e00f      	b.n	800c410 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	bf0c      	ite	eq
 800c400:	2301      	moveq	r3, #1
 800c402:	2300      	movne	r3, #0
 800c404:	b2db      	uxtb	r3, r3
 800c406:	461a      	mov	r2, r3
 800c408:	79fb      	ldrb	r3, [r7, #7]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d09f      	beq.n	800c34e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3740      	adds	r7, #64	; 0x40
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4613      	mov	r3, r2
 800c424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	88fa      	ldrh	r2, [r7, #6]
 800c430:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	88fa      	ldrh	r2, [r7, #6]
 800c436:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2222      	movs	r2, #34	; 0x22
 800c442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68da      	ldr	r2, [r3, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c464:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	695a      	ldr	r2, [r3, #20]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f042 0201 	orr.w	r2, r2, #1
 800c474:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68da      	ldr	r2, [r3, #12]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f042 0220 	orr.w	r2, r2, #32
 800c484:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c494:	b480      	push	{r7}
 800c496:	b095      	sub	sp, #84	; 0x54
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	e853 3f00 	ldrex	r3, [r3]
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	330c      	adds	r3, #12
 800c4ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4bc:	643a      	str	r2, [r7, #64]	; 0x40
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4c4:	e841 2300 	strex	r3, r2, [r1]
 800c4c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1e5      	bne.n	800c49c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3314      	adds	r3, #20
 800c4d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	e853 3f00 	ldrex	r3, [r3]
 800c4de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	f023 0301 	bic.w	r3, r3, #1
 800c4e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	3314      	adds	r3, #20
 800c4ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4f8:	e841 2300 	strex	r3, r2, [r1]
 800c4fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1e5      	bne.n	800c4d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d119      	bne.n	800c540 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	330c      	adds	r3, #12
 800c512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	e853 3f00 	ldrex	r3, [r3]
 800c51a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f023 0310 	bic.w	r3, r3, #16
 800c522:	647b      	str	r3, [r7, #68]	; 0x44
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	330c      	adds	r3, #12
 800c52a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c52c:	61ba      	str	r2, [r7, #24]
 800c52e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	6979      	ldr	r1, [r7, #20]
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	613b      	str	r3, [r7, #16]
   return(result);
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e5      	bne.n	800c50c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2220      	movs	r2, #32
 800c544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c54e:	bf00      	nop
 800c550:	3754      	adds	r7, #84	; 0x54
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c566:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fecb 	bl	800c310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c582:	b480      	push	{r7}
 800c584:	b085      	sub	sp, #20
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b21      	cmp	r3, #33	; 0x21
 800c594:	d13e      	bne.n	800c614 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c59e:	d114      	bne.n	800c5ca <UART_Transmit_IT+0x48>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d110      	bne.n	800c5ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	1c9a      	adds	r2, r3, #2
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	621a      	str	r2, [r3, #32]
 800c5c8:	e008      	b.n	800c5dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	1c59      	adds	r1, r3, #1
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	6211      	str	r1, [r2, #32]
 800c5d4:	781a      	ldrb	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10f      	bne.n	800c610 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68da      	ldr	r2, [r3, #12]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68da      	ldr	r2, [r3, #12]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c60e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	e000      	b.n	800c616 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c614:	2302      	movs	r3, #2
  }
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b082      	sub	sp, #8
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68da      	ldr	r2, [r3, #12]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c638:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2220      	movs	r2, #32
 800c63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff fe5a 	bl	800c2fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b08c      	sub	sp, #48	; 0x30
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c660:	b2db      	uxtb	r3, r3
 800c662:	2b22      	cmp	r3, #34	; 0x22
 800c664:	f040 80ab 	bne.w	800c7be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c670:	d117      	bne.n	800c6a2 <UART_Receive_IT+0x50>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d113      	bne.n	800c6a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c690:	b29a      	uxth	r2, r3
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69a:	1c9a      	adds	r2, r3, #2
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	629a      	str	r2, [r3, #40]	; 0x28
 800c6a0:	e026      	b.n	800c6f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6b4:	d007      	beq.n	800c6c6 <UART_Receive_IT+0x74>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <UART_Receive_IT+0x82>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	e008      	b.n	800c6e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c700:	2b00      	cmp	r3, #0
 800c702:	d15a      	bne.n	800c7ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68da      	ldr	r2, [r3, #12]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f022 0220 	bic.w	r2, r2, #32
 800c712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	695a      	ldr	r2, [r3, #20]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0201 	bic.w	r2, r2, #1
 800c732:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2220      	movs	r2, #32
 800c738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c740:	2b01      	cmp	r3, #1
 800c742:	d135      	bne.n	800c7b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	330c      	adds	r3, #12
 800c750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	e853 3f00 	ldrex	r3, [r3]
 800c758:	613b      	str	r3, [r7, #16]
   return(result);
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	f023 0310 	bic.w	r3, r3, #16
 800c760:	627b      	str	r3, [r7, #36]	; 0x24
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	330c      	adds	r3, #12
 800c768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76a:	623a      	str	r2, [r7, #32]
 800c76c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76e:	69f9      	ldr	r1, [r7, #28]
 800c770:	6a3a      	ldr	r2, [r7, #32]
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	61bb      	str	r3, [r7, #24]
   return(result);
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e5      	bne.n	800c74a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	2b10      	cmp	r3, #16
 800c78a:	d10a      	bne.n	800c7a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff fdbb 	bl	800c324 <HAL_UARTEx_RxEventCallback>
 800c7ae:	e002      	b.n	800c7b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7f7 ff01 	bl	80045b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e002      	b.n	800c7c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e000      	b.n	800c7c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c7be:	2302      	movs	r3, #2
  }
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3730      	adds	r7, #48	; 0x30
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7cc:	b0c0      	sub	sp, #256	; 0x100
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e4:	68d9      	ldr	r1, [r3, #12]
 800c7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	ea40 0301 	orr.w	r3, r0, r1
 800c7f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f6:	689a      	ldr	r2, [r3, #8]
 800c7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	431a      	orrs	r2, r3
 800c800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	431a      	orrs	r2, r3
 800c808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	4313      	orrs	r3, r2
 800c810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c820:	f021 010c 	bic.w	r1, r1, #12
 800c824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c82e:	430b      	orrs	r3, r1
 800c830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c842:	6999      	ldr	r1, [r3, #24]
 800c844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	ea40 0301 	orr.w	r3, r0, r1
 800c84e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	4b8f      	ldr	r3, [pc, #572]	; (800ca94 <UART_SetConfig+0x2cc>)
 800c858:	429a      	cmp	r2, r3
 800c85a:	d005      	beq.n	800c868 <UART_SetConfig+0xa0>
 800c85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	4b8d      	ldr	r3, [pc, #564]	; (800ca98 <UART_SetConfig+0x2d0>)
 800c864:	429a      	cmp	r2, r3
 800c866:	d104      	bne.n	800c872 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c868:	f7fd fb62 	bl	8009f30 <HAL_RCC_GetPCLK2Freq>
 800c86c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c870:	e003      	b.n	800c87a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c872:	f7fd fb49 	bl	8009f08 <HAL_RCC_GetPCLK1Freq>
 800c876:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c87e:	69db      	ldr	r3, [r3, #28]
 800c880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c884:	f040 810c 	bne.w	800caa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c88c:	2200      	movs	r2, #0
 800c88e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c892:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c896:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c89a:	4622      	mov	r2, r4
 800c89c:	462b      	mov	r3, r5
 800c89e:	1891      	adds	r1, r2, r2
 800c8a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c8a2:	415b      	adcs	r3, r3
 800c8a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	eb12 0801 	adds.w	r8, r2, r1
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	eb43 0901 	adc.w	r9, r3, r1
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	f04f 0300 	mov.w	r3, #0
 800c8be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8ca:	4690      	mov	r8, r2
 800c8cc:	4699      	mov	r9, r3
 800c8ce:	4623      	mov	r3, r4
 800c8d0:	eb18 0303 	adds.w	r3, r8, r3
 800c8d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c8d8:	462b      	mov	r3, r5
 800c8da:	eb49 0303 	adc.w	r3, r9, r3
 800c8de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c8e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	18db      	adds	r3, r3, r3
 800c8fa:	653b      	str	r3, [r7, #80]	; 0x50
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	eb42 0303 	adc.w	r3, r2, r3
 800c902:	657b      	str	r3, [r7, #84]	; 0x54
 800c904:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c908:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c90c:	f7f4 fa0c 	bl	8000d28 <__aeabi_uldivmod>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4b61      	ldr	r3, [pc, #388]	; (800ca9c <UART_SetConfig+0x2d4>)
 800c916:	fba3 2302 	umull	r2, r3, r3, r2
 800c91a:	095b      	lsrs	r3, r3, #5
 800c91c:	011c      	lsls	r4, r3, #4
 800c91e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c922:	2200      	movs	r2, #0
 800c924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c928:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c92c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c930:	4642      	mov	r2, r8
 800c932:	464b      	mov	r3, r9
 800c934:	1891      	adds	r1, r2, r2
 800c936:	64b9      	str	r1, [r7, #72]	; 0x48
 800c938:	415b      	adcs	r3, r3
 800c93a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c93c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c940:	4641      	mov	r1, r8
 800c942:	eb12 0a01 	adds.w	sl, r2, r1
 800c946:	4649      	mov	r1, r9
 800c948:	eb43 0b01 	adc.w	fp, r3, r1
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	f04f 0300 	mov.w	r3, #0
 800c954:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c958:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c95c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c960:	4692      	mov	sl, r2
 800c962:	469b      	mov	fp, r3
 800c964:	4643      	mov	r3, r8
 800c966:	eb1a 0303 	adds.w	r3, sl, r3
 800c96a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c96e:	464b      	mov	r3, r9
 800c970:	eb4b 0303 	adc.w	r3, fp, r3
 800c974:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c984:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c988:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c98c:	460b      	mov	r3, r1
 800c98e:	18db      	adds	r3, r3, r3
 800c990:	643b      	str	r3, [r7, #64]	; 0x40
 800c992:	4613      	mov	r3, r2
 800c994:	eb42 0303 	adc.w	r3, r2, r3
 800c998:	647b      	str	r3, [r7, #68]	; 0x44
 800c99a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c99e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c9a2:	f7f4 f9c1 	bl	8000d28 <__aeabi_uldivmod>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4b3b      	ldr	r3, [pc, #236]	; (800ca9c <UART_SetConfig+0x2d4>)
 800c9ae:	fba3 2301 	umull	r2, r3, r3, r1
 800c9b2:	095b      	lsrs	r3, r3, #5
 800c9b4:	2264      	movs	r2, #100	; 0x64
 800c9b6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ba:	1acb      	subs	r3, r1, r3
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c9c2:	4b36      	ldr	r3, [pc, #216]	; (800ca9c <UART_SetConfig+0x2d4>)
 800c9c4:	fba3 2302 	umull	r2, r3, r3, r2
 800c9c8:	095b      	lsrs	r3, r3, #5
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c9d0:	441c      	add	r4, r3
 800c9d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c9e4:	4642      	mov	r2, r8
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	1891      	adds	r1, r2, r2
 800c9ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9ec:	415b      	adcs	r3, r3
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9f4:	4641      	mov	r1, r8
 800c9f6:	1851      	adds	r1, r2, r1
 800c9f8:	6339      	str	r1, [r7, #48]	; 0x30
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	414b      	adcs	r3, r1
 800c9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800ca00:	f04f 0200 	mov.w	r2, #0
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	00cb      	lsls	r3, r1, #3
 800ca10:	4651      	mov	r1, sl
 800ca12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca16:	4651      	mov	r1, sl
 800ca18:	00ca      	lsls	r2, r1, #3
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4603      	mov	r3, r0
 800ca20:	4642      	mov	r2, r8
 800ca22:	189b      	adds	r3, r3, r2
 800ca24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca28:	464b      	mov	r3, r9
 800ca2a:	460a      	mov	r2, r1
 800ca2c:	eb42 0303 	adc.w	r3, r2, r3
 800ca30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ca44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca48:	460b      	mov	r3, r1
 800ca4a:	18db      	adds	r3, r3, r3
 800ca4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca4e:	4613      	mov	r3, r2
 800ca50:	eb42 0303 	adc.w	r3, r2, r3
 800ca54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca5e:	f7f4 f963 	bl	8000d28 <__aeabi_uldivmod>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <UART_SetConfig+0x2d4>)
 800ca68:	fba3 1302 	umull	r1, r3, r3, r2
 800ca6c:	095b      	lsrs	r3, r3, #5
 800ca6e:	2164      	movs	r1, #100	; 0x64
 800ca70:	fb01 f303 	mul.w	r3, r1, r3
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	3332      	adds	r3, #50	; 0x32
 800ca7a:	4a08      	ldr	r2, [pc, #32]	; (800ca9c <UART_SetConfig+0x2d4>)
 800ca7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca80:	095b      	lsrs	r3, r3, #5
 800ca82:	f003 0207 	and.w	r2, r3, #7
 800ca86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4422      	add	r2, r4
 800ca8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca90:	e106      	b.n	800cca0 <UART_SetConfig+0x4d8>
 800ca92:	bf00      	nop
 800ca94:	40011000 	.word	0x40011000
 800ca98:	40011400 	.word	0x40011400
 800ca9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800caa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caa4:	2200      	movs	r2, #0
 800caa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800caaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800caae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cab2:	4642      	mov	r2, r8
 800cab4:	464b      	mov	r3, r9
 800cab6:	1891      	adds	r1, r2, r2
 800cab8:	6239      	str	r1, [r7, #32]
 800caba:	415b      	adcs	r3, r3
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
 800cabe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cac2:	4641      	mov	r1, r8
 800cac4:	1854      	adds	r4, r2, r1
 800cac6:	4649      	mov	r1, r9
 800cac8:	eb43 0501 	adc.w	r5, r3, r1
 800cacc:	f04f 0200 	mov.w	r2, #0
 800cad0:	f04f 0300 	mov.w	r3, #0
 800cad4:	00eb      	lsls	r3, r5, #3
 800cad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cada:	00e2      	lsls	r2, r4, #3
 800cadc:	4614      	mov	r4, r2
 800cade:	461d      	mov	r5, r3
 800cae0:	4643      	mov	r3, r8
 800cae2:	18e3      	adds	r3, r4, r3
 800cae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cae8:	464b      	mov	r3, r9
 800caea:	eb45 0303 	adc.w	r3, r5, r3
 800caee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800caf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cafe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cb02:	f04f 0200 	mov.w	r2, #0
 800cb06:	f04f 0300 	mov.w	r3, #0
 800cb0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cb0e:	4629      	mov	r1, r5
 800cb10:	008b      	lsls	r3, r1, #2
 800cb12:	4621      	mov	r1, r4
 800cb14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb18:	4621      	mov	r1, r4
 800cb1a:	008a      	lsls	r2, r1, #2
 800cb1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cb20:	f7f4 f902 	bl	8000d28 <__aeabi_uldivmod>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4b60      	ldr	r3, [pc, #384]	; (800ccac <UART_SetConfig+0x4e4>)
 800cb2a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb2e:	095b      	lsrs	r3, r3, #5
 800cb30:	011c      	lsls	r4, r3, #4
 800cb32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb36:	2200      	movs	r2, #0
 800cb38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cb44:	4642      	mov	r2, r8
 800cb46:	464b      	mov	r3, r9
 800cb48:	1891      	adds	r1, r2, r2
 800cb4a:	61b9      	str	r1, [r7, #24]
 800cb4c:	415b      	adcs	r3, r3
 800cb4e:	61fb      	str	r3, [r7, #28]
 800cb50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb54:	4641      	mov	r1, r8
 800cb56:	1851      	adds	r1, r2, r1
 800cb58:	6139      	str	r1, [r7, #16]
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	414b      	adcs	r3, r1
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	f04f 0200 	mov.w	r2, #0
 800cb64:	f04f 0300 	mov.w	r3, #0
 800cb68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb6c:	4659      	mov	r1, fp
 800cb6e:	00cb      	lsls	r3, r1, #3
 800cb70:	4651      	mov	r1, sl
 800cb72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb76:	4651      	mov	r1, sl
 800cb78:	00ca      	lsls	r2, r1, #3
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4603      	mov	r3, r0
 800cb80:	4642      	mov	r2, r8
 800cb82:	189b      	adds	r3, r3, r2
 800cb84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb88:	464b      	mov	r3, r9
 800cb8a:	460a      	mov	r2, r1
 800cb8c:	eb42 0303 	adc.w	r3, r2, r3
 800cb90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cba0:	f04f 0200 	mov.w	r2, #0
 800cba4:	f04f 0300 	mov.w	r3, #0
 800cba8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cbac:	4649      	mov	r1, r9
 800cbae:	008b      	lsls	r3, r1, #2
 800cbb0:	4641      	mov	r1, r8
 800cbb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbb6:	4641      	mov	r1, r8
 800cbb8:	008a      	lsls	r2, r1, #2
 800cbba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cbbe:	f7f4 f8b3 	bl	8000d28 <__aeabi_uldivmod>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	4b38      	ldr	r3, [pc, #224]	; (800ccac <UART_SetConfig+0x4e4>)
 800cbca:	fba3 2301 	umull	r2, r3, r3, r1
 800cbce:	095b      	lsrs	r3, r3, #5
 800cbd0:	2264      	movs	r2, #100	; 0x64
 800cbd2:	fb02 f303 	mul.w	r3, r2, r3
 800cbd6:	1acb      	subs	r3, r1, r3
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	3332      	adds	r3, #50	; 0x32
 800cbdc:	4a33      	ldr	r2, [pc, #204]	; (800ccac <UART_SetConfig+0x4e4>)
 800cbde:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe2:	095b      	lsrs	r3, r3, #5
 800cbe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbe8:	441c      	add	r4, r3
 800cbea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbee:	2200      	movs	r2, #0
 800cbf0:	673b      	str	r3, [r7, #112]	; 0x70
 800cbf2:	677a      	str	r2, [r7, #116]	; 0x74
 800cbf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	1891      	adds	r1, r2, r2
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	415b      	adcs	r3, r3
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc08:	4641      	mov	r1, r8
 800cc0a:	1851      	adds	r1, r2, r1
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	4649      	mov	r1, r9
 800cc10:	414b      	adcs	r3, r1
 800cc12:	607b      	str	r3, [r7, #4]
 800cc14:	f04f 0200 	mov.w	r2, #0
 800cc18:	f04f 0300 	mov.w	r3, #0
 800cc1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cc20:	4659      	mov	r1, fp
 800cc22:	00cb      	lsls	r3, r1, #3
 800cc24:	4651      	mov	r1, sl
 800cc26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc2a:	4651      	mov	r1, sl
 800cc2c:	00ca      	lsls	r2, r1, #3
 800cc2e:	4610      	mov	r0, r2
 800cc30:	4619      	mov	r1, r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	4642      	mov	r2, r8
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc3a:	464b      	mov	r3, r9
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	eb42 0303 	adc.w	r3, r2, r3
 800cc42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	663b      	str	r3, [r7, #96]	; 0x60
 800cc4e:	667a      	str	r2, [r7, #100]	; 0x64
 800cc50:	f04f 0200 	mov.w	r2, #0
 800cc54:	f04f 0300 	mov.w	r3, #0
 800cc58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc5c:	4649      	mov	r1, r9
 800cc5e:	008b      	lsls	r3, r1, #2
 800cc60:	4641      	mov	r1, r8
 800cc62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc66:	4641      	mov	r1, r8
 800cc68:	008a      	lsls	r2, r1, #2
 800cc6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc6e:	f7f4 f85b 	bl	8000d28 <__aeabi_uldivmod>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4b0d      	ldr	r3, [pc, #52]	; (800ccac <UART_SetConfig+0x4e4>)
 800cc78:	fba3 1302 	umull	r1, r3, r3, r2
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	2164      	movs	r1, #100	; 0x64
 800cc80:	fb01 f303 	mul.w	r3, r1, r3
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	3332      	adds	r3, #50	; 0x32
 800cc8a:	4a08      	ldr	r2, [pc, #32]	; (800ccac <UART_SetConfig+0x4e4>)
 800cc8c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc90:	095b      	lsrs	r3, r3, #5
 800cc92:	f003 020f 	and.w	r2, r3, #15
 800cc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4422      	add	r2, r4
 800cc9e:	609a      	str	r2, [r3, #8]
}
 800cca0:	bf00      	nop
 800cca2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cca6:	46bd      	mov	sp, r7
 800cca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccac:	51eb851f 	.word	0x51eb851f

0800ccb0 <__cvt>:
 800ccb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb4:	ec55 4b10 	vmov	r4, r5, d0
 800ccb8:	2d00      	cmp	r5, #0
 800ccba:	460e      	mov	r6, r1
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	bfbb      	ittet	lt
 800ccc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ccc6:	461d      	movlt	r5, r3
 800ccc8:	2300      	movge	r3, #0
 800ccca:	232d      	movlt	r3, #45	; 0x2d
 800cccc:	700b      	strb	r3, [r1, #0]
 800ccce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ccd4:	4691      	mov	r9, r2
 800ccd6:	f023 0820 	bic.w	r8, r3, #32
 800ccda:	bfbc      	itt	lt
 800ccdc:	4622      	movlt	r2, r4
 800ccde:	4614      	movlt	r4, r2
 800cce0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cce4:	d005      	beq.n	800ccf2 <__cvt+0x42>
 800cce6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccea:	d100      	bne.n	800ccee <__cvt+0x3e>
 800ccec:	3601      	adds	r6, #1
 800ccee:	2102      	movs	r1, #2
 800ccf0:	e000      	b.n	800ccf4 <__cvt+0x44>
 800ccf2:	2103      	movs	r1, #3
 800ccf4:	ab03      	add	r3, sp, #12
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	ab02      	add	r3, sp, #8
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	ec45 4b10 	vmov	d0, r4, r5
 800cd00:	4653      	mov	r3, sl
 800cd02:	4632      	mov	r2, r6
 800cd04:	f001 f88c 	bl	800de20 <_dtoa_r>
 800cd08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd0c:	4607      	mov	r7, r0
 800cd0e:	d102      	bne.n	800cd16 <__cvt+0x66>
 800cd10:	f019 0f01 	tst.w	r9, #1
 800cd14:	d022      	beq.n	800cd5c <__cvt+0xac>
 800cd16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd1a:	eb07 0906 	add.w	r9, r7, r6
 800cd1e:	d110      	bne.n	800cd42 <__cvt+0x92>
 800cd20:	783b      	ldrb	r3, [r7, #0]
 800cd22:	2b30      	cmp	r3, #48	; 0x30
 800cd24:	d10a      	bne.n	800cd3c <__cvt+0x8c>
 800cd26:	2200      	movs	r2, #0
 800cd28:	2300      	movs	r3, #0
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7f3 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 800cd32:	b918      	cbnz	r0, 800cd3c <__cvt+0x8c>
 800cd34:	f1c6 0601 	rsb	r6, r6, #1
 800cd38:	f8ca 6000 	str.w	r6, [sl]
 800cd3c:	f8da 3000 	ldr.w	r3, [sl]
 800cd40:	4499      	add	r9, r3
 800cd42:	2200      	movs	r2, #0
 800cd44:	2300      	movs	r3, #0
 800cd46:	4620      	mov	r0, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7f3 fedd 	bl	8000b08 <__aeabi_dcmpeq>
 800cd4e:	b108      	cbz	r0, 800cd54 <__cvt+0xa4>
 800cd50:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd54:	2230      	movs	r2, #48	; 0x30
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	454b      	cmp	r3, r9
 800cd5a:	d307      	bcc.n	800cd6c <__cvt+0xbc>
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd60:	1bdb      	subs	r3, r3, r7
 800cd62:	4638      	mov	r0, r7
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	b004      	add	sp, #16
 800cd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6c:	1c59      	adds	r1, r3, #1
 800cd6e:	9103      	str	r1, [sp, #12]
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	e7f0      	b.n	800cd56 <__cvt+0xa6>

0800cd74 <__exponent>:
 800cd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd76:	4603      	mov	r3, r0
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	bfb8      	it	lt
 800cd7c:	4249      	neglt	r1, r1
 800cd7e:	f803 2b02 	strb.w	r2, [r3], #2
 800cd82:	bfb4      	ite	lt
 800cd84:	222d      	movlt	r2, #45	; 0x2d
 800cd86:	222b      	movge	r2, #43	; 0x2b
 800cd88:	2909      	cmp	r1, #9
 800cd8a:	7042      	strb	r2, [r0, #1]
 800cd8c:	dd2a      	ble.n	800cde4 <__exponent+0x70>
 800cd8e:	f10d 0207 	add.w	r2, sp, #7
 800cd92:	4617      	mov	r7, r2
 800cd94:	260a      	movs	r6, #10
 800cd96:	4694      	mov	ip, r2
 800cd98:	fb91 f5f6 	sdiv	r5, r1, r6
 800cd9c:	fb06 1415 	mls	r4, r6, r5, r1
 800cda0:	3430      	adds	r4, #48	; 0x30
 800cda2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cda6:	460c      	mov	r4, r1
 800cda8:	2c63      	cmp	r4, #99	; 0x63
 800cdaa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cdae:	4629      	mov	r1, r5
 800cdb0:	dcf1      	bgt.n	800cd96 <__exponent+0x22>
 800cdb2:	3130      	adds	r1, #48	; 0x30
 800cdb4:	f1ac 0402 	sub.w	r4, ip, #2
 800cdb8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cdbc:	1c41      	adds	r1, r0, #1
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	42ba      	cmp	r2, r7
 800cdc2:	d30a      	bcc.n	800cdda <__exponent+0x66>
 800cdc4:	f10d 0209 	add.w	r2, sp, #9
 800cdc8:	eba2 020c 	sub.w	r2, r2, ip
 800cdcc:	42bc      	cmp	r4, r7
 800cdce:	bf88      	it	hi
 800cdd0:	2200      	movhi	r2, #0
 800cdd2:	4413      	add	r3, r2
 800cdd4:	1a18      	subs	r0, r3, r0
 800cdd6:	b003      	add	sp, #12
 800cdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdda:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cdde:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cde2:	e7ed      	b.n	800cdc0 <__exponent+0x4c>
 800cde4:	2330      	movs	r3, #48	; 0x30
 800cde6:	3130      	adds	r1, #48	; 0x30
 800cde8:	7083      	strb	r3, [r0, #2]
 800cdea:	70c1      	strb	r1, [r0, #3]
 800cdec:	1d03      	adds	r3, r0, #4
 800cdee:	e7f1      	b.n	800cdd4 <__exponent+0x60>

0800cdf0 <_printf_float>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	ed2d 8b02 	vpush	{d8}
 800cdf8:	b08d      	sub	sp, #52	; 0x34
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce00:	4616      	mov	r6, r2
 800ce02:	461f      	mov	r7, r3
 800ce04:	4605      	mov	r5, r0
 800ce06:	f000 fecd 	bl	800dba4 <_localeconv_r>
 800ce0a:	f8d0 a000 	ldr.w	sl, [r0]
 800ce0e:	4650      	mov	r0, sl
 800ce10:	f7f3 fa4e 	bl	80002b0 <strlen>
 800ce14:	2300      	movs	r3, #0
 800ce16:	930a      	str	r3, [sp, #40]	; 0x28
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	9305      	str	r3, [sp, #20]
 800ce1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce20:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce24:	3307      	adds	r3, #7
 800ce26:	f023 0307 	bic.w	r3, r3, #7
 800ce2a:	f103 0208 	add.w	r2, r3, #8
 800ce2e:	f8c8 2000 	str.w	r2, [r8]
 800ce32:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce3a:	9307      	str	r3, [sp, #28]
 800ce3c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce40:	ee08 0a10 	vmov	s16, r0
 800ce44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ce48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce4c:	4b9e      	ldr	r3, [pc, #632]	; (800d0c8 <_printf_float+0x2d8>)
 800ce4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce52:	f7f3 fe8b 	bl	8000b6c <__aeabi_dcmpun>
 800ce56:	bb88      	cbnz	r0, 800cebc <_printf_float+0xcc>
 800ce58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce5c:	4b9a      	ldr	r3, [pc, #616]	; (800d0c8 <_printf_float+0x2d8>)
 800ce5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce62:	f7f3 fe65 	bl	8000b30 <__aeabi_dcmple>
 800ce66:	bb48      	cbnz	r0, 800cebc <_printf_float+0xcc>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	4640      	mov	r0, r8
 800ce6e:	4649      	mov	r1, r9
 800ce70:	f7f3 fe54 	bl	8000b1c <__aeabi_dcmplt>
 800ce74:	b110      	cbz	r0, 800ce7c <_printf_float+0x8c>
 800ce76:	232d      	movs	r3, #45	; 0x2d
 800ce78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce7c:	4a93      	ldr	r2, [pc, #588]	; (800d0cc <_printf_float+0x2dc>)
 800ce7e:	4b94      	ldr	r3, [pc, #592]	; (800d0d0 <_printf_float+0x2e0>)
 800ce80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce84:	bf94      	ite	ls
 800ce86:	4690      	movls	r8, r2
 800ce88:	4698      	movhi	r8, r3
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	6123      	str	r3, [r4, #16]
 800ce8e:	9b05      	ldr	r3, [sp, #20]
 800ce90:	f023 0304 	bic.w	r3, r3, #4
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	f04f 0900 	mov.w	r9, #0
 800ce9a:	9700      	str	r7, [sp, #0]
 800ce9c:	4633      	mov	r3, r6
 800ce9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 fa82 	bl	800d3ac <_printf_common>
 800cea8:	3001      	adds	r0, #1
 800ceaa:	f040 8090 	bne.w	800cfce <_printf_float+0x1de>
 800ceae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceb2:	b00d      	add	sp, #52	; 0x34
 800ceb4:	ecbd 8b02 	vpop	{d8}
 800ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebc:	4642      	mov	r2, r8
 800cebe:	464b      	mov	r3, r9
 800cec0:	4640      	mov	r0, r8
 800cec2:	4649      	mov	r1, r9
 800cec4:	f7f3 fe52 	bl	8000b6c <__aeabi_dcmpun>
 800cec8:	b140      	cbz	r0, 800cedc <_printf_float+0xec>
 800ceca:	464b      	mov	r3, r9
 800cecc:	2b00      	cmp	r3, #0
 800cece:	bfbc      	itt	lt
 800ced0:	232d      	movlt	r3, #45	; 0x2d
 800ced2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ced6:	4a7f      	ldr	r2, [pc, #508]	; (800d0d4 <_printf_float+0x2e4>)
 800ced8:	4b7f      	ldr	r3, [pc, #508]	; (800d0d8 <_printf_float+0x2e8>)
 800ceda:	e7d1      	b.n	800ce80 <_printf_float+0x90>
 800cedc:	6863      	ldr	r3, [r4, #4]
 800cede:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cee2:	9206      	str	r2, [sp, #24]
 800cee4:	1c5a      	adds	r2, r3, #1
 800cee6:	d13f      	bne.n	800cf68 <_printf_float+0x178>
 800cee8:	2306      	movs	r3, #6
 800ceea:	6063      	str	r3, [r4, #4]
 800ceec:	9b05      	ldr	r3, [sp, #20]
 800ceee:	6861      	ldr	r1, [r4, #4]
 800cef0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cef4:	2300      	movs	r3, #0
 800cef6:	9303      	str	r3, [sp, #12]
 800cef8:	ab0a      	add	r3, sp, #40	; 0x28
 800cefa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cefe:	ab09      	add	r3, sp, #36	; 0x24
 800cf00:	ec49 8b10 	vmov	d0, r8, r9
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	6022      	str	r2, [r4, #0]
 800cf08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f7ff fecf 	bl	800ccb0 <__cvt>
 800cf12:	9b06      	ldr	r3, [sp, #24]
 800cf14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf16:	2b47      	cmp	r3, #71	; 0x47
 800cf18:	4680      	mov	r8, r0
 800cf1a:	d108      	bne.n	800cf2e <_printf_float+0x13e>
 800cf1c:	1cc8      	adds	r0, r1, #3
 800cf1e:	db02      	blt.n	800cf26 <_printf_float+0x136>
 800cf20:	6863      	ldr	r3, [r4, #4]
 800cf22:	4299      	cmp	r1, r3
 800cf24:	dd41      	ble.n	800cfaa <_printf_float+0x1ba>
 800cf26:	f1ab 0302 	sub.w	r3, fp, #2
 800cf2a:	fa5f fb83 	uxtb.w	fp, r3
 800cf2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf32:	d820      	bhi.n	800cf76 <_printf_float+0x186>
 800cf34:	3901      	subs	r1, #1
 800cf36:	465a      	mov	r2, fp
 800cf38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf3c:	9109      	str	r1, [sp, #36]	; 0x24
 800cf3e:	f7ff ff19 	bl	800cd74 <__exponent>
 800cf42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf44:	1813      	adds	r3, r2, r0
 800cf46:	2a01      	cmp	r2, #1
 800cf48:	4681      	mov	r9, r0
 800cf4a:	6123      	str	r3, [r4, #16]
 800cf4c:	dc02      	bgt.n	800cf54 <_printf_float+0x164>
 800cf4e:	6822      	ldr	r2, [r4, #0]
 800cf50:	07d2      	lsls	r2, r2, #31
 800cf52:	d501      	bpl.n	800cf58 <_printf_float+0x168>
 800cf54:	3301      	adds	r3, #1
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d09c      	beq.n	800ce9a <_printf_float+0xaa>
 800cf60:	232d      	movs	r3, #45	; 0x2d
 800cf62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf66:	e798      	b.n	800ce9a <_printf_float+0xaa>
 800cf68:	9a06      	ldr	r2, [sp, #24]
 800cf6a:	2a47      	cmp	r2, #71	; 0x47
 800cf6c:	d1be      	bne.n	800ceec <_printf_float+0xfc>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1bc      	bne.n	800ceec <_printf_float+0xfc>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e7b9      	b.n	800ceea <_printf_float+0xfa>
 800cf76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf7a:	d118      	bne.n	800cfae <_printf_float+0x1be>
 800cf7c:	2900      	cmp	r1, #0
 800cf7e:	6863      	ldr	r3, [r4, #4]
 800cf80:	dd0b      	ble.n	800cf9a <_printf_float+0x1aa>
 800cf82:	6121      	str	r1, [r4, #16]
 800cf84:	b913      	cbnz	r3, 800cf8c <_printf_float+0x19c>
 800cf86:	6822      	ldr	r2, [r4, #0]
 800cf88:	07d0      	lsls	r0, r2, #31
 800cf8a:	d502      	bpl.n	800cf92 <_printf_float+0x1a2>
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	440b      	add	r3, r1
 800cf90:	6123      	str	r3, [r4, #16]
 800cf92:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf94:	f04f 0900 	mov.w	r9, #0
 800cf98:	e7de      	b.n	800cf58 <_printf_float+0x168>
 800cf9a:	b913      	cbnz	r3, 800cfa2 <_printf_float+0x1b2>
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	07d2      	lsls	r2, r2, #31
 800cfa0:	d501      	bpl.n	800cfa6 <_printf_float+0x1b6>
 800cfa2:	3302      	adds	r3, #2
 800cfa4:	e7f4      	b.n	800cf90 <_printf_float+0x1a0>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e7f2      	b.n	800cf90 <_printf_float+0x1a0>
 800cfaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfb0:	4299      	cmp	r1, r3
 800cfb2:	db05      	blt.n	800cfc0 <_printf_float+0x1d0>
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	6121      	str	r1, [r4, #16]
 800cfb8:	07d8      	lsls	r0, r3, #31
 800cfba:	d5ea      	bpl.n	800cf92 <_printf_float+0x1a2>
 800cfbc:	1c4b      	adds	r3, r1, #1
 800cfbe:	e7e7      	b.n	800cf90 <_printf_float+0x1a0>
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	bfd4      	ite	le
 800cfc4:	f1c1 0202 	rsble	r2, r1, #2
 800cfc8:	2201      	movgt	r2, #1
 800cfca:	4413      	add	r3, r2
 800cfcc:	e7e0      	b.n	800cf90 <_printf_float+0x1a0>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	055a      	lsls	r2, r3, #21
 800cfd2:	d407      	bmi.n	800cfe4 <_printf_float+0x1f4>
 800cfd4:	6923      	ldr	r3, [r4, #16]
 800cfd6:	4642      	mov	r2, r8
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	d12c      	bne.n	800d03c <_printf_float+0x24c>
 800cfe2:	e764      	b.n	800ceae <_printf_float+0xbe>
 800cfe4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cfe8:	f240 80e0 	bls.w	800d1ac <_printf_float+0x3bc>
 800cfec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cff0:	2200      	movs	r2, #0
 800cff2:	2300      	movs	r3, #0
 800cff4:	f7f3 fd88 	bl	8000b08 <__aeabi_dcmpeq>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d034      	beq.n	800d066 <_printf_float+0x276>
 800cffc:	4a37      	ldr	r2, [pc, #220]	; (800d0dc <_printf_float+0x2ec>)
 800cffe:	2301      	movs	r3, #1
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	47b8      	blx	r7
 800d006:	3001      	adds	r0, #1
 800d008:	f43f af51 	beq.w	800ceae <_printf_float+0xbe>
 800d00c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d010:	429a      	cmp	r2, r3
 800d012:	db02      	blt.n	800d01a <_printf_float+0x22a>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	07d8      	lsls	r0, r3, #31
 800d018:	d510      	bpl.n	800d03c <_printf_float+0x24c>
 800d01a:	ee18 3a10 	vmov	r3, s16
 800d01e:	4652      	mov	r2, sl
 800d020:	4631      	mov	r1, r6
 800d022:	4628      	mov	r0, r5
 800d024:	47b8      	blx	r7
 800d026:	3001      	adds	r0, #1
 800d028:	f43f af41 	beq.w	800ceae <_printf_float+0xbe>
 800d02c:	f04f 0800 	mov.w	r8, #0
 800d030:	f104 091a 	add.w	r9, r4, #26
 800d034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d036:	3b01      	subs	r3, #1
 800d038:	4543      	cmp	r3, r8
 800d03a:	dc09      	bgt.n	800d050 <_printf_float+0x260>
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	079b      	lsls	r3, r3, #30
 800d040:	f100 8107 	bmi.w	800d252 <_printf_float+0x462>
 800d044:	68e0      	ldr	r0, [r4, #12]
 800d046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d048:	4298      	cmp	r0, r3
 800d04a:	bfb8      	it	lt
 800d04c:	4618      	movlt	r0, r3
 800d04e:	e730      	b.n	800ceb2 <_printf_float+0xc2>
 800d050:	2301      	movs	r3, #1
 800d052:	464a      	mov	r2, r9
 800d054:	4631      	mov	r1, r6
 800d056:	4628      	mov	r0, r5
 800d058:	47b8      	blx	r7
 800d05a:	3001      	adds	r0, #1
 800d05c:	f43f af27 	beq.w	800ceae <_printf_float+0xbe>
 800d060:	f108 0801 	add.w	r8, r8, #1
 800d064:	e7e6      	b.n	800d034 <_printf_float+0x244>
 800d066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d068:	2b00      	cmp	r3, #0
 800d06a:	dc39      	bgt.n	800d0e0 <_printf_float+0x2f0>
 800d06c:	4a1b      	ldr	r2, [pc, #108]	; (800d0dc <_printf_float+0x2ec>)
 800d06e:	2301      	movs	r3, #1
 800d070:	4631      	mov	r1, r6
 800d072:	4628      	mov	r0, r5
 800d074:	47b8      	blx	r7
 800d076:	3001      	adds	r0, #1
 800d078:	f43f af19 	beq.w	800ceae <_printf_float+0xbe>
 800d07c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d080:	4313      	orrs	r3, r2
 800d082:	d102      	bne.n	800d08a <_printf_float+0x29a>
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	07d9      	lsls	r1, r3, #31
 800d088:	d5d8      	bpl.n	800d03c <_printf_float+0x24c>
 800d08a:	ee18 3a10 	vmov	r3, s16
 800d08e:	4652      	mov	r2, sl
 800d090:	4631      	mov	r1, r6
 800d092:	4628      	mov	r0, r5
 800d094:	47b8      	blx	r7
 800d096:	3001      	adds	r0, #1
 800d098:	f43f af09 	beq.w	800ceae <_printf_float+0xbe>
 800d09c:	f04f 0900 	mov.w	r9, #0
 800d0a0:	f104 0a1a 	add.w	sl, r4, #26
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	425b      	negs	r3, r3
 800d0a8:	454b      	cmp	r3, r9
 800d0aa:	dc01      	bgt.n	800d0b0 <_printf_float+0x2c0>
 800d0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ae:	e792      	b.n	800cfd6 <_printf_float+0x1e6>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	4631      	mov	r1, r6
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	47b8      	blx	r7
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	f43f aef7 	beq.w	800ceae <_printf_float+0xbe>
 800d0c0:	f109 0901 	add.w	r9, r9, #1
 800d0c4:	e7ee      	b.n	800d0a4 <_printf_float+0x2b4>
 800d0c6:	bf00      	nop
 800d0c8:	7fefffff 	.word	0x7fefffff
 800d0cc:	080154d0 	.word	0x080154d0
 800d0d0:	080154d4 	.word	0x080154d4
 800d0d4:	080154d8 	.word	0x080154d8
 800d0d8:	080154dc 	.word	0x080154dc
 800d0dc:	080156f3 	.word	0x080156f3
 800d0e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	bfa8      	it	ge
 800d0e8:	461a      	movge	r2, r3
 800d0ea:	2a00      	cmp	r2, #0
 800d0ec:	4691      	mov	r9, r2
 800d0ee:	dc37      	bgt.n	800d160 <_printf_float+0x370>
 800d0f0:	f04f 0b00 	mov.w	fp, #0
 800d0f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0f8:	f104 021a 	add.w	r2, r4, #26
 800d0fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0fe:	9305      	str	r3, [sp, #20]
 800d100:	eba3 0309 	sub.w	r3, r3, r9
 800d104:	455b      	cmp	r3, fp
 800d106:	dc33      	bgt.n	800d170 <_printf_float+0x380>
 800d108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d10c:	429a      	cmp	r2, r3
 800d10e:	db3b      	blt.n	800d188 <_printf_float+0x398>
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	07da      	lsls	r2, r3, #31
 800d114:	d438      	bmi.n	800d188 <_printf_float+0x398>
 800d116:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d11a:	eba2 0903 	sub.w	r9, r2, r3
 800d11e:	9b05      	ldr	r3, [sp, #20]
 800d120:	1ad2      	subs	r2, r2, r3
 800d122:	4591      	cmp	r9, r2
 800d124:	bfa8      	it	ge
 800d126:	4691      	movge	r9, r2
 800d128:	f1b9 0f00 	cmp.w	r9, #0
 800d12c:	dc35      	bgt.n	800d19a <_printf_float+0x3aa>
 800d12e:	f04f 0800 	mov.w	r8, #0
 800d132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d136:	f104 0a1a 	add.w	sl, r4, #26
 800d13a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d13e:	1a9b      	subs	r3, r3, r2
 800d140:	eba3 0309 	sub.w	r3, r3, r9
 800d144:	4543      	cmp	r3, r8
 800d146:	f77f af79 	ble.w	800d03c <_printf_float+0x24c>
 800d14a:	2301      	movs	r3, #1
 800d14c:	4652      	mov	r2, sl
 800d14e:	4631      	mov	r1, r6
 800d150:	4628      	mov	r0, r5
 800d152:	47b8      	blx	r7
 800d154:	3001      	adds	r0, #1
 800d156:	f43f aeaa 	beq.w	800ceae <_printf_float+0xbe>
 800d15a:	f108 0801 	add.w	r8, r8, #1
 800d15e:	e7ec      	b.n	800d13a <_printf_float+0x34a>
 800d160:	4613      	mov	r3, r2
 800d162:	4631      	mov	r1, r6
 800d164:	4642      	mov	r2, r8
 800d166:	4628      	mov	r0, r5
 800d168:	47b8      	blx	r7
 800d16a:	3001      	adds	r0, #1
 800d16c:	d1c0      	bne.n	800d0f0 <_printf_float+0x300>
 800d16e:	e69e      	b.n	800ceae <_printf_float+0xbe>
 800d170:	2301      	movs	r3, #1
 800d172:	4631      	mov	r1, r6
 800d174:	4628      	mov	r0, r5
 800d176:	9205      	str	r2, [sp, #20]
 800d178:	47b8      	blx	r7
 800d17a:	3001      	adds	r0, #1
 800d17c:	f43f ae97 	beq.w	800ceae <_printf_float+0xbe>
 800d180:	9a05      	ldr	r2, [sp, #20]
 800d182:	f10b 0b01 	add.w	fp, fp, #1
 800d186:	e7b9      	b.n	800d0fc <_printf_float+0x30c>
 800d188:	ee18 3a10 	vmov	r3, s16
 800d18c:	4652      	mov	r2, sl
 800d18e:	4631      	mov	r1, r6
 800d190:	4628      	mov	r0, r5
 800d192:	47b8      	blx	r7
 800d194:	3001      	adds	r0, #1
 800d196:	d1be      	bne.n	800d116 <_printf_float+0x326>
 800d198:	e689      	b.n	800ceae <_printf_float+0xbe>
 800d19a:	9a05      	ldr	r2, [sp, #20]
 800d19c:	464b      	mov	r3, r9
 800d19e:	4442      	add	r2, r8
 800d1a0:	4631      	mov	r1, r6
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	47b8      	blx	r7
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	d1c1      	bne.n	800d12e <_printf_float+0x33e>
 800d1aa:	e680      	b.n	800ceae <_printf_float+0xbe>
 800d1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ae:	2a01      	cmp	r2, #1
 800d1b0:	dc01      	bgt.n	800d1b6 <_printf_float+0x3c6>
 800d1b2:	07db      	lsls	r3, r3, #31
 800d1b4:	d53a      	bpl.n	800d22c <_printf_float+0x43c>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	4642      	mov	r2, r8
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	4628      	mov	r0, r5
 800d1be:	47b8      	blx	r7
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	f43f ae74 	beq.w	800ceae <_printf_float+0xbe>
 800d1c6:	ee18 3a10 	vmov	r3, s16
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	47b8      	blx	r7
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	f43f ae6b 	beq.w	800ceae <_printf_float+0xbe>
 800d1d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d1e4:	f7f3 fc90 	bl	8000b08 <__aeabi_dcmpeq>
 800d1e8:	b9d8      	cbnz	r0, 800d222 <_printf_float+0x432>
 800d1ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d1ee:	f108 0201 	add.w	r2, r8, #1
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b8      	blx	r7
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d10e      	bne.n	800d21a <_printf_float+0x42a>
 800d1fc:	e657      	b.n	800ceae <_printf_float+0xbe>
 800d1fe:	2301      	movs	r3, #1
 800d200:	4652      	mov	r2, sl
 800d202:	4631      	mov	r1, r6
 800d204:	4628      	mov	r0, r5
 800d206:	47b8      	blx	r7
 800d208:	3001      	adds	r0, #1
 800d20a:	f43f ae50 	beq.w	800ceae <_printf_float+0xbe>
 800d20e:	f108 0801 	add.w	r8, r8, #1
 800d212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d214:	3b01      	subs	r3, #1
 800d216:	4543      	cmp	r3, r8
 800d218:	dcf1      	bgt.n	800d1fe <_printf_float+0x40e>
 800d21a:	464b      	mov	r3, r9
 800d21c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d220:	e6da      	b.n	800cfd8 <_printf_float+0x1e8>
 800d222:	f04f 0800 	mov.w	r8, #0
 800d226:	f104 0a1a 	add.w	sl, r4, #26
 800d22a:	e7f2      	b.n	800d212 <_printf_float+0x422>
 800d22c:	2301      	movs	r3, #1
 800d22e:	4642      	mov	r2, r8
 800d230:	e7df      	b.n	800d1f2 <_printf_float+0x402>
 800d232:	2301      	movs	r3, #1
 800d234:	464a      	mov	r2, r9
 800d236:	4631      	mov	r1, r6
 800d238:	4628      	mov	r0, r5
 800d23a:	47b8      	blx	r7
 800d23c:	3001      	adds	r0, #1
 800d23e:	f43f ae36 	beq.w	800ceae <_printf_float+0xbe>
 800d242:	f108 0801 	add.w	r8, r8, #1
 800d246:	68e3      	ldr	r3, [r4, #12]
 800d248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d24a:	1a5b      	subs	r3, r3, r1
 800d24c:	4543      	cmp	r3, r8
 800d24e:	dcf0      	bgt.n	800d232 <_printf_float+0x442>
 800d250:	e6f8      	b.n	800d044 <_printf_float+0x254>
 800d252:	f04f 0800 	mov.w	r8, #0
 800d256:	f104 0919 	add.w	r9, r4, #25
 800d25a:	e7f4      	b.n	800d246 <_printf_float+0x456>

0800d25c <malloc>:
 800d25c:	4b02      	ldr	r3, [pc, #8]	; (800d268 <malloc+0xc>)
 800d25e:	4601      	mov	r1, r0
 800d260:	6818      	ldr	r0, [r3, #0]
 800d262:	f000 b823 	b.w	800d2ac <_malloc_r>
 800d266:	bf00      	nop
 800d268:	2000009c 	.word	0x2000009c

0800d26c <sbrk_aligned>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4e0e      	ldr	r6, [pc, #56]	; (800d2a8 <sbrk_aligned+0x3c>)
 800d270:	460c      	mov	r4, r1
 800d272:	6831      	ldr	r1, [r6, #0]
 800d274:	4605      	mov	r5, r0
 800d276:	b911      	cbnz	r1, 800d27e <sbrk_aligned+0x12>
 800d278:	f000 fccc 	bl	800dc14 <_sbrk_r>
 800d27c:	6030      	str	r0, [r6, #0]
 800d27e:	4621      	mov	r1, r4
 800d280:	4628      	mov	r0, r5
 800d282:	f000 fcc7 	bl	800dc14 <_sbrk_r>
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	d00a      	beq.n	800d2a0 <sbrk_aligned+0x34>
 800d28a:	1cc4      	adds	r4, r0, #3
 800d28c:	f024 0403 	bic.w	r4, r4, #3
 800d290:	42a0      	cmp	r0, r4
 800d292:	d007      	beq.n	800d2a4 <sbrk_aligned+0x38>
 800d294:	1a21      	subs	r1, r4, r0
 800d296:	4628      	mov	r0, r5
 800d298:	f000 fcbc 	bl	800dc14 <_sbrk_r>
 800d29c:	3001      	adds	r0, #1
 800d29e:	d101      	bne.n	800d2a4 <sbrk_aligned+0x38>
 800d2a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	20009508 	.word	0x20009508

0800d2ac <_malloc_r>:
 800d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	1ccd      	adds	r5, r1, #3
 800d2b2:	f025 0503 	bic.w	r5, r5, #3
 800d2b6:	3508      	adds	r5, #8
 800d2b8:	2d0c      	cmp	r5, #12
 800d2ba:	bf38      	it	cc
 800d2bc:	250c      	movcc	r5, #12
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	db01      	blt.n	800d2c8 <_malloc_r+0x1c>
 800d2c4:	42a9      	cmp	r1, r5
 800d2c6:	d905      	bls.n	800d2d4 <_malloc_r+0x28>
 800d2c8:	230c      	movs	r3, #12
 800d2ca:	603b      	str	r3, [r7, #0]
 800d2cc:	2600      	movs	r6, #0
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d3a8 <_malloc_r+0xfc>
 800d2d8:	f000 fa2c 	bl	800d734 <__malloc_lock>
 800d2dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e0:	461c      	mov	r4, r3
 800d2e2:	bb5c      	cbnz	r4, 800d33c <_malloc_r+0x90>
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	f7ff ffc0 	bl	800d26c <sbrk_aligned>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	d155      	bne.n	800d39e <_malloc_r+0xf2>
 800d2f2:	f8d8 4000 	ldr.w	r4, [r8]
 800d2f6:	4626      	mov	r6, r4
 800d2f8:	2e00      	cmp	r6, #0
 800d2fa:	d145      	bne.n	800d388 <_malloc_r+0xdc>
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	d048      	beq.n	800d392 <_malloc_r+0xe6>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	4631      	mov	r1, r6
 800d304:	4638      	mov	r0, r7
 800d306:	eb04 0903 	add.w	r9, r4, r3
 800d30a:	f000 fc83 	bl	800dc14 <_sbrk_r>
 800d30e:	4581      	cmp	r9, r0
 800d310:	d13f      	bne.n	800d392 <_malloc_r+0xe6>
 800d312:	6821      	ldr	r1, [r4, #0]
 800d314:	1a6d      	subs	r5, r5, r1
 800d316:	4629      	mov	r1, r5
 800d318:	4638      	mov	r0, r7
 800d31a:	f7ff ffa7 	bl	800d26c <sbrk_aligned>
 800d31e:	3001      	adds	r0, #1
 800d320:	d037      	beq.n	800d392 <_malloc_r+0xe6>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	442b      	add	r3, r5
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	f8d8 3000 	ldr.w	r3, [r8]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d038      	beq.n	800d3a2 <_malloc_r+0xf6>
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	42a2      	cmp	r2, r4
 800d334:	d12b      	bne.n	800d38e <_malloc_r+0xe2>
 800d336:	2200      	movs	r2, #0
 800d338:	605a      	str	r2, [r3, #4]
 800d33a:	e00f      	b.n	800d35c <_malloc_r+0xb0>
 800d33c:	6822      	ldr	r2, [r4, #0]
 800d33e:	1b52      	subs	r2, r2, r5
 800d340:	d41f      	bmi.n	800d382 <_malloc_r+0xd6>
 800d342:	2a0b      	cmp	r2, #11
 800d344:	d917      	bls.n	800d376 <_malloc_r+0xca>
 800d346:	1961      	adds	r1, r4, r5
 800d348:	42a3      	cmp	r3, r4
 800d34a:	6025      	str	r5, [r4, #0]
 800d34c:	bf18      	it	ne
 800d34e:	6059      	strne	r1, [r3, #4]
 800d350:	6863      	ldr	r3, [r4, #4]
 800d352:	bf08      	it	eq
 800d354:	f8c8 1000 	streq.w	r1, [r8]
 800d358:	5162      	str	r2, [r4, r5]
 800d35a:	604b      	str	r3, [r1, #4]
 800d35c:	4638      	mov	r0, r7
 800d35e:	f104 060b 	add.w	r6, r4, #11
 800d362:	f000 f9ed 	bl	800d740 <__malloc_unlock>
 800d366:	f026 0607 	bic.w	r6, r6, #7
 800d36a:	1d23      	adds	r3, r4, #4
 800d36c:	1af2      	subs	r2, r6, r3
 800d36e:	d0ae      	beq.n	800d2ce <_malloc_r+0x22>
 800d370:	1b9b      	subs	r3, r3, r6
 800d372:	50a3      	str	r3, [r4, r2]
 800d374:	e7ab      	b.n	800d2ce <_malloc_r+0x22>
 800d376:	42a3      	cmp	r3, r4
 800d378:	6862      	ldr	r2, [r4, #4]
 800d37a:	d1dd      	bne.n	800d338 <_malloc_r+0x8c>
 800d37c:	f8c8 2000 	str.w	r2, [r8]
 800d380:	e7ec      	b.n	800d35c <_malloc_r+0xb0>
 800d382:	4623      	mov	r3, r4
 800d384:	6864      	ldr	r4, [r4, #4]
 800d386:	e7ac      	b.n	800d2e2 <_malloc_r+0x36>
 800d388:	4634      	mov	r4, r6
 800d38a:	6876      	ldr	r6, [r6, #4]
 800d38c:	e7b4      	b.n	800d2f8 <_malloc_r+0x4c>
 800d38e:	4613      	mov	r3, r2
 800d390:	e7cc      	b.n	800d32c <_malloc_r+0x80>
 800d392:	230c      	movs	r3, #12
 800d394:	603b      	str	r3, [r7, #0]
 800d396:	4638      	mov	r0, r7
 800d398:	f000 f9d2 	bl	800d740 <__malloc_unlock>
 800d39c:	e797      	b.n	800d2ce <_malloc_r+0x22>
 800d39e:	6025      	str	r5, [r4, #0]
 800d3a0:	e7dc      	b.n	800d35c <_malloc_r+0xb0>
 800d3a2:	605b      	str	r3, [r3, #4]
 800d3a4:	deff      	udf	#255	; 0xff
 800d3a6:	bf00      	nop
 800d3a8:	20009504 	.word	0x20009504

0800d3ac <_printf_common>:
 800d3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	4699      	mov	r9, r3
 800d3b4:	688a      	ldr	r2, [r1, #8]
 800d3b6:	690b      	ldr	r3, [r1, #16]
 800d3b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	bfb8      	it	lt
 800d3c0:	4613      	movlt	r3, r2
 800d3c2:	6033      	str	r3, [r6, #0]
 800d3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3c8:	4607      	mov	r7, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	b10a      	cbz	r2, 800d3d2 <_printf_common+0x26>
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	6033      	str	r3, [r6, #0]
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	0699      	lsls	r1, r3, #26
 800d3d6:	bf42      	ittt	mi
 800d3d8:	6833      	ldrmi	r3, [r6, #0]
 800d3da:	3302      	addmi	r3, #2
 800d3dc:	6033      	strmi	r3, [r6, #0]
 800d3de:	6825      	ldr	r5, [r4, #0]
 800d3e0:	f015 0506 	ands.w	r5, r5, #6
 800d3e4:	d106      	bne.n	800d3f4 <_printf_common+0x48>
 800d3e6:	f104 0a19 	add.w	sl, r4, #25
 800d3ea:	68e3      	ldr	r3, [r4, #12]
 800d3ec:	6832      	ldr	r2, [r6, #0]
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	42ab      	cmp	r3, r5
 800d3f2:	dc26      	bgt.n	800d442 <_printf_common+0x96>
 800d3f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3f8:	1e13      	subs	r3, r2, #0
 800d3fa:	6822      	ldr	r2, [r4, #0]
 800d3fc:	bf18      	it	ne
 800d3fe:	2301      	movne	r3, #1
 800d400:	0692      	lsls	r2, r2, #26
 800d402:	d42b      	bmi.n	800d45c <_printf_common+0xb0>
 800d404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d408:	4649      	mov	r1, r9
 800d40a:	4638      	mov	r0, r7
 800d40c:	47c0      	blx	r8
 800d40e:	3001      	adds	r0, #1
 800d410:	d01e      	beq.n	800d450 <_printf_common+0xa4>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	f003 0306 	and.w	r3, r3, #6
 800d41a:	2b04      	cmp	r3, #4
 800d41c:	bf02      	ittt	eq
 800d41e:	68e5      	ldreq	r5, [r4, #12]
 800d420:	6833      	ldreq	r3, [r6, #0]
 800d422:	1aed      	subeq	r5, r5, r3
 800d424:	68a3      	ldr	r3, [r4, #8]
 800d426:	bf0c      	ite	eq
 800d428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d42c:	2500      	movne	r5, #0
 800d42e:	4293      	cmp	r3, r2
 800d430:	bfc4      	itt	gt
 800d432:	1a9b      	subgt	r3, r3, r2
 800d434:	18ed      	addgt	r5, r5, r3
 800d436:	2600      	movs	r6, #0
 800d438:	341a      	adds	r4, #26
 800d43a:	42b5      	cmp	r5, r6
 800d43c:	d11a      	bne.n	800d474 <_printf_common+0xc8>
 800d43e:	2000      	movs	r0, #0
 800d440:	e008      	b.n	800d454 <_printf_common+0xa8>
 800d442:	2301      	movs	r3, #1
 800d444:	4652      	mov	r2, sl
 800d446:	4649      	mov	r1, r9
 800d448:	4638      	mov	r0, r7
 800d44a:	47c0      	blx	r8
 800d44c:	3001      	adds	r0, #1
 800d44e:	d103      	bne.n	800d458 <_printf_common+0xac>
 800d450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d458:	3501      	adds	r5, #1
 800d45a:	e7c6      	b.n	800d3ea <_printf_common+0x3e>
 800d45c:	18e1      	adds	r1, r4, r3
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	2030      	movs	r0, #48	; 0x30
 800d462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d466:	4422      	add	r2, r4
 800d468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d46c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d470:	3302      	adds	r3, #2
 800d472:	e7c7      	b.n	800d404 <_printf_common+0x58>
 800d474:	2301      	movs	r3, #1
 800d476:	4622      	mov	r2, r4
 800d478:	4649      	mov	r1, r9
 800d47a:	4638      	mov	r0, r7
 800d47c:	47c0      	blx	r8
 800d47e:	3001      	adds	r0, #1
 800d480:	d0e6      	beq.n	800d450 <_printf_common+0xa4>
 800d482:	3601      	adds	r6, #1
 800d484:	e7d9      	b.n	800d43a <_printf_common+0x8e>
	...

0800d488 <_printf_i>:
 800d488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	7e0f      	ldrb	r7, [r1, #24]
 800d48e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d490:	2f78      	cmp	r7, #120	; 0x78
 800d492:	4691      	mov	r9, r2
 800d494:	4680      	mov	r8, r0
 800d496:	460c      	mov	r4, r1
 800d498:	469a      	mov	sl, r3
 800d49a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d49e:	d807      	bhi.n	800d4b0 <_printf_i+0x28>
 800d4a0:	2f62      	cmp	r7, #98	; 0x62
 800d4a2:	d80a      	bhi.n	800d4ba <_printf_i+0x32>
 800d4a4:	2f00      	cmp	r7, #0
 800d4a6:	f000 80d4 	beq.w	800d652 <_printf_i+0x1ca>
 800d4aa:	2f58      	cmp	r7, #88	; 0x58
 800d4ac:	f000 80c0 	beq.w	800d630 <_printf_i+0x1a8>
 800d4b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4b8:	e03a      	b.n	800d530 <_printf_i+0xa8>
 800d4ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4be:	2b15      	cmp	r3, #21
 800d4c0:	d8f6      	bhi.n	800d4b0 <_printf_i+0x28>
 800d4c2:	a101      	add	r1, pc, #4	; (adr r1, 800d4c8 <_printf_i+0x40>)
 800d4c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4c8:	0800d521 	.word	0x0800d521
 800d4cc:	0800d535 	.word	0x0800d535
 800d4d0:	0800d4b1 	.word	0x0800d4b1
 800d4d4:	0800d4b1 	.word	0x0800d4b1
 800d4d8:	0800d4b1 	.word	0x0800d4b1
 800d4dc:	0800d4b1 	.word	0x0800d4b1
 800d4e0:	0800d535 	.word	0x0800d535
 800d4e4:	0800d4b1 	.word	0x0800d4b1
 800d4e8:	0800d4b1 	.word	0x0800d4b1
 800d4ec:	0800d4b1 	.word	0x0800d4b1
 800d4f0:	0800d4b1 	.word	0x0800d4b1
 800d4f4:	0800d639 	.word	0x0800d639
 800d4f8:	0800d561 	.word	0x0800d561
 800d4fc:	0800d5f3 	.word	0x0800d5f3
 800d500:	0800d4b1 	.word	0x0800d4b1
 800d504:	0800d4b1 	.word	0x0800d4b1
 800d508:	0800d65b 	.word	0x0800d65b
 800d50c:	0800d4b1 	.word	0x0800d4b1
 800d510:	0800d561 	.word	0x0800d561
 800d514:	0800d4b1 	.word	0x0800d4b1
 800d518:	0800d4b1 	.word	0x0800d4b1
 800d51c:	0800d5fb 	.word	0x0800d5fb
 800d520:	682b      	ldr	r3, [r5, #0]
 800d522:	1d1a      	adds	r2, r3, #4
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	602a      	str	r2, [r5, #0]
 800d528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d52c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d530:	2301      	movs	r3, #1
 800d532:	e09f      	b.n	800d674 <_printf_i+0x1ec>
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	0607      	lsls	r7, r0, #24
 800d53a:	f103 0104 	add.w	r1, r3, #4
 800d53e:	6029      	str	r1, [r5, #0]
 800d540:	d501      	bpl.n	800d546 <_printf_i+0xbe>
 800d542:	681e      	ldr	r6, [r3, #0]
 800d544:	e003      	b.n	800d54e <_printf_i+0xc6>
 800d546:	0646      	lsls	r6, r0, #25
 800d548:	d5fb      	bpl.n	800d542 <_printf_i+0xba>
 800d54a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d54e:	2e00      	cmp	r6, #0
 800d550:	da03      	bge.n	800d55a <_printf_i+0xd2>
 800d552:	232d      	movs	r3, #45	; 0x2d
 800d554:	4276      	negs	r6, r6
 800d556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d55a:	485a      	ldr	r0, [pc, #360]	; (800d6c4 <_printf_i+0x23c>)
 800d55c:	230a      	movs	r3, #10
 800d55e:	e012      	b.n	800d586 <_printf_i+0xfe>
 800d560:	682b      	ldr	r3, [r5, #0]
 800d562:	6820      	ldr	r0, [r4, #0]
 800d564:	1d19      	adds	r1, r3, #4
 800d566:	6029      	str	r1, [r5, #0]
 800d568:	0605      	lsls	r5, r0, #24
 800d56a:	d501      	bpl.n	800d570 <_printf_i+0xe8>
 800d56c:	681e      	ldr	r6, [r3, #0]
 800d56e:	e002      	b.n	800d576 <_printf_i+0xee>
 800d570:	0641      	lsls	r1, r0, #25
 800d572:	d5fb      	bpl.n	800d56c <_printf_i+0xe4>
 800d574:	881e      	ldrh	r6, [r3, #0]
 800d576:	4853      	ldr	r0, [pc, #332]	; (800d6c4 <_printf_i+0x23c>)
 800d578:	2f6f      	cmp	r7, #111	; 0x6f
 800d57a:	bf0c      	ite	eq
 800d57c:	2308      	moveq	r3, #8
 800d57e:	230a      	movne	r3, #10
 800d580:	2100      	movs	r1, #0
 800d582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d586:	6865      	ldr	r5, [r4, #4]
 800d588:	60a5      	str	r5, [r4, #8]
 800d58a:	2d00      	cmp	r5, #0
 800d58c:	bfa2      	ittt	ge
 800d58e:	6821      	ldrge	r1, [r4, #0]
 800d590:	f021 0104 	bicge.w	r1, r1, #4
 800d594:	6021      	strge	r1, [r4, #0]
 800d596:	b90e      	cbnz	r6, 800d59c <_printf_i+0x114>
 800d598:	2d00      	cmp	r5, #0
 800d59a:	d04b      	beq.n	800d634 <_printf_i+0x1ac>
 800d59c:	4615      	mov	r5, r2
 800d59e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5a2:	fb03 6711 	mls	r7, r3, r1, r6
 800d5a6:	5dc7      	ldrb	r7, [r0, r7]
 800d5a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5ac:	4637      	mov	r7, r6
 800d5ae:	42bb      	cmp	r3, r7
 800d5b0:	460e      	mov	r6, r1
 800d5b2:	d9f4      	bls.n	800d59e <_printf_i+0x116>
 800d5b4:	2b08      	cmp	r3, #8
 800d5b6:	d10b      	bne.n	800d5d0 <_printf_i+0x148>
 800d5b8:	6823      	ldr	r3, [r4, #0]
 800d5ba:	07de      	lsls	r6, r3, #31
 800d5bc:	d508      	bpl.n	800d5d0 <_printf_i+0x148>
 800d5be:	6923      	ldr	r3, [r4, #16]
 800d5c0:	6861      	ldr	r1, [r4, #4]
 800d5c2:	4299      	cmp	r1, r3
 800d5c4:	bfde      	ittt	le
 800d5c6:	2330      	movle	r3, #48	; 0x30
 800d5c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d5d0:	1b52      	subs	r2, r2, r5
 800d5d2:	6122      	str	r2, [r4, #16]
 800d5d4:	f8cd a000 	str.w	sl, [sp]
 800d5d8:	464b      	mov	r3, r9
 800d5da:	aa03      	add	r2, sp, #12
 800d5dc:	4621      	mov	r1, r4
 800d5de:	4640      	mov	r0, r8
 800d5e0:	f7ff fee4 	bl	800d3ac <_printf_common>
 800d5e4:	3001      	adds	r0, #1
 800d5e6:	d14a      	bne.n	800d67e <_printf_i+0x1f6>
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ec:	b004      	add	sp, #16
 800d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f2:	6823      	ldr	r3, [r4, #0]
 800d5f4:	f043 0320 	orr.w	r3, r3, #32
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	4833      	ldr	r0, [pc, #204]	; (800d6c8 <_printf_i+0x240>)
 800d5fc:	2778      	movs	r7, #120	; 0x78
 800d5fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	6829      	ldr	r1, [r5, #0]
 800d606:	061f      	lsls	r7, r3, #24
 800d608:	f851 6b04 	ldr.w	r6, [r1], #4
 800d60c:	d402      	bmi.n	800d614 <_printf_i+0x18c>
 800d60e:	065f      	lsls	r7, r3, #25
 800d610:	bf48      	it	mi
 800d612:	b2b6      	uxthmi	r6, r6
 800d614:	07df      	lsls	r7, r3, #31
 800d616:	bf48      	it	mi
 800d618:	f043 0320 	orrmi.w	r3, r3, #32
 800d61c:	6029      	str	r1, [r5, #0]
 800d61e:	bf48      	it	mi
 800d620:	6023      	strmi	r3, [r4, #0]
 800d622:	b91e      	cbnz	r6, 800d62c <_printf_i+0x1a4>
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	f023 0320 	bic.w	r3, r3, #32
 800d62a:	6023      	str	r3, [r4, #0]
 800d62c:	2310      	movs	r3, #16
 800d62e:	e7a7      	b.n	800d580 <_printf_i+0xf8>
 800d630:	4824      	ldr	r0, [pc, #144]	; (800d6c4 <_printf_i+0x23c>)
 800d632:	e7e4      	b.n	800d5fe <_printf_i+0x176>
 800d634:	4615      	mov	r5, r2
 800d636:	e7bd      	b.n	800d5b4 <_printf_i+0x12c>
 800d638:	682b      	ldr	r3, [r5, #0]
 800d63a:	6826      	ldr	r6, [r4, #0]
 800d63c:	6961      	ldr	r1, [r4, #20]
 800d63e:	1d18      	adds	r0, r3, #4
 800d640:	6028      	str	r0, [r5, #0]
 800d642:	0635      	lsls	r5, r6, #24
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	d501      	bpl.n	800d64c <_printf_i+0x1c4>
 800d648:	6019      	str	r1, [r3, #0]
 800d64a:	e002      	b.n	800d652 <_printf_i+0x1ca>
 800d64c:	0670      	lsls	r0, r6, #25
 800d64e:	d5fb      	bpl.n	800d648 <_printf_i+0x1c0>
 800d650:	8019      	strh	r1, [r3, #0]
 800d652:	2300      	movs	r3, #0
 800d654:	6123      	str	r3, [r4, #16]
 800d656:	4615      	mov	r5, r2
 800d658:	e7bc      	b.n	800d5d4 <_printf_i+0x14c>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	1d1a      	adds	r2, r3, #4
 800d65e:	602a      	str	r2, [r5, #0]
 800d660:	681d      	ldr	r5, [r3, #0]
 800d662:	6862      	ldr	r2, [r4, #4]
 800d664:	2100      	movs	r1, #0
 800d666:	4628      	mov	r0, r5
 800d668:	f7f2 fdd2 	bl	8000210 <memchr>
 800d66c:	b108      	cbz	r0, 800d672 <_printf_i+0x1ea>
 800d66e:	1b40      	subs	r0, r0, r5
 800d670:	6060      	str	r0, [r4, #4]
 800d672:	6863      	ldr	r3, [r4, #4]
 800d674:	6123      	str	r3, [r4, #16]
 800d676:	2300      	movs	r3, #0
 800d678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d67c:	e7aa      	b.n	800d5d4 <_printf_i+0x14c>
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	462a      	mov	r2, r5
 800d682:	4649      	mov	r1, r9
 800d684:	4640      	mov	r0, r8
 800d686:	47d0      	blx	sl
 800d688:	3001      	adds	r0, #1
 800d68a:	d0ad      	beq.n	800d5e8 <_printf_i+0x160>
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	079b      	lsls	r3, r3, #30
 800d690:	d413      	bmi.n	800d6ba <_printf_i+0x232>
 800d692:	68e0      	ldr	r0, [r4, #12]
 800d694:	9b03      	ldr	r3, [sp, #12]
 800d696:	4298      	cmp	r0, r3
 800d698:	bfb8      	it	lt
 800d69a:	4618      	movlt	r0, r3
 800d69c:	e7a6      	b.n	800d5ec <_printf_i+0x164>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	4632      	mov	r2, r6
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	47d0      	blx	sl
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	d09d      	beq.n	800d5e8 <_printf_i+0x160>
 800d6ac:	3501      	adds	r5, #1
 800d6ae:	68e3      	ldr	r3, [r4, #12]
 800d6b0:	9903      	ldr	r1, [sp, #12]
 800d6b2:	1a5b      	subs	r3, r3, r1
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	dcf2      	bgt.n	800d69e <_printf_i+0x216>
 800d6b8:	e7eb      	b.n	800d692 <_printf_i+0x20a>
 800d6ba:	2500      	movs	r5, #0
 800d6bc:	f104 0619 	add.w	r6, r4, #25
 800d6c0:	e7f5      	b.n	800d6ae <_printf_i+0x226>
 800d6c2:	bf00      	nop
 800d6c4:	080154e0 	.word	0x080154e0
 800d6c8:	080154f1 	.word	0x080154f1

0800d6cc <sniprintf>:
 800d6cc:	b40c      	push	{r2, r3}
 800d6ce:	b530      	push	{r4, r5, lr}
 800d6d0:	4b17      	ldr	r3, [pc, #92]	; (800d730 <sniprintf+0x64>)
 800d6d2:	1e0c      	subs	r4, r1, #0
 800d6d4:	681d      	ldr	r5, [r3, #0]
 800d6d6:	b09d      	sub	sp, #116	; 0x74
 800d6d8:	da08      	bge.n	800d6ec <sniprintf+0x20>
 800d6da:	238b      	movs	r3, #139	; 0x8b
 800d6dc:	602b      	str	r3, [r5, #0]
 800d6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6e2:	b01d      	add	sp, #116	; 0x74
 800d6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6e8:	b002      	add	sp, #8
 800d6ea:	4770      	bx	lr
 800d6ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d6f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d6f4:	bf14      	ite	ne
 800d6f6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d6fa:	4623      	moveq	r3, r4
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	9307      	str	r3, [sp, #28]
 800d700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d704:	9002      	str	r0, [sp, #8]
 800d706:	9006      	str	r0, [sp, #24]
 800d708:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d70c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d70e:	ab21      	add	r3, sp, #132	; 0x84
 800d710:	a902      	add	r1, sp, #8
 800d712:	4628      	mov	r0, r5
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	f001 fa1b 	bl	800eb50 <_svfiprintf_r>
 800d71a:	1c43      	adds	r3, r0, #1
 800d71c:	bfbc      	itt	lt
 800d71e:	238b      	movlt	r3, #139	; 0x8b
 800d720:	602b      	strlt	r3, [r5, #0]
 800d722:	2c00      	cmp	r4, #0
 800d724:	d0dd      	beq.n	800d6e2 <sniprintf+0x16>
 800d726:	9b02      	ldr	r3, [sp, #8]
 800d728:	2200      	movs	r2, #0
 800d72a:	701a      	strb	r2, [r3, #0]
 800d72c:	e7d9      	b.n	800d6e2 <sniprintf+0x16>
 800d72e:	bf00      	nop
 800d730:	2000009c 	.word	0x2000009c

0800d734 <__malloc_lock>:
 800d734:	4801      	ldr	r0, [pc, #4]	; (800d73c <__malloc_lock+0x8>)
 800d736:	f000 baba 	b.w	800dcae <__retarget_lock_acquire_recursive>
 800d73a:	bf00      	nop
 800d73c:	2000964c 	.word	0x2000964c

0800d740 <__malloc_unlock>:
 800d740:	4801      	ldr	r0, [pc, #4]	; (800d748 <__malloc_unlock+0x8>)
 800d742:	f000 bab5 	b.w	800dcb0 <__retarget_lock_release_recursive>
 800d746:	bf00      	nop
 800d748:	2000964c 	.word	0x2000964c

0800d74c <siprintf>:
 800d74c:	b40e      	push	{r1, r2, r3}
 800d74e:	b500      	push	{lr}
 800d750:	b09c      	sub	sp, #112	; 0x70
 800d752:	ab1d      	add	r3, sp, #116	; 0x74
 800d754:	9002      	str	r0, [sp, #8]
 800d756:	9006      	str	r0, [sp, #24]
 800d758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d75c:	4809      	ldr	r0, [pc, #36]	; (800d784 <siprintf+0x38>)
 800d75e:	9107      	str	r1, [sp, #28]
 800d760:	9104      	str	r1, [sp, #16]
 800d762:	4909      	ldr	r1, [pc, #36]	; (800d788 <siprintf+0x3c>)
 800d764:	f853 2b04 	ldr.w	r2, [r3], #4
 800d768:	9105      	str	r1, [sp, #20]
 800d76a:	6800      	ldr	r0, [r0, #0]
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	a902      	add	r1, sp, #8
 800d770:	f001 f9ee 	bl	800eb50 <_svfiprintf_r>
 800d774:	9b02      	ldr	r3, [sp, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	701a      	strb	r2, [r3, #0]
 800d77a:	b01c      	add	sp, #112	; 0x70
 800d77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d780:	b003      	add	sp, #12
 800d782:	4770      	bx	lr
 800d784:	2000009c 	.word	0x2000009c
 800d788:	ffff0208 	.word	0xffff0208

0800d78c <siscanf>:
 800d78c:	b40e      	push	{r1, r2, r3}
 800d78e:	b510      	push	{r4, lr}
 800d790:	b09f      	sub	sp, #124	; 0x7c
 800d792:	ac21      	add	r4, sp, #132	; 0x84
 800d794:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d798:	f854 2b04 	ldr.w	r2, [r4], #4
 800d79c:	9201      	str	r2, [sp, #4]
 800d79e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d7a2:	9004      	str	r0, [sp, #16]
 800d7a4:	9008      	str	r0, [sp, #32]
 800d7a6:	f7f2 fd83 	bl	80002b0 <strlen>
 800d7aa:	4b0c      	ldr	r3, [pc, #48]	; (800d7dc <siscanf+0x50>)
 800d7ac:	9005      	str	r0, [sp, #20]
 800d7ae:	9009      	str	r0, [sp, #36]	; 0x24
 800d7b0:	930d      	str	r3, [sp, #52]	; 0x34
 800d7b2:	480b      	ldr	r0, [pc, #44]	; (800d7e0 <siscanf+0x54>)
 800d7b4:	9a01      	ldr	r2, [sp, #4]
 800d7b6:	6800      	ldr	r0, [r0, #0]
 800d7b8:	9403      	str	r4, [sp, #12]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	9311      	str	r3, [sp, #68]	; 0x44
 800d7be:	9316      	str	r3, [sp, #88]	; 0x58
 800d7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d7c8:	a904      	add	r1, sp, #16
 800d7ca:	4623      	mov	r3, r4
 800d7cc:	f001 fb18 	bl	800ee00 <__ssvfiscanf_r>
 800d7d0:	b01f      	add	sp, #124	; 0x7c
 800d7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d6:	b003      	add	sp, #12
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	0800d807 	.word	0x0800d807
 800d7e0:	2000009c 	.word	0x2000009c

0800d7e4 <__sread>:
 800d7e4:	b510      	push	{r4, lr}
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ec:	f000 fa00 	bl	800dbf0 <_read_r>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	bfab      	itete	ge
 800d7f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800d7f8:	181b      	addge	r3, r3, r0
 800d7fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7fe:	bfac      	ite	ge
 800d800:	6563      	strge	r3, [r4, #84]	; 0x54
 800d802:	81a3      	strhlt	r3, [r4, #12]
 800d804:	bd10      	pop	{r4, pc}

0800d806 <__seofread>:
 800d806:	2000      	movs	r0, #0
 800d808:	4770      	bx	lr

0800d80a <__swrite>:
 800d80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d80e:	461f      	mov	r7, r3
 800d810:	898b      	ldrh	r3, [r1, #12]
 800d812:	05db      	lsls	r3, r3, #23
 800d814:	4605      	mov	r5, r0
 800d816:	460c      	mov	r4, r1
 800d818:	4616      	mov	r6, r2
 800d81a:	d505      	bpl.n	800d828 <__swrite+0x1e>
 800d81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d820:	2302      	movs	r3, #2
 800d822:	2200      	movs	r2, #0
 800d824:	f000 f9d2 	bl	800dbcc <_lseek_r>
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d82e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d832:	81a3      	strh	r3, [r4, #12]
 800d834:	4632      	mov	r2, r6
 800d836:	463b      	mov	r3, r7
 800d838:	4628      	mov	r0, r5
 800d83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d83e:	f000 b9f9 	b.w	800dc34 <_write_r>

0800d842 <__sseek>:
 800d842:	b510      	push	{r4, lr}
 800d844:	460c      	mov	r4, r1
 800d846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d84a:	f000 f9bf 	bl	800dbcc <_lseek_r>
 800d84e:	1c43      	adds	r3, r0, #1
 800d850:	89a3      	ldrh	r3, [r4, #12]
 800d852:	bf15      	itete	ne
 800d854:	6560      	strne	r0, [r4, #84]	; 0x54
 800d856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d85a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d85e:	81a3      	strheq	r3, [r4, #12]
 800d860:	bf18      	it	ne
 800d862:	81a3      	strhne	r3, [r4, #12]
 800d864:	bd10      	pop	{r4, pc}

0800d866 <__sclose>:
 800d866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d86a:	f000 b99f 	b.w	800dbac <_close_r>
	...

0800d870 <std>:
 800d870:	2300      	movs	r3, #0
 800d872:	b510      	push	{r4, lr}
 800d874:	4604      	mov	r4, r0
 800d876:	e9c0 3300 	strd	r3, r3, [r0]
 800d87a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d87e:	6083      	str	r3, [r0, #8]
 800d880:	8181      	strh	r1, [r0, #12]
 800d882:	6643      	str	r3, [r0, #100]	; 0x64
 800d884:	81c2      	strh	r2, [r0, #14]
 800d886:	6183      	str	r3, [r0, #24]
 800d888:	4619      	mov	r1, r3
 800d88a:	2208      	movs	r2, #8
 800d88c:	305c      	adds	r0, #92	; 0x5c
 800d88e:	f000 f981 	bl	800db94 <memset>
 800d892:	4b0d      	ldr	r3, [pc, #52]	; (800d8c8 <std+0x58>)
 800d894:	6263      	str	r3, [r4, #36]	; 0x24
 800d896:	4b0d      	ldr	r3, [pc, #52]	; (800d8cc <std+0x5c>)
 800d898:	62a3      	str	r3, [r4, #40]	; 0x28
 800d89a:	4b0d      	ldr	r3, [pc, #52]	; (800d8d0 <std+0x60>)
 800d89c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d89e:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <std+0x64>)
 800d8a0:	6323      	str	r3, [r4, #48]	; 0x30
 800d8a2:	4b0d      	ldr	r3, [pc, #52]	; (800d8d8 <std+0x68>)
 800d8a4:	6224      	str	r4, [r4, #32]
 800d8a6:	429c      	cmp	r4, r3
 800d8a8:	d006      	beq.n	800d8b8 <std+0x48>
 800d8aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d8ae:	4294      	cmp	r4, r2
 800d8b0:	d002      	beq.n	800d8b8 <std+0x48>
 800d8b2:	33d0      	adds	r3, #208	; 0xd0
 800d8b4:	429c      	cmp	r4, r3
 800d8b6:	d105      	bne.n	800d8c4 <std+0x54>
 800d8b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c0:	f000 b9f4 	b.w	800dcac <__retarget_lock_init_recursive>
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	bf00      	nop
 800d8c8:	0800d7e5 	.word	0x0800d7e5
 800d8cc:	0800d80b 	.word	0x0800d80b
 800d8d0:	0800d843 	.word	0x0800d843
 800d8d4:	0800d867 	.word	0x0800d867
 800d8d8:	2000950c 	.word	0x2000950c

0800d8dc <stdio_exit_handler>:
 800d8dc:	4a02      	ldr	r2, [pc, #8]	; (800d8e8 <stdio_exit_handler+0xc>)
 800d8de:	4903      	ldr	r1, [pc, #12]	; (800d8ec <stdio_exit_handler+0x10>)
 800d8e0:	4803      	ldr	r0, [pc, #12]	; (800d8f0 <stdio_exit_handler+0x14>)
 800d8e2:	f000 b8ed 	b.w	800dac0 <_fwalk_sglue>
 800d8e6:	bf00      	nop
 800d8e8:	20000044 	.word	0x20000044
 800d8ec:	0800f795 	.word	0x0800f795
 800d8f0:	20000050 	.word	0x20000050

0800d8f4 <cleanup_stdio>:
 800d8f4:	6841      	ldr	r1, [r0, #4]
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <cleanup_stdio+0x34>)
 800d8f8:	4299      	cmp	r1, r3
 800d8fa:	b510      	push	{r4, lr}
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	d001      	beq.n	800d904 <cleanup_stdio+0x10>
 800d900:	f001 ff48 	bl	800f794 <_fflush_r>
 800d904:	68a1      	ldr	r1, [r4, #8]
 800d906:	4b09      	ldr	r3, [pc, #36]	; (800d92c <cleanup_stdio+0x38>)
 800d908:	4299      	cmp	r1, r3
 800d90a:	d002      	beq.n	800d912 <cleanup_stdio+0x1e>
 800d90c:	4620      	mov	r0, r4
 800d90e:	f001 ff41 	bl	800f794 <_fflush_r>
 800d912:	68e1      	ldr	r1, [r4, #12]
 800d914:	4b06      	ldr	r3, [pc, #24]	; (800d930 <cleanup_stdio+0x3c>)
 800d916:	4299      	cmp	r1, r3
 800d918:	d004      	beq.n	800d924 <cleanup_stdio+0x30>
 800d91a:	4620      	mov	r0, r4
 800d91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d920:	f001 bf38 	b.w	800f794 <_fflush_r>
 800d924:	bd10      	pop	{r4, pc}
 800d926:	bf00      	nop
 800d928:	2000950c 	.word	0x2000950c
 800d92c:	20009574 	.word	0x20009574
 800d930:	200095dc 	.word	0x200095dc

0800d934 <global_stdio_init.part.0>:
 800d934:	b510      	push	{r4, lr}
 800d936:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <global_stdio_init.part.0+0x30>)
 800d938:	4c0b      	ldr	r4, [pc, #44]	; (800d968 <global_stdio_init.part.0+0x34>)
 800d93a:	4a0c      	ldr	r2, [pc, #48]	; (800d96c <global_stdio_init.part.0+0x38>)
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	4620      	mov	r0, r4
 800d940:	2200      	movs	r2, #0
 800d942:	2104      	movs	r1, #4
 800d944:	f7ff ff94 	bl	800d870 <std>
 800d948:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d94c:	2201      	movs	r2, #1
 800d94e:	2109      	movs	r1, #9
 800d950:	f7ff ff8e 	bl	800d870 <std>
 800d954:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d958:	2202      	movs	r2, #2
 800d95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d95e:	2112      	movs	r1, #18
 800d960:	f7ff bf86 	b.w	800d870 <std>
 800d964:	20009644 	.word	0x20009644
 800d968:	2000950c 	.word	0x2000950c
 800d96c:	0800d8dd 	.word	0x0800d8dd

0800d970 <__sfp_lock_acquire>:
 800d970:	4801      	ldr	r0, [pc, #4]	; (800d978 <__sfp_lock_acquire+0x8>)
 800d972:	f000 b99c 	b.w	800dcae <__retarget_lock_acquire_recursive>
 800d976:	bf00      	nop
 800d978:	2000964d 	.word	0x2000964d

0800d97c <__sfp_lock_release>:
 800d97c:	4801      	ldr	r0, [pc, #4]	; (800d984 <__sfp_lock_release+0x8>)
 800d97e:	f000 b997 	b.w	800dcb0 <__retarget_lock_release_recursive>
 800d982:	bf00      	nop
 800d984:	2000964d 	.word	0x2000964d

0800d988 <__sinit>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	4604      	mov	r4, r0
 800d98c:	f7ff fff0 	bl	800d970 <__sfp_lock_acquire>
 800d990:	6a23      	ldr	r3, [r4, #32]
 800d992:	b11b      	cbz	r3, 800d99c <__sinit+0x14>
 800d994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d998:	f7ff bff0 	b.w	800d97c <__sfp_lock_release>
 800d99c:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <__sinit+0x28>)
 800d99e:	6223      	str	r3, [r4, #32]
 800d9a0:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <__sinit+0x2c>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1f5      	bne.n	800d994 <__sinit+0xc>
 800d9a8:	f7ff ffc4 	bl	800d934 <global_stdio_init.part.0>
 800d9ac:	e7f2      	b.n	800d994 <__sinit+0xc>
 800d9ae:	bf00      	nop
 800d9b0:	0800d8f5 	.word	0x0800d8f5
 800d9b4:	20009644 	.word	0x20009644

0800d9b8 <_strtol_l.constprop.0>:
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9be:	d001      	beq.n	800d9c4 <_strtol_l.constprop.0+0xc>
 800d9c0:	2b24      	cmp	r3, #36	; 0x24
 800d9c2:	d906      	bls.n	800d9d2 <_strtol_l.constprop.0+0x1a>
 800d9c4:	f000 f948 	bl	800dc58 <__errno>
 800d9c8:	2316      	movs	r3, #22
 800d9ca:	6003      	str	r3, [r0, #0]
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dab8 <_strtol_l.constprop.0+0x100>
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	462e      	mov	r6, r5
 800d9da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d9e2:	f017 0708 	ands.w	r7, r7, #8
 800d9e6:	d1f7      	bne.n	800d9d8 <_strtol_l.constprop.0+0x20>
 800d9e8:	2c2d      	cmp	r4, #45	; 0x2d
 800d9ea:	d132      	bne.n	800da52 <_strtol_l.constprop.0+0x9a>
 800d9ec:	782c      	ldrb	r4, [r5, #0]
 800d9ee:	2701      	movs	r7, #1
 800d9f0:	1cb5      	adds	r5, r6, #2
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d05b      	beq.n	800daae <_strtol_l.constprop.0+0xf6>
 800d9f6:	2b10      	cmp	r3, #16
 800d9f8:	d109      	bne.n	800da0e <_strtol_l.constprop.0+0x56>
 800d9fa:	2c30      	cmp	r4, #48	; 0x30
 800d9fc:	d107      	bne.n	800da0e <_strtol_l.constprop.0+0x56>
 800d9fe:	782c      	ldrb	r4, [r5, #0]
 800da00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da04:	2c58      	cmp	r4, #88	; 0x58
 800da06:	d14d      	bne.n	800daa4 <_strtol_l.constprop.0+0xec>
 800da08:	786c      	ldrb	r4, [r5, #1]
 800da0a:	2310      	movs	r3, #16
 800da0c:	3502      	adds	r5, #2
 800da0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800da12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800da16:	f04f 0e00 	mov.w	lr, #0
 800da1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800da1e:	4676      	mov	r6, lr
 800da20:	fb03 8a19 	mls	sl, r3, r9, r8
 800da24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800da28:	f1bc 0f09 	cmp.w	ip, #9
 800da2c:	d816      	bhi.n	800da5c <_strtol_l.constprop.0+0xa4>
 800da2e:	4664      	mov	r4, ip
 800da30:	42a3      	cmp	r3, r4
 800da32:	dd24      	ble.n	800da7e <_strtol_l.constprop.0+0xc6>
 800da34:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800da38:	d008      	beq.n	800da4c <_strtol_l.constprop.0+0x94>
 800da3a:	45b1      	cmp	r9, r6
 800da3c:	d31c      	bcc.n	800da78 <_strtol_l.constprop.0+0xc0>
 800da3e:	d101      	bne.n	800da44 <_strtol_l.constprop.0+0x8c>
 800da40:	45a2      	cmp	sl, r4
 800da42:	db19      	blt.n	800da78 <_strtol_l.constprop.0+0xc0>
 800da44:	fb06 4603 	mla	r6, r6, r3, r4
 800da48:	f04f 0e01 	mov.w	lr, #1
 800da4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da50:	e7e8      	b.n	800da24 <_strtol_l.constprop.0+0x6c>
 800da52:	2c2b      	cmp	r4, #43	; 0x2b
 800da54:	bf04      	itt	eq
 800da56:	782c      	ldrbeq	r4, [r5, #0]
 800da58:	1cb5      	addeq	r5, r6, #2
 800da5a:	e7ca      	b.n	800d9f2 <_strtol_l.constprop.0+0x3a>
 800da5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800da60:	f1bc 0f19 	cmp.w	ip, #25
 800da64:	d801      	bhi.n	800da6a <_strtol_l.constprop.0+0xb2>
 800da66:	3c37      	subs	r4, #55	; 0x37
 800da68:	e7e2      	b.n	800da30 <_strtol_l.constprop.0+0x78>
 800da6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800da6e:	f1bc 0f19 	cmp.w	ip, #25
 800da72:	d804      	bhi.n	800da7e <_strtol_l.constprop.0+0xc6>
 800da74:	3c57      	subs	r4, #87	; 0x57
 800da76:	e7db      	b.n	800da30 <_strtol_l.constprop.0+0x78>
 800da78:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800da7c:	e7e6      	b.n	800da4c <_strtol_l.constprop.0+0x94>
 800da7e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800da82:	d105      	bne.n	800da90 <_strtol_l.constprop.0+0xd8>
 800da84:	2322      	movs	r3, #34	; 0x22
 800da86:	6003      	str	r3, [r0, #0]
 800da88:	4646      	mov	r6, r8
 800da8a:	b942      	cbnz	r2, 800da9e <_strtol_l.constprop.0+0xe6>
 800da8c:	4630      	mov	r0, r6
 800da8e:	e79e      	b.n	800d9ce <_strtol_l.constprop.0+0x16>
 800da90:	b107      	cbz	r7, 800da94 <_strtol_l.constprop.0+0xdc>
 800da92:	4276      	negs	r6, r6
 800da94:	2a00      	cmp	r2, #0
 800da96:	d0f9      	beq.n	800da8c <_strtol_l.constprop.0+0xd4>
 800da98:	f1be 0f00 	cmp.w	lr, #0
 800da9c:	d000      	beq.n	800daa0 <_strtol_l.constprop.0+0xe8>
 800da9e:	1e69      	subs	r1, r5, #1
 800daa0:	6011      	str	r1, [r2, #0]
 800daa2:	e7f3      	b.n	800da8c <_strtol_l.constprop.0+0xd4>
 800daa4:	2430      	movs	r4, #48	; 0x30
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1b1      	bne.n	800da0e <_strtol_l.constprop.0+0x56>
 800daaa:	2308      	movs	r3, #8
 800daac:	e7af      	b.n	800da0e <_strtol_l.constprop.0+0x56>
 800daae:	2c30      	cmp	r4, #48	; 0x30
 800dab0:	d0a5      	beq.n	800d9fe <_strtol_l.constprop.0+0x46>
 800dab2:	230a      	movs	r3, #10
 800dab4:	e7ab      	b.n	800da0e <_strtol_l.constprop.0+0x56>
 800dab6:	bf00      	nop
 800dab8:	08015503 	.word	0x08015503

0800dabc <_strtol_r>:
 800dabc:	f7ff bf7c 	b.w	800d9b8 <_strtol_l.constprop.0>

0800dac0 <_fwalk_sglue>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	4607      	mov	r7, r0
 800dac6:	4688      	mov	r8, r1
 800dac8:	4614      	mov	r4, r2
 800daca:	2600      	movs	r6, #0
 800dacc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dad0:	f1b9 0901 	subs.w	r9, r9, #1
 800dad4:	d505      	bpl.n	800dae2 <_fwalk_sglue+0x22>
 800dad6:	6824      	ldr	r4, [r4, #0]
 800dad8:	2c00      	cmp	r4, #0
 800dada:	d1f7      	bne.n	800dacc <_fwalk_sglue+0xc>
 800dadc:	4630      	mov	r0, r6
 800dade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae2:	89ab      	ldrh	r3, [r5, #12]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d907      	bls.n	800daf8 <_fwalk_sglue+0x38>
 800dae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800daec:	3301      	adds	r3, #1
 800daee:	d003      	beq.n	800daf8 <_fwalk_sglue+0x38>
 800daf0:	4629      	mov	r1, r5
 800daf2:	4638      	mov	r0, r7
 800daf4:	47c0      	blx	r8
 800daf6:	4306      	orrs	r6, r0
 800daf8:	3568      	adds	r5, #104	; 0x68
 800dafa:	e7e9      	b.n	800dad0 <_fwalk_sglue+0x10>

0800dafc <_vsniprintf_r>:
 800dafc:	b530      	push	{r4, r5, lr}
 800dafe:	4614      	mov	r4, r2
 800db00:	2c00      	cmp	r4, #0
 800db02:	b09b      	sub	sp, #108	; 0x6c
 800db04:	4605      	mov	r5, r0
 800db06:	461a      	mov	r2, r3
 800db08:	da05      	bge.n	800db16 <_vsniprintf_r+0x1a>
 800db0a:	238b      	movs	r3, #139	; 0x8b
 800db0c:	6003      	str	r3, [r0, #0]
 800db0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db12:	b01b      	add	sp, #108	; 0x6c
 800db14:	bd30      	pop	{r4, r5, pc}
 800db16:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db1e:	bf14      	ite	ne
 800db20:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800db24:	4623      	moveq	r3, r4
 800db26:	9302      	str	r3, [sp, #8]
 800db28:	9305      	str	r3, [sp, #20]
 800db2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db2e:	9100      	str	r1, [sp, #0]
 800db30:	9104      	str	r1, [sp, #16]
 800db32:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db36:	4669      	mov	r1, sp
 800db38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db3a:	f001 f809 	bl	800eb50 <_svfiprintf_r>
 800db3e:	1c43      	adds	r3, r0, #1
 800db40:	bfbc      	itt	lt
 800db42:	238b      	movlt	r3, #139	; 0x8b
 800db44:	602b      	strlt	r3, [r5, #0]
 800db46:	2c00      	cmp	r4, #0
 800db48:	d0e3      	beq.n	800db12 <_vsniprintf_r+0x16>
 800db4a:	9b00      	ldr	r3, [sp, #0]
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	e7df      	b.n	800db12 <_vsniprintf_r+0x16>
	...

0800db54 <vsniprintf>:
 800db54:	b507      	push	{r0, r1, r2, lr}
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	4613      	mov	r3, r2
 800db5a:	460a      	mov	r2, r1
 800db5c:	4601      	mov	r1, r0
 800db5e:	4803      	ldr	r0, [pc, #12]	; (800db6c <vsniprintf+0x18>)
 800db60:	6800      	ldr	r0, [r0, #0]
 800db62:	f7ff ffcb 	bl	800dafc <_vsniprintf_r>
 800db66:	b003      	add	sp, #12
 800db68:	f85d fb04 	ldr.w	pc, [sp], #4
 800db6c:	2000009c 	.word	0x2000009c

0800db70 <iprintf>:
 800db70:	b40f      	push	{r0, r1, r2, r3}
 800db72:	b507      	push	{r0, r1, r2, lr}
 800db74:	4906      	ldr	r1, [pc, #24]	; (800db90 <iprintf+0x20>)
 800db76:	ab04      	add	r3, sp, #16
 800db78:	6808      	ldr	r0, [r1, #0]
 800db7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db7e:	6881      	ldr	r1, [r0, #8]
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	f001 fadf 	bl	800f144 <_vfiprintf_r>
 800db86:	b003      	add	sp, #12
 800db88:	f85d eb04 	ldr.w	lr, [sp], #4
 800db8c:	b004      	add	sp, #16
 800db8e:	4770      	bx	lr
 800db90:	2000009c 	.word	0x2000009c

0800db94 <memset>:
 800db94:	4402      	add	r2, r0
 800db96:	4603      	mov	r3, r0
 800db98:	4293      	cmp	r3, r2
 800db9a:	d100      	bne.n	800db9e <memset+0xa>
 800db9c:	4770      	bx	lr
 800db9e:	f803 1b01 	strb.w	r1, [r3], #1
 800dba2:	e7f9      	b.n	800db98 <memset+0x4>

0800dba4 <_localeconv_r>:
 800dba4:	4800      	ldr	r0, [pc, #0]	; (800dba8 <_localeconv_r+0x4>)
 800dba6:	4770      	bx	lr
 800dba8:	20000190 	.word	0x20000190

0800dbac <_close_r>:
 800dbac:	b538      	push	{r3, r4, r5, lr}
 800dbae:	4d06      	ldr	r5, [pc, #24]	; (800dbc8 <_close_r+0x1c>)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4608      	mov	r0, r1
 800dbb6:	602b      	str	r3, [r5, #0]
 800dbb8:	f7f7 f915 	bl	8004de6 <_close>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	d102      	bne.n	800dbc6 <_close_r+0x1a>
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	b103      	cbz	r3, 800dbc6 <_close_r+0x1a>
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	bd38      	pop	{r3, r4, r5, pc}
 800dbc8:	20009648 	.word	0x20009648

0800dbcc <_lseek_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d07      	ldr	r5, [pc, #28]	; (800dbec <_lseek_r+0x20>)
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	4608      	mov	r0, r1
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	602a      	str	r2, [r5, #0]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f7f7 f92a 	bl	8004e34 <_lseek>
 800dbe0:	1c43      	adds	r3, r0, #1
 800dbe2:	d102      	bne.n	800dbea <_lseek_r+0x1e>
 800dbe4:	682b      	ldr	r3, [r5, #0]
 800dbe6:	b103      	cbz	r3, 800dbea <_lseek_r+0x1e>
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	20009648 	.word	0x20009648

0800dbf0 <_read_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d07      	ldr	r5, [pc, #28]	; (800dc10 <_read_r+0x20>)
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	4608      	mov	r0, r1
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	602a      	str	r2, [r5, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	f7f7 f8b8 	bl	8004d74 <_read>
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	d102      	bne.n	800dc0e <_read_r+0x1e>
 800dc08:	682b      	ldr	r3, [r5, #0]
 800dc0a:	b103      	cbz	r3, 800dc0e <_read_r+0x1e>
 800dc0c:	6023      	str	r3, [r4, #0]
 800dc0e:	bd38      	pop	{r3, r4, r5, pc}
 800dc10:	20009648 	.word	0x20009648

0800dc14 <_sbrk_r>:
 800dc14:	b538      	push	{r3, r4, r5, lr}
 800dc16:	4d06      	ldr	r5, [pc, #24]	; (800dc30 <_sbrk_r+0x1c>)
 800dc18:	2300      	movs	r3, #0
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	4608      	mov	r0, r1
 800dc1e:	602b      	str	r3, [r5, #0]
 800dc20:	f7f7 f916 	bl	8004e50 <_sbrk>
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	d102      	bne.n	800dc2e <_sbrk_r+0x1a>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b103      	cbz	r3, 800dc2e <_sbrk_r+0x1a>
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	20009648 	.word	0x20009648

0800dc34 <_write_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d07      	ldr	r5, [pc, #28]	; (800dc54 <_write_r+0x20>)
 800dc38:	4604      	mov	r4, r0
 800dc3a:	4608      	mov	r0, r1
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	2200      	movs	r2, #0
 800dc40:	602a      	str	r2, [r5, #0]
 800dc42:	461a      	mov	r2, r3
 800dc44:	f7f7 f8b3 	bl	8004dae <_write>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_write_r+0x1e>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_write_r+0x1e>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	20009648 	.word	0x20009648

0800dc58 <__errno>:
 800dc58:	4b01      	ldr	r3, [pc, #4]	; (800dc60 <__errno+0x8>)
 800dc5a:	6818      	ldr	r0, [r3, #0]
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	2000009c 	.word	0x2000009c

0800dc64 <__libc_init_array>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	4d0d      	ldr	r5, [pc, #52]	; (800dc9c <__libc_init_array+0x38>)
 800dc68:	4c0d      	ldr	r4, [pc, #52]	; (800dca0 <__libc_init_array+0x3c>)
 800dc6a:	1b64      	subs	r4, r4, r5
 800dc6c:	10a4      	asrs	r4, r4, #2
 800dc6e:	2600      	movs	r6, #0
 800dc70:	42a6      	cmp	r6, r4
 800dc72:	d109      	bne.n	800dc88 <__libc_init_array+0x24>
 800dc74:	4d0b      	ldr	r5, [pc, #44]	; (800dca4 <__libc_init_array+0x40>)
 800dc76:	4c0c      	ldr	r4, [pc, #48]	; (800dca8 <__libc_init_array+0x44>)
 800dc78:	f003 f80e 	bl	8010c98 <_init>
 800dc7c:	1b64      	subs	r4, r4, r5
 800dc7e:	10a4      	asrs	r4, r4, #2
 800dc80:	2600      	movs	r6, #0
 800dc82:	42a6      	cmp	r6, r4
 800dc84:	d105      	bne.n	800dc92 <__libc_init_array+0x2e>
 800dc86:	bd70      	pop	{r4, r5, r6, pc}
 800dc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc8c:	4798      	blx	r3
 800dc8e:	3601      	adds	r6, #1
 800dc90:	e7ee      	b.n	800dc70 <__libc_init_array+0xc>
 800dc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc96:	4798      	blx	r3
 800dc98:	3601      	adds	r6, #1
 800dc9a:	e7f2      	b.n	800dc82 <__libc_init_array+0x1e>
 800dc9c:	08015868 	.word	0x08015868
 800dca0:	08015868 	.word	0x08015868
 800dca4:	08015868 	.word	0x08015868
 800dca8:	0801586c 	.word	0x0801586c

0800dcac <__retarget_lock_init_recursive>:
 800dcac:	4770      	bx	lr

0800dcae <__retarget_lock_acquire_recursive>:
 800dcae:	4770      	bx	lr

0800dcb0 <__retarget_lock_release_recursive>:
 800dcb0:	4770      	bx	lr

0800dcb2 <memcpy>:
 800dcb2:	440a      	add	r2, r1
 800dcb4:	4291      	cmp	r1, r2
 800dcb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dcba:	d100      	bne.n	800dcbe <memcpy+0xc>
 800dcbc:	4770      	bx	lr
 800dcbe:	b510      	push	{r4, lr}
 800dcc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcc8:	4291      	cmp	r1, r2
 800dcca:	d1f9      	bne.n	800dcc0 <memcpy+0xe>
 800dccc:	bd10      	pop	{r4, pc}
	...

0800dcd0 <__assert_func>:
 800dcd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcd2:	4614      	mov	r4, r2
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	4b09      	ldr	r3, [pc, #36]	; (800dcfc <__assert_func+0x2c>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4605      	mov	r5, r0
 800dcdc:	68d8      	ldr	r0, [r3, #12]
 800dcde:	b14c      	cbz	r4, 800dcf4 <__assert_func+0x24>
 800dce0:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <__assert_func+0x30>)
 800dce2:	9100      	str	r1, [sp, #0]
 800dce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dce8:	4906      	ldr	r1, [pc, #24]	; (800dd04 <__assert_func+0x34>)
 800dcea:	462b      	mov	r3, r5
 800dcec:	f002 f8f6 	bl	800fedc <fiprintf>
 800dcf0:	f002 fb18 	bl	8010324 <abort>
 800dcf4:	4b04      	ldr	r3, [pc, #16]	; (800dd08 <__assert_func+0x38>)
 800dcf6:	461c      	mov	r4, r3
 800dcf8:	e7f3      	b.n	800dce2 <__assert_func+0x12>
 800dcfa:	bf00      	nop
 800dcfc:	2000009c 	.word	0x2000009c
 800dd00:	08015603 	.word	0x08015603
 800dd04:	08015610 	.word	0x08015610
 800dd08:	0801563e 	.word	0x0801563e

0800dd0c <quorem>:
 800dd0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	6903      	ldr	r3, [r0, #16]
 800dd12:	690c      	ldr	r4, [r1, #16]
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	4607      	mov	r7, r0
 800dd18:	db7e      	blt.n	800de18 <quorem+0x10c>
 800dd1a:	3c01      	subs	r4, #1
 800dd1c:	f101 0814 	add.w	r8, r1, #20
 800dd20:	f100 0514 	add.w	r5, r0, #20
 800dd24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd32:	3301      	adds	r3, #1
 800dd34:	429a      	cmp	r2, r3
 800dd36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd3e:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd42:	d331      	bcc.n	800dda8 <quorem+0x9c>
 800dd44:	f04f 0e00 	mov.w	lr, #0
 800dd48:	4640      	mov	r0, r8
 800dd4a:	46ac      	mov	ip, r5
 800dd4c:	46f2      	mov	sl, lr
 800dd4e:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd52:	b293      	uxth	r3, r2
 800dd54:	fb06 e303 	mla	r3, r6, r3, lr
 800dd58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd5c:	0c1a      	lsrs	r2, r3, #16
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	ebaa 0303 	sub.w	r3, sl, r3
 800dd64:	f8dc a000 	ldr.w	sl, [ip]
 800dd68:	fa13 f38a 	uxtah	r3, r3, sl
 800dd6c:	fb06 220e 	mla	r2, r6, lr, r2
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	9b00      	ldr	r3, [sp, #0]
 800dd74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd78:	b292      	uxth	r2, r2
 800dd7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd82:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd86:	4581      	cmp	r9, r0
 800dd88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd8c:	f84c 3b04 	str.w	r3, [ip], #4
 800dd90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd94:	d2db      	bcs.n	800dd4e <quorem+0x42>
 800dd96:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd9a:	b92b      	cbnz	r3, 800dda8 <quorem+0x9c>
 800dd9c:	9b01      	ldr	r3, [sp, #4]
 800dd9e:	3b04      	subs	r3, #4
 800dda0:	429d      	cmp	r5, r3
 800dda2:	461a      	mov	r2, r3
 800dda4:	d32c      	bcc.n	800de00 <quorem+0xf4>
 800dda6:	613c      	str	r4, [r7, #16]
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f001 ff97 	bl	800fcdc <__mcmp>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	db22      	blt.n	800ddf8 <quorem+0xec>
 800ddb2:	3601      	adds	r6, #1
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddbc:	f8d1 c000 	ldr.w	ip, [r1]
 800ddc0:	b293      	uxth	r3, r2
 800ddc2:	1ac3      	subs	r3, r0, r3
 800ddc4:	0c12      	lsrs	r2, r2, #16
 800ddc6:	fa13 f38c 	uxtah	r3, r3, ip
 800ddca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ddce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddd8:	45c1      	cmp	r9, r8
 800ddda:	f841 3b04 	str.w	r3, [r1], #4
 800ddde:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dde2:	d2e9      	bcs.n	800ddb8 <quorem+0xac>
 800dde4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dde8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddec:	b922      	cbnz	r2, 800ddf8 <quorem+0xec>
 800ddee:	3b04      	subs	r3, #4
 800ddf0:	429d      	cmp	r5, r3
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	d30a      	bcc.n	800de0c <quorem+0x100>
 800ddf6:	613c      	str	r4, [r7, #16]
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	b003      	add	sp, #12
 800ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de00:	6812      	ldr	r2, [r2, #0]
 800de02:	3b04      	subs	r3, #4
 800de04:	2a00      	cmp	r2, #0
 800de06:	d1ce      	bne.n	800dda6 <quorem+0x9a>
 800de08:	3c01      	subs	r4, #1
 800de0a:	e7c9      	b.n	800dda0 <quorem+0x94>
 800de0c:	6812      	ldr	r2, [r2, #0]
 800de0e:	3b04      	subs	r3, #4
 800de10:	2a00      	cmp	r2, #0
 800de12:	d1f0      	bne.n	800ddf6 <quorem+0xea>
 800de14:	3c01      	subs	r4, #1
 800de16:	e7eb      	b.n	800ddf0 <quorem+0xe4>
 800de18:	2000      	movs	r0, #0
 800de1a:	e7ee      	b.n	800ddfa <quorem+0xee>
 800de1c:	0000      	movs	r0, r0
	...

0800de20 <_dtoa_r>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	ed2d 8b04 	vpush	{d8-d9}
 800de28:	69c5      	ldr	r5, [r0, #28]
 800de2a:	b093      	sub	sp, #76	; 0x4c
 800de2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de30:	ec57 6b10 	vmov	r6, r7, d0
 800de34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de38:	9107      	str	r1, [sp, #28]
 800de3a:	4604      	mov	r4, r0
 800de3c:	920a      	str	r2, [sp, #40]	; 0x28
 800de3e:	930d      	str	r3, [sp, #52]	; 0x34
 800de40:	b975      	cbnz	r5, 800de60 <_dtoa_r+0x40>
 800de42:	2010      	movs	r0, #16
 800de44:	f7ff fa0a 	bl	800d25c <malloc>
 800de48:	4602      	mov	r2, r0
 800de4a:	61e0      	str	r0, [r4, #28]
 800de4c:	b920      	cbnz	r0, 800de58 <_dtoa_r+0x38>
 800de4e:	4bae      	ldr	r3, [pc, #696]	; (800e108 <_dtoa_r+0x2e8>)
 800de50:	21ef      	movs	r1, #239	; 0xef
 800de52:	48ae      	ldr	r0, [pc, #696]	; (800e10c <_dtoa_r+0x2ec>)
 800de54:	f7ff ff3c 	bl	800dcd0 <__assert_func>
 800de58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de5c:	6005      	str	r5, [r0, #0]
 800de5e:	60c5      	str	r5, [r0, #12]
 800de60:	69e3      	ldr	r3, [r4, #28]
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	b151      	cbz	r1, 800de7c <_dtoa_r+0x5c>
 800de66:	685a      	ldr	r2, [r3, #4]
 800de68:	604a      	str	r2, [r1, #4]
 800de6a:	2301      	movs	r3, #1
 800de6c:	4093      	lsls	r3, r2
 800de6e:	608b      	str	r3, [r1, #8]
 800de70:	4620      	mov	r0, r4
 800de72:	f001 fcf7 	bl	800f864 <_Bfree>
 800de76:	69e3      	ldr	r3, [r4, #28]
 800de78:	2200      	movs	r2, #0
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	1e3b      	subs	r3, r7, #0
 800de7e:	bfbb      	ittet	lt
 800de80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de84:	9303      	strlt	r3, [sp, #12]
 800de86:	2300      	movge	r3, #0
 800de88:	2201      	movlt	r2, #1
 800de8a:	bfac      	ite	ge
 800de8c:	f8c8 3000 	strge.w	r3, [r8]
 800de90:	f8c8 2000 	strlt.w	r2, [r8]
 800de94:	4b9e      	ldr	r3, [pc, #632]	; (800e110 <_dtoa_r+0x2f0>)
 800de96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800de9a:	ea33 0308 	bics.w	r3, r3, r8
 800de9e:	d11b      	bne.n	800ded8 <_dtoa_r+0xb8>
 800dea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dea2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800deac:	4333      	orrs	r3, r6
 800deae:	f000 8593 	beq.w	800e9d8 <_dtoa_r+0xbb8>
 800deb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deb4:	b963      	cbnz	r3, 800ded0 <_dtoa_r+0xb0>
 800deb6:	4b97      	ldr	r3, [pc, #604]	; (800e114 <_dtoa_r+0x2f4>)
 800deb8:	e027      	b.n	800df0a <_dtoa_r+0xea>
 800deba:	4b97      	ldr	r3, [pc, #604]	; (800e118 <_dtoa_r+0x2f8>)
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	3308      	adds	r3, #8
 800dec0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	9800      	ldr	r0, [sp, #0]
 800dec6:	b013      	add	sp, #76	; 0x4c
 800dec8:	ecbd 8b04 	vpop	{d8-d9}
 800decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded0:	4b90      	ldr	r3, [pc, #576]	; (800e114 <_dtoa_r+0x2f4>)
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	3303      	adds	r3, #3
 800ded6:	e7f3      	b.n	800dec0 <_dtoa_r+0xa0>
 800ded8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dedc:	2200      	movs	r2, #0
 800dede:	ec51 0b17 	vmov	r0, r1, d7
 800dee2:	eeb0 8a47 	vmov.f32	s16, s14
 800dee6:	eef0 8a67 	vmov.f32	s17, s15
 800deea:	2300      	movs	r3, #0
 800deec:	f7f2 fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 800def0:	4681      	mov	r9, r0
 800def2:	b160      	cbz	r0, 800df0e <_dtoa_r+0xee>
 800def4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800def6:	2301      	movs	r3, #1
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 8568 	beq.w	800e9d2 <_dtoa_r+0xbb2>
 800df02:	4b86      	ldr	r3, [pc, #536]	; (800e11c <_dtoa_r+0x2fc>)
 800df04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	3b01      	subs	r3, #1
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	e7da      	b.n	800dec4 <_dtoa_r+0xa4>
 800df0e:	aa10      	add	r2, sp, #64	; 0x40
 800df10:	a911      	add	r1, sp, #68	; 0x44
 800df12:	4620      	mov	r0, r4
 800df14:	eeb0 0a48 	vmov.f32	s0, s16
 800df18:	eef0 0a68 	vmov.f32	s1, s17
 800df1c:	f001 ff84 	bl	800fe28 <__d2b>
 800df20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800df24:	4682      	mov	sl, r0
 800df26:	2d00      	cmp	r5, #0
 800df28:	d07f      	beq.n	800e02a <_dtoa_r+0x20a>
 800df2a:	ee18 3a90 	vmov	r3, s17
 800df2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800df36:	ec51 0b18 	vmov	r0, r1, d8
 800df3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800df3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800df46:	4619      	mov	r1, r3
 800df48:	2200      	movs	r2, #0
 800df4a:	4b75      	ldr	r3, [pc, #468]	; (800e120 <_dtoa_r+0x300>)
 800df4c:	f7f2 f9bc 	bl	80002c8 <__aeabi_dsub>
 800df50:	a367      	add	r3, pc, #412	; (adr r3, 800e0f0 <_dtoa_r+0x2d0>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 fb6f 	bl	8000638 <__aeabi_dmul>
 800df5a:	a367      	add	r3, pc, #412	; (adr r3, 800e0f8 <_dtoa_r+0x2d8>)
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f7f2 f9b4 	bl	80002cc <__adddf3>
 800df64:	4606      	mov	r6, r0
 800df66:	4628      	mov	r0, r5
 800df68:	460f      	mov	r7, r1
 800df6a:	f7f2 fafb 	bl	8000564 <__aeabi_i2d>
 800df6e:	a364      	add	r3, pc, #400	; (adr r3, 800e100 <_dtoa_r+0x2e0>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	f7f2 fb60 	bl	8000638 <__aeabi_dmul>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f7f2 f9a4 	bl	80002cc <__adddf3>
 800df84:	4606      	mov	r6, r0
 800df86:	460f      	mov	r7, r1
 800df88:	f7f2 fe06 	bl	8000b98 <__aeabi_d2iz>
 800df8c:	2200      	movs	r2, #0
 800df8e:	4683      	mov	fp, r0
 800df90:	2300      	movs	r3, #0
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 fdc1 	bl	8000b1c <__aeabi_dcmplt>
 800df9a:	b148      	cbz	r0, 800dfb0 <_dtoa_r+0x190>
 800df9c:	4658      	mov	r0, fp
 800df9e:	f7f2 fae1 	bl	8000564 <__aeabi_i2d>
 800dfa2:	4632      	mov	r2, r6
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	f7f2 fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 800dfaa:	b908      	cbnz	r0, 800dfb0 <_dtoa_r+0x190>
 800dfac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfb0:	f1bb 0f16 	cmp.w	fp, #22
 800dfb4:	d857      	bhi.n	800e066 <_dtoa_r+0x246>
 800dfb6:	4b5b      	ldr	r3, [pc, #364]	; (800e124 <_dtoa_r+0x304>)
 800dfb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	ec51 0b18 	vmov	r0, r1, d8
 800dfc4:	f7f2 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d04e      	beq.n	800e06a <_dtoa_r+0x24a>
 800dfcc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	930c      	str	r3, [sp, #48]	; 0x30
 800dfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfd6:	1b5b      	subs	r3, r3, r5
 800dfd8:	1e5a      	subs	r2, r3, #1
 800dfda:	bf45      	ittet	mi
 800dfdc:	f1c3 0301 	rsbmi	r3, r3, #1
 800dfe0:	9305      	strmi	r3, [sp, #20]
 800dfe2:	2300      	movpl	r3, #0
 800dfe4:	2300      	movmi	r3, #0
 800dfe6:	9206      	str	r2, [sp, #24]
 800dfe8:	bf54      	ite	pl
 800dfea:	9305      	strpl	r3, [sp, #20]
 800dfec:	9306      	strmi	r3, [sp, #24]
 800dfee:	f1bb 0f00 	cmp.w	fp, #0
 800dff2:	db3c      	blt.n	800e06e <_dtoa_r+0x24e>
 800dff4:	9b06      	ldr	r3, [sp, #24]
 800dff6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dffa:	445b      	add	r3, fp
 800dffc:	9306      	str	r3, [sp, #24]
 800dffe:	2300      	movs	r3, #0
 800e000:	9308      	str	r3, [sp, #32]
 800e002:	9b07      	ldr	r3, [sp, #28]
 800e004:	2b09      	cmp	r3, #9
 800e006:	d868      	bhi.n	800e0da <_dtoa_r+0x2ba>
 800e008:	2b05      	cmp	r3, #5
 800e00a:	bfc4      	itt	gt
 800e00c:	3b04      	subgt	r3, #4
 800e00e:	9307      	strgt	r3, [sp, #28]
 800e010:	9b07      	ldr	r3, [sp, #28]
 800e012:	f1a3 0302 	sub.w	r3, r3, #2
 800e016:	bfcc      	ite	gt
 800e018:	2500      	movgt	r5, #0
 800e01a:	2501      	movle	r5, #1
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	f200 8085 	bhi.w	800e12c <_dtoa_r+0x30c>
 800e022:	e8df f003 	tbb	[pc, r3]
 800e026:	3b2e      	.short	0x3b2e
 800e028:	5839      	.short	0x5839
 800e02a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e02e:	441d      	add	r5, r3
 800e030:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e034:	2b20      	cmp	r3, #32
 800e036:	bfc1      	itttt	gt
 800e038:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e03c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e040:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e044:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e048:	bfd6      	itet	le
 800e04a:	f1c3 0320 	rsble	r3, r3, #32
 800e04e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e052:	fa06 f003 	lslle.w	r0, r6, r3
 800e056:	f7f2 fa75 	bl	8000544 <__aeabi_ui2d>
 800e05a:	2201      	movs	r2, #1
 800e05c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e060:	3d01      	subs	r5, #1
 800e062:	920e      	str	r2, [sp, #56]	; 0x38
 800e064:	e76f      	b.n	800df46 <_dtoa_r+0x126>
 800e066:	2301      	movs	r3, #1
 800e068:	e7b3      	b.n	800dfd2 <_dtoa_r+0x1b2>
 800e06a:	900c      	str	r0, [sp, #48]	; 0x30
 800e06c:	e7b2      	b.n	800dfd4 <_dtoa_r+0x1b4>
 800e06e:	9b05      	ldr	r3, [sp, #20]
 800e070:	eba3 030b 	sub.w	r3, r3, fp
 800e074:	9305      	str	r3, [sp, #20]
 800e076:	f1cb 0300 	rsb	r3, fp, #0
 800e07a:	9308      	str	r3, [sp, #32]
 800e07c:	2300      	movs	r3, #0
 800e07e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e080:	e7bf      	b.n	800e002 <_dtoa_r+0x1e2>
 800e082:	2300      	movs	r3, #0
 800e084:	9309      	str	r3, [sp, #36]	; 0x24
 800e086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e088:	2b00      	cmp	r3, #0
 800e08a:	dc52      	bgt.n	800e132 <_dtoa_r+0x312>
 800e08c:	2301      	movs	r3, #1
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	9304      	str	r3, [sp, #16]
 800e092:	461a      	mov	r2, r3
 800e094:	920a      	str	r2, [sp, #40]	; 0x28
 800e096:	e00b      	b.n	800e0b0 <_dtoa_r+0x290>
 800e098:	2301      	movs	r3, #1
 800e09a:	e7f3      	b.n	800e084 <_dtoa_r+0x264>
 800e09c:	2300      	movs	r3, #0
 800e09e:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0a2:	445b      	add	r3, fp
 800e0a4:	9301      	str	r3, [sp, #4]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	bfb8      	it	lt
 800e0ae:	2301      	movlt	r3, #1
 800e0b0:	69e0      	ldr	r0, [r4, #28]
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	2204      	movs	r2, #4
 800e0b6:	f102 0614 	add.w	r6, r2, #20
 800e0ba:	429e      	cmp	r6, r3
 800e0bc:	d93d      	bls.n	800e13a <_dtoa_r+0x31a>
 800e0be:	6041      	str	r1, [r0, #4]
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f001 fb8f 	bl	800f7e4 <_Balloc>
 800e0c6:	9000      	str	r0, [sp, #0]
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d139      	bne.n	800e140 <_dtoa_r+0x320>
 800e0cc:	4b16      	ldr	r3, [pc, #88]	; (800e128 <_dtoa_r+0x308>)
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	f240 11af 	movw	r1, #431	; 0x1af
 800e0d4:	e6bd      	b.n	800de52 <_dtoa_r+0x32>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e7e1      	b.n	800e09e <_dtoa_r+0x27e>
 800e0da:	2501      	movs	r5, #1
 800e0dc:	2300      	movs	r3, #0
 800e0de:	9307      	str	r3, [sp, #28]
 800e0e0:	9509      	str	r5, [sp, #36]	; 0x24
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	2312      	movs	r3, #18
 800e0ee:	e7d1      	b.n	800e094 <_dtoa_r+0x274>
 800e0f0:	636f4361 	.word	0x636f4361
 800e0f4:	3fd287a7 	.word	0x3fd287a7
 800e0f8:	8b60c8b3 	.word	0x8b60c8b3
 800e0fc:	3fc68a28 	.word	0x3fc68a28
 800e100:	509f79fb 	.word	0x509f79fb
 800e104:	3fd34413 	.word	0x3fd34413
 800e108:	0801564c 	.word	0x0801564c
 800e10c:	08015663 	.word	0x08015663
 800e110:	7ff00000 	.word	0x7ff00000
 800e114:	08015648 	.word	0x08015648
 800e118:	0801563f 	.word	0x0801563f
 800e11c:	080156f4 	.word	0x080156f4
 800e120:	3ff80000 	.word	0x3ff80000
 800e124:	08015780 	.word	0x08015780
 800e128:	080156bb 	.word	0x080156bb
 800e12c:	2301      	movs	r3, #1
 800e12e:	9309      	str	r3, [sp, #36]	; 0x24
 800e130:	e7d7      	b.n	800e0e2 <_dtoa_r+0x2c2>
 800e132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e134:	9301      	str	r3, [sp, #4]
 800e136:	9304      	str	r3, [sp, #16]
 800e138:	e7ba      	b.n	800e0b0 <_dtoa_r+0x290>
 800e13a:	3101      	adds	r1, #1
 800e13c:	0052      	lsls	r2, r2, #1
 800e13e:	e7ba      	b.n	800e0b6 <_dtoa_r+0x296>
 800e140:	69e3      	ldr	r3, [r4, #28]
 800e142:	9a00      	ldr	r2, [sp, #0]
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	9b04      	ldr	r3, [sp, #16]
 800e148:	2b0e      	cmp	r3, #14
 800e14a:	f200 80a8 	bhi.w	800e29e <_dtoa_r+0x47e>
 800e14e:	2d00      	cmp	r5, #0
 800e150:	f000 80a5 	beq.w	800e29e <_dtoa_r+0x47e>
 800e154:	f1bb 0f00 	cmp.w	fp, #0
 800e158:	dd38      	ble.n	800e1cc <_dtoa_r+0x3ac>
 800e15a:	4bc0      	ldr	r3, [pc, #768]	; (800e45c <_dtoa_r+0x63c>)
 800e15c:	f00b 020f 	and.w	r2, fp, #15
 800e160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e164:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e168:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e16c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e170:	d019      	beq.n	800e1a6 <_dtoa_r+0x386>
 800e172:	4bbb      	ldr	r3, [pc, #748]	; (800e460 <_dtoa_r+0x640>)
 800e174:	ec51 0b18 	vmov	r0, r1, d8
 800e178:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e17c:	f7f2 fb86 	bl	800088c <__aeabi_ddiv>
 800e180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e184:	f008 080f 	and.w	r8, r8, #15
 800e188:	2503      	movs	r5, #3
 800e18a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e460 <_dtoa_r+0x640>
 800e18e:	f1b8 0f00 	cmp.w	r8, #0
 800e192:	d10a      	bne.n	800e1aa <_dtoa_r+0x38a>
 800e194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e198:	4632      	mov	r2, r6
 800e19a:	463b      	mov	r3, r7
 800e19c:	f7f2 fb76 	bl	800088c <__aeabi_ddiv>
 800e1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1a4:	e02b      	b.n	800e1fe <_dtoa_r+0x3de>
 800e1a6:	2502      	movs	r5, #2
 800e1a8:	e7ef      	b.n	800e18a <_dtoa_r+0x36a>
 800e1aa:	f018 0f01 	tst.w	r8, #1
 800e1ae:	d008      	beq.n	800e1c2 <_dtoa_r+0x3a2>
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e1b8:	f7f2 fa3e 	bl	8000638 <__aeabi_dmul>
 800e1bc:	3501      	adds	r5, #1
 800e1be:	4606      	mov	r6, r0
 800e1c0:	460f      	mov	r7, r1
 800e1c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e1c6:	f109 0908 	add.w	r9, r9, #8
 800e1ca:	e7e0      	b.n	800e18e <_dtoa_r+0x36e>
 800e1cc:	f000 809f 	beq.w	800e30e <_dtoa_r+0x4ee>
 800e1d0:	f1cb 0600 	rsb	r6, fp, #0
 800e1d4:	4ba1      	ldr	r3, [pc, #644]	; (800e45c <_dtoa_r+0x63c>)
 800e1d6:	4fa2      	ldr	r7, [pc, #648]	; (800e460 <_dtoa_r+0x640>)
 800e1d8:	f006 020f 	and.w	r2, r6, #15
 800e1dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	ec51 0b18 	vmov	r0, r1, d8
 800e1e8:	f7f2 fa26 	bl	8000638 <__aeabi_dmul>
 800e1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f0:	1136      	asrs	r6, r6, #4
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2502      	movs	r5, #2
 800e1f6:	2e00      	cmp	r6, #0
 800e1f8:	d17e      	bne.n	800e2f8 <_dtoa_r+0x4d8>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1d0      	bne.n	800e1a0 <_dtoa_r+0x380>
 800e1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e200:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 8084 	beq.w	800e312 <_dtoa_r+0x4f2>
 800e20a:	4b96      	ldr	r3, [pc, #600]	; (800e464 <_dtoa_r+0x644>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	4640      	mov	r0, r8
 800e210:	4649      	mov	r1, r9
 800e212:	f7f2 fc83 	bl	8000b1c <__aeabi_dcmplt>
 800e216:	2800      	cmp	r0, #0
 800e218:	d07b      	beq.n	800e312 <_dtoa_r+0x4f2>
 800e21a:	9b04      	ldr	r3, [sp, #16]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d078      	beq.n	800e312 <_dtoa_r+0x4f2>
 800e220:	9b01      	ldr	r3, [sp, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	dd39      	ble.n	800e29a <_dtoa_r+0x47a>
 800e226:	4b90      	ldr	r3, [pc, #576]	; (800e468 <_dtoa_r+0x648>)
 800e228:	2200      	movs	r2, #0
 800e22a:	4640      	mov	r0, r8
 800e22c:	4649      	mov	r1, r9
 800e22e:	f7f2 fa03 	bl	8000638 <__aeabi_dmul>
 800e232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e236:	9e01      	ldr	r6, [sp, #4]
 800e238:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e23c:	3501      	adds	r5, #1
 800e23e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e242:	4628      	mov	r0, r5
 800e244:	f7f2 f98e 	bl	8000564 <__aeabi_i2d>
 800e248:	4642      	mov	r2, r8
 800e24a:	464b      	mov	r3, r9
 800e24c:	f7f2 f9f4 	bl	8000638 <__aeabi_dmul>
 800e250:	4b86      	ldr	r3, [pc, #536]	; (800e46c <_dtoa_r+0x64c>)
 800e252:	2200      	movs	r2, #0
 800e254:	f7f2 f83a 	bl	80002cc <__adddf3>
 800e258:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e260:	9303      	str	r3, [sp, #12]
 800e262:	2e00      	cmp	r6, #0
 800e264:	d158      	bne.n	800e318 <_dtoa_r+0x4f8>
 800e266:	4b82      	ldr	r3, [pc, #520]	; (800e470 <_dtoa_r+0x650>)
 800e268:	2200      	movs	r2, #0
 800e26a:	4640      	mov	r0, r8
 800e26c:	4649      	mov	r1, r9
 800e26e:	f7f2 f82b 	bl	80002c8 <__aeabi_dsub>
 800e272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e276:	4680      	mov	r8, r0
 800e278:	4689      	mov	r9, r1
 800e27a:	f7f2 fc6d 	bl	8000b58 <__aeabi_dcmpgt>
 800e27e:	2800      	cmp	r0, #0
 800e280:	f040 8296 	bne.w	800e7b0 <_dtoa_r+0x990>
 800e284:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e288:	4640      	mov	r0, r8
 800e28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e28e:	4649      	mov	r1, r9
 800e290:	f7f2 fc44 	bl	8000b1c <__aeabi_dcmplt>
 800e294:	2800      	cmp	r0, #0
 800e296:	f040 8289 	bne.w	800e7ac <_dtoa_r+0x98c>
 800e29a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e29e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f2c0 814e 	blt.w	800e542 <_dtoa_r+0x722>
 800e2a6:	f1bb 0f0e 	cmp.w	fp, #14
 800e2aa:	f300 814a 	bgt.w	800e542 <_dtoa_r+0x722>
 800e2ae:	4b6b      	ldr	r3, [pc, #428]	; (800e45c <_dtoa_r+0x63c>)
 800e2b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e2b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f280 80dc 	bge.w	800e478 <_dtoa_r+0x658>
 800e2c0:	9b04      	ldr	r3, [sp, #16]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f300 80d8 	bgt.w	800e478 <_dtoa_r+0x658>
 800e2c8:	f040 826f 	bne.w	800e7aa <_dtoa_r+0x98a>
 800e2cc:	4b68      	ldr	r3, [pc, #416]	; (800e470 <_dtoa_r+0x650>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7f2 f9b0 	bl	8000638 <__aeabi_dmul>
 800e2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2dc:	f7f2 fc32 	bl	8000b44 <__aeabi_dcmpge>
 800e2e0:	9e04      	ldr	r6, [sp, #16]
 800e2e2:	4637      	mov	r7, r6
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	f040 8245 	bne.w	800e774 <_dtoa_r+0x954>
 800e2ea:	9d00      	ldr	r5, [sp, #0]
 800e2ec:	2331      	movs	r3, #49	; 0x31
 800e2ee:	f805 3b01 	strb.w	r3, [r5], #1
 800e2f2:	f10b 0b01 	add.w	fp, fp, #1
 800e2f6:	e241      	b.n	800e77c <_dtoa_r+0x95c>
 800e2f8:	07f2      	lsls	r2, r6, #31
 800e2fa:	d505      	bpl.n	800e308 <_dtoa_r+0x4e8>
 800e2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e300:	f7f2 f99a 	bl	8000638 <__aeabi_dmul>
 800e304:	3501      	adds	r5, #1
 800e306:	2301      	movs	r3, #1
 800e308:	1076      	asrs	r6, r6, #1
 800e30a:	3708      	adds	r7, #8
 800e30c:	e773      	b.n	800e1f6 <_dtoa_r+0x3d6>
 800e30e:	2502      	movs	r5, #2
 800e310:	e775      	b.n	800e1fe <_dtoa_r+0x3de>
 800e312:	9e04      	ldr	r6, [sp, #16]
 800e314:	465f      	mov	r7, fp
 800e316:	e792      	b.n	800e23e <_dtoa_r+0x41e>
 800e318:	9900      	ldr	r1, [sp, #0]
 800e31a:	4b50      	ldr	r3, [pc, #320]	; (800e45c <_dtoa_r+0x63c>)
 800e31c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e320:	4431      	add	r1, r6
 800e322:	9102      	str	r1, [sp, #8]
 800e324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e326:	eeb0 9a47 	vmov.f32	s18, s14
 800e32a:	eef0 9a67 	vmov.f32	s19, s15
 800e32e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e332:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e336:	2900      	cmp	r1, #0
 800e338:	d044      	beq.n	800e3c4 <_dtoa_r+0x5a4>
 800e33a:	494e      	ldr	r1, [pc, #312]	; (800e474 <_dtoa_r+0x654>)
 800e33c:	2000      	movs	r0, #0
 800e33e:	f7f2 faa5 	bl	800088c <__aeabi_ddiv>
 800e342:	ec53 2b19 	vmov	r2, r3, d9
 800e346:	f7f1 ffbf 	bl	80002c8 <__aeabi_dsub>
 800e34a:	9d00      	ldr	r5, [sp, #0]
 800e34c:	ec41 0b19 	vmov	d9, r0, r1
 800e350:	4649      	mov	r1, r9
 800e352:	4640      	mov	r0, r8
 800e354:	f7f2 fc20 	bl	8000b98 <__aeabi_d2iz>
 800e358:	4606      	mov	r6, r0
 800e35a:	f7f2 f903 	bl	8000564 <__aeabi_i2d>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4640      	mov	r0, r8
 800e364:	4649      	mov	r1, r9
 800e366:	f7f1 ffaf 	bl	80002c8 <__aeabi_dsub>
 800e36a:	3630      	adds	r6, #48	; 0x30
 800e36c:	f805 6b01 	strb.w	r6, [r5], #1
 800e370:	ec53 2b19 	vmov	r2, r3, d9
 800e374:	4680      	mov	r8, r0
 800e376:	4689      	mov	r9, r1
 800e378:	f7f2 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d164      	bne.n	800e44a <_dtoa_r+0x62a>
 800e380:	4642      	mov	r2, r8
 800e382:	464b      	mov	r3, r9
 800e384:	4937      	ldr	r1, [pc, #220]	; (800e464 <_dtoa_r+0x644>)
 800e386:	2000      	movs	r0, #0
 800e388:	f7f1 ff9e 	bl	80002c8 <__aeabi_dsub>
 800e38c:	ec53 2b19 	vmov	r2, r3, d9
 800e390:	f7f2 fbc4 	bl	8000b1c <__aeabi_dcmplt>
 800e394:	2800      	cmp	r0, #0
 800e396:	f040 80b6 	bne.w	800e506 <_dtoa_r+0x6e6>
 800e39a:	9b02      	ldr	r3, [sp, #8]
 800e39c:	429d      	cmp	r5, r3
 800e39e:	f43f af7c 	beq.w	800e29a <_dtoa_r+0x47a>
 800e3a2:	4b31      	ldr	r3, [pc, #196]	; (800e468 <_dtoa_r+0x648>)
 800e3a4:	ec51 0b19 	vmov	r0, r1, d9
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f7f2 f945 	bl	8000638 <__aeabi_dmul>
 800e3ae:	4b2e      	ldr	r3, [pc, #184]	; (800e468 <_dtoa_r+0x648>)
 800e3b0:	ec41 0b19 	vmov	d9, r0, r1
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	4640      	mov	r0, r8
 800e3b8:	4649      	mov	r1, r9
 800e3ba:	f7f2 f93d 	bl	8000638 <__aeabi_dmul>
 800e3be:	4680      	mov	r8, r0
 800e3c0:	4689      	mov	r9, r1
 800e3c2:	e7c5      	b.n	800e350 <_dtoa_r+0x530>
 800e3c4:	ec51 0b17 	vmov	r0, r1, d7
 800e3c8:	f7f2 f936 	bl	8000638 <__aeabi_dmul>
 800e3cc:	9b02      	ldr	r3, [sp, #8]
 800e3ce:	9d00      	ldr	r5, [sp, #0]
 800e3d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3d2:	ec41 0b19 	vmov	d9, r0, r1
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	4640      	mov	r0, r8
 800e3da:	f7f2 fbdd 	bl	8000b98 <__aeabi_d2iz>
 800e3de:	4606      	mov	r6, r0
 800e3e0:	f7f2 f8c0 	bl	8000564 <__aeabi_i2d>
 800e3e4:	3630      	adds	r6, #48	; 0x30
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4640      	mov	r0, r8
 800e3ec:	4649      	mov	r1, r9
 800e3ee:	f7f1 ff6b 	bl	80002c8 <__aeabi_dsub>
 800e3f2:	f805 6b01 	strb.w	r6, [r5], #1
 800e3f6:	9b02      	ldr	r3, [sp, #8]
 800e3f8:	429d      	cmp	r5, r3
 800e3fa:	4680      	mov	r8, r0
 800e3fc:	4689      	mov	r9, r1
 800e3fe:	f04f 0200 	mov.w	r2, #0
 800e402:	d124      	bne.n	800e44e <_dtoa_r+0x62e>
 800e404:	4b1b      	ldr	r3, [pc, #108]	; (800e474 <_dtoa_r+0x654>)
 800e406:	ec51 0b19 	vmov	r0, r1, d9
 800e40a:	f7f1 ff5f 	bl	80002cc <__adddf3>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4640      	mov	r0, r8
 800e414:	4649      	mov	r1, r9
 800e416:	f7f2 fb9f 	bl	8000b58 <__aeabi_dcmpgt>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d173      	bne.n	800e506 <_dtoa_r+0x6e6>
 800e41e:	ec53 2b19 	vmov	r2, r3, d9
 800e422:	4914      	ldr	r1, [pc, #80]	; (800e474 <_dtoa_r+0x654>)
 800e424:	2000      	movs	r0, #0
 800e426:	f7f1 ff4f 	bl	80002c8 <__aeabi_dsub>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4640      	mov	r0, r8
 800e430:	4649      	mov	r1, r9
 800e432:	f7f2 fb73 	bl	8000b1c <__aeabi_dcmplt>
 800e436:	2800      	cmp	r0, #0
 800e438:	f43f af2f 	beq.w	800e29a <_dtoa_r+0x47a>
 800e43c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e43e:	1e6b      	subs	r3, r5, #1
 800e440:	930f      	str	r3, [sp, #60]	; 0x3c
 800e442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e446:	2b30      	cmp	r3, #48	; 0x30
 800e448:	d0f8      	beq.n	800e43c <_dtoa_r+0x61c>
 800e44a:	46bb      	mov	fp, r7
 800e44c:	e04a      	b.n	800e4e4 <_dtoa_r+0x6c4>
 800e44e:	4b06      	ldr	r3, [pc, #24]	; (800e468 <_dtoa_r+0x648>)
 800e450:	f7f2 f8f2 	bl	8000638 <__aeabi_dmul>
 800e454:	4680      	mov	r8, r0
 800e456:	4689      	mov	r9, r1
 800e458:	e7bd      	b.n	800e3d6 <_dtoa_r+0x5b6>
 800e45a:	bf00      	nop
 800e45c:	08015780 	.word	0x08015780
 800e460:	08015758 	.word	0x08015758
 800e464:	3ff00000 	.word	0x3ff00000
 800e468:	40240000 	.word	0x40240000
 800e46c:	401c0000 	.word	0x401c0000
 800e470:	40140000 	.word	0x40140000
 800e474:	3fe00000 	.word	0x3fe00000
 800e478:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e47c:	9d00      	ldr	r5, [sp, #0]
 800e47e:	4642      	mov	r2, r8
 800e480:	464b      	mov	r3, r9
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f2 fa01 	bl	800088c <__aeabi_ddiv>
 800e48a:	f7f2 fb85 	bl	8000b98 <__aeabi_d2iz>
 800e48e:	9001      	str	r0, [sp, #4]
 800e490:	f7f2 f868 	bl	8000564 <__aeabi_i2d>
 800e494:	4642      	mov	r2, r8
 800e496:	464b      	mov	r3, r9
 800e498:	f7f2 f8ce 	bl	8000638 <__aeabi_dmul>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	f7f1 ff10 	bl	80002c8 <__aeabi_dsub>
 800e4a8:	9e01      	ldr	r6, [sp, #4]
 800e4aa:	9f04      	ldr	r7, [sp, #16]
 800e4ac:	3630      	adds	r6, #48	; 0x30
 800e4ae:	f805 6b01 	strb.w	r6, [r5], #1
 800e4b2:	9e00      	ldr	r6, [sp, #0]
 800e4b4:	1bae      	subs	r6, r5, r6
 800e4b6:	42b7      	cmp	r7, r6
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	d134      	bne.n	800e528 <_dtoa_r+0x708>
 800e4be:	f7f1 ff05 	bl	80002cc <__adddf3>
 800e4c2:	4642      	mov	r2, r8
 800e4c4:	464b      	mov	r3, r9
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	460f      	mov	r7, r1
 800e4ca:	f7f2 fb45 	bl	8000b58 <__aeabi_dcmpgt>
 800e4ce:	b9c8      	cbnz	r0, 800e504 <_dtoa_r+0x6e4>
 800e4d0:	4642      	mov	r2, r8
 800e4d2:	464b      	mov	r3, r9
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 fb16 	bl	8000b08 <__aeabi_dcmpeq>
 800e4dc:	b110      	cbz	r0, 800e4e4 <_dtoa_r+0x6c4>
 800e4de:	9b01      	ldr	r3, [sp, #4]
 800e4e0:	07db      	lsls	r3, r3, #31
 800e4e2:	d40f      	bmi.n	800e504 <_dtoa_r+0x6e4>
 800e4e4:	4651      	mov	r1, sl
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f001 f9bc 	bl	800f864 <_Bfree>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4f0:	702b      	strb	r3, [r5, #0]
 800e4f2:	f10b 0301 	add.w	r3, fp, #1
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f43f ace2 	beq.w	800dec4 <_dtoa_r+0xa4>
 800e500:	601d      	str	r5, [r3, #0]
 800e502:	e4df      	b.n	800dec4 <_dtoa_r+0xa4>
 800e504:	465f      	mov	r7, fp
 800e506:	462b      	mov	r3, r5
 800e508:	461d      	mov	r5, r3
 800e50a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e50e:	2a39      	cmp	r2, #57	; 0x39
 800e510:	d106      	bne.n	800e520 <_dtoa_r+0x700>
 800e512:	9a00      	ldr	r2, [sp, #0]
 800e514:	429a      	cmp	r2, r3
 800e516:	d1f7      	bne.n	800e508 <_dtoa_r+0x6e8>
 800e518:	9900      	ldr	r1, [sp, #0]
 800e51a:	2230      	movs	r2, #48	; 0x30
 800e51c:	3701      	adds	r7, #1
 800e51e:	700a      	strb	r2, [r1, #0]
 800e520:	781a      	ldrb	r2, [r3, #0]
 800e522:	3201      	adds	r2, #1
 800e524:	701a      	strb	r2, [r3, #0]
 800e526:	e790      	b.n	800e44a <_dtoa_r+0x62a>
 800e528:	4ba3      	ldr	r3, [pc, #652]	; (800e7b8 <_dtoa_r+0x998>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	f7f2 f884 	bl	8000638 <__aeabi_dmul>
 800e530:	2200      	movs	r2, #0
 800e532:	2300      	movs	r3, #0
 800e534:	4606      	mov	r6, r0
 800e536:	460f      	mov	r7, r1
 800e538:	f7f2 fae6 	bl	8000b08 <__aeabi_dcmpeq>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d09e      	beq.n	800e47e <_dtoa_r+0x65e>
 800e540:	e7d0      	b.n	800e4e4 <_dtoa_r+0x6c4>
 800e542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e544:	2a00      	cmp	r2, #0
 800e546:	f000 80ca 	beq.w	800e6de <_dtoa_r+0x8be>
 800e54a:	9a07      	ldr	r2, [sp, #28]
 800e54c:	2a01      	cmp	r2, #1
 800e54e:	f300 80ad 	bgt.w	800e6ac <_dtoa_r+0x88c>
 800e552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e554:	2a00      	cmp	r2, #0
 800e556:	f000 80a5 	beq.w	800e6a4 <_dtoa_r+0x884>
 800e55a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e55e:	9e08      	ldr	r6, [sp, #32]
 800e560:	9d05      	ldr	r5, [sp, #20]
 800e562:	9a05      	ldr	r2, [sp, #20]
 800e564:	441a      	add	r2, r3
 800e566:	9205      	str	r2, [sp, #20]
 800e568:	9a06      	ldr	r2, [sp, #24]
 800e56a:	2101      	movs	r1, #1
 800e56c:	441a      	add	r2, r3
 800e56e:	4620      	mov	r0, r4
 800e570:	9206      	str	r2, [sp, #24]
 800e572:	f001 fa2d 	bl	800f9d0 <__i2b>
 800e576:	4607      	mov	r7, r0
 800e578:	b165      	cbz	r5, 800e594 <_dtoa_r+0x774>
 800e57a:	9b06      	ldr	r3, [sp, #24]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	dd09      	ble.n	800e594 <_dtoa_r+0x774>
 800e580:	42ab      	cmp	r3, r5
 800e582:	9a05      	ldr	r2, [sp, #20]
 800e584:	bfa8      	it	ge
 800e586:	462b      	movge	r3, r5
 800e588:	1ad2      	subs	r2, r2, r3
 800e58a:	9205      	str	r2, [sp, #20]
 800e58c:	9a06      	ldr	r2, [sp, #24]
 800e58e:	1aed      	subs	r5, r5, r3
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	9306      	str	r3, [sp, #24]
 800e594:	9b08      	ldr	r3, [sp, #32]
 800e596:	b1f3      	cbz	r3, 800e5d6 <_dtoa_r+0x7b6>
 800e598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 80a3 	beq.w	800e6e6 <_dtoa_r+0x8c6>
 800e5a0:	2e00      	cmp	r6, #0
 800e5a2:	dd10      	ble.n	800e5c6 <_dtoa_r+0x7a6>
 800e5a4:	4639      	mov	r1, r7
 800e5a6:	4632      	mov	r2, r6
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f001 fad1 	bl	800fb50 <__pow5mult>
 800e5ae:	4652      	mov	r2, sl
 800e5b0:	4601      	mov	r1, r0
 800e5b2:	4607      	mov	r7, r0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f001 fa21 	bl	800f9fc <__multiply>
 800e5ba:	4651      	mov	r1, sl
 800e5bc:	4680      	mov	r8, r0
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f001 f950 	bl	800f864 <_Bfree>
 800e5c4:	46c2      	mov	sl, r8
 800e5c6:	9b08      	ldr	r3, [sp, #32]
 800e5c8:	1b9a      	subs	r2, r3, r6
 800e5ca:	d004      	beq.n	800e5d6 <_dtoa_r+0x7b6>
 800e5cc:	4651      	mov	r1, sl
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f001 fabe 	bl	800fb50 <__pow5mult>
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f001 f9f9 	bl	800f9d0 <__i2b>
 800e5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	f340 8081 	ble.w	800e6ea <_dtoa_r+0x8ca>
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4601      	mov	r1, r0
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f001 faaf 	bl	800fb50 <__pow5mult>
 800e5f2:	9b07      	ldr	r3, [sp, #28]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	dd7a      	ble.n	800e6f0 <_dtoa_r+0x8d0>
 800e5fa:	f04f 0800 	mov.w	r8, #0
 800e5fe:	6933      	ldr	r3, [r6, #16]
 800e600:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e604:	6918      	ldr	r0, [r3, #16]
 800e606:	f001 f995 	bl	800f934 <__hi0bits>
 800e60a:	f1c0 0020 	rsb	r0, r0, #32
 800e60e:	9b06      	ldr	r3, [sp, #24]
 800e610:	4418      	add	r0, r3
 800e612:	f010 001f 	ands.w	r0, r0, #31
 800e616:	f000 8094 	beq.w	800e742 <_dtoa_r+0x922>
 800e61a:	f1c0 0320 	rsb	r3, r0, #32
 800e61e:	2b04      	cmp	r3, #4
 800e620:	f340 8085 	ble.w	800e72e <_dtoa_r+0x90e>
 800e624:	9b05      	ldr	r3, [sp, #20]
 800e626:	f1c0 001c 	rsb	r0, r0, #28
 800e62a:	4403      	add	r3, r0
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	9b06      	ldr	r3, [sp, #24]
 800e630:	4403      	add	r3, r0
 800e632:	4405      	add	r5, r0
 800e634:	9306      	str	r3, [sp, #24]
 800e636:	9b05      	ldr	r3, [sp, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	dd05      	ble.n	800e648 <_dtoa_r+0x828>
 800e63c:	4651      	mov	r1, sl
 800e63e:	461a      	mov	r2, r3
 800e640:	4620      	mov	r0, r4
 800e642:	f001 fadf 	bl	800fc04 <__lshift>
 800e646:	4682      	mov	sl, r0
 800e648:	9b06      	ldr	r3, [sp, #24]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	dd05      	ble.n	800e65a <_dtoa_r+0x83a>
 800e64e:	4631      	mov	r1, r6
 800e650:	461a      	mov	r2, r3
 800e652:	4620      	mov	r0, r4
 800e654:	f001 fad6 	bl	800fc04 <__lshift>
 800e658:	4606      	mov	r6, r0
 800e65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d072      	beq.n	800e746 <_dtoa_r+0x926>
 800e660:	4631      	mov	r1, r6
 800e662:	4650      	mov	r0, sl
 800e664:	f001 fb3a 	bl	800fcdc <__mcmp>
 800e668:	2800      	cmp	r0, #0
 800e66a:	da6c      	bge.n	800e746 <_dtoa_r+0x926>
 800e66c:	2300      	movs	r3, #0
 800e66e:	4651      	mov	r1, sl
 800e670:	220a      	movs	r2, #10
 800e672:	4620      	mov	r0, r4
 800e674:	f001 f918 	bl	800f8a8 <__multadd>
 800e678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e67a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e67e:	4682      	mov	sl, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 81b0 	beq.w	800e9e6 <_dtoa_r+0xbc6>
 800e686:	2300      	movs	r3, #0
 800e688:	4639      	mov	r1, r7
 800e68a:	220a      	movs	r2, #10
 800e68c:	4620      	mov	r0, r4
 800e68e:	f001 f90b 	bl	800f8a8 <__multadd>
 800e692:	9b01      	ldr	r3, [sp, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	4607      	mov	r7, r0
 800e698:	f300 8096 	bgt.w	800e7c8 <_dtoa_r+0x9a8>
 800e69c:	9b07      	ldr	r3, [sp, #28]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	dc59      	bgt.n	800e756 <_dtoa_r+0x936>
 800e6a2:	e091      	b.n	800e7c8 <_dtoa_r+0x9a8>
 800e6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6aa:	e758      	b.n	800e55e <_dtoa_r+0x73e>
 800e6ac:	9b04      	ldr	r3, [sp, #16]
 800e6ae:	1e5e      	subs	r6, r3, #1
 800e6b0:	9b08      	ldr	r3, [sp, #32]
 800e6b2:	42b3      	cmp	r3, r6
 800e6b4:	bfbf      	itttt	lt
 800e6b6:	9b08      	ldrlt	r3, [sp, #32]
 800e6b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e6ba:	9608      	strlt	r6, [sp, #32]
 800e6bc:	1af3      	sublt	r3, r6, r3
 800e6be:	bfb4      	ite	lt
 800e6c0:	18d2      	addlt	r2, r2, r3
 800e6c2:	1b9e      	subge	r6, r3, r6
 800e6c4:	9b04      	ldr	r3, [sp, #16]
 800e6c6:	bfbc      	itt	lt
 800e6c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e6ca:	2600      	movlt	r6, #0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfb7      	itett	lt
 800e6d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e6d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e6d8:	1a9d      	sublt	r5, r3, r2
 800e6da:	2300      	movlt	r3, #0
 800e6dc:	e741      	b.n	800e562 <_dtoa_r+0x742>
 800e6de:	9e08      	ldr	r6, [sp, #32]
 800e6e0:	9d05      	ldr	r5, [sp, #20]
 800e6e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e6e4:	e748      	b.n	800e578 <_dtoa_r+0x758>
 800e6e6:	9a08      	ldr	r2, [sp, #32]
 800e6e8:	e770      	b.n	800e5cc <_dtoa_r+0x7ac>
 800e6ea:	9b07      	ldr	r3, [sp, #28]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	dc19      	bgt.n	800e724 <_dtoa_r+0x904>
 800e6f0:	9b02      	ldr	r3, [sp, #8]
 800e6f2:	b9bb      	cbnz	r3, 800e724 <_dtoa_r+0x904>
 800e6f4:	9b03      	ldr	r3, [sp, #12]
 800e6f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6fa:	b99b      	cbnz	r3, 800e724 <_dtoa_r+0x904>
 800e6fc:	9b03      	ldr	r3, [sp, #12]
 800e6fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e702:	0d1b      	lsrs	r3, r3, #20
 800e704:	051b      	lsls	r3, r3, #20
 800e706:	b183      	cbz	r3, 800e72a <_dtoa_r+0x90a>
 800e708:	9b05      	ldr	r3, [sp, #20]
 800e70a:	3301      	adds	r3, #1
 800e70c:	9305      	str	r3, [sp, #20]
 800e70e:	9b06      	ldr	r3, [sp, #24]
 800e710:	3301      	adds	r3, #1
 800e712:	9306      	str	r3, [sp, #24]
 800e714:	f04f 0801 	mov.w	r8, #1
 800e718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f47f af6f 	bne.w	800e5fe <_dtoa_r+0x7de>
 800e720:	2001      	movs	r0, #1
 800e722:	e774      	b.n	800e60e <_dtoa_r+0x7ee>
 800e724:	f04f 0800 	mov.w	r8, #0
 800e728:	e7f6      	b.n	800e718 <_dtoa_r+0x8f8>
 800e72a:	4698      	mov	r8, r3
 800e72c:	e7f4      	b.n	800e718 <_dtoa_r+0x8f8>
 800e72e:	d082      	beq.n	800e636 <_dtoa_r+0x816>
 800e730:	9a05      	ldr	r2, [sp, #20]
 800e732:	331c      	adds	r3, #28
 800e734:	441a      	add	r2, r3
 800e736:	9205      	str	r2, [sp, #20]
 800e738:	9a06      	ldr	r2, [sp, #24]
 800e73a:	441a      	add	r2, r3
 800e73c:	441d      	add	r5, r3
 800e73e:	9206      	str	r2, [sp, #24]
 800e740:	e779      	b.n	800e636 <_dtoa_r+0x816>
 800e742:	4603      	mov	r3, r0
 800e744:	e7f4      	b.n	800e730 <_dtoa_r+0x910>
 800e746:	9b04      	ldr	r3, [sp, #16]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	dc37      	bgt.n	800e7bc <_dtoa_r+0x99c>
 800e74c:	9b07      	ldr	r3, [sp, #28]
 800e74e:	2b02      	cmp	r3, #2
 800e750:	dd34      	ble.n	800e7bc <_dtoa_r+0x99c>
 800e752:	9b04      	ldr	r3, [sp, #16]
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	b963      	cbnz	r3, 800e774 <_dtoa_r+0x954>
 800e75a:	4631      	mov	r1, r6
 800e75c:	2205      	movs	r2, #5
 800e75e:	4620      	mov	r0, r4
 800e760:	f001 f8a2 	bl	800f8a8 <__multadd>
 800e764:	4601      	mov	r1, r0
 800e766:	4606      	mov	r6, r0
 800e768:	4650      	mov	r0, sl
 800e76a:	f001 fab7 	bl	800fcdc <__mcmp>
 800e76e:	2800      	cmp	r0, #0
 800e770:	f73f adbb 	bgt.w	800e2ea <_dtoa_r+0x4ca>
 800e774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e776:	9d00      	ldr	r5, [sp, #0]
 800e778:	ea6f 0b03 	mvn.w	fp, r3
 800e77c:	f04f 0800 	mov.w	r8, #0
 800e780:	4631      	mov	r1, r6
 800e782:	4620      	mov	r0, r4
 800e784:	f001 f86e 	bl	800f864 <_Bfree>
 800e788:	2f00      	cmp	r7, #0
 800e78a:	f43f aeab 	beq.w	800e4e4 <_dtoa_r+0x6c4>
 800e78e:	f1b8 0f00 	cmp.w	r8, #0
 800e792:	d005      	beq.n	800e7a0 <_dtoa_r+0x980>
 800e794:	45b8      	cmp	r8, r7
 800e796:	d003      	beq.n	800e7a0 <_dtoa_r+0x980>
 800e798:	4641      	mov	r1, r8
 800e79a:	4620      	mov	r0, r4
 800e79c:	f001 f862 	bl	800f864 <_Bfree>
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f001 f85e 	bl	800f864 <_Bfree>
 800e7a8:	e69c      	b.n	800e4e4 <_dtoa_r+0x6c4>
 800e7aa:	2600      	movs	r6, #0
 800e7ac:	4637      	mov	r7, r6
 800e7ae:	e7e1      	b.n	800e774 <_dtoa_r+0x954>
 800e7b0:	46bb      	mov	fp, r7
 800e7b2:	4637      	mov	r7, r6
 800e7b4:	e599      	b.n	800e2ea <_dtoa_r+0x4ca>
 800e7b6:	bf00      	nop
 800e7b8:	40240000 	.word	0x40240000
 800e7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f000 80c8 	beq.w	800e954 <_dtoa_r+0xb34>
 800e7c4:	9b04      	ldr	r3, [sp, #16]
 800e7c6:	9301      	str	r3, [sp, #4]
 800e7c8:	2d00      	cmp	r5, #0
 800e7ca:	dd05      	ble.n	800e7d8 <_dtoa_r+0x9b8>
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f001 fa17 	bl	800fc04 <__lshift>
 800e7d6:	4607      	mov	r7, r0
 800e7d8:	f1b8 0f00 	cmp.w	r8, #0
 800e7dc:	d05b      	beq.n	800e896 <_dtoa_r+0xa76>
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f000 ffff 	bl	800f7e4 <_Balloc>
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	b928      	cbnz	r0, 800e7f6 <_dtoa_r+0x9d6>
 800e7ea:	4b83      	ldr	r3, [pc, #524]	; (800e9f8 <_dtoa_r+0xbd8>)
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e7f2:	f7ff bb2e 	b.w	800de52 <_dtoa_r+0x32>
 800e7f6:	693a      	ldr	r2, [r7, #16]
 800e7f8:	3202      	adds	r2, #2
 800e7fa:	0092      	lsls	r2, r2, #2
 800e7fc:	f107 010c 	add.w	r1, r7, #12
 800e800:	300c      	adds	r0, #12
 800e802:	f7ff fa56 	bl	800dcb2 <memcpy>
 800e806:	2201      	movs	r2, #1
 800e808:	4629      	mov	r1, r5
 800e80a:	4620      	mov	r0, r4
 800e80c:	f001 f9fa 	bl	800fc04 <__lshift>
 800e810:	9b00      	ldr	r3, [sp, #0]
 800e812:	3301      	adds	r3, #1
 800e814:	9304      	str	r3, [sp, #16]
 800e816:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e81a:	4413      	add	r3, r2
 800e81c:	9308      	str	r3, [sp, #32]
 800e81e:	9b02      	ldr	r3, [sp, #8]
 800e820:	f003 0301 	and.w	r3, r3, #1
 800e824:	46b8      	mov	r8, r7
 800e826:	9306      	str	r3, [sp, #24]
 800e828:	4607      	mov	r7, r0
 800e82a:	9b04      	ldr	r3, [sp, #16]
 800e82c:	4631      	mov	r1, r6
 800e82e:	3b01      	subs	r3, #1
 800e830:	4650      	mov	r0, sl
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	f7ff fa6a 	bl	800dd0c <quorem>
 800e838:	4641      	mov	r1, r8
 800e83a:	9002      	str	r0, [sp, #8]
 800e83c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e840:	4650      	mov	r0, sl
 800e842:	f001 fa4b 	bl	800fcdc <__mcmp>
 800e846:	463a      	mov	r2, r7
 800e848:	9005      	str	r0, [sp, #20]
 800e84a:	4631      	mov	r1, r6
 800e84c:	4620      	mov	r0, r4
 800e84e:	f001 fa61 	bl	800fd14 <__mdiff>
 800e852:	68c2      	ldr	r2, [r0, #12]
 800e854:	4605      	mov	r5, r0
 800e856:	bb02      	cbnz	r2, 800e89a <_dtoa_r+0xa7a>
 800e858:	4601      	mov	r1, r0
 800e85a:	4650      	mov	r0, sl
 800e85c:	f001 fa3e 	bl	800fcdc <__mcmp>
 800e860:	4602      	mov	r2, r0
 800e862:	4629      	mov	r1, r5
 800e864:	4620      	mov	r0, r4
 800e866:	9209      	str	r2, [sp, #36]	; 0x24
 800e868:	f000 fffc 	bl	800f864 <_Bfree>
 800e86c:	9b07      	ldr	r3, [sp, #28]
 800e86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e870:	9d04      	ldr	r5, [sp, #16]
 800e872:	ea43 0102 	orr.w	r1, r3, r2
 800e876:	9b06      	ldr	r3, [sp, #24]
 800e878:	4319      	orrs	r1, r3
 800e87a:	d110      	bne.n	800e89e <_dtoa_r+0xa7e>
 800e87c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e880:	d029      	beq.n	800e8d6 <_dtoa_r+0xab6>
 800e882:	9b05      	ldr	r3, [sp, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd02      	ble.n	800e88e <_dtoa_r+0xa6e>
 800e888:	9b02      	ldr	r3, [sp, #8]
 800e88a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e88e:	9b01      	ldr	r3, [sp, #4]
 800e890:	f883 9000 	strb.w	r9, [r3]
 800e894:	e774      	b.n	800e780 <_dtoa_r+0x960>
 800e896:	4638      	mov	r0, r7
 800e898:	e7ba      	b.n	800e810 <_dtoa_r+0x9f0>
 800e89a:	2201      	movs	r2, #1
 800e89c:	e7e1      	b.n	800e862 <_dtoa_r+0xa42>
 800e89e:	9b05      	ldr	r3, [sp, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	db04      	blt.n	800e8ae <_dtoa_r+0xa8e>
 800e8a4:	9907      	ldr	r1, [sp, #28]
 800e8a6:	430b      	orrs	r3, r1
 800e8a8:	9906      	ldr	r1, [sp, #24]
 800e8aa:	430b      	orrs	r3, r1
 800e8ac:	d120      	bne.n	800e8f0 <_dtoa_r+0xad0>
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	dded      	ble.n	800e88e <_dtoa_r+0xa6e>
 800e8b2:	4651      	mov	r1, sl
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f001 f9a4 	bl	800fc04 <__lshift>
 800e8bc:	4631      	mov	r1, r6
 800e8be:	4682      	mov	sl, r0
 800e8c0:	f001 fa0c 	bl	800fcdc <__mcmp>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	dc03      	bgt.n	800e8d0 <_dtoa_r+0xab0>
 800e8c8:	d1e1      	bne.n	800e88e <_dtoa_r+0xa6e>
 800e8ca:	f019 0f01 	tst.w	r9, #1
 800e8ce:	d0de      	beq.n	800e88e <_dtoa_r+0xa6e>
 800e8d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8d4:	d1d8      	bne.n	800e888 <_dtoa_r+0xa68>
 800e8d6:	9a01      	ldr	r2, [sp, #4]
 800e8d8:	2339      	movs	r3, #57	; 0x39
 800e8da:	7013      	strb	r3, [r2, #0]
 800e8dc:	462b      	mov	r3, r5
 800e8de:	461d      	mov	r5, r3
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e8e6:	2a39      	cmp	r2, #57	; 0x39
 800e8e8:	d06c      	beq.n	800e9c4 <_dtoa_r+0xba4>
 800e8ea:	3201      	adds	r2, #1
 800e8ec:	701a      	strb	r2, [r3, #0]
 800e8ee:	e747      	b.n	800e780 <_dtoa_r+0x960>
 800e8f0:	2a00      	cmp	r2, #0
 800e8f2:	dd07      	ble.n	800e904 <_dtoa_r+0xae4>
 800e8f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8f8:	d0ed      	beq.n	800e8d6 <_dtoa_r+0xab6>
 800e8fa:	9a01      	ldr	r2, [sp, #4]
 800e8fc:	f109 0301 	add.w	r3, r9, #1
 800e900:	7013      	strb	r3, [r2, #0]
 800e902:	e73d      	b.n	800e780 <_dtoa_r+0x960>
 800e904:	9b04      	ldr	r3, [sp, #16]
 800e906:	9a08      	ldr	r2, [sp, #32]
 800e908:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d043      	beq.n	800e998 <_dtoa_r+0xb78>
 800e910:	4651      	mov	r1, sl
 800e912:	2300      	movs	r3, #0
 800e914:	220a      	movs	r2, #10
 800e916:	4620      	mov	r0, r4
 800e918:	f000 ffc6 	bl	800f8a8 <__multadd>
 800e91c:	45b8      	cmp	r8, r7
 800e91e:	4682      	mov	sl, r0
 800e920:	f04f 0300 	mov.w	r3, #0
 800e924:	f04f 020a 	mov.w	r2, #10
 800e928:	4641      	mov	r1, r8
 800e92a:	4620      	mov	r0, r4
 800e92c:	d107      	bne.n	800e93e <_dtoa_r+0xb1e>
 800e92e:	f000 ffbb 	bl	800f8a8 <__multadd>
 800e932:	4680      	mov	r8, r0
 800e934:	4607      	mov	r7, r0
 800e936:	9b04      	ldr	r3, [sp, #16]
 800e938:	3301      	adds	r3, #1
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	e775      	b.n	800e82a <_dtoa_r+0xa0a>
 800e93e:	f000 ffb3 	bl	800f8a8 <__multadd>
 800e942:	4639      	mov	r1, r7
 800e944:	4680      	mov	r8, r0
 800e946:	2300      	movs	r3, #0
 800e948:	220a      	movs	r2, #10
 800e94a:	4620      	mov	r0, r4
 800e94c:	f000 ffac 	bl	800f8a8 <__multadd>
 800e950:	4607      	mov	r7, r0
 800e952:	e7f0      	b.n	800e936 <_dtoa_r+0xb16>
 800e954:	9b04      	ldr	r3, [sp, #16]
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	9d00      	ldr	r5, [sp, #0]
 800e95a:	4631      	mov	r1, r6
 800e95c:	4650      	mov	r0, sl
 800e95e:	f7ff f9d5 	bl	800dd0c <quorem>
 800e962:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e966:	9b00      	ldr	r3, [sp, #0]
 800e968:	f805 9b01 	strb.w	r9, [r5], #1
 800e96c:	1aea      	subs	r2, r5, r3
 800e96e:	9b01      	ldr	r3, [sp, #4]
 800e970:	4293      	cmp	r3, r2
 800e972:	dd07      	ble.n	800e984 <_dtoa_r+0xb64>
 800e974:	4651      	mov	r1, sl
 800e976:	2300      	movs	r3, #0
 800e978:	220a      	movs	r2, #10
 800e97a:	4620      	mov	r0, r4
 800e97c:	f000 ff94 	bl	800f8a8 <__multadd>
 800e980:	4682      	mov	sl, r0
 800e982:	e7ea      	b.n	800e95a <_dtoa_r+0xb3a>
 800e984:	9b01      	ldr	r3, [sp, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	bfc8      	it	gt
 800e98a:	461d      	movgt	r5, r3
 800e98c:	9b00      	ldr	r3, [sp, #0]
 800e98e:	bfd8      	it	le
 800e990:	2501      	movle	r5, #1
 800e992:	441d      	add	r5, r3
 800e994:	f04f 0800 	mov.w	r8, #0
 800e998:	4651      	mov	r1, sl
 800e99a:	2201      	movs	r2, #1
 800e99c:	4620      	mov	r0, r4
 800e99e:	f001 f931 	bl	800fc04 <__lshift>
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	4682      	mov	sl, r0
 800e9a6:	f001 f999 	bl	800fcdc <__mcmp>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	dc96      	bgt.n	800e8dc <_dtoa_r+0xabc>
 800e9ae:	d102      	bne.n	800e9b6 <_dtoa_r+0xb96>
 800e9b0:	f019 0f01 	tst.w	r9, #1
 800e9b4:	d192      	bne.n	800e8dc <_dtoa_r+0xabc>
 800e9b6:	462b      	mov	r3, r5
 800e9b8:	461d      	mov	r5, r3
 800e9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9be:	2a30      	cmp	r2, #48	; 0x30
 800e9c0:	d0fa      	beq.n	800e9b8 <_dtoa_r+0xb98>
 800e9c2:	e6dd      	b.n	800e780 <_dtoa_r+0x960>
 800e9c4:	9a00      	ldr	r2, [sp, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d189      	bne.n	800e8de <_dtoa_r+0xabe>
 800e9ca:	f10b 0b01 	add.w	fp, fp, #1
 800e9ce:	2331      	movs	r3, #49	; 0x31
 800e9d0:	e796      	b.n	800e900 <_dtoa_r+0xae0>
 800e9d2:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <_dtoa_r+0xbdc>)
 800e9d4:	f7ff ba99 	b.w	800df0a <_dtoa_r+0xea>
 800e9d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f47f aa6d 	bne.w	800deba <_dtoa_r+0x9a>
 800e9e0:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <_dtoa_r+0xbe0>)
 800e9e2:	f7ff ba92 	b.w	800df0a <_dtoa_r+0xea>
 800e9e6:	9b01      	ldr	r3, [sp, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	dcb5      	bgt.n	800e958 <_dtoa_r+0xb38>
 800e9ec:	9b07      	ldr	r3, [sp, #28]
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	f73f aeb1 	bgt.w	800e756 <_dtoa_r+0x936>
 800e9f4:	e7b0      	b.n	800e958 <_dtoa_r+0xb38>
 800e9f6:	bf00      	nop
 800e9f8:	080156bb 	.word	0x080156bb
 800e9fc:	080156f3 	.word	0x080156f3
 800ea00:	0801563f 	.word	0x0801563f

0800ea04 <_free_r>:
 800ea04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea06:	2900      	cmp	r1, #0
 800ea08:	d044      	beq.n	800ea94 <_free_r+0x90>
 800ea0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea0e:	9001      	str	r0, [sp, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f1a1 0404 	sub.w	r4, r1, #4
 800ea16:	bfb8      	it	lt
 800ea18:	18e4      	addlt	r4, r4, r3
 800ea1a:	f7fe fe8b 	bl	800d734 <__malloc_lock>
 800ea1e:	4a1e      	ldr	r2, [pc, #120]	; (800ea98 <_free_r+0x94>)
 800ea20:	9801      	ldr	r0, [sp, #4]
 800ea22:	6813      	ldr	r3, [r2, #0]
 800ea24:	b933      	cbnz	r3, 800ea34 <_free_r+0x30>
 800ea26:	6063      	str	r3, [r4, #4]
 800ea28:	6014      	str	r4, [r2, #0]
 800ea2a:	b003      	add	sp, #12
 800ea2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea30:	f7fe be86 	b.w	800d740 <__malloc_unlock>
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	d908      	bls.n	800ea4a <_free_r+0x46>
 800ea38:	6825      	ldr	r5, [r4, #0]
 800ea3a:	1961      	adds	r1, r4, r5
 800ea3c:	428b      	cmp	r3, r1
 800ea3e:	bf01      	itttt	eq
 800ea40:	6819      	ldreq	r1, [r3, #0]
 800ea42:	685b      	ldreq	r3, [r3, #4]
 800ea44:	1949      	addeq	r1, r1, r5
 800ea46:	6021      	streq	r1, [r4, #0]
 800ea48:	e7ed      	b.n	800ea26 <_free_r+0x22>
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	b10b      	cbz	r3, 800ea54 <_free_r+0x50>
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	d9fa      	bls.n	800ea4a <_free_r+0x46>
 800ea54:	6811      	ldr	r1, [r2, #0]
 800ea56:	1855      	adds	r5, r2, r1
 800ea58:	42a5      	cmp	r5, r4
 800ea5a:	d10b      	bne.n	800ea74 <_free_r+0x70>
 800ea5c:	6824      	ldr	r4, [r4, #0]
 800ea5e:	4421      	add	r1, r4
 800ea60:	1854      	adds	r4, r2, r1
 800ea62:	42a3      	cmp	r3, r4
 800ea64:	6011      	str	r1, [r2, #0]
 800ea66:	d1e0      	bne.n	800ea2a <_free_r+0x26>
 800ea68:	681c      	ldr	r4, [r3, #0]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	6053      	str	r3, [r2, #4]
 800ea6e:	440c      	add	r4, r1
 800ea70:	6014      	str	r4, [r2, #0]
 800ea72:	e7da      	b.n	800ea2a <_free_r+0x26>
 800ea74:	d902      	bls.n	800ea7c <_free_r+0x78>
 800ea76:	230c      	movs	r3, #12
 800ea78:	6003      	str	r3, [r0, #0]
 800ea7a:	e7d6      	b.n	800ea2a <_free_r+0x26>
 800ea7c:	6825      	ldr	r5, [r4, #0]
 800ea7e:	1961      	adds	r1, r4, r5
 800ea80:	428b      	cmp	r3, r1
 800ea82:	bf04      	itt	eq
 800ea84:	6819      	ldreq	r1, [r3, #0]
 800ea86:	685b      	ldreq	r3, [r3, #4]
 800ea88:	6063      	str	r3, [r4, #4]
 800ea8a:	bf04      	itt	eq
 800ea8c:	1949      	addeq	r1, r1, r5
 800ea8e:	6021      	streq	r1, [r4, #0]
 800ea90:	6054      	str	r4, [r2, #4]
 800ea92:	e7ca      	b.n	800ea2a <_free_r+0x26>
 800ea94:	b003      	add	sp, #12
 800ea96:	bd30      	pop	{r4, r5, pc}
 800ea98:	20009504 	.word	0x20009504

0800ea9c <__ssputs_r>:
 800ea9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa0:	688e      	ldr	r6, [r1, #8]
 800eaa2:	461f      	mov	r7, r3
 800eaa4:	42be      	cmp	r6, r7
 800eaa6:	680b      	ldr	r3, [r1, #0]
 800eaa8:	4682      	mov	sl, r0
 800eaaa:	460c      	mov	r4, r1
 800eaac:	4690      	mov	r8, r2
 800eaae:	d82c      	bhi.n	800eb0a <__ssputs_r+0x6e>
 800eab0:	898a      	ldrh	r2, [r1, #12]
 800eab2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eab6:	d026      	beq.n	800eb06 <__ssputs_r+0x6a>
 800eab8:	6965      	ldr	r5, [r4, #20]
 800eaba:	6909      	ldr	r1, [r1, #16]
 800eabc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eac0:	eba3 0901 	sub.w	r9, r3, r1
 800eac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eac8:	1c7b      	adds	r3, r7, #1
 800eaca:	444b      	add	r3, r9
 800eacc:	106d      	asrs	r5, r5, #1
 800eace:	429d      	cmp	r5, r3
 800ead0:	bf38      	it	cc
 800ead2:	461d      	movcc	r5, r3
 800ead4:	0553      	lsls	r3, r2, #21
 800ead6:	d527      	bpl.n	800eb28 <__ssputs_r+0x8c>
 800ead8:	4629      	mov	r1, r5
 800eada:	f7fe fbe7 	bl	800d2ac <_malloc_r>
 800eade:	4606      	mov	r6, r0
 800eae0:	b360      	cbz	r0, 800eb3c <__ssputs_r+0xa0>
 800eae2:	6921      	ldr	r1, [r4, #16]
 800eae4:	464a      	mov	r2, r9
 800eae6:	f7ff f8e4 	bl	800dcb2 <memcpy>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaf4:	81a3      	strh	r3, [r4, #12]
 800eaf6:	6126      	str	r6, [r4, #16]
 800eaf8:	6165      	str	r5, [r4, #20]
 800eafa:	444e      	add	r6, r9
 800eafc:	eba5 0509 	sub.w	r5, r5, r9
 800eb00:	6026      	str	r6, [r4, #0]
 800eb02:	60a5      	str	r5, [r4, #8]
 800eb04:	463e      	mov	r6, r7
 800eb06:	42be      	cmp	r6, r7
 800eb08:	d900      	bls.n	800eb0c <__ssputs_r+0x70>
 800eb0a:	463e      	mov	r6, r7
 800eb0c:	6820      	ldr	r0, [r4, #0]
 800eb0e:	4632      	mov	r2, r6
 800eb10:	4641      	mov	r1, r8
 800eb12:	f001 fbcb 	bl	80102ac <memmove>
 800eb16:	68a3      	ldr	r3, [r4, #8]
 800eb18:	1b9b      	subs	r3, r3, r6
 800eb1a:	60a3      	str	r3, [r4, #8]
 800eb1c:	6823      	ldr	r3, [r4, #0]
 800eb1e:	4433      	add	r3, r6
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	2000      	movs	r0, #0
 800eb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb28:	462a      	mov	r2, r5
 800eb2a:	f001 fa23 	bl	800ff74 <_realloc_r>
 800eb2e:	4606      	mov	r6, r0
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d1e0      	bne.n	800eaf6 <__ssputs_r+0x5a>
 800eb34:	6921      	ldr	r1, [r4, #16]
 800eb36:	4650      	mov	r0, sl
 800eb38:	f7ff ff64 	bl	800ea04 <_free_r>
 800eb3c:	230c      	movs	r3, #12
 800eb3e:	f8ca 3000 	str.w	r3, [sl]
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb4e:	e7e9      	b.n	800eb24 <__ssputs_r+0x88>

0800eb50 <_svfiprintf_r>:
 800eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb54:	4698      	mov	r8, r3
 800eb56:	898b      	ldrh	r3, [r1, #12]
 800eb58:	061b      	lsls	r3, r3, #24
 800eb5a:	b09d      	sub	sp, #116	; 0x74
 800eb5c:	4607      	mov	r7, r0
 800eb5e:	460d      	mov	r5, r1
 800eb60:	4614      	mov	r4, r2
 800eb62:	d50e      	bpl.n	800eb82 <_svfiprintf_r+0x32>
 800eb64:	690b      	ldr	r3, [r1, #16]
 800eb66:	b963      	cbnz	r3, 800eb82 <_svfiprintf_r+0x32>
 800eb68:	2140      	movs	r1, #64	; 0x40
 800eb6a:	f7fe fb9f 	bl	800d2ac <_malloc_r>
 800eb6e:	6028      	str	r0, [r5, #0]
 800eb70:	6128      	str	r0, [r5, #16]
 800eb72:	b920      	cbnz	r0, 800eb7e <_svfiprintf_r+0x2e>
 800eb74:	230c      	movs	r3, #12
 800eb76:	603b      	str	r3, [r7, #0]
 800eb78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb7c:	e0d0      	b.n	800ed20 <_svfiprintf_r+0x1d0>
 800eb7e:	2340      	movs	r3, #64	; 0x40
 800eb80:	616b      	str	r3, [r5, #20]
 800eb82:	2300      	movs	r3, #0
 800eb84:	9309      	str	r3, [sp, #36]	; 0x24
 800eb86:	2320      	movs	r3, #32
 800eb88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb90:	2330      	movs	r3, #48	; 0x30
 800eb92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ed38 <_svfiprintf_r+0x1e8>
 800eb96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb9a:	f04f 0901 	mov.w	r9, #1
 800eb9e:	4623      	mov	r3, r4
 800eba0:	469a      	mov	sl, r3
 800eba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eba6:	b10a      	cbz	r2, 800ebac <_svfiprintf_r+0x5c>
 800eba8:	2a25      	cmp	r2, #37	; 0x25
 800ebaa:	d1f9      	bne.n	800eba0 <_svfiprintf_r+0x50>
 800ebac:	ebba 0b04 	subs.w	fp, sl, r4
 800ebb0:	d00b      	beq.n	800ebca <_svfiprintf_r+0x7a>
 800ebb2:	465b      	mov	r3, fp
 800ebb4:	4622      	mov	r2, r4
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	4638      	mov	r0, r7
 800ebba:	f7ff ff6f 	bl	800ea9c <__ssputs_r>
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	f000 80a9 	beq.w	800ed16 <_svfiprintf_r+0x1c6>
 800ebc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebc6:	445a      	add	r2, fp
 800ebc8:	9209      	str	r2, [sp, #36]	; 0x24
 800ebca:	f89a 3000 	ldrb.w	r3, [sl]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 80a1 	beq.w	800ed16 <_svfiprintf_r+0x1c6>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebde:	f10a 0a01 	add.w	sl, sl, #1
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	9307      	str	r3, [sp, #28]
 800ebe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebea:	931a      	str	r3, [sp, #104]	; 0x68
 800ebec:	4654      	mov	r4, sl
 800ebee:	2205      	movs	r2, #5
 800ebf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebf4:	4850      	ldr	r0, [pc, #320]	; (800ed38 <_svfiprintf_r+0x1e8>)
 800ebf6:	f7f1 fb0b 	bl	8000210 <memchr>
 800ebfa:	9a04      	ldr	r2, [sp, #16]
 800ebfc:	b9d8      	cbnz	r0, 800ec36 <_svfiprintf_r+0xe6>
 800ebfe:	06d0      	lsls	r0, r2, #27
 800ec00:	bf44      	itt	mi
 800ec02:	2320      	movmi	r3, #32
 800ec04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec08:	0711      	lsls	r1, r2, #28
 800ec0a:	bf44      	itt	mi
 800ec0c:	232b      	movmi	r3, #43	; 0x2b
 800ec0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec12:	f89a 3000 	ldrb.w	r3, [sl]
 800ec16:	2b2a      	cmp	r3, #42	; 0x2a
 800ec18:	d015      	beq.n	800ec46 <_svfiprintf_r+0xf6>
 800ec1a:	9a07      	ldr	r2, [sp, #28]
 800ec1c:	4654      	mov	r4, sl
 800ec1e:	2000      	movs	r0, #0
 800ec20:	f04f 0c0a 	mov.w	ip, #10
 800ec24:	4621      	mov	r1, r4
 800ec26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec2a:	3b30      	subs	r3, #48	; 0x30
 800ec2c:	2b09      	cmp	r3, #9
 800ec2e:	d94d      	bls.n	800eccc <_svfiprintf_r+0x17c>
 800ec30:	b1b0      	cbz	r0, 800ec60 <_svfiprintf_r+0x110>
 800ec32:	9207      	str	r2, [sp, #28]
 800ec34:	e014      	b.n	800ec60 <_svfiprintf_r+0x110>
 800ec36:	eba0 0308 	sub.w	r3, r0, r8
 800ec3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	9304      	str	r3, [sp, #16]
 800ec42:	46a2      	mov	sl, r4
 800ec44:	e7d2      	b.n	800ebec <_svfiprintf_r+0x9c>
 800ec46:	9b03      	ldr	r3, [sp, #12]
 800ec48:	1d19      	adds	r1, r3, #4
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	9103      	str	r1, [sp, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	bfbb      	ittet	lt
 800ec52:	425b      	neglt	r3, r3
 800ec54:	f042 0202 	orrlt.w	r2, r2, #2
 800ec58:	9307      	strge	r3, [sp, #28]
 800ec5a:	9307      	strlt	r3, [sp, #28]
 800ec5c:	bfb8      	it	lt
 800ec5e:	9204      	strlt	r2, [sp, #16]
 800ec60:	7823      	ldrb	r3, [r4, #0]
 800ec62:	2b2e      	cmp	r3, #46	; 0x2e
 800ec64:	d10c      	bne.n	800ec80 <_svfiprintf_r+0x130>
 800ec66:	7863      	ldrb	r3, [r4, #1]
 800ec68:	2b2a      	cmp	r3, #42	; 0x2a
 800ec6a:	d134      	bne.n	800ecd6 <_svfiprintf_r+0x186>
 800ec6c:	9b03      	ldr	r3, [sp, #12]
 800ec6e:	1d1a      	adds	r2, r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	9203      	str	r2, [sp, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bfb8      	it	lt
 800ec78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec7c:	3402      	adds	r4, #2
 800ec7e:	9305      	str	r3, [sp, #20]
 800ec80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ed48 <_svfiprintf_r+0x1f8>
 800ec84:	7821      	ldrb	r1, [r4, #0]
 800ec86:	2203      	movs	r2, #3
 800ec88:	4650      	mov	r0, sl
 800ec8a:	f7f1 fac1 	bl	8000210 <memchr>
 800ec8e:	b138      	cbz	r0, 800eca0 <_svfiprintf_r+0x150>
 800ec90:	9b04      	ldr	r3, [sp, #16]
 800ec92:	eba0 000a 	sub.w	r0, r0, sl
 800ec96:	2240      	movs	r2, #64	; 0x40
 800ec98:	4082      	lsls	r2, r0
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	3401      	adds	r4, #1
 800ec9e:	9304      	str	r3, [sp, #16]
 800eca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca4:	4825      	ldr	r0, [pc, #148]	; (800ed3c <_svfiprintf_r+0x1ec>)
 800eca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecaa:	2206      	movs	r2, #6
 800ecac:	f7f1 fab0 	bl	8000210 <memchr>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d038      	beq.n	800ed26 <_svfiprintf_r+0x1d6>
 800ecb4:	4b22      	ldr	r3, [pc, #136]	; (800ed40 <_svfiprintf_r+0x1f0>)
 800ecb6:	bb1b      	cbnz	r3, 800ed00 <_svfiprintf_r+0x1b0>
 800ecb8:	9b03      	ldr	r3, [sp, #12]
 800ecba:	3307      	adds	r3, #7
 800ecbc:	f023 0307 	bic.w	r3, r3, #7
 800ecc0:	3308      	adds	r3, #8
 800ecc2:	9303      	str	r3, [sp, #12]
 800ecc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc6:	4433      	add	r3, r6
 800ecc8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecca:	e768      	b.n	800eb9e <_svfiprintf_r+0x4e>
 800eccc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecd0:	460c      	mov	r4, r1
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	e7a6      	b.n	800ec24 <_svfiprintf_r+0xd4>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	3401      	adds	r4, #1
 800ecda:	9305      	str	r3, [sp, #20]
 800ecdc:	4619      	mov	r1, r3
 800ecde:	f04f 0c0a 	mov.w	ip, #10
 800ece2:	4620      	mov	r0, r4
 800ece4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ece8:	3a30      	subs	r2, #48	; 0x30
 800ecea:	2a09      	cmp	r2, #9
 800ecec:	d903      	bls.n	800ecf6 <_svfiprintf_r+0x1a6>
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d0c6      	beq.n	800ec80 <_svfiprintf_r+0x130>
 800ecf2:	9105      	str	r1, [sp, #20]
 800ecf4:	e7c4      	b.n	800ec80 <_svfiprintf_r+0x130>
 800ecf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e7f0      	b.n	800ece2 <_svfiprintf_r+0x192>
 800ed00:	ab03      	add	r3, sp, #12
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	462a      	mov	r2, r5
 800ed06:	4b0f      	ldr	r3, [pc, #60]	; (800ed44 <_svfiprintf_r+0x1f4>)
 800ed08:	a904      	add	r1, sp, #16
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	f7fe f870 	bl	800cdf0 <_printf_float>
 800ed10:	1c42      	adds	r2, r0, #1
 800ed12:	4606      	mov	r6, r0
 800ed14:	d1d6      	bne.n	800ecc4 <_svfiprintf_r+0x174>
 800ed16:	89ab      	ldrh	r3, [r5, #12]
 800ed18:	065b      	lsls	r3, r3, #25
 800ed1a:	f53f af2d 	bmi.w	800eb78 <_svfiprintf_r+0x28>
 800ed1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed20:	b01d      	add	sp, #116	; 0x74
 800ed22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed26:	ab03      	add	r3, sp, #12
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	462a      	mov	r2, r5
 800ed2c:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <_svfiprintf_r+0x1f4>)
 800ed2e:	a904      	add	r1, sp, #16
 800ed30:	4638      	mov	r0, r7
 800ed32:	f7fe fba9 	bl	800d488 <_printf_i>
 800ed36:	e7eb      	b.n	800ed10 <_svfiprintf_r+0x1c0>
 800ed38:	080156cc 	.word	0x080156cc
 800ed3c:	080156d6 	.word	0x080156d6
 800ed40:	0800cdf1 	.word	0x0800cdf1
 800ed44:	0800ea9d 	.word	0x0800ea9d
 800ed48:	080156d2 	.word	0x080156d2

0800ed4c <_sungetc_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	1c4b      	adds	r3, r1, #1
 800ed50:	4614      	mov	r4, r2
 800ed52:	d103      	bne.n	800ed5c <_sungetc_r+0x10>
 800ed54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ed58:	4628      	mov	r0, r5
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	8993      	ldrh	r3, [r2, #12]
 800ed5e:	f023 0320 	bic.w	r3, r3, #32
 800ed62:	8193      	strh	r3, [r2, #12]
 800ed64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed66:	6852      	ldr	r2, [r2, #4]
 800ed68:	b2cd      	uxtb	r5, r1
 800ed6a:	b18b      	cbz	r3, 800ed90 <_sungetc_r+0x44>
 800ed6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	dd08      	ble.n	800ed84 <_sungetc_r+0x38>
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	1e5a      	subs	r2, r3, #1
 800ed76:	6022      	str	r2, [r4, #0]
 800ed78:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ed7c:	6863      	ldr	r3, [r4, #4]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	6063      	str	r3, [r4, #4]
 800ed82:	e7e9      	b.n	800ed58 <_sungetc_r+0xc>
 800ed84:	4621      	mov	r1, r4
 800ed86:	f001 f8bb 	bl	800ff00 <__submore>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d0f1      	beq.n	800ed72 <_sungetc_r+0x26>
 800ed8e:	e7e1      	b.n	800ed54 <_sungetc_r+0x8>
 800ed90:	6921      	ldr	r1, [r4, #16]
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	b151      	cbz	r1, 800edac <_sungetc_r+0x60>
 800ed96:	4299      	cmp	r1, r3
 800ed98:	d208      	bcs.n	800edac <_sungetc_r+0x60>
 800ed9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ed9e:	42a9      	cmp	r1, r5
 800eda0:	d104      	bne.n	800edac <_sungetc_r+0x60>
 800eda2:	3b01      	subs	r3, #1
 800eda4:	3201      	adds	r2, #1
 800eda6:	6023      	str	r3, [r4, #0]
 800eda8:	6062      	str	r2, [r4, #4]
 800edaa:	e7d5      	b.n	800ed58 <_sungetc_r+0xc>
 800edac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800edb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edb4:	6363      	str	r3, [r4, #52]	; 0x34
 800edb6:	2303      	movs	r3, #3
 800edb8:	63a3      	str	r3, [r4, #56]	; 0x38
 800edba:	4623      	mov	r3, r4
 800edbc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800edc0:	6023      	str	r3, [r4, #0]
 800edc2:	2301      	movs	r3, #1
 800edc4:	e7dc      	b.n	800ed80 <_sungetc_r+0x34>

0800edc6 <__ssrefill_r>:
 800edc6:	b510      	push	{r4, lr}
 800edc8:	460c      	mov	r4, r1
 800edca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800edcc:	b169      	cbz	r1, 800edea <__ssrefill_r+0x24>
 800edce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edd2:	4299      	cmp	r1, r3
 800edd4:	d001      	beq.n	800edda <__ssrefill_r+0x14>
 800edd6:	f7ff fe15 	bl	800ea04 <_free_r>
 800edda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eddc:	6063      	str	r3, [r4, #4]
 800edde:	2000      	movs	r0, #0
 800ede0:	6360      	str	r0, [r4, #52]	; 0x34
 800ede2:	b113      	cbz	r3, 800edea <__ssrefill_r+0x24>
 800ede4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	2300      	movs	r3, #0
 800edf0:	6063      	str	r3, [r4, #4]
 800edf2:	89a3      	ldrh	r3, [r4, #12]
 800edf4:	f043 0320 	orr.w	r3, r3, #32
 800edf8:	81a3      	strh	r3, [r4, #12]
 800edfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edfe:	e7f3      	b.n	800ede8 <__ssrefill_r+0x22>

0800ee00 <__ssvfiscanf_r>:
 800ee00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee04:	460c      	mov	r4, r1
 800ee06:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ee10:	49a6      	ldr	r1, [pc, #664]	; (800f0ac <__ssvfiscanf_r+0x2ac>)
 800ee12:	91a0      	str	r1, [sp, #640]	; 0x280
 800ee14:	f10d 0804 	add.w	r8, sp, #4
 800ee18:	49a5      	ldr	r1, [pc, #660]	; (800f0b0 <__ssvfiscanf_r+0x2b0>)
 800ee1a:	4fa6      	ldr	r7, [pc, #664]	; (800f0b4 <__ssvfiscanf_r+0x2b4>)
 800ee1c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f0b8 <__ssvfiscanf_r+0x2b8>
 800ee20:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ee24:	4606      	mov	r6, r0
 800ee26:	91a1      	str	r1, [sp, #644]	; 0x284
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	7813      	ldrb	r3, [r2, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 815a 	beq.w	800f0e6 <__ssvfiscanf_r+0x2e6>
 800ee32:	5cf9      	ldrb	r1, [r7, r3]
 800ee34:	f011 0108 	ands.w	r1, r1, #8
 800ee38:	f102 0501 	add.w	r5, r2, #1
 800ee3c:	d019      	beq.n	800ee72 <__ssvfiscanf_r+0x72>
 800ee3e:	6863      	ldr	r3, [r4, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	dd0f      	ble.n	800ee64 <__ssvfiscanf_r+0x64>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	781a      	ldrb	r2, [r3, #0]
 800ee48:	5cba      	ldrb	r2, [r7, r2]
 800ee4a:	0712      	lsls	r2, r2, #28
 800ee4c:	d401      	bmi.n	800ee52 <__ssvfiscanf_r+0x52>
 800ee4e:	462a      	mov	r2, r5
 800ee50:	e7eb      	b.n	800ee2a <__ssvfiscanf_r+0x2a>
 800ee52:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ee54:	3201      	adds	r2, #1
 800ee56:	9245      	str	r2, [sp, #276]	; 0x114
 800ee58:	6862      	ldr	r2, [r4, #4]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	3a01      	subs	r2, #1
 800ee5e:	6062      	str	r2, [r4, #4]
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	e7ec      	b.n	800ee3e <__ssvfiscanf_r+0x3e>
 800ee64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ee66:	4621      	mov	r1, r4
 800ee68:	4630      	mov	r0, r6
 800ee6a:	4798      	blx	r3
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0e9      	beq.n	800ee44 <__ssvfiscanf_r+0x44>
 800ee70:	e7ed      	b.n	800ee4e <__ssvfiscanf_r+0x4e>
 800ee72:	2b25      	cmp	r3, #37	; 0x25
 800ee74:	d012      	beq.n	800ee9c <__ssvfiscanf_r+0x9c>
 800ee76:	469a      	mov	sl, r3
 800ee78:	6863      	ldr	r3, [r4, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f340 8091 	ble.w	800efa2 <__ssvfiscanf_r+0x1a2>
 800ee80:	6822      	ldr	r2, [r4, #0]
 800ee82:	7813      	ldrb	r3, [r2, #0]
 800ee84:	4553      	cmp	r3, sl
 800ee86:	f040 812e 	bne.w	800f0e6 <__ssvfiscanf_r+0x2e6>
 800ee8a:	6863      	ldr	r3, [r4, #4]
 800ee8c:	3b01      	subs	r3, #1
 800ee8e:	6063      	str	r3, [r4, #4]
 800ee90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ee92:	3201      	adds	r2, #1
 800ee94:	3301      	adds	r3, #1
 800ee96:	6022      	str	r2, [r4, #0]
 800ee98:	9345      	str	r3, [sp, #276]	; 0x114
 800ee9a:	e7d8      	b.n	800ee4e <__ssvfiscanf_r+0x4e>
 800ee9c:	9141      	str	r1, [sp, #260]	; 0x104
 800ee9e:	9143      	str	r1, [sp, #268]	; 0x10c
 800eea0:	7853      	ldrb	r3, [r2, #1]
 800eea2:	2b2a      	cmp	r3, #42	; 0x2a
 800eea4:	bf02      	ittt	eq
 800eea6:	2310      	moveq	r3, #16
 800eea8:	1c95      	addeq	r5, r2, #2
 800eeaa:	9341      	streq	r3, [sp, #260]	; 0x104
 800eeac:	220a      	movs	r2, #10
 800eeae:	46aa      	mov	sl, r5
 800eeb0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800eeb4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800eeb8:	2b09      	cmp	r3, #9
 800eeba:	d91c      	bls.n	800eef6 <__ssvfiscanf_r+0xf6>
 800eebc:	487e      	ldr	r0, [pc, #504]	; (800f0b8 <__ssvfiscanf_r+0x2b8>)
 800eebe:	2203      	movs	r2, #3
 800eec0:	f7f1 f9a6 	bl	8000210 <memchr>
 800eec4:	b138      	cbz	r0, 800eed6 <__ssvfiscanf_r+0xd6>
 800eec6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800eec8:	eba0 0009 	sub.w	r0, r0, r9
 800eecc:	2301      	movs	r3, #1
 800eece:	4083      	lsls	r3, r0
 800eed0:	4313      	orrs	r3, r2
 800eed2:	9341      	str	r3, [sp, #260]	; 0x104
 800eed4:	4655      	mov	r5, sl
 800eed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eeda:	2b78      	cmp	r3, #120	; 0x78
 800eedc:	d806      	bhi.n	800eeec <__ssvfiscanf_r+0xec>
 800eede:	2b57      	cmp	r3, #87	; 0x57
 800eee0:	d810      	bhi.n	800ef04 <__ssvfiscanf_r+0x104>
 800eee2:	2b25      	cmp	r3, #37	; 0x25
 800eee4:	d0c7      	beq.n	800ee76 <__ssvfiscanf_r+0x76>
 800eee6:	d857      	bhi.n	800ef98 <__ssvfiscanf_r+0x198>
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d065      	beq.n	800efb8 <__ssvfiscanf_r+0x1b8>
 800eeec:	2303      	movs	r3, #3
 800eeee:	9347      	str	r3, [sp, #284]	; 0x11c
 800eef0:	230a      	movs	r3, #10
 800eef2:	9342      	str	r3, [sp, #264]	; 0x108
 800eef4:	e076      	b.n	800efe4 <__ssvfiscanf_r+0x1e4>
 800eef6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800eef8:	fb02 1103 	mla	r1, r2, r3, r1
 800eefc:	3930      	subs	r1, #48	; 0x30
 800eefe:	9143      	str	r1, [sp, #268]	; 0x10c
 800ef00:	4655      	mov	r5, sl
 800ef02:	e7d4      	b.n	800eeae <__ssvfiscanf_r+0xae>
 800ef04:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ef08:	2a20      	cmp	r2, #32
 800ef0a:	d8ef      	bhi.n	800eeec <__ssvfiscanf_r+0xec>
 800ef0c:	a101      	add	r1, pc, #4	; (adr r1, 800ef14 <__ssvfiscanf_r+0x114>)
 800ef0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef12:	bf00      	nop
 800ef14:	0800efc7 	.word	0x0800efc7
 800ef18:	0800eeed 	.word	0x0800eeed
 800ef1c:	0800eeed 	.word	0x0800eeed
 800ef20:	0800f025 	.word	0x0800f025
 800ef24:	0800eeed 	.word	0x0800eeed
 800ef28:	0800eeed 	.word	0x0800eeed
 800ef2c:	0800eeed 	.word	0x0800eeed
 800ef30:	0800eeed 	.word	0x0800eeed
 800ef34:	0800eeed 	.word	0x0800eeed
 800ef38:	0800eeed 	.word	0x0800eeed
 800ef3c:	0800eeed 	.word	0x0800eeed
 800ef40:	0800f03b 	.word	0x0800f03b
 800ef44:	0800f021 	.word	0x0800f021
 800ef48:	0800ef9f 	.word	0x0800ef9f
 800ef4c:	0800ef9f 	.word	0x0800ef9f
 800ef50:	0800ef9f 	.word	0x0800ef9f
 800ef54:	0800eeed 	.word	0x0800eeed
 800ef58:	0800efdd 	.word	0x0800efdd
 800ef5c:	0800eeed 	.word	0x0800eeed
 800ef60:	0800eeed 	.word	0x0800eeed
 800ef64:	0800eeed 	.word	0x0800eeed
 800ef68:	0800eeed 	.word	0x0800eeed
 800ef6c:	0800f04b 	.word	0x0800f04b
 800ef70:	0800f019 	.word	0x0800f019
 800ef74:	0800efbf 	.word	0x0800efbf
 800ef78:	0800eeed 	.word	0x0800eeed
 800ef7c:	0800eeed 	.word	0x0800eeed
 800ef80:	0800f047 	.word	0x0800f047
 800ef84:	0800eeed 	.word	0x0800eeed
 800ef88:	0800f021 	.word	0x0800f021
 800ef8c:	0800eeed 	.word	0x0800eeed
 800ef90:	0800eeed 	.word	0x0800eeed
 800ef94:	0800efc7 	.word	0x0800efc7
 800ef98:	3b45      	subs	r3, #69	; 0x45
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d8a6      	bhi.n	800eeec <__ssvfiscanf_r+0xec>
 800ef9e:	2305      	movs	r3, #5
 800efa0:	e01f      	b.n	800efe2 <__ssvfiscanf_r+0x1e2>
 800efa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800efa4:	4621      	mov	r1, r4
 800efa6:	4630      	mov	r0, r6
 800efa8:	4798      	blx	r3
 800efaa:	2800      	cmp	r0, #0
 800efac:	f43f af68 	beq.w	800ee80 <__ssvfiscanf_r+0x80>
 800efb0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800efb2:	2800      	cmp	r0, #0
 800efb4:	f040 808d 	bne.w	800f0d2 <__ssvfiscanf_r+0x2d2>
 800efb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efbc:	e08f      	b.n	800f0de <__ssvfiscanf_r+0x2de>
 800efbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800efc0:	f042 0220 	orr.w	r2, r2, #32
 800efc4:	9241      	str	r2, [sp, #260]	; 0x104
 800efc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800efc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efcc:	9241      	str	r2, [sp, #260]	; 0x104
 800efce:	2210      	movs	r2, #16
 800efd0:	2b6f      	cmp	r3, #111	; 0x6f
 800efd2:	9242      	str	r2, [sp, #264]	; 0x108
 800efd4:	bf34      	ite	cc
 800efd6:	2303      	movcc	r3, #3
 800efd8:	2304      	movcs	r3, #4
 800efda:	e002      	b.n	800efe2 <__ssvfiscanf_r+0x1e2>
 800efdc:	2300      	movs	r3, #0
 800efde:	9342      	str	r3, [sp, #264]	; 0x108
 800efe0:	2303      	movs	r3, #3
 800efe2:	9347      	str	r3, [sp, #284]	; 0x11c
 800efe4:	6863      	ldr	r3, [r4, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	dd3d      	ble.n	800f066 <__ssvfiscanf_r+0x266>
 800efea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800efec:	0659      	lsls	r1, r3, #25
 800efee:	d404      	bmi.n	800effa <__ssvfiscanf_r+0x1fa>
 800eff0:	6823      	ldr	r3, [r4, #0]
 800eff2:	781a      	ldrb	r2, [r3, #0]
 800eff4:	5cba      	ldrb	r2, [r7, r2]
 800eff6:	0712      	lsls	r2, r2, #28
 800eff8:	d43c      	bmi.n	800f074 <__ssvfiscanf_r+0x274>
 800effa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800effc:	2b02      	cmp	r3, #2
 800effe:	dc4b      	bgt.n	800f098 <__ssvfiscanf_r+0x298>
 800f000:	466b      	mov	r3, sp
 800f002:	4622      	mov	r2, r4
 800f004:	a941      	add	r1, sp, #260	; 0x104
 800f006:	4630      	mov	r0, r6
 800f008:	f000 f9b6 	bl	800f378 <_scanf_chars>
 800f00c:	2801      	cmp	r0, #1
 800f00e:	d06a      	beq.n	800f0e6 <__ssvfiscanf_r+0x2e6>
 800f010:	2802      	cmp	r0, #2
 800f012:	f47f af1c 	bne.w	800ee4e <__ssvfiscanf_r+0x4e>
 800f016:	e7cb      	b.n	800efb0 <__ssvfiscanf_r+0x1b0>
 800f018:	2308      	movs	r3, #8
 800f01a:	9342      	str	r3, [sp, #264]	; 0x108
 800f01c:	2304      	movs	r3, #4
 800f01e:	e7e0      	b.n	800efe2 <__ssvfiscanf_r+0x1e2>
 800f020:	220a      	movs	r2, #10
 800f022:	e7d5      	b.n	800efd0 <__ssvfiscanf_r+0x1d0>
 800f024:	4629      	mov	r1, r5
 800f026:	4640      	mov	r0, r8
 800f028:	f000 faf4 	bl	800f614 <__sccl>
 800f02c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f032:	9341      	str	r3, [sp, #260]	; 0x104
 800f034:	4605      	mov	r5, r0
 800f036:	2301      	movs	r3, #1
 800f038:	e7d3      	b.n	800efe2 <__ssvfiscanf_r+0x1e2>
 800f03a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f040:	9341      	str	r3, [sp, #260]	; 0x104
 800f042:	2300      	movs	r3, #0
 800f044:	e7cd      	b.n	800efe2 <__ssvfiscanf_r+0x1e2>
 800f046:	2302      	movs	r3, #2
 800f048:	e7cb      	b.n	800efe2 <__ssvfiscanf_r+0x1e2>
 800f04a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f04c:	06c3      	lsls	r3, r0, #27
 800f04e:	f53f aefe 	bmi.w	800ee4e <__ssvfiscanf_r+0x4e>
 800f052:	9b00      	ldr	r3, [sp, #0]
 800f054:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f056:	1d19      	adds	r1, r3, #4
 800f058:	9100      	str	r1, [sp, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	07c0      	lsls	r0, r0, #31
 800f05e:	bf4c      	ite	mi
 800f060:	801a      	strhmi	r2, [r3, #0]
 800f062:	601a      	strpl	r2, [r3, #0]
 800f064:	e6f3      	b.n	800ee4e <__ssvfiscanf_r+0x4e>
 800f066:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f068:	4621      	mov	r1, r4
 800f06a:	4630      	mov	r0, r6
 800f06c:	4798      	blx	r3
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0bb      	beq.n	800efea <__ssvfiscanf_r+0x1ea>
 800f072:	e79d      	b.n	800efb0 <__ssvfiscanf_r+0x1b0>
 800f074:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f076:	3201      	adds	r2, #1
 800f078:	9245      	str	r2, [sp, #276]	; 0x114
 800f07a:	6862      	ldr	r2, [r4, #4]
 800f07c:	3a01      	subs	r2, #1
 800f07e:	2a00      	cmp	r2, #0
 800f080:	6062      	str	r2, [r4, #4]
 800f082:	dd02      	ble.n	800f08a <__ssvfiscanf_r+0x28a>
 800f084:	3301      	adds	r3, #1
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	e7b2      	b.n	800eff0 <__ssvfiscanf_r+0x1f0>
 800f08a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f08c:	4621      	mov	r1, r4
 800f08e:	4630      	mov	r0, r6
 800f090:	4798      	blx	r3
 800f092:	2800      	cmp	r0, #0
 800f094:	d0ac      	beq.n	800eff0 <__ssvfiscanf_r+0x1f0>
 800f096:	e78b      	b.n	800efb0 <__ssvfiscanf_r+0x1b0>
 800f098:	2b04      	cmp	r3, #4
 800f09a:	dc0f      	bgt.n	800f0bc <__ssvfiscanf_r+0x2bc>
 800f09c:	466b      	mov	r3, sp
 800f09e:	4622      	mov	r2, r4
 800f0a0:	a941      	add	r1, sp, #260	; 0x104
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f000 f9c2 	bl	800f42c <_scanf_i>
 800f0a8:	e7b0      	b.n	800f00c <__ssvfiscanf_r+0x20c>
 800f0aa:	bf00      	nop
 800f0ac:	0800ed4d 	.word	0x0800ed4d
 800f0b0:	0800edc7 	.word	0x0800edc7
 800f0b4:	08015503 	.word	0x08015503
 800f0b8:	080156d2 	.word	0x080156d2
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	; (800f0ec <__ssvfiscanf_r+0x2ec>)
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f43f aec5 	beq.w	800ee4e <__ssvfiscanf_r+0x4e>
 800f0c4:	466b      	mov	r3, sp
 800f0c6:	4622      	mov	r2, r4
 800f0c8:	a941      	add	r1, sp, #260	; 0x104
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	e79c      	b.n	800f00c <__ssvfiscanf_r+0x20c>
 800f0d2:	89a3      	ldrh	r3, [r4, #12]
 800f0d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f0d8:	bf18      	it	ne
 800f0da:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800f0de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f0e8:	e7f9      	b.n	800f0de <__ssvfiscanf_r+0x2de>
 800f0ea:	bf00      	nop
 800f0ec:	00000000 	.word	0x00000000

0800f0f0 <__sfputc_r>:
 800f0f0:	6893      	ldr	r3, [r2, #8]
 800f0f2:	3b01      	subs	r3, #1
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	b410      	push	{r4}
 800f0f8:	6093      	str	r3, [r2, #8]
 800f0fa:	da08      	bge.n	800f10e <__sfputc_r+0x1e>
 800f0fc:	6994      	ldr	r4, [r2, #24]
 800f0fe:	42a3      	cmp	r3, r4
 800f100:	db01      	blt.n	800f106 <__sfputc_r+0x16>
 800f102:	290a      	cmp	r1, #10
 800f104:	d103      	bne.n	800f10e <__sfputc_r+0x1e>
 800f106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f10a:	f000 bfd7 	b.w	80100bc <__swbuf_r>
 800f10e:	6813      	ldr	r3, [r2, #0]
 800f110:	1c58      	adds	r0, r3, #1
 800f112:	6010      	str	r0, [r2, #0]
 800f114:	7019      	strb	r1, [r3, #0]
 800f116:	4608      	mov	r0, r1
 800f118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f11c:	4770      	bx	lr

0800f11e <__sfputs_r>:
 800f11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f120:	4606      	mov	r6, r0
 800f122:	460f      	mov	r7, r1
 800f124:	4614      	mov	r4, r2
 800f126:	18d5      	adds	r5, r2, r3
 800f128:	42ac      	cmp	r4, r5
 800f12a:	d101      	bne.n	800f130 <__sfputs_r+0x12>
 800f12c:	2000      	movs	r0, #0
 800f12e:	e007      	b.n	800f140 <__sfputs_r+0x22>
 800f130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f134:	463a      	mov	r2, r7
 800f136:	4630      	mov	r0, r6
 800f138:	f7ff ffda 	bl	800f0f0 <__sfputc_r>
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	d1f3      	bne.n	800f128 <__sfputs_r+0xa>
 800f140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f144 <_vfiprintf_r>:
 800f144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f148:	460d      	mov	r5, r1
 800f14a:	b09d      	sub	sp, #116	; 0x74
 800f14c:	4614      	mov	r4, r2
 800f14e:	4698      	mov	r8, r3
 800f150:	4606      	mov	r6, r0
 800f152:	b118      	cbz	r0, 800f15c <_vfiprintf_r+0x18>
 800f154:	6a03      	ldr	r3, [r0, #32]
 800f156:	b90b      	cbnz	r3, 800f15c <_vfiprintf_r+0x18>
 800f158:	f7fe fc16 	bl	800d988 <__sinit>
 800f15c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f15e:	07d9      	lsls	r1, r3, #31
 800f160:	d405      	bmi.n	800f16e <_vfiprintf_r+0x2a>
 800f162:	89ab      	ldrh	r3, [r5, #12]
 800f164:	059a      	lsls	r2, r3, #22
 800f166:	d402      	bmi.n	800f16e <_vfiprintf_r+0x2a>
 800f168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f16a:	f7fe fda0 	bl	800dcae <__retarget_lock_acquire_recursive>
 800f16e:	89ab      	ldrh	r3, [r5, #12]
 800f170:	071b      	lsls	r3, r3, #28
 800f172:	d501      	bpl.n	800f178 <_vfiprintf_r+0x34>
 800f174:	692b      	ldr	r3, [r5, #16]
 800f176:	b99b      	cbnz	r3, 800f1a0 <_vfiprintf_r+0x5c>
 800f178:	4629      	mov	r1, r5
 800f17a:	4630      	mov	r0, r6
 800f17c:	f000 ffdc 	bl	8010138 <__swsetup_r>
 800f180:	b170      	cbz	r0, 800f1a0 <_vfiprintf_r+0x5c>
 800f182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f184:	07dc      	lsls	r4, r3, #31
 800f186:	d504      	bpl.n	800f192 <_vfiprintf_r+0x4e>
 800f188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f18c:	b01d      	add	sp, #116	; 0x74
 800f18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f192:	89ab      	ldrh	r3, [r5, #12]
 800f194:	0598      	lsls	r0, r3, #22
 800f196:	d4f7      	bmi.n	800f188 <_vfiprintf_r+0x44>
 800f198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f19a:	f7fe fd89 	bl	800dcb0 <__retarget_lock_release_recursive>
 800f19e:	e7f3      	b.n	800f188 <_vfiprintf_r+0x44>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1a4:	2320      	movs	r3, #32
 800f1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ae:	2330      	movs	r3, #48	; 0x30
 800f1b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f364 <_vfiprintf_r+0x220>
 800f1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1b8:	f04f 0901 	mov.w	r9, #1
 800f1bc:	4623      	mov	r3, r4
 800f1be:	469a      	mov	sl, r3
 800f1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1c4:	b10a      	cbz	r2, 800f1ca <_vfiprintf_r+0x86>
 800f1c6:	2a25      	cmp	r2, #37	; 0x25
 800f1c8:	d1f9      	bne.n	800f1be <_vfiprintf_r+0x7a>
 800f1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ce:	d00b      	beq.n	800f1e8 <_vfiprintf_r+0xa4>
 800f1d0:	465b      	mov	r3, fp
 800f1d2:	4622      	mov	r2, r4
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	f7ff ffa1 	bl	800f11e <__sfputs_r>
 800f1dc:	3001      	adds	r0, #1
 800f1de:	f000 80a9 	beq.w	800f334 <_vfiprintf_r+0x1f0>
 800f1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1e4:	445a      	add	r2, fp
 800f1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800f1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f000 80a1 	beq.w	800f334 <_vfiprintf_r+0x1f0>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1fc:	f10a 0a01 	add.w	sl, sl, #1
 800f200:	9304      	str	r3, [sp, #16]
 800f202:	9307      	str	r3, [sp, #28]
 800f204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f208:	931a      	str	r3, [sp, #104]	; 0x68
 800f20a:	4654      	mov	r4, sl
 800f20c:	2205      	movs	r2, #5
 800f20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f212:	4854      	ldr	r0, [pc, #336]	; (800f364 <_vfiprintf_r+0x220>)
 800f214:	f7f0 fffc 	bl	8000210 <memchr>
 800f218:	9a04      	ldr	r2, [sp, #16]
 800f21a:	b9d8      	cbnz	r0, 800f254 <_vfiprintf_r+0x110>
 800f21c:	06d1      	lsls	r1, r2, #27
 800f21e:	bf44      	itt	mi
 800f220:	2320      	movmi	r3, #32
 800f222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f226:	0713      	lsls	r3, r2, #28
 800f228:	bf44      	itt	mi
 800f22a:	232b      	movmi	r3, #43	; 0x2b
 800f22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f230:	f89a 3000 	ldrb.w	r3, [sl]
 800f234:	2b2a      	cmp	r3, #42	; 0x2a
 800f236:	d015      	beq.n	800f264 <_vfiprintf_r+0x120>
 800f238:	9a07      	ldr	r2, [sp, #28]
 800f23a:	4654      	mov	r4, sl
 800f23c:	2000      	movs	r0, #0
 800f23e:	f04f 0c0a 	mov.w	ip, #10
 800f242:	4621      	mov	r1, r4
 800f244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f248:	3b30      	subs	r3, #48	; 0x30
 800f24a:	2b09      	cmp	r3, #9
 800f24c:	d94d      	bls.n	800f2ea <_vfiprintf_r+0x1a6>
 800f24e:	b1b0      	cbz	r0, 800f27e <_vfiprintf_r+0x13a>
 800f250:	9207      	str	r2, [sp, #28]
 800f252:	e014      	b.n	800f27e <_vfiprintf_r+0x13a>
 800f254:	eba0 0308 	sub.w	r3, r0, r8
 800f258:	fa09 f303 	lsl.w	r3, r9, r3
 800f25c:	4313      	orrs	r3, r2
 800f25e:	9304      	str	r3, [sp, #16]
 800f260:	46a2      	mov	sl, r4
 800f262:	e7d2      	b.n	800f20a <_vfiprintf_r+0xc6>
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	1d19      	adds	r1, r3, #4
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	9103      	str	r1, [sp, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	bfbb      	ittet	lt
 800f270:	425b      	neglt	r3, r3
 800f272:	f042 0202 	orrlt.w	r2, r2, #2
 800f276:	9307      	strge	r3, [sp, #28]
 800f278:	9307      	strlt	r3, [sp, #28]
 800f27a:	bfb8      	it	lt
 800f27c:	9204      	strlt	r2, [sp, #16]
 800f27e:	7823      	ldrb	r3, [r4, #0]
 800f280:	2b2e      	cmp	r3, #46	; 0x2e
 800f282:	d10c      	bne.n	800f29e <_vfiprintf_r+0x15a>
 800f284:	7863      	ldrb	r3, [r4, #1]
 800f286:	2b2a      	cmp	r3, #42	; 0x2a
 800f288:	d134      	bne.n	800f2f4 <_vfiprintf_r+0x1b0>
 800f28a:	9b03      	ldr	r3, [sp, #12]
 800f28c:	1d1a      	adds	r2, r3, #4
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	9203      	str	r2, [sp, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	bfb8      	it	lt
 800f296:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f29a:	3402      	adds	r4, #2
 800f29c:	9305      	str	r3, [sp, #20]
 800f29e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f374 <_vfiprintf_r+0x230>
 800f2a2:	7821      	ldrb	r1, [r4, #0]
 800f2a4:	2203      	movs	r2, #3
 800f2a6:	4650      	mov	r0, sl
 800f2a8:	f7f0 ffb2 	bl	8000210 <memchr>
 800f2ac:	b138      	cbz	r0, 800f2be <_vfiprintf_r+0x17a>
 800f2ae:	9b04      	ldr	r3, [sp, #16]
 800f2b0:	eba0 000a 	sub.w	r0, r0, sl
 800f2b4:	2240      	movs	r2, #64	; 0x40
 800f2b6:	4082      	lsls	r2, r0
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	3401      	adds	r4, #1
 800f2bc:	9304      	str	r3, [sp, #16]
 800f2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2c2:	4829      	ldr	r0, [pc, #164]	; (800f368 <_vfiprintf_r+0x224>)
 800f2c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2c8:	2206      	movs	r2, #6
 800f2ca:	f7f0 ffa1 	bl	8000210 <memchr>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d03f      	beq.n	800f352 <_vfiprintf_r+0x20e>
 800f2d2:	4b26      	ldr	r3, [pc, #152]	; (800f36c <_vfiprintf_r+0x228>)
 800f2d4:	bb1b      	cbnz	r3, 800f31e <_vfiprintf_r+0x1da>
 800f2d6:	9b03      	ldr	r3, [sp, #12]
 800f2d8:	3307      	adds	r3, #7
 800f2da:	f023 0307 	bic.w	r3, r3, #7
 800f2de:	3308      	adds	r3, #8
 800f2e0:	9303      	str	r3, [sp, #12]
 800f2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e4:	443b      	add	r3, r7
 800f2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e8:	e768      	b.n	800f1bc <_vfiprintf_r+0x78>
 800f2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	2001      	movs	r0, #1
 800f2f2:	e7a6      	b.n	800f242 <_vfiprintf_r+0xfe>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	3401      	adds	r4, #1
 800f2f8:	9305      	str	r3, [sp, #20]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	f04f 0c0a 	mov.w	ip, #10
 800f300:	4620      	mov	r0, r4
 800f302:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f306:	3a30      	subs	r2, #48	; 0x30
 800f308:	2a09      	cmp	r2, #9
 800f30a:	d903      	bls.n	800f314 <_vfiprintf_r+0x1d0>
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d0c6      	beq.n	800f29e <_vfiprintf_r+0x15a>
 800f310:	9105      	str	r1, [sp, #20]
 800f312:	e7c4      	b.n	800f29e <_vfiprintf_r+0x15a>
 800f314:	fb0c 2101 	mla	r1, ip, r1, r2
 800f318:	4604      	mov	r4, r0
 800f31a:	2301      	movs	r3, #1
 800f31c:	e7f0      	b.n	800f300 <_vfiprintf_r+0x1bc>
 800f31e:	ab03      	add	r3, sp, #12
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	462a      	mov	r2, r5
 800f324:	4b12      	ldr	r3, [pc, #72]	; (800f370 <_vfiprintf_r+0x22c>)
 800f326:	a904      	add	r1, sp, #16
 800f328:	4630      	mov	r0, r6
 800f32a:	f7fd fd61 	bl	800cdf0 <_printf_float>
 800f32e:	4607      	mov	r7, r0
 800f330:	1c78      	adds	r0, r7, #1
 800f332:	d1d6      	bne.n	800f2e2 <_vfiprintf_r+0x19e>
 800f334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f336:	07d9      	lsls	r1, r3, #31
 800f338:	d405      	bmi.n	800f346 <_vfiprintf_r+0x202>
 800f33a:	89ab      	ldrh	r3, [r5, #12]
 800f33c:	059a      	lsls	r2, r3, #22
 800f33e:	d402      	bmi.n	800f346 <_vfiprintf_r+0x202>
 800f340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f342:	f7fe fcb5 	bl	800dcb0 <__retarget_lock_release_recursive>
 800f346:	89ab      	ldrh	r3, [r5, #12]
 800f348:	065b      	lsls	r3, r3, #25
 800f34a:	f53f af1d 	bmi.w	800f188 <_vfiprintf_r+0x44>
 800f34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f350:	e71c      	b.n	800f18c <_vfiprintf_r+0x48>
 800f352:	ab03      	add	r3, sp, #12
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	462a      	mov	r2, r5
 800f358:	4b05      	ldr	r3, [pc, #20]	; (800f370 <_vfiprintf_r+0x22c>)
 800f35a:	a904      	add	r1, sp, #16
 800f35c:	4630      	mov	r0, r6
 800f35e:	f7fe f893 	bl	800d488 <_printf_i>
 800f362:	e7e4      	b.n	800f32e <_vfiprintf_r+0x1ea>
 800f364:	080156cc 	.word	0x080156cc
 800f368:	080156d6 	.word	0x080156d6
 800f36c:	0800cdf1 	.word	0x0800cdf1
 800f370:	0800f11f 	.word	0x0800f11f
 800f374:	080156d2 	.word	0x080156d2

0800f378 <_scanf_chars>:
 800f378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f37c:	4615      	mov	r5, r2
 800f37e:	688a      	ldr	r2, [r1, #8]
 800f380:	4680      	mov	r8, r0
 800f382:	460c      	mov	r4, r1
 800f384:	b932      	cbnz	r2, 800f394 <_scanf_chars+0x1c>
 800f386:	698a      	ldr	r2, [r1, #24]
 800f388:	2a00      	cmp	r2, #0
 800f38a:	bf0c      	ite	eq
 800f38c:	2201      	moveq	r2, #1
 800f38e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f392:	608a      	str	r2, [r1, #8]
 800f394:	6822      	ldr	r2, [r4, #0]
 800f396:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f428 <_scanf_chars+0xb0>
 800f39a:	06d1      	lsls	r1, r2, #27
 800f39c:	bf5f      	itttt	pl
 800f39e:	681a      	ldrpl	r2, [r3, #0]
 800f3a0:	1d11      	addpl	r1, r2, #4
 800f3a2:	6019      	strpl	r1, [r3, #0]
 800f3a4:	6816      	ldrpl	r6, [r2, #0]
 800f3a6:	2700      	movs	r7, #0
 800f3a8:	69a0      	ldr	r0, [r4, #24]
 800f3aa:	b188      	cbz	r0, 800f3d0 <_scanf_chars+0x58>
 800f3ac:	2801      	cmp	r0, #1
 800f3ae:	d107      	bne.n	800f3c0 <_scanf_chars+0x48>
 800f3b0:	682a      	ldr	r2, [r5, #0]
 800f3b2:	7811      	ldrb	r1, [r2, #0]
 800f3b4:	6962      	ldr	r2, [r4, #20]
 800f3b6:	5c52      	ldrb	r2, [r2, r1]
 800f3b8:	b952      	cbnz	r2, 800f3d0 <_scanf_chars+0x58>
 800f3ba:	2f00      	cmp	r7, #0
 800f3bc:	d031      	beq.n	800f422 <_scanf_chars+0xaa>
 800f3be:	e022      	b.n	800f406 <_scanf_chars+0x8e>
 800f3c0:	2802      	cmp	r0, #2
 800f3c2:	d120      	bne.n	800f406 <_scanf_chars+0x8e>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f3cc:	071b      	lsls	r3, r3, #28
 800f3ce:	d41a      	bmi.n	800f406 <_scanf_chars+0x8e>
 800f3d0:	6823      	ldr	r3, [r4, #0]
 800f3d2:	06da      	lsls	r2, r3, #27
 800f3d4:	bf5e      	ittt	pl
 800f3d6:	682b      	ldrpl	r3, [r5, #0]
 800f3d8:	781b      	ldrbpl	r3, [r3, #0]
 800f3da:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f3de:	682a      	ldr	r2, [r5, #0]
 800f3e0:	686b      	ldr	r3, [r5, #4]
 800f3e2:	3201      	adds	r2, #1
 800f3e4:	602a      	str	r2, [r5, #0]
 800f3e6:	68a2      	ldr	r2, [r4, #8]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	3a01      	subs	r2, #1
 800f3ec:	606b      	str	r3, [r5, #4]
 800f3ee:	3701      	adds	r7, #1
 800f3f0:	60a2      	str	r2, [r4, #8]
 800f3f2:	b142      	cbz	r2, 800f406 <_scanf_chars+0x8e>
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dcd7      	bgt.n	800f3a8 <_scanf_chars+0x30>
 800f3f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f3fc:	4629      	mov	r1, r5
 800f3fe:	4640      	mov	r0, r8
 800f400:	4798      	blx	r3
 800f402:	2800      	cmp	r0, #0
 800f404:	d0d0      	beq.n	800f3a8 <_scanf_chars+0x30>
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	f013 0310 	ands.w	r3, r3, #16
 800f40c:	d105      	bne.n	800f41a <_scanf_chars+0xa2>
 800f40e:	68e2      	ldr	r2, [r4, #12]
 800f410:	3201      	adds	r2, #1
 800f412:	60e2      	str	r2, [r4, #12]
 800f414:	69a2      	ldr	r2, [r4, #24]
 800f416:	b102      	cbz	r2, 800f41a <_scanf_chars+0xa2>
 800f418:	7033      	strb	r3, [r6, #0]
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	443b      	add	r3, r7
 800f41e:	6123      	str	r3, [r4, #16]
 800f420:	2000      	movs	r0, #0
 800f422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f426:	bf00      	nop
 800f428:	08015503 	.word	0x08015503

0800f42c <_scanf_i>:
 800f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	4698      	mov	r8, r3
 800f432:	4b74      	ldr	r3, [pc, #464]	; (800f604 <_scanf_i+0x1d8>)
 800f434:	460c      	mov	r4, r1
 800f436:	4682      	mov	sl, r0
 800f438:	4616      	mov	r6, r2
 800f43a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f43e:	b087      	sub	sp, #28
 800f440:	ab03      	add	r3, sp, #12
 800f442:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f446:	4b70      	ldr	r3, [pc, #448]	; (800f608 <_scanf_i+0x1dc>)
 800f448:	69a1      	ldr	r1, [r4, #24]
 800f44a:	4a70      	ldr	r2, [pc, #448]	; (800f60c <_scanf_i+0x1e0>)
 800f44c:	2903      	cmp	r1, #3
 800f44e:	bf18      	it	ne
 800f450:	461a      	movne	r2, r3
 800f452:	68a3      	ldr	r3, [r4, #8]
 800f454:	9201      	str	r2, [sp, #4]
 800f456:	1e5a      	subs	r2, r3, #1
 800f458:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f45c:	bf88      	it	hi
 800f45e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f462:	4627      	mov	r7, r4
 800f464:	bf82      	ittt	hi
 800f466:	eb03 0905 	addhi.w	r9, r3, r5
 800f46a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f46e:	60a3      	strhi	r3, [r4, #8]
 800f470:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f474:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f478:	bf98      	it	ls
 800f47a:	f04f 0900 	movls.w	r9, #0
 800f47e:	6023      	str	r3, [r4, #0]
 800f480:	463d      	mov	r5, r7
 800f482:	f04f 0b00 	mov.w	fp, #0
 800f486:	6831      	ldr	r1, [r6, #0]
 800f488:	ab03      	add	r3, sp, #12
 800f48a:	7809      	ldrb	r1, [r1, #0]
 800f48c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f490:	2202      	movs	r2, #2
 800f492:	f7f0 febd 	bl	8000210 <memchr>
 800f496:	b328      	cbz	r0, 800f4e4 <_scanf_i+0xb8>
 800f498:	f1bb 0f01 	cmp.w	fp, #1
 800f49c:	d159      	bne.n	800f552 <_scanf_i+0x126>
 800f49e:	6862      	ldr	r2, [r4, #4]
 800f4a0:	b92a      	cbnz	r2, 800f4ae <_scanf_i+0x82>
 800f4a2:	6822      	ldr	r2, [r4, #0]
 800f4a4:	2308      	movs	r3, #8
 800f4a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4aa:	6063      	str	r3, [r4, #4]
 800f4ac:	6022      	str	r2, [r4, #0]
 800f4ae:	6822      	ldr	r2, [r4, #0]
 800f4b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f4b4:	6022      	str	r2, [r4, #0]
 800f4b6:	68a2      	ldr	r2, [r4, #8]
 800f4b8:	1e51      	subs	r1, r2, #1
 800f4ba:	60a1      	str	r1, [r4, #8]
 800f4bc:	b192      	cbz	r2, 800f4e4 <_scanf_i+0xb8>
 800f4be:	6832      	ldr	r2, [r6, #0]
 800f4c0:	1c51      	adds	r1, r2, #1
 800f4c2:	6031      	str	r1, [r6, #0]
 800f4c4:	7812      	ldrb	r2, [r2, #0]
 800f4c6:	f805 2b01 	strb.w	r2, [r5], #1
 800f4ca:	6872      	ldr	r2, [r6, #4]
 800f4cc:	3a01      	subs	r2, #1
 800f4ce:	2a00      	cmp	r2, #0
 800f4d0:	6072      	str	r2, [r6, #4]
 800f4d2:	dc07      	bgt.n	800f4e4 <_scanf_i+0xb8>
 800f4d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4650      	mov	r0, sl
 800f4dc:	4790      	blx	r2
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	f040 8085 	bne.w	800f5ee <_scanf_i+0x1c2>
 800f4e4:	f10b 0b01 	add.w	fp, fp, #1
 800f4e8:	f1bb 0f03 	cmp.w	fp, #3
 800f4ec:	d1cb      	bne.n	800f486 <_scanf_i+0x5a>
 800f4ee:	6863      	ldr	r3, [r4, #4]
 800f4f0:	b90b      	cbnz	r3, 800f4f6 <_scanf_i+0xca>
 800f4f2:	230a      	movs	r3, #10
 800f4f4:	6063      	str	r3, [r4, #4]
 800f4f6:	6863      	ldr	r3, [r4, #4]
 800f4f8:	4945      	ldr	r1, [pc, #276]	; (800f610 <_scanf_i+0x1e4>)
 800f4fa:	6960      	ldr	r0, [r4, #20]
 800f4fc:	1ac9      	subs	r1, r1, r3
 800f4fe:	f000 f889 	bl	800f614 <__sccl>
 800f502:	f04f 0b00 	mov.w	fp, #0
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	6822      	ldr	r2, [r4, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d03d      	beq.n	800f58a <_scanf_i+0x15e>
 800f50e:	6831      	ldr	r1, [r6, #0]
 800f510:	6960      	ldr	r0, [r4, #20]
 800f512:	f891 c000 	ldrb.w	ip, [r1]
 800f516:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d035      	beq.n	800f58a <_scanf_i+0x15e>
 800f51e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f522:	d124      	bne.n	800f56e <_scanf_i+0x142>
 800f524:	0510      	lsls	r0, r2, #20
 800f526:	d522      	bpl.n	800f56e <_scanf_i+0x142>
 800f528:	f10b 0b01 	add.w	fp, fp, #1
 800f52c:	f1b9 0f00 	cmp.w	r9, #0
 800f530:	d003      	beq.n	800f53a <_scanf_i+0x10e>
 800f532:	3301      	adds	r3, #1
 800f534:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f538:	60a3      	str	r3, [r4, #8]
 800f53a:	6873      	ldr	r3, [r6, #4]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	2b00      	cmp	r3, #0
 800f540:	6073      	str	r3, [r6, #4]
 800f542:	dd1b      	ble.n	800f57c <_scanf_i+0x150>
 800f544:	6833      	ldr	r3, [r6, #0]
 800f546:	3301      	adds	r3, #1
 800f548:	6033      	str	r3, [r6, #0]
 800f54a:	68a3      	ldr	r3, [r4, #8]
 800f54c:	3b01      	subs	r3, #1
 800f54e:	60a3      	str	r3, [r4, #8]
 800f550:	e7d9      	b.n	800f506 <_scanf_i+0xda>
 800f552:	f1bb 0f02 	cmp.w	fp, #2
 800f556:	d1ae      	bne.n	800f4b6 <_scanf_i+0x8a>
 800f558:	6822      	ldr	r2, [r4, #0]
 800f55a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f55e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f562:	d1bf      	bne.n	800f4e4 <_scanf_i+0xb8>
 800f564:	2310      	movs	r3, #16
 800f566:	6063      	str	r3, [r4, #4]
 800f568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f56c:	e7a2      	b.n	800f4b4 <_scanf_i+0x88>
 800f56e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f572:	6022      	str	r2, [r4, #0]
 800f574:	780b      	ldrb	r3, [r1, #0]
 800f576:	f805 3b01 	strb.w	r3, [r5], #1
 800f57a:	e7de      	b.n	800f53a <_scanf_i+0x10e>
 800f57c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f580:	4631      	mov	r1, r6
 800f582:	4650      	mov	r0, sl
 800f584:	4798      	blx	r3
 800f586:	2800      	cmp	r0, #0
 800f588:	d0df      	beq.n	800f54a <_scanf_i+0x11e>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	05d9      	lsls	r1, r3, #23
 800f58e:	d50d      	bpl.n	800f5ac <_scanf_i+0x180>
 800f590:	42bd      	cmp	r5, r7
 800f592:	d909      	bls.n	800f5a8 <_scanf_i+0x17c>
 800f594:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f598:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f59c:	4632      	mov	r2, r6
 800f59e:	4650      	mov	r0, sl
 800f5a0:	4798      	blx	r3
 800f5a2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800f5a6:	464d      	mov	r5, r9
 800f5a8:	42bd      	cmp	r5, r7
 800f5aa:	d028      	beq.n	800f5fe <_scanf_i+0x1d2>
 800f5ac:	6822      	ldr	r2, [r4, #0]
 800f5ae:	f012 0210 	ands.w	r2, r2, #16
 800f5b2:	d113      	bne.n	800f5dc <_scanf_i+0x1b0>
 800f5b4:	702a      	strb	r2, [r5, #0]
 800f5b6:	6863      	ldr	r3, [r4, #4]
 800f5b8:	9e01      	ldr	r6, [sp, #4]
 800f5ba:	4639      	mov	r1, r7
 800f5bc:	4650      	mov	r0, sl
 800f5be:	47b0      	blx	r6
 800f5c0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5c4:	6821      	ldr	r1, [r4, #0]
 800f5c6:	1d1a      	adds	r2, r3, #4
 800f5c8:	f8c8 2000 	str.w	r2, [r8]
 800f5cc:	f011 0f20 	tst.w	r1, #32
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	d00f      	beq.n	800f5f4 <_scanf_i+0x1c8>
 800f5d4:	6018      	str	r0, [r3, #0]
 800f5d6:	68e3      	ldr	r3, [r4, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	60e3      	str	r3, [r4, #12]
 800f5dc:	6923      	ldr	r3, [r4, #16]
 800f5de:	1bed      	subs	r5, r5, r7
 800f5e0:	445d      	add	r5, fp
 800f5e2:	442b      	add	r3, r5
 800f5e4:	6123      	str	r3, [r4, #16]
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	b007      	add	sp, #28
 800f5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ee:	f04f 0b00 	mov.w	fp, #0
 800f5f2:	e7ca      	b.n	800f58a <_scanf_i+0x15e>
 800f5f4:	07ca      	lsls	r2, r1, #31
 800f5f6:	bf4c      	ite	mi
 800f5f8:	8018      	strhmi	r0, [r3, #0]
 800f5fa:	6018      	strpl	r0, [r3, #0]
 800f5fc:	e7eb      	b.n	800f5d6 <_scanf_i+0x1aa>
 800f5fe:	2001      	movs	r0, #1
 800f600:	e7f2      	b.n	800f5e8 <_scanf_i+0x1bc>
 800f602:	bf00      	nop
 800f604:	080113f0 	.word	0x080113f0
 800f608:	080100b9 	.word	0x080100b9
 800f60c:	0800dabd 	.word	0x0800dabd
 800f610:	080156ed 	.word	0x080156ed

0800f614 <__sccl>:
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	780b      	ldrb	r3, [r1, #0]
 800f618:	4604      	mov	r4, r0
 800f61a:	2b5e      	cmp	r3, #94	; 0x5e
 800f61c:	bf0b      	itete	eq
 800f61e:	784b      	ldrbeq	r3, [r1, #1]
 800f620:	1c4a      	addne	r2, r1, #1
 800f622:	1c8a      	addeq	r2, r1, #2
 800f624:	2100      	movne	r1, #0
 800f626:	bf08      	it	eq
 800f628:	2101      	moveq	r1, #1
 800f62a:	3801      	subs	r0, #1
 800f62c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f630:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f634:	42a8      	cmp	r0, r5
 800f636:	d1fb      	bne.n	800f630 <__sccl+0x1c>
 800f638:	b90b      	cbnz	r3, 800f63e <__sccl+0x2a>
 800f63a:	1e50      	subs	r0, r2, #1
 800f63c:	bd70      	pop	{r4, r5, r6, pc}
 800f63e:	f081 0101 	eor.w	r1, r1, #1
 800f642:	54e1      	strb	r1, [r4, r3]
 800f644:	4610      	mov	r0, r2
 800f646:	4602      	mov	r2, r0
 800f648:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f64c:	2d2d      	cmp	r5, #45	; 0x2d
 800f64e:	d005      	beq.n	800f65c <__sccl+0x48>
 800f650:	2d5d      	cmp	r5, #93	; 0x5d
 800f652:	d016      	beq.n	800f682 <__sccl+0x6e>
 800f654:	2d00      	cmp	r5, #0
 800f656:	d0f1      	beq.n	800f63c <__sccl+0x28>
 800f658:	462b      	mov	r3, r5
 800f65a:	e7f2      	b.n	800f642 <__sccl+0x2e>
 800f65c:	7846      	ldrb	r6, [r0, #1]
 800f65e:	2e5d      	cmp	r6, #93	; 0x5d
 800f660:	d0fa      	beq.n	800f658 <__sccl+0x44>
 800f662:	42b3      	cmp	r3, r6
 800f664:	dcf8      	bgt.n	800f658 <__sccl+0x44>
 800f666:	3002      	adds	r0, #2
 800f668:	461a      	mov	r2, r3
 800f66a:	3201      	adds	r2, #1
 800f66c:	4296      	cmp	r6, r2
 800f66e:	54a1      	strb	r1, [r4, r2]
 800f670:	dcfb      	bgt.n	800f66a <__sccl+0x56>
 800f672:	1af2      	subs	r2, r6, r3
 800f674:	3a01      	subs	r2, #1
 800f676:	1c5d      	adds	r5, r3, #1
 800f678:	42b3      	cmp	r3, r6
 800f67a:	bfa8      	it	ge
 800f67c:	2200      	movge	r2, #0
 800f67e:	18ab      	adds	r3, r5, r2
 800f680:	e7e1      	b.n	800f646 <__sccl+0x32>
 800f682:	4610      	mov	r0, r2
 800f684:	e7da      	b.n	800f63c <__sccl+0x28>
	...

0800f688 <__sflush_r>:
 800f688:	898a      	ldrh	r2, [r1, #12]
 800f68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f68e:	4605      	mov	r5, r0
 800f690:	0710      	lsls	r0, r2, #28
 800f692:	460c      	mov	r4, r1
 800f694:	d458      	bmi.n	800f748 <__sflush_r+0xc0>
 800f696:	684b      	ldr	r3, [r1, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	dc05      	bgt.n	800f6a8 <__sflush_r+0x20>
 800f69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	dc02      	bgt.n	800f6a8 <__sflush_r+0x20>
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6aa:	2e00      	cmp	r6, #0
 800f6ac:	d0f9      	beq.n	800f6a2 <__sflush_r+0x1a>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f6b4:	682f      	ldr	r7, [r5, #0]
 800f6b6:	6a21      	ldr	r1, [r4, #32]
 800f6b8:	602b      	str	r3, [r5, #0]
 800f6ba:	d032      	beq.n	800f722 <__sflush_r+0x9a>
 800f6bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	075a      	lsls	r2, r3, #29
 800f6c2:	d505      	bpl.n	800f6d0 <__sflush_r+0x48>
 800f6c4:	6863      	ldr	r3, [r4, #4]
 800f6c6:	1ac0      	subs	r0, r0, r3
 800f6c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6ca:	b10b      	cbz	r3, 800f6d0 <__sflush_r+0x48>
 800f6cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6ce:	1ac0      	subs	r0, r0, r3
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6d6:	6a21      	ldr	r1, [r4, #32]
 800f6d8:	4628      	mov	r0, r5
 800f6da:	47b0      	blx	r6
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	89a3      	ldrh	r3, [r4, #12]
 800f6e0:	d106      	bne.n	800f6f0 <__sflush_r+0x68>
 800f6e2:	6829      	ldr	r1, [r5, #0]
 800f6e4:	291d      	cmp	r1, #29
 800f6e6:	d82b      	bhi.n	800f740 <__sflush_r+0xb8>
 800f6e8:	4a29      	ldr	r2, [pc, #164]	; (800f790 <__sflush_r+0x108>)
 800f6ea:	410a      	asrs	r2, r1
 800f6ec:	07d6      	lsls	r6, r2, #31
 800f6ee:	d427      	bmi.n	800f740 <__sflush_r+0xb8>
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	6062      	str	r2, [r4, #4]
 800f6f4:	04d9      	lsls	r1, r3, #19
 800f6f6:	6922      	ldr	r2, [r4, #16]
 800f6f8:	6022      	str	r2, [r4, #0]
 800f6fa:	d504      	bpl.n	800f706 <__sflush_r+0x7e>
 800f6fc:	1c42      	adds	r2, r0, #1
 800f6fe:	d101      	bne.n	800f704 <__sflush_r+0x7c>
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	b903      	cbnz	r3, 800f706 <__sflush_r+0x7e>
 800f704:	6560      	str	r0, [r4, #84]	; 0x54
 800f706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f708:	602f      	str	r7, [r5, #0]
 800f70a:	2900      	cmp	r1, #0
 800f70c:	d0c9      	beq.n	800f6a2 <__sflush_r+0x1a>
 800f70e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f712:	4299      	cmp	r1, r3
 800f714:	d002      	beq.n	800f71c <__sflush_r+0x94>
 800f716:	4628      	mov	r0, r5
 800f718:	f7ff f974 	bl	800ea04 <_free_r>
 800f71c:	2000      	movs	r0, #0
 800f71e:	6360      	str	r0, [r4, #52]	; 0x34
 800f720:	e7c0      	b.n	800f6a4 <__sflush_r+0x1c>
 800f722:	2301      	movs	r3, #1
 800f724:	4628      	mov	r0, r5
 800f726:	47b0      	blx	r6
 800f728:	1c41      	adds	r1, r0, #1
 800f72a:	d1c8      	bne.n	800f6be <__sflush_r+0x36>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0c5      	beq.n	800f6be <__sflush_r+0x36>
 800f732:	2b1d      	cmp	r3, #29
 800f734:	d001      	beq.n	800f73a <__sflush_r+0xb2>
 800f736:	2b16      	cmp	r3, #22
 800f738:	d101      	bne.n	800f73e <__sflush_r+0xb6>
 800f73a:	602f      	str	r7, [r5, #0]
 800f73c:	e7b1      	b.n	800f6a2 <__sflush_r+0x1a>
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f744:	81a3      	strh	r3, [r4, #12]
 800f746:	e7ad      	b.n	800f6a4 <__sflush_r+0x1c>
 800f748:	690f      	ldr	r7, [r1, #16]
 800f74a:	2f00      	cmp	r7, #0
 800f74c:	d0a9      	beq.n	800f6a2 <__sflush_r+0x1a>
 800f74e:	0793      	lsls	r3, r2, #30
 800f750:	680e      	ldr	r6, [r1, #0]
 800f752:	bf08      	it	eq
 800f754:	694b      	ldreq	r3, [r1, #20]
 800f756:	600f      	str	r7, [r1, #0]
 800f758:	bf18      	it	ne
 800f75a:	2300      	movne	r3, #0
 800f75c:	eba6 0807 	sub.w	r8, r6, r7
 800f760:	608b      	str	r3, [r1, #8]
 800f762:	f1b8 0f00 	cmp.w	r8, #0
 800f766:	dd9c      	ble.n	800f6a2 <__sflush_r+0x1a>
 800f768:	6a21      	ldr	r1, [r4, #32]
 800f76a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f76c:	4643      	mov	r3, r8
 800f76e:	463a      	mov	r2, r7
 800f770:	4628      	mov	r0, r5
 800f772:	47b0      	blx	r6
 800f774:	2800      	cmp	r0, #0
 800f776:	dc06      	bgt.n	800f786 <__sflush_r+0xfe>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f784:	e78e      	b.n	800f6a4 <__sflush_r+0x1c>
 800f786:	4407      	add	r7, r0
 800f788:	eba8 0800 	sub.w	r8, r8, r0
 800f78c:	e7e9      	b.n	800f762 <__sflush_r+0xda>
 800f78e:	bf00      	nop
 800f790:	dfbffffe 	.word	0xdfbffffe

0800f794 <_fflush_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	690b      	ldr	r3, [r1, #16]
 800f798:	4605      	mov	r5, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b913      	cbnz	r3, 800f7a4 <_fflush_r+0x10>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}
 800f7a4:	b118      	cbz	r0, 800f7ae <_fflush_r+0x1a>
 800f7a6:	6a03      	ldr	r3, [r0, #32]
 800f7a8:	b90b      	cbnz	r3, 800f7ae <_fflush_r+0x1a>
 800f7aa:	f7fe f8ed 	bl	800d988 <__sinit>
 800f7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d0f3      	beq.n	800f79e <_fflush_r+0xa>
 800f7b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7b8:	07d0      	lsls	r0, r2, #31
 800f7ba:	d404      	bmi.n	800f7c6 <_fflush_r+0x32>
 800f7bc:	0599      	lsls	r1, r3, #22
 800f7be:	d402      	bmi.n	800f7c6 <_fflush_r+0x32>
 800f7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c2:	f7fe fa74 	bl	800dcae <__retarget_lock_acquire_recursive>
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	f7ff ff5d 	bl	800f688 <__sflush_r>
 800f7ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7d0:	07da      	lsls	r2, r3, #31
 800f7d2:	4605      	mov	r5, r0
 800f7d4:	d4e4      	bmi.n	800f7a0 <_fflush_r+0xc>
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	059b      	lsls	r3, r3, #22
 800f7da:	d4e1      	bmi.n	800f7a0 <_fflush_r+0xc>
 800f7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7de:	f7fe fa67 	bl	800dcb0 <__retarget_lock_release_recursive>
 800f7e2:	e7dd      	b.n	800f7a0 <_fflush_r+0xc>

0800f7e4 <_Balloc>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	69c6      	ldr	r6, [r0, #28]
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	b976      	cbnz	r6, 800f80c <_Balloc+0x28>
 800f7ee:	2010      	movs	r0, #16
 800f7f0:	f7fd fd34 	bl	800d25c <malloc>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	61e0      	str	r0, [r4, #28]
 800f7f8:	b920      	cbnz	r0, 800f804 <_Balloc+0x20>
 800f7fa:	4b18      	ldr	r3, [pc, #96]	; (800f85c <_Balloc+0x78>)
 800f7fc:	4818      	ldr	r0, [pc, #96]	; (800f860 <_Balloc+0x7c>)
 800f7fe:	216b      	movs	r1, #107	; 0x6b
 800f800:	f7fe fa66 	bl	800dcd0 <__assert_func>
 800f804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f808:	6006      	str	r6, [r0, #0]
 800f80a:	60c6      	str	r6, [r0, #12]
 800f80c:	69e6      	ldr	r6, [r4, #28]
 800f80e:	68f3      	ldr	r3, [r6, #12]
 800f810:	b183      	cbz	r3, 800f834 <_Balloc+0x50>
 800f812:	69e3      	ldr	r3, [r4, #28]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f81a:	b9b8      	cbnz	r0, 800f84c <_Balloc+0x68>
 800f81c:	2101      	movs	r1, #1
 800f81e:	fa01 f605 	lsl.w	r6, r1, r5
 800f822:	1d72      	adds	r2, r6, #5
 800f824:	0092      	lsls	r2, r2, #2
 800f826:	4620      	mov	r0, r4
 800f828:	f000 fd83 	bl	8010332 <_calloc_r>
 800f82c:	b160      	cbz	r0, 800f848 <_Balloc+0x64>
 800f82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f832:	e00e      	b.n	800f852 <_Balloc+0x6e>
 800f834:	2221      	movs	r2, #33	; 0x21
 800f836:	2104      	movs	r1, #4
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 fd7a 	bl	8010332 <_calloc_r>
 800f83e:	69e3      	ldr	r3, [r4, #28]
 800f840:	60f0      	str	r0, [r6, #12]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1e4      	bne.n	800f812 <_Balloc+0x2e>
 800f848:	2000      	movs	r0, #0
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
 800f84c:	6802      	ldr	r2, [r0, #0]
 800f84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f852:	2300      	movs	r3, #0
 800f854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f858:	e7f7      	b.n	800f84a <_Balloc+0x66>
 800f85a:	bf00      	nop
 800f85c:	0801564c 	.word	0x0801564c
 800f860:	080156f8 	.word	0x080156f8

0800f864 <_Bfree>:
 800f864:	b570      	push	{r4, r5, r6, lr}
 800f866:	69c6      	ldr	r6, [r0, #28]
 800f868:	4605      	mov	r5, r0
 800f86a:	460c      	mov	r4, r1
 800f86c:	b976      	cbnz	r6, 800f88c <_Bfree+0x28>
 800f86e:	2010      	movs	r0, #16
 800f870:	f7fd fcf4 	bl	800d25c <malloc>
 800f874:	4602      	mov	r2, r0
 800f876:	61e8      	str	r0, [r5, #28]
 800f878:	b920      	cbnz	r0, 800f884 <_Bfree+0x20>
 800f87a:	4b09      	ldr	r3, [pc, #36]	; (800f8a0 <_Bfree+0x3c>)
 800f87c:	4809      	ldr	r0, [pc, #36]	; (800f8a4 <_Bfree+0x40>)
 800f87e:	218f      	movs	r1, #143	; 0x8f
 800f880:	f7fe fa26 	bl	800dcd0 <__assert_func>
 800f884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f888:	6006      	str	r6, [r0, #0]
 800f88a:	60c6      	str	r6, [r0, #12]
 800f88c:	b13c      	cbz	r4, 800f89e <_Bfree+0x3a>
 800f88e:	69eb      	ldr	r3, [r5, #28]
 800f890:	6862      	ldr	r2, [r4, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f898:	6021      	str	r1, [r4, #0]
 800f89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	0801564c 	.word	0x0801564c
 800f8a4:	080156f8 	.word	0x080156f8

0800f8a8 <__multadd>:
 800f8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ac:	690d      	ldr	r5, [r1, #16]
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	461e      	mov	r6, r3
 800f8b4:	f101 0c14 	add.w	ip, r1, #20
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f8be:	b299      	uxth	r1, r3
 800f8c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f8c4:	0c1e      	lsrs	r6, r3, #16
 800f8c6:	0c0b      	lsrs	r3, r1, #16
 800f8c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f8cc:	b289      	uxth	r1, r1
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8d4:	4285      	cmp	r5, r0
 800f8d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f8da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8de:	dcec      	bgt.n	800f8ba <__multadd+0x12>
 800f8e0:	b30e      	cbz	r6, 800f926 <__multadd+0x7e>
 800f8e2:	68a3      	ldr	r3, [r4, #8]
 800f8e4:	42ab      	cmp	r3, r5
 800f8e6:	dc19      	bgt.n	800f91c <__multadd+0x74>
 800f8e8:	6861      	ldr	r1, [r4, #4]
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	f7ff ff79 	bl	800f7e4 <_Balloc>
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	b928      	cbnz	r0, 800f902 <__multadd+0x5a>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	4b0c      	ldr	r3, [pc, #48]	; (800f92c <__multadd+0x84>)
 800f8fa:	480d      	ldr	r0, [pc, #52]	; (800f930 <__multadd+0x88>)
 800f8fc:	21ba      	movs	r1, #186	; 0xba
 800f8fe:	f7fe f9e7 	bl	800dcd0 <__assert_func>
 800f902:	6922      	ldr	r2, [r4, #16]
 800f904:	3202      	adds	r2, #2
 800f906:	f104 010c 	add.w	r1, r4, #12
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	300c      	adds	r0, #12
 800f90e:	f7fe f9d0 	bl	800dcb2 <memcpy>
 800f912:	4621      	mov	r1, r4
 800f914:	4638      	mov	r0, r7
 800f916:	f7ff ffa5 	bl	800f864 <_Bfree>
 800f91a:	4644      	mov	r4, r8
 800f91c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f920:	3501      	adds	r5, #1
 800f922:	615e      	str	r6, [r3, #20]
 800f924:	6125      	str	r5, [r4, #16]
 800f926:	4620      	mov	r0, r4
 800f928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f92c:	080156bb 	.word	0x080156bb
 800f930:	080156f8 	.word	0x080156f8

0800f934 <__hi0bits>:
 800f934:	0c03      	lsrs	r3, r0, #16
 800f936:	041b      	lsls	r3, r3, #16
 800f938:	b9d3      	cbnz	r3, 800f970 <__hi0bits+0x3c>
 800f93a:	0400      	lsls	r0, r0, #16
 800f93c:	2310      	movs	r3, #16
 800f93e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f942:	bf04      	itt	eq
 800f944:	0200      	lsleq	r0, r0, #8
 800f946:	3308      	addeq	r3, #8
 800f948:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f94c:	bf04      	itt	eq
 800f94e:	0100      	lsleq	r0, r0, #4
 800f950:	3304      	addeq	r3, #4
 800f952:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f956:	bf04      	itt	eq
 800f958:	0080      	lsleq	r0, r0, #2
 800f95a:	3302      	addeq	r3, #2
 800f95c:	2800      	cmp	r0, #0
 800f95e:	db05      	blt.n	800f96c <__hi0bits+0x38>
 800f960:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f964:	f103 0301 	add.w	r3, r3, #1
 800f968:	bf08      	it	eq
 800f96a:	2320      	moveq	r3, #32
 800f96c:	4618      	mov	r0, r3
 800f96e:	4770      	bx	lr
 800f970:	2300      	movs	r3, #0
 800f972:	e7e4      	b.n	800f93e <__hi0bits+0xa>

0800f974 <__lo0bits>:
 800f974:	6803      	ldr	r3, [r0, #0]
 800f976:	f013 0207 	ands.w	r2, r3, #7
 800f97a:	d00c      	beq.n	800f996 <__lo0bits+0x22>
 800f97c:	07d9      	lsls	r1, r3, #31
 800f97e:	d422      	bmi.n	800f9c6 <__lo0bits+0x52>
 800f980:	079a      	lsls	r2, r3, #30
 800f982:	bf49      	itett	mi
 800f984:	085b      	lsrmi	r3, r3, #1
 800f986:	089b      	lsrpl	r3, r3, #2
 800f988:	6003      	strmi	r3, [r0, #0]
 800f98a:	2201      	movmi	r2, #1
 800f98c:	bf5c      	itt	pl
 800f98e:	6003      	strpl	r3, [r0, #0]
 800f990:	2202      	movpl	r2, #2
 800f992:	4610      	mov	r0, r2
 800f994:	4770      	bx	lr
 800f996:	b299      	uxth	r1, r3
 800f998:	b909      	cbnz	r1, 800f99e <__lo0bits+0x2a>
 800f99a:	0c1b      	lsrs	r3, r3, #16
 800f99c:	2210      	movs	r2, #16
 800f99e:	b2d9      	uxtb	r1, r3
 800f9a0:	b909      	cbnz	r1, 800f9a6 <__lo0bits+0x32>
 800f9a2:	3208      	adds	r2, #8
 800f9a4:	0a1b      	lsrs	r3, r3, #8
 800f9a6:	0719      	lsls	r1, r3, #28
 800f9a8:	bf04      	itt	eq
 800f9aa:	091b      	lsreq	r3, r3, #4
 800f9ac:	3204      	addeq	r2, #4
 800f9ae:	0799      	lsls	r1, r3, #30
 800f9b0:	bf04      	itt	eq
 800f9b2:	089b      	lsreq	r3, r3, #2
 800f9b4:	3202      	addeq	r2, #2
 800f9b6:	07d9      	lsls	r1, r3, #31
 800f9b8:	d403      	bmi.n	800f9c2 <__lo0bits+0x4e>
 800f9ba:	085b      	lsrs	r3, r3, #1
 800f9bc:	f102 0201 	add.w	r2, r2, #1
 800f9c0:	d003      	beq.n	800f9ca <__lo0bits+0x56>
 800f9c2:	6003      	str	r3, [r0, #0]
 800f9c4:	e7e5      	b.n	800f992 <__lo0bits+0x1e>
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	e7e3      	b.n	800f992 <__lo0bits+0x1e>
 800f9ca:	2220      	movs	r2, #32
 800f9cc:	e7e1      	b.n	800f992 <__lo0bits+0x1e>
	...

0800f9d0 <__i2b>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	2101      	movs	r1, #1
 800f9d6:	f7ff ff05 	bl	800f7e4 <_Balloc>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	b928      	cbnz	r0, 800f9ea <__i2b+0x1a>
 800f9de:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <__i2b+0x24>)
 800f9e0:	4805      	ldr	r0, [pc, #20]	; (800f9f8 <__i2b+0x28>)
 800f9e2:	f240 1145 	movw	r1, #325	; 0x145
 800f9e6:	f7fe f973 	bl	800dcd0 <__assert_func>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	6144      	str	r4, [r0, #20]
 800f9ee:	6103      	str	r3, [r0, #16]
 800f9f0:	bd10      	pop	{r4, pc}
 800f9f2:	bf00      	nop
 800f9f4:	080156bb 	.word	0x080156bb
 800f9f8:	080156f8 	.word	0x080156f8

0800f9fc <__multiply>:
 800f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	4691      	mov	r9, r2
 800fa02:	690a      	ldr	r2, [r1, #16]
 800fa04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	bfb8      	it	lt
 800fa0c:	460b      	movlt	r3, r1
 800fa0e:	460c      	mov	r4, r1
 800fa10:	bfbc      	itt	lt
 800fa12:	464c      	movlt	r4, r9
 800fa14:	4699      	movlt	r9, r3
 800fa16:	6927      	ldr	r7, [r4, #16]
 800fa18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa1c:	68a3      	ldr	r3, [r4, #8]
 800fa1e:	6861      	ldr	r1, [r4, #4]
 800fa20:	eb07 060a 	add.w	r6, r7, sl
 800fa24:	42b3      	cmp	r3, r6
 800fa26:	b085      	sub	sp, #20
 800fa28:	bfb8      	it	lt
 800fa2a:	3101      	addlt	r1, #1
 800fa2c:	f7ff feda 	bl	800f7e4 <_Balloc>
 800fa30:	b930      	cbnz	r0, 800fa40 <__multiply+0x44>
 800fa32:	4602      	mov	r2, r0
 800fa34:	4b44      	ldr	r3, [pc, #272]	; (800fb48 <__multiply+0x14c>)
 800fa36:	4845      	ldr	r0, [pc, #276]	; (800fb4c <__multiply+0x150>)
 800fa38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fa3c:	f7fe f948 	bl	800dcd0 <__assert_func>
 800fa40:	f100 0514 	add.w	r5, r0, #20
 800fa44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa48:	462b      	mov	r3, r5
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4543      	cmp	r3, r8
 800fa4e:	d321      	bcc.n	800fa94 <__multiply+0x98>
 800fa50:	f104 0314 	add.w	r3, r4, #20
 800fa54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa58:	f109 0314 	add.w	r3, r9, #20
 800fa5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa60:	9202      	str	r2, [sp, #8]
 800fa62:	1b3a      	subs	r2, r7, r4
 800fa64:	3a15      	subs	r2, #21
 800fa66:	f022 0203 	bic.w	r2, r2, #3
 800fa6a:	3204      	adds	r2, #4
 800fa6c:	f104 0115 	add.w	r1, r4, #21
 800fa70:	428f      	cmp	r7, r1
 800fa72:	bf38      	it	cc
 800fa74:	2204      	movcc	r2, #4
 800fa76:	9201      	str	r2, [sp, #4]
 800fa78:	9a02      	ldr	r2, [sp, #8]
 800fa7a:	9303      	str	r3, [sp, #12]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d80c      	bhi.n	800fa9a <__multiply+0x9e>
 800fa80:	2e00      	cmp	r6, #0
 800fa82:	dd03      	ble.n	800fa8c <__multiply+0x90>
 800fa84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d05b      	beq.n	800fb44 <__multiply+0x148>
 800fa8c:	6106      	str	r6, [r0, #16]
 800fa8e:	b005      	add	sp, #20
 800fa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa94:	f843 2b04 	str.w	r2, [r3], #4
 800fa98:	e7d8      	b.n	800fa4c <__multiply+0x50>
 800fa9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa9e:	f1ba 0f00 	cmp.w	sl, #0
 800faa2:	d024      	beq.n	800faee <__multiply+0xf2>
 800faa4:	f104 0e14 	add.w	lr, r4, #20
 800faa8:	46a9      	mov	r9, r5
 800faaa:	f04f 0c00 	mov.w	ip, #0
 800faae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fab2:	f8d9 1000 	ldr.w	r1, [r9]
 800fab6:	fa1f fb82 	uxth.w	fp, r2
 800faba:	b289      	uxth	r1, r1
 800fabc:	fb0a 110b 	mla	r1, sl, fp, r1
 800fac0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fac4:	f8d9 2000 	ldr.w	r2, [r9]
 800fac8:	4461      	add	r1, ip
 800faca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800face:	fb0a c20b 	mla	r2, sl, fp, ip
 800fad2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fad6:	b289      	uxth	r1, r1
 800fad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fadc:	4577      	cmp	r7, lr
 800fade:	f849 1b04 	str.w	r1, [r9], #4
 800fae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fae6:	d8e2      	bhi.n	800faae <__multiply+0xb2>
 800fae8:	9a01      	ldr	r2, [sp, #4]
 800faea:	f845 c002 	str.w	ip, [r5, r2]
 800faee:	9a03      	ldr	r2, [sp, #12]
 800faf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800faf4:	3304      	adds	r3, #4
 800faf6:	f1b9 0f00 	cmp.w	r9, #0
 800fafa:	d021      	beq.n	800fb40 <__multiply+0x144>
 800fafc:	6829      	ldr	r1, [r5, #0]
 800fafe:	f104 0c14 	add.w	ip, r4, #20
 800fb02:	46ae      	mov	lr, r5
 800fb04:	f04f 0a00 	mov.w	sl, #0
 800fb08:	f8bc b000 	ldrh.w	fp, [ip]
 800fb0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb10:	fb09 220b 	mla	r2, r9, fp, r2
 800fb14:	4452      	add	r2, sl
 800fb16:	b289      	uxth	r1, r1
 800fb18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb1c:	f84e 1b04 	str.w	r1, [lr], #4
 800fb20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb28:	f8be 1000 	ldrh.w	r1, [lr]
 800fb2c:	fb09 110a 	mla	r1, r9, sl, r1
 800fb30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fb34:	4567      	cmp	r7, ip
 800fb36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb3a:	d8e5      	bhi.n	800fb08 <__multiply+0x10c>
 800fb3c:	9a01      	ldr	r2, [sp, #4]
 800fb3e:	50a9      	str	r1, [r5, r2]
 800fb40:	3504      	adds	r5, #4
 800fb42:	e799      	b.n	800fa78 <__multiply+0x7c>
 800fb44:	3e01      	subs	r6, #1
 800fb46:	e79b      	b.n	800fa80 <__multiply+0x84>
 800fb48:	080156bb 	.word	0x080156bb
 800fb4c:	080156f8 	.word	0x080156f8

0800fb50 <__pow5mult>:
 800fb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	4615      	mov	r5, r2
 800fb56:	f012 0203 	ands.w	r2, r2, #3
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	460f      	mov	r7, r1
 800fb5e:	d007      	beq.n	800fb70 <__pow5mult+0x20>
 800fb60:	4c25      	ldr	r4, [pc, #148]	; (800fbf8 <__pow5mult+0xa8>)
 800fb62:	3a01      	subs	r2, #1
 800fb64:	2300      	movs	r3, #0
 800fb66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb6a:	f7ff fe9d 	bl	800f8a8 <__multadd>
 800fb6e:	4607      	mov	r7, r0
 800fb70:	10ad      	asrs	r5, r5, #2
 800fb72:	d03d      	beq.n	800fbf0 <__pow5mult+0xa0>
 800fb74:	69f4      	ldr	r4, [r6, #28]
 800fb76:	b97c      	cbnz	r4, 800fb98 <__pow5mult+0x48>
 800fb78:	2010      	movs	r0, #16
 800fb7a:	f7fd fb6f 	bl	800d25c <malloc>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	61f0      	str	r0, [r6, #28]
 800fb82:	b928      	cbnz	r0, 800fb90 <__pow5mult+0x40>
 800fb84:	4b1d      	ldr	r3, [pc, #116]	; (800fbfc <__pow5mult+0xac>)
 800fb86:	481e      	ldr	r0, [pc, #120]	; (800fc00 <__pow5mult+0xb0>)
 800fb88:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fb8c:	f7fe f8a0 	bl	800dcd0 <__assert_func>
 800fb90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb94:	6004      	str	r4, [r0, #0]
 800fb96:	60c4      	str	r4, [r0, #12]
 800fb98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fb9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fba0:	b94c      	cbnz	r4, 800fbb6 <__pow5mult+0x66>
 800fba2:	f240 2171 	movw	r1, #625	; 0x271
 800fba6:	4630      	mov	r0, r6
 800fba8:	f7ff ff12 	bl	800f9d0 <__i2b>
 800fbac:	2300      	movs	r3, #0
 800fbae:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	6003      	str	r3, [r0, #0]
 800fbb6:	f04f 0900 	mov.w	r9, #0
 800fbba:	07eb      	lsls	r3, r5, #31
 800fbbc:	d50a      	bpl.n	800fbd4 <__pow5mult+0x84>
 800fbbe:	4639      	mov	r1, r7
 800fbc0:	4622      	mov	r2, r4
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7ff ff1a 	bl	800f9fc <__multiply>
 800fbc8:	4639      	mov	r1, r7
 800fbca:	4680      	mov	r8, r0
 800fbcc:	4630      	mov	r0, r6
 800fbce:	f7ff fe49 	bl	800f864 <_Bfree>
 800fbd2:	4647      	mov	r7, r8
 800fbd4:	106d      	asrs	r5, r5, #1
 800fbd6:	d00b      	beq.n	800fbf0 <__pow5mult+0xa0>
 800fbd8:	6820      	ldr	r0, [r4, #0]
 800fbda:	b938      	cbnz	r0, 800fbec <__pow5mult+0x9c>
 800fbdc:	4622      	mov	r2, r4
 800fbde:	4621      	mov	r1, r4
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f7ff ff0b 	bl	800f9fc <__multiply>
 800fbe6:	6020      	str	r0, [r4, #0]
 800fbe8:	f8c0 9000 	str.w	r9, [r0]
 800fbec:	4604      	mov	r4, r0
 800fbee:	e7e4      	b.n	800fbba <__pow5mult+0x6a>
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbf6:	bf00      	nop
 800fbf8:	08015848 	.word	0x08015848
 800fbfc:	0801564c 	.word	0x0801564c
 800fc00:	080156f8 	.word	0x080156f8

0800fc04 <__lshift>:
 800fc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc08:	460c      	mov	r4, r1
 800fc0a:	6849      	ldr	r1, [r1, #4]
 800fc0c:	6923      	ldr	r3, [r4, #16]
 800fc0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	4607      	mov	r7, r0
 800fc16:	4691      	mov	r9, r2
 800fc18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc1c:	f108 0601 	add.w	r6, r8, #1
 800fc20:	42b3      	cmp	r3, r6
 800fc22:	db0b      	blt.n	800fc3c <__lshift+0x38>
 800fc24:	4638      	mov	r0, r7
 800fc26:	f7ff fddd 	bl	800f7e4 <_Balloc>
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	b948      	cbnz	r0, 800fc42 <__lshift+0x3e>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	4b28      	ldr	r3, [pc, #160]	; (800fcd4 <__lshift+0xd0>)
 800fc32:	4829      	ldr	r0, [pc, #164]	; (800fcd8 <__lshift+0xd4>)
 800fc34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fc38:	f7fe f84a 	bl	800dcd0 <__assert_func>
 800fc3c:	3101      	adds	r1, #1
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	e7ee      	b.n	800fc20 <__lshift+0x1c>
 800fc42:	2300      	movs	r3, #0
 800fc44:	f100 0114 	add.w	r1, r0, #20
 800fc48:	f100 0210 	add.w	r2, r0, #16
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	4553      	cmp	r3, sl
 800fc50:	db33      	blt.n	800fcba <__lshift+0xb6>
 800fc52:	6920      	ldr	r0, [r4, #16]
 800fc54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc58:	f104 0314 	add.w	r3, r4, #20
 800fc5c:	f019 091f 	ands.w	r9, r9, #31
 800fc60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc68:	d02b      	beq.n	800fcc2 <__lshift+0xbe>
 800fc6a:	f1c9 0e20 	rsb	lr, r9, #32
 800fc6e:	468a      	mov	sl, r1
 800fc70:	2200      	movs	r2, #0
 800fc72:	6818      	ldr	r0, [r3, #0]
 800fc74:	fa00 f009 	lsl.w	r0, r0, r9
 800fc78:	4310      	orrs	r0, r2
 800fc7a:	f84a 0b04 	str.w	r0, [sl], #4
 800fc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc82:	459c      	cmp	ip, r3
 800fc84:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc88:	d8f3      	bhi.n	800fc72 <__lshift+0x6e>
 800fc8a:	ebac 0304 	sub.w	r3, ip, r4
 800fc8e:	3b15      	subs	r3, #21
 800fc90:	f023 0303 	bic.w	r3, r3, #3
 800fc94:	3304      	adds	r3, #4
 800fc96:	f104 0015 	add.w	r0, r4, #21
 800fc9a:	4584      	cmp	ip, r0
 800fc9c:	bf38      	it	cc
 800fc9e:	2304      	movcc	r3, #4
 800fca0:	50ca      	str	r2, [r1, r3]
 800fca2:	b10a      	cbz	r2, 800fca8 <__lshift+0xa4>
 800fca4:	f108 0602 	add.w	r6, r8, #2
 800fca8:	3e01      	subs	r6, #1
 800fcaa:	4638      	mov	r0, r7
 800fcac:	612e      	str	r6, [r5, #16]
 800fcae:	4621      	mov	r1, r4
 800fcb0:	f7ff fdd8 	bl	800f864 <_Bfree>
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcba:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	e7c5      	b.n	800fc4e <__lshift+0x4a>
 800fcc2:	3904      	subs	r1, #4
 800fcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fccc:	459c      	cmp	ip, r3
 800fcce:	d8f9      	bhi.n	800fcc4 <__lshift+0xc0>
 800fcd0:	e7ea      	b.n	800fca8 <__lshift+0xa4>
 800fcd2:	bf00      	nop
 800fcd4:	080156bb 	.word	0x080156bb
 800fcd8:	080156f8 	.word	0x080156f8

0800fcdc <__mcmp>:
 800fcdc:	b530      	push	{r4, r5, lr}
 800fcde:	6902      	ldr	r2, [r0, #16]
 800fce0:	690c      	ldr	r4, [r1, #16]
 800fce2:	1b12      	subs	r2, r2, r4
 800fce4:	d10e      	bne.n	800fd04 <__mcmp+0x28>
 800fce6:	f100 0314 	add.w	r3, r0, #20
 800fcea:	3114      	adds	r1, #20
 800fcec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcfc:	42a5      	cmp	r5, r4
 800fcfe:	d003      	beq.n	800fd08 <__mcmp+0x2c>
 800fd00:	d305      	bcc.n	800fd0e <__mcmp+0x32>
 800fd02:	2201      	movs	r2, #1
 800fd04:	4610      	mov	r0, r2
 800fd06:	bd30      	pop	{r4, r5, pc}
 800fd08:	4283      	cmp	r3, r0
 800fd0a:	d3f3      	bcc.n	800fcf4 <__mcmp+0x18>
 800fd0c:	e7fa      	b.n	800fd04 <__mcmp+0x28>
 800fd0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd12:	e7f7      	b.n	800fd04 <__mcmp+0x28>

0800fd14 <__mdiff>:
 800fd14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	460c      	mov	r4, r1
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	4620      	mov	r0, r4
 800fd20:	4690      	mov	r8, r2
 800fd22:	f7ff ffdb 	bl	800fcdc <__mcmp>
 800fd26:	1e05      	subs	r5, r0, #0
 800fd28:	d110      	bne.n	800fd4c <__mdiff+0x38>
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7ff fd59 	bl	800f7e4 <_Balloc>
 800fd32:	b930      	cbnz	r0, 800fd42 <__mdiff+0x2e>
 800fd34:	4b3a      	ldr	r3, [pc, #232]	; (800fe20 <__mdiff+0x10c>)
 800fd36:	4602      	mov	r2, r0
 800fd38:	f240 2137 	movw	r1, #567	; 0x237
 800fd3c:	4839      	ldr	r0, [pc, #228]	; (800fe24 <__mdiff+0x110>)
 800fd3e:	f7fd ffc7 	bl	800dcd0 <__assert_func>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4c:	bfa4      	itt	ge
 800fd4e:	4643      	movge	r3, r8
 800fd50:	46a0      	movge	r8, r4
 800fd52:	4630      	mov	r0, r6
 800fd54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd58:	bfa6      	itte	ge
 800fd5a:	461c      	movge	r4, r3
 800fd5c:	2500      	movge	r5, #0
 800fd5e:	2501      	movlt	r5, #1
 800fd60:	f7ff fd40 	bl	800f7e4 <_Balloc>
 800fd64:	b920      	cbnz	r0, 800fd70 <__mdiff+0x5c>
 800fd66:	4b2e      	ldr	r3, [pc, #184]	; (800fe20 <__mdiff+0x10c>)
 800fd68:	4602      	mov	r2, r0
 800fd6a:	f240 2145 	movw	r1, #581	; 0x245
 800fd6e:	e7e5      	b.n	800fd3c <__mdiff+0x28>
 800fd70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd74:	6926      	ldr	r6, [r4, #16]
 800fd76:	60c5      	str	r5, [r0, #12]
 800fd78:	f104 0914 	add.w	r9, r4, #20
 800fd7c:	f108 0514 	add.w	r5, r8, #20
 800fd80:	f100 0e14 	add.w	lr, r0, #20
 800fd84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd8c:	f108 0210 	add.w	r2, r8, #16
 800fd90:	46f2      	mov	sl, lr
 800fd92:	2100      	movs	r1, #0
 800fd94:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd9c:	fa11 f88b 	uxtah	r8, r1, fp
 800fda0:	b299      	uxth	r1, r3
 800fda2:	0c1b      	lsrs	r3, r3, #16
 800fda4:	eba8 0801 	sub.w	r8, r8, r1
 800fda8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdb0:	fa1f f888 	uxth.w	r8, r8
 800fdb4:	1419      	asrs	r1, r3, #16
 800fdb6:	454e      	cmp	r6, r9
 800fdb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdbc:	f84a 3b04 	str.w	r3, [sl], #4
 800fdc0:	d8e8      	bhi.n	800fd94 <__mdiff+0x80>
 800fdc2:	1b33      	subs	r3, r6, r4
 800fdc4:	3b15      	subs	r3, #21
 800fdc6:	f023 0303 	bic.w	r3, r3, #3
 800fdca:	3304      	adds	r3, #4
 800fdcc:	3415      	adds	r4, #21
 800fdce:	42a6      	cmp	r6, r4
 800fdd0:	bf38      	it	cc
 800fdd2:	2304      	movcc	r3, #4
 800fdd4:	441d      	add	r5, r3
 800fdd6:	4473      	add	r3, lr
 800fdd8:	469e      	mov	lr, r3
 800fdda:	462e      	mov	r6, r5
 800fddc:	4566      	cmp	r6, ip
 800fdde:	d30e      	bcc.n	800fdfe <__mdiff+0xea>
 800fde0:	f10c 0203 	add.w	r2, ip, #3
 800fde4:	1b52      	subs	r2, r2, r5
 800fde6:	f022 0203 	bic.w	r2, r2, #3
 800fdea:	3d03      	subs	r5, #3
 800fdec:	45ac      	cmp	ip, r5
 800fdee:	bf38      	it	cc
 800fdf0:	2200      	movcc	r2, #0
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fdf8:	b17a      	cbz	r2, 800fe1a <__mdiff+0x106>
 800fdfa:	6107      	str	r7, [r0, #16]
 800fdfc:	e7a4      	b.n	800fd48 <__mdiff+0x34>
 800fdfe:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe02:	fa11 f288 	uxtah	r2, r1, r8
 800fe06:	1414      	asrs	r4, r2, #16
 800fe08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe0c:	b292      	uxth	r2, r2
 800fe0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe12:	f84e 2b04 	str.w	r2, [lr], #4
 800fe16:	1421      	asrs	r1, r4, #16
 800fe18:	e7e0      	b.n	800fddc <__mdiff+0xc8>
 800fe1a:	3f01      	subs	r7, #1
 800fe1c:	e7ea      	b.n	800fdf4 <__mdiff+0xe0>
 800fe1e:	bf00      	nop
 800fe20:	080156bb 	.word	0x080156bb
 800fe24:	080156f8 	.word	0x080156f8

0800fe28 <__d2b>:
 800fe28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe2c:	460f      	mov	r7, r1
 800fe2e:	2101      	movs	r1, #1
 800fe30:	ec59 8b10 	vmov	r8, r9, d0
 800fe34:	4616      	mov	r6, r2
 800fe36:	f7ff fcd5 	bl	800f7e4 <_Balloc>
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b930      	cbnz	r0, 800fe4c <__d2b+0x24>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	4b24      	ldr	r3, [pc, #144]	; (800fed4 <__d2b+0xac>)
 800fe42:	4825      	ldr	r0, [pc, #148]	; (800fed8 <__d2b+0xb0>)
 800fe44:	f240 310f 	movw	r1, #783	; 0x30f
 800fe48:	f7fd ff42 	bl	800dcd0 <__assert_func>
 800fe4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe54:	bb2d      	cbnz	r5, 800fea2 <__d2b+0x7a>
 800fe56:	9301      	str	r3, [sp, #4]
 800fe58:	f1b8 0300 	subs.w	r3, r8, #0
 800fe5c:	d026      	beq.n	800feac <__d2b+0x84>
 800fe5e:	4668      	mov	r0, sp
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	f7ff fd87 	bl	800f974 <__lo0bits>
 800fe66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe6a:	b1e8      	cbz	r0, 800fea8 <__d2b+0x80>
 800fe6c:	f1c0 0320 	rsb	r3, r0, #32
 800fe70:	fa02 f303 	lsl.w	r3, r2, r3
 800fe74:	430b      	orrs	r3, r1
 800fe76:	40c2      	lsrs	r2, r0
 800fe78:	6163      	str	r3, [r4, #20]
 800fe7a:	9201      	str	r2, [sp, #4]
 800fe7c:	9b01      	ldr	r3, [sp, #4]
 800fe7e:	61a3      	str	r3, [r4, #24]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	bf14      	ite	ne
 800fe84:	2202      	movne	r2, #2
 800fe86:	2201      	moveq	r2, #1
 800fe88:	6122      	str	r2, [r4, #16]
 800fe8a:	b1bd      	cbz	r5, 800febc <__d2b+0x94>
 800fe8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe90:	4405      	add	r5, r0
 800fe92:	603d      	str	r5, [r7, #0]
 800fe94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe98:	6030      	str	r0, [r6, #0]
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	b003      	add	sp, #12
 800fe9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fea6:	e7d6      	b.n	800fe56 <__d2b+0x2e>
 800fea8:	6161      	str	r1, [r4, #20]
 800feaa:	e7e7      	b.n	800fe7c <__d2b+0x54>
 800feac:	a801      	add	r0, sp, #4
 800feae:	f7ff fd61 	bl	800f974 <__lo0bits>
 800feb2:	9b01      	ldr	r3, [sp, #4]
 800feb4:	6163      	str	r3, [r4, #20]
 800feb6:	3020      	adds	r0, #32
 800feb8:	2201      	movs	r2, #1
 800feba:	e7e5      	b.n	800fe88 <__d2b+0x60>
 800febc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fec4:	6038      	str	r0, [r7, #0]
 800fec6:	6918      	ldr	r0, [r3, #16]
 800fec8:	f7ff fd34 	bl	800f934 <__hi0bits>
 800fecc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fed0:	e7e2      	b.n	800fe98 <__d2b+0x70>
 800fed2:	bf00      	nop
 800fed4:	080156bb 	.word	0x080156bb
 800fed8:	080156f8 	.word	0x080156f8

0800fedc <fiprintf>:
 800fedc:	b40e      	push	{r1, r2, r3}
 800fede:	b503      	push	{r0, r1, lr}
 800fee0:	4601      	mov	r1, r0
 800fee2:	ab03      	add	r3, sp, #12
 800fee4:	4805      	ldr	r0, [pc, #20]	; (800fefc <fiprintf+0x20>)
 800fee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feea:	6800      	ldr	r0, [r0, #0]
 800feec:	9301      	str	r3, [sp, #4]
 800feee:	f7ff f929 	bl	800f144 <_vfiprintf_r>
 800fef2:	b002      	add	sp, #8
 800fef4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fef8:	b003      	add	sp, #12
 800fefa:	4770      	bx	lr
 800fefc:	2000009c 	.word	0x2000009c

0800ff00 <__submore>:
 800ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff04:	460c      	mov	r4, r1
 800ff06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ff08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff0c:	4299      	cmp	r1, r3
 800ff0e:	d11d      	bne.n	800ff4c <__submore+0x4c>
 800ff10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ff14:	f7fd f9ca 	bl	800d2ac <_malloc_r>
 800ff18:	b918      	cbnz	r0, 800ff22 <__submore+0x22>
 800ff1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff26:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ff2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ff2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ff32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ff36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ff3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ff42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ff46:	6020      	str	r0, [r4, #0]
 800ff48:	2000      	movs	r0, #0
 800ff4a:	e7e8      	b.n	800ff1e <__submore+0x1e>
 800ff4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ff4e:	0077      	lsls	r7, r6, #1
 800ff50:	463a      	mov	r2, r7
 800ff52:	f000 f80f 	bl	800ff74 <_realloc_r>
 800ff56:	4605      	mov	r5, r0
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d0de      	beq.n	800ff1a <__submore+0x1a>
 800ff5c:	eb00 0806 	add.w	r8, r0, r6
 800ff60:	4601      	mov	r1, r0
 800ff62:	4632      	mov	r2, r6
 800ff64:	4640      	mov	r0, r8
 800ff66:	f7fd fea4 	bl	800dcb2 <memcpy>
 800ff6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ff6e:	f8c4 8000 	str.w	r8, [r4]
 800ff72:	e7e9      	b.n	800ff48 <__submore+0x48>

0800ff74 <_realloc_r>:
 800ff74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff78:	4680      	mov	r8, r0
 800ff7a:	4614      	mov	r4, r2
 800ff7c:	460e      	mov	r6, r1
 800ff7e:	b921      	cbnz	r1, 800ff8a <_realloc_r+0x16>
 800ff80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff84:	4611      	mov	r1, r2
 800ff86:	f7fd b991 	b.w	800d2ac <_malloc_r>
 800ff8a:	b92a      	cbnz	r2, 800ff98 <_realloc_r+0x24>
 800ff8c:	f7fe fd3a 	bl	800ea04 <_free_r>
 800ff90:	4625      	mov	r5, r4
 800ff92:	4628      	mov	r0, r5
 800ff94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff98:	f000 f9f3 	bl	8010382 <_malloc_usable_size_r>
 800ff9c:	4284      	cmp	r4, r0
 800ff9e:	4607      	mov	r7, r0
 800ffa0:	d802      	bhi.n	800ffa8 <_realloc_r+0x34>
 800ffa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffa6:	d812      	bhi.n	800ffce <_realloc_r+0x5a>
 800ffa8:	4621      	mov	r1, r4
 800ffaa:	4640      	mov	r0, r8
 800ffac:	f7fd f97e 	bl	800d2ac <_malloc_r>
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d0ed      	beq.n	800ff92 <_realloc_r+0x1e>
 800ffb6:	42bc      	cmp	r4, r7
 800ffb8:	4622      	mov	r2, r4
 800ffba:	4631      	mov	r1, r6
 800ffbc:	bf28      	it	cs
 800ffbe:	463a      	movcs	r2, r7
 800ffc0:	f7fd fe77 	bl	800dcb2 <memcpy>
 800ffc4:	4631      	mov	r1, r6
 800ffc6:	4640      	mov	r0, r8
 800ffc8:	f7fe fd1c 	bl	800ea04 <_free_r>
 800ffcc:	e7e1      	b.n	800ff92 <_realloc_r+0x1e>
 800ffce:	4635      	mov	r5, r6
 800ffd0:	e7df      	b.n	800ff92 <_realloc_r+0x1e>
	...

0800ffd4 <_strtoul_l.constprop.0>:
 800ffd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffd8:	4f36      	ldr	r7, [pc, #216]	; (80100b4 <_strtoul_l.constprop.0+0xe0>)
 800ffda:	4686      	mov	lr, r0
 800ffdc:	460d      	mov	r5, r1
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffe4:	5d3e      	ldrb	r6, [r7, r4]
 800ffe6:	f016 0608 	ands.w	r6, r6, #8
 800ffea:	d1f8      	bne.n	800ffde <_strtoul_l.constprop.0+0xa>
 800ffec:	2c2d      	cmp	r4, #45	; 0x2d
 800ffee:	d130      	bne.n	8010052 <_strtoul_l.constprop.0+0x7e>
 800fff0:	782c      	ldrb	r4, [r5, #0]
 800fff2:	2601      	movs	r6, #1
 800fff4:	1c85      	adds	r5, r0, #2
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d057      	beq.n	80100aa <_strtoul_l.constprop.0+0xd6>
 800fffa:	2b10      	cmp	r3, #16
 800fffc:	d109      	bne.n	8010012 <_strtoul_l.constprop.0+0x3e>
 800fffe:	2c30      	cmp	r4, #48	; 0x30
 8010000:	d107      	bne.n	8010012 <_strtoul_l.constprop.0+0x3e>
 8010002:	7828      	ldrb	r0, [r5, #0]
 8010004:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010008:	2858      	cmp	r0, #88	; 0x58
 801000a:	d149      	bne.n	80100a0 <_strtoul_l.constprop.0+0xcc>
 801000c:	786c      	ldrb	r4, [r5, #1]
 801000e:	2310      	movs	r3, #16
 8010010:	3502      	adds	r5, #2
 8010012:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010016:	2700      	movs	r7, #0
 8010018:	fbb8 f8f3 	udiv	r8, r8, r3
 801001c:	fb03 f908 	mul.w	r9, r3, r8
 8010020:	ea6f 0909 	mvn.w	r9, r9
 8010024:	4638      	mov	r0, r7
 8010026:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801002a:	f1bc 0f09 	cmp.w	ip, #9
 801002e:	d815      	bhi.n	801005c <_strtoul_l.constprop.0+0x88>
 8010030:	4664      	mov	r4, ip
 8010032:	42a3      	cmp	r3, r4
 8010034:	dd23      	ble.n	801007e <_strtoul_l.constprop.0+0xaa>
 8010036:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801003a:	d007      	beq.n	801004c <_strtoul_l.constprop.0+0x78>
 801003c:	4580      	cmp	r8, r0
 801003e:	d31b      	bcc.n	8010078 <_strtoul_l.constprop.0+0xa4>
 8010040:	d101      	bne.n	8010046 <_strtoul_l.constprop.0+0x72>
 8010042:	45a1      	cmp	r9, r4
 8010044:	db18      	blt.n	8010078 <_strtoul_l.constprop.0+0xa4>
 8010046:	fb00 4003 	mla	r0, r0, r3, r4
 801004a:	2701      	movs	r7, #1
 801004c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010050:	e7e9      	b.n	8010026 <_strtoul_l.constprop.0+0x52>
 8010052:	2c2b      	cmp	r4, #43	; 0x2b
 8010054:	bf04      	itt	eq
 8010056:	782c      	ldrbeq	r4, [r5, #0]
 8010058:	1c85      	addeq	r5, r0, #2
 801005a:	e7cc      	b.n	800fff6 <_strtoul_l.constprop.0+0x22>
 801005c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010060:	f1bc 0f19 	cmp.w	ip, #25
 8010064:	d801      	bhi.n	801006a <_strtoul_l.constprop.0+0x96>
 8010066:	3c37      	subs	r4, #55	; 0x37
 8010068:	e7e3      	b.n	8010032 <_strtoul_l.constprop.0+0x5e>
 801006a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801006e:	f1bc 0f19 	cmp.w	ip, #25
 8010072:	d804      	bhi.n	801007e <_strtoul_l.constprop.0+0xaa>
 8010074:	3c57      	subs	r4, #87	; 0x57
 8010076:	e7dc      	b.n	8010032 <_strtoul_l.constprop.0+0x5e>
 8010078:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801007c:	e7e6      	b.n	801004c <_strtoul_l.constprop.0+0x78>
 801007e:	1c7b      	adds	r3, r7, #1
 8010080:	d106      	bne.n	8010090 <_strtoul_l.constprop.0+0xbc>
 8010082:	2322      	movs	r3, #34	; 0x22
 8010084:	f8ce 3000 	str.w	r3, [lr]
 8010088:	4638      	mov	r0, r7
 801008a:	b932      	cbnz	r2, 801009a <_strtoul_l.constprop.0+0xc6>
 801008c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010090:	b106      	cbz	r6, 8010094 <_strtoul_l.constprop.0+0xc0>
 8010092:	4240      	negs	r0, r0
 8010094:	2a00      	cmp	r2, #0
 8010096:	d0f9      	beq.n	801008c <_strtoul_l.constprop.0+0xb8>
 8010098:	b107      	cbz	r7, 801009c <_strtoul_l.constprop.0+0xc8>
 801009a:	1e69      	subs	r1, r5, #1
 801009c:	6011      	str	r1, [r2, #0]
 801009e:	e7f5      	b.n	801008c <_strtoul_l.constprop.0+0xb8>
 80100a0:	2430      	movs	r4, #48	; 0x30
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1b5      	bne.n	8010012 <_strtoul_l.constprop.0+0x3e>
 80100a6:	2308      	movs	r3, #8
 80100a8:	e7b3      	b.n	8010012 <_strtoul_l.constprop.0+0x3e>
 80100aa:	2c30      	cmp	r4, #48	; 0x30
 80100ac:	d0a9      	beq.n	8010002 <_strtoul_l.constprop.0+0x2e>
 80100ae:	230a      	movs	r3, #10
 80100b0:	e7af      	b.n	8010012 <_strtoul_l.constprop.0+0x3e>
 80100b2:	bf00      	nop
 80100b4:	08015503 	.word	0x08015503

080100b8 <_strtoul_r>:
 80100b8:	f7ff bf8c 	b.w	800ffd4 <_strtoul_l.constprop.0>

080100bc <__swbuf_r>:
 80100bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100be:	460e      	mov	r6, r1
 80100c0:	4614      	mov	r4, r2
 80100c2:	4605      	mov	r5, r0
 80100c4:	b118      	cbz	r0, 80100ce <__swbuf_r+0x12>
 80100c6:	6a03      	ldr	r3, [r0, #32]
 80100c8:	b90b      	cbnz	r3, 80100ce <__swbuf_r+0x12>
 80100ca:	f7fd fc5d 	bl	800d988 <__sinit>
 80100ce:	69a3      	ldr	r3, [r4, #24]
 80100d0:	60a3      	str	r3, [r4, #8]
 80100d2:	89a3      	ldrh	r3, [r4, #12]
 80100d4:	071a      	lsls	r2, r3, #28
 80100d6:	d525      	bpl.n	8010124 <__swbuf_r+0x68>
 80100d8:	6923      	ldr	r3, [r4, #16]
 80100da:	b31b      	cbz	r3, 8010124 <__swbuf_r+0x68>
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	6922      	ldr	r2, [r4, #16]
 80100e0:	1a98      	subs	r0, r3, r2
 80100e2:	6963      	ldr	r3, [r4, #20]
 80100e4:	b2f6      	uxtb	r6, r6
 80100e6:	4283      	cmp	r3, r0
 80100e8:	4637      	mov	r7, r6
 80100ea:	dc04      	bgt.n	80100f6 <__swbuf_r+0x3a>
 80100ec:	4621      	mov	r1, r4
 80100ee:	4628      	mov	r0, r5
 80100f0:	f7ff fb50 	bl	800f794 <_fflush_r>
 80100f4:	b9e0      	cbnz	r0, 8010130 <__swbuf_r+0x74>
 80100f6:	68a3      	ldr	r3, [r4, #8]
 80100f8:	3b01      	subs	r3, #1
 80100fa:	60a3      	str	r3, [r4, #8]
 80100fc:	6823      	ldr	r3, [r4, #0]
 80100fe:	1c5a      	adds	r2, r3, #1
 8010100:	6022      	str	r2, [r4, #0]
 8010102:	701e      	strb	r6, [r3, #0]
 8010104:	6962      	ldr	r2, [r4, #20]
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	429a      	cmp	r2, r3
 801010a:	d004      	beq.n	8010116 <__swbuf_r+0x5a>
 801010c:	89a3      	ldrh	r3, [r4, #12]
 801010e:	07db      	lsls	r3, r3, #31
 8010110:	d506      	bpl.n	8010120 <__swbuf_r+0x64>
 8010112:	2e0a      	cmp	r6, #10
 8010114:	d104      	bne.n	8010120 <__swbuf_r+0x64>
 8010116:	4621      	mov	r1, r4
 8010118:	4628      	mov	r0, r5
 801011a:	f7ff fb3b 	bl	800f794 <_fflush_r>
 801011e:	b938      	cbnz	r0, 8010130 <__swbuf_r+0x74>
 8010120:	4638      	mov	r0, r7
 8010122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010124:	4621      	mov	r1, r4
 8010126:	4628      	mov	r0, r5
 8010128:	f000 f806 	bl	8010138 <__swsetup_r>
 801012c:	2800      	cmp	r0, #0
 801012e:	d0d5      	beq.n	80100dc <__swbuf_r+0x20>
 8010130:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010134:	e7f4      	b.n	8010120 <__swbuf_r+0x64>
	...

08010138 <__swsetup_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4b2a      	ldr	r3, [pc, #168]	; (80101e4 <__swsetup_r+0xac>)
 801013c:	4605      	mov	r5, r0
 801013e:	6818      	ldr	r0, [r3, #0]
 8010140:	460c      	mov	r4, r1
 8010142:	b118      	cbz	r0, 801014c <__swsetup_r+0x14>
 8010144:	6a03      	ldr	r3, [r0, #32]
 8010146:	b90b      	cbnz	r3, 801014c <__swsetup_r+0x14>
 8010148:	f7fd fc1e 	bl	800d988 <__sinit>
 801014c:	89a3      	ldrh	r3, [r4, #12]
 801014e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010152:	0718      	lsls	r0, r3, #28
 8010154:	d422      	bmi.n	801019c <__swsetup_r+0x64>
 8010156:	06d9      	lsls	r1, r3, #27
 8010158:	d407      	bmi.n	801016a <__swsetup_r+0x32>
 801015a:	2309      	movs	r3, #9
 801015c:	602b      	str	r3, [r5, #0]
 801015e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010162:	81a3      	strh	r3, [r4, #12]
 8010164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010168:	e034      	b.n	80101d4 <__swsetup_r+0x9c>
 801016a:	0758      	lsls	r0, r3, #29
 801016c:	d512      	bpl.n	8010194 <__swsetup_r+0x5c>
 801016e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010170:	b141      	cbz	r1, 8010184 <__swsetup_r+0x4c>
 8010172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010176:	4299      	cmp	r1, r3
 8010178:	d002      	beq.n	8010180 <__swsetup_r+0x48>
 801017a:	4628      	mov	r0, r5
 801017c:	f7fe fc42 	bl	800ea04 <_free_r>
 8010180:	2300      	movs	r3, #0
 8010182:	6363      	str	r3, [r4, #52]	; 0x34
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801018a:	81a3      	strh	r3, [r4, #12]
 801018c:	2300      	movs	r3, #0
 801018e:	6063      	str	r3, [r4, #4]
 8010190:	6923      	ldr	r3, [r4, #16]
 8010192:	6023      	str	r3, [r4, #0]
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	f043 0308 	orr.w	r3, r3, #8
 801019a:	81a3      	strh	r3, [r4, #12]
 801019c:	6923      	ldr	r3, [r4, #16]
 801019e:	b94b      	cbnz	r3, 80101b4 <__swsetup_r+0x7c>
 80101a0:	89a3      	ldrh	r3, [r4, #12]
 80101a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101aa:	d003      	beq.n	80101b4 <__swsetup_r+0x7c>
 80101ac:	4621      	mov	r1, r4
 80101ae:	4628      	mov	r0, r5
 80101b0:	f000 f840 	bl	8010234 <__smakebuf_r>
 80101b4:	89a0      	ldrh	r0, [r4, #12]
 80101b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101ba:	f010 0301 	ands.w	r3, r0, #1
 80101be:	d00a      	beq.n	80101d6 <__swsetup_r+0x9e>
 80101c0:	2300      	movs	r3, #0
 80101c2:	60a3      	str	r3, [r4, #8]
 80101c4:	6963      	ldr	r3, [r4, #20]
 80101c6:	425b      	negs	r3, r3
 80101c8:	61a3      	str	r3, [r4, #24]
 80101ca:	6923      	ldr	r3, [r4, #16]
 80101cc:	b943      	cbnz	r3, 80101e0 <__swsetup_r+0xa8>
 80101ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101d2:	d1c4      	bne.n	801015e <__swsetup_r+0x26>
 80101d4:	bd38      	pop	{r3, r4, r5, pc}
 80101d6:	0781      	lsls	r1, r0, #30
 80101d8:	bf58      	it	pl
 80101da:	6963      	ldrpl	r3, [r4, #20]
 80101dc:	60a3      	str	r3, [r4, #8]
 80101de:	e7f4      	b.n	80101ca <__swsetup_r+0x92>
 80101e0:	2000      	movs	r0, #0
 80101e2:	e7f7      	b.n	80101d4 <__swsetup_r+0x9c>
 80101e4:	2000009c 	.word	0x2000009c

080101e8 <__swhatbuf_r>:
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	460c      	mov	r4, r1
 80101ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f0:	2900      	cmp	r1, #0
 80101f2:	b096      	sub	sp, #88	; 0x58
 80101f4:	4615      	mov	r5, r2
 80101f6:	461e      	mov	r6, r3
 80101f8:	da0d      	bge.n	8010216 <__swhatbuf_r+0x2e>
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010200:	f04f 0100 	mov.w	r1, #0
 8010204:	bf0c      	ite	eq
 8010206:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801020a:	2340      	movne	r3, #64	; 0x40
 801020c:	2000      	movs	r0, #0
 801020e:	6031      	str	r1, [r6, #0]
 8010210:	602b      	str	r3, [r5, #0]
 8010212:	b016      	add	sp, #88	; 0x58
 8010214:	bd70      	pop	{r4, r5, r6, pc}
 8010216:	466a      	mov	r2, sp
 8010218:	f000 f862 	bl	80102e0 <_fstat_r>
 801021c:	2800      	cmp	r0, #0
 801021e:	dbec      	blt.n	80101fa <__swhatbuf_r+0x12>
 8010220:	9901      	ldr	r1, [sp, #4]
 8010222:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010226:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801022a:	4259      	negs	r1, r3
 801022c:	4159      	adcs	r1, r3
 801022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010232:	e7eb      	b.n	801020c <__swhatbuf_r+0x24>

08010234 <__smakebuf_r>:
 8010234:	898b      	ldrh	r3, [r1, #12]
 8010236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010238:	079d      	lsls	r5, r3, #30
 801023a:	4606      	mov	r6, r0
 801023c:	460c      	mov	r4, r1
 801023e:	d507      	bpl.n	8010250 <__smakebuf_r+0x1c>
 8010240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010244:	6023      	str	r3, [r4, #0]
 8010246:	6123      	str	r3, [r4, #16]
 8010248:	2301      	movs	r3, #1
 801024a:	6163      	str	r3, [r4, #20]
 801024c:	b002      	add	sp, #8
 801024e:	bd70      	pop	{r4, r5, r6, pc}
 8010250:	ab01      	add	r3, sp, #4
 8010252:	466a      	mov	r2, sp
 8010254:	f7ff ffc8 	bl	80101e8 <__swhatbuf_r>
 8010258:	9900      	ldr	r1, [sp, #0]
 801025a:	4605      	mov	r5, r0
 801025c:	4630      	mov	r0, r6
 801025e:	f7fd f825 	bl	800d2ac <_malloc_r>
 8010262:	b948      	cbnz	r0, 8010278 <__smakebuf_r+0x44>
 8010264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010268:	059a      	lsls	r2, r3, #22
 801026a:	d4ef      	bmi.n	801024c <__smakebuf_r+0x18>
 801026c:	f023 0303 	bic.w	r3, r3, #3
 8010270:	f043 0302 	orr.w	r3, r3, #2
 8010274:	81a3      	strh	r3, [r4, #12]
 8010276:	e7e3      	b.n	8010240 <__smakebuf_r+0xc>
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	6020      	str	r0, [r4, #0]
 801027c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010280:	81a3      	strh	r3, [r4, #12]
 8010282:	9b00      	ldr	r3, [sp, #0]
 8010284:	6163      	str	r3, [r4, #20]
 8010286:	9b01      	ldr	r3, [sp, #4]
 8010288:	6120      	str	r0, [r4, #16]
 801028a:	b15b      	cbz	r3, 80102a4 <__smakebuf_r+0x70>
 801028c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010290:	4630      	mov	r0, r6
 8010292:	f000 f837 	bl	8010304 <_isatty_r>
 8010296:	b128      	cbz	r0, 80102a4 <__smakebuf_r+0x70>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	f023 0303 	bic.w	r3, r3, #3
 801029e:	f043 0301 	orr.w	r3, r3, #1
 80102a2:	81a3      	strh	r3, [r4, #12]
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	431d      	orrs	r5, r3
 80102a8:	81a5      	strh	r5, [r4, #12]
 80102aa:	e7cf      	b.n	801024c <__smakebuf_r+0x18>

080102ac <memmove>:
 80102ac:	4288      	cmp	r0, r1
 80102ae:	b510      	push	{r4, lr}
 80102b0:	eb01 0402 	add.w	r4, r1, r2
 80102b4:	d902      	bls.n	80102bc <memmove+0x10>
 80102b6:	4284      	cmp	r4, r0
 80102b8:	4623      	mov	r3, r4
 80102ba:	d807      	bhi.n	80102cc <memmove+0x20>
 80102bc:	1e43      	subs	r3, r0, #1
 80102be:	42a1      	cmp	r1, r4
 80102c0:	d008      	beq.n	80102d4 <memmove+0x28>
 80102c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102ca:	e7f8      	b.n	80102be <memmove+0x12>
 80102cc:	4402      	add	r2, r0
 80102ce:	4601      	mov	r1, r0
 80102d0:	428a      	cmp	r2, r1
 80102d2:	d100      	bne.n	80102d6 <memmove+0x2a>
 80102d4:	bd10      	pop	{r4, pc}
 80102d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102de:	e7f7      	b.n	80102d0 <memmove+0x24>

080102e0 <_fstat_r>:
 80102e0:	b538      	push	{r3, r4, r5, lr}
 80102e2:	4d07      	ldr	r5, [pc, #28]	; (8010300 <_fstat_r+0x20>)
 80102e4:	2300      	movs	r3, #0
 80102e6:	4604      	mov	r4, r0
 80102e8:	4608      	mov	r0, r1
 80102ea:	4611      	mov	r1, r2
 80102ec:	602b      	str	r3, [r5, #0]
 80102ee:	f7f4 fd86 	bl	8004dfe <_fstat>
 80102f2:	1c43      	adds	r3, r0, #1
 80102f4:	d102      	bne.n	80102fc <_fstat_r+0x1c>
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	b103      	cbz	r3, 80102fc <_fstat_r+0x1c>
 80102fa:	6023      	str	r3, [r4, #0]
 80102fc:	bd38      	pop	{r3, r4, r5, pc}
 80102fe:	bf00      	nop
 8010300:	20009648 	.word	0x20009648

08010304 <_isatty_r>:
 8010304:	b538      	push	{r3, r4, r5, lr}
 8010306:	4d06      	ldr	r5, [pc, #24]	; (8010320 <_isatty_r+0x1c>)
 8010308:	2300      	movs	r3, #0
 801030a:	4604      	mov	r4, r0
 801030c:	4608      	mov	r0, r1
 801030e:	602b      	str	r3, [r5, #0]
 8010310:	f7f4 fd85 	bl	8004e1e <_isatty>
 8010314:	1c43      	adds	r3, r0, #1
 8010316:	d102      	bne.n	801031e <_isatty_r+0x1a>
 8010318:	682b      	ldr	r3, [r5, #0]
 801031a:	b103      	cbz	r3, 801031e <_isatty_r+0x1a>
 801031c:	6023      	str	r3, [r4, #0]
 801031e:	bd38      	pop	{r3, r4, r5, pc}
 8010320:	20009648 	.word	0x20009648

08010324 <abort>:
 8010324:	b508      	push	{r3, lr}
 8010326:	2006      	movs	r0, #6
 8010328:	f000 f868 	bl	80103fc <raise>
 801032c:	2001      	movs	r0, #1
 801032e:	f7f4 fd17 	bl	8004d60 <_exit>

08010332 <_calloc_r>:
 8010332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010334:	fba1 2402 	umull	r2, r4, r1, r2
 8010338:	b94c      	cbnz	r4, 801034e <_calloc_r+0x1c>
 801033a:	4611      	mov	r1, r2
 801033c:	9201      	str	r2, [sp, #4]
 801033e:	f7fc ffb5 	bl	800d2ac <_malloc_r>
 8010342:	9a01      	ldr	r2, [sp, #4]
 8010344:	4605      	mov	r5, r0
 8010346:	b930      	cbnz	r0, 8010356 <_calloc_r+0x24>
 8010348:	4628      	mov	r0, r5
 801034a:	b003      	add	sp, #12
 801034c:	bd30      	pop	{r4, r5, pc}
 801034e:	220c      	movs	r2, #12
 8010350:	6002      	str	r2, [r0, #0]
 8010352:	2500      	movs	r5, #0
 8010354:	e7f8      	b.n	8010348 <_calloc_r+0x16>
 8010356:	4621      	mov	r1, r4
 8010358:	f7fd fc1c 	bl	800db94 <memset>
 801035c:	e7f4      	b.n	8010348 <_calloc_r+0x16>

0801035e <__ascii_mbtowc>:
 801035e:	b082      	sub	sp, #8
 8010360:	b901      	cbnz	r1, 8010364 <__ascii_mbtowc+0x6>
 8010362:	a901      	add	r1, sp, #4
 8010364:	b142      	cbz	r2, 8010378 <__ascii_mbtowc+0x1a>
 8010366:	b14b      	cbz	r3, 801037c <__ascii_mbtowc+0x1e>
 8010368:	7813      	ldrb	r3, [r2, #0]
 801036a:	600b      	str	r3, [r1, #0]
 801036c:	7812      	ldrb	r2, [r2, #0]
 801036e:	1e10      	subs	r0, r2, #0
 8010370:	bf18      	it	ne
 8010372:	2001      	movne	r0, #1
 8010374:	b002      	add	sp, #8
 8010376:	4770      	bx	lr
 8010378:	4610      	mov	r0, r2
 801037a:	e7fb      	b.n	8010374 <__ascii_mbtowc+0x16>
 801037c:	f06f 0001 	mvn.w	r0, #1
 8010380:	e7f8      	b.n	8010374 <__ascii_mbtowc+0x16>

08010382 <_malloc_usable_size_r>:
 8010382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010386:	1f18      	subs	r0, r3, #4
 8010388:	2b00      	cmp	r3, #0
 801038a:	bfbc      	itt	lt
 801038c:	580b      	ldrlt	r3, [r1, r0]
 801038e:	18c0      	addlt	r0, r0, r3
 8010390:	4770      	bx	lr

08010392 <__ascii_wctomb>:
 8010392:	b149      	cbz	r1, 80103a8 <__ascii_wctomb+0x16>
 8010394:	2aff      	cmp	r2, #255	; 0xff
 8010396:	bf85      	ittet	hi
 8010398:	238a      	movhi	r3, #138	; 0x8a
 801039a:	6003      	strhi	r3, [r0, #0]
 801039c:	700a      	strbls	r2, [r1, #0]
 801039e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80103a2:	bf98      	it	ls
 80103a4:	2001      	movls	r0, #1
 80103a6:	4770      	bx	lr
 80103a8:	4608      	mov	r0, r1
 80103aa:	4770      	bx	lr

080103ac <_raise_r>:
 80103ac:	291f      	cmp	r1, #31
 80103ae:	b538      	push	{r3, r4, r5, lr}
 80103b0:	4604      	mov	r4, r0
 80103b2:	460d      	mov	r5, r1
 80103b4:	d904      	bls.n	80103c0 <_raise_r+0x14>
 80103b6:	2316      	movs	r3, #22
 80103b8:	6003      	str	r3, [r0, #0]
 80103ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103be:	bd38      	pop	{r3, r4, r5, pc}
 80103c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80103c2:	b112      	cbz	r2, 80103ca <_raise_r+0x1e>
 80103c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103c8:	b94b      	cbnz	r3, 80103de <_raise_r+0x32>
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 f830 	bl	8010430 <_getpid_r>
 80103d0:	462a      	mov	r2, r5
 80103d2:	4601      	mov	r1, r0
 80103d4:	4620      	mov	r0, r4
 80103d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103da:	f000 b817 	b.w	801040c <_kill_r>
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d00a      	beq.n	80103f8 <_raise_r+0x4c>
 80103e2:	1c59      	adds	r1, r3, #1
 80103e4:	d103      	bne.n	80103ee <_raise_r+0x42>
 80103e6:	2316      	movs	r3, #22
 80103e8:	6003      	str	r3, [r0, #0]
 80103ea:	2001      	movs	r0, #1
 80103ec:	e7e7      	b.n	80103be <_raise_r+0x12>
 80103ee:	2400      	movs	r4, #0
 80103f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103f4:	4628      	mov	r0, r5
 80103f6:	4798      	blx	r3
 80103f8:	2000      	movs	r0, #0
 80103fa:	e7e0      	b.n	80103be <_raise_r+0x12>

080103fc <raise>:
 80103fc:	4b02      	ldr	r3, [pc, #8]	; (8010408 <raise+0xc>)
 80103fe:	4601      	mov	r1, r0
 8010400:	6818      	ldr	r0, [r3, #0]
 8010402:	f7ff bfd3 	b.w	80103ac <_raise_r>
 8010406:	bf00      	nop
 8010408:	2000009c 	.word	0x2000009c

0801040c <_kill_r>:
 801040c:	b538      	push	{r3, r4, r5, lr}
 801040e:	4d07      	ldr	r5, [pc, #28]	; (801042c <_kill_r+0x20>)
 8010410:	2300      	movs	r3, #0
 8010412:	4604      	mov	r4, r0
 8010414:	4608      	mov	r0, r1
 8010416:	4611      	mov	r1, r2
 8010418:	602b      	str	r3, [r5, #0]
 801041a:	f7f4 fc91 	bl	8004d40 <_kill>
 801041e:	1c43      	adds	r3, r0, #1
 8010420:	d102      	bne.n	8010428 <_kill_r+0x1c>
 8010422:	682b      	ldr	r3, [r5, #0]
 8010424:	b103      	cbz	r3, 8010428 <_kill_r+0x1c>
 8010426:	6023      	str	r3, [r4, #0]
 8010428:	bd38      	pop	{r3, r4, r5, pc}
 801042a:	bf00      	nop
 801042c:	20009648 	.word	0x20009648

08010430 <_getpid_r>:
 8010430:	f7f4 bc7e 	b.w	8004d30 <_getpid>

08010434 <acos>:
 8010434:	b538      	push	{r3, r4, r5, lr}
 8010436:	ed2d 8b02 	vpush	{d8}
 801043a:	ec55 4b10 	vmov	r4, r5, d0
 801043e:	f000 f82f 	bl	80104a0 <__ieee754_acos>
 8010442:	4622      	mov	r2, r4
 8010444:	462b      	mov	r3, r5
 8010446:	4620      	mov	r0, r4
 8010448:	4629      	mov	r1, r5
 801044a:	eeb0 8a40 	vmov.f32	s16, s0
 801044e:	eef0 8a60 	vmov.f32	s17, s1
 8010452:	f7f0 fb8b 	bl	8000b6c <__aeabi_dcmpun>
 8010456:	b9a8      	cbnz	r0, 8010484 <acos+0x50>
 8010458:	ec45 4b10 	vmov	d0, r4, r5
 801045c:	f000 faac 	bl	80109b8 <fabs>
 8010460:	4b0c      	ldr	r3, [pc, #48]	; (8010494 <acos+0x60>)
 8010462:	ec51 0b10 	vmov	r0, r1, d0
 8010466:	2200      	movs	r2, #0
 8010468:	f7f0 fb76 	bl	8000b58 <__aeabi_dcmpgt>
 801046c:	b150      	cbz	r0, 8010484 <acos+0x50>
 801046e:	f7fd fbf3 	bl	800dc58 <__errno>
 8010472:	ecbd 8b02 	vpop	{d8}
 8010476:	2321      	movs	r3, #33	; 0x21
 8010478:	6003      	str	r3, [r0, #0]
 801047a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801047e:	4806      	ldr	r0, [pc, #24]	; (8010498 <acos+0x64>)
 8010480:	f000 bc02 	b.w	8010c88 <nan>
 8010484:	eeb0 0a48 	vmov.f32	s0, s16
 8010488:	eef0 0a68 	vmov.f32	s1, s17
 801048c:	ecbd 8b02 	vpop	{d8}
 8010490:	bd38      	pop	{r3, r4, r5, pc}
 8010492:	bf00      	nop
 8010494:	3ff00000 	.word	0x3ff00000
 8010498:	0801563e 	.word	0x0801563e
 801049c:	00000000 	.word	0x00000000

080104a0 <__ieee754_acos>:
 80104a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	ec55 4b10 	vmov	r4, r5, d0
 80104a8:	49b7      	ldr	r1, [pc, #732]	; (8010788 <__ieee754_acos+0x2e8>)
 80104aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104ae:	428b      	cmp	r3, r1
 80104b0:	dd1b      	ble.n	80104ea <__ieee754_acos+0x4a>
 80104b2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80104b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80104ba:	4323      	orrs	r3, r4
 80104bc:	d106      	bne.n	80104cc <__ieee754_acos+0x2c>
 80104be:	2d00      	cmp	r5, #0
 80104c0:	f300 8211 	bgt.w	80108e6 <__ieee754_acos+0x446>
 80104c4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010720 <__ieee754_acos+0x280>
 80104c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	ee10 2a10 	vmov	r2, s0
 80104d0:	462b      	mov	r3, r5
 80104d2:	ee10 0a10 	vmov	r0, s0
 80104d6:	4629      	mov	r1, r5
 80104d8:	f7ef fef6 	bl	80002c8 <__aeabi_dsub>
 80104dc:	4602      	mov	r2, r0
 80104de:	460b      	mov	r3, r1
 80104e0:	f7f0 f9d4 	bl	800088c <__aeabi_ddiv>
 80104e4:	ec41 0b10 	vmov	d0, r0, r1
 80104e8:	e7ee      	b.n	80104c8 <__ieee754_acos+0x28>
 80104ea:	49a8      	ldr	r1, [pc, #672]	; (801078c <__ieee754_acos+0x2ec>)
 80104ec:	428b      	cmp	r3, r1
 80104ee:	f300 8087 	bgt.w	8010600 <__ieee754_acos+0x160>
 80104f2:	4aa7      	ldr	r2, [pc, #668]	; (8010790 <__ieee754_acos+0x2f0>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	f340 81f9 	ble.w	80108ec <__ieee754_acos+0x44c>
 80104fa:	ee10 2a10 	vmov	r2, s0
 80104fe:	ee10 0a10 	vmov	r0, s0
 8010502:	462b      	mov	r3, r5
 8010504:	4629      	mov	r1, r5
 8010506:	f7f0 f897 	bl	8000638 <__aeabi_dmul>
 801050a:	a387      	add	r3, pc, #540	; (adr r3, 8010728 <__ieee754_acos+0x288>)
 801050c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010510:	4606      	mov	r6, r0
 8010512:	460f      	mov	r7, r1
 8010514:	f7f0 f890 	bl	8000638 <__aeabi_dmul>
 8010518:	a385      	add	r3, pc, #532	; (adr r3, 8010730 <__ieee754_acos+0x290>)
 801051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051e:	f7ef fed5 	bl	80002cc <__adddf3>
 8010522:	4632      	mov	r2, r6
 8010524:	463b      	mov	r3, r7
 8010526:	f7f0 f887 	bl	8000638 <__aeabi_dmul>
 801052a:	a383      	add	r3, pc, #524	; (adr r3, 8010738 <__ieee754_acos+0x298>)
 801052c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010530:	f7ef feca 	bl	80002c8 <__aeabi_dsub>
 8010534:	4632      	mov	r2, r6
 8010536:	463b      	mov	r3, r7
 8010538:	f7f0 f87e 	bl	8000638 <__aeabi_dmul>
 801053c:	a380      	add	r3, pc, #512	; (adr r3, 8010740 <__ieee754_acos+0x2a0>)
 801053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010542:	f7ef fec3 	bl	80002cc <__adddf3>
 8010546:	4632      	mov	r2, r6
 8010548:	463b      	mov	r3, r7
 801054a:	f7f0 f875 	bl	8000638 <__aeabi_dmul>
 801054e:	a37e      	add	r3, pc, #504	; (adr r3, 8010748 <__ieee754_acos+0x2a8>)
 8010550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010554:	f7ef feb8 	bl	80002c8 <__aeabi_dsub>
 8010558:	4632      	mov	r2, r6
 801055a:	463b      	mov	r3, r7
 801055c:	f7f0 f86c 	bl	8000638 <__aeabi_dmul>
 8010560:	a37b      	add	r3, pc, #492	; (adr r3, 8010750 <__ieee754_acos+0x2b0>)
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	f7ef feb1 	bl	80002cc <__adddf3>
 801056a:	4632      	mov	r2, r6
 801056c:	463b      	mov	r3, r7
 801056e:	f7f0 f863 	bl	8000638 <__aeabi_dmul>
 8010572:	a379      	add	r3, pc, #484	; (adr r3, 8010758 <__ieee754_acos+0x2b8>)
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	4680      	mov	r8, r0
 801057a:	4689      	mov	r9, r1
 801057c:	4630      	mov	r0, r6
 801057e:	4639      	mov	r1, r7
 8010580:	f7f0 f85a 	bl	8000638 <__aeabi_dmul>
 8010584:	a376      	add	r3, pc, #472	; (adr r3, 8010760 <__ieee754_acos+0x2c0>)
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	f7ef fe9d 	bl	80002c8 <__aeabi_dsub>
 801058e:	4632      	mov	r2, r6
 8010590:	463b      	mov	r3, r7
 8010592:	f7f0 f851 	bl	8000638 <__aeabi_dmul>
 8010596:	a374      	add	r3, pc, #464	; (adr r3, 8010768 <__ieee754_acos+0x2c8>)
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	f7ef fe96 	bl	80002cc <__adddf3>
 80105a0:	4632      	mov	r2, r6
 80105a2:	463b      	mov	r3, r7
 80105a4:	f7f0 f848 	bl	8000638 <__aeabi_dmul>
 80105a8:	a371      	add	r3, pc, #452	; (adr r3, 8010770 <__ieee754_acos+0x2d0>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	f7ef fe8b 	bl	80002c8 <__aeabi_dsub>
 80105b2:	4632      	mov	r2, r6
 80105b4:	463b      	mov	r3, r7
 80105b6:	f7f0 f83f 	bl	8000638 <__aeabi_dmul>
 80105ba:	4b76      	ldr	r3, [pc, #472]	; (8010794 <__ieee754_acos+0x2f4>)
 80105bc:	2200      	movs	r2, #0
 80105be:	f7ef fe85 	bl	80002cc <__adddf3>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4640      	mov	r0, r8
 80105c8:	4649      	mov	r1, r9
 80105ca:	f7f0 f95f 	bl	800088c <__aeabi_ddiv>
 80105ce:	4622      	mov	r2, r4
 80105d0:	462b      	mov	r3, r5
 80105d2:	f7f0 f831 	bl	8000638 <__aeabi_dmul>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	a167      	add	r1, pc, #412	; (adr r1, 8010778 <__ieee754_acos+0x2d8>)
 80105dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105e0:	f7ef fe72 	bl	80002c8 <__aeabi_dsub>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	4620      	mov	r0, r4
 80105ea:	4629      	mov	r1, r5
 80105ec:	f7ef fe6c 	bl	80002c8 <__aeabi_dsub>
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	a162      	add	r1, pc, #392	; (adr r1, 8010780 <__ieee754_acos+0x2e0>)
 80105f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105fa:	f7ef fe65 	bl	80002c8 <__aeabi_dsub>
 80105fe:	e771      	b.n	80104e4 <__ieee754_acos+0x44>
 8010600:	2d00      	cmp	r5, #0
 8010602:	f280 80cb 	bge.w	801079c <__ieee754_acos+0x2fc>
 8010606:	ee10 0a10 	vmov	r0, s0
 801060a:	4b62      	ldr	r3, [pc, #392]	; (8010794 <__ieee754_acos+0x2f4>)
 801060c:	2200      	movs	r2, #0
 801060e:	4629      	mov	r1, r5
 8010610:	f7ef fe5c 	bl	80002cc <__adddf3>
 8010614:	4b60      	ldr	r3, [pc, #384]	; (8010798 <__ieee754_acos+0x2f8>)
 8010616:	2200      	movs	r2, #0
 8010618:	f7f0 f80e 	bl	8000638 <__aeabi_dmul>
 801061c:	a342      	add	r3, pc, #264	; (adr r3, 8010728 <__ieee754_acos+0x288>)
 801061e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010622:	4604      	mov	r4, r0
 8010624:	460d      	mov	r5, r1
 8010626:	f7f0 f807 	bl	8000638 <__aeabi_dmul>
 801062a:	a341      	add	r3, pc, #260	; (adr r3, 8010730 <__ieee754_acos+0x290>)
 801062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010630:	f7ef fe4c 	bl	80002cc <__adddf3>
 8010634:	4622      	mov	r2, r4
 8010636:	462b      	mov	r3, r5
 8010638:	f7ef fffe 	bl	8000638 <__aeabi_dmul>
 801063c:	a33e      	add	r3, pc, #248	; (adr r3, 8010738 <__ieee754_acos+0x298>)
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	f7ef fe41 	bl	80002c8 <__aeabi_dsub>
 8010646:	4622      	mov	r2, r4
 8010648:	462b      	mov	r3, r5
 801064a:	f7ef fff5 	bl	8000638 <__aeabi_dmul>
 801064e:	a33c      	add	r3, pc, #240	; (adr r3, 8010740 <__ieee754_acos+0x2a0>)
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f7ef fe3a 	bl	80002cc <__adddf3>
 8010658:	4622      	mov	r2, r4
 801065a:	462b      	mov	r3, r5
 801065c:	f7ef ffec 	bl	8000638 <__aeabi_dmul>
 8010660:	a339      	add	r3, pc, #228	; (adr r3, 8010748 <__ieee754_acos+0x2a8>)
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	f7ef fe2f 	bl	80002c8 <__aeabi_dsub>
 801066a:	4622      	mov	r2, r4
 801066c:	462b      	mov	r3, r5
 801066e:	f7ef ffe3 	bl	8000638 <__aeabi_dmul>
 8010672:	a337      	add	r3, pc, #220	; (adr r3, 8010750 <__ieee754_acos+0x2b0>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	f7ef fe28 	bl	80002cc <__adddf3>
 801067c:	4622      	mov	r2, r4
 801067e:	462b      	mov	r3, r5
 8010680:	f7ef ffda 	bl	8000638 <__aeabi_dmul>
 8010684:	ec45 4b10 	vmov	d0, r4, r5
 8010688:	4680      	mov	r8, r0
 801068a:	4689      	mov	r9, r1
 801068c:	f000 f99e 	bl	80109cc <__ieee754_sqrt>
 8010690:	a331      	add	r3, pc, #196	; (adr r3, 8010758 <__ieee754_acos+0x2b8>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	4620      	mov	r0, r4
 8010698:	4629      	mov	r1, r5
 801069a:	ec57 6b10 	vmov	r6, r7, d0
 801069e:	f7ef ffcb 	bl	8000638 <__aeabi_dmul>
 80106a2:	a32f      	add	r3, pc, #188	; (adr r3, 8010760 <__ieee754_acos+0x2c0>)
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	f7ef fe0e 	bl	80002c8 <__aeabi_dsub>
 80106ac:	4622      	mov	r2, r4
 80106ae:	462b      	mov	r3, r5
 80106b0:	f7ef ffc2 	bl	8000638 <__aeabi_dmul>
 80106b4:	a32c      	add	r3, pc, #176	; (adr r3, 8010768 <__ieee754_acos+0x2c8>)
 80106b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ba:	f7ef fe07 	bl	80002cc <__adddf3>
 80106be:	4622      	mov	r2, r4
 80106c0:	462b      	mov	r3, r5
 80106c2:	f7ef ffb9 	bl	8000638 <__aeabi_dmul>
 80106c6:	a32a      	add	r3, pc, #168	; (adr r3, 8010770 <__ieee754_acos+0x2d0>)
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	f7ef fdfc 	bl	80002c8 <__aeabi_dsub>
 80106d0:	4622      	mov	r2, r4
 80106d2:	462b      	mov	r3, r5
 80106d4:	f7ef ffb0 	bl	8000638 <__aeabi_dmul>
 80106d8:	4b2e      	ldr	r3, [pc, #184]	; (8010794 <__ieee754_acos+0x2f4>)
 80106da:	2200      	movs	r2, #0
 80106dc:	f7ef fdf6 	bl	80002cc <__adddf3>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	4640      	mov	r0, r8
 80106e6:	4649      	mov	r1, r9
 80106e8:	f7f0 f8d0 	bl	800088c <__aeabi_ddiv>
 80106ec:	4632      	mov	r2, r6
 80106ee:	463b      	mov	r3, r7
 80106f0:	f7ef ffa2 	bl	8000638 <__aeabi_dmul>
 80106f4:	a320      	add	r3, pc, #128	; (adr r3, 8010778 <__ieee754_acos+0x2d8>)
 80106f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fa:	f7ef fde5 	bl	80002c8 <__aeabi_dsub>
 80106fe:	4632      	mov	r2, r6
 8010700:	463b      	mov	r3, r7
 8010702:	f7ef fde3 	bl	80002cc <__adddf3>
 8010706:	4602      	mov	r2, r0
 8010708:	460b      	mov	r3, r1
 801070a:	f7ef fddf 	bl	80002cc <__adddf3>
 801070e:	4602      	mov	r2, r0
 8010710:	460b      	mov	r3, r1
 8010712:	a103      	add	r1, pc, #12	; (adr r1, 8010720 <__ieee754_acos+0x280>)
 8010714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010718:	e76f      	b.n	80105fa <__ieee754_acos+0x15a>
 801071a:	bf00      	nop
 801071c:	f3af 8000 	nop.w
 8010720:	54442d18 	.word	0x54442d18
 8010724:	400921fb 	.word	0x400921fb
 8010728:	0dfdf709 	.word	0x0dfdf709
 801072c:	3f023de1 	.word	0x3f023de1
 8010730:	7501b288 	.word	0x7501b288
 8010734:	3f49efe0 	.word	0x3f49efe0
 8010738:	b5688f3b 	.word	0xb5688f3b
 801073c:	3fa48228 	.word	0x3fa48228
 8010740:	0e884455 	.word	0x0e884455
 8010744:	3fc9c155 	.word	0x3fc9c155
 8010748:	03eb6f7d 	.word	0x03eb6f7d
 801074c:	3fd4d612 	.word	0x3fd4d612
 8010750:	55555555 	.word	0x55555555
 8010754:	3fc55555 	.word	0x3fc55555
 8010758:	b12e9282 	.word	0xb12e9282
 801075c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010760:	1b8d0159 	.word	0x1b8d0159
 8010764:	3fe6066c 	.word	0x3fe6066c
 8010768:	9c598ac8 	.word	0x9c598ac8
 801076c:	40002ae5 	.word	0x40002ae5
 8010770:	1c8a2d4b 	.word	0x1c8a2d4b
 8010774:	40033a27 	.word	0x40033a27
 8010778:	33145c07 	.word	0x33145c07
 801077c:	3c91a626 	.word	0x3c91a626
 8010780:	54442d18 	.word	0x54442d18
 8010784:	3ff921fb 	.word	0x3ff921fb
 8010788:	3fefffff 	.word	0x3fefffff
 801078c:	3fdfffff 	.word	0x3fdfffff
 8010790:	3c600000 	.word	0x3c600000
 8010794:	3ff00000 	.word	0x3ff00000
 8010798:	3fe00000 	.word	0x3fe00000
 801079c:	ee10 2a10 	vmov	r2, s0
 80107a0:	462b      	mov	r3, r5
 80107a2:	496d      	ldr	r1, [pc, #436]	; (8010958 <__ieee754_acos+0x4b8>)
 80107a4:	2000      	movs	r0, #0
 80107a6:	f7ef fd8f 	bl	80002c8 <__aeabi_dsub>
 80107aa:	4b6c      	ldr	r3, [pc, #432]	; (801095c <__ieee754_acos+0x4bc>)
 80107ac:	2200      	movs	r2, #0
 80107ae:	f7ef ff43 	bl	8000638 <__aeabi_dmul>
 80107b2:	4604      	mov	r4, r0
 80107b4:	460d      	mov	r5, r1
 80107b6:	ec45 4b10 	vmov	d0, r4, r5
 80107ba:	f000 f907 	bl	80109cc <__ieee754_sqrt>
 80107be:	a34e      	add	r3, pc, #312	; (adr r3, 80108f8 <__ieee754_acos+0x458>)
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	4620      	mov	r0, r4
 80107c6:	4629      	mov	r1, r5
 80107c8:	ec59 8b10 	vmov	r8, r9, d0
 80107cc:	f7ef ff34 	bl	8000638 <__aeabi_dmul>
 80107d0:	a34b      	add	r3, pc, #300	; (adr r3, 8010900 <__ieee754_acos+0x460>)
 80107d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d6:	f7ef fd79 	bl	80002cc <__adddf3>
 80107da:	4622      	mov	r2, r4
 80107dc:	462b      	mov	r3, r5
 80107de:	f7ef ff2b 	bl	8000638 <__aeabi_dmul>
 80107e2:	a349      	add	r3, pc, #292	; (adr r3, 8010908 <__ieee754_acos+0x468>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f7ef fd6e 	bl	80002c8 <__aeabi_dsub>
 80107ec:	4622      	mov	r2, r4
 80107ee:	462b      	mov	r3, r5
 80107f0:	f7ef ff22 	bl	8000638 <__aeabi_dmul>
 80107f4:	a346      	add	r3, pc, #280	; (adr r3, 8010910 <__ieee754_acos+0x470>)
 80107f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fa:	f7ef fd67 	bl	80002cc <__adddf3>
 80107fe:	4622      	mov	r2, r4
 8010800:	462b      	mov	r3, r5
 8010802:	f7ef ff19 	bl	8000638 <__aeabi_dmul>
 8010806:	a344      	add	r3, pc, #272	; (adr r3, 8010918 <__ieee754_acos+0x478>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	f7ef fd5c 	bl	80002c8 <__aeabi_dsub>
 8010810:	4622      	mov	r2, r4
 8010812:	462b      	mov	r3, r5
 8010814:	f7ef ff10 	bl	8000638 <__aeabi_dmul>
 8010818:	a341      	add	r3, pc, #260	; (adr r3, 8010920 <__ieee754_acos+0x480>)
 801081a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081e:	f7ef fd55 	bl	80002cc <__adddf3>
 8010822:	4622      	mov	r2, r4
 8010824:	462b      	mov	r3, r5
 8010826:	f7ef ff07 	bl	8000638 <__aeabi_dmul>
 801082a:	a33f      	add	r3, pc, #252	; (adr r3, 8010928 <__ieee754_acos+0x488>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	4682      	mov	sl, r0
 8010832:	468b      	mov	fp, r1
 8010834:	4620      	mov	r0, r4
 8010836:	4629      	mov	r1, r5
 8010838:	f7ef fefe 	bl	8000638 <__aeabi_dmul>
 801083c:	a33c      	add	r3, pc, #240	; (adr r3, 8010930 <__ieee754_acos+0x490>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	f7ef fd41 	bl	80002c8 <__aeabi_dsub>
 8010846:	4622      	mov	r2, r4
 8010848:	462b      	mov	r3, r5
 801084a:	f7ef fef5 	bl	8000638 <__aeabi_dmul>
 801084e:	a33a      	add	r3, pc, #232	; (adr r3, 8010938 <__ieee754_acos+0x498>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	f7ef fd3a 	bl	80002cc <__adddf3>
 8010858:	4622      	mov	r2, r4
 801085a:	462b      	mov	r3, r5
 801085c:	f7ef feec 	bl	8000638 <__aeabi_dmul>
 8010860:	a337      	add	r3, pc, #220	; (adr r3, 8010940 <__ieee754_acos+0x4a0>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	f7ef fd2f 	bl	80002c8 <__aeabi_dsub>
 801086a:	4622      	mov	r2, r4
 801086c:	462b      	mov	r3, r5
 801086e:	f7ef fee3 	bl	8000638 <__aeabi_dmul>
 8010872:	4b39      	ldr	r3, [pc, #228]	; (8010958 <__ieee754_acos+0x4b8>)
 8010874:	2200      	movs	r2, #0
 8010876:	f7ef fd29 	bl	80002cc <__adddf3>
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	4650      	mov	r0, sl
 8010880:	4659      	mov	r1, fp
 8010882:	f7f0 f803 	bl	800088c <__aeabi_ddiv>
 8010886:	4642      	mov	r2, r8
 8010888:	464b      	mov	r3, r9
 801088a:	f7ef fed5 	bl	8000638 <__aeabi_dmul>
 801088e:	2600      	movs	r6, #0
 8010890:	4682      	mov	sl, r0
 8010892:	468b      	mov	fp, r1
 8010894:	4632      	mov	r2, r6
 8010896:	464b      	mov	r3, r9
 8010898:	4630      	mov	r0, r6
 801089a:	4649      	mov	r1, r9
 801089c:	f7ef fecc 	bl	8000638 <__aeabi_dmul>
 80108a0:	4602      	mov	r2, r0
 80108a2:	460b      	mov	r3, r1
 80108a4:	4620      	mov	r0, r4
 80108a6:	4629      	mov	r1, r5
 80108a8:	f7ef fd0e 	bl	80002c8 <__aeabi_dsub>
 80108ac:	4632      	mov	r2, r6
 80108ae:	4604      	mov	r4, r0
 80108b0:	460d      	mov	r5, r1
 80108b2:	464b      	mov	r3, r9
 80108b4:	4640      	mov	r0, r8
 80108b6:	4649      	mov	r1, r9
 80108b8:	f7ef fd08 	bl	80002cc <__adddf3>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7ef ffe2 	bl	800088c <__aeabi_ddiv>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4650      	mov	r0, sl
 80108ce:	4659      	mov	r1, fp
 80108d0:	f7ef fcfc 	bl	80002cc <__adddf3>
 80108d4:	4632      	mov	r2, r6
 80108d6:	464b      	mov	r3, r9
 80108d8:	f7ef fcf8 	bl	80002cc <__adddf3>
 80108dc:	4602      	mov	r2, r0
 80108de:	460b      	mov	r3, r1
 80108e0:	f7ef fcf4 	bl	80002cc <__adddf3>
 80108e4:	e5fe      	b.n	80104e4 <__ieee754_acos+0x44>
 80108e6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010948 <__ieee754_acos+0x4a8>
 80108ea:	e5ed      	b.n	80104c8 <__ieee754_acos+0x28>
 80108ec:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010950 <__ieee754_acos+0x4b0>
 80108f0:	e5ea      	b.n	80104c8 <__ieee754_acos+0x28>
 80108f2:	bf00      	nop
 80108f4:	f3af 8000 	nop.w
 80108f8:	0dfdf709 	.word	0x0dfdf709
 80108fc:	3f023de1 	.word	0x3f023de1
 8010900:	7501b288 	.word	0x7501b288
 8010904:	3f49efe0 	.word	0x3f49efe0
 8010908:	b5688f3b 	.word	0xb5688f3b
 801090c:	3fa48228 	.word	0x3fa48228
 8010910:	0e884455 	.word	0x0e884455
 8010914:	3fc9c155 	.word	0x3fc9c155
 8010918:	03eb6f7d 	.word	0x03eb6f7d
 801091c:	3fd4d612 	.word	0x3fd4d612
 8010920:	55555555 	.word	0x55555555
 8010924:	3fc55555 	.word	0x3fc55555
 8010928:	b12e9282 	.word	0xb12e9282
 801092c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010930:	1b8d0159 	.word	0x1b8d0159
 8010934:	3fe6066c 	.word	0x3fe6066c
 8010938:	9c598ac8 	.word	0x9c598ac8
 801093c:	40002ae5 	.word	0x40002ae5
 8010940:	1c8a2d4b 	.word	0x1c8a2d4b
 8010944:	40033a27 	.word	0x40033a27
	...
 8010950:	54442d18 	.word	0x54442d18
 8010954:	3ff921fb 	.word	0x3ff921fb
 8010958:	3ff00000 	.word	0x3ff00000
 801095c:	3fe00000 	.word	0x3fe00000

08010960 <sqrt>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	ed2d 8b02 	vpush	{d8}
 8010966:	ec55 4b10 	vmov	r4, r5, d0
 801096a:	f000 f82f 	bl	80109cc <__ieee754_sqrt>
 801096e:	4622      	mov	r2, r4
 8010970:	462b      	mov	r3, r5
 8010972:	4620      	mov	r0, r4
 8010974:	4629      	mov	r1, r5
 8010976:	eeb0 8a40 	vmov.f32	s16, s0
 801097a:	eef0 8a60 	vmov.f32	s17, s1
 801097e:	f7f0 f8f5 	bl	8000b6c <__aeabi_dcmpun>
 8010982:	b990      	cbnz	r0, 80109aa <sqrt+0x4a>
 8010984:	2200      	movs	r2, #0
 8010986:	2300      	movs	r3, #0
 8010988:	4620      	mov	r0, r4
 801098a:	4629      	mov	r1, r5
 801098c:	f7f0 f8c6 	bl	8000b1c <__aeabi_dcmplt>
 8010990:	b158      	cbz	r0, 80109aa <sqrt+0x4a>
 8010992:	f7fd f961 	bl	800dc58 <__errno>
 8010996:	2321      	movs	r3, #33	; 0x21
 8010998:	6003      	str	r3, [r0, #0]
 801099a:	2200      	movs	r2, #0
 801099c:	2300      	movs	r3, #0
 801099e:	4610      	mov	r0, r2
 80109a0:	4619      	mov	r1, r3
 80109a2:	f7ef ff73 	bl	800088c <__aeabi_ddiv>
 80109a6:	ec41 0b18 	vmov	d8, r0, r1
 80109aa:	eeb0 0a48 	vmov.f32	s0, s16
 80109ae:	eef0 0a68 	vmov.f32	s1, s17
 80109b2:	ecbd 8b02 	vpop	{d8}
 80109b6:	bd38      	pop	{r3, r4, r5, pc}

080109b8 <fabs>:
 80109b8:	ec51 0b10 	vmov	r0, r1, d0
 80109bc:	ee10 2a10 	vmov	r2, s0
 80109c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80109c4:	ec43 2b10 	vmov	d0, r2, r3
 80109c8:	4770      	bx	lr
	...

080109cc <__ieee754_sqrt>:
 80109cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d0:	ec55 4b10 	vmov	r4, r5, d0
 80109d4:	4e67      	ldr	r6, [pc, #412]	; (8010b74 <__ieee754_sqrt+0x1a8>)
 80109d6:	43ae      	bics	r6, r5
 80109d8:	ee10 0a10 	vmov	r0, s0
 80109dc:	ee10 2a10 	vmov	r2, s0
 80109e0:	4629      	mov	r1, r5
 80109e2:	462b      	mov	r3, r5
 80109e4:	d10d      	bne.n	8010a02 <__ieee754_sqrt+0x36>
 80109e6:	f7ef fe27 	bl	8000638 <__aeabi_dmul>
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	4620      	mov	r0, r4
 80109f0:	4629      	mov	r1, r5
 80109f2:	f7ef fc6b 	bl	80002cc <__adddf3>
 80109f6:	4604      	mov	r4, r0
 80109f8:	460d      	mov	r5, r1
 80109fa:	ec45 4b10 	vmov	d0, r4, r5
 80109fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a02:	2d00      	cmp	r5, #0
 8010a04:	dc0b      	bgt.n	8010a1e <__ieee754_sqrt+0x52>
 8010a06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010a0a:	4326      	orrs	r6, r4
 8010a0c:	d0f5      	beq.n	80109fa <__ieee754_sqrt+0x2e>
 8010a0e:	b135      	cbz	r5, 8010a1e <__ieee754_sqrt+0x52>
 8010a10:	f7ef fc5a 	bl	80002c8 <__aeabi_dsub>
 8010a14:	4602      	mov	r2, r0
 8010a16:	460b      	mov	r3, r1
 8010a18:	f7ef ff38 	bl	800088c <__aeabi_ddiv>
 8010a1c:	e7eb      	b.n	80109f6 <__ieee754_sqrt+0x2a>
 8010a1e:	1509      	asrs	r1, r1, #20
 8010a20:	f000 808d 	beq.w	8010b3e <__ieee754_sqrt+0x172>
 8010a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a28:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a30:	07c9      	lsls	r1, r1, #31
 8010a32:	bf5c      	itt	pl
 8010a34:	005b      	lslpl	r3, r3, #1
 8010a36:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010a3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a3e:	bf58      	it	pl
 8010a40:	0052      	lslpl	r2, r2, #1
 8010a42:	2500      	movs	r5, #0
 8010a44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010a48:	1076      	asrs	r6, r6, #1
 8010a4a:	0052      	lsls	r2, r2, #1
 8010a4c:	f04f 0e16 	mov.w	lr, #22
 8010a50:	46ac      	mov	ip, r5
 8010a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a56:	eb0c 0001 	add.w	r0, ip, r1
 8010a5a:	4298      	cmp	r0, r3
 8010a5c:	bfde      	ittt	le
 8010a5e:	1a1b      	suble	r3, r3, r0
 8010a60:	eb00 0c01 	addle.w	ip, r0, r1
 8010a64:	186d      	addle	r5, r5, r1
 8010a66:	005b      	lsls	r3, r3, #1
 8010a68:	f1be 0e01 	subs.w	lr, lr, #1
 8010a6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010a70:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010a74:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010a78:	d1ed      	bne.n	8010a56 <__ieee754_sqrt+0x8a>
 8010a7a:	4674      	mov	r4, lr
 8010a7c:	2720      	movs	r7, #32
 8010a7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010a82:	4563      	cmp	r3, ip
 8010a84:	eb01 000e 	add.w	r0, r1, lr
 8010a88:	dc02      	bgt.n	8010a90 <__ieee754_sqrt+0xc4>
 8010a8a:	d113      	bne.n	8010ab4 <__ieee754_sqrt+0xe8>
 8010a8c:	4290      	cmp	r0, r2
 8010a8e:	d811      	bhi.n	8010ab4 <__ieee754_sqrt+0xe8>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	eb00 0e01 	add.w	lr, r0, r1
 8010a96:	da57      	bge.n	8010b48 <__ieee754_sqrt+0x17c>
 8010a98:	f1be 0f00 	cmp.w	lr, #0
 8010a9c:	db54      	blt.n	8010b48 <__ieee754_sqrt+0x17c>
 8010a9e:	f10c 0801 	add.w	r8, ip, #1
 8010aa2:	eba3 030c 	sub.w	r3, r3, ip
 8010aa6:	4290      	cmp	r0, r2
 8010aa8:	bf88      	it	hi
 8010aaa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8010aae:	1a12      	subs	r2, r2, r0
 8010ab0:	440c      	add	r4, r1
 8010ab2:	46c4      	mov	ip, r8
 8010ab4:	005b      	lsls	r3, r3, #1
 8010ab6:	3f01      	subs	r7, #1
 8010ab8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010abc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010ac0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010ac4:	d1dd      	bne.n	8010a82 <__ieee754_sqrt+0xb6>
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	d01b      	beq.n	8010b02 <__ieee754_sqrt+0x136>
 8010aca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010b78 <__ieee754_sqrt+0x1ac>
 8010ace:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010b7c <__ieee754_sqrt+0x1b0>
 8010ad2:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ad6:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ada:	f7ef fbf5 	bl	80002c8 <__aeabi_dsub>
 8010ade:	e9da 8900 	ldrd	r8, r9, [sl]
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	4640      	mov	r0, r8
 8010ae8:	4649      	mov	r1, r9
 8010aea:	f7f0 f821 	bl	8000b30 <__aeabi_dcmple>
 8010aee:	b140      	cbz	r0, 8010b02 <__ieee754_sqrt+0x136>
 8010af0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010af4:	e9da 0100 	ldrd	r0, r1, [sl]
 8010af8:	e9db 2300 	ldrd	r2, r3, [fp]
 8010afc:	d126      	bne.n	8010b4c <__ieee754_sqrt+0x180>
 8010afe:	3501      	adds	r5, #1
 8010b00:	463c      	mov	r4, r7
 8010b02:	106a      	asrs	r2, r5, #1
 8010b04:	0863      	lsrs	r3, r4, #1
 8010b06:	07e9      	lsls	r1, r5, #31
 8010b08:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010b0c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010b10:	bf48      	it	mi
 8010b12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010b16:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010b1a:	461c      	mov	r4, r3
 8010b1c:	e76d      	b.n	80109fa <__ieee754_sqrt+0x2e>
 8010b1e:	0ad3      	lsrs	r3, r2, #11
 8010b20:	3815      	subs	r0, #21
 8010b22:	0552      	lsls	r2, r2, #21
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d0fa      	beq.n	8010b1e <__ieee754_sqrt+0x152>
 8010b28:	02dc      	lsls	r4, r3, #11
 8010b2a:	d50a      	bpl.n	8010b42 <__ieee754_sqrt+0x176>
 8010b2c:	f1c1 0420 	rsb	r4, r1, #32
 8010b30:	fa22 f404 	lsr.w	r4, r2, r4
 8010b34:	1e4d      	subs	r5, r1, #1
 8010b36:	408a      	lsls	r2, r1
 8010b38:	4323      	orrs	r3, r4
 8010b3a:	1b41      	subs	r1, r0, r5
 8010b3c:	e772      	b.n	8010a24 <__ieee754_sqrt+0x58>
 8010b3e:	4608      	mov	r0, r1
 8010b40:	e7f0      	b.n	8010b24 <__ieee754_sqrt+0x158>
 8010b42:	005b      	lsls	r3, r3, #1
 8010b44:	3101      	adds	r1, #1
 8010b46:	e7ef      	b.n	8010b28 <__ieee754_sqrt+0x15c>
 8010b48:	46e0      	mov	r8, ip
 8010b4a:	e7aa      	b.n	8010aa2 <__ieee754_sqrt+0xd6>
 8010b4c:	f7ef fbbe 	bl	80002cc <__adddf3>
 8010b50:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b54:	4602      	mov	r2, r0
 8010b56:	460b      	mov	r3, r1
 8010b58:	4640      	mov	r0, r8
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	f7ef ffde 	bl	8000b1c <__aeabi_dcmplt>
 8010b60:	b120      	cbz	r0, 8010b6c <__ieee754_sqrt+0x1a0>
 8010b62:	1ca0      	adds	r0, r4, #2
 8010b64:	bf08      	it	eq
 8010b66:	3501      	addeq	r5, #1
 8010b68:	3402      	adds	r4, #2
 8010b6a:	e7ca      	b.n	8010b02 <__ieee754_sqrt+0x136>
 8010b6c:	3401      	adds	r4, #1
 8010b6e:	f024 0401 	bic.w	r4, r4, #1
 8010b72:	e7c6      	b.n	8010b02 <__ieee754_sqrt+0x136>
 8010b74:	7ff00000 	.word	0x7ff00000
 8010b78:	20000210 	.word	0x20000210
 8010b7c:	20000218 	.word	0x20000218

08010b80 <round>:
 8010b80:	ec53 2b10 	vmov	r2, r3, d0
 8010b84:	b570      	push	{r4, r5, r6, lr}
 8010b86:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8010b8a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8010b8e:	2813      	cmp	r0, #19
 8010b90:	ee10 5a10 	vmov	r5, s0
 8010b94:	4619      	mov	r1, r3
 8010b96:	dc18      	bgt.n	8010bca <round+0x4a>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	da09      	bge.n	8010bb0 <round+0x30>
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8010ba2:	d103      	bne.n	8010bac <round+0x2c>
 8010ba4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010ba8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010bac:	2300      	movs	r3, #0
 8010bae:	e02a      	b.n	8010c06 <round+0x86>
 8010bb0:	4c16      	ldr	r4, [pc, #88]	; (8010c0c <round+0x8c>)
 8010bb2:	4104      	asrs	r4, r0
 8010bb4:	ea03 0604 	and.w	r6, r3, r4
 8010bb8:	4316      	orrs	r6, r2
 8010bba:	d011      	beq.n	8010be0 <round+0x60>
 8010bbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010bc0:	4103      	asrs	r3, r0
 8010bc2:	440b      	add	r3, r1
 8010bc4:	ea23 0104 	bic.w	r1, r3, r4
 8010bc8:	e7f0      	b.n	8010bac <round+0x2c>
 8010bca:	2833      	cmp	r0, #51	; 0x33
 8010bcc:	dd0b      	ble.n	8010be6 <round+0x66>
 8010bce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010bd2:	d105      	bne.n	8010be0 <round+0x60>
 8010bd4:	ee10 0a10 	vmov	r0, s0
 8010bd8:	f7ef fb78 	bl	80002cc <__adddf3>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	ec43 2b10 	vmov	d0, r2, r3
 8010be4:	bd70      	pop	{r4, r5, r6, pc}
 8010be6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8010bea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010bee:	40f4      	lsrs	r4, r6
 8010bf0:	4214      	tst	r4, r2
 8010bf2:	d0f5      	beq.n	8010be0 <round+0x60>
 8010bf4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	4083      	lsls	r3, r0
 8010bfc:	195b      	adds	r3, r3, r5
 8010bfe:	bf28      	it	cs
 8010c00:	3101      	addcs	r1, #1
 8010c02:	ea23 0304 	bic.w	r3, r3, r4
 8010c06:	461a      	mov	r2, r3
 8010c08:	460b      	mov	r3, r1
 8010c0a:	e7e9      	b.n	8010be0 <round+0x60>
 8010c0c:	000fffff 	.word	0x000fffff

08010c10 <trunc>:
 8010c10:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8010c14:	ec5c bb10 	vmov	fp, ip, d0
 8010c18:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8010c1c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8010c20:	2913      	cmp	r1, #19
 8010c22:	4664      	mov	r4, ip
 8010c24:	dc11      	bgt.n	8010c4a <trunc+0x3a>
 8010c26:	2900      	cmp	r1, #0
 8010c28:	bfa7      	ittee	ge
 8010c2a:	4b15      	ldrge	r3, [pc, #84]	; (8010c80 <trunc+0x70>)
 8010c2c:	fa43 f101 	asrge.w	r1, r3, r1
 8010c30:	2200      	movlt	r2, #0
 8010c32:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8010c36:	bfa4      	itt	ge
 8010c38:	2200      	movge	r2, #0
 8010c3a:	ea01 030c 	andge.w	r3, r1, ip
 8010c3e:	4693      	mov	fp, r2
 8010c40:	469c      	mov	ip, r3
 8010c42:	ec4c bb10 	vmov	d0, fp, ip
 8010c46:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8010c4a:	2933      	cmp	r1, #51	; 0x33
 8010c4c:	dd0d      	ble.n	8010c6a <trunc+0x5a>
 8010c4e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010c52:	d1f6      	bne.n	8010c42 <trunc+0x32>
 8010c54:	4663      	mov	r3, ip
 8010c56:	ee10 2a10 	vmov	r2, s0
 8010c5a:	ee10 0a10 	vmov	r0, s0
 8010c5e:	4621      	mov	r1, r4
 8010c60:	f7ef fb34 	bl	80002cc <__adddf3>
 8010c64:	4683      	mov	fp, r0
 8010c66:	468c      	mov	ip, r1
 8010c68:	e7eb      	b.n	8010c42 <trunc+0x32>
 8010c6a:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c72:	40c3      	lsrs	r3, r0
 8010c74:	ea2b 0603 	bic.w	r6, fp, r3
 8010c78:	46b3      	mov	fp, r6
 8010c7a:	46a4      	mov	ip, r4
 8010c7c:	e7e1      	b.n	8010c42 <trunc+0x32>
 8010c7e:	bf00      	nop
 8010c80:	fff00000 	.word	0xfff00000
 8010c84:	00000000 	.word	0x00000000

08010c88 <nan>:
 8010c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010c90 <nan+0x8>
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	00000000 	.word	0x00000000
 8010c94:	7ff80000 	.word	0x7ff80000

08010c98 <_init>:
 8010c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9a:	bf00      	nop
 8010c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c9e:	bc08      	pop	{r3}
 8010ca0:	469e      	mov	lr, r3
 8010ca2:	4770      	bx	lr

08010ca4 <_fini>:
 8010ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca6:	bf00      	nop
 8010ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010caa:	bc08      	pop	{r3}
 8010cac:	469e      	mov	lr, r3
 8010cae:	4770      	bx	lr
