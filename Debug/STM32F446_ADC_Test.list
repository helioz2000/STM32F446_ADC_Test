
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013348  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005f98  08013518  08013518  00023518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080194b0  080194b0  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  080194b0  080194b0  000294b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080194b8  080194b8  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080194b8  080194b8  000294b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080194bc  080194bc  000294bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  080194c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e20  20000250  08019710  00030250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a070  08019710  0003a070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b014  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004120  00000000  00000000  0004b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0004f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000132a  00000000  00000000  00050cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b33  00000000  00000000  00051fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002177d  00000000  00000000  00079b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e61c7  00000000  00000000  0009b28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fcc  00000000  00000000  00181454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00189420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013500 	.word	0x08013500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	08013500 	.word	0x08013500

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ce6:	f000 b9bb 	b.w	8001060 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f84d 	bl	8000d98 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f840 	bl	8000d98 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f82f 	bl	8000d98 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f821 	bl	8000d98 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <calc_process_dma_buffer+0x24>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <calc_process_dma_buffer+0x24>
		return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001086:	e0d0      	b.n	800122a <calc_process_dma_buffer+0x1c6>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001090:	7c7b      	ldrb	r3, [r7, #17]
 8001092:	3301      	adds	r3, #1
 8001094:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800109c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 80010a0:	82bb      	strh	r3, [r7, #20]
 80010a2:	e001      	b.n	80010a8 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 80010a4:	2300      	movs	r3, #0
 80010a6:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 80010a8:	8abb      	ldrh	r3, [r7, #20]
 80010aa:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 80010ae:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 80010b0:	7c7a      	ldrb	r2, [r7, #17]
 80010b2:	4960      	ldr	r1, [pc, #384]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010c2:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 80010c4:	7c7a      	ldrb	r2, [r7, #17]
 80010c6:	495b      	ldr	r1, [pc, #364]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3302      	adds	r3, #2
 80010d4:	2200      	movs	r2, #0
 80010d6:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 80010d8:	7c3a      	ldrb	r2, [r7, #16]
 80010da:	4956      	ldr	r1, [pc, #344]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010ea:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4951      	ldr	r1, [pc, #324]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3302      	adds	r3, #2
 80010fc:	2200      	movs	r2, #0
 80010fe:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 8001100:	7c7a      	ldrb	r2, [r7, #17]
 8001102:	494c      	ldr	r1, [pc, #304]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3304      	adds	r3, #4
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 8001116:	7c7a      	ldrb	r2, [r7, #17]
 8001118:	4946      	ldr	r1, [pc, #280]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3308      	adds	r3, #8
 8001126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800112a:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4941      	ldr	r1, [pc, #260]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	3304      	adds	r3, #4
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001140:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001142:	7c3a      	ldrb	r2, [r7, #16]
 8001144:	493b      	ldr	r1, [pc, #236]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3308      	adds	r3, #8
 8001152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001156:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001158:	7c7a      	ldrb	r2, [r7, #17]
 800115a:	4936      	ldr	r1, [pc, #216]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	330c      	adds	r3, #12
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800116c:	7c3a      	ldrb	r2, [r7, #16]
 800116e:	4931      	ldr	r1, [pc, #196]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	330c      	adds	r3, #12
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].value_is_zero = 0;
 8001180:	7c7a      	ldrb	r2, [r7, #17]
 8001182:	492c      	ldr	r1, [pc, #176]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	330d      	adds	r3, #13
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].value_is_zero = 0;
 8001194:	7c3a      	ldrb	r2, [r7, #16]
 8001196:	4927      	ldr	r1, [pc, #156]	; (8001234 <calc_process_dma_buffer+0x1d0>)
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	330d      	adds	r3, #13
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a8:	8abb      	ldrh	r3, [r7, #20]
 80011aa:	82fb      	strh	r3, [r7, #22]
 80011ac:	e030      	b.n	8001210 <calc_process_dma_buffer+0x1ac>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 80011ae:	8af9      	ldrh	r1, [r7, #22]
 80011b0:	7c7a      	ldrb	r2, [r7, #17]
 80011b2:	8a7b      	ldrh	r3, [r7, #18]
 80011b4:	4c20      	ldr	r4, [pc, #128]	; (8001238 <calc_process_dma_buffer+0x1d4>)
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 80011bc:	fb05 f000 	mul.w	r0, r5, r0
 80011c0:	4401      	add	r1, r0
 80011c2:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 80011c6:	491d      	ldr	r1, [pc, #116]	; (800123c <calc_process_dma_buffer+0x1d8>)
 80011c8:	f44f 7052 	mov.w	r0, #840	; 0x348
 80011cc:	fb00 f202 	mul.w	r2, r0, r2
 80011d0:	4413      	add	r3, r2
 80011d2:	4622      	mov	r2, r4
 80011d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 80011d8:	8afb      	ldrh	r3, [r7, #22]
 80011da:	1c59      	adds	r1, r3, #1
 80011dc:	7c3a      	ldrb	r2, [r7, #16]
 80011de:	8a7b      	ldrh	r3, [r7, #18]
 80011e0:	1c58      	adds	r0, r3, #1
 80011e2:	8278      	strh	r0, [r7, #18]
 80011e4:	461d      	mov	r5, r3
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <calc_process_dma_buffer+0x1d4>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80011ee:	fb04 f303 	mul.w	r3, r4, r3
 80011f2:	440b      	add	r3, r1
 80011f4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011f8:	4910      	ldr	r1, [pc, #64]	; (800123c <calc_process_dma_buffer+0x1d8>)
 80011fa:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	442b      	add	r3, r5
 8001204:	4602      	mov	r2, r0
 8001206:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800120a:	8afb      	ldrh	r3, [r7, #22]
 800120c:	3302      	adds	r3, #2
 800120e:	82fb      	strh	r3, [r7, #22]
 8001210:	8afa      	ldrh	r2, [r7, #22]
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	429a      	cmp	r2, r3
 8001216:	d9ca      	bls.n	80011ae <calc_process_dma_buffer+0x14a>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f93c 	bl	8001498 <calc_downsample>
	calc_downsample(raw_buf_second);
 8001220:	7c3b      	ldrb	r3, [r7, #16]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f938 	bl	8001498 <calc_downsample>
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bdb0      	pop	{r4, r5, r7, pc}
 8001232:	bf00      	nop
 8001234:	2000026c 	.word	0x2000026c
 8001238:	2000261c 	.word	0x2000261c
 800123c:	20005a9c 	.word	0x20005a9c

08001240 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b03      	cmp	r3, #3
 8001252:	f200 8117 	bhi.w	8001484 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0fda      	lsrs	r2, r3, #31
 8001262:	4413      	add	r3, r2
 8001264:	105b      	asrs	r3, r3, #1
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0fda      	lsrs	r2, r3, #31
 8001272:	4413      	add	r3, r2
 8001274:	105b      	asrs	r3, r3, #1
 8001276:	425b      	negs	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e0df      	b.n	8001446 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4981      	ldr	r1, [pc, #516]	; (8001490 <calc_zero_detector+0x250>)
 800128a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128e:	fb03 f202 	mul.w	r2, r3, r2
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4413      	add	r3, r2
 8001296:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800129a:	461a      	mov	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4293      	cmp	r3, r2
 80012a0:	f300 80ce 	bgt.w	8001440 <calc_zero_detector+0x200>
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	497a      	ldr	r1, [pc, #488]	; (8001490 <calc_zero_detector+0x250>)
 80012a8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80012ac:	fb03 f202 	mul.w	r2, r3, r2
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	4413      	add	r3, r2
 80012b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b8:	461a      	mov	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4293      	cmp	r3, r2
 80012be:	f2c0 80bf 	blt.w	8001440 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4972      	ldr	r1, [pc, #456]	; (8001490 <calc_zero_detector+0x250>)
 80012c6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4413      	add	r3, r2
 80012d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4293      	cmp	r3, r2
 80012dc:	da3d      	bge.n	800135a <calc_zero_detector+0x11a>
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	496a      	ldr	r1, [pc, #424]	; (8001490 <calc_zero_detector+0x250>)
 80012e6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ea:	fb00 f202 	mul.w	r2, r0, r2
 80012ee:	4413      	add	r3, r2
 80012f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012f4:	461a      	mov	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	db2e      	blt.n	800135a <calc_zero_detector+0x11a>
				detected++;
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	3301      	adds	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b01      	cmp	r3, #1
 8001306:	dd11      	ble.n	800132c <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3b02      	subs	r3, #2
 800130e:	4960      	ldr	r1, [pc, #384]	; (8001490 <calc_zero_detector+0x250>)
 8001310:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001314:	fb00 f202 	mul.w	r2, r0, r2
 8001318:	4413      	add	r3, r2
 800131a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4293      	cmp	r3, r2
 8001324:	dd02      	ble.n	800132c <calc_zero_detector+0xec>
						detected++;
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	3301      	adds	r3, #1
 800132a:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3302      	adds	r3, #2
 8001330:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001334:	d211      	bcs.n	800135a <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	3302      	adds	r3, #2
 800133c:	4954      	ldr	r1, [pc, #336]	; (8001490 <calc_zero_detector+0x250>)
 800133e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001342:	fb00 f202 	mul.w	r2, r0, r2
 8001346:	4413      	add	r3, r2
 8001348:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4293      	cmp	r3, r2
 8001352:	da02      	bge.n	800135a <calc_zero_detector+0x11a>
						detected++;
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	3301      	adds	r3, #1
 8001358:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d90f      	bls.n	8001380 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	494c      	ldr	r1, [pc, #304]	; (8001494 <calc_zero_detector+0x254>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001378:	7fbb      	ldrb	r3, [r7, #30]
 800137a:	3301      	adds	r3, #1
 800137c:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800137e:	e05f      	b.n	8001440 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4942      	ldr	r1, [pc, #264]	; (8001490 <calc_zero_detector+0x250>)
 8001388:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	4413      	add	r3, r2
 8001394:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4293      	cmp	r3, r2
 800139e:	dd4f      	ble.n	8001440 <calc_zero_detector+0x200>
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	493a      	ldr	r1, [pc, #232]	; (8001490 <calc_zero_detector+0x250>)
 80013a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013ac:	fb00 f202 	mul.w	r2, r0, r2
 80013b0:	4413      	add	r3, r2
 80013b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	dc40      	bgt.n	8001440 <calc_zero_detector+0x200>
				detected++;
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	3301      	adds	r3, #1
 80013c2:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	dd11      	ble.n	80013ee <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	3b02      	subs	r3, #2
 80013d0:	492f      	ldr	r1, [pc, #188]	; (8001490 <calc_zero_detector+0x250>)
 80013d2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013d6:	fb00 f202 	mul.w	r2, r0, r2
 80013da:	4413      	add	r3, r2
 80013dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	dc02      	bgt.n	80013ee <calc_zero_detector+0x1ae>
						detected++;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	3301      	adds	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3302      	adds	r3, #2
 80013f2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013f6:	d211      	bcs.n	800141c <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3302      	adds	r3, #2
 80013fe:	4924      	ldr	r1, [pc, #144]	; (8001490 <calc_zero_detector+0x250>)
 8001400:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001404:	fb00 f202 	mul.w	r2, r0, r2
 8001408:	4413      	add	r3, r2
 800140a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800140e:	461a      	mov	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4293      	cmp	r3, r2
 8001414:	dd02      	ble.n	800141c <calc_zero_detector+0x1dc>
						detected++;
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	3301      	adds	r3, #1
 800141a:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 800141c:	7ffb      	ldrb	r3, [r7, #31]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d90c      	bls.n	800143c <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	491b      	ldr	r1, [pc, #108]	; (8001494 <calc_zero_detector+0x254>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3308      	adds	r3, #8
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	601a      	str	r2, [r3, #0]
					detect_count++;
 8001436:	7fbb      	ldrb	r3, [r7, #30]
 8001438:	3301      	adds	r3, #1
 800143a:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3301      	adds	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800144c:	f4ff af1b 	bcc.w	8001286 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 8001450:	7fbb      	ldrb	r3, [r7, #30]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d917      	bls.n	8001486 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	490e      	ldr	r1, [pc, #56]	; (8001494 <calc_zero_detector+0x254>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	f06f 0208 	mvn.w	r2, #8
 800146a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	4909      	ldr	r1, [pc, #36]	; (8001494 <calc_zero_detector+0x254>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	f06f 0208 	mvn.w	r2, #8
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e000      	b.n	8001486 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001484:	bf00      	nop
	}
}
 8001486:	3724      	adds	r7, #36	; 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200074dc 	.word	0x200074dc
 8001494:	2000026c 	.word	0x2000026c

08001498 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing, etc)
 */
void calc_downsample(uint8_t bufnum) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	f200 8115 	bhi.w	80016d8 <calc_downsample+0x240>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e083      	b.n	80015bc <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	498a      	ldr	r1, [pc, #552]	; (80016e0 <calc_downsample+0x248>)
 80014b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80014bc:	fb03 f202 	mul.w	r2, r3, r2
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4413      	add	r3, r2
 80014c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014c8:	461c      	mov	r4, r3
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4983      	ldr	r1, [pc, #524]	; (80016e0 <calc_downsample+0x248>)
 80014d2:	f44f 7052 	mov.w	r0, #840	; 0x348
 80014d6:	fb00 f202 	mul.w	r2, r0, r2
 80014da:	4413      	add	r3, r2
 80014dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014e0:	4423      	add	r3, r4
 80014e2:	79f9      	ldrb	r1, [r7, #7]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	3201      	adds	r2, #1
 80014e8:	487d      	ldr	r0, [pc, #500]	; (80016e0 <calc_downsample+0x248>)
 80014ea:	f44f 7452 	mov.w	r4, #840	; 0x348
 80014ee:	fb04 f101 	mul.w	r1, r4, r1
 80014f2:	440a      	add	r2, r1
 80014f4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a7a      	ldr	r2, [pc, #488]	; (80016e4 <calc_downsample+0x24c>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad1      	subs	r1, r2, r3
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	8bfb      	ldrh	r3, [r7, #30]
 8001508:	b28c      	uxth	r4, r1
 800150a:	4977      	ldr	r1, [pc, #476]	; (80016e8 <calc_downsample+0x250>)
 800150c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001510:	fb00 f202 	mul.w	r2, r0, r2
 8001514:	4413      	add	r3, r2
 8001516:	4622      	mov	r2, r4
 8001518:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	4973      	ldr	r1, [pc, #460]	; (80016ec <calc_downsample+0x254>)
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	82bb      	strh	r3, [r7, #20]
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	8bfb      	ldrh	r3, [r7, #30]
 8001532:	496d      	ldr	r1, [pc, #436]	; (80016e8 <calc_downsample+0x250>)
 8001534:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001538:	fb00 f202 	mul.w	r2, r0, r2
 800153c:	4413      	add	r3, r2
 800153e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001542:	827b      	strh	r3, [r7, #18]
 8001544:	8a7a      	ldrh	r2, [r7, #18]
 8001546:	8abb      	ldrh	r3, [r7, #20]
 8001548:	4293      	cmp	r3, r2
 800154a:	bf28      	it	cs
 800154c:	4613      	movcs	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	b298      	uxth	r0, r3
 8001554:	4965      	ldr	r1, [pc, #404]	; (80016ec <calc_downsample+0x254>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	4602      	mov	r2, r0
 8001562:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	4961      	ldr	r1, [pc, #388]	; (80016ec <calc_downsample+0x254>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3302      	adds	r3, #2
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	823b      	strh	r3, [r7, #16]
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	495a      	ldr	r1, [pc, #360]	; (80016e8 <calc_downsample+0x250>)
 800157e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001582:	fb00 f202 	mul.w	r2, r0, r2
 8001586:	4413      	add	r3, r2
 8001588:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800158c:	81fb      	strh	r3, [r7, #14]
 800158e:	89fa      	ldrh	r2, [r7, #14]
 8001590:	8a3b      	ldrh	r3, [r7, #16]
 8001592:	4293      	cmp	r3, r2
 8001594:	bf38      	it	cc
 8001596:	4613      	movcc	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	b298      	uxth	r0, r3
 800159e:	4953      	ldr	r1, [pc, #332]	; (80016ec <calc_downsample+0x254>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3302      	adds	r3, #2
 80015ac:	4602      	mov	r2, r0
 80015ae:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 80015b0:	8bfb      	ldrh	r3, [r7, #30]
 80015b2:	3301      	adds	r3, #1
 80015b4:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	3302      	adds	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f240 3245 	movw	r2, #837	; 0x345
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f67f af76 	bls.w	80014b4 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <calc_downsample+0x248>)
 80015cc:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <calc_downsample+0x248>)
 80015e2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4403      	add	r3, r0
 80015f4:	0fda      	lsrs	r2, r3, #31
 80015f6:	4413      	add	r3, r2
 80015f8:	105b      	asrs	r3, r3, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	8bfb      	ldrh	r3, [r7, #30]
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	83f9      	strh	r1, [r7, #30]
 8001604:	461c      	mov	r4, r3
 8001606:	b280      	uxth	r0, r0
 8001608:	4937      	ldr	r1, [pc, #220]	; (80016e8 <calc_downsample+0x250>)
 800160a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4423      	add	r3, r4
 8001614:	4602      	mov	r2, r0
 8001616:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 800161a:	8bfb      	ldrh	r3, [r7, #30]
 800161c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001620:	d20a      	bcs.n	8001638 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	8bfb      	ldrh	r3, [r7, #30]
 8001626:	4930      	ldr	r1, [pc, #192]	; (80016e8 <calc_downsample+0x250>)
 8001628:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800162c:	fb00 f202 	mul.w	r2, r0, r2
 8001630:	4413      	add	r3, r2
 8001632:	2200      	movs	r2, #0
 8001634:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	492c      	ldr	r1, [pc, #176]	; (80016ec <calc_downsample+0x254>)
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3302      	adds	r3, #2
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	4827      	ldr	r0, [pc, #156]	; (80016ec <calc_downsample+0x254>)
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4403      	add	r3, r0
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	1acb      	subs	r3, r1, r3
 800165c:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	if (range > ADC_NOISE_RAW) {
 800165e:	8afb      	ldrh	r3, [r7, #22]
 8001660:	2b1e      	cmp	r3, #30
 8001662:	d918      	bls.n	8001696 <calc_downsample+0x1fe>
		calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 8001664:	8afb      	ldrh	r3, [r7, #22]
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	491f      	ldr	r1, [pc, #124]	; (80016ec <calc_downsample+0x254>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	18c1      	adds	r1, r0, r3
 800167e:	8afb      	ldrh	r3, [r7, #22]
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <calc_downsample+0x258>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	b29b      	uxth	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fdd6 	bl	8001240 <calc_zero_detector>
 8001694:	e021      	b.n	80016da <calc_downsample+0x242>
	} else {
		// mark zero crossings as invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	4914      	ldr	r1, [pc, #80]	; (80016ec <calc_downsample+0x254>)
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3308      	adds	r3, #8
 80016a6:	f06f 0208 	mvn.w	r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	490f      	ldr	r1, [pc, #60]	; (80016ec <calc_downsample+0x254>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3304      	adds	r3, #4
 80016bc:	f06f 0208 	mvn.w	r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].value_is_zero = 1;		// value is zero
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	4909      	ldr	r1, [pc, #36]	; (80016ec <calc_downsample+0x254>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	330d      	adds	r3, #13
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e000      	b.n	80016da <calc_downsample+0x242>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80016d8:	bf00      	nop
	}
}
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	20005a9c 	.word	0x20005a9c
 80016e4:	55555556 	.word	0x55555556
 80016e8:	200074dc 	.word	0x200074dc
 80016ec:	2000026c 	.word	0x2000026c
 80016f0:	cccccccd 	.word	0xcccccccd

080016f4 <calc_filter_add_v>:

/*
 * @brief  Add new value to voltage filter
 * @para newValue: The new value to add to the filter
 */
void calc_filter_add_v(float newValue) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float v_total = 0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	e019      	b.n	800173e <calc_filter_add_v+0x4a>
		v_filter[i] = v_filter[i+1];
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3301      	adds	r3, #1
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <calc_filter_add_v+0x84>)
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4918      	ldr	r1, [pc, #96]	; (8001778 <calc_filter_add_v+0x84>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	601a      	str	r2, [r3, #0]
		v_total += v_filter[i];			// accumulate total
 8001720:	4a15      	ldr	r2, [pc, #84]	; (8001778 <calc_filter_add_v+0x84>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b03      	cmp	r3, #3
 8001742:	dde2      	ble.n	800170a <calc_filter_add_v+0x16>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = newValue;
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <calc_filter_add_v+0x84>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6113      	str	r3, [r2, #16]
	v_total += newValue;
 800174a:	ed97 7a03 	vldr	s14, [r7, #12]
 800174e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	edc7 7a03 	vstr	s15, [r7, #12]
	v_filtered = v_total / FILTER_NUM;
 800175a:	ed97 7a03 	vldr	s14, [r7, #12]
 800175e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <calc_filter_add_v+0x88>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200002c0 	.word	0x200002c0
 800177c:	200003c4 	.word	0x200003c4

08001780 <calc_filter_add_i>:
 * @para new_i_value:  The new current value to add to the filter
 * @para new_va_value: The new va value to add to the filter
 * @para new_w_value:  The new w value to add to the filter
 * @para new_pf_value: The new PF value to add to the filter
 */
void calc_filter_add_i(uint8_t channel, float new_i_value, float new_va_value, float new_w_value, float new_pf_value) {
 8001780:	b490      	push	{r4, r7}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	ed87 0a04 	vstr	s0, [r7, #16]
 800178c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001790:	ed87 1a02 	vstr	s2, [r7, #8]
 8001794:	edc7 1a01 	vstr	s3, [r7, #4]
 8001798:	75fb      	strb	r3, [r7, #23]
	float i_total=0, va_total=0, w_total=0, pf_total=0;
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e09a      	b.n	80018ee <calc_filter_add_i+0x16e>
		i_filter[channel][i] = i_filter[channel][i+1];
 80017b8:	7df9      	ldrb	r1, [r7, #23]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	1c58      	adds	r0, r3, #1
 80017be:	7dfa      	ldrb	r2, [r7, #23]
 80017c0:	4c8b      	ldr	r4, [pc, #556]	; (80019f0 <calc_filter_add_i+0x270>)
 80017c2:	460b      	mov	r3, r1
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	4403      	add	r3, r0
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4423      	add	r3, r4
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	4887      	ldr	r0, [pc, #540]	; (80019f0 <calc_filter_add_i+0x270>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4403      	add	r3, r0
 80017e0:	6019      	str	r1, [r3, #0]
		i_total += i_filter[channel][i];
 80017e2:	7dfa      	ldrb	r2, [r7, #23]
 80017e4:	4982      	ldr	r1, [pc, #520]	; (80019f0 <calc_filter_add_i+0x270>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		va_filter[channel][i] = va_filter[channel][i+1];
 8001804:	7df9      	ldrb	r1, [r7, #23]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	1c58      	adds	r0, r3, #1
 800180a:	7dfa      	ldrb	r2, [r7, #23]
 800180c:	4c79      	ldr	r4, [pc, #484]	; (80019f4 <calc_filter_add_i+0x274>)
 800180e:	460b      	mov	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	4403      	add	r3, r0
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4423      	add	r3, r4
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	4875      	ldr	r0, [pc, #468]	; (80019f4 <calc_filter_add_i+0x274>)
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4403      	add	r3, r0
 800182c:	6019      	str	r1, [r3, #0]
		va_total += va_filter[channel][i];
 800182e:	7dfa      	ldrb	r2, [r7, #23]
 8001830:	4970      	ldr	r1, [pc, #448]	; (80019f4 <calc_filter_add_i+0x274>)
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		w_filter[channel][i] = w_filter[channel][i+1];
 8001850:	7df9      	ldrb	r1, [r7, #23]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	1c58      	adds	r0, r3, #1
 8001856:	7dfa      	ldrb	r2, [r7, #23]
 8001858:	4c67      	ldr	r4, [pc, #412]	; (80019f8 <calc_filter_add_i+0x278>)
 800185a:	460b      	mov	r3, r1
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	4403      	add	r3, r0
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4423      	add	r3, r4
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	4863      	ldr	r0, [pc, #396]	; (80019f8 <calc_filter_add_i+0x278>)
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4403      	add	r3, r0
 8001878:	6019      	str	r1, [r3, #0]
		w_total += w_filter[channel][i];
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	495e      	ldr	r1, [pc, #376]	; (80019f8 <calc_filter_add_i+0x278>)
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pf_filter[channel][i] = pf_filter[channel][i+1];
 800189c:	7df9      	ldrb	r1, [r7, #23]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	1c58      	adds	r0, r3, #1
 80018a2:	7dfa      	ldrb	r2, [r7, #23]
 80018a4:	4c55      	ldr	r4, [pc, #340]	; (80019fc <calc_filter_add_i+0x27c>)
 80018a6:	460b      	mov	r3, r1
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	4403      	add	r3, r0
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4423      	add	r3, r4
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	4851      	ldr	r0, [pc, #324]	; (80019fc <calc_filter_add_i+0x27c>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4403      	add	r3, r0
 80018c4:	6019      	str	r1, [r3, #0]
		pf_total += pf_filter[channel][i];
 80018c6:	7dfa      	ldrb	r2, [r7, #23]
 80018c8:	494c      	ldr	r1, [pc, #304]	; (80019fc <calc_filter_add_i+0x27c>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	f77f af61 	ble.w	80017b8 <calc_filter_add_i+0x38>
	}
	// add new measurements
	i_filter[channel][FILTER_NUM-1] = new_i_value;
 80018f6:	7dfa      	ldrb	r2, [r7, #23]
 80018f8:	493d      	ldr	r1, [pc, #244]	; (80019f0 <calc_filter_add_i+0x270>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3310      	adds	r3, #16
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	601a      	str	r2, [r3, #0]
	i_total += new_i_value;
 800190a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800190e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001916:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	va_filter[channel][FILTER_NUM-1] = new_va_value;
 800191a:	7dfa      	ldrb	r2, [r7, #23]
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <calc_filter_add_i+0x274>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3310      	adds	r3, #16
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]
	va_total += new_va_value;
 800192e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001932:	edd7 7a03 	vldr	s15, [r7, #12]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	w_filter[channel][FILTER_NUM-1] = new_w_value;
 800193e:	7dfa      	ldrb	r2, [r7, #23]
 8001940:	492d      	ldr	r1, [pc, #180]	; (80019f8 <calc_filter_add_i+0x278>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3310      	adds	r3, #16
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	601a      	str	r2, [r3, #0]
	w_total += new_w_value;
 8001952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001956:	edd7 7a02 	vldr	s15, [r7, #8]
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pf_filter[channel][FILTER_NUM-1] = new_pf_value;
 8001962:	7dfa      	ldrb	r2, [r7, #23]
 8001964:	4925      	ldr	r1, [pc, #148]	; (80019fc <calc_filter_add_i+0x27c>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3310      	adds	r3, #16
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
	pf_total += new_pf_value;
 8001976:	ed97 7a08 	vldr	s14, [r7, #32]
 800197a:	edd7 7a01 	vldr	s15, [r7, #4]
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	edc7 7a08 	vstr	s15, [r7, #32]

	i_filtered[channel] = i_total / FILTER_NUM;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800198c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <calc_filter_add_i+0x280>)
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	edc3 7a00 	vstr	s15, [r3]
	va_filtered[channel] = va_total / FILTER_NUM;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019a4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <calc_filter_add_i+0x284>)
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	edc3 7a00 	vstr	s15, [r3]
	w_filtered[channel] = w_total / FILTER_NUM;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019bc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <calc_filter_add_i+0x288>)
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	pf_filtered[channel] = pf_total / FILTER_NUM;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <calc_filter_add_i+0x28c>)
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	edc3 7a00 	vstr	s15, [r3]
}
 80019e6:	bf00      	nop
 80019e8:	3730      	adds	r7, #48	; 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc90      	pop	{r4, r7}
 80019ee:	4770      	bx	lr
 80019f0:	200002d4 	.word	0x200002d4
 80019f4:	20000310 	.word	0x20000310
 80019f8:	2000034c 	.word	0x2000034c
 80019fc:	20000388 	.word	0x20000388
 8001a00:	200003c8 	.word	0x200003c8
 8001a04:	200003d4 	.word	0x200003d4
 8001a08:	200003e0 	.word	0x200003e0
 8001a0c:	200003ec 	.word	0x200003ec

08001a10 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	ed2d 8b02 	vpush	{d8}
 8001a18:	b0d4      	sub	sp, #336	; 0x150
 8001a1a:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	int64_t i1_sq_acc=0, i2_sq_acc=0, i3_sq_acc=0;		// accumulator for squared I values
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	double i1_va_acc=0, i2_va_acc=0, i3_va_acc=0;		// accumulator for squared VA values
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	double i1_w_acc=0, i2_w_acc=0, i3_w_acc=0;			// accumulating I values where I > 0 (for W calculation)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t v_pp;				// Voltage channel Peak-Peak
	uint16_t i1_zero, i2_zero, i3_zero;
	uint16_t i1_pp, i2_pp, i3_pp;			// Current channel P-P
	float w=0, va=0;
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8001aaa:	4bb2      	ldr	r3, [pc, #712]	; (8001d74 <calc_measurements+0x364>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da06      	bge.n	8001ac0 <calc_measurements+0xb0>
		meter_readings_invalid = 1;
 8001ab2:	4bb1      	ldr	r3, [pc, #708]	; (8001d78 <calc_measurements+0x368>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abc:	f000 bfad 	b.w	8002a1a <calc_measurements+0x100a>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 8001ac0:	4bac      	ldr	r3, [pc, #688]	; (8001d74 <calc_measurements+0x364>)
 8001ac2:	885b      	ldrh	r3, [r3, #2]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4bab      	ldr	r3, [pc, #684]	; (8001d74 <calc_measurements+0x364>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dc06      	bgt.n	8001ae2 <calc_measurements+0xd2>
		meter_readings_invalid = 1;
 8001ad4:	4ba8      	ldr	r3, [pc, #672]	; (8001d78 <calc_measurements+0x368>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ade:	f000 bf9c 	b.w	8002a1a <calc_measurements+0x100a>
	}

	meter_readings_invalid = 0;		// readings are valid
 8001ae2:	4aa5      	ldr	r2, [pc, #660]	; (8001d78 <calc_measurements+0x368>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	7013      	strb	r3, [r2, #0]

	v_pp = sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min;
 8001ae8:	4ba2      	ldr	r3, [pc, #648]	; (8001d74 <calc_measurements+0x364>)
 8001aea:	885a      	ldrh	r2, [r3, #2]
 8001aec:	4ba1      	ldr	r3, [pc, #644]	; (8001d74 <calc_measurements+0x364>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	v_zero = v_pp / 2 + sample_buf_meta[ADC_CH_V].min;
 8001af6:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b9d      	ldr	r3, [pc, #628]	; (8001d74 <calc_measurements+0x364>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	i1_pp = sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min;
 8001b08:	4b9a      	ldr	r3, [pc, #616]	; (8001d74 <calc_measurements+0x364>)
 8001b0a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001b0c:	4b99      	ldr	r3, [pc, #612]	; (8001d74 <calc_measurements+0x364>)
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	i2_pp = sample_buf_meta[ADC_CH_I2].max - sample_buf_meta[ADC_CH_I2].min;
 8001b16:	4b97      	ldr	r3, [pc, #604]	; (8001d74 <calc_measurements+0x364>)
 8001b18:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001b1a:	4b96      	ldr	r3, [pc, #600]	; (8001d74 <calc_measurements+0x364>)
 8001b1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	i3_pp = sample_buf_meta[ADC_CH_I3].max - sample_buf_meta[ADC_CH_I3].min;
 8001b24:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <calc_measurements+0x364>)
 8001b26:	8ada      	ldrh	r2, [r3, #22]
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <calc_measurements+0x364>)
 8001b2a:	8a9b      	ldrh	r3, [r3, #20]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	i1_zero = i1_pp / 2 + sample_buf_meta[ADC_CH_I1].min;
 8001b32:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <calc_measurements+0x364>)
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
	i2_zero = i2_pp / 2 + sample_buf_meta[ADC_CH_I2].min;
 8001b44:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <calc_measurements+0x364>)
 8001b4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b50:	4413      	add	r3, r2
 8001b52:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	i3_zero = i3_pp / 2 + sample_buf_meta[ADC_CH_I3].min;
 8001b56:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <calc_measurements+0x364>)
 8001b60:	8a9b      	ldrh	r3, [r3, #20]
 8001b62:	4413      	add	r3, r2
 8001b64:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc

	// Calculate values using the positive half of the sine wave

	// Add up squared measurements
	// does the positive x-ing come before the negative?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001b68:	4b82      	ldr	r3, [pc, #520]	; (8001d74 <calc_measurements+0x364>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <calc_measurements+0x364>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f280 8163 	bge.w	8001e3c <calc_measurements+0x42c>
		// iterate from positive to negative crossing (positive half wave)
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <calc_measurements+0x364>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b7e:	e155      	b.n	8001e2c <calc_measurements+0x41c>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b80:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <calc_measurements+0x36c>)
 8001b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b8a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001b96:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001b9a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	17da      	asrs	r2, r3, #31
 8001ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001bb0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	1851      	adds	r1, r2, r1
 8001bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bba:	4629      	mov	r1, r5
 8001bbc:	414b      	adcs	r3, r1
 8001bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bc0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bc8:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <calc_measurements+0x36c>)
 8001bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001bce:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001bd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bd6:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001be2:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001be6:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	17da      	asrs	r2, r3, #31
 8001bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001bf8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001bfc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001c00:	4621      	mov	r1, r4
 8001c02:	1851      	adds	r1, r2, r1
 8001c04:	6539      	str	r1, [r7, #80]	; 0x50
 8001c06:	4629      	mov	r1, r5
 8001c08:	414b      	adcs	r3, r1
 8001c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001c10:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001c14:	4a59      	ldr	r2, [pc, #356]	; (8001d7c <calc_measurements+0x36c>)
 8001c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c1a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001c1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c22:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001c2e:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001c32:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	17da      	asrs	r2, r3, #31
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c40:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c44:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001c48:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	1851      	adds	r1, r2, r1
 8001c50:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c52:	4629      	mov	r1, r5
 8001c54:	414b      	adcs	r3, r1
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c58:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001c5c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <calc_measurements+0x36c>)
 8001c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c66:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001c6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c6e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001c7a:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001c7e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	17da      	asrs	r2, r3, #31
 8001c88:	4698      	mov	r8, r3
 8001c8a:	4691      	mov	r9, r2
 8001c8c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c90:	eb12 0108 	adds.w	r1, r2, r8
 8001c94:	6439      	str	r1, [r7, #64]	; 0x40
 8001c96:	eb43 0309 	adc.w	r3, r3, r9
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c9c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001ca0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 8001ca4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001cae:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f83e 	bl	8002d34 <calc_adc_raw_to_V>
 8001cb8:	eeb0 8a40 	vmov.f32	s16, s0
 8001cbc:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 f855 	bl	8002d70 <calc_adc_raw_to_A>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cce:	ee17 0a90 	vmov	r0, s15
 8001cd2:	f7fe fc59 	bl	8000588 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001cde:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0a      	blt.n	8001cfc <calc_measurements+0x2ec>
 8001ce6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001cea:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001cee:	f7fe faed 	bl	80002cc <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001cfa:	e014      	b.n	8001d26 <calc_measurements+0x316>
			else { i1_w_acc += abs(va_instant); }
 8001cfc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d00:	f7fe ff4a 	bl	8000b98 <__aeabi_d2iz>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfb8      	it	lt
 8001d0a:	425b      	neglt	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc29 	bl	8000564 <__aeabi_i2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001d1a:	f7fe fad7 	bl	80002cc <__adddf3>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001d26:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f001 f802 	bl	8002d34 <calc_adc_raw_to_V>
 8001d30:	eeb0 8a40 	vmov.f32	s16, s0
 8001d34:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 f819 	bl	8002d70 <calc_adc_raw_to_A>
 8001d3e:	eef0 7a40 	vmov.f32	s15, s0
 8001d42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d46:	ee17 0a90 	vmov	r0, s15
 8001d4a:	f7fe fc1d 	bl	8000588 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8001d56:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db10      	blt.n	8001d80 <calc_measurements+0x370>
 8001d5e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001d62:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001d66:	f7fe fab1 	bl	80002cc <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001d72:	e01a      	b.n	8001daa <calc_measurements+0x39a>
 8001d74:	2000026c 	.word	0x2000026c
 8001d78:	200002bc 	.word	0x200002bc
 8001d7c:	200074dc 	.word	0x200074dc
			else { i2_w_acc += abs(va_instant); }
 8001d80:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d84:	f7fe ff08 	bl	8000b98 <__aeabi_d2iz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bfb8      	it	lt
 8001d8e:	425b      	neglt	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbe7 	bl	8000564 <__aeabi_i2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001d9e:	f7fe fa95 	bl	80002cc <__adddf3>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8001daa:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 ffc0 	bl	8002d34 <calc_adc_raw_to_V>
 8001db4:	eeb0 8a40 	vmov.f32	s16, s0
 8001db8:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 ffd7 	bl	8002d70 <calc_adc_raw_to_A>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fbdb 	bl	8000588 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8001dda:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0a      	blt.n	8001df8 <calc_measurements+0x3e8>
 8001de2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001de6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001dea:	f7fe fa6f 	bl	80002cc <__adddf3>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8001df6:	e014      	b.n	8001e22 <calc_measurements+0x412>
			else { i3_w_acc += abs(va_instant); }
 8001df8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dfc:	f7fe fecc 	bl	8000b98 <__aeabi_d2iz>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bfb8      	it	lt
 8001e06:	425b      	neglt	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbab 	bl	8000564 <__aeabi_i2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001e16:	f7fe fa59 	bl	80002cc <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e26:	3301      	adds	r3, #1
 8001e28:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e2c:	4bb0      	ldr	r3, [pc, #704]	; (80020f0 <calc_measurements+0x6e0>)
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e34:	4293      	cmp	r3, r2
 8001e36:	f6ff aea3 	blt.w	8001b80 <calc_measurements+0x170>
 8001e3a:	e2ba      	b.n	80023b2 <calc_measurements+0x9a2>
		}
	} else {	// negative crossing is first
		// iterate from positive x-ing to the end of the buffer ....
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001e3c:	4bac      	ldr	r3, [pc, #688]	; (80020f0 <calc_measurements+0x6e0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e44:	e149      	b.n	80020da <calc_measurements+0x6ca>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001e46:	4aab      	ldr	r2, [pc, #684]	; (80020f4 <calc_measurements+0x6e4>)
 8001e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e4c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e50:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001e5c:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001e60:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	17da      	asrs	r2, r3, #31
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e6e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e72:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001e76:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	1851      	adds	r1, r2, r1
 8001e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e80:	4649      	mov	r1, r9
 8001e82:	414b      	adcs	r3, r1
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e8a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001e8e:	4a99      	ldr	r2, [pc, #612]	; (80020f4 <calc_measurements+0x6e4>)
 8001e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e94:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001e98:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e9c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001ea8:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001eac:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	17da      	asrs	r2, r3, #31
 8001eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001eba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ebe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ec6:	4641      	mov	r1, r8
 8001ec8:	1851      	adds	r1, r2, r1
 8001eca:	6339      	str	r1, [r7, #48]	; 0x30
 8001ecc:	4649      	mov	r1, r9
 8001ece:	414b      	adcs	r3, r1
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ed6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001eda:	4a86      	ldr	r2, [pc, #536]	; (80020f4 <calc_measurements+0x6e4>)
 8001edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ee0:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001ee4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ee8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001ef4:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001ef8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	17da      	asrs	r2, r3, #31
 8001f02:	469a      	mov	sl, r3
 8001f04:	4693      	mov	fp, r2
 8001f06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f0a:	eb12 010a 	adds.w	r1, r2, sl
 8001f0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f10:	eb43 030b 	adc.w	r3, r3, fp
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f1a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001f1e:	4a75      	ldr	r2, [pc, #468]	; (80020f4 <calc_measurements+0x6e4>)
 8001f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f24:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001f28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f2c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001f38:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001f3c:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	17da      	asrs	r2, r3, #31
 8001f46:	461c      	mov	r4, r3
 8001f48:	4615      	mov	r5, r2
 8001f4a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f4e:	1911      	adds	r1, r2, r4
 8001f50:	6239      	str	r1, [r7, #32]
 8001f52:	416b      	adcs	r3, r5
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f5a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			num_readings++;
 8001f5e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001f68:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fee1 	bl	8002d34 <calc_adc_raw_to_V>
 8001f72:	eeb0 8a40 	vmov.f32	s16, s0
 8001f76:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fef8 	bl	8002d70 <calc_adc_raw_to_A>
 8001f80:	eef0 7a40 	vmov.f32	s15, s0
 8001f84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f88:	ee17 0a90 	vmov	r0, s15
 8001f8c:	f7fe fafc 	bl	8000588 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001f98:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <calc_measurements+0x5a6>
 8001fa0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001fa4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001fa8:	f7fe f990 	bl	80002cc <__adddf3>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001fb4:	e014      	b.n	8001fe0 <calc_measurements+0x5d0>
			else { i1_w_acc += abs(va_instant); }
 8001fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fba:	f7fe fded 	bl	8000b98 <__aeabi_d2iz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bfb8      	it	lt
 8001fc4:	425b      	neglt	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe facc 	bl	8000564 <__aeabi_i2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001fd4:	f7fe f97a 	bl	80002cc <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001fe0:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fea5 	bl	8002d34 <calc_adc_raw_to_V>
 8001fea:	eeb0 8a40 	vmov.f32	s16, s0
 8001fee:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 febc 	bl	8002d70 <calc_adc_raw_to_A>
 8001ff8:	eef0 7a40 	vmov.f32	s15, s0
 8001ffc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002000:	ee17 0a90 	vmov	r0, s15
 8002004:	f7fe fac0 	bl	8000588 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8002010:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <calc_measurements+0x61e>
 8002018:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800201c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002020:	f7fe f954 	bl	80002cc <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 800202c:	e014      	b.n	8002058 <calc_measurements+0x648>
			else { i2_w_acc += abs(va_instant); }
 800202e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002032:	f7fe fdb1 	bl	8000b98 <__aeabi_d2iz>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	bfb8      	it	lt
 800203c:	425b      	neglt	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa90 	bl	8000564 <__aeabi_i2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800204c:	f7fe f93e 	bl	80002cc <__adddf3>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8002058:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fe69 	bl	8002d34 <calc_adc_raw_to_V>
 8002062:	eeb0 8a40 	vmov.f32	s16, s0
 8002066:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fe80 	bl	8002d70 <calc_adc_raw_to_A>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002078:	ee17 0a90 	vmov	r0, s15
 800207c:	f7fe fa84 	bl	8000588 <__aeabi_f2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8002088:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <calc_measurements+0x696>
 8002090:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002094:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002098:	f7fe f918 	bl	80002cc <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 80020a4:	e014      	b.n	80020d0 <calc_measurements+0x6c0>
			else { i3_w_acc += abs(va_instant); }
 80020a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020aa:	f7fe fd75 	bl	8000b98 <__aeabi_d2iz>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bfb8      	it	lt
 80020b4:	425b      	neglt	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa54 	bl	8000564 <__aeabi_i2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80020c4:	f7fe f902 	bl	80002cc <__adddf3>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 80020d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020d4:	3301      	adds	r3, #1
 80020d6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020de:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80020e2:	f4ff aeb0 	bcc.w	8001e46 <calc_measurements+0x436>
		}
		// ..... the continue iterating from the start of the buffer to the negative crossing
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 80020e6:	2314      	movs	r3, #20
 80020e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020ec:	e15a      	b.n	80023a4 <calc_measurements+0x994>
 80020ee:	bf00      	nop
 80020f0:	2000026c 	.word	0x2000026c
 80020f4:	200074dc 	.word	0x200074dc
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 80020f8:	4a9c      	ldr	r2, [pc, #624]	; (800236c <calc_measurements+0x95c>)
 80020fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002102:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	b29b      	uxth	r3, r3
 800210a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 800210e:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8002112:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	17da      	asrs	r2, r3, #31
 800211c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002120:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002124:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002128:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800212c:	4621      	mov	r1, r4
 800212e:	1851      	adds	r1, r2, r1
 8002130:	61b9      	str	r1, [r7, #24]
 8002132:	4629      	mov	r1, r5
 8002134:	414b      	adcs	r3, r1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800213c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8002140:	4a8a      	ldr	r2, [pc, #552]	; (800236c <calc_measurements+0x95c>)
 8002142:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002146:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800214a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800214e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	b29b      	uxth	r3, r3
 8002156:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 800215a:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 800215e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	17da      	asrs	r2, r3, #31
 8002168:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800216c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002170:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002174:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002178:	4621      	mov	r1, r4
 800217a:	1851      	adds	r1, r2, r1
 800217c:	6139      	str	r1, [r7, #16]
 800217e:	4629      	mov	r1, r5
 8002180:	414b      	adcs	r3, r1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002188:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 800218c:	4a77      	ldr	r2, [pc, #476]	; (800236c <calc_measurements+0x95c>)
 800218e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002192:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002196:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800219a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 80021a6:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80021aa:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	17da      	asrs	r2, r3, #31
 80021b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021bc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80021c0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80021c4:	4621      	mov	r1, r4
 80021c6:	1851      	adds	r1, r2, r1
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4629      	mov	r1, r5
 80021cc:	414b      	adcs	r3, r1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021d4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 80021d8:	4a64      	ldr	r2, [pc, #400]	; (800236c <calc_measurements+0x95c>)
 80021da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021de:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80021e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021e6:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 80021f2:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80021f6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	17da      	asrs	r2, r3, #31
 8002200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002204:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002208:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800220c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002210:	4621      	mov	r1, r4
 8002212:	1851      	adds	r1, r2, r1
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	4629      	mov	r1, r5
 8002218:	414b      	adcs	r3, r1
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002220:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 8002224:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002228:	3301      	adds	r3, #1
 800222a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 800222e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd7e 	bl	8002d34 <calc_adc_raw_to_V>
 8002238:	eeb0 8a40 	vmov.f32	s16, s0
 800223c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fd95 	bl	8002d70 <calc_adc_raw_to_A>
 8002246:	eef0 7a40 	vmov.f32	s15, s0
 800224a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800224e:	ee17 0a90 	vmov	r0, s15
 8002252:	f7fe f999 	bl	8000588 <__aeabi_f2d>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 800225e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0a      	blt.n	800227c <calc_measurements+0x86c>
 8002266:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800226a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800226e:	f7fe f82d 	bl	80002cc <__adddf3>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 800227a:	e014      	b.n	80022a6 <calc_measurements+0x896>
			else { i1_w_acc += abs(va_instant); }
 800227c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002280:	f7fe fc8a 	bl	8000b98 <__aeabi_d2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bfb8      	it	lt
 800228a:	425b      	neglt	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f969 	bl	8000564 <__aeabi_i2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800229a:	f7fe f817 	bl	80002cc <__adddf3>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 80022a6:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fd42 	bl	8002d34 <calc_adc_raw_to_V>
 80022b0:	eeb0 8a40 	vmov.f32	s16, s0
 80022b4:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fd59 	bl	8002d70 <calc_adc_raw_to_A>
 80022be:	eef0 7a40 	vmov.f32	s15, s0
 80022c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f95d 	bl	8000588 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 80022d6:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0a      	blt.n	80022f4 <calc_measurements+0x8e4>
 80022de:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80022e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80022e6:	f7fd fff1 	bl	80002cc <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 80022f2:	e014      	b.n	800231e <calc_measurements+0x90e>
			else { i2_w_acc += abs(va_instant); }
 80022f4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022f8:	f7fe fc4e 	bl	8000b98 <__aeabi_d2iz>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfb8      	it	lt
 8002302:	425b      	neglt	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f92d 	bl	8000564 <__aeabi_i2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002312:	f7fd ffdb 	bl	80002cc <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 800231e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fd06 	bl	8002d34 <calc_adc_raw_to_V>
 8002328:	eeb0 8a40 	vmov.f32	s16, s0
 800232c:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fd1d 	bl	8002d70 <calc_adc_raw_to_A>
 8002336:	eef0 7a40 	vmov.f32	s15, s0
 800233a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800233e:	ee17 0a90 	vmov	r0, s15
 8002342:	f7fe f921 	bl	8000588 <__aeabi_f2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 800234e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0c      	blt.n	8002370 <calc_measurements+0x960>
 8002356:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800235a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800235e:	f7fd ffb5 	bl	80002cc <__adddf3>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 800236a:	e016      	b.n	800239a <calc_measurements+0x98a>
 800236c:	200074dc 	.word	0x200074dc
			else { i3_w_acc += abs(va_instant); }
 8002370:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002374:	f7fe fc10 	bl	8000b98 <__aeabi_d2iz>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	bfb8      	it	lt
 800237e:	425b      	neglt	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8ef 	bl	8000564 <__aeabi_i2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800238e:	f7fd ff9d 	bl	80002cc <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 800239a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800239e:	3301      	adds	r3, #1
 80023a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <calc_measurements+0xbf0>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023ac:	4293      	cmp	r3, r2
 80023ae:	f6ff aea3 	blt.w	80020f8 <calc_measurements+0x6e8>
		}
	}

	// Calculate measured RMS voltage
	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 80023b2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80023b6:	2200      	movs	r2, #0
 80023b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80023c0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023c4:	f7fe fc80 	bl	8000cc8 <__aeabi_ldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe f904 	bl	80005dc <__aeabi_l2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	ec43 2b10 	vmov	d0, r2, r3
 80023dc:	f010 fef4 	bl	80131c8 <sqrt>
 80023e0:	ec53 2b10 	vmov	r2, r3, d0
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbd6 	bl	8000b98 <__aeabi_d2iz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fc9f 	bl	8002d34 <calc_adc_raw_to_V>
 80023f6:	eef0 7a40 	vmov.f32	s15, s0
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <calc_measurements+0xbf4>)
 80023fc:	edc3 7a00 	vstr	s15, [r3]
	//v_measured = calc_adc_raw_to_V(v_pp) / 2 * 0.707;		// only works for a perfect sine wave (no distortion)
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8002400:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <calc_measurements+0xbf0>)
 8002402:	2201      	movs	r2, #1
 8002404:	731a      	strb	r2, [r3, #12]
	pf_measured[I1] = pf_measured[I2] = pf_measured[I3] = 1.0;		// assumed PF
 8002406:	4b80      	ldr	r3, [pc, #512]	; (8002608 <calc_measurements+0xbf8>)
 8002408:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	4b7e      	ldr	r3, [pc, #504]	; (8002608 <calc_measurements+0xbf8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a7d      	ldr	r2, [pc, #500]	; (8002608 <calc_measurements+0xbf8>)
 8002414:	6053      	str	r3, [r2, #4]
 8002416:	4b7c      	ldr	r3, [pc, #496]	; (8002608 <calc_measurements+0xbf8>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a7b      	ldr	r2, [pc, #492]	; (8002608 <calc_measurements+0xbf8>)
 800241c:	6013      	str	r3, [r2, #0]

	// Process I1 values
	// do we have zero (below ADC noise) current reading?
	if (sample_buf_meta[ADC_CH_I1].value_is_zero) {	// set all measured values to zero
 800241e:	4b78      	ldr	r3, [pc, #480]	; (8002600 <calc_measurements+0xbf0>)
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <calc_measurements+0xa32>
		i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 8002428:	4b78      	ldr	r3, [pc, #480]	; (800260c <calc_measurements+0xbfc>)
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b77      	ldr	r3, [pc, #476]	; (8002610 <calc_measurements+0xc00>)
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	4b76      	ldr	r3, [pc, #472]	; (8002614 <calc_measurements+0xc04>)
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e0c7      	b.n	80025d2 <calc_measurements+0xbc2>
	} else {
		i_measured[I1] = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8002442:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002446:	2200      	movs	r2, #0
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
 800244a:	677a      	str	r2, [r7, #116]	; 0x74
 800244c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002450:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8002454:	f7fe fc38 	bl	8000cc8 <__aeabi_ldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe f8bc 	bl	80005dc <__aeabi_l2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	ec43 2b10 	vmov	d0, r2, r3
 800246c:	f010 feac 	bl	80131c8 <sqrt>
 8002470:	ec53 2b10 	vmov	r2, r3, d0
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb8e 	bl	8000b98 <__aeabi_d2iz>
 800247c:	4603      	mov	r3, r0
 800247e:	b21b      	sxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fc75 	bl	8002d70 <calc_adc_raw_to_A>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	4b60      	ldr	r3, [pc, #384]	; (800260c <calc_measurements+0xbfc>)
 800248c:	edc3 7a00 	vstr	s15, [r3]
		//term_print("%s() - I1 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I1], sample_buf_meta[ADC_CH_I1].min, sample_buf_meta[ADC_CH_I1].max);
		if (i_measured[I1] >= I1_MIN) {		// Reading above min current?
 8002490:	4b5e      	ldr	r3, [pc, #376]	; (800260c <calc_measurements+0xbfc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f877 	bl	8000588 <__aeabi_f2d>
 800249a:	a357      	add	r3, pc, #348	; (adr r3, 80025f8 <calc_measurements+0xbe8>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe fb50 	bl	8000b44 <__aeabi_dcmpge>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <calc_measurements+0xbaa>
			if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80024b8:	f7fe fb4e 	bl	8000b58 <__aeabi_dcmpgt>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d013      	beq.n	80024ea <calc_measurements+0xada>
 80024c2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f84c 	bl	8000564 <__aeabi_i2d>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80024d4:	f7fe f9da 	bl	800088c <__aeabi_ddiv>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fba2 	bl	8000c28 <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80024f6:	f7fe fb2f 	bl	8000b58 <__aeabi_dcmpgt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <calc_measurements+0xb18>
 8002500:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f82d 	bl	8000564 <__aeabi_i2d>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002512:	f7fe f9bb 	bl	800088c <__aeabi_ddiv>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fb83 	bl	8000c28 <__aeabi_d2f>
 8002522:	4603      	mov	r3, r0
 8002524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I1] = v_measured * i_measured[I1];
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <calc_measurements+0xbfc>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	4b35      	ldr	r3, [pc, #212]	; (8002604 <calc_measurements+0xbf4>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <calc_measurements+0xc00>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
			if (w > 0) { w_measured[I1] = va - w;}
 800253e:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd09      	ble.n	8002560 <calc_measurements+0xb50>
 800254c:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8002550:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <calc_measurements+0xc04>)
 800255a:	edc3 7a00 	vstr	s15, [r3]
 800255e:	e003      	b.n	8002568 <calc_measurements+0xb58>
			else { w_measured[I1] = va_measured[I1];}
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <calc_measurements+0xc00>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <calc_measurements+0xc04>)
 8002566:	6013      	str	r3, [r2, #0]
			if (w_measured[I1] > va_measured[I1]) w_measured[I1] = va_measured[I1];		// W must be =< than VA
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <calc_measurements+0xc04>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <calc_measurements+0xc00>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	dd03      	ble.n	8002586 <calc_measurements+0xb76>
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <calc_measurements+0xc00>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <calc_measurements+0xc04>)
 8002584:	6013      	str	r3, [r2, #0]
			if (i_measured[I1] >= I1_MIN_PF) { pf_measured[I1] = w_measured[I1] / va_measured[I1]; }		// Calculate PF if we have sufficient current
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <calc_measurements+0xbfc>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	db0a      	blt.n	80025b0 <calc_measurements+0xba0>
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <calc_measurements+0xc04>)
 800259c:	edd3 6a00 	vldr	s13, [r3]
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <calc_measurements+0xc00>)
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <calc_measurements+0xbf8>)
 80025ac:	edc3 7a00 	vstr	s15, [r3]
			sample_buf_meta[ADC_CH_I1].measurements_valid = 1;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <calc_measurements+0xbf0>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80025b8:	e00b      	b.n	80025d2 <calc_measurements+0xbc2>
		} else {
			//term_print("%s() - I1 = %fA below minimum\r\n", __FUNCTION__, i_measured[I1]);
			i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <calc_measurements+0xbfc>)
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <calc_measurements+0xc00>)
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <calc_measurements+0xc04>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
		}
	}

	// Process I2 values
	if (sample_buf_meta[ADC_CH_I2].value_is_zero) {	// set all measured values to zero
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <calc_measurements+0xbf0>)
 80025d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01d      	beq.n	8002618 <calc_measurements+0xc08>
		i_measured[I2] = 0.0;va_measured[I2] = 0.0; w_measured[I2] = 0.0;
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <calc_measurements+0xbfc>)
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <calc_measurements+0xc00>)
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <calc_measurements+0xc04>)
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e0d8      	b.n	80027a8 <calc_measurements+0xd98>
 80025f6:	bf00      	nop
 80025f8:	33333333 	.word	0x33333333
 80025fc:	3fd33333 	.word	0x3fd33333
 8002600:	2000026c 	.word	0x2000026c
 8002604:	200003f8 	.word	0x200003f8
 8002608:	20000420 	.word	0x20000420
 800260c:	200003fc 	.word	0x200003fc
 8002610:	20000408 	.word	0x20000408
 8002614:	20000414 	.word	0x20000414
	} else {
		i_measured[I2] = calc_adc_raw_to_A (sqrt((i2_sq_acc / num_readings)));	// RMS current
 8002618:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800261c:	2200      	movs	r2, #0
 800261e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002620:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002622:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002626:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800262a:	f7fe fb4d 	bl	8000cc8 <__aeabi_ldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fd ffd1 	bl	80005dc <__aeabi_l2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	ec43 2b10 	vmov	d0, r2, r3
 8002642:	f010 fdc1 	bl	80131c8 <sqrt>
 8002646:	ec53 2b10 	vmov	r2, r3, d0
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe faa3 	bl	8000b98 <__aeabi_d2iz>
 8002652:	4603      	mov	r3, r0
 8002654:	b21b      	sxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fb8a 	bl	8002d70 <calc_adc_raw_to_A>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
 8002660:	4bbb      	ldr	r3, [pc, #748]	; (8002950 <calc_measurements+0xf40>)
 8002662:	edc3 7a01 	vstr	s15, [r3, #4]
		//term_print("%s() - I2 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I2], sample_buf_meta[ADC_CH_I2].min, sample_buf_meta[ADC_CH_I2].max);
		if (i_measured[I2] >= I2_MIN) {		// Reading above min current?
 8002666:	4bba      	ldr	r3, [pc, #744]	; (8002950 <calc_measurements+0xf40>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff8c 	bl	8000588 <__aeabi_f2d>
 8002670:	a3b5      	add	r3, pc, #724	; (adr r3, 8002948 <calc_measurements+0xf38>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fe fa65 	bl	8000b44 <__aeabi_dcmpge>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8087 	beq.w	8002790 <calc_measurements+0xd80>
			if (i2_va_acc > 0) { va = i2_va_acc / num_readings; }
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800268e:	f7fe fa63 	bl	8000b58 <__aeabi_dcmpgt>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <calc_measurements+0xcb0>
 8002698:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff61 	bl	8000564 <__aeabi_i2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80026aa:	f7fe f8ef 	bl	800088c <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fab7 	bl	8000c28 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i2_w_acc > 0) { w = i2_w_acc / num_readings; }
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026cc:	f7fe fa44 	bl	8000b58 <__aeabi_dcmpgt>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d013      	beq.n	80026fe <calc_measurements+0xcee>
 80026d6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff42 	bl	8000564 <__aeabi_i2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026e8:	f7fe f8d0 	bl	800088c <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa98 	bl	8000c28 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I2] = v_measured * i_measured[I2];
 80026fe:	4b94      	ldr	r3, [pc, #592]	; (8002950 <calc_measurements+0xf40>)
 8002700:	ed93 7a01 	vldr	s14, [r3, #4]
 8002704:	4b93      	ldr	r3, [pc, #588]	; (8002954 <calc_measurements+0xf44>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270e:	4b92      	ldr	r3, [pc, #584]	; (8002958 <calc_measurements+0xf48>)
 8002710:	edc3 7a01 	vstr	s15, [r3, #4]
			if (w > 0) { w_measured[I2] = va - w;}
 8002714:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	dd09      	ble.n	8002736 <calc_measurements+0xd26>
 8002722:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8002726:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <calc_measurements+0xf4c>)
 8002730:	edc3 7a01 	vstr	s15, [r3, #4]
 8002734:	e003      	b.n	800273e <calc_measurements+0xd2e>
			else { w_measured[I2] = va_measured[I2];}
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <calc_measurements+0xf48>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a88      	ldr	r2, [pc, #544]	; (800295c <calc_measurements+0xf4c>)
 800273c:	6053      	str	r3, [r2, #4]
			if (w_measured[I2] > va_measured[I2]) w_measured[I2] = va_measured[I2];		// W must be =< than VA
 800273e:	4b87      	ldr	r3, [pc, #540]	; (800295c <calc_measurements+0xf4c>)
 8002740:	ed93 7a01 	vldr	s14, [r3, #4]
 8002744:	4b84      	ldr	r3, [pc, #528]	; (8002958 <calc_measurements+0xf48>)
 8002746:	edd3 7a01 	vldr	s15, [r3, #4]
 800274a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	dd03      	ble.n	800275c <calc_measurements+0xd4c>
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <calc_measurements+0xf48>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a80      	ldr	r2, [pc, #512]	; (800295c <calc_measurements+0xf4c>)
 800275a:	6053      	str	r3, [r2, #4]
			if (i_measured[I2] >= I2_MIN_PF) {pf_measured[I2] = w_measured[I2] / va_measured[I2];}	// Calculate PF if we have sufficient current
 800275c:	4b7c      	ldr	r3, [pc, #496]	; (8002950 <calc_measurements+0xf40>)
 800275e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	db0a      	blt.n	8002786 <calc_measurements+0xd76>
 8002770:	4b7a      	ldr	r3, [pc, #488]	; (800295c <calc_measurements+0xf4c>)
 8002772:	edd3 6a01 	vldr	s13, [r3, #4]
 8002776:	4b78      	ldr	r3, [pc, #480]	; (8002958 <calc_measurements+0xf48>)
 8002778:	ed93 7a01 	vldr	s14, [r3, #4]
 800277c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002780:	4b77      	ldr	r3, [pc, #476]	; (8002960 <calc_measurements+0xf50>)
 8002782:	edc3 7a01 	vstr	s15, [r3, #4]
			sample_buf_meta[ADC_CH_I2].measurements_valid = 1;
 8002786:	4b77      	ldr	r3, [pc, #476]	; (8002964 <calc_measurements+0xf54>)
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800278e:	e00b      	b.n	80027a8 <calc_measurements+0xd98>
		} else {
			//term_print("%s() - I2 = %fA below minimum\r\n", __FUNCTION__, i_measured[I2]);
			i_measured[I2] = 0.0;va_measured[I2] = 0.0; w_measured[I2] = 0.0;
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <calc_measurements+0xf40>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <calc_measurements+0xf48>)
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	4b6e      	ldr	r3, [pc, #440]	; (800295c <calc_measurements+0xf4c>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
		}
	}

	// Process I3 values
	if (sample_buf_meta[ADC_CH_I3].value_is_zero) {	// set all measured values to zero
 80027a8:	4b6e      	ldr	r3, [pc, #440]	; (8002964 <calc_measurements+0xf54>)
 80027aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <calc_measurements+0xdbc>
		i_measured[I3] = 0.0; va_measured[I3] = 0.0; w_measured[I3] = 0.0;
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <calc_measurements+0xf40>)
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <calc_measurements+0xf48>)
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	4b66      	ldr	r3, [pc, #408]	; (800295c <calc_measurements+0xf4c>)
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e0d9      	b.n	8002980 <calc_measurements+0xf70>
	} else {
		i_measured[I3] = calc_adc_raw_to_A (sqrt((i3_sq_acc / num_readings)));	// RMS current
 80027cc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80027d0:	2200      	movs	r2, #0
 80027d2:	663b      	str	r3, [r7, #96]	; 0x60
 80027d4:	667a      	str	r2, [r7, #100]	; 0x64
 80027d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027da:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027de:	f7fe fa73 	bl	8000cc8 <__aeabi_ldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fd fef7 	bl	80005dc <__aeabi_l2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	ec43 2b10 	vmov	d0, r2, r3
 80027f6:	f010 fce7 	bl	80131c8 <sqrt>
 80027fa:	ec53 2b10 	vmov	r2, r3, d0
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7fe f9c9 	bl	8000b98 <__aeabi_d2iz>
 8002806:	4603      	mov	r3, r0
 8002808:	b21b      	sxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fab0 	bl	8002d70 <calc_adc_raw_to_A>
 8002810:	eef0 7a40 	vmov.f32	s15, s0
 8002814:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <calc_measurements+0xf40>)
 8002816:	edc3 7a02 	vstr	s15, [r3, #8]
		//term_print("%s() - I3 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I3], sample_buf_meta[ADC_CH_I3].min, sample_buf_meta[ADC_CH_I3].max);
		if (i_measured[I3] >= I3_MIN) {		// Reading above min current?
 800281a:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <calc_measurements+0xf40>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd feb2 	bl	8000588 <__aeabi_f2d>
 8002824:	a348      	add	r3, pc, #288	; (adr r3, 8002948 <calc_measurements+0xf38>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fe f98b 	bl	8000b44 <__aeabi_dcmpge>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8099 	beq.w	8002968 <calc_measurements+0xf58>
			if (i3_va_acc > 0) { va = i3_va_acc / num_readings; }
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002842:	f7fe f989 	bl	8000b58 <__aeabi_dcmpgt>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <calc_measurements+0xe64>
 800284c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe87 	bl	8000564 <__aeabi_i2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800285e:	f7fe f815 	bl	800088c <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f9dd 	bl	8000c28 <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i3_w_acc > 0) { w = i3_w_acc / num_readings; }
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002880:	f7fe f96a 	bl	8000b58 <__aeabi_dcmpgt>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d013      	beq.n	80028b2 <calc_measurements+0xea2>
 800288a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe68 	bl	8000564 <__aeabi_i2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800289c:	f7fd fff6 	bl	800088c <__aeabi_ddiv>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f9be 	bl	8000c28 <__aeabi_d2f>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I3] = v_measured * i_measured[I3];
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <calc_measurements+0xf40>)
 80028b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <calc_measurements+0xf44>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <calc_measurements+0xf48>)
 80028c4:	edc3 7a02 	vstr	s15, [r3, #8]
			if (w > 0) { w_measured[I3] = va - w; }
 80028c8:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	dd09      	ble.n	80028ea <calc_measurements+0xeda>
 80028d6:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80028da:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <calc_measurements+0xf4c>)
 80028e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80028e8:	e003      	b.n	80028f2 <calc_measurements+0xee2>
			else { w_measured[I3] = va_measured[I3]; }
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <calc_measurements+0xf48>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <calc_measurements+0xf4c>)
 80028f0:	6093      	str	r3, [r2, #8]
			if (w_measured[I3] > va_measured[I3]) w_measured[I3] = va_measured[I3];		// W must be =< than VA
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <calc_measurements+0xf4c>)
 80028f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <calc_measurements+0xf48>)
 80028fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	dd03      	ble.n	8002910 <calc_measurements+0xf00>
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <calc_measurements+0xf48>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a13      	ldr	r2, [pc, #76]	; (800295c <calc_measurements+0xf4c>)
 800290e:	6093      	str	r3, [r2, #8]
			if (i_measured[I3] >= I3_MIN_PF) { pf_measured[I3] = w_measured[I3] / va_measured[I3]; }	// Calculate PF if we have sufficient current
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <calc_measurements+0xf40>)
 8002912:	edd3 7a02 	vldr	s15, [r3, #8]
 8002916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800291a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	db0a      	blt.n	800293a <calc_measurements+0xf2a>
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <calc_measurements+0xf4c>)
 8002926:	edd3 6a02 	vldr	s13, [r3, #8]
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <calc_measurements+0xf48>)
 800292c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <calc_measurements+0xf50>)
 8002936:	edc3 7a02 	vstr	s15, [r3, #8]
			sample_buf_meta[ADC_CH_I3].measurements_valid = 1;
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <calc_measurements+0xf54>)
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2020 	strb.w	r2, [r3, #32]
 8002942:	e01d      	b.n	8002980 <calc_measurements+0xf70>
 8002944:	f3af 8000 	nop.w
 8002948:	33333333 	.word	0x33333333
 800294c:	3fd33333 	.word	0x3fd33333
 8002950:	200003fc 	.word	0x200003fc
 8002954:	200003f8 	.word	0x200003f8
 8002958:	20000408 	.word	0x20000408
 800295c:	20000414 	.word	0x20000414
 8002960:	20000420 	.word	0x20000420
 8002964:	2000026c 	.word	0x2000026c
		} else {
			//term_print("%s() - I3 = %fA below minimum\r\n", __FUNCTION__, i_measured[I3]);
			i_measured[I3] = 0.0; va_measured[I3] = 0.0; w_measured[I3] = 0.0;
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <calc_measurements+0x101c>)
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <calc_measurements+0x1020>)
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <calc_measurements+0x1024>)
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
		}
	}

	// add measurements to filter
	calc_filter_add_v(v_measured);
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <calc_measurements+0x1028>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	f7fe feb3 	bl	80016f4 <calc_filter_add_v>
	calc_filter_add_i(I1, i_measured[I1], va_measured[I1], w_measured[I1], pf_measured[I1]);
 800298e:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <calc_measurements+0x101c>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <calc_measurements+0x1020>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <calc_measurements+0x1024>)
 800299c:	edd3 6a00 	vldr	s13, [r3]
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <calc_measurements+0x102c>)
 80029a2:	ed93 6a00 	vldr	s12, [r3]
 80029a6:	eef0 1a46 	vmov.f32	s3, s12
 80029aa:	eeb0 1a66 	vmov.f32	s2, s13
 80029ae:	eef0 0a47 	vmov.f32	s1, s14
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fee2 	bl	8001780 <calc_filter_add_i>
	calc_filter_add_i(I2, i_measured[I2], va_measured[I2], w_measured[I2], pf_measured[I2]);
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <calc_measurements+0x101c>)
 80029be:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <calc_measurements+0x1020>)
 80029c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <calc_measurements+0x1024>)
 80029ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <calc_measurements+0x102c>)
 80029d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80029d4:	eef0 1a46 	vmov.f32	s3, s12
 80029d8:	eeb0 1a66 	vmov.f32	s2, s13
 80029dc:	eef0 0a47 	vmov.f32	s1, s14
 80029e0:	eeb0 0a67 	vmov.f32	s0, s15
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe fecb 	bl	8001780 <calc_filter_add_i>
	calc_filter_add_i(I3, i_measured[I3], va_measured[I3], w_measured[I3], pf_measured[I3]);
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <calc_measurements+0x101c>)
 80029ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <calc_measurements+0x1020>)
 80029f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <calc_measurements+0x1024>)
 80029f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <calc_measurements+0x102c>)
 80029fe:	ed93 6a02 	vldr	s12, [r3, #8]
 8002a02:	eef0 1a46 	vmov.f32	s3, s12
 8002a06:	eeb0 1a66 	vmov.f32	s2, s13
 8002a0a:	eef0 0a47 	vmov.f32	s1, s14
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	2002      	movs	r0, #2
 8002a14:	f7fe feb4 	bl	8001780 <calc_filter_add_i>
	//calc_assign_meter_values(display_channel);

	return 0;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8002a20:	46bd      	mov	sp, r7
 8002a22:	ecbd 8b02 	vpop	{d8}
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200003fc 	.word	0x200003fc
 8002a30:	20000408 	.word	0x20000408
 8002a34:	20000414 	.word	0x20000414
 8002a38:	200003f8 	.word	0x200003f8
 8002a3c:	20000420 	.word	0x20000420

08002a40 <calc_update_energy_totals>:

/*
 * @brief    Update the energy totals with the latest readings. To be called every 100ms.
 */
void calc_update_energy_totals() {
 8002a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
	const uint8_t acc_max = 50;		// * 100ms, must divide into 36000
 8002a48:	2332      	movs	r3, #50	; 0x32
 8002a4a:	73fb      	strb	r3, [r7, #15]
	double divisor = 36000.0 / (double) acc_max;		// accumulator totals per hour
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd78 	bl	8000544 <__aeabi_ui2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	a195      	add	r1, pc, #596	; (adr r1, 8002cb0 <calc_update_energy_totals+0x270>)
 8002a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a5e:	f7fd ff15 	bl	800088c <__aeabi_ddiv>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	e9c7 2300 	strd	r2, r3, [r7]

	for (int i=0; i<NUM_I_SENSORS; i++) {	// every 100ms
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e03a      	b.n	8002ae6 <calc_update_energy_totals+0xa6>
		accumulator_vah[i] += (double)va_filtered[i];
 8002a70:	4a85      	ldr	r2, [pc, #532]	; (8002c88 <calc_update_energy_totals+0x248>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a7c:	4a83      	ldr	r2, [pc, #524]	; (8002c8c <calc_update_energy_totals+0x24c>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd7e 	bl	8000588 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fd fc1a 	bl	80002cc <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	487a      	ldr	r0, [pc, #488]	; (8002c88 <calc_update_energy_totals+0x248>)
 8002a9e:	6979      	ldr	r1, [r7, #20]
 8002aa0:	00c9      	lsls	r1, r1, #3
 8002aa2:	4401      	add	r1, r0
 8002aa4:	e9c1 2300 	strd	r2, r3, [r1]
		accumulator_wh[i] += (double)w_filtered[i];
 8002aa8:	4a79      	ldr	r2, [pc, #484]	; (8002c90 <calc_update_energy_totals+0x250>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ab4:	4a77      	ldr	r2, [pc, #476]	; (8002c94 <calc_update_energy_totals+0x254>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd62 	bl	8000588 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fd fbfe 	bl	80002cc <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	486e      	ldr	r0, [pc, #440]	; (8002c90 <calc_update_energy_totals+0x250>)
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	00c9      	lsls	r1, r1, #3
 8002ada:	4401      	add	r1, r0
 8002adc:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i=0; i<NUM_I_SENSORS; i++) {	// every 100ms
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	ddc1      	ble.n	8002a70 <calc_update_energy_totals+0x30>
	}
	accumulator_count++;
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <calc_update_energy_totals+0x258>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <calc_update_energy_totals+0x258>)
 8002af6:	701a      	strb	r2, [r3, #0]
	if (accumulator_count >= acc_max) {		// once a second
 8002af8:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <calc_update_energy_totals+0x258>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	f200 80bb 	bhi.w	8002c7a <calc_update_energy_totals+0x23a>
		for (int i=0; i<NUM_I_SENSORS; i++) {
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e0b0      	b.n	8002c6c <calc_update_energy_totals+0x22c>
			// update precision values
			total_precision_vah[i] += accumulator_vah[i] / (double)accumulator_count / divisor;
 8002b0a:	4a64      	ldr	r2, [pc, #400]	; (8002c9c <calc_update_energy_totals+0x25c>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b16:	4a5c      	ldr	r2, [pc, #368]	; (8002c88 <calc_update_energy_totals+0x248>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <calc_update_energy_totals+0x258>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fd0c 	bl	8000544 <__aeabi_ui2d>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4640      	mov	r0, r8
 8002b32:	4649      	mov	r1, r9
 8002b34:	f7fd feaa 	bl	800088c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b44:	f7fd fea2 	bl	800088c <__aeabi_ddiv>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd fbbc 	bl	80002cc <__adddf3>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4850      	ldr	r0, [pc, #320]	; (8002c9c <calc_update_energy_totals+0x25c>)
 8002b5a:	6939      	ldr	r1, [r7, #16]
 8002b5c:	00c9      	lsls	r1, r1, #3
 8002b5e:	4401      	add	r1, r0
 8002b60:	e9c1 2300 	strd	r2, r3, [r1]
			total_precision_wh[i] += accumulator_wh[i] / (double)accumulator_count / divisor;
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <calc_update_energy_totals+0x260>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b70:	4a47      	ldr	r2, [pc, #284]	; (8002c90 <calc_update_energy_totals+0x250>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <calc_update_energy_totals+0x258>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fcdf 	bl	8000544 <__aeabi_ui2d>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	f7fd fe7d 	bl	800088c <__aeabi_ddiv>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b9e:	f7fd fe75 	bl	800088c <__aeabi_ddiv>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fb8f 	bl	80002cc <__adddf3>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	483b      	ldr	r0, [pc, #236]	; (8002ca0 <calc_update_energy_totals+0x260>)
 8002bb4:	6939      	ldr	r1, [r7, #16]
 8002bb6:	00c9      	lsls	r1, r1, #3
 8002bb8:	4401      	add	r1, r0
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
			accumulator_vah[i] = 0.0;
 8002bbe:	4a32      	ldr	r2, [pc, #200]	; (8002c88 <calc_update_energy_totals+0x248>)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	18d1      	adds	r1, r2, r3
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9c1 2300 	strd	r2, r3, [r1]
			accumulator_wh[i] = 0.0;
 8002bd2:	4a2f      	ldr	r2, [pc, #188]	; (8002c90 <calc_update_energy_totals+0x250>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	18d1      	adds	r1, r2, r3
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9c1 2300 	strd	r2, r3, [r1]
			// update integer values
			total_vah[i] = round(total_precision_vah[i] * 10);
 8002be6:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <calc_update_energy_totals+0x25c>)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <calc_update_energy_totals+0x264>)
 8002bf8:	f7fd fd1e 	bl	8000638 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	ec43 2b17 	vmov	d7, r2, r3
 8002c04:	eeb0 0a47 	vmov.f32	s0, s14
 8002c08:	eef0 0a67 	vmov.f32	s1, s15
 8002c0c:	f010 fbec 	bl	80133e8 <round>
 8002c10:	ec53 2b10 	vmov	r2, r3, d0
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fd ffe6 	bl	8000be8 <__aeabi_d2uiz>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4922      	ldr	r1, [pc, #136]	; (8002ca8 <calc_update_energy_totals+0x268>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			total_wh[i] = round(total_precision_wh[i] * 10);
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <calc_update_energy_totals+0x260>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <calc_update_energy_totals+0x264>)
 8002c38:	f7fd fcfe 	bl	8000638 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	ec43 2b17 	vmov	d7, r2, r3
 8002c44:	eeb0 0a47 	vmov.f32	s0, s14
 8002c48:	eef0 0a67 	vmov.f32	s1, s15
 8002c4c:	f010 fbcc 	bl	80133e8 <round>
 8002c50:	ec53 2b10 	vmov	r2, r3, d0
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd ffc6 	bl	8000be8 <__aeabi_d2uiz>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4913      	ldr	r1, [pc, #76]	; (8002cac <calc_update_energy_totals+0x26c>)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i=0; i<NUM_I_SENSORS; i++) {
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f77f af4b 	ble.w	8002b0a <calc_update_energy_totals+0xca>
		}
		accumulator_count = 0;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <calc_update_energy_totals+0x258>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
	}

}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c84:	f3af 8000 	nop.w
 8002c88:	20000430 	.word	0x20000430
 8002c8c:	200003d4 	.word	0x200003d4
 8002c90:	20000448 	.word	0x20000448
 8002c94:	200003e0 	.word	0x200003e0
 8002c98:	20000460 	.word	0x20000460
 8002c9c:	20008220 	.word	0x20008220
 8002ca0:	20008238 	.word	0x20008238
 8002ca4:	40240000 	.word	0x40240000
 8002ca8:	20008250 	.word	0x20008250
 8002cac:	2000825c 	.word	0x2000825c
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40e19400 	.word	0x40e19400

08002cb8 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f816 	bl	8002cf8 <calc_adc_raw_to_mv_float>
 8002ccc:	ee10 3a10 	vmov	r3, s0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc59 	bl	8000588 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	ec43 2b10 	vmov	d0, r2, r3
 8002cde:	f010 fb83 	bl	80133e8 <round>
 8002ce2:	ec53 2b10 	vmov	r2, r3, d0
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff55 	bl	8000b98 <__aeabi_d2iz>
 8002cee:	4603      	mov	r3, r0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8002d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002d2c <calc_adc_raw_to_mv_float+0x34>
 8002d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002d30 <calc_adc_raw_to_mv_float+0x38>
 8002d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	457ff000 	.word	0x457ff000
 8002d30:	454e4000 	.word	0x454e4000

08002d34 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002d68 <calc_adc_raw_to_V+0x34>
 8002d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d52:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002d6c <calc_adc_raw_to_V+0x38>
 8002d56:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	457ff000 	.word	0x457ff000
 8002d6c:	44434000 	.word	0x44434000

08002d70 <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8002d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d86:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002da4 <calc_adc_raw_to_A+0x34>
 8002d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002da8 <calc_adc_raw_to_A+0x38>
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	457ff000 	.word	0x457ff000
 8002da8:	43620000 	.word	0x43620000

08002dac <cmd_error>:
extern uint32_t total_vah[];
extern uint32_t total_wh[];

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <cmd_error+0x18>)
 8002db8:	f003 ff72 	bl	8006ca0 <term_print>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	08013518 	.word	0x08013518

08002dc8 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b30      	cmp	r3, #48	; 0x30
 8002dd8:	d002      	beq.n	8002de0 <cmd_t+0x18>
 8002dda:	2b31      	cmp	r3, #49	; 0x31
 8002ddc:	d005      	beq.n	8002dea <cmd_t+0x22>
 8002dde:	e009      	b.n	8002df4 <cmd_t+0x2c>
	case '0':
		tft_display = 1;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <cmd_t+0x3c>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
		return 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e006      	b.n	8002df8 <cmd_t+0x30>
		break;
	case '1':
		tft_display = 2;
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <cmd_t+0x3c>)
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]
		return 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e001      	b.n	8002df8 <cmd_t+0x30>
		break;
	}
	return -1;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	20002601 	.word	0x20002601

08002e08 <cmd_z>:


// adjust energy integration timer period
int cmd_z(uint8_t* cmd_str) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	f107 0208 	add.w	r2, r7, #8
 8002e18:	4909      	ldr	r1, [pc, #36]	; (8002e40 <cmd_z+0x38>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f00d f888 	bl	800ff30 <siscanf>
 8002e20:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d002      	beq.n	8002e2e <cmd_z+0x26>
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e2c:	e004      	b.n	8002e38 <cmd_z+0x30>
	new_energy_time_period = value;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <cmd_z+0x3c>)
 8002e34:	801a      	strh	r2, [r3, #0]
	return 0;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	08013530 	.word	0x08013530
 8002e44:	20002606 	.word	0x20002606

08002e48 <cmd_p>:

// adjust ADC timer period
int cmd_p(uint8_t* cmd_str) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3301      	adds	r3, #1
 8002e54:	f107 0208 	add.w	r2, r7, #8
 8002e58:	4909      	ldr	r1, [pc, #36]	; (8002e80 <cmd_p+0x38>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00d f868 	bl	800ff30 <siscanf>
 8002e60:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d002      	beq.n	8002e6e <cmd_p+0x26>
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6c:	e004      	b.n	8002e78 <cmd_p+0x30>
	new_time_period = value;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <cmd_p+0x3c>)
 8002e74:	801a      	strh	r2, [r3, #0]
	return 0;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	08013530 	.word	0x08013530
 8002e84:	20002604 	.word	0x20002604

08002e88 <cmd_a>:


int cmd_a(uint8_t* cmd_str) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3301      	adds	r3, #1
 8002e94:	f107 0208 	add.w	r2, r7, #8
 8002e98:	4909      	ldr	r1, [pc, #36]	; (8002ec0 <cmd_a+0x38>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f00d f848 	bl	800ff30 <siscanf>
 8002ea0:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <cmd_a+0x26>
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eac:	e004      	b.n	8002eb8 <cmd_a+0x30>
	modbus_addr_change = value;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <cmd_a+0x3c>)
 8002eb4:	701a      	strb	r2, [r3, #0]
	return 0;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	08013530 	.word	0x08013530
 8002ec4:	20002603 	.word	0x20002603

08002ec8 <cmd_led>:

int cmd_led(int cmd) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	dd05      	ble.n	8002ee2 <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2120      	movs	r1, #32
 8002eda:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <cmd_led+0x30>)
 8002edc:	f008 f968 	bl	800b1b0 <HAL_GPIO_WritePin>
 8002ee0:	e004      	b.n	8002eec <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <cmd_led+0x30>)
 8002ee8:	f008 f962 	bl	800b1b0 <HAL_GPIO_WritePin>
	}
	return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40020000 	.word	0x40020000

08002efc <cmd_g>:

int cmd_g() {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af02      	add	r7, sp, #8
	for (int i=0; i<NUM_I_SENSORS; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	e024      	b.n	8002f52 <cmd_g+0x56>
		term_print("VAh[%d] = %u [1/10 VAh] %.2f\r\n", i, total_vah[i], total_precision_vah[i]);
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <cmd_g+0x68>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f10:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <cmd_g+0x6c>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	e9cd 2300 	strd	r2, r3, [sp]
 8002f20:	460a      	mov	r2, r1
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <cmd_g+0x70>)
 8002f26:	f003 febb 	bl	8006ca0 <term_print>
		term_print(" Wh[%d] = %u [1/10 Wh] %.2f\r\n", i, total_wh[i],  total_precision_wh[i]);
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <cmd_g+0x74>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f32:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <cmd_g+0x78>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f42:	460a      	mov	r2, r1
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <cmd_g+0x7c>)
 8002f48:	f003 feaa 	bl	8006ca0 <term_print>
	for (int i=0; i<NUM_I_SENSORS; i++) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	ddd7      	ble.n	8002f08 <cmd_g+0xc>
	}
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20008250 	.word	0x20008250
 8002f68:	20008220 	.word	0x20008220
 8002f6c:	08013534 	.word	0x08013534
 8002f70:	2000825c 	.word	0x2000825c
 8002f74:	20008238 	.word	0x20008238
 8002f78:	08013554 	.word	0x08013554

08002f7c <cmd_help>:

int cmd_help(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002f80:	4816      	ldr	r0, [pc, #88]	; (8002fdc <cmd_help+0x60>)
 8002f82:	f003 fe8d 	bl	8006ca0 <term_print>
	term_print("A[1..255]: Set new Modbus Address (EEPROM)\r\n");
 8002f86:	4816      	ldr	r0, [pc, #88]	; (8002fe0 <cmd_help+0x64>)
 8002f88:	f003 fe8a 	bl	8006ca0 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002f8c:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <cmd_help+0x68>)
 8002f8e:	f003 fe87 	bl	8006ca0 <term_print>
	term_print("E: Toggle ESP mode\r\n");
 8002f92:	4815      	ldr	r0, [pc, #84]	; (8002fe8 <cmd_help+0x6c>)
 8002f94:	f003 fe84 	bl	8006ca0 <term_print>
	term_print("G: Show Energy readings\r\n");
 8002f98:	4814      	ldr	r0, [pc, #80]	; (8002fec <cmd_help+0x70>)
 8002f9a:	f003 fe81 	bl	8006ca0 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002f9e:	4814      	ldr	r0, [pc, #80]	; (8002ff0 <cmd_help+0x74>)
 8002fa0:	f003 fe7e 	bl	8006ca0 <term_print>
	term_print("M show measurements using all channels\r\n");
 8002fa4:	4813      	ldr	r0, [pc, #76]	; (8002ff4 <cmd_help+0x78>)
 8002fa6:	f003 fe7b 	bl	8006ca0 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002faa:	4813      	ldr	r0, [pc, #76]	; (8002ff8 <cmd_help+0x7c>)
 8002fac:	f003 fe78 	bl	8006ca0 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time (EEPROM)\r\n");
 8002fb0:	4812      	ldr	r0, [pc, #72]	; (8002ffc <cmd_help+0x80>)
 8002fb2:	f003 fe75 	bl	8006ca0 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002fb6:	4812      	ldr	r0, [pc, #72]	; (8003000 <cmd_help+0x84>)
 8002fb8:	f003 fe72 	bl	8006ca0 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002fbc:	4811      	ldr	r0, [pc, #68]	; (8003004 <cmd_help+0x88>)
 8002fbe:	f003 fe6f 	bl	8006ca0 <term_print>
	term_print("T[0|1]: TFT display OFF / ON\r\n");
 8002fc2:	4811      	ldr	r0, [pc, #68]	; (8003008 <cmd_help+0x8c>)
 8002fc4:	f003 fe6c 	bl	8006ca0 <term_print>
	term_print("Y: Reset all energy totals (VA, W) to zero\r\n");
 8002fc8:	4810      	ldr	r0, [pc, #64]	; (800300c <cmd_help+0x90>)
 8002fca:	f003 fe69 	bl	8006ca0 <term_print>
	term_print("Z[500..1500]: adjust energy integration timer (200ms) [EEPROM]\r\n");
 8002fce:	4810      	ldr	r0, [pc, #64]	; (8003010 <cmd_help+0x94>)
 8002fd0:	f003 fe66 	bl	8006ca0 <term_print>
	return 0;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	08013574 	.word	0x08013574
 8002fe0:	08013588 	.word	0x08013588
 8002fe4:	080135b8 	.word	0x080135b8
 8002fe8:	080135f0 	.word	0x080135f0
 8002fec:	08013608 	.word	0x08013608
 8002ff0:	08013624 	.word	0x08013624
 8002ff4:	08013640 	.word	0x08013640
 8002ff8:	0801366c 	.word	0x0801366c
 8002ffc:	080136b4 	.word	0x080136b4
 8003000:	080136f4 	.word	0x080136f4
 8003004:	08013710 	.word	0x08013710
 8003008:	08013750 	.word	0x08013750
 800300c:	08013770 	.word	0x08013770
 8003010:	080137a0 	.word	0x080137a0

08003014 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003020:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	3b3f      	subs	r3, #63	; 0x3f
 8003028:	2b3b      	cmp	r3, #59	; 0x3b
 800302a:	f200 80e3 	bhi.w	80031f4 <cmd_process+0x1e0>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <cmd_process+0x20>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	080031db 	.word	0x080031db
 8003038:	080031f5 	.word	0x080031f5
 800303c:	08003125 	.word	0x08003125
 8003040:	080031f5 	.word	0x080031f5
 8003044:	0800312f 	.word	0x0800312f
 8003048:	080031f5 	.word	0x080031f5
 800304c:	08003145 	.word	0x08003145
 8003050:	080031f5 	.word	0x080031f5
 8003054:	08003163 	.word	0x08003163
 8003058:	080031db 	.word	0x080031db
 800305c:	080031f5 	.word	0x080031f5
 8003060:	080031f5 	.word	0x080031f5
 8003064:	080031f5 	.word	0x080031f5
 8003068:	0800316b 	.word	0x0800316b
 800306c:	0800317d 	.word	0x0800317d
 8003070:	080031f5 	.word	0x080031f5
 8003074:	080031f5 	.word	0x080031f5
 8003078:	080031a5 	.word	0x080031a5
 800307c:	080031f5 	.word	0x080031f5
 8003080:	080031af 	.word	0x080031af
 8003084:	080031bb 	.word	0x080031bb
 8003088:	080031d1 	.word	0x080031d1
 800308c:	080031f5 	.word	0x080031f5
 8003090:	080031f5 	.word	0x080031f5
 8003094:	080031f5 	.word	0x080031f5
 8003098:	080031f5 	.word	0x080031f5
 800309c:	080031e1 	.word	0x080031e1
 80030a0:	080031eb 	.word	0x080031eb
 80030a4:	080031f5 	.word	0x080031f5
 80030a8:	080031f5 	.word	0x080031f5
 80030ac:	080031f5 	.word	0x080031f5
 80030b0:	080031f5 	.word	0x080031f5
 80030b4:	080031f5 	.word	0x080031f5
 80030b8:	080031f5 	.word	0x080031f5
 80030bc:	08003125 	.word	0x08003125
 80030c0:	080031f5 	.word	0x080031f5
 80030c4:	0800312f 	.word	0x0800312f
 80030c8:	080031f5 	.word	0x080031f5
 80030cc:	08003145 	.word	0x08003145
 80030d0:	080031f5 	.word	0x080031f5
 80030d4:	08003163 	.word	0x08003163
 80030d8:	080031db 	.word	0x080031db
 80030dc:	080031f5 	.word	0x080031f5
 80030e0:	080031f5 	.word	0x080031f5
 80030e4:	080031f5 	.word	0x080031f5
 80030e8:	0800316b 	.word	0x0800316b
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	080031f5 	.word	0x080031f5
 80030f4:	080031f5 	.word	0x080031f5
 80030f8:	080031a5 	.word	0x080031a5
 80030fc:	080031f5 	.word	0x080031f5
 8003100:	080031af 	.word	0x080031af
 8003104:	080031bb 	.word	0x080031bb
 8003108:	080031d1 	.word	0x080031d1
 800310c:	080031f5 	.word	0x080031f5
 8003110:	080031f5 	.word	0x080031f5
 8003114:	080031f5 	.word	0x080031f5
 8003118:	080031f5 	.word	0x080031f5
 800311c:	080031e1 	.word	0x080031e1
 8003120:	080031eb 	.word	0x080031eb
	case 'A':
	case 'a':
		retval = cmd_a(cmd_str);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff feaf 	bl	8002e88 <cmd_a>
 800312a:	60f8      	str	r0, [r7, #12]
		break;
 800312c:	e062      	b.n	80031f4 <cmd_process+0x1e0>
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3301      	adds	r3, #1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3b31      	subs	r3, #49	; 0x31
 8003136:	b2db      	uxtb	r3, r3
 8003138:	4618      	mov	r0, r3
 800313a:	f004 f807 	bl	800714c <term_csv_buffer>
		retval = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
		break;
 8003142:	e057      	b.n	80031f4 <cmd_process+0x1e0>
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <cmd_process+0x1ec>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <cmd_process+0x140>
 800314c:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <cmd_process+0x1ec>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 8003152:	e04f      	b.n	80031f4 <cmd_process+0x1e0>
			esp_mode = 1;
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <cmd_process+0x1ec>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 800315a:	482a      	ldr	r0, [pc, #168]	; (8003204 <cmd_process+0x1f0>)
 800315c:	f003 fda0 	bl	8006ca0 <term_print>
		break;
 8003160:	e048      	b.n	80031f4 <cmd_process+0x1e0>
	case 'G':
	case 'g':
		retval = cmd_g();
 8003162:	f7ff fecb 	bl	8002efc <cmd_g>
 8003166:	60f8      	str	r0, [r7, #12]
		break;
 8003168:	e044      	b.n	80031f4 <cmd_process+0x1e0>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3301      	adds	r3, #1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	3b2f      	subs	r3, #47	; 0x2f
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fea8 	bl	8002ec8 <cmd_led>
 8003178:	60f8      	str	r0, [r7, #12]
		break;
 800317a:	e03b      	b.n	80031f4 <cmd_process+0x1e0>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd f897 	bl	80002b0 <strlen>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d908      	bls.n	800319a <cmd_process+0x186>
		    term_show_channel(cmd_str[1] - 0x31);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3301      	adds	r3, #1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	3b31      	subs	r3, #49	; 0x31
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f003 ff1a 	bl	8006fcc <term_show_channel>
 8003198:	e001      	b.n	800319e <cmd_process+0x18a>
		} else {
			term_show_measurements();
 800319a:	f003 fe35 	bl	8006e08 <term_show_measurements>
		}
		retval = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
		break;
 80031a2:	e027      	b.n	80031f4 <cmd_process+0x1e0>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe4f 	bl	8002e48 <cmd_p>
 80031aa:	60f8      	str	r0, [r7, #12]
		break;
 80031ac:	e022      	b.n	80031f4 <cmd_process+0x1e0>
	case 'R':
	case 'r':
		adc_restart = 1;
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <cmd_process+0x1f4>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
		break;
 80031b8:	e01c      	b.n	80031f4 <cmd_process+0x1e0>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	3b31      	subs	r3, #49	; 0x31
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fdc7 	bl	8006d58 <term_show_buffer>
		retval = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
		break;
 80031ce:	e011      	b.n	80031f4 <cmd_process+0x1e0>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fdf9 	bl	8002dc8 <cmd_t>
 80031d6:	60f8      	str	r0, [r7, #12]
		break;
 80031d8:	e00c      	b.n	80031f4 <cmd_process+0x1e0>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80031da:	f7ff fecf 	bl	8002f7c <cmd_help>
 80031de:	60f8      	str	r0, [r7, #12]
	case 'Y':
	case 'y':
		retval = energy_totals_init(1);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f001 fef9 	bl	8004fd8 <energy_totals_init>
 80031e6:	60f8      	str	r0, [r7, #12]
		break;
 80031e8:	e004      	b.n	80031f4 <cmd_process+0x1e0>
	case 'Z':
	case 'z':
		retval = cmd_z(cmd_str);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fe0c 	bl	8002e08 <cmd_z>
 80031f0:	60f8      	str	r0, [r7, #12]
		break;
 80031f2:	bf00      	nop

	}
	return retval;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20002602 	.word	0x20002602
 8003204:	080137e4 	.word	0x080137e4
 8003208:	20002600 	.word	0x20002600

0800320c <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd f84b 	bl	80002b0 <strlen>
 800321a:	4603      	mov	r3, r0
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <CMD_Handler+0x3c>)
 8003220:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <CMD_Handler+0x3c>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fdbe 	bl	8002dac <cmd_error>
		return -1;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003234:	e003      	b.n	800323e <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff feec 	bl	8003014 <cmd_process>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000461 	.word	0x20000461

0800324c <display_init>:
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;

void display_meter_mask(uint8_t clear);

void display_init() {
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 8003250:	2302      	movs	r3, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f004 fd2a 	bl	8007cac <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 8003258:	2302      	movs	r3, #2
 800325a:	2b01      	cmp	r3, #1
 800325c:	d002      	beq.n	8003264 <display_init+0x18>
 800325e:	2302      	movs	r3, #2
 8003260:	2b03      	cmp	r3, #3
 8003262:	d107      	bne.n	8003274 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <display_init+0x3c>)
 8003266:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800326a:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <display_init+0x40>)
 800326e:	22f0      	movs	r2, #240	; 0xf0
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e007      	b.n	8003284 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <display_init+0x40>)
 8003276:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800327a:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <display_init+0x3c>)
 800327e:	22f0      	movs	r2, #240	; 0xf0
 8003280:	801a      	strh	r2, [r3, #0]
	}
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200020d2 	.word	0x200020d2
 800328c:	200020d4 	.word	0x200020d4

08003290 <display_splash_screen>:

void display_splash_screen() {
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	b087      	sub	sp, #28
 8003294:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8003296:	2000      	movs	r0, #0
 8003298:	f004 ff5e 	bl	8008158 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 800329c:	2302      	movs	r3, #2
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <display_splash_screen+0xe4>)
 80032a6:	4a34      	ldr	r2, [pc, #208]	; (8003378 <display_splash_screen+0xe8>)
 80032a8:	2120      	movs	r1, #32
 80032aa:	4834      	ldr	r0, [pc, #208]	; (800337c <display_splash_screen+0xec>)
 80032ac:	f00c fde0 	bl	800fe70 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <display_splash_screen+0xf0>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	461c      	mov	r4, r3
 80032b6:	4831      	ldr	r0, [pc, #196]	; (800337c <display_splash_screen+0xec>)
 80032b8:	f7fc fffa 	bl	80002b0 <strlen>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a31      	ldr	r2, [pc, #196]	; (8003384 <display_splash_screen+0xf4>)
 80032c0:	8892      	ldrh	r2, [r2, #4]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	1ae3      	subs	r3, r4, r3
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	b29c      	uxth	r4, r3
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <display_splash_screen+0xf8>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <display_splash_screen+0xf4>)
 80032d4:	88db      	ldrh	r3, [r3, #6]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	0fda      	lsrs	r2, r3, #31
 80032da:	4413      	add	r3, r2
 80032dc:	105b      	asrs	r3, r3, #1
 80032de:	b29d      	uxth	r5, r3
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <display_splash_screen+0xf4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	9204      	str	r2, [sp, #16]
 80032e6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	9202      	str	r2, [sp, #8]
 80032f0:	466e      	mov	r6, sp
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f8:	e886 0003 	stmia.w	r6, {r0, r1}
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1f      	ldr	r2, [pc, #124]	; (800337c <display_splash_screen+0xec>)
 8003300:	4629      	mov	r1, r5
 8003302:	4620      	mov	r0, r4
 8003304:	f005 fe9a 	bl	800903c <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <display_splash_screen+0xf0>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	461c      	mov	r4, r3
 800330e:	481f      	ldr	r0, [pc, #124]	; (800338c <display_splash_screen+0xfc>)
 8003310:	f7fc ffce 	bl	80002b0 <strlen>
 8003314:	4603      	mov	r3, r0
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <display_splash_screen+0x100>)
 8003318:	8892      	ldrh	r2, [r2, #4]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	1ae3      	subs	r3, r4, r3
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	b29c      	uxth	r4, r3
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <display_splash_screen+0xf8>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <display_splash_screen+0xf4>)
 800332c:	88db      	ldrh	r3, [r3, #6]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	0fda      	lsrs	r2, r3, #31
 8003332:	4413      	add	r3, r2
 8003334:	105b      	asrs	r3, r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	3319      	adds	r3, #25
 800333a:	b29d      	uxth	r5, r3
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <display_splash_screen+0x100>)
 800333e:	2200      	movs	r2, #0
 8003340:	9204      	str	r2, [sp, #16]
 8003342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003346:	9203      	str	r2, [sp, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	466e      	mov	r6, sp
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003354:	e886 0003 	stmia.w	r6, {r0, r1}
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <display_splash_screen+0xfc>)
 800335c:	4629      	mov	r1, r5
 800335e:	4620      	mov	r0, r4
 8003360:	f005 fe6c 	bl	800903c <Displ_WString>

	Displ_BackLight('1');
 8003364:	2031      	movs	r0, #49	; 0x31
 8003366:	f005 fea9 	bl	80090bc <Displ_BackLight>
}
 800336a:	bf00      	nop
 800336c:	3704      	adds	r7, #4
 800336e:	46bd      	mov	sp, r7
 8003370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003372:	bf00      	nop
 8003374:	08019000 	.word	0x08019000
 8003378:	0801380c 	.word	0x0801380c
 800337c:	200020b0 	.word	0x200020b0
 8003380:	200020d2 	.word	0x200020d2
 8003384:	20000024 	.word	0x20000024
 8003388:	200020d4 	.word	0x200020d4
 800338c:	08019004 	.word	0x08019004
 8003390:	2000000c 	.word	0x2000000c

08003394 <display_channel_detail>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// channel detail screen
void display_channel_detail() {
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af06      	add	r7, sp, #24
	uint16_t font_col = channel_colour[display_channel+1];
 800339a:	4b98      	ldr	r3, [pc, #608]	; (80035fc <display_channel_detail+0x268>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a97      	ldr	r2, [pc, #604]	; (8003600 <display_channel_detail+0x26c>)
 80033a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a6:	80fb      	strh	r3, [r7, #6]
	if (!meter_readings_invalid) {
 80033a8:	4b96      	ldr	r3, [pc, #600]	; (8003604 <display_channel_detail+0x270>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 80bd 	bne.w	800352c <display_channel_detail+0x198>
		// V
		snprintf(str,sizeof(str),"%3.0f", v_filtered);
 80033b2:	4b95      	ldr	r3, [pc, #596]	; (8003608 <display_channel_detail+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8e6 	bl	8000588 <__aeabi_f2d>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	e9cd 2300 	strd	r2, r3, [sp]
 80033c4:	4a91      	ldr	r2, [pc, #580]	; (800360c <display_channel_detail+0x278>)
 80033c6:	2120      	movs	r1, #32
 80033c8:	4891      	ldr	r0, [pc, #580]	; (8003610 <display_channel_detail+0x27c>)
 80033ca:	f00c fd51 	bl	800fe70 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, channel_colour[0], BLACK);
 80033ce:	4b8c      	ldr	r3, [pc, #560]	; (8003600 <display_channel_detail+0x26c>)
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	4b90      	ldr	r3, [pc, #576]	; (8003614 <display_channel_detail+0x280>)
 80033d4:	2100      	movs	r1, #0
 80033d6:	9104      	str	r1, [sp, #16]
 80033d8:	9203      	str	r2, [sp, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	9202      	str	r2, [sp, #8]
 80033de:	466c      	mov	r4, sp
 80033e0:	1d1a      	adds	r2, r3, #4
 80033e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a88      	ldr	r2, [pc, #544]	; (8003610 <display_channel_detail+0x27c>)
 80033ee:	2107      	movs	r1, #7
 80033f0:	2009      	movs	r0, #9
 80033f2:	f005 fe23 	bl	800903c <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", i_filtered[display_channel]);
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <display_channel_detail+0x268>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4a87      	ldr	r2, [pc, #540]	; (8003618 <display_channel_detail+0x284>)
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd f8c0 	bl	8000588 <__aeabi_f2d>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	e9cd 2300 	strd	r2, r3, [sp]
 8003410:	4a82      	ldr	r2, [pc, #520]	; (800361c <display_channel_detail+0x288>)
 8003412:	2120      	movs	r1, #32
 8003414:	487e      	ldr	r0, [pc, #504]	; (8003610 <display_channel_detail+0x27c>)
 8003416:	f00c fd2b 	bl	800fe70 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, font_col, BLACK);
 800341a:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <display_channel_detail+0x280>)
 800341c:	2200      	movs	r2, #0
 800341e:	9204      	str	r2, [sp, #16]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	9203      	str	r2, [sp, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	9202      	str	r2, [sp, #8]
 8003428:	466c      	mov	r4, sp
 800342a:	1d1a      	adds	r2, r3, #4
 800342c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003430:	e884 0003 	stmia.w	r4, {r0, r1}
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a76      	ldr	r2, [pc, #472]	; (8003610 <display_channel_detail+0x27c>)
 8003438:	2107      	movs	r1, #7
 800343a:	2078      	movs	r0, #120	; 0x78
 800343c:	f005 fdfe 	bl	800903c <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", va_filtered[display_channel] );
 8003440:	4b6e      	ldr	r3, [pc, #440]	; (80035fc <display_channel_detail+0x268>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4a76      	ldr	r2, [pc, #472]	; (8003620 <display_channel_detail+0x28c>)
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f89b 	bl	8000588 <__aeabi_f2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	e9cd 2300 	strd	r2, r3, [sp]
 800345a:	4a72      	ldr	r2, [pc, #456]	; (8003624 <display_channel_detail+0x290>)
 800345c:	2120      	movs	r1, #32
 800345e:	486c      	ldr	r0, [pc, #432]	; (8003610 <display_channel_detail+0x27c>)
 8003460:	f00c fd06 	bl	800fe70 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1,  font_col, BLACK);
 8003464:	4b6b      	ldr	r3, [pc, #428]	; (8003614 <display_channel_detail+0x280>)
 8003466:	2200      	movs	r2, #0
 8003468:	9204      	str	r2, [sp, #16]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	9203      	str	r2, [sp, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	9202      	str	r2, [sp, #8]
 8003472:	466c      	mov	r4, sp
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800347a:	e884 0003 	stmia.w	r4, {r0, r1}
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a63      	ldr	r2, [pc, #396]	; (8003610 <display_channel_detail+0x27c>)
 8003482:	2130      	movs	r1, #48	; 0x30
 8003484:	2009      	movs	r0, #9
 8003486:	f005 fdd9 	bl	800903c <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", w_filtered[display_channel] );
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <display_channel_detail+0x268>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4a66      	ldr	r2, [pc, #408]	; (8003628 <display_channel_detail+0x294>)
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f876 	bl	8000588 <__aeabi_f2d>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	e9cd 2300 	strd	r2, r3, [sp]
 80034a4:	4a5f      	ldr	r2, [pc, #380]	; (8003624 <display_channel_detail+0x290>)
 80034a6:	2120      	movs	r1, #32
 80034a8:	4859      	ldr	r0, [pc, #356]	; (8003610 <display_channel_detail+0x27c>)
 80034aa:	f00c fce1 	bl	800fe70 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1,  font_col, BLACK);
 80034ae:	4b59      	ldr	r3, [pc, #356]	; (8003614 <display_channel_detail+0x280>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	9204      	str	r2, [sp, #16]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	9203      	str	r2, [sp, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	9202      	str	r2, [sp, #8]
 80034bc:	466c      	mov	r4, sp
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a51      	ldr	r2, [pc, #324]	; (8003610 <display_channel_detail+0x27c>)
 80034cc:	2159      	movs	r1, #89	; 0x59
 80034ce:	2009      	movs	r0, #9
 80034d0:	f005 fdb4 	bl	800903c <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[display_channel]) );
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <display_channel_detail+0x268>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4a54      	ldr	r2, [pc, #336]	; (800362c <display_channel_detail+0x298>)
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	eef0 7ae7 	vabs.f32	s15, s15
 80034e6:	ee17 0a90 	vmov	r0, s15
 80034ea:	f7fd f84d 	bl	8000588 <__aeabi_f2d>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	e9cd 2300 	strd	r2, r3, [sp]
 80034f6:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <display_channel_detail+0x29c>)
 80034f8:	2120      	movs	r1, #32
 80034fa:	4845      	ldr	r0, [pc, #276]	; (8003610 <display_channel_detail+0x27c>)
 80034fc:	f00c fcb8 	bl	800fe70 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1,  font_col, BLACK);
 8003500:	4b44      	ldr	r3, [pc, #272]	; (8003614 <display_channel_detail+0x280>)
 8003502:	2200      	movs	r2, #0
 8003504:	9204      	str	r2, [sp, #16]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	9203      	str	r2, [sp, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	9202      	str	r2, [sp, #8]
 800350e:	466c      	mov	r4, sp
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003516:	e884 0003 	stmia.w	r4, {r0, r1}
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <display_channel_detail+0x27c>)
 800351e:	2182      	movs	r1, #130	; 0x82
 8003520:	2009      	movs	r0, #9
 8003522:	f005 fd8b 	bl	800903c <Displ_WString>
		} else {
			snprintf(str,sizeof(str)," 0.0");
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
		*/
		display_show_curves();
 8003526:	f001 fa4f 	bl	80049c8 <display_show_curves>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
		//Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
		}

}
 800352a:	e063      	b.n	80035f4 <display_channel_detail+0x260>
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 800352c:	4b39      	ldr	r3, [pc, #228]	; (8003614 <display_channel_detail+0x280>)
 800352e:	2200      	movs	r2, #0
 8003530:	9204      	str	r2, [sp, #16]
 8003532:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003536:	9203      	str	r2, [sp, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	9202      	str	r2, [sp, #8]
 800353c:	466c      	mov	r4, sp
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003544:	e884 0003 	stmia.w	r4, {r0, r1}
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3a      	ldr	r2, [pc, #232]	; (8003634 <display_channel_detail+0x2a0>)
 800354c:	2107      	movs	r1, #7
 800354e:	2009      	movs	r0, #9
 8003550:	f005 fd74 	bl	800903c <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <display_channel_detail+0x280>)
 8003556:	2200      	movs	r2, #0
 8003558:	9204      	str	r2, [sp, #16]
 800355a:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800355e:	9203      	str	r2, [sp, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	9202      	str	r2, [sp, #8]
 8003564:	466c      	mov	r4, sp
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800356c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a31      	ldr	r2, [pc, #196]	; (8003638 <display_channel_detail+0x2a4>)
 8003574:	2107      	movs	r1, #7
 8003576:	2078      	movs	r0, #120	; 0x78
 8003578:	f005 fd60 	bl	800903c <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <display_channel_detail+0x280>)
 800357e:	2200      	movs	r2, #0
 8003580:	9204      	str	r2, [sp, #16]
 8003582:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003586:	9203      	str	r2, [sp, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	9202      	str	r2, [sp, #8]
 800358c:	466c      	mov	r4, sp
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003594:	e884 0003 	stmia.w	r4, {r0, r1}
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a28      	ldr	r2, [pc, #160]	; (800363c <display_channel_detail+0x2a8>)
 800359c:	2130      	movs	r1, #48	; 0x30
 800359e:	2009      	movs	r0, #9
 80035a0:	f005 fd4c 	bl	800903c <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <display_channel_detail+0x280>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	9204      	str	r2, [sp, #16]
 80035aa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80035ae:	9203      	str	r2, [sp, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	9202      	str	r2, [sp, #8]
 80035b4:	466c      	mov	r4, sp
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <display_channel_detail+0x2a8>)
 80035c4:	2159      	movs	r1, #89	; 0x59
 80035c6:	2009      	movs	r0, #9
 80035c8:	f005 fd38 	bl	800903c <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <display_channel_detail+0x280>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	9204      	str	r2, [sp, #16]
 80035d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d6:	9203      	str	r2, [sp, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	9202      	str	r2, [sp, #8]
 80035dc:	466c      	mov	r4, sp
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <display_channel_detail+0x2ac>)
 80035ec:	2182      	movs	r1, #130	; 0x82
 80035ee:	2009      	movs	r0, #9
 80035f0:	f005 fd24 	bl	800903c <Displ_WString>
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	20000462 	.word	0x20000462
 8003600:	20000000 	.word	0x20000000
 8003604:	200002bc 	.word	0x200002bc
 8003608:	200003c4 	.word	0x200003c4
 800360c:	08013828 	.word	0x08013828
 8003610:	200020b0 	.word	0x200020b0
 8003614:	20000030 	.word	0x20000030
 8003618:	200003c8 	.word	0x200003c8
 800361c:	08013830 	.word	0x08013830
 8003620:	200003d4 	.word	0x200003d4
 8003624:	08013838 	.word	0x08013838
 8003628:	200003e0 	.word	0x200003e0
 800362c:	200003ec 	.word	0x200003ec
 8003630:	08013840 	.word	0x08013840
 8003634:	08013848 	.word	0x08013848
 8003638:	0801384c 	.word	0x0801384c
 800363c:	08013854 	.word	0x08013854
 8003640:	0801385c 	.word	0x0801385c

08003644 <display_usage>:

/*
 * @brief      Display "Usage" page
 * @para mask  1=display Usage mask, 0=display values
 */
void display_usage(uint8_t mask) {
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b092      	sub	sp, #72	; 0x48
 8003648:	af06      	add	r7, sp, #24
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
	int font_col = channel_colour[0];
 800364e:	4b64      	ldr	r3, [pc, #400]	; (80037e0 <display_usage+0x19c>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
	int ypos = 10;
 8003654:	230a      	movs	r3, #10
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
	int xpos = 20;
 8003658:	2314      	movs	r3, #20
 800365a:	623b      	str	r3, [r7, #32]
	int line_space = -2;
 800365c:	f06f 0301 	mvn.w	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
	int section_space = 5;
 8003662:	2305      	movs	r3, #5
 8003664:	61bb      	str	r3, [r7, #24]
	sFONT font = Font24;
 8003666:	4a5f      	ldr	r2, [pc, #380]	; (80037e4 <display_usage+0x1a0>)
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	ca07      	ldmia	r2, {r0, r1, r2}
 800366e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Create page mask
	if (mask != 0) {
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80c1 	beq.w	80037fc <display_usage+0x1b8>
		xpos += 8*font.Width;
 800367a:	8a3b      	ldrh	r3, [r7, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	4413      	add	r3, r2
 8003682:	623b      	str	r3, [r7, #32]
		Displ_WString(xpos, ypos, "V", font, 1,  font_col, BLACK);
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	b29c      	uxth	r4, r3
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	b29d      	uxth	r5, r3
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	b29b      	uxth	r3, r3
 8003690:	2200      	movs	r2, #0
 8003692:	9204      	str	r2, [sp, #16]
 8003694:	9303      	str	r3, [sp, #12]
 8003696:	2301      	movs	r3, #1
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	466a      	mov	r2, sp
 800369c:	f107 0310 	add.w	r3, r7, #16
 80036a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <display_usage+0x1a4>)
 80036ac:	4629      	mov	r1, r5
 80036ae:	4620      	mov	r0, r4
 80036b0:	f005 fcc4 	bl	800903c <Displ_WString>
		ypos += section_space+line_space + font.Height;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	8a7a      	ldrh	r2, [r7, #18]
 80036bc:	4413      	add	r3, r2
 80036be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c0:	4413      	add	r3, r2
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (int i=0; i<NUM_I_SENSORS; i++) {
 80036c4:	2300      	movs	r3, #0
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c8:	e085      	b.n	80037d6 <display_usage+0x192>
			font_col = channel_colour[i+1];
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a44      	ldr	r2, [pc, #272]	; (80037e0 <display_usage+0x19c>)
 80036d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
			Displ_WString(xpos , ypos, "A" , font, 1,  font_col, BLACK);
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	b29c      	uxth	r4, r3
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	b29d      	uxth	r5, r3
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2200      	movs	r2, #0
 80036e4:	9204      	str	r2, [sp, #16]
 80036e6:	9303      	str	r3, [sp, #12]
 80036e8:	2301      	movs	r3, #1
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	466a      	mov	r2, sp
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a3b      	ldr	r2, [pc, #236]	; (80037ec <display_usage+0x1a8>)
 80036fe:	4629      	mov	r1, r5
 8003700:	4620      	mov	r0, r4
 8003702:	f005 fc9b 	bl	800903c <Displ_WString>
			ypos += line_space + font.Height;
 8003706:	8a7b      	ldrh	r3, [r7, #18]
 8003708:	461a      	mov	r2, r3
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003710:	4413      	add	r3, r2
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "VA" , font, 1,  font_col, BLACK);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	b29c      	uxth	r4, r3
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	b29d      	uxth	r5, r3
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	b29b      	uxth	r3, r3
 8003720:	2200      	movs	r2, #0
 8003722:	9204      	str	r2, [sp, #16]
 8003724:	9303      	str	r3, [sp, #12]
 8003726:	2301      	movs	r3, #1
 8003728:	9302      	str	r3, [sp, #8]
 800372a:	466a      	mov	r2, sp
 800372c:	f107 0310 	add.w	r3, r7, #16
 8003730:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003734:	e882 0003 	stmia.w	r2, {r0, r1}
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <display_usage+0x1ac>)
 800373c:	4629      	mov	r1, r5
 800373e:	4620      	mov	r0, r4
 8003740:	f005 fc7c 	bl	800903c <Displ_WString>
			ypos += line_space + font.Height;
 8003744:	8a7b      	ldrh	r3, [r7, #18]
 8003746:	461a      	mov	r2, r3
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "W" , font, 1,  font_col, BLACK);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	b29c      	uxth	r4, r3
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	b29d      	uxth	r5, r3
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	b29b      	uxth	r3, r3
 800375e:	2200      	movs	r2, #0
 8003760:	9204      	str	r2, [sp, #16]
 8003762:	9303      	str	r3, [sp, #12]
 8003764:	2301      	movs	r3, #1
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	466a      	mov	r2, sp
 800376a:	f107 0310 	add.w	r3, r7, #16
 800376e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003772:	e882 0003 	stmia.w	r2, {r0, r1}
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <display_usage+0x1b0>)
 800377a:	4629      	mov	r1, r5
 800377c:	4620      	mov	r0, r4
 800377e:	f005 fc5d 	bl	800903c <Displ_WString>
			ypos += line_space + font.Height;
 8003782:	8a7b      	ldrh	r3, [r7, #18]
 8003784:	461a      	mov	r2, r3
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378c:	4413      	add	r3, r2
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "PF" , font, 1,  font_col, BLACK);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	b29c      	uxth	r4, r3
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	b29d      	uxth	r5, r3
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	b29b      	uxth	r3, r3
 800379c:	2200      	movs	r2, #0
 800379e:	9204      	str	r2, [sp, #16]
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	2301      	movs	r3, #1
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	466a      	mov	r2, sp
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <display_usage+0x1b4>)
 80037b8:	4629      	mov	r1, r5
 80037ba:	4620      	mov	r0, r4
 80037bc:	f005 fc3e 	bl	800903c <Displ_WString>
			ypos += section_space+line_space + font.Height;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	8a7a      	ldrh	r2, [r7, #18]
 80037c8:	4413      	add	r3, r2
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	4413      	add	r3, r2
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i=0; i<NUM_I_SENSORS; i++) {
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	3301      	adds	r3, #1
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f77f af76 	ble.w	80036ca <display_usage+0x86>
		}
		return;
 80037de:	e2ad      	b.n	8003d3c <display_usage+0x6f8>
 80037e0:	20000000 	.word	0x20000000
 80037e4:	20000024 	.word	0x20000024
 80037e8:	08013864 	.word	0x08013864
 80037ec:	08013868 	.word	0x08013868
 80037f0:	0801386c 	.word	0x0801386c
 80037f4:	08013870 	.word	0x08013870
 80037f8:	08013874 	.word	0x08013874
	}

	snprintf(str,sizeof(str),"%3.0f", v_filtered);
 80037fc:	4baa      	ldr	r3, [pc, #680]	; (8003aa8 <display_usage+0x464>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fec1 	bl	8000588 <__aeabi_f2d>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	e9cd 2300 	strd	r2, r3, [sp]
 800380e:	4aa7      	ldr	r2, [pc, #668]	; (8003aac <display_usage+0x468>)
 8003810:	2120      	movs	r1, #32
 8003812:	48a7      	ldr	r0, [pc, #668]	; (8003ab0 <display_usage+0x46c>)
 8003814:	f00c fb2c 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+4*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003818:	8a3b      	ldrh	r3, [r7, #16]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	b29a      	uxth	r2, r3
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	b29b      	uxth	r3, r3
 8003822:	4413      	add	r3, r2
 8003824:	b29c      	uxth	r4, r3
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	b29d      	uxth	r5, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	b29b      	uxth	r3, r3
 800382e:	2200      	movs	r2, #0
 8003830:	9204      	str	r2, [sp, #16]
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	2301      	movs	r3, #1
 8003836:	9302      	str	r3, [sp, #8]
 8003838:	466a      	mov	r2, sp
 800383a:	f107 0310 	add.w	r3, r7, #16
 800383e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003842:	e882 0003 	stmia.w	r2, {r0, r1}
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a99      	ldr	r2, [pc, #612]	; (8003ab0 <display_usage+0x46c>)
 800384a:	4629      	mov	r1, r5
 800384c:	4620      	mov	r0, r4
 800384e:	f005 fbf5 	bl	800903c <Displ_WString>
	ypos += section_space+line_space + font.Height;
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	8a7a      	ldrh	r2, [r7, #18]
 800385a:	4413      	add	r3, r2
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	4413      	add	r3, r2
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I1+1];
 8003862:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <display_usage+0x470>)
 8003864:	885b      	ldrh	r3, [r3, #2]
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I1]);
 8003868:	4b93      	ldr	r3, [pc, #588]	; (8003ab8 <display_usage+0x474>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fe8b 	bl	8000588 <__aeabi_f2d>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	e9cd 2300 	strd	r2, r3, [sp]
 800387a:	4a90      	ldr	r2, [pc, #576]	; (8003abc <display_usage+0x478>)
 800387c:	2120      	movs	r1, #32
 800387e:	488c      	ldr	r0, [pc, #560]	; (8003ab0 <display_usage+0x46c>)
 8003880:	f00c faf6 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+3*font.Width , ypos, str , font, 1,  font_col, BLACK);
 8003884:	8a3b      	ldrh	r3, [r7, #16]
 8003886:	461a      	mov	r2, r3
 8003888:	0052      	lsls	r2, r2, #1
 800388a:	4413      	add	r3, r2
 800388c:	b29a      	uxth	r2, r3
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	b29b      	uxth	r3, r3
 8003892:	4413      	add	r3, r2
 8003894:	b29c      	uxth	r4, r3
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	b29d      	uxth	r5, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	b29b      	uxth	r3, r3
 800389e:	2200      	movs	r2, #0
 80038a0:	9204      	str	r2, [sp, #16]
 80038a2:	9303      	str	r3, [sp, #12]
 80038a4:	2301      	movs	r3, #1
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	466a      	mov	r2, sp
 80038aa:	f107 0310 	add.w	r3, r7, #16
 80038ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038b2:	e882 0003 	stmia.w	r2, {r0, r1}
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a7d      	ldr	r2, [pc, #500]	; (8003ab0 <display_usage+0x46c>)
 80038ba:	4629      	mov	r1, r5
 80038bc:	4620      	mov	r0, r4
 80038be:	f005 fbbd 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 80038c2:	8a7b      	ldrh	r3, [r7, #18]
 80038c4:	461a      	mov	r2, r3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038cc:	4413      	add	r3, r2
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I1]);
 80038d0:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <display_usage+0x47c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe57 	bl	8000588 <__aeabi_f2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	e9cd 2300 	strd	r2, r3, [sp]
 80038e2:	4a78      	ldr	r2, [pc, #480]	; (8003ac4 <display_usage+0x480>)
 80038e4:	2120      	movs	r1, #32
 80038e6:	4872      	ldr	r0, [pc, #456]	; (8003ab0 <display_usage+0x46c>)
 80038e8:	f00c fac2 	bl	800fe70 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	b29c      	uxth	r4, r3
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	b29d      	uxth	r5, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2200      	movs	r2, #0
 80038fa:	9204      	str	r2, [sp, #16]
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	2301      	movs	r3, #1
 8003900:	9302      	str	r3, [sp, #8]
 8003902:	466a      	mov	r2, sp
 8003904:	f107 0310 	add.w	r3, r7, #16
 8003908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800390c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <display_usage+0x46c>)
 8003914:	4629      	mov	r1, r5
 8003916:	4620      	mov	r0, r4
 8003918:	f005 fb90 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 800391c:	8a7b      	ldrh	r3, [r7, #18]
 800391e:	461a      	mov	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003926:	4413      	add	r3, r2
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I1]);
 800392a:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <display_usage+0x484>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe2a 	bl	8000588 <__aeabi_f2d>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	e9cd 2300 	strd	r2, r3, [sp]
 800393c:	4a61      	ldr	r2, [pc, #388]	; (8003ac4 <display_usage+0x480>)
 800393e:	2120      	movs	r1, #32
 8003940:	485b      	ldr	r0, [pc, #364]	; (8003ab0 <display_usage+0x46c>)
 8003942:	f00c fa95 	bl	800fe70 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	b29c      	uxth	r4, r3
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	b29d      	uxth	r5, r3
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	b29b      	uxth	r3, r3
 8003952:	2200      	movs	r2, #0
 8003954:	9204      	str	r2, [sp, #16]
 8003956:	9303      	str	r3, [sp, #12]
 8003958:	2301      	movs	r3, #1
 800395a:	9302      	str	r3, [sp, #8]
 800395c:	466a      	mov	r2, sp
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003966:	e882 0003 	stmia.w	r2, {r0, r1}
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a50      	ldr	r2, [pc, #320]	; (8003ab0 <display_usage+0x46c>)
 800396e:	4629      	mov	r1, r5
 8003970:	4620      	mov	r0, r4
 8003972:	f005 fb63 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003976:	8a7b      	ldrh	r3, [r7, #18]
 8003978:	461a      	mov	r2, r3
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	4413      	add	r3, r2
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I1]) );
 8003984:	4b51      	ldr	r3, [pc, #324]	; (8003acc <display_usage+0x488>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	eef0 7ae7 	vabs.f32	s15, s15
 800398e:	ee17 0a90 	vmov	r0, s15
 8003992:	f7fc fdf9 	bl	8000588 <__aeabi_f2d>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	e9cd 2300 	strd	r2, r3, [sp]
 800399e:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <display_usage+0x48c>)
 80039a0:	2120      	movs	r1, #32
 80039a2:	4843      	ldr	r0, [pc, #268]	; (8003ab0 <display_usage+0x46c>)
 80039a4:	f00c fa64 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 80039a8:	8a3b      	ldrh	r3, [r7, #16]
 80039aa:	461a      	mov	r2, r3
 80039ac:	0052      	lsls	r2, r2, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	b29c      	uxth	r4, r3
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	b29d      	uxth	r5, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	9204      	str	r2, [sp, #16]
 80039c6:	9303      	str	r3, [sp, #12]
 80039c8:	2301      	movs	r3, #1
 80039ca:	9302      	str	r3, [sp, #8]
 80039cc:	466a      	mov	r2, sp
 80039ce:	f107 0310 	add.w	r3, r7, #16
 80039d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <display_usage+0x46c>)
 80039de:	4629      	mov	r1, r5
 80039e0:	4620      	mov	r0, r4
 80039e2:	f005 fb2b 	bl	800903c <Displ_WString>
	ypos += section_space+line_space + font.Height;
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	8a7a      	ldrh	r2, [r7, #18]
 80039ee:	4413      	add	r3, r2
 80039f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f2:	4413      	add	r3, r2
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I2+1];
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <display_usage+0x470>)
 80039f8:	889b      	ldrh	r3, [r3, #4]
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I2]);
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <display_usage+0x474>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fc fdc1 	bl	8000588 <__aeabi_f2d>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a0e:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <display_usage+0x478>)
 8003a10:	2120      	movs	r1, #32
 8003a12:	4827      	ldr	r0, [pc, #156]	; (8003ab0 <display_usage+0x46c>)
 8003a14:	f00c fa2c 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003a18:	8a3b      	ldrh	r3, [r7, #16]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	0052      	lsls	r2, r2, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	b29c      	uxth	r4, r3
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	b29d      	uxth	r5, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	9204      	str	r2, [sp, #16]
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	2301      	movs	r3, #1
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	466a      	mov	r2, sp
 8003a3e:	f107 0310 	add.w	r3, r7, #16
 8003a42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a46:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <display_usage+0x46c>)
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4620      	mov	r0, r4
 8003a52:	f005 faf3 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003a56:	8a7b      	ldrh	r3, [r7, #18]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a60:	4413      	add	r3, r2
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I2]);
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <display_usage+0x47c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fd8d 	bl	8000588 <__aeabi_f2d>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	e9cd 2300 	strd	r2, r3, [sp]
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <display_usage+0x480>)
 8003a78:	2120      	movs	r1, #32
 8003a7a:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <display_usage+0x46c>)
 8003a7c:	f00c f9f8 	bl	800fe70 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	b29c      	uxth	r4, r3
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	b29d      	uxth	r5, r3
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	9204      	str	r2, [sp, #16]
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	2301      	movs	r3, #1
 8003a94:	9302      	str	r3, [sp, #8]
 8003a96:	466a      	mov	r2, sp
 8003a98:	f107 0310 	add.w	r3, r7, #16
 8003a9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aa0:	e882 0003 	stmia.w	r2, {r0, r1}
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	e015      	b.n	8003ad4 <display_usage+0x490>
 8003aa8:	200003c4 	.word	0x200003c4
 8003aac:	08013828 	.word	0x08013828
 8003ab0:	200020b0 	.word	0x200020b0
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	200003c8 	.word	0x200003c8
 8003abc:	08013830 	.word	0x08013830
 8003ac0:	200003d4 	.word	0x200003d4
 8003ac4:	08013838 	.word	0x08013838
 8003ac8:	200003e0 	.word	0x200003e0
 8003acc:	200003ec 	.word	0x200003ec
 8003ad0:	08013840 	.word	0x08013840
 8003ad4:	4a9b      	ldr	r2, [pc, #620]	; (8003d44 <display_usage+0x700>)
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f005 faaf 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003ade:	8a7b      	ldrh	r3, [r7, #18]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae8:	4413      	add	r3, r2
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I2]);
 8003aec:	4b96      	ldr	r3, [pc, #600]	; (8003d48 <display_usage+0x704>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fd49 	bl	8000588 <__aeabi_f2d>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	e9cd 2300 	strd	r2, r3, [sp]
 8003afe:	4a93      	ldr	r2, [pc, #588]	; (8003d4c <display_usage+0x708>)
 8003b00:	2120      	movs	r1, #32
 8003b02:	4890      	ldr	r0, [pc, #576]	; (8003d44 <display_usage+0x700>)
 8003b04:	f00c f9b4 	bl	800fe70 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	b29c      	uxth	r4, r3
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	b29d      	uxth	r5, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2200      	movs	r2, #0
 8003b16:	9204      	str	r2, [sp, #16]
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	466a      	mov	r2, sp
 8003b20:	f107 0310 	add.w	r3, r7, #16
 8003b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b28:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a85      	ldr	r2, [pc, #532]	; (8003d44 <display_usage+0x700>)
 8003b30:	4629      	mov	r1, r5
 8003b32:	4620      	mov	r0, r4
 8003b34:	f005 fa82 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003b38:	8a7b      	ldrh	r3, [r7, #18]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	4413      	add	r3, r2
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I2]) );
 8003b46:	4b82      	ldr	r3, [pc, #520]	; (8003d50 <display_usage+0x70c>)
 8003b48:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b4c:	eef0 7ae7 	vabs.f32	s15, s15
 8003b50:	ee17 0a90 	vmov	r0, s15
 8003b54:	f7fc fd18 	bl	8000588 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b60:	4a7c      	ldr	r2, [pc, #496]	; (8003d54 <display_usage+0x710>)
 8003b62:	2120      	movs	r1, #32
 8003b64:	4877      	ldr	r0, [pc, #476]	; (8003d44 <display_usage+0x700>)
 8003b66:	f00c f983 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003b6a:	8a3b      	ldrh	r3, [r7, #16]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	0052      	lsls	r2, r2, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	b29c      	uxth	r4, r3
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	b29d      	uxth	r5, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	9204      	str	r2, [sp, #16]
 8003b88:	9303      	str	r3, [sp, #12]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	466a      	mov	r2, sp
 8003b90:	f107 0310 	add.w	r3, r7, #16
 8003b94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b98:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a69      	ldr	r2, [pc, #420]	; (8003d44 <display_usage+0x700>)
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f005 fa4a 	bl	800903c <Displ_WString>
	ypos += section_space+line_space + font.Height;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	8a7a      	ldrh	r2, [r7, #18]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb4:	4413      	add	r3, r2
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I3+1];
 8003bb8:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <display_usage+0x714>)
 8003bba:	88db      	ldrh	r3, [r3, #6]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I3]);
 8003bbe:	4b67      	ldr	r3, [pc, #412]	; (8003d5c <display_usage+0x718>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fc fce0 	bl	8000588 <__aeabi_f2d>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	e9cd 2300 	strd	r2, r3, [sp]
 8003bd0:	4a63      	ldr	r2, [pc, #396]	; (8003d60 <display_usage+0x71c>)
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	485b      	ldr	r0, [pc, #364]	; (8003d44 <display_usage+0x700>)
 8003bd6:	f00c f94b 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003bda:	8a3b      	ldrh	r3, [r7, #16]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	0052      	lsls	r2, r2, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	b29c      	uxth	r4, r3
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	b29d      	uxth	r5, r3
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	9204      	str	r2, [sp, #16]
 8003bf8:	9303      	str	r3, [sp, #12]
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	466a      	mov	r2, sp
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c08:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <display_usage+0x700>)
 8003c10:	4629      	mov	r1, r5
 8003c12:	4620      	mov	r0, r4
 8003c14:	f005 fa12 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003c18:	8a7b      	ldrh	r3, [r7, #18]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c22:	4413      	add	r3, r2
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I3]);
 8003c26:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <display_usage+0x720>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fcac 	bl	8000588 <__aeabi_f2d>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	e9cd 2300 	strd	r2, r3, [sp]
 8003c38:	4a44      	ldr	r2, [pc, #272]	; (8003d4c <display_usage+0x708>)
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	4841      	ldr	r0, [pc, #260]	; (8003d44 <display_usage+0x700>)
 8003c3e:	f00c f917 	bl	800fe70 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	b29c      	uxth	r4, r3
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	b29d      	uxth	r5, r3
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	9204      	str	r2, [sp, #16]
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	2301      	movs	r3, #1
 8003c56:	9302      	str	r3, [sp, #8]
 8003c58:	466a      	mov	r2, sp
 8003c5a:	f107 0310 	add.w	r3, r7, #16
 8003c5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c62:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a36      	ldr	r2, [pc, #216]	; (8003d44 <display_usage+0x700>)
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f005 f9e5 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003c72:	8a7b      	ldrh	r3, [r7, #18]
 8003c74:	461a      	mov	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7c:	4413      	add	r3, r2
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I3]);
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <display_usage+0x704>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fc7f 	bl	8000588 <__aeabi_f2d>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	e9cd 2300 	strd	r2, r3, [sp]
 8003c92:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <display_usage+0x708>)
 8003c94:	2120      	movs	r1, #32
 8003c96:	482b      	ldr	r0, [pc, #172]	; (8003d44 <display_usage+0x700>)
 8003c98:	f00c f8ea 	bl	800fe70 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	b29c      	uxth	r4, r3
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	b29d      	uxth	r5, r3
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2200      	movs	r2, #0
 8003caa:	9204      	str	r2, [sp, #16]
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	466a      	mov	r2, sp
 8003cb4:	f107 0310 	add.w	r3, r7, #16
 8003cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003cbc:	e882 0003 	stmia.w	r2, {r0, r1}
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <display_usage+0x700>)
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f005 f9b8 	bl	800903c <Displ_WString>
	ypos += line_space + font.Height;
 8003ccc:	8a7b      	ldrh	r3, [r7, #18]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd6:	4413      	add	r3, r2
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I3]) );
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <display_usage+0x70c>)
 8003cdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ce0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ce4:	ee17 0a90 	vmov	r0, s15
 8003ce8:	f7fc fc4e 	bl	8000588 <__aeabi_f2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	e9cd 2300 	strd	r2, r3, [sp]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <display_usage+0x710>)
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	4812      	ldr	r0, [pc, #72]	; (8003d44 <display_usage+0x700>)
 8003cfa:	f00c f8b9 	bl	800fe70 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003cfe:	8a3b      	ldrh	r3, [r7, #16]
 8003d00:	461a      	mov	r2, r3
 8003d02:	0052      	lsls	r2, r2, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	b29c      	uxth	r4, r3
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	b29d      	uxth	r5, r3
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	9204      	str	r2, [sp, #16]
 8003d1c:	9303      	str	r3, [sp, #12]
 8003d1e:	2301      	movs	r3, #1
 8003d20:	9302      	str	r3, [sp, #8]
 8003d22:	466a      	mov	r2, sp
 8003d24:	f107 0310 	add.w	r3, r7, #16
 8003d28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <display_usage+0x700>)
 8003d34:	4629      	mov	r1, r5
 8003d36:	4620      	mov	r0, r4
 8003d38:	f005 f980 	bl	800903c <Displ_WString>
	//ypos += section_space+line_space + font.Height;


}
 8003d3c:	3730      	adds	r7, #48	; 0x30
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200020b0 	.word	0x200020b0
 8003d48:	200003e0 	.word	0x200003e0
 8003d4c:	08013838 	.word	0x08013838
 8003d50:	200003ec 	.word	0x200003ec
 8003d54:	08013840 	.word	0x08013840
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	200003c8 	.word	0x200003c8
 8003d60:	08013830 	.word	0x08013830
 8003d64:	200003d4 	.word	0x200003d4

08003d68 <display_debug>:

void display_debug() {
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af06      	add	r7, sp, #24
	int font_col = WHITE;
 8003d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d72:	607b      	str	r3, [r7, #4]
#ifdef DEBUG
	snprintf(str,sizeof(str),"Calc: %lums", calc_ticks);
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <display_debug+0x74>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <display_debug+0x78>)
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	4819      	ldr	r0, [pc, #100]	; (8003de4 <display_debug+0x7c>)
 8003d7e:	f00c f877 	bl	800fe70 <sniprintf>
	Displ_WString(20, 20, str , Font24, 1,  font_col, BLACK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <display_debug+0x80>)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	9104      	str	r1, [sp, #16]
 8003d8c:	9203      	str	r2, [sp, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	9202      	str	r2, [sp, #8]
 8003d92:	466c      	mov	r4, sp
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <display_debug+0x7c>)
 8003da2:	2114      	movs	r1, #20
 8003da4:	2014      	movs	r0, #20
 8003da6:	f005 f949 	bl	800903c <Displ_WString>
#ifdef USE_WIFI
	Displ_WString(20, 40, ip_addr_str, Font20, 1, font_col, BLACK);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <display_debug+0x84>)
 8003db0:	2100      	movs	r1, #0
 8003db2:	9104      	str	r1, [sp, #16]
 8003db4:	9203      	str	r2, [sp, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	9202      	str	r2, [sp, #8]
 8003dba:	466c      	mov	r4, sp
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <display_debug+0x88>)
 8003dca:	2128      	movs	r1, #40	; 0x28
 8003dcc:	2014      	movs	r0, #20
 8003dce:	f005 f935 	bl	800903c <Displ_WString>
#endif
#endif
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000826c 	.word	0x2000826c
 8003de0:	08013878 	.word	0x08013878
 8003de4:	200020b0 	.word	0x200020b0
 8003de8:	20000024 	.word	0x20000024
 8003dec:	20000018 	.word	0x20000018
 8003df0:	20000044 	.word	0x20000044

08003df4 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <display_update_meter+0xb4>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	79fa      	ldrb	r2, [r7, #7]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d034      	beq.n	8003e72 <display_update_meter+0x7e>
		switch(screen) {
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d82d      	bhi.n	8003e6c <display_update_meter+0x78>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <display_update_meter+0x24>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e2d 	.word	0x08003e2d
 8003e1c:	08003e3b 	.word	0x08003e3b
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e65 	.word	0x08003e65
		case 1:
			//meter_readings_invalid = 1;
			display_channel = I1;
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <display_update_meter+0xb8>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
			display_meter_mask(1);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f000 f848 	bl	8003ec8 <display_meter_mask>
			break;
 8003e38:	e018      	b.n	8003e6c <display_update_meter+0x78>
		case 2:
			//meter_readings_invalid = 1;
			display_channel = I2;
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <display_update_meter+0xb8>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
			display_meter_mask(0);
 8003e40:	2000      	movs	r0, #0
 8003e42:	f000 f841 	bl	8003ec8 <display_meter_mask>
			break;
 8003e46:	e011      	b.n	8003e6c <display_update_meter+0x78>
		case 3:
			//meter_readings_invalid = 1;
			display_channel = I3;
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <display_update_meter+0xb8>)
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
			display_meter_mask(0);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f000 f83a 	bl	8003ec8 <display_meter_mask>
			break;
 8003e54:	e00a      	b.n	8003e6c <display_update_meter+0x78>
		case 4:
			Displ_CLS(BLACK);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f004 f97e 	bl	8008158 <Displ_CLS>
			display_usage(1);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7ff fbf1 	bl	8003644 <display_usage>
			break;
 8003e62:	e003      	b.n	8003e6c <display_update_meter+0x78>
		case 5:
			Displ_CLS(BLACK);
 8003e64:	2000      	movs	r0, #0
 8003e66:	f004 f977 	bl	8008158 <Displ_CLS>
			break;
 8003e6a:	bf00      	nop
		}
		last_screen = screen;
 8003e6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <display_update_meter+0xb4>)
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d010      	beq.n	8003e9a <display_update_meter+0xa6>
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	dc11      	bgt.n	8003ea0 <display_update_meter+0xac>
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	dc02      	bgt.n	8003e86 <display_update_meter+0x92>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	dc03      	bgt.n	8003e8c <display_update_meter+0x98>
		break;
	case 5:
		display_debug();
		break;
	}
}
 8003e84:	e00c      	b.n	8003ea0 <display_update_meter+0xac>
	switch(screen) {
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d003      	beq.n	8003e92 <display_update_meter+0x9e>
}
 8003e8a:	e009      	b.n	8003ea0 <display_update_meter+0xac>
		display_channel_detail();
 8003e8c:	f7ff fa82 	bl	8003394 <display_channel_detail>
		break;
 8003e90:	e006      	b.n	8003ea0 <display_update_meter+0xac>
		display_usage(0);
 8003e92:	2000      	movs	r0, #0
 8003e94:	f7ff fbd6 	bl	8003644 <display_usage>
		break;
 8003e98:	e002      	b.n	8003ea0 <display_update_meter+0xac>
		display_debug();
 8003e9a:	f7ff ff65 	bl	8003d68 <display_debug>
		break;
 8003e9e:	bf00      	nop
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200020d0 	.word	0x200020d0
 8003eac:	20000462 	.word	0x20000462

08003eb0 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
	last_screen = 0;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <display_update_mask+0x14>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	200020d0 	.word	0x200020d0

08003ec8 <display_meter_mask>:

/*
 * @brief       Draw the screen mask for meter main screen
 * @para clear  0 = do not clear display
 */
void display_meter_mask(uint8_t clear) {
 8003ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eca:	b08d      	sub	sp, #52	; 0x34
 8003ecc:	af06      	add	r7, sp, #24
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
	uint16_t ypos = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	82fb      	strh	r3, [r7, #22]
	uint16_t box_height = 40;
 8003ed6:	2328      	movs	r3, #40	; 0x28
 8003ed8:	82bb      	strh	r3, [r7, #20]
	uint16_t border_col = GREEN;
 8003eda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ede:	827b      	strh	r3, [r7, #18]
	uint16_t font_col = GREEN;
 8003ee0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ee4:	823b      	strh	r3, [r7, #16]
	uint16_t back_col = BLACK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	81fb      	strh	r3, [r7, #14]
	if (clear) Displ_CLS(back_col);
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <display_meter_mask+0x30>
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f004 f930 	bl	8008158 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003ef8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003efc:	4ba5      	ldr	r3, [pc, #660]	; (8004194 <display_meter_mask+0x2cc>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	b21a      	sxth	r2, r3
 8003f06:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8003f0a:	8a7b      	ldrh	r3, [r7, #18]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2000      	movs	r0, #0
 8003f12:	f004 fb0a 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003f16:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003f1a:	8afa      	ldrh	r2, [r7, #22]
 8003f1c:	8abb      	ldrh	r3, [r7, #20]
 8003f1e:	4413      	add	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b21a      	sxth	r2, r3
 8003f24:	8a7b      	ldrh	r3, [r7, #18]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f004 fafc 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003f32:	8afa      	ldrh	r2, [r7, #22]
 8003f34:	8abb      	ldrh	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	b219      	sxth	r1, r3
 8003f3c:	4b95      	ldr	r3, [pc, #596]	; (8004194 <display_meter_mask+0x2cc>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b218      	sxth	r0, r3
 8003f46:	8afa      	ldrh	r2, [r7, #22]
 8003f48:	8abb      	ldrh	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	b21a      	sxth	r2, r3
 8003f50:	8a7b      	ldrh	r3, [r7, #18]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	4602      	mov	r2, r0
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f004 fae6 	bl	800852a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 8003f5e:	4b8d      	ldr	r3, [pc, #564]	; (8004194 <display_meter_mask+0x2cc>)
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b218      	sxth	r0, r3
 8003f68:	8afa      	ldrh	r2, [r7, #22]
 8003f6a:	8abb      	ldrh	r3, [r7, #20]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	b219      	sxth	r1, r3
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <display_meter_mask+0x2cc>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	8a7b      	ldrh	r3, [r7, #18]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	f004 fad2 	bl	800852a <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	3309      	adds	r3, #9
 8003f8a:	b29c      	uxth	r4, r3
 8003f8c:	4b82      	ldr	r3, [pc, #520]	; (8004198 <display_meter_mask+0x2d0>)
 8003f8e:	89fa      	ldrh	r2, [r7, #14]
 8003f90:	9204      	str	r2, [sp, #16]
 8003f92:	8a3a      	ldrh	r2, [r7, #16]
 8003f94:	9203      	str	r2, [sp, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	9202      	str	r2, [sp, #8]
 8003f9a:	466d      	mov	r5, sp
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2256      	movs	r2, #86	; 0x56
 8003faa:	4621      	mov	r1, r4
 8003fac:	204b      	movs	r0, #75	; 0x4b
 8003fae:	f004 fdc7 	bl	8008b40 <Displ_WChar>
	font_col = channel_colour[display_channel+1];
 8003fb2:	4b7a      	ldr	r3, [pc, #488]	; (800419c <display_meter_mask+0x2d4>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	4a79      	ldr	r2, [pc, #484]	; (80041a0 <display_meter_mask+0x2d8>)
 8003fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fbe:	823b      	strh	r3, [r7, #16]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8003fc0:	4b74      	ldr	r3, [pc, #464]	; (8004194 <display_meter_mask+0x2cc>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	3b1e      	subs	r3, #30
 8003fc6:	b29c      	uxth	r4, r3
 8003fc8:	4b73      	ldr	r3, [pc, #460]	; (8004198 <display_meter_mask+0x2d0>)
 8003fca:	89fa      	ldrh	r2, [r7, #14]
 8003fcc:	9204      	str	r2, [sp, #16]
 8003fce:	8a3a      	ldrh	r2, [r7, #16]
 8003fd0:	9203      	str	r2, [sp, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	9202      	str	r2, [sp, #8]
 8003fd6:	466d      	mov	r5, sp
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2241      	movs	r2, #65	; 0x41
 8003fe6:	2109      	movs	r1, #9
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f004 fda9 	bl	8008b40 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8003fee:	8aba      	ldrh	r2, [r7, #20]
 8003ff0:	8afb      	ldrh	r3, [r7, #22]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	82fb      	strh	r3, [r7, #22]
	border_col = YELLOW;
 8003ffa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ffe:	827b      	strh	r3, [r7, #18]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8004000:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004004:	4b63      	ldr	r3, [pc, #396]	; (8004194 <display_meter_mask+0x2cc>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	b21a      	sxth	r2, r3
 800400e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8004012:	8a7b      	ldrh	r3, [r7, #18]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	4603      	mov	r3, r0
 8004018:	2000      	movs	r0, #0
 800401a:	f004 fa86 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800401e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004022:	8afa      	ldrh	r2, [r7, #22]
 8004024:	8abb      	ldrh	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	b29b      	uxth	r3, r3
 800402a:	b21a      	sxth	r2, r3
 800402c:	8a7b      	ldrh	r3, [r7, #18]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	2200      	movs	r2, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f004 fa78 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 800403a:	8afa      	ldrh	r2, [r7, #22]
 800403c:	8abb      	ldrh	r3, [r7, #20]
 800403e:	4413      	add	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	b219      	sxth	r1, r3
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <display_meter_mask+0x2cc>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	b218      	sxth	r0, r3
 800404e:	8afa      	ldrh	r2, [r7, #22]
 8004050:	8abb      	ldrh	r3, [r7, #20]
 8004052:	4413      	add	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	b21a      	sxth	r2, r3
 8004058:	8a7b      	ldrh	r3, [r7, #18]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	4602      	mov	r2, r0
 8004060:	2000      	movs	r0, #0
 8004062:	f004 fa62 	bl	800852a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <display_meter_mask+0x2cc>)
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	b218      	sxth	r0, r3
 8004070:	8afa      	ldrh	r2, [r7, #22]
 8004072:	8abb      	ldrh	r3, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	b219      	sxth	r1, r3
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <display_meter_mask+0x2cc>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	3b01      	subs	r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	b21a      	sxth	r2, r3
 8004084:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4623      	mov	r3, r4
 800408e:	f004 fa4c 	bl	800852a <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8004092:	4b40      	ldr	r3, [pc, #256]	; (8004194 <display_meter_mask+0x2cc>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	3b50      	subs	r3, #80	; 0x50
 8004098:	b29c      	uxth	r4, r3
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	3309      	adds	r3, #9
 800409e:	b29d      	uxth	r5, r3
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <display_meter_mask+0x2d0>)
 80040a2:	89fa      	ldrh	r2, [r7, #14]
 80040a4:	9204      	str	r2, [sp, #16]
 80040a6:	8a3a      	ldrh	r2, [r7, #16]
 80040a8:	9203      	str	r2, [sp, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	9202      	str	r2, [sp, #8]
 80040ae:	466e      	mov	r6, sp
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040b6:	e886 0003 	stmia.w	r6, {r0, r1}
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a39      	ldr	r2, [pc, #228]	; (80041a4 <display_meter_mask+0x2dc>)
 80040be:	4629      	mov	r1, r5
 80040c0:	4620      	mov	r0, r4
 80040c2:	f004 ffbb 	bl	800903c <Displ_WString>
	// W
	ypos += box_height+1;
 80040c6:	8aba      	ldrh	r2, [r7, #20]
 80040c8:	8afb      	ldrh	r3, [r7, #22]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	82fb      	strh	r3, [r7, #22]
	border_col = YELLOW;
 80040d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80040d6:	827b      	strh	r3, [r7, #18]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 80040d8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <display_meter_mask+0x2cc>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	b21a      	sxth	r2, r3
 80040e6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80040ea:	8a7b      	ldrh	r3, [r7, #18]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4603      	mov	r3, r0
 80040f0:	2000      	movs	r0, #0
 80040f2:	f004 fa1a 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 80040f6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80040fa:	8afa      	ldrh	r2, [r7, #22]
 80040fc:	8abb      	ldrh	r3, [r7, #20]
 80040fe:	4413      	add	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	b21a      	sxth	r2, r3
 8004104:	8a7b      	ldrh	r3, [r7, #18]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	2200      	movs	r2, #0
 800410c:	2000      	movs	r0, #0
 800410e:	f004 fa0c 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8004112:	8afa      	ldrh	r2, [r7, #22]
 8004114:	8abb      	ldrh	r3, [r7, #20]
 8004116:	4413      	add	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	b219      	sxth	r1, r3
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <display_meter_mask+0x2cc>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	3b01      	subs	r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	b218      	sxth	r0, r3
 8004126:	8afa      	ldrh	r2, [r7, #22]
 8004128:	8abb      	ldrh	r3, [r7, #20]
 800412a:	4413      	add	r3, r2
 800412c:	b29b      	uxth	r3, r3
 800412e:	b21a      	sxth	r2, r3
 8004130:	8a7b      	ldrh	r3, [r7, #18]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	4602      	mov	r2, r0
 8004138:	2000      	movs	r0, #0
 800413a:	f004 f9f6 	bl	800852a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <display_meter_mask+0x2cc>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	3b01      	subs	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	b218      	sxth	r0, r3
 8004148:	8afa      	ldrh	r2, [r7, #22]
 800414a:	8abb      	ldrh	r3, [r7, #20]
 800414c:	4413      	add	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	b219      	sxth	r1, r3
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <display_meter_mask+0x2cc>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	b21a      	sxth	r2, r3
 800415c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8004160:	8a7b      	ldrh	r3, [r7, #18]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4623      	mov	r3, r4
 8004166:	f004 f9e0 	bl	800852a <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <display_meter_mask+0x2cc>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	3b50      	subs	r3, #80	; 0x50
 8004170:	b29c      	uxth	r4, r3
 8004172:	8afb      	ldrh	r3, [r7, #22]
 8004174:	3309      	adds	r3, #9
 8004176:	b29d      	uxth	r5, r3
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <display_meter_mask+0x2d0>)
 800417a:	89fa      	ldrh	r2, [r7, #14]
 800417c:	9204      	str	r2, [sp, #16]
 800417e:	8a3a      	ldrh	r2, [r7, #16]
 8004180:	9203      	str	r2, [sp, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	9202      	str	r2, [sp, #8]
 8004186:	466e      	mov	r6, sp
 8004188:	1d1a      	adds	r2, r3, #4
 800418a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800418e:	e886 0003 	stmia.w	r6, {r0, r1}
 8004192:	e009      	b.n	80041a8 <display_meter_mask+0x2e0>
 8004194:	200020d2 	.word	0x200020d2
 8004198:	20000024 	.word	0x20000024
 800419c:	20000462 	.word	0x20000462
 80041a0:	20000000 	.word	0x20000000
 80041a4:	0801386c 	.word	0x0801386c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2257      	movs	r2, #87	; 0x57
 80041ac:	4629      	mov	r1, r5
 80041ae:	4620      	mov	r0, r4
 80041b0:	f004 fcc6 	bl	8008b40 <Displ_WChar>

	// PF
	ypos += box_height+1;
 80041b4:	8aba      	ldrh	r2, [r7, #20]
 80041b6:	8afb      	ldrh	r3, [r7, #22]
 80041b8:	4413      	add	r3, r2
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3301      	adds	r3, #1
 80041be:	82fb      	strh	r3, [r7, #22]
	border_col = WHITE;
 80041c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c4:	827b      	strh	r3, [r7, #18]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 80041c6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80041ca:	4b62      	ldr	r3, [pc, #392]	; (8004354 <display_meter_mask+0x48c>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80041d8:	8a7b      	ldrh	r3, [r7, #18]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4603      	mov	r3, r0
 80041de:	2000      	movs	r0, #0
 80041e0:	f004 f9a3 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 80041e4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80041e8:	8afa      	ldrh	r2, [r7, #22]
 80041ea:	8abb      	ldrh	r3, [r7, #20]
 80041ec:	4413      	add	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	b21a      	sxth	r2, r3
 80041f2:	8a7b      	ldrh	r3, [r7, #18]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	2200      	movs	r2, #0
 80041fa:	2000      	movs	r0, #0
 80041fc:	f004 f995 	bl	800852a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8004200:	8afa      	ldrh	r2, [r7, #22]
 8004202:	8abb      	ldrh	r3, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	b29b      	uxth	r3, r3
 8004208:	b219      	sxth	r1, r3
 800420a:	4b52      	ldr	r3, [pc, #328]	; (8004354 <display_meter_mask+0x48c>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	b218      	sxth	r0, r3
 8004214:	8afa      	ldrh	r2, [r7, #22]
 8004216:	8abb      	ldrh	r3, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	b21a      	sxth	r2, r3
 800421e:	8a7b      	ldrh	r3, [r7, #18]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	4602      	mov	r2, r0
 8004226:	2000      	movs	r0, #0
 8004228:	f004 f97f 	bl	800852a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 800422c:	4b49      	ldr	r3, [pc, #292]	; (8004354 <display_meter_mask+0x48c>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	b29b      	uxth	r3, r3
 8004234:	b218      	sxth	r0, r3
 8004236:	8afa      	ldrh	r2, [r7, #22]
 8004238:	8abb      	ldrh	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	b29b      	uxth	r3, r3
 800423e:	b219      	sxth	r1, r3
 8004240:	4b44      	ldr	r3, [pc, #272]	; (8004354 <display_meter_mask+0x48c>)
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	3b01      	subs	r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	b21a      	sxth	r2, r3
 800424a:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800424e:	8a7b      	ldrh	r3, [r7, #18]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	4623      	mov	r3, r4
 8004254:	f004 f969 	bl	800852a <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8004258:	8afb      	ldrh	r3, [r7, #22]
 800425a:	3309      	adds	r3, #9
 800425c:	b29c      	uxth	r4, r3
 800425e:	4b3e      	ldr	r3, [pc, #248]	; (8004358 <display_meter_mask+0x490>)
 8004260:	89fa      	ldrh	r2, [r7, #14]
 8004262:	9204      	str	r2, [sp, #16]
 8004264:	8a3a      	ldrh	r2, [r7, #16]
 8004266:	9203      	str	r2, [sp, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	9202      	str	r2, [sp, #8]
 800426c:	466d      	mov	r5, sp
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004274:	e885 0003 	stmia.w	r5, {r0, r1}
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a38      	ldr	r2, [pc, #224]	; (800435c <display_meter_mask+0x494>)
 800427c:	4621      	mov	r1, r4
 800427e:	205f      	movs	r0, #95	; 0x5f
 8004280:	f004 fedc 	bl	800903c <Displ_WString>
	// Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);		// Degree sign

	// Graph Box
	ypos += box_height+1;
 8004284:	8aba      	ldrh	r2, [r7, #20]
 8004286:	8afb      	ldrh	r3, [r7, #22]
 8004288:	4413      	add	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	3301      	adds	r3, #1
 800428e:	82fb      	strh	r3, [r7, #22]
	border_col = BLUE;
 8004290:	231f      	movs	r3, #31
 8004292:	827b      	strh	r3, [r7, #18]
	curve_y_size = display_y-ypos-graph_border*2;
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <display_meter_mask+0x498>)
 8004296:	881a      	ldrh	r2, [r3, #0]
 8004298:	8afb      	ldrh	r3, [r7, #22]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29a      	uxth	r2, r3
 800429e:	2302      	movs	r3, #2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <display_meter_mask+0x49c>)
 80042aa:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <display_meter_mask+0x49c>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	8afb      	ldrh	r3, [r7, #22]
 80042b6:	4413      	add	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2202      	movs	r2, #2
 80042bc:	4413      	add	r3, r2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <display_meter_mask+0x4a0>)
 80042c2:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 80042c4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <display_meter_mask+0x48c>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b218      	sxth	r0, r3
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <display_meter_mask+0x498>)
 80042d0:	881a      	ldrh	r2, [r3, #0]
 80042d2:	8afb      	ldrh	r3, [r7, #22]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	b21c      	sxth	r4, r3
 80042da:	2302      	movs	r3, #2
 80042dc:	b21b      	sxth	r3, r3
 80042de:	8a7a      	ldrh	r2, [r7, #18]
 80042e0:	9201      	str	r2, [sp, #4]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4623      	mov	r3, r4
 80042e6:	4602      	mov	r2, r0
 80042e8:	2000      	movs	r0, #0
 80042ea:	f004 fa4f 	bl	800878c <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 80042ee:	4b1f      	ldr	r3, [pc, #124]	; (800436c <display_meter_mask+0x4a4>)
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b218      	sxth	r0, r3
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <display_meter_mask+0x4a0>)
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b219      	sxth	r1, r3
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <display_meter_mask+0x4a4>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	33d2      	adds	r3, #210	; 0xd2
 8004300:	b29b      	uxth	r3, r3
 8004302:	b21a      	sxth	r2, r3
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <display_meter_mask+0x4a0>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b21b      	sxth	r3, r3
 800430a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800430e:	9400      	str	r4, [sp, #0]
 8004310:	f004 f90b 	bl	800852a <Displ_Line>

	// Channel
	snprintf(str,sizeof(str),"I%d", display_channel+1 );
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <display_meter_mask+0x4a8>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <display_meter_mask+0x4ac>)
 800431c:	2120      	movs	r1, #32
 800431e:	4816      	ldr	r0, [pc, #88]	; (8004378 <display_meter_mask+0x4b0>)
 8004320:	f00b fda6 	bl	800fe70 <sniprintf>
	Displ_WString(190, 133, str , Font24, 1, font_col, back_col);
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <display_meter_mask+0x490>)
 8004326:	89fa      	ldrh	r2, [r7, #14]
 8004328:	9204      	str	r2, [sp, #16]
 800432a:	8a3a      	ldrh	r2, [r7, #16]
 800432c:	9203      	str	r2, [sp, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	9202      	str	r2, [sp, #8]
 8004332:	466c      	mov	r4, sp
 8004334:	1d1a      	adds	r2, r3, #4
 8004336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800433a:	e884 0003 	stmia.w	r4, {r0, r1}
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <display_meter_mask+0x4b0>)
 8004342:	2185      	movs	r1, #133	; 0x85
 8004344:	20be      	movs	r0, #190	; 0xbe
 8004346:	f004 fe79 	bl	800903c <Displ_WString>
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004352:	bf00      	nop
 8004354:	200020d2 	.word	0x200020d2
 8004358:	20000024 	.word	0x20000024
 800435c:	08013874 	.word	0x08013874
 8004360:	200020d4 	.word	0x200020d4
 8004364:	20000008 	.word	0x20000008
 8004368:	200007ac 	.word	0x200007ac
 800436c:	2000000a 	.word	0x2000000a
 8004370:	20000462 	.word	0x20000462
 8004374:	08013884 	.word	0x08013884
 8004378:	200020b0 	.word	0x200020b0

0800437c <display_align_curves>:

/*
 * @ brief       Aligns V + I curve to start at positive zero crossing and reduces it to one full cycle
 * @retval:      number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004386:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8004388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800438c:	603b      	str	r3, [r7, #0]
	uint8_t adc_channel;

	switch(display_channel) {
 800438e:	4b53      	ldr	r3, [pc, #332]	; (80044dc <display_align_curves+0x160>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d00c      	beq.n	80043b0 <display_align_curves+0x34>
 8004396:	2b02      	cmp	r3, #2
 8004398:	dc0d      	bgt.n	80043b6 <display_align_curves+0x3a>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <display_align_curves+0x28>
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d003      	beq.n	80043aa <display_align_curves+0x2e>
 80043a2:	e008      	b.n	80043b6 <display_align_curves+0x3a>
	case I1:
		adc_channel = ADC_CH_I1;
 80043a4:	2302      	movs	r3, #2
 80043a6:	71fb      	strb	r3, [r7, #7]
		break;
 80043a8:	e007      	b.n	80043ba <display_align_curves+0x3e>
	case I2:
		adc_channel = ADC_CH_I2;
 80043aa:	2303      	movs	r3, #3
 80043ac:	71fb      	strb	r3, [r7, #7]
		break;
 80043ae:	e004      	b.n	80043ba <display_align_curves+0x3e>
	case I3:
		adc_channel = ADC_CH_I3;
 80043b0:	2301      	movs	r3, #1
 80043b2:	71fb      	strb	r3, [r7, #7]
		break;
 80043b4:	e001      	b.n	80043ba <display_align_curves+0x3e>
	default:
		adc_channel = ADC_CH_I1;
 80043b6:	2302      	movs	r3, #2
 80043b8:	71fb      	strb	r3, [r7, #7]
	}

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 80043ba:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <display_align_curves+0x164>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	da29      	bge.n	8004416 <display_align_curves+0x9a>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	e01f      	b.n	8004408 <display_align_curves+0x8c>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 80043c8:	4a46      	ldr	r2, [pc, #280]	; (80044e4 <display_align_curves+0x168>)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80043d0:	4a45      	ldr	r2, [pc, #276]	; (80044e8 <display_align_curves+0x16c>)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[adc_channel][i] = sample_buf[adc_channel][i];
 80043d8:	79fa      	ldrb	r2, [r7, #7]
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4841      	ldr	r0, [pc, #260]	; (80044e4 <display_align_curves+0x168>)
 80043de:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80043e2:	fb02 f101 	mul.w	r1, r2, r1
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	440a      	add	r2, r1
 80043ea:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80043ee:	493e      	ldr	r1, [pc, #248]	; (80044e8 <display_align_curves+0x16c>)
 80043f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80043f4:	fb03 f202 	mul.w	r2, r3, r2
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4413      	add	r3, r2
 80043fc:	4602      	mov	r2, r0
 80043fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3301      	adds	r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800440e:	d3db      	bcc.n	80043c8 <display_align_curves+0x4c>
		}
		return SAMPLE_BUF_SIZE;
 8004410:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8004414:	e05b      	b.n	80044ce <display_align_curves+0x152>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8004416:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <display_align_curves+0x164>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	e022      	b.n	8004464 <display_align_curves+0xe8>
		dest_idx++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8004424:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <display_align_curves+0x168>)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800442c:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <display_align_curves+0x16c>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 8004434:	79fa      	ldrb	r2, [r7, #7]
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	482a      	ldr	r0, [pc, #168]	; (80044e4 <display_align_curves+0x168>)
 800443a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800443e:	fb02 f101 	mul.w	r1, r2, r1
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	440a      	add	r2, r1
 8004446:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 800444a:	4927      	ldr	r1, [pc, #156]	; (80044e8 <display_align_curves+0x16c>)
 800444c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004450:	fb03 f202 	mul.w	r2, r3, r2
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	4602      	mov	r2, r0
 800445a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800446a:	d3d8      	bcc.n	800441e <display_align_curves+0xa2>
	}

	continue_at = SAMPLE_BUF_OVERLAP;
 800446c:	2314      	movs	r3, #20
 800446e:	603b      	str	r3, [r7, #0]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	e022      	b.n	80044bc <display_align_curves+0x140>
		dest_idx++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <display_align_curves+0x168>)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004484:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <display_align_curves+0x16c>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 800448c:	79fa      	ldrb	r2, [r7, #7]
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	4814      	ldr	r0, [pc, #80]	; (80044e4 <display_align_curves+0x168>)
 8004492:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004496:	fb02 f101 	mul.w	r1, r2, r1
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	440a      	add	r2, r1
 800449e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80044a2:	4911      	ldr	r1, [pc, #68]	; (80044e8 <display_align_curves+0x16c>)
 80044a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044a8:	fb03 f202 	mul.w	r2, r3, r2
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	4602      	mov	r2, r0
 80044b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <display_align_curves+0x164>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	dbd7      	blt.n	8004476 <display_align_curves+0xfa>
	}

	return ++dest_idx;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000462 	.word	0x20000462
 80044e0:	2000026c 	.word	0x2000026c
 80044e4:	200074dc 	.word	0x200074dc
 80044e8:	200007b0 	.word	0x200007b0

080044ec <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	b08b      	sub	sp, #44	; 0x2c
 80044f0:	af06      	add	r7, sp, #24
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
 80044f6:	460b      	mov	r3, r1
 80044f8:	717b      	strb	r3, [r7, #5]
 80044fa:	4613      	mov	r3, r2
 80044fc:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 80044fe:	797b      	ldrb	r3, [r7, #5]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <draw_curve+0x20>
 8004504:	4b65      	ldr	r3, [pc, #404]	; (800469c <draw_curve+0x1b0>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 800450c:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <draw_curve+0x1b4>)
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	4b64      	ldr	r3, [pc, #400]	; (80046a4 <draw_curve+0x1b8>)
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b02      	subs	r3, #2
 800451a:	b299      	uxth	r1, r3
 800451c:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <draw_curve+0x1bc>)
 800451e:	881a      	ldrh	r2, [r3, #0]
 8004520:	2302      	movs	r3, #2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	b29b      	uxth	r3, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	b29a      	uxth	r2, r3
 800452a:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <draw_curve+0x1b8>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2000      	movs	r0, #0
 8004530:	9000      	str	r0, [sp, #0]
 8004532:	2002      	movs	r0, #2
 8004534:	f003 fc5c 	bl	8007df0 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8004538:	4b58      	ldr	r3, [pc, #352]	; (800469c <draw_curve+0x1b0>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d023      	beq.n	8004588 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8004540:	4b5a      	ldr	r3, [pc, #360]	; (80046ac <draw_curve+0x1c0>)
 8004542:	889a      	ldrh	r2, [r3, #4]
 8004544:	4b5a      	ldr	r3, [pc, #360]	; (80046b0 <draw_curve+0x1c4>)
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	4413      	add	r3, r2
 800454a:	b29c      	uxth	r4, r3
 800454c:	4b59      	ldr	r3, [pc, #356]	; (80046b4 <draw_curve+0x1c8>)
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	4b56      	ldr	r3, [pc, #344]	; (80046ac <draw_curve+0x1c0>)
 8004552:	88db      	ldrh	r3, [r3, #6]
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	b29d      	uxth	r5, r3
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <draw_curve+0x1c0>)
 800455e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004562:	9204      	str	r2, [sp, #16]
 8004564:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004568:	9203      	str	r2, [sp, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	9202      	str	r2, [sp, #8]
 800456e:	466e      	mov	r6, sp
 8004570:	1d1a      	adds	r2, r3, #4
 8004572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004576:	e886 0003 	stmia.w	r6, {r0, r1}
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a4e      	ldr	r2, [pc, #312]	; (80046b8 <draw_curve+0x1cc>)
 800457e:	4629      	mov	r1, r5
 8004580:	4620      	mov	r0, r4
 8004582:	f004 fd5b 	bl	800903c <Displ_WString>
		return;
 8004586:	e086      	b.n	8004696 <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8004588:	793b      	ldrb	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04c      	beq.n	8004628 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_x_size, curve_y_zero, WHITE);
 800458e:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <draw_curve+0x1c4>)
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b218      	sxth	r0, r3
 8004594:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <draw_curve+0x1c8>)
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b219      	sxth	r1, r3
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <draw_curve+0x1c4>)
 800459c:	881a      	ldrh	r2, [r3, #0]
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <draw_curve+0x1d0>)
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	4413      	add	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <draw_curve+0x1c8>)
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80045b2:	9400      	str	r4, [sp, #0]
 80045b4:	f003 ffb9 	bl	800852a <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_x_size; x++) {
 80045b8:	2301      	movs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e02d      	b.n	800461a <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <draw_curve+0x1c4>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	b218      	sxth	r0, r3
 80045d0:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <draw_curve+0x1c8>)
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	4939      	ldr	r1, [pc, #228]	; (80046c0 <draw_curve+0x1d4>)
 80045da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	b219      	sxth	r1, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <draw_curve+0x1c4>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	4413      	add	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	b21c      	sxth	r4, r3
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <draw_curve+0x1c8>)
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	4d31      	ldr	r5, [pc, #196]	; (80046c0 <draw_curve+0x1d4>)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004600:	b29b      	uxth	r3, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b29b      	uxth	r3, r3
 8004606:	b21a      	sxth	r2, r3
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	4622      	mov	r2, r4
 8004610:	f003 ff8b 	bl	800852a <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	4b28      	ldr	r3, [pc, #160]	; (80046bc <draw_curve+0x1d0>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4293      	cmp	r3, r2
 8004624:	dbcb      	blt.n	80045be <draw_curve+0xd2>
 8004626:	e036      	b.n	8004696 <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_x_size; x++) {
 8004628:	2301      	movs	r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	e02d      	b.n	800468a <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	b29a      	uxth	r2, r3
 8004632:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <draw_curve+0x1c4>)
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	4413      	add	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29b      	uxth	r3, r3
 800463e:	b218      	sxth	r0, r3
 8004640:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <draw_curve+0x1c8>)
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	491d      	ldr	r1, [pc, #116]	; (80046c0 <draw_curve+0x1d4>)
 800464a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800464e:	b29b      	uxth	r3, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	b219      	sxth	r1, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	b29a      	uxth	r2, r3
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <draw_curve+0x1c4>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	4413      	add	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	b21c      	sxth	r4, r3
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <draw_curve+0x1c8>)
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	4d15      	ldr	r5, [pc, #84]	; (80046c0 <draw_curve+0x1d4>)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004670:	b29b      	uxth	r3, r3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	b29b      	uxth	r3, r3
 8004676:	b21a      	sxth	r2, r3
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	4622      	mov	r2, r4
 8004680:	f003 ff53 	bl	800852a <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	3301      	adds	r3, #1
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <draw_curve+0x1d0>)
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4293      	cmp	r3, r2
 8004694:	dbcb      	blt.n	800462e <draw_curve+0x142>
		}
	}
}
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469c:	200002bc 	.word	0x200002bc
 80046a0:	200020d4 	.word	0x200020d4
 80046a4:	20000008 	.word	0x20000008
 80046a8:	200020d2 	.word	0x200020d2
 80046ac:	20000024 	.word	0x20000024
 80046b0:	2000000a 	.word	0x2000000a
 80046b4:	200007ac 	.word	0x200007ac
 80046b8:	08013888 	.word	0x08013888
 80046bc:	200007ae 	.word	0x200007ae
 80046c0:	20000464 	.word	0x20000464

080046c4 <make_curve>:
 *             represents plus/minus values centered around the half way point of the data range.
 *          The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 * @ para bufnum      Sample buffer to use for curve
 * @ para auto_scale  1 = scale to fit available screen area, 0 = use ADC full scale
 */
void make_curve(uint8_t bufnum, uint8_t auto_scale) {
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b095      	sub	sp, #84	; 0x54
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	460a      	mov	r2, r1
 80046ce:	71fb      	strb	r3, [r7, #7]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71bb      	strb	r3, [r7, #6]
	int value;
	int scale_factor = 1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	int src_idx = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
	int range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80046dc:	79fa      	ldrb	r2, [r7, #7]
 80046de:	49b3      	ldr	r1, [pc, #716]	; (80049ac <make_curve+0x2e8>)
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3302      	adds	r3, #2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	79fa      	ldrb	r2, [r7, #7]
 80046f2:	49ae      	ldr	r1, [pc, #696]	; (80049ac <make_curve+0x2e8>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	1ac3      	subs	r3, r0, r3
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
	int zero_value = range / 2 + sample_buf_meta[bufnum].min;	// zero should be half way if DC-Bias is accurate
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	0fda      	lsrs	r2, r3, #31
 8004708:	4413      	add	r3, r2
 800470a:	105b      	asrs	r3, r3, #1
 800470c:	4618      	mov	r0, r3
 800470e:	79fa      	ldrb	r2, [r7, #7]
 8004710:	49a6      	ldr	r1, [pc, #664]	; (80049ac <make_curve+0x2e8>)
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	4403      	add	r3, r0
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
	int curve_y_min;
	float fScale;

	if (auto_scale) {
 8004722:	79bb      	ldrb	r3, [r7, #6]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00f      	beq.n	8004748 <make_curve+0x84>
		fScale = (float)curve_y_size / (float)range;
 8004728:	4ba1      	ldr	r3, [pc, #644]	; (80049b0 <make_curve+0x2ec>)
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8004746:	e00b      	b.n	8004760 <make_curve+0x9c>
	} else {
		fScale = (float)curve_y_size / ADC_FS_RAW;
 8004748:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <make_curve+0x2ec>)
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004754:	eddf 6a97 	vldr	s13, [pc, #604]	; 80049b4 <make_curve+0x2f0>
 8004758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800475c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	if (fScale < 1) {
 8004760:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d51f      	bpl.n	80047b2 <make_curve+0xee>
		scale_factor = trunc(1/fScale)+1; // divisor
 8004772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004776:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800477a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800477e:	ee16 0a90 	vmov	r0, s13
 8004782:	f7fb ff01 	bl	8000588 <__aeabi_f2d>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	ec43 2b10 	vmov	d0, r2, r3
 800478e:	f00e fe73 	bl	8013478 <trunc>
 8004792:	ec51 0b10 	vmov	r0, r1, d0
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	4b87      	ldr	r3, [pc, #540]	; (80049b8 <make_curve+0x2f4>)
 800479c:	f7fb fd96 	bl	80002cc <__adddf3>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7fc f9f6 	bl	8000b98 <__aeabi_d2iz>
 80047ac:	4603      	mov	r3, r0
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b0:	e010      	b.n	80047d4 <make_curve+0x110>
	} else {
		scale_factor = trunc(fScale);	// multiplier
 80047b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047b4:	f7fb fee8 	bl	8000588 <__aeabi_f2d>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	ec43 2b10 	vmov	d0, r2, r3
 80047c0:	f00e fe5a 	bl	8013478 <trunc>
 80047c4:	ec53 2b10 	vmov	r2, r3, d0
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	f7fc f9e4 	bl	8000b98 <__aeabi_d2iz>
 80047d0:	4603      	mov	r3, r0
 80047d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	curve_x_size = display_align_curves() / 2;		// half the data points to fit screen size
 80047d4:	f7ff fdd2 	bl	800437c <display_align_curves>
 80047d8:	4603      	mov	r3, r0
 80047da:	0fda      	lsrs	r2, r3, #31
 80047dc:	4413      	add	r3, r2
 80047de:	105b      	asrs	r3, r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <make_curve+0x2f8>)
 80047e4:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 80047e6:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <make_curve+0x2ec>)
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f1c3 0301 	rsb	r3, r3, #1
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 80047f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80047f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004804:	d567      	bpl.n	80048d6 <make_curve+0x212>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	496d      	ldr	r1, [pc, #436]	; (80049c0 <make_curve+0x2fc>)
 800480a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800480e:	fb03 f202 	mul.w	r2, r3, r2
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	4413      	add	r3, r2
 8004816:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800481a:	461c      	mov	r4, r3
 800481c:	79fa      	ldrb	r2, [r7, #7]
 800481e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004820:	3301      	adds	r3, #1
 8004822:	4967      	ldr	r1, [pc, #412]	; (80049c0 <make_curve+0x2fc>)
 8004824:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004828:	fb00 f202 	mul.w	r2, r0, r2
 800482c:	4413      	add	r3, r2
 800482e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004832:	4423      	add	r3, r4
 8004834:	0fda      	lsrs	r2, r3, #31
 8004836:	4413      	add	r3, r2
 8004838:	105b      	asrs	r3, r3, #1
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 800483c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	1ad2      	subs	r2, r2, r3
 8004842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004844:	fb92 f3f3 	sdiv	r3, r2, r3
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4293      	cmp	r3, r2
 8004854:	bfb8      	it	lt
 8004856:	4613      	movlt	r3, r2
 8004858:	4a5a      	ldr	r2, [pc, #360]	; (80049c4 <make_curve+0x300>)
 800485a:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800485c:	2301      	movs	r3, #1
 800485e:	643b      	str	r3, [r7, #64]	; 0x40
 8004860:	e032      	b.n	80048c8 <make_curve+0x204>
			src_idx+=2;
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	3302      	adds	r3, #2
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	4955      	ldr	r1, [pc, #340]	; (80049c0 <make_curve+0x2fc>)
 800486c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004870:	fb03 f202 	mul.w	r2, r3, r2
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	4413      	add	r3, r2
 8004878:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800487c:	461c      	mov	r4, r3
 800487e:	79fa      	ldrb	r2, [r7, #7]
 8004880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004882:	3301      	adds	r3, #1
 8004884:	494e      	ldr	r1, [pc, #312]	; (80049c0 <make_curve+0x2fc>)
 8004886:	f44f 7048 	mov.w	r0, #800	; 0x320
 800488a:	fb00 f202 	mul.w	r2, r0, r2
 800488e:	4413      	add	r3, r2
 8004890:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004894:	4423      	add	r3, r4
 8004896:	0fda      	lsrs	r2, r3, #31
 8004898:	4413      	add	r3, r2
 800489a:	105b      	asrs	r3, r3, #1
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 800489e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	1ad2      	subs	r2, r2, r3
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	bfb8      	it	lt
 80048b8:	461a      	movlt	r2, r3
 80048ba:	4942      	ldr	r1, [pc, #264]	; (80049c4 <make_curve+0x300>)
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 80048c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c4:	3301      	adds	r3, #1
 80048c6:	643b      	str	r3, [r7, #64]	; 0x40
 80048c8:	4b3c      	ldr	r3, [pc, #240]	; (80049bc <make_curve+0x2f8>)
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d0:	4293      	cmp	r3, r2
 80048d2:	dbc6      	blt.n	8004862 <make_curve+0x19e>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 80048d4:	e066      	b.n	80049a4 <make_curve+0x2e0>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	4939      	ldr	r1, [pc, #228]	; (80049c0 <make_curve+0x2fc>)
 80048da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80048de:	fb03 f202 	mul.w	r2, r3, r2
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	4413      	add	r3, r2
 80048e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80048ea:	461c      	mov	r4, r3
 80048ec:	79fa      	ldrb	r2, [r7, #7]
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	3301      	adds	r3, #1
 80048f2:	4933      	ldr	r1, [pc, #204]	; (80049c0 <make_curve+0x2fc>)
 80048f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80048f8:	fb00 f202 	mul.w	r2, r0, r2
 80048fc:	4413      	add	r3, r2
 80048fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004902:	4423      	add	r3, r4
 8004904:	0fda      	lsrs	r2, r3, #31
 8004906:	4413      	add	r3, r2
 8004908:	105b      	asrs	r3, r3, #1
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800490c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	4293      	cmp	r3, r2
 8004924:	bfb8      	it	lt
 8004926:	4613      	movlt	r3, r2
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <make_curve+0x300>)
 800492a:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800492c:	2301      	movs	r3, #1
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004930:	e032      	b.n	8004998 <make_curve+0x2d4>
			src_idx+=2;
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	3302      	adds	r3, #2
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	4921      	ldr	r1, [pc, #132]	; (80049c0 <make_curve+0x2fc>)
 800493c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004940:	fb03 f202 	mul.w	r2, r3, r2
 8004944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004946:	4413      	add	r3, r2
 8004948:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800494c:	461c      	mov	r4, r3
 800494e:	79fa      	ldrb	r2, [r7, #7]
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	3301      	adds	r3, #1
 8004954:	491a      	ldr	r1, [pc, #104]	; (80049c0 <make_curve+0x2fc>)
 8004956:	f44f 7048 	mov.w	r0, #800	; 0x320
 800495a:	fb00 f202 	mul.w	r2, r0, r2
 800495e:	4413      	add	r3, r2
 8004960:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004964:	4423      	add	r3, r4
 8004966:	0fda      	lsrs	r2, r3, #31
 8004968:	4413      	add	r3, r2
 800496a:	105b      	asrs	r3, r3, #1
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800496e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	429a      	cmp	r2, r3
 8004986:	bfb8      	it	lt
 8004988:	461a      	movlt	r2, r3
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <make_curve+0x300>)
 800498c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	3301      	adds	r3, #1
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <make_curve+0x2f8>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	4293      	cmp	r3, r2
 80049a2:	dbc6      	blt.n	8004932 <make_curve+0x26e>
}
 80049a4:	bf00      	nop
 80049a6:	3754      	adds	r7, #84	; 0x54
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd90      	pop	{r4, r7, pc}
 80049ac:	2000026c 	.word	0x2000026c
 80049b0:	20000008 	.word	0x20000008
 80049b4:	457ff000 	.word	0x457ff000
 80049b8:	3ff00000 	.word	0x3ff00000
 80049bc:	200007ae 	.word	0x200007ae
 80049c0:	200007b0 	.word	0x200007b0
 80049c4:	20000464 	.word	0x20000464

080049c8 <display_show_curves>:

/*
 * @brief   Display curves for voltage + selected current channels on TFT display
 */
void display_show_curves(void) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	uint8_t adc_channel;
	make_curve(ADC_CH_V, 0);
 80049ce:	2100      	movs	r1, #0
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7ff fe77 	bl	80046c4 <make_curve>
	draw_curve(channel_colour[ADC_CH_V], 0, (sample_buf_meta[ADC_CH_V].zero_cross_pos >= 0));
 80049d6:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <display_show_curves+0xa4>)
 80049d8:	8818      	ldrh	r0, [r3, #0]
 80049da:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <display_show_curves+0xa8>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	43db      	mvns	r3, r3
 80049e0:	0fdb      	lsrs	r3, r3, #31
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	2100      	movs	r1, #0
 80049e8:	f7ff fd80 	bl	80044ec <draw_curve>

	switch(display_channel) {
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <display_show_curves+0xac>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d00c      	beq.n	8004a0e <display_show_curves+0x46>
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	dc0d      	bgt.n	8004a14 <display_show_curves+0x4c>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <display_show_curves+0x3a>
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d003      	beq.n	8004a08 <display_show_curves+0x40>
 8004a00:	e008      	b.n	8004a14 <display_show_curves+0x4c>
	case I1:
		adc_channel = ADC_CH_I1;
 8004a02:	2302      	movs	r3, #2
 8004a04:	71fb      	strb	r3, [r7, #7]
		break;
 8004a06:	e007      	b.n	8004a18 <display_show_curves+0x50>
	case I2:
		adc_channel = ADC_CH_I2;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	71fb      	strb	r3, [r7, #7]
		break;
 8004a0c:	e004      	b.n	8004a18 <display_show_curves+0x50>
	case I3:
		adc_channel = ADC_CH_I3;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	71fb      	strb	r3, [r7, #7]
		break;
 8004a12:	e001      	b.n	8004a18 <display_show_curves+0x50>
	default:
		adc_channel = ADC_CH_I1;
 8004a14:	2302      	movs	r3, #2
 8004a16:	71fb      	strb	r3, [r7, #7]
	}
	if (!sample_buf_meta[adc_channel].value_is_zero) {
 8004a18:	79fa      	ldrb	r2, [r7, #7]
 8004a1a:	4915      	ldr	r1, [pc, #84]	; (8004a70 <display_show_curves+0xa8>)
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	330d      	adds	r3, #13
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11a      	bne.n	8004a64 <display_show_curves+0x9c>
		make_curve(adc_channel, 1);
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2101      	movs	r1, #1
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fe46 	bl	80046c4 <make_curve>
		draw_curve(channel_colour[display_channel+1], 1, (sample_buf_meta[adc_channel].zero_cross_pos >= 0));
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <display_show_curves+0xac>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <display_show_curves+0xa4>)
 8004a40:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8004a44:	79fa      	ldrb	r2, [r7, #7]
 8004a46:	490a      	ldr	r1, [pc, #40]	; (8004a70 <display_show_curves+0xa8>)
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	3304      	adds	r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	0fdb      	lsrs	r3, r3, #31
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f7ff fd44 	bl	80044ec <draw_curve>
	}
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	2000026c 	.word	0x2000026c
 8004a74:	20000462 	.word	0x20000462

08004a78 <ee24_isConnected>:

/*
 * @ brief  Check if EEPROM device is present
 */
bool ee24_isConnected(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 200)!=HAL_OK)
 8004a7c:	23c8      	movs	r3, #200	; 0xc8
 8004a7e:	2202      	movs	r2, #2
 8004a80:	21a0      	movs	r1, #160	; 0xa0
 8004a82:	4805      	ldr	r0, [pc, #20]	; (8004a98 <ee24_isConnected+0x20>)
 8004a84:	f007 f844 	bl	800bb10 <HAL_I2C_IsDeviceReady>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <ee24_isConnected+0x1a>
		return false;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <ee24_isConnected+0x1c>

	return true;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2000222c 	.word	0x2000222c

08004a9c <ee24_write_byte>:

/*
 * @ brief  Blocking call to write one byte to EEPROM
 */
bool ee24_write_byte(uint16_t address, uint8_t *data)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af04      	add	r7, sp, #16
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <ee24_write_byte+0x68>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <ee24_write_byte+0x18>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e023      	b.n	8004afc <ee24_write_byte+0x60>
	ee24_lock = 1;
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <ee24_write_byte+0x68>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	2364      	movs	r3, #100	; 0x64
 8004abe:	9302      	str	r3, [sp, #8]
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	21a0      	movs	r1, #160	; 0xa0
 8004acc:	480e      	ldr	r0, [pc, #56]	; (8004b08 <ee24_write_byte+0x6c>)
 8004ace:	f006 fcff 	bl	800b4d0 <HAL_I2C_Mem_Write>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <ee24_write_byte+0x70>)
 8004ad8:	701a      	strb	r2, [r3, #0]
	//ee24_result = HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1);
	if (ee24_result != HAL_OK)
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <ee24_write_byte+0x70>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <ee24_write_byte+0x58>
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <ee24_write_byte+0x6c>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <ee24_write_byte+0x74>)
 8004ae8:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <ee24_write_byte+0x68>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
		return false;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e003      	b.n	8004afc <ee24_write_byte+0x60>
	}
	ee24_lock = 0;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <ee24_write_byte+0x68>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	return true;
 8004afa:	2301      	movs	r3, #1
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200020d6 	.word	0x200020d6
 8004b08:	2000222c 	.word	0x2000222c
 8004b0c:	200020d7 	.word	0x200020d7
 8004b10:	200020d8 	.word	0x200020d8

08004b14 <ee24_write_word>:

/*
 * @ brief  Blocking call to write one word to EEPROM
 */
bool ee24_write_word(uint16_t address, uint16_t *data)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af04      	add	r7, sp, #16
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8004b20:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <ee24_write_word+0x68>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <ee24_write_word+0x18>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e023      	b.n	8004b74 <ee24_write_word+0x60>
	ee24_lock = 1;
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <ee24_write_word+0x68>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100);
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	2364      	movs	r3, #100	; 0x64
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	2302      	movs	r3, #2
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	21a0      	movs	r1, #160	; 0xa0
 8004b44:	480e      	ldr	r0, [pc, #56]	; (8004b80 <ee24_write_word+0x6c>)
 8004b46:	f006 fcc3 	bl	800b4d0 <HAL_I2C_Mem_Write>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <ee24_write_word+0x70>)
 8004b50:	701a      	strb	r2, [r3, #0]
	//ee24_result = HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2);
	if (ee24_result != HAL_OK)
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <ee24_write_word+0x70>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <ee24_write_word+0x58>
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <ee24_write_word+0x6c>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <ee24_write_word+0x74>)
 8004b60:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <ee24_write_word+0x68>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
		return false;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e003      	b.n	8004b74 <ee24_write_word+0x60>
	}
	ee24_lock = 0;
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <ee24_write_word+0x68>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
	return true;
 8004b72:	2301      	movs	r3, #1
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200020d6 	.word	0x200020d6
 8004b80:	2000222c 	.word	0x2000222c
 8004b84:	200020d7 	.word	0x200020d7
 8004b88:	200020d8 	.word	0x200020d8

08004b8c <ee24_write>:
/*
 * @brief    Blocking call to write bytes to EEPROM
 * @retval   true on success
 */
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af04      	add	r7, sp, #16
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	81fb      	strh	r3, [r7, #14]
	bool retval = false;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]
	uint16_t first = address, last=address+len;
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	82bb      	strh	r3, [r7, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	4413      	add	r3, r2
 8004bac:	827b      	strh	r3, [r7, #18]
	// check if all bytes are within page (16 byte) boundary
	if ( (first & 0xF0) != (last & 0xF0) ) {
 8004bae:	8aba      	ldrh	r2, [r7, #20]
 8004bb0:	8a7b      	ldrh	r3, [r7, #18]
 8004bb2:	4053      	eors	r3, r2
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <ee24_write+0x36>
		return false;		// fail if write goes outside page boundary
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e01e      	b.n	8004c00 <ee24_write+0x74>
	}

	if (ee24_lock == 1) return false;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <ee24_write+0x7c>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <ee24_write+0x42>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e018      	b.n	8004c00 <ee24_write+0x74>
	ee24_lock = 1;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <ee24_write+0x7c>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	89fa      	ldrh	r2, [r7, #14]
 8004bda:	2164      	movs	r1, #100	; 0x64
 8004bdc:	9102      	str	r1, [sp, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2301      	movs	r3, #1
 8004be6:	21a0      	movs	r1, #160	; 0xa0
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <ee24_write+0x80>)
 8004bea:	f006 fc71 	bl	800b4d0 <HAL_I2C_Mem_Write>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <ee24_write+0x6c>
		retval = true;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
	}
	ee24_lock = 0;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <ee24_write+0x7c>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
	return retval;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200020d6 	.word	0x200020d6
 8004c0c:	2000222c 	.word	0x2000222c

08004c10 <ee24_read_byte>:
/*
 * @brief    Blocking call to read one byte from EEPROM
 * @retval   true on success
 */
bool ee24_read_byte(uint8_t address, uint8_t *data)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <ee24_read_byte+0x6c>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <ee24_read_byte+0x18>
 8004c24:	2300      	movs	r3, #0
 8004c26:	e024      	b.n	8004c72 <ee24_read_byte+0x62>
	ee24_lock = 1;
 8004c28:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <ee24_read_byte+0x6c>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	2364      	movs	r3, #100	; 0x64
 8004c34:	9302      	str	r3, [sp, #8]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2301      	movs	r3, #1
 8004c40:	21a0      	movs	r1, #160	; 0xa0
 8004c42:	480f      	ldr	r0, [pc, #60]	; (8004c80 <ee24_read_byte+0x70>)
 8004c44:	f006 fd3e 	bl	800b6c4 <HAL_I2C_Mem_Read>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <ee24_read_byte+0x74>)
 8004c4e:	701a      	strb	r2, [r3, #0]
	if (ee24_result != HAL_OK )
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <ee24_read_byte+0x74>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <ee24_read_byte+0x5a>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1) != HAL_OK)
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <ee24_read_byte+0x70>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <ee24_read_byte+0x78>)
 8004c5e:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <ee24_read_byte+0x6c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
		return false;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e003      	b.n	8004c72 <ee24_read_byte+0x62>
	}
	ee24_lock = 0;
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <ee24_read_byte+0x6c>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
	return true;
 8004c70:	2301      	movs	r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200020d6 	.word	0x200020d6
 8004c80:	2000222c 	.word	0x2000222c
 8004c84:	200020d7 	.word	0x200020d7
 8004c88:	200020d8 	.word	0x200020d8

08004c8c <ee24_read_word>:

/*
 * @ brief  Blocking call to read one word from EEPROM
 */
bool ee24_read_word(uint8_t address, uint16_t *data)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	4603      	mov	r3, r0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <ee24_read_word+0x6c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <ee24_read_word+0x18>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e024      	b.n	8004cee <ee24_read_word+0x62>
	ee24_lock = 1;
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <ee24_read_word+0x6c>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100);
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	2364      	movs	r3, #100	; 0x64
 8004cb0:	9302      	str	r3, [sp, #8]
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	21a0      	movs	r1, #160	; 0xa0
 8004cbe:	480f      	ldr	r0, [pc, #60]	; (8004cfc <ee24_read_word+0x70>)
 8004cc0:	f006 fd00 	bl	800b6c4 <HAL_I2C_Mem_Read>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <ee24_read_word+0x74>)
 8004cca:	701a      	strb	r2, [r3, #0]
	if (ee24_result != HAL_OK)
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <ee24_read_word+0x74>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <ee24_read_word+0x5a>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <ee24_read_word+0x70>)
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <ee24_read_word+0x78>)
 8004cda:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <ee24_read_word+0x6c>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
		return false;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e003      	b.n	8004cee <ee24_read_word+0x62>
	}
	ee24_lock = 0;
 8004ce6:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <ee24_read_word+0x6c>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
	return true;
 8004cec:	2301      	movs	r3, #1
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200020d6 	.word	0x200020d6
 8004cfc:	2000222c 	.word	0x2000222c
 8004d00:	200020d7 	.word	0x200020d7
 8004d04:	200020d8 	.word	0x200020d8

08004d08 <ee24_read>:

/*
 * @ brief  Blocking call to read bytes from EEPROM
 */
bool ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af04      	add	r7, sp, #16
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	81fb      	strh	r3, [r7, #14]
	if (ee24_lock == 1) return false;
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <ee24_read+0x70>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <ee24_read+0x1c>
 8004d20:	2300      	movs	r3, #0
 8004d22:	e024      	b.n	8004d6e <ee24_read+0x66>
	ee24_lock = 1;
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <ee24_read+0x70>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	701a      	strb	r2, [r3, #0]

	ee24_result = HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	89fa      	ldrh	r2, [r7, #14]
 8004d30:	2164      	movs	r1, #100	; 0x64
 8004d32:	9102      	str	r1, [sp, #8]
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	21a0      	movs	r1, #160	; 0xa0
 8004d3e:	480f      	ldr	r0, [pc, #60]	; (8004d7c <ee24_read+0x74>)
 8004d40:	f006 fcc0 	bl	800b6c4 <HAL_I2C_Mem_Read>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <ee24_read+0x78>)
 8004d4a:	701a      	strb	r2, [r3, #0]
	//ee24_result = HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len)
	if (ee24_result != HAL_OK )
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <ee24_read+0x78>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <ee24_read+0x5e>
	{
		ee24_ErrorCode = _EEPROM_I2C.ErrorCode;
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <ee24_read+0x74>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <ee24_read+0x7c>)
 8004d5a:	6013      	str	r3, [r2, #0]
		ee24_lock = 0;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <ee24_read+0x70>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
		return false;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e003      	b.n	8004d6e <ee24_read+0x66>
	}
	ee24_lock = 0;
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <ee24_read+0x70>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
	return true;
 8004d6c:	2301      	movs	r3, #1
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200020d6 	.word	0x200020d6
 8004d7c:	2000222c 	.word	0x2000222c
 8004d80:	200020d7 	.word	0x200020d7
 8004d84:	200020d8 	.word	0x200020d8

08004d88 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8004d8c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8004d90:	490d      	ldr	r1, [pc, #52]	; (8004dc8 <start_adcs+0x40>)
 8004d92:	480e      	ldr	r0, [pc, #56]	; (8004dcc <start_adcs+0x44>)
 8004d94:	f004 ff8c 	bl	8009cb0 <HAL_ADC_Start_DMA>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 8004d9e:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <start_adcs+0x48>)
 8004da0:	f001 ff7e 	bl	8006ca0 <term_print>
  	  Error_Handler();
 8004da4:	f001 fb12 	bl	80063cc <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8004da8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8004dac:	4909      	ldr	r1, [pc, #36]	; (8004dd4 <start_adcs+0x4c>)
 8004dae:	480a      	ldr	r0, [pc, #40]	; (8004dd8 <start_adcs+0x50>)
 8004db0:	f004 ff7e 	bl	8009cb0 <HAL_ADC_Start_DMA>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 8004dba:	4808      	ldr	r0, [pc, #32]	; (8004ddc <start_adcs+0x54>)
 8004dbc:	f001 ff70 	bl	8006ca0 <term_print>
 	  Error_Handler();
 8004dc0:	f001 fb04 	bl	80063cc <Error_Handler>
	}
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2000261c 	.word	0x2000261c
 8004dcc:	200020dc 	.word	0x200020dc
 8004dd0:	08013894 	.word	0x08013894
 8004dd4:	2000405c 	.word	0x2000405c
 8004dd8:	20002124 	.word	0x20002124
 8004ddc:	080138b0 	.word	0x080138b0

08004de0 <adjust_TIM2_period>:
 * with every TIM2 call
 * @para newPeriod  New timer value, must be between 2000 and 2500
 * @para store      1 to store value in eeprom
 * @retval          -1 on failure, 0 on success
 */
int adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	460a      	mov	r2, r1
 8004dea:	80fb      	strh	r3, [r7, #6]
 8004dec:	4613      	mov	r3, r2
 8004dee:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d803      	bhi.n	8004e02 <adjust_TIM2_period+0x22>
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e00:	d207      	bcs.n	8004e12 <adjust_TIM2_period+0x32>
		term_print("Invalid period for TIM2 (%u)\r\n", newPeriod);
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	4619      	mov	r1, r3
 8004e06:	481b      	ldr	r0, [pc, #108]	; (8004e74 <adjust_TIM2_period+0x94>)
 8004e08:	f001 ff4a 	bl	8006ca0 <term_print>
		return -1;
 8004e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e10:	e02c      	b.n	8004e6c <adjust_TIM2_period+0x8c>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 8004e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR %u\r\n", newPeriod);
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4816      	ldr	r0, [pc, #88]	; (8004e78 <adjust_TIM2_period+0x98>)
 8004e20:	f001 ff3e 	bl	8006ca0 <term_print>

	if (store) {
 8004e24:	797b      	ldrb	r3, [r7, #5]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01f      	beq.n	8004e6a <adjust_TIM2_period+0x8a>
		// Store new value in EEPROM memory
		eeprom_buf[0] = (newPeriod & 0xFF00) >> 8;	// High byte
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <adjust_TIM2_period+0x9c>)
 8004e34:	701a      	strb	r2, [r3, #0]
		eeprom_buf[1] = newPeriod & 0xFF;			// Low byte
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <adjust_TIM2_period+0x9c>)
 8004e3c:	705a      	strb	r2, [r3, #1]
		if (ee24_write_word(EEPROM_ADDR_TIM2ARR,(uint16_t *) &eeprom_buf) != true ) {
 8004e3e:	490f      	ldr	r1, [pc, #60]	; (8004e7c <adjust_TIM2_period+0x9c>)
 8004e40:	2002      	movs	r0, #2
 8004e42:	f7ff fe67 	bl	8004b14 <ee24_write_word>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f083 0301 	eor.w	r3, r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <adjust_TIM2_period+0x80>
			term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8004e52:	490b      	ldr	r1, [pc, #44]	; (8004e80 <adjust_TIM2_period+0xa0>)
 8004e54:	480b      	ldr	r0, [pc, #44]	; (8004e84 <adjust_TIM2_period+0xa4>)
 8004e56:	f001 ff23 	bl	8006ca0 <term_print>
			return -1;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5e:	e005      	b.n	8004e6c <adjust_TIM2_period+0x8c>
		} else {
			term_print("TIM2 ARR %u saved to EEPROM\r\n", newPeriod);
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4808      	ldr	r0, [pc, #32]	; (8004e88 <adjust_TIM2_period+0xa8>)
 8004e66:	f001 ff1b 	bl	8006ca0 <term_print>
		}
	}
	return 0;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	080138cc 	.word	0x080138cc
 8004e78:	080138ec 	.word	0x080138ec
 8004e7c:	200025dc 	.word	0x200025dc
 8004e80:	08019028 	.word	0x08019028
 8004e84:	080138fc 	.word	0x080138fc
 8004e88:	08013920 	.word	0x08013920

08004e8c <adjust_TIM3_period>:

int adjust_TIM3_period(uint16_t newPeriod, uint8_t store) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	460a      	mov	r2, r1
 8004e96:	80fb      	strh	r3, [r7, #6]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 1500) || (newPeriod < 500) ) {
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d803      	bhi.n	8004eae <adjust_TIM3_period+0x22>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eac:	d207      	bcs.n	8004ebe <adjust_TIM3_period+0x32>
		term_print("Invalid period for TIM3 (%u)\r\n", newPeriod);
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	481b      	ldr	r0, [pc, #108]	; (8004f20 <adjust_TIM3_period+0x94>)
 8004eb4:	f001 fef4 	bl	8006ca0 <term_print>
		return -1;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ebc:	e02c      	b.n	8004f18 <adjust_TIM3_period+0x8c>
	}
	TIM3->ARR = (uint32_t) newPeriod;	// change register directly
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <adjust_TIM3_period+0x98>)
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM3 ARR %u\r\n", TIM3->ARR);
 8004ec4:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <adjust_TIM3_period+0x98>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4817      	ldr	r0, [pc, #92]	; (8004f28 <adjust_TIM3_period+0x9c>)
 8004ecc:	f001 fee8 	bl	8006ca0 <term_print>

	if (store) {
 8004ed0:	797b      	ldrb	r3, [r7, #5]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01f      	beq.n	8004f16 <adjust_TIM3_period+0x8a>
		// Store new value in EEPROM memory
		eeprom_buf[0] = (newPeriod & 0xFF00) >> 8;	// High byte
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <adjust_TIM3_period+0xa0>)
 8004ee0:	701a      	strb	r2, [r3, #0]
		eeprom_buf[1] = newPeriod & 0xFF;			// Low byte
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <adjust_TIM3_period+0xa0>)
 8004ee8:	705a      	strb	r2, [r3, #1]
		if (ee24_write_word(EEPROM_ADDR_TIM3ARR,(uint16_t *) &eeprom_buf) != true ) {
 8004eea:	4910      	ldr	r1, [pc, #64]	; (8004f2c <adjust_TIM3_period+0xa0>)
 8004eec:	2006      	movs	r0, #6
 8004eee:	f7ff fe11 	bl	8004b14 <ee24_write_word>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f083 0301 	eor.w	r3, r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <adjust_TIM3_period+0x80>
			term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8004efe:	490c      	ldr	r1, [pc, #48]	; (8004f30 <adjust_TIM3_period+0xa4>)
 8004f00:	480c      	ldr	r0, [pc, #48]	; (8004f34 <adjust_TIM3_period+0xa8>)
 8004f02:	f001 fecd 	bl	8006ca0 <term_print>
			return -1;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f0a:	e005      	b.n	8004f18 <adjust_TIM3_period+0x8c>
		} else {
			term_print("TIM3 ARR %u saved to EEPROM\r\n", newPeriod);
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4809      	ldr	r0, [pc, #36]	; (8004f38 <adjust_TIM3_period+0xac>)
 8004f12:	f001 fec5 	bl	8006ca0 <term_print>
		}
	}
	return 0;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08013940 	.word	0x08013940
 8004f24:	40000400 	.word	0x40000400
 8004f28:	08013960 	.word	0x08013960
 8004f2c:	200025dc 	.word	0x200025dc
 8004f30:	0801903c 	.word	0x0801903c
 8004f34:	080138fc 	.word	0x080138fc
 8004f38:	08013970 	.word	0x08013970

08004f3c <set_modbus_address>:


int set_modbus_address(uint8_t newAddress, uint8_t store) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	460a      	mov	r2, r1
 8004f46:	71fb      	strb	r3, [r7, #7]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71bb      	strb	r3, [r7, #6]
	if ((newAddress > 254) || (newAddress < 2)) {
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	2bff      	cmp	r3, #255	; 0xff
 8004f50:	d002      	beq.n	8004f58 <set_modbus_address+0x1c>
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d807      	bhi.n	8004f68 <set_modbus_address+0x2c>
		term_print("Invalid Modbus Address (%d)\r\n", newAddress);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4817      	ldr	r0, [pc, #92]	; (8004fbc <set_modbus_address+0x80>)
 8004f5e:	f001 fe9f 	bl	8006ca0 <term_print>
		return -1;
 8004f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f66:	e025      	b.n	8004fb4 <set_modbus_address+0x78>
	}
	modbus_address = newAddress;
 8004f68:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <set_modbus_address+0x84>)
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	7013      	strb	r3, [r2, #0]
	term_print("Modbus %d\r\n",modbus_address);
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <set_modbus_address+0x84>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	4619      	mov	r1, r3
 8004f74:	4813      	ldr	r0, [pc, #76]	; (8004fc4 <set_modbus_address+0x88>)
 8004f76:	f001 fe93 	bl	8006ca0 <term_print>
	if (store) {
 8004f7a:	79bb      	ldrb	r3, [r7, #6]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d018      	beq.n	8004fb2 <set_modbus_address+0x76>
		// Store new value in EEPROM memory
		eeprom_buf[0] = newAddress;
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <set_modbus_address+0x8c>)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	7013      	strb	r3, [r2, #0]
		if (ee24_write_byte(EEPROM_ADDR_MODBUSADDR, (uint8_t*) &eeprom_buf) != true ) {
 8004f86:	4910      	ldr	r1, [pc, #64]	; (8004fc8 <set_modbus_address+0x8c>)
 8004f88:	2004      	movs	r0, #4
 8004f8a:	f7ff fd87 	bl	8004a9c <ee24_write_byte>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f083 0301 	eor.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <set_modbus_address+0x6c>
			term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8004f9a:	490c      	ldr	r1, [pc, #48]	; (8004fcc <set_modbus_address+0x90>)
 8004f9c:	480c      	ldr	r0, [pc, #48]	; (8004fd0 <set_modbus_address+0x94>)
 8004f9e:	f001 fe7f 	bl	8006ca0 <term_print>
			return -1;
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa6:	e005      	b.n	8004fb4 <set_modbus_address+0x78>
		} else {
			term_print("Modbus Address %d saved to EEPROM\r\n", newAddress);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	4619      	mov	r1, r3
 8004fac:	4809      	ldr	r0, [pc, #36]	; (8004fd4 <set_modbus_address+0x98>)
 8004fae:	f001 fe77 	bl	8006ca0 <term_print>
		}
	}
	return 0;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	08013990 	.word	0x08013990
 8004fc0:	200025d8 	.word	0x200025d8
 8004fc4:	080139b0 	.word	0x080139b0
 8004fc8:	200025dc 	.word	0x200025dc
 8004fcc:	08019050 	.word	0x08019050
 8004fd0:	080138fc 	.word	0x080138fc
 8004fd4:	080139bc 	.word	0x080139bc

08004fd8 <energy_totals_init>:
/*
 * @brief        Initialise energy totals from eeprom
 * @para reset   1 = reset energy values to zero and write to eeprom
 * @retval       0 on success, -1 on failure
 */
int energy_totals_init(uint8_t reset) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
	int i;

	// read VAh from eeprom
	if ( ee24_read(EEPROM_ADDR_VAH, (uint8_t*) &eeprom_buf, 12, 100) != true ) {
 8004fe2:	2364      	movs	r3, #100	; 0x64
 8004fe4:	220c      	movs	r2, #12
 8004fe6:	4952      	ldr	r1, [pc, #328]	; (8005130 <energy_totals_init+0x158>)
 8004fe8:	20d0      	movs	r0, #208	; 0xd0
 8004fea:	f7ff fe8d 	bl	8004d08 <ee24_read>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f083 0301 	eor.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <energy_totals_init+0x28>
		return -1;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ffe:	e092      	b.n	8005126 <energy_totals_init+0x14e>
	}

	// check if we have a blank eeprom (all bytes 0xFF)
	for (i=0; i<12; i++){
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e009      	b.n	800501a <energy_totals_init+0x42>
		if (eeprom_buf[i] != 0xFF) break;	// abort loop if we have valid entry
 8005006:	4a4a      	ldr	r2, [pc, #296]	; (8005130 <energy_totals_init+0x158>)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2bff      	cmp	r3, #255	; 0xff
 8005012:	d106      	bne.n	8005022 <energy_totals_init+0x4a>
	for (i=0; i<12; i++){
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b0b      	cmp	r3, #11
 800501e:	ddf2      	ble.n	8005006 <energy_totals_init+0x2e>
 8005020:	e000      	b.n	8005024 <energy_totals_init+0x4c>
		if (eeprom_buf[i] != 0xFF) break;	// abort loop if we have valid entry
 8005022:	bf00      	nop
	}
	if ((i >= 12) || (reset) ) {		// if all bytes were 0xFF (blank eeprom) or reset request
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b0b      	cmp	r3, #11
 8005028:	dc02      	bgt.n	8005030 <energy_totals_init+0x58>
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d03c      	beq.n	80050aa <energy_totals_init+0xd2>
		term_print("Init EEPROM with energy totals\r\n");
 8005030:	4840      	ldr	r0, [pc, #256]	; (8005134 <energy_totals_init+0x15c>)
 8005032:	f001 fe35 	bl	8006ca0 <term_print>
		for (i=0; i<12; i++) {		// fill eeprom buffer with zero values
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	e007      	b.n	800504c <energy_totals_init+0x74>
			eeprom_buf[i] = 0;
 800503c:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <energy_totals_init+0x158>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
		for (i=0; i<12; i++) {		// fill eeprom buffer with zero values
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b0b      	cmp	r3, #11
 8005050:	ddf4      	ble.n	800503c <energy_totals_init+0x64>
		}
		HAL_Delay(EEPROM_DELAY);
 8005052:	2004      	movs	r0, #4
 8005054:	f004 fdc4 	bl	8009be0 <HAL_Delay>
		if (ee24_write(EEPROM_ADDR_VAH, (uint8_t*) &eeprom_buf, 12, 100) != true ) {
 8005058:	2364      	movs	r3, #100	; 0x64
 800505a:	220c      	movs	r2, #12
 800505c:	4934      	ldr	r1, [pc, #208]	; (8005130 <energy_totals_init+0x158>)
 800505e:	20d0      	movs	r0, #208	; 0xd0
 8005060:	f7ff fd94 	bl	8004b8c <ee24_write>
 8005064:	4603      	mov	r3, r0
 8005066:	f083 0301 	eor.w	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <energy_totals_init+0xa6>
			term_print("%s() - Error: EEPROM init VAh failed\r\n", __FUNCTION__);
 8005070:	4931      	ldr	r1, [pc, #196]	; (8005138 <energy_totals_init+0x160>)
 8005072:	4832      	ldr	r0, [pc, #200]	; (800513c <energy_totals_init+0x164>)
 8005074:	f001 fe14 	bl	8006ca0 <term_print>
			return -1;
 8005078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800507c:	e053      	b.n	8005126 <energy_totals_init+0x14e>
		}
		HAL_Delay(EEPROM_DELAY);
 800507e:	2004      	movs	r0, #4
 8005080:	f004 fdae 	bl	8009be0 <HAL_Delay>
		if (ee24_write(EEPROM_ADDR_WH, (uint8_t*) &eeprom_buf, 12, 100) != true ) {
 8005084:	2364      	movs	r3, #100	; 0x64
 8005086:	220c      	movs	r2, #12
 8005088:	4929      	ldr	r1, [pc, #164]	; (8005130 <energy_totals_init+0x158>)
 800508a:	20e0      	movs	r0, #224	; 0xe0
 800508c:	f7ff fd7e 	bl	8004b8c <ee24_write>
 8005090:	4603      	mov	r3, r0
 8005092:	f083 0301 	eor.w	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d006      	beq.n	80050aa <energy_totals_init+0xd2>
			term_print("%s() - Error: EEPROM init Wh failed\r\n", __FUNCTION__);
 800509c:	4926      	ldr	r1, [pc, #152]	; (8005138 <energy_totals_init+0x160>)
 800509e:	4828      	ldr	r0, [pc, #160]	; (8005140 <energy_totals_init+0x168>)
 80050a0:	f001 fdfe 	bl	8006ca0 <term_print>
			return -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050a8:	e03d      	b.n	8005126 <energy_totals_init+0x14e>
		}
	}

	//term_print_hex((uint8_t*) &eeprom_buf, 12, 0);
	// move values into variables
	memcpy(&total_vah[0], (uint8_t*) &eeprom_buf, 12);
 80050aa:	220c      	movs	r2, #12
 80050ac:	4920      	ldr	r1, [pc, #128]	; (8005130 <energy_totals_init+0x158>)
 80050ae:	4825      	ldr	r0, [pc, #148]	; (8005144 <energy_totals_init+0x16c>)
 80050b0:	f00b fa2b 	bl	801050a <memcpy>


	// read Wh from eeprom
	HAL_Delay(EEPROM_DELAY);
 80050b4:	2004      	movs	r0, #4
 80050b6:	f004 fd93 	bl	8009be0 <HAL_Delay>
	if (ee24_read(EEPROM_ADDR_WH, (uint8_t*) &eeprom_buf, 12, 100) == true) {
 80050ba:	2364      	movs	r3, #100	; 0x64
 80050bc:	220c      	movs	r2, #12
 80050be:	491c      	ldr	r1, [pc, #112]	; (8005130 <energy_totals_init+0x158>)
 80050c0:	20e0      	movs	r0, #224	; 0xe0
 80050c2:	f7ff fe21 	bl	8004d08 <ee24_read>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <energy_totals_init+0xfe>
		//term_print_hex((uint8_t*) &eeprom_buf, 12, 0);
		memcpy(&total_wh[0], (uint8_t*) &eeprom_buf, 12);
 80050cc:	220c      	movs	r2, #12
 80050ce:	4918      	ldr	r1, [pc, #96]	; (8005130 <energy_totals_init+0x158>)
 80050d0:	481d      	ldr	r0, [pc, #116]	; (8005148 <energy_totals_init+0x170>)
 80050d2:	f00b fa1a 	bl	801050a <memcpy>
	}

	// initialise precision values
	for (i=0; i<3; i++) {
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e020      	b.n	800511e <energy_totals_init+0x146>
		total_precision_vah[i] = (double) total_vah[i];
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <energy_totals_init+0x16c>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb fa2d 	bl	8000544 <__aeabi_ui2d>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4817      	ldr	r0, [pc, #92]	; (800514c <energy_totals_init+0x174>)
 80050f0:	68f9      	ldr	r1, [r7, #12]
 80050f2:	00c9      	lsls	r1, r1, #3
 80050f4:	4401      	add	r1, r0
 80050f6:	e9c1 2300 	strd	r2, r3, [r1]
		total_precision_wh[i] = (double) total_wh[i];
 80050fa:	4a13      	ldr	r2, [pc, #76]	; (8005148 <energy_totals_init+0x170>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb fa1e 	bl	8000544 <__aeabi_ui2d>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4810      	ldr	r0, [pc, #64]	; (8005150 <energy_totals_init+0x178>)
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	00c9      	lsls	r1, r1, #3
 8005112:	4401      	add	r1, r0
 8005114:	e9c1 2300 	strd	r2, r3, [r1]
	for (i=0; i<3; i++) {
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b02      	cmp	r3, #2
 8005122:	dddb      	ble.n	80050dc <energy_totals_init+0x104>
	}
	return 0;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200025dc 	.word	0x200025dc
 8005134:	080139e0 	.word	0x080139e0
 8005138:	08019064 	.word	0x08019064
 800513c:	08013a04 	.word	0x08013a04
 8005140:	08013a2c 	.word	0x08013a2c
 8005144:	20008250 	.word	0x20008250
 8005148:	2000825c 	.word	0x2000825c
 800514c:	20008220 	.word	0x20008220
 8005150:	20008238 	.word	0x20008238

08005154 <version_change>:
}

/*
 * @brief  Function to manage version change and update stored parameters
 */
void version_change(uint8_t old_major, uint8_t old_minor) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	460a      	mov	r2, r1
 800515e:	71fb      	strb	r3, [r7, #7]
 8005160:	4613      	mov	r3, r2
 8005162:	71bb      	strb	r3, [r7, #6]
	// update version number in EEPROM
	eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <version_change+0x40>)
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <version_change+0x40>)
 800516c:	2202      	movs	r2, #2
 800516e:	705a      	strb	r2, [r3, #1]
	if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 8005170:	4908      	ldr	r1, [pc, #32]	; (8005194 <version_change+0x40>)
 8005172:	2000      	movs	r0, #0
 8005174:	f7ff fcce 	bl	8004b14 <ee24_write_word>
 8005178:	4603      	mov	r3, r0
 800517a:	f083 0301 	eor.w	r3, r3, #1
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <version_change+0x38>
		term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 8005184:	4904      	ldr	r1, [pc, #16]	; (8005198 <version_change+0x44>)
 8005186:	4805      	ldr	r0, [pc, #20]	; (800519c <version_change+0x48>)
 8005188:	f001 fd8a 	bl	8006ca0 <term_print>
	}
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	200025dc 	.word	0x200025dc
 8005198:	08019078 	.word	0x08019078
 800519c:	080138fc 	.word	0x080138fc

080051a0 <eeprom>:

void eeprom() {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
	if (!ee24_isConnected()) {
 80051a6:	f7ff fc67 	bl	8004a78 <ee24_isConnected>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f083 0301 	eor.w	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <eeprom+0x20>
		  term_print("%s() - Error: EEPROM not found\r\n", __FUNCTION__);
 80051b6:	4966      	ldr	r1, [pc, #408]	; (8005350 <eeprom+0x1b0>)
 80051b8:	4866      	ldr	r0, [pc, #408]	; (8005354 <eeprom+0x1b4>)
 80051ba:	f001 fd71 	bl	8006ca0 <term_print>

			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
			energy_totals_init(0);
		}
	}
}
 80051be:	e0c3      	b.n	8005348 <eeprom+0x1a8>
		  if (ee24_read_word(EEPROM_ADDR_VERSION, (uint16_t *) &eeprom_buf) != true) {
 80051c0:	4965      	ldr	r1, [pc, #404]	; (8005358 <eeprom+0x1b8>)
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7ff fd62 	bl	8004c8c <ee24_read_word>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f083 0301 	eor.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <eeprom+0x3c>
			  term_print("Error: EEPROM read error\r\n");
 80051d4:	4861      	ldr	r0, [pc, #388]	; (800535c <eeprom+0x1bc>)
 80051d6:	f001 fd63 	bl	8006ca0 <term_print>
}
 80051da:	e0b5      	b.n	8005348 <eeprom+0x1a8>
			ee24_is_present = true;
 80051dc:	4b60      	ldr	r3, [pc, #384]	; (8005360 <eeprom+0x1c0>)
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
			if ((eeprom_buf[0] == 0xFF) && (eeprom_buf[1] == 0xFF)) {		// new/blank EEPROM
 80051e2:	4b5d      	ldr	r3, [pc, #372]	; (8005358 <eeprom+0x1b8>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d11c      	bne.n	8005226 <eeprom+0x86>
 80051ec:	4b5a      	ldr	r3, [pc, #360]	; (8005358 <eeprom+0x1b8>)
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2bff      	cmp	r3, #255	; 0xff
 80051f4:	d117      	bne.n	8005226 <eeprom+0x86>
				eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80051f6:	4b58      	ldr	r3, [pc, #352]	; (8005358 <eeprom+0x1b8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	4b56      	ldr	r3, [pc, #344]	; (8005358 <eeprom+0x1b8>)
 80051fe:	2202      	movs	r2, #2
 8005200:	705a      	strb	r2, [r3, #1]
				term_print("Updating Version in EEPROM\r\n", __FUNCTION__);
 8005202:	4953      	ldr	r1, [pc, #332]	; (8005350 <eeprom+0x1b0>)
 8005204:	4857      	ldr	r0, [pc, #348]	; (8005364 <eeprom+0x1c4>)
 8005206:	f001 fd4b 	bl	8006ca0 <term_print>
				if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 800520a:	4953      	ldr	r1, [pc, #332]	; (8005358 <eeprom+0x1b8>)
 800520c:	2000      	movs	r0, #0
 800520e:	f7ff fc81 	bl	8004b14 <ee24_write_word>
 8005212:	4603      	mov	r3, r0
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <eeprom+0x86>
					term_print("%s() - Error: EEPROM write failed\r\n", __FUNCTION__);
 800521e:	494c      	ldr	r1, [pc, #304]	; (8005350 <eeprom+0x1b0>)
 8005220:	4851      	ldr	r0, [pc, #324]	; (8005368 <eeprom+0x1c8>)
 8005222:	f001 fd3d 	bl	8006ca0 <term_print>
			if ((eeprom_buf[0]!=VERSION_MAJOR) || (eeprom_buf[0]!=VERSION_MINOR)) {
 8005226:	4b4c      	ldr	r3, [pc, #304]	; (8005358 <eeprom+0x1b8>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <eeprom+0x9a>
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <eeprom+0x1b8>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d009      	beq.n	800524e <eeprom+0xae>
				version_change(eeprom_buf[0], eeprom_buf[1]);
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <eeprom+0x1b8>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	4a45      	ldr	r2, [pc, #276]	; (8005358 <eeprom+0x1b8>)
 8005242:	7852      	ldrb	r2, [r2, #1]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff83 	bl	8005154 <version_change>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 800524e:	2004      	movs	r0, #4
 8005250:	f004 fcc6 	bl	8009be0 <HAL_Delay>
			if (ee24_read_word(EEPROM_ADDR_TIM2ARR, (uint16_t *) &eeprom_buf) == true) {
 8005254:	4940      	ldr	r1, [pc, #256]	; (8005358 <eeprom+0x1b8>)
 8005256:	2002      	movs	r0, #2
 8005258:	f7ff fd18 	bl	8004c8c <ee24_read_word>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01a      	beq.n	8005298 <eeprom+0xf8>
				uint16_t value = eeprom_buf[0]*256 + eeprom_buf[1];
 8005262:	4b3d      	ldr	r3, [pc, #244]	; (8005358 <eeprom+0x1b8>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	b29b      	uxth	r3, r3
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	b29a      	uxth	r2, r3
 800526e:	4b3a      	ldr	r3, [pc, #232]	; (8005358 <eeprom+0x1b8>)
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	4413      	add	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
				if (adjust_TIM2_period(value, 0) < 0) {		// adjust timer value, don't store
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fdae 	bl	8004de0 <adjust_TIM2_period>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	da14      	bge.n	80052b4 <eeprom+0x114>
					term_print("%s() - Unable to write %u to TIM2_ARR\r\n", __FUNCTION__, value);
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	461a      	mov	r2, r3
 800528e:	4930      	ldr	r1, [pc, #192]	; (8005350 <eeprom+0x1b0>)
 8005290:	4836      	ldr	r0, [pc, #216]	; (800536c <eeprom+0x1cc>)
 8005292:	f001 fd05 	bl	8006ca0 <term_print>
 8005296:	e00d      	b.n	80052b4 <eeprom+0x114>
				term_print("%s() - EEPROM read error (ee24_ErrorCode = %u)\r\n", __FUNCTION__, ee24_ErrorCode);
 8005298:	4b35      	ldr	r3, [pc, #212]	; (8005370 <eeprom+0x1d0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	492c      	ldr	r1, [pc, #176]	; (8005350 <eeprom+0x1b0>)
 80052a0:	4834      	ldr	r0, [pc, #208]	; (8005374 <eeprom+0x1d4>)
 80052a2:	f001 fcfd 	bl	8006ca0 <term_print>
				term_print("TIM2 ARR %d\r\n",TIM2->ARR);
 80052a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4619      	mov	r1, r3
 80052ae:	4832      	ldr	r0, [pc, #200]	; (8005378 <eeprom+0x1d8>)
 80052b0:	f001 fcf6 	bl	8006ca0 <term_print>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 80052b4:	2004      	movs	r0, #4
 80052b6:	f004 fc93 	bl	8009be0 <HAL_Delay>
			if (ee24_read_word(EEPROM_ADDR_TIM3ARR, (uint16_t *) &eeprom_buf) == true) {
 80052ba:	4927      	ldr	r1, [pc, #156]	; (8005358 <eeprom+0x1b8>)
 80052bc:	2006      	movs	r0, #6
 80052be:	f7ff fce5 	bl	8004c8c <ee24_read_word>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <eeprom+0x15e>
				uint16_t value = eeprom_buf[0]*256 + eeprom_buf[1];
 80052c8:	4b23      	ldr	r3, [pc, #140]	; (8005358 <eeprom+0x1b8>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	4b20      	ldr	r3, [pc, #128]	; (8005358 <eeprom+0x1b8>)
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	b29b      	uxth	r3, r3
 80052dc:	4413      	add	r3, r2
 80052de:	80bb      	strh	r3, [r7, #4]
				if (adjust_TIM3_period(value, 0) < 0) {		// adjust timer value, don't store
 80052e0:	88bb      	ldrh	r3, [r7, #4]
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fdd1 	bl	8004e8c <adjust_TIM3_period>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da14      	bge.n	800531a <eeprom+0x17a>
					term_print("%s() - Unable to write %u to TIM3_ARR\r\n", __FUNCTION__, value);
 80052f0:	88bb      	ldrh	r3, [r7, #4]
 80052f2:	461a      	mov	r2, r3
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <eeprom+0x1b0>)
 80052f6:	4821      	ldr	r0, [pc, #132]	; (800537c <eeprom+0x1dc>)
 80052f8:	f001 fcd2 	bl	8006ca0 <term_print>
 80052fc:	e00d      	b.n	800531a <eeprom+0x17a>
				term_print("%s() - EEPROM read error (ee24_ErrorCode = %u)\r\n", __FUNCTION__, ee24_ErrorCode);
 80052fe:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <eeprom+0x1d0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	4912      	ldr	r1, [pc, #72]	; (8005350 <eeprom+0x1b0>)
 8005306:	481b      	ldr	r0, [pc, #108]	; (8005374 <eeprom+0x1d4>)
 8005308:	f001 fcca 	bl	8006ca0 <term_print>
				term_print("TIM3 ARR %d\r\n",TIM2->ARR);
 800530c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4619      	mov	r1, r3
 8005314:	481a      	ldr	r0, [pc, #104]	; (8005380 <eeprom+0x1e0>)
 8005316:	f001 fcc3 	bl	8006ca0 <term_print>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 800531a:	2004      	movs	r0, #4
 800531c:	f004 fc60 	bl	8009be0 <HAL_Delay>
			if (ee24_read_byte(EEPROM_ADDR_MODBUSADDR, (uint8_t*) &eeprom_buf) == true) {
 8005320:	490d      	ldr	r1, [pc, #52]	; (8005358 <eeprom+0x1b8>)
 8005322:	2004      	movs	r0, #4
 8005324:	f7ff fc74 	bl	8004c10 <ee24_read_byte>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d006      	beq.n	800533c <eeprom+0x19c>
				set_modbus_address(eeprom_buf[0], 0);
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <eeprom+0x1b8>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fe00 	bl	8004f3c <set_modbus_address>
			HAL_Delay(EEPROM_DELAY);		// Minimum delay between EEPROM access
 800533c:	2004      	movs	r0, #4
 800533e:	f004 fc4f 	bl	8009be0 <HAL_Delay>
			energy_totals_init(0);
 8005342:	2000      	movs	r0, #0
 8005344:	f7ff fe48 	bl	8004fd8 <energy_totals_init>
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	08019088 	.word	0x08019088
 8005354:	08013a54 	.word	0x08013a54
 8005358:	200025dc 	.word	0x200025dc
 800535c:	08013a78 	.word	0x08013a78
 8005360:	200025fc 	.word	0x200025fc
 8005364:	08013a94 	.word	0x08013a94
 8005368:	080138fc 	.word	0x080138fc
 800536c:	08013ab4 	.word	0x08013ab4
 8005370:	200020d8 	.word	0x200020d8
 8005374:	08013adc 	.word	0x08013adc
 8005378:	08013b10 	.word	0x08013b10
 800537c:	08013b20 	.word	0x08013b20
 8005380:	08013b48 	.word	0x08013b48

08005384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800538a:	f004 fbb7 	bl	8009afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800538e:	f000 fb21 	bl	80059d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005392:	f000 fde1 	bl	8005f58 <MX_GPIO_Init>
  MX_DMA_Init();
 8005396:	f000 fda1 	bl	8005edc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800539a:	f000 fd4b 	bl	8005e34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800539e:	f000 fcaf 	bl	8005d00 <MX_TIM2_Init>
  MX_ADC1_Init();
 80053a2:	f000 fb89 	bl	8005ab8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80053a6:	f000 fbe7 	bl	8005b78 <MX_ADC2_Init>
  MX_SPI2_Init();
 80053aa:	f000 fc73 	bl	8005c94 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80053ae:	f000 fd6b 	bl	8005e88 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80053b2:	f000 fc41 	bl	8005c38 <MX_I2C1_Init>
  MX_TIM3_Init();
 80053b6:	f000 fcef 	bl	8005d98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  eeprom();	// Load values from EEPROM
 80053ba:	f7ff fef1 	bl	80051a0 <eeprom>

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80053be:	f7fd ff45 	bl	800324c <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 80053c2:	2201      	movs	r2, #1
 80053c4:	499d      	ldr	r1, [pc, #628]	; (800563c <main+0x2b8>)
 80053c6:	489e      	ldr	r0, [pc, #632]	; (8005640 <main+0x2bc>)
 80053c8:	f009 f89f 	bl	800e50a <HAL_UART_Receive_IT>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <main+0x52>
    Error_Handler();
 80053d2:	f000 fffb 	bl	80063cc <Error_Handler>
  }
#ifdef USE_WIFI
  // Start ESP UART receive via interrupt
  if (HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) != HAL_OK) {
 80053d6:	2201      	movs	r2, #1
 80053d8:	499a      	ldr	r1, [pc, #616]	; (8005644 <main+0x2c0>)
 80053da:	489b      	ldr	r0, [pc, #620]	; (8005648 <main+0x2c4>)
 80053dc:	f009 f895 	bl	800e50a <HAL_UART_Receive_IT>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <main+0x66>
      Error_Handler();
 80053e6:	f000 fff1 	bl	80063cc <Error_Handler>
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80053ea:	4898      	ldr	r0, [pc, #608]	; (800564c <main+0x2c8>)
 80053ec:	f008 fb7c 	bl	800dae8 <HAL_TIM_Base_Start_IT>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <main+0x76>
     Error_Handler();
 80053f6:	f000 ffe9 	bl	80063cc <Error_Handler>
  }

  // Start Timer for Energy integration
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 80053fa:	4895      	ldr	r0, [pc, #596]	; (8005650 <main+0x2cc>)
 80053fc:	f008 fb74 	bl	800dae8 <HAL_TIM_Base_Start_IT>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <main+0x86>
       Error_Handler();
 8005406:	f000 ffe1 	bl	80063cc <Error_Handler>
    }

  // Start ADCs
  start_adcs();
 800540a:	f7ff fcbd 	bl	8004d88 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 800540e:	f7fd ff3f 	bl	8003290 <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 8005412:	f004 fbd9 	bl	8009bc8 <HAL_GetTick>
 8005416:	4603      	mov	r3, r0
 8005418:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800541c:	4a8d      	ldr	r2, [pc, #564]	; (8005654 <main+0x2d0>)
 800541e:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8005420:	4b8d      	ldr	r3, [pc, #564]	; (8005658 <main+0x2d4>)
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	2302      	movs	r3, #2
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	4a8c      	ldr	r2, [pc, #560]	; (800565c <main+0x2d8>)
 800542c:	498c      	ldr	r1, [pc, #560]	; (8005660 <main+0x2dc>)
 800542e:	488d      	ldr	r0, [pc, #564]	; (8005664 <main+0x2e0>)
 8005430:	f00a fd5e 	bl	800fef0 <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8005434:	488b      	ldr	r0, [pc, #556]	; (8005664 <main+0x2e0>)
 8005436:	f7fa ff3b 	bl	80002b0 <strlen>
 800543a:	4603      	mov	r3, r0
 800543c:	b29a      	uxth	r2, r3
 800543e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005442:	4988      	ldr	r1, [pc, #544]	; (8005664 <main+0x2e0>)
 8005444:	487e      	ldr	r0, [pc, #504]	; (8005640 <main+0x2bc>)
 8005446:	f008 ffce 	bl	800e3e6 <HAL_UART_Transmit>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <main+0xd0>
	  Error_Handler();
 8005450:	f000 ffbc 	bl	80063cc <Error_Handler>
  }

#ifdef USE_WIFI
  // Enable ESP 01
  HAL_GPIO_WritePin (ESP01_EN_GPIO_Port, ESP01_EN_Pin, GPIO_PIN_SET);
 8005454:	2201      	movs	r2, #1
 8005456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800545a:	4883      	ldr	r0, [pc, #524]	; (8005668 <main+0x2e4>)
 800545c:	f005 fea8 	bl	800b1b0 <HAL_GPIO_WritePin>
  // Perform reset
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_RESET);
 8005460:	2200      	movs	r2, #0
 8005462:	2180      	movs	r1, #128	; 0x80
 8005464:	4881      	ldr	r0, [pc, #516]	; (800566c <main+0x2e8>)
 8005466:	f005 fea3 	bl	800b1b0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800546a:	2064      	movs	r0, #100	; 0x64
 800546c:	f004 fbb8 	bl	8009be0 <HAL_Delay>
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_SET);
 8005470:	2201      	movs	r2, #1
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	487d      	ldr	r0, [pc, #500]	; (800566c <main+0x2e8>)
 8005476:	f005 fe9b 	bl	800b1b0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 800547a:	f004 fba5 	bl	8009bc8 <HAL_GetTick>
 800547e:	4603      	mov	r3, r0
 8005480:	3364      	adds	r3, #100	; 0x64
 8005482:	4a7b      	ldr	r2, [pc, #492]	; (8005670 <main+0x2ec>)
 8005484:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 8005486:	f004 fb9f 	bl	8009bc8 <HAL_GetTick>
 800548a:	4603      	mov	r3, r0
 800548c:	3364      	adds	r3, #100	; 0x64
 800548e:	4a79      	ldr	r2, [pc, #484]	; (8005674 <main+0x2f0>)
 8005490:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 8005492:	f004 fb99 	bl	8009bc8 <HAL_GetTick>
 8005496:	4603      	mov	r3, r0
 8005498:	4a77      	ldr	r2, [pc, #476]	; (8005678 <main+0x2f4>)
 800549a:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 800549c:	4b76      	ldr	r3, [pc, #472]	; (8005678 <main+0x2f4>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b76      	ldr	r3, [pc, #472]	; (800567c <main+0x2f8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d21b      	bcs.n	80054e0 <main+0x15c>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80054a8:	4b73      	ldr	r3, [pc, #460]	; (8005678 <main+0x2f4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3364      	adds	r3, #100	; 0x64
 80054ae:	4a70      	ldr	r2, [pc, #448]	; (8005670 <main+0x2ec>)
 80054b0:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 80054b2:	4b73      	ldr	r3, [pc, #460]	; (8005680 <main+0x2fc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <main+0x146>
 80054ba:	4b6f      	ldr	r3, [pc, #444]	; (8005678 <main+0x2f4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80054c2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80054c6:	4a6e      	ldr	r2, [pc, #440]	; (8005680 <main+0x2fc>)
 80054c8:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 80054ca:	4b6b      	ldr	r3, [pc, #428]	; (8005678 <main+0x2f4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80054d2:	4a6c      	ldr	r2, [pc, #432]	; (8005684 <main+0x300>)
 80054d4:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80054d6:	4b68      	ldr	r3, [pc, #416]	; (8005678 <main+0x2f4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3364      	adds	r3, #100	; 0x64
 80054dc:	4a65      	ldr	r2, [pc, #404]	; (8005674 <main+0x2f0>)
 80054de:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80054e0:	4b65      	ldr	r3, [pc, #404]	; (8005678 <main+0x2f4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a65      	ldr	r2, [pc, #404]	; (800567c <main+0x2f8>)
 80054e6:	6013      	str	r3, [r2, #0]

	// perform measurements and update the display
	if ( now_ticks >= next_measurement_time ) {
 80054e8:	4b63      	ldr	r3, [pc, #396]	; (8005678 <main+0x2f4>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <main+0x2f0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d330      	bcc.n	8005556 <main+0x1d2>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80054f4:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <main+0x2f0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3364      	adds	r3, #100	; 0x64
 80054fa:	4a5e      	ldr	r2, [pc, #376]	; (8005674 <main+0x2f0>)
 80054fc:	6013      	str	r3, [r2, #0]
#ifdef DEBUG
		measure_ticks = HAL_GetTick();
 80054fe:	f004 fb63 	bl	8009bc8 <HAL_GetTick>
 8005502:	4603      	mov	r3, r0
 8005504:	4a60      	ldr	r2, [pc, #384]	; (8005688 <main+0x304>)
 8005506:	6013      	str	r3, [r2, #0]
#endif
		calc_measurements();
 8005508:	f7fc fa82 	bl	8001a10 <calc_measurements>
#ifdef DEBUG
		calc_ticks = HAL_GetTick() - measure_ticks;		// calculation execution time
 800550c:	f004 fb5c 	bl	8009bc8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	4b5d      	ldr	r3, [pc, #372]	; (8005688 <main+0x304>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	4a5c      	ldr	r2, [pc, #368]	; (800568c <main+0x308>)
 800551a:	6013      	str	r3, [r2, #0]
#endif

#ifdef USE_DISPLAY
		// update meter display, only if display is visible ( backlight on )
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 800551c:	2140      	movs	r1, #64	; 0x40
 800551e:	4852      	ldr	r0, [pc, #328]	; (8005668 <main+0x2e4>)
 8005520:	f005 fe2e 	bl	800b180 <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d115      	bne.n	8005556 <main+0x1d2>
 800552a:	4b59      	ldr	r3, [pc, #356]	; (8005690 <main+0x30c>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <main+0x1d2>
#ifdef DEBUG
			measure_ticks = HAL_GetTick();
 8005532:	f004 fb49 	bl	8009bc8 <HAL_GetTick>
 8005536:	4603      	mov	r3, r0
 8005538:	4a53      	ldr	r2, [pc, #332]	; (8005688 <main+0x304>)
 800553a:	6013      	str	r3, [r2, #0]
#endif
			display_update_meter(display_screen);
 800553c:	4b54      	ldr	r3, [pc, #336]	; (8005690 <main+0x30c>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe fc57 	bl	8003df4 <display_update_meter>
#ifdef DEBUG
			display_ticks = HAL_GetTick() - measure_ticks;		// display update execution time
 8005546:	f004 fb3f 	bl	8009bc8 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <main+0x304>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	4a50      	ldr	r2, [pc, #320]	; (8005694 <main+0x310>)
 8005554:	6013      	str	r3, [r2, #0]
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 8005556:	4b48      	ldr	r3, [pc, #288]	; (8005678 <main+0x2f4>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b45      	ldr	r3, [pc, #276]	; (8005670 <main+0x2ec>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	f0c0 81ab 	bcc.w	80058ba <main+0x536>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8005564:	4b44      	ldr	r3, [pc, #272]	; (8005678 <main+0x2f4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3364      	adds	r3, #100	; 0x64
 800556a:	4a41      	ldr	r2, [pc, #260]	; (8005670 <main+0x2ec>)
 800556c:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <main+0x2d0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d013      	beq.n	800559e <main+0x21a>
			if (now_ticks >= display_splash_ticks) {
 8005576:	4b40      	ldr	r3, [pc, #256]	; (8005678 <main+0x2f4>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b36      	ldr	r3, [pc, #216]	; (8005654 <main+0x2d0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d30d      	bcc.n	800559e <main+0x21a>
				display_splash_ticks = 0;
 8005582:	4b34      	ldr	r3, [pc, #208]	; (8005654 <main+0x2d0>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8005588:	4b41      	ldr	r3, [pc, #260]	; (8005690 <main+0x30c>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 800558e:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <main+0x2f4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8005596:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800559a:	4a39      	ldr	r2, [pc, #228]	; (8005680 <main+0x2fc>)
 800559c:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 800559e:	4b3e      	ldr	r3, [pc, #248]	; (8005698 <main+0x314>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d032      	beq.n	800560e <main+0x28a>
			if (esp_mode) {
 80055a8:	4b3c      	ldr	r3, [pc, #240]	; (800569c <main+0x318>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d025      	beq.n	80055fc <main+0x278>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <main+0x31c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b7e      	cmp	r3, #126	; 0x7e
 80055b8:	d106      	bne.n	80055c8 <main+0x244>
					esp_mode = 0;
 80055ba:	4b38      	ldr	r3, [pc, #224]	; (800569c <main+0x318>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 80055c0:	4838      	ldr	r0, [pc, #224]	; (80056a4 <main+0x320>)
 80055c2:	f001 fb6d 	bl	8006ca0 <term_print>
 80055c6:	e01c      	b.n	8005602 <main+0x27e>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 80055c8:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <main+0x31c>)
 80055ca:	4937      	ldr	r1, [pc, #220]	; (80056a8 <main+0x324>)
 80055cc:	4825      	ldr	r0, [pc, #148]	; (8005664 <main+0x2e0>)
 80055ce:	f00a fc8f 	bl	800fef0 <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80055d2:	4824      	ldr	r0, [pc, #144]	; (8005664 <main+0x2e0>)
 80055d4:	f7fa fe6c 	bl	80002b0 <strlen>
 80055d8:	4603      	mov	r3, r0
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055e0:	4920      	ldr	r1, [pc, #128]	; (8005664 <main+0x2e0>)
 80055e2:	4819      	ldr	r0, [pc, #100]	; (8005648 <main+0x2c4>)
 80055e4:	f008 feff 	bl	800e3e6 <HAL_UART_Transmit>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <main+0x26e>
						Error_Handler();
 80055ee:	f000 feed 	bl	80063cc <Error_Handler>
					}
					term_print("%s", msg_buf);
 80055f2:	491c      	ldr	r1, [pc, #112]	; (8005664 <main+0x2e0>)
 80055f4:	482d      	ldr	r0, [pc, #180]	; (80056ac <main+0x328>)
 80055f6:	f001 fb53 	bl	8006ca0 <term_print>
 80055fa:	e002      	b.n	8005602 <main+0x27e>
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 80055fc:	4828      	ldr	r0, [pc, #160]	; (80056a0 <main+0x31c>)
 80055fe:	f7fd fe05 	bl	800320c <CMD_Handler>
			}
			cli_rx_count = 0;
 8005602:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <main+0x32c>)
 8005604:	2200      	movs	r2, #0
 8005606:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 8005608:	4b23      	ldr	r3, [pc, #140]	; (8005698 <main+0x314>)
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
		}

#ifdef USE_WIFI
		// Handle ESP UART communication
		if (esp_rx_count > 0) {		// do we have any RX data from the ESP?
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <main+0x330>)
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d063      	beq.n	80056de <main+0x35a>
			if (esp_rx_count_last != esp_rx_count) { 	// has the RX count changed since last iteration?
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <main+0x334>)
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	4b26      	ldr	r3, [pc, #152]	; (80056b4 <main+0x330>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d004      	beq.n	800562c <main+0x2a8>
				esp_rx_count_last = esp_rx_count;		// yes -> update last count, RX not finished yet
 8005622:	4b24      	ldr	r3, [pc, #144]	; (80056b4 <main+0x330>)
 8005624:	881a      	ldrh	r2, [r3, #0]
 8005626:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <main+0x334>)
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e058      	b.n	80056de <main+0x35a>
			} else {	// count hasn't changed since last iteration, we assume RX is completed
				if (!esp_mode) {
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <main+0x318>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d143      	bne.n	80056bc <main+0x338>
					wifi_handle_esp_rx_data();
 8005634:	f001 fdc0 	bl	80071b8 <wifi_handle_esp_rx_data>
 8005638:	e04a      	b.n	80056d0 <main+0x34c>
 800563a:	bf00      	nop
 800563c:	20002552 	.word	0x20002552
 8005640:	200023c8 	.word	0x200023c8
 8005644:	200025d5 	.word	0x200025d5
 8005648:	2000240c 	.word	0x2000240c
 800564c:	20002338 	.word	0x20002338
 8005650:	20002380 	.word	0x20002380
 8005654:	20008204 	.word	0x20008204
 8005658:	08019004 	.word	0x08019004
 800565c:	08019000 	.word	0x08019000
 8005660:	08013b58 	.word	0x08013b58
 8005664:	20002450 	.word	0x20002450
 8005668:	40020000 	.word	0x40020000
 800566c:	40020400 	.word	0x40020400
 8005670:	20008218 	.word	0x20008218
 8005674:	20008214 	.word	0x20008214
 8005678:	2000820c 	.word	0x2000820c
 800567c:	20008210 	.word	0x20008210
 8005680:	200081fc 	.word	0x200081fc
 8005684:	20008208 	.word	0x20008208
 8005688:	20008268 	.word	0x20008268
 800568c:	2000826c 	.word	0x2000826c
 8005690:	20002608 	.word	0x20002608
 8005694:	20008270 	.word	0x20008270
 8005698:	200025d4 	.word	0x200025d4
 800569c:	20002602 	.word	0x20002602
 80056a0:	20002554 	.word	0x20002554
 80056a4:	08013b6c 	.word	0x08013b6c
 80056a8:	08013b88 	.word	0x08013b88
 80056ac:	08013b90 	.word	0x08013b90
 80056b0:	20002550 	.word	0x20002550
 80056b4:	20008af8 	.word	0x20008af8
 80056b8:	200025d6 	.word	0x200025d6
				} else {		// ESP in terminal mode
					esp_rx_buf[esp_rx_count] = 0;	// Set EOS
 80056bc:	4b6a      	ldr	r3, [pc, #424]	; (8005868 <main+0x4e4>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b6a      	ldr	r3, [pc, #424]	; (800586c <main+0x4e8>)
 80056c4:	2100      	movs	r1, #0
 80056c6:	5499      	strb	r1, [r3, r2]
					term_print("%s", esp_rx_buf);
 80056c8:	4968      	ldr	r1, [pc, #416]	; (800586c <main+0x4e8>)
 80056ca:	4869      	ldr	r0, [pc, #420]	; (8005870 <main+0x4ec>)
 80056cc:	f001 fae8 	bl	8006ca0 <term_print>
				}
				esp_rx_count = 0;
 80056d0:	4b65      	ldr	r3, [pc, #404]	; (8005868 <main+0x4e4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	801a      	strh	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
 80056d6:	4b64      	ldr	r3, [pc, #400]	; (8005868 <main+0x4e4>)
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	4b66      	ldr	r3, [pc, #408]	; (8005874 <main+0x4f0>)
 80056dc:	801a      	strh	r2, [r3, #0]
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 80056de:	4b66      	ldr	r3, [pc, #408]	; (8005878 <main+0x4f4>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <main+0x36c>
			adc_restart = 0;
 80056e6:	4b64      	ldr	r3, [pc, #400]	; (8005878 <main+0x4f4>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
			start_adcs();
 80056ec:	f7ff fb4c 	bl	8004d88 <start_adcs>
		}

		if (new_time_period) {
 80056f0:	4b62      	ldr	r3, [pc, #392]	; (800587c <main+0x4f8>)
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <main+0x386>
			// change timer period to new value
			adjust_TIM2_period(new_time_period, 1);
 80056f8:	4b60      	ldr	r3, [pc, #384]	; (800587c <main+0x4f8>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	2101      	movs	r1, #1
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fb6e 	bl	8004de0 <adjust_TIM2_period>
			new_time_period = 0;
 8005704:	4b5d      	ldr	r3, [pc, #372]	; (800587c <main+0x4f8>)
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]
		}

		if (new_energy_time_period) {
 800570a:	4b5d      	ldr	r3, [pc, #372]	; (8005880 <main+0x4fc>)
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <main+0x3a0>
			adjust_TIM3_period(new_energy_time_period, 1);
 8005712:	4b5b      	ldr	r3, [pc, #364]	; (8005880 <main+0x4fc>)
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	2101      	movs	r1, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fbb7 	bl	8004e8c <adjust_TIM3_period>
			new_energy_time_period = 0;
 800571e:	4b58      	ldr	r3, [pc, #352]	; (8005880 <main+0x4fc>)
 8005720:	2200      	movs	r2, #0
 8005722:	801a      	strh	r2, [r3, #0]
		}

		if (modbus_addr_change) {
 8005724:	4b57      	ldr	r3, [pc, #348]	; (8005884 <main+0x500>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <main+0x3ba>
			set_modbus_address(modbus_addr_change, 1);
 800572c:	4b55      	ldr	r3, [pc, #340]	; (8005884 <main+0x500>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fc02 	bl	8004f3c <set_modbus_address>
			modbus_addr_change = 0;
 8005738:	4b52      	ldr	r3, [pc, #328]	; (8005884 <main+0x500>)
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 800573e:	4b52      	ldr	r3, [pc, #328]	; (8005888 <main+0x504>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d018      	beq.n	800577a <main+0x3f6>
			display_screen++;
 8005748:	4b50      	ldr	r3, [pc, #320]	; (800588c <main+0x508>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b4e      	ldr	r3, [pc, #312]	; (800588c <main+0x508>)
 8005752:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 8005754:	4b4d      	ldr	r3, [pc, #308]	; (800588c <main+0x508>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b05      	cmp	r3, #5
 800575a:	d902      	bls.n	8005762 <main+0x3de>
				display_screen = 1;
 800575c:	4b4b      	ldr	r3, [pc, #300]	; (800588c <main+0x508>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 8005762:	4b49      	ldr	r3, [pc, #292]	; (8005888 <main+0x504>)
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;	// restart screen saver
 8005768:	f004 fa2e 	bl	8009bc8 <HAL_GetTick>
 800576c:	4603      	mov	r3, r0
 800576e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8005772:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8005776:	4a46      	ldr	r2, [pc, #280]	; (8005890 <main+0x50c>)
 8005778:	6013      	str	r3, [r2, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 800577a:	4b45      	ldr	r3, [pc, #276]	; (8005890 <main+0x50c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <main+0x416>
 8005782:	4b44      	ldr	r3, [pc, #272]	; (8005894 <main+0x510>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b42      	ldr	r3, [pc, #264]	; (8005890 <main+0x50c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d305      	bcc.n	800579a <main+0x416>
			Displ_BackLight('0');
 800578e:	2030      	movs	r0, #48	; 0x30
 8005790:	f003 fc94 	bl	80090bc <Displ_BackLight>
			display_off_ticks = 0;
 8005794:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <main+0x50c>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
		}

		if (tft_display) {
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <main+0x514>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d02b      	beq.n	80057fa <main+0x476>
			if (tft_display == 9) {
 80057a2:	4b3d      	ldr	r3, [pc, #244]	; (8005898 <main+0x514>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d10e      	bne.n	80057c8 <main+0x444>
				term_print("Running TFT performance test ...\r\n");
 80057aa:	483c      	ldr	r0, [pc, #240]	; (800589c <main+0x518>)
 80057ac:	f001 fa78 	bl	8006ca0 <term_print>
				Displ_BackLight('1');
 80057b0:	2031      	movs	r0, #49	; 0x31
 80057b2:	f003 fc83 	bl	80090bc <Displ_BackLight>
				Displ_TestAll();
 80057b6:	f004 f94b 	bl	8009a50 <Displ_TestAll>
				Displ_BackLight('0');
 80057ba:	2030      	movs	r0, #48	; 0x30
 80057bc:	f003 fc7e 	bl	80090bc <Displ_BackLight>
				term_print("....completed\r\n");
 80057c0:	4837      	ldr	r0, [pc, #220]	; (80058a0 <main+0x51c>)
 80057c2:	f001 fa6d 	bl	8006ca0 <term_print>
 80057c6:	e015      	b.n	80057f4 <main+0x470>
			} else {
				if (tft_display == 1) {
 80057c8:	4b33      	ldr	r3, [pc, #204]	; (8005898 <main+0x514>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d103      	bne.n	80057d8 <main+0x454>
					Displ_BackLight('0');
 80057d0:	2030      	movs	r0, #48	; 0x30
 80057d2:	f003 fc73 	bl	80090bc <Displ_BackLight>
 80057d6:	e00d      	b.n	80057f4 <main+0x470>
				} else {
					Displ_BackLight('1');
 80057d8:	2031      	movs	r0, #49	; 0x31
 80057da:	f003 fc6f 	bl	80090bc <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 80057de:	f004 f9f3 	bl	8009bc8 <HAL_GetTick>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80057e8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <main+0x50c>)
 80057ee:	6013      	str	r3, [r2, #0]
					display_update_mask();
 80057f0:	f7fe fb5e 	bl	8003eb0 <display_update_mask>
				}
			}
		tft_display = 0;
 80057f4:	4b28      	ldr	r3, [pc, #160]	; (8005898 <main+0x514>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <main+0x520>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d010      	beq.n	8005826 <main+0x4a2>
			display_activate = 0;
 8005804:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <main+0x520>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 800580a:	f7fe fb51 	bl	8003eb0 <display_update_mask>
			Displ_BackLight('1');
 800580e:	2031      	movs	r0, #49	; 0x31
 8005810:	f003 fc54 	bl	80090bc <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8005814:	f004 f9d8 	bl	8009bc8 <HAL_GetTick>
 8005818:	4603      	mov	r3, r0
 800581a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800581e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <main+0x50c>)
 8005824:	6013      	str	r3, [r2, #0]
		}

		if (touch_action) {			// touch screen
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <main+0x524>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d044      	beq.n	80058ba <main+0x536>
			touch_action = 0;
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <main+0x524>)
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
			if (now_ticks < touch_debounce_ticks){
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <main+0x510>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <main+0x528>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d33b      	bcc.n	80058ba <main+0x536>
				;	// do nothing
			} else {
				touch_debounce_ticks = HAL_GetTick() + TOUCH_DEBOUNCE_TIME;
 8005842:	f004 f9c1 	bl	8009bc8 <HAL_GetTick>
 8005846:	4603      	mov	r3, r0
 8005848:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <main+0x528>)
 800584e:	6013      	str	r3, [r2, #0]
				// if Backlight is OFF
				if (HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_RESET) {
 8005850:	2140      	movs	r1, #64	; 0x40
 8005852:	4817      	ldr	r0, [pc, #92]	; (80058b0 <main+0x52c>)
 8005854:	f005 fc94 	bl	800b180 <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d12a      	bne.n	80058b4 <main+0x530>
					display_activate = 1;		// activate backlight
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <main+0x520>)
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e029      	b.n	80058ba <main+0x536>
 8005866:	bf00      	nop
 8005868:	20008af8 	.word	0x20008af8
 800586c:	20008678 	.word	0x20008678
 8005870:	08013b90 	.word	0x08013b90
 8005874:	200025d6 	.word	0x200025d6
 8005878:	20002600 	.word	0x20002600
 800587c:	20002604 	.word	0x20002604
 8005880:	20002606 	.word	0x20002606
 8005884:	20002603 	.word	0x20002603
 8005888:	200025fe 	.word	0x200025fe
 800588c:	20002608 	.word	0x20002608
 8005890:	200081fc 	.word	0x200081fc
 8005894:	2000820c 	.word	0x2000820c
 8005898:	20002601 	.word	0x20002601
 800589c:	08013b94 	.word	0x08013b94
 80058a0:	08013bb8 	.word	0x08013bb8
 80058a4:	200025fd 	.word	0x200025fd
 80058a8:	200025ff 	.word	0x200025ff
 80058ac:	20008200 	.word	0x20008200
 80058b0:	40020000 	.word	0x40020000
				} else {		// backlight is already on -> change display
					display_change = 1;
 80058b4:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <main+0x62c>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]

	}	// slow processing loop

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. serial terminal output or display)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 80058ba:	4b3e      	ldr	r3, [pc, #248]	; (80059b4 <main+0x630>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	dc0b      	bgt.n	80058da <main+0x556>
 80058c2:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <main+0x634>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	dc07      	bgt.n	80058da <main+0x556>
 80058ca:	4b3c      	ldr	r3, [pc, #240]	; (80059bc <main+0x638>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	dc03      	bgt.n	80058da <main+0x556>
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <main+0x63c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	dd1b      	ble.n	8005912 <main+0x58e>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) adc1_dma_l_count = 1;
 80058da:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <main+0x630>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	dd02      	ble.n	80058e8 <main+0x564>
 80058e2:	4b34      	ldr	r3, [pc, #208]	; (80059b4 <main+0x630>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) adc1_dma_h_count = 1;
 80058e8:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <main+0x634>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	dd02      	ble.n	80058f6 <main+0x572>
 80058f0:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <main+0x634>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) adc2_dma_l_count = 1;
 80058f6:	4b31      	ldr	r3, [pc, #196]	; (80059bc <main+0x638>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	dd02      	ble.n	8005904 <main+0x580>
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <main+0x638>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) adc2_dma_h_count = 1;
 8005904:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <main+0x63c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	dd02      	ble.n	8005912 <main+0x58e>
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <main+0x63c>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 8005912:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <main+0x630>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	dd0e      	ble.n	8005938 <main+0x5b4>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 800591a:	2100      	movs	r1, #0
 800591c:	2000      	movs	r0, #0
 800591e:	f7fb fba1 	bl	8001064 <calc_process_dma_buffer>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <main+0x5aa>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8005928:	4826      	ldr	r0, [pc, #152]	; (80059c4 <main+0x640>)
 800592a:	f001 f9b9 	bl	8006ca0 <term_print>
			}
			adc1_dma_l_count--;
 800592e:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <main+0x630>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3b01      	subs	r3, #1
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <main+0x630>)
 8005936:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8005938:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <main+0x634>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	dd0e      	ble.n	800595e <main+0x5da>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8005940:	2100      	movs	r1, #0
 8005942:	2001      	movs	r0, #1
 8005944:	f7fb fb8e 	bl	8001064 <calc_process_dma_buffer>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <main+0x5d0>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 800594e:	481e      	ldr	r0, [pc, #120]	; (80059c8 <main+0x644>)
 8005950:	f001 f9a6 	bl	8006ca0 <term_print>
			}
			adc1_dma_h_count--;
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <main+0x634>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3b01      	subs	r3, #1
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <main+0x634>)
 800595c:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 800595e:	4b17      	ldr	r3, [pc, #92]	; (80059bc <main+0x638>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	dd0e      	ble.n	8005984 <main+0x600>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8005966:	2101      	movs	r1, #1
 8005968:	2000      	movs	r0, #0
 800596a:	f7fb fb7b 	bl	8001064 <calc_process_dma_buffer>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <main+0x5f6>
				term_print("Processing ADC2 DMA 1st half failed\r\n");
 8005974:	4815      	ldr	r0, [pc, #84]	; (80059cc <main+0x648>)
 8005976:	f001 f993 	bl	8006ca0 <term_print>
			}
			adc2_dma_l_count--;
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <main+0x638>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	4a0e      	ldr	r2, [pc, #56]	; (80059bc <main+0x638>)
 8005982:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <main+0x63c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f77f ad82 	ble.w	8005492 <main+0x10e>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 800598e:	2101      	movs	r1, #1
 8005990:	2001      	movs	r0, #1
 8005992:	f7fb fb67 	bl	8001064 <calc_process_dma_buffer>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <main+0x61e>
				term_print("Processing ADC2 DMA 2nd half failed\r\n");
 800599c:	480c      	ldr	r0, [pc, #48]	; (80059d0 <main+0x64c>)
 800599e:	f001 f97f 	bl	8006ca0 <term_print>
			}
			adc2_dma_h_count--;
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <main+0x63c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <main+0x63c>)
 80059aa:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 80059ac:	e571      	b.n	8005492 <main+0x10e>
 80059ae:	bf00      	nop
 80059b0:	200025fe 	.word	0x200025fe
 80059b4:	2000260c 	.word	0x2000260c
 80059b8:	20002610 	.word	0x20002610
 80059bc:	20002614 	.word	0x20002614
 80059c0:	20002618 	.word	0x20002618
 80059c4:	08013bc8 	.word	0x08013bc8
 80059c8:	08013bf0 	.word	0x08013bf0
 80059cc:	08013c18 	.word	0x08013c18
 80059d0:	08013c40 	.word	0x08013c40

080059d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b094      	sub	sp, #80	; 0x50
 80059d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059da:	f107 031c 	add.w	r3, r7, #28
 80059de:	2234      	movs	r2, #52	; 0x34
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f00a fd02 	bl	80103ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059e8:	f107 0308 	add.w	r3, r7, #8
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059f8:	2300      	movs	r3, #0
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <SystemClock_Config+0xdc>)
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	4a2b      	ldr	r2, [pc, #172]	; (8005ab0 <SystemClock_Config+0xdc>)
 8005a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a06:	6413      	str	r3, [r2, #64]	; 0x40
 8005a08:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <SystemClock_Config+0xdc>)
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a14:	2300      	movs	r3, #0
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <SystemClock_Config+0xe0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <SystemClock_Config+0xe0>)
 8005a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <SystemClock_Config+0xe0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a30:	2302      	movs	r3, #2
 8005a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a38:	2310      	movs	r3, #16
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a40:	2300      	movs	r3, #0
 8005a42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a44:	2308      	movs	r3, #8
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005a48:	23b4      	movs	r3, #180	; 0xb4
 8005a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005a50:	2302      	movs	r3, #2
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005a54:	2302      	movs	r3, #2
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a58:	f107 031c 	add.w	r3, r7, #28
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f007 f87b 	bl	800cb58 <HAL_RCC_OscConfig>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005a68:	f000 fcb0 	bl	80063cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a6c:	f006 fcda 	bl	800c424 <HAL_PWREx_EnableOverDrive>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005a76:	f000 fca9 	bl	80063cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a7a:	230f      	movs	r3, #15
 8005a7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a92:	f107 0308 	add.w	r3, r7, #8
 8005a96:	2105      	movs	r1, #5
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f006 fd13 	bl	800c4c4 <HAL_RCC_ClockConfig>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005aa4:	f000 fc92 	bl	80063cc <Error_Handler>
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3750      	adds	r7, #80	; 0x50
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	40007000 	.word	0x40007000

08005ab8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005abe:	463b      	mov	r3, r7
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
 8005ac8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005aca:	4b29      	ldr	r3, [pc, #164]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005acc:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <MX_ADC1_Init+0xbc>)
 8005ace:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005ad2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005ad6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ad8:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005ade:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ae4:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005aea:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005af2:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8005afa:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005afc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b02:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b1c:	4814      	ldr	r0, [pc, #80]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b1e:	f004 f883 	bl	8009c28 <HAL_ADC_Init>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8005b28:	f000 fc50 	bl	80063cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005b34:	2303      	movs	r3, #3
 8005b36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b38:	463b      	mov	r3, r7
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	480c      	ldr	r0, [pc, #48]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b3e:	f004 f9c7 	bl	8009ed0 <HAL_ADC_ConfigChannel>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005b48:	f000 fc40 	bl	80063cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005b4c:	230a      	movs	r3, #10
 8005b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005b50:	2302      	movs	r3, #2
 8005b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b54:	463b      	mov	r3, r7
 8005b56:	4619      	mov	r1, r3
 8005b58:	4805      	ldr	r0, [pc, #20]	; (8005b70 <MX_ADC1_Init+0xb8>)
 8005b5a:	f004 f9b9 	bl	8009ed0 <HAL_ADC_ConfigChannel>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8005b64:	f000 fc32 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200020dc 	.word	0x200020dc
 8005b74:	40012000 	.word	0x40012000

08005b78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005b7e:	463b      	mov	r3, r7
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	609a      	str	r2, [r3, #8]
 8005b88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005b8a:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005b8c:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <MX_ADC2_Init+0xbc>)
 8005b8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005b90:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005b92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005b96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005baa:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005bb2:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8005bba:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bbc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bca:	2202      	movs	r2, #2
 8005bcc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005bce:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005bdc:	4814      	ldr	r0, [pc, #80]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bde:	f004 f823 	bl	8009c28 <HAL_ADC_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005be8:	f000 fbf0 	bl	80063cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005bec:	2301      	movs	r3, #1
 8005bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	480c      	ldr	r0, [pc, #48]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005bfe:	f004 f967 	bl	8009ed0 <HAL_ADC_ConfigChannel>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8005c08:	f000 fbe0 	bl	80063cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005c0c:	230b      	movs	r3, #11
 8005c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005c10:	2302      	movs	r3, #2
 8005c12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c14:	463b      	mov	r3, r7
 8005c16:	4619      	mov	r1, r3
 8005c18:	4805      	ldr	r0, [pc, #20]	; (8005c30 <MX_ADC2_Init+0xb8>)
 8005c1a:	f004 f959 	bl	8009ed0 <HAL_ADC_ConfigChannel>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8005c24:	f000 fbd2 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20002124 	.word	0x20002124
 8005c34:	40012100 	.word	0x40012100

08005c38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <MX_I2C1_Init+0x54>)
 8005c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c44:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <MX_I2C1_Init+0x58>)
 8005c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c74:	4804      	ldr	r0, [pc, #16]	; (8005c88 <MX_I2C1_Init+0x50>)
 8005c76:	f005 fae7 	bl	800b248 <HAL_I2C_Init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005c80:	f000 fba4 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2000222c 	.word	0x2000222c
 8005c8c:	40005400 	.word	0x40005400
 8005c90:	00061a80 	.word	0x00061a80

08005c94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005c98:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <MX_SPI2_Init+0x68>)
 8005c9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005c9e:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ca4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd8:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005ce0:	220a      	movs	r2, #10
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ce4:	4804      	ldr	r0, [pc, #16]	; (8005cf8 <MX_SPI2_Init+0x64>)
 8005ce6:	f007 f9d5 	bl	800d094 <HAL_SPI_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005cf0:	f000 fb6c 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005cf4:	bf00      	nop
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20002280 	.word	0x20002280
 8005cfc:	40003800 	.word	0x40003800

08005d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d06:	f107 0308 	add.w	r3, r7, #8
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	605a      	str	r2, [r3, #4]
 8005d10:	609a      	str	r2, [r3, #8]
 8005d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d14:	463b      	mov	r3, r7
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005d24:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d2a:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 8005d30:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d32:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8005d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d38:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005d44:	4813      	ldr	r0, [pc, #76]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d46:	f007 fe7f 	bl	800da48 <HAL_TIM_Base_Init>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005d50:	f000 fb3c 	bl	80063cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	4619      	mov	r1, r3
 8005d60:	480c      	ldr	r0, [pc, #48]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d62:	f008 f839 	bl	800ddd8 <HAL_TIM_ConfigClockSource>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005d6c:	f000 fb2e 	bl	80063cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d70:	2320      	movs	r3, #32
 8005d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d78:	463b      	mov	r3, r7
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4805      	ldr	r0, [pc, #20]	; (8005d94 <MX_TIM2_Init+0x94>)
 8005d7e:	f008 fa55 	bl	800e22c <HAL_TIMEx_MasterConfigSynchronization>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005d88:	f000 fb20 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d8c:	bf00      	nop
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20002338 	.word	0x20002338

08005d98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	605a      	str	r2, [r3, #4]
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dac:	463b      	mov	r3, r7
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005db6:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <MX_TIM3_Init+0x98>)
 8005db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000;
 8005dba:	4b1c      	ldr	r3, [pc, #112]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dbc:	f242 3228 	movw	r2, #9000	; 0x2328
 8005dc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc2:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005dc8:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dd0:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dd6:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ddc:	4813      	ldr	r0, [pc, #76]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dde:	f007 fe33 	bl	800da48 <HAL_TIM_Base_Init>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005de8:	f000 faf0 	bl	80063cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005df2:	f107 0308 	add.w	r3, r7, #8
 8005df6:	4619      	mov	r1, r3
 8005df8:	480c      	ldr	r0, [pc, #48]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005dfa:	f007 ffed 	bl	800ddd8 <HAL_TIM_ConfigClockSource>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005e04:	f000 fae2 	bl	80063cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005e08:	2320      	movs	r3, #32
 8005e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e10:	463b      	mov	r3, r7
 8005e12:	4619      	mov	r1, r3
 8005e14:	4805      	ldr	r0, [pc, #20]	; (8005e2c <MX_TIM3_Init+0x94>)
 8005e16:	f008 fa09 	bl	800e22c <HAL_TIMEx_MasterConfigSynchronization>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005e20:	f000 fad4 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005e24:	bf00      	nop
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20002380 	.word	0x20002380
 8005e30:	40000400 	.word	0x40000400

08005e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e3a:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <MX_USART2_UART_Init+0x50>)
 8005e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e46:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e5a:	220c      	movs	r2, #12
 8005e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e6a:	4805      	ldr	r0, [pc, #20]	; (8005e80 <MX_USART2_UART_Init+0x4c>)
 8005e6c:	f008 fa6e 	bl	800e34c <HAL_UART_Init>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005e76:	f000 faa9 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e7a:	bf00      	nop
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200023c8 	.word	0x200023c8
 8005e84:	40004400 	.word	0x40004400

08005e88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <MX_USART3_UART_Init+0x50>)
 8005e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005eae:	220c      	movs	r2, #12
 8005eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ebe:	4805      	ldr	r0, [pc, #20]	; (8005ed4 <MX_USART3_UART_Init+0x4c>)
 8005ec0:	f008 fa44 	bl	800e34c <HAL_UART_Init>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005eca:	f000 fa7f 	bl	80063cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2000240c 	.word	0x2000240c
 8005ed8:	40004800 	.word	0x40004800

08005edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <MX_DMA_Init+0x78>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	4a1a      	ldr	r2, [pc, #104]	; (8005f54 <MX_DMA_Init+0x78>)
 8005eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef2:	4b18      	ldr	r3, [pc, #96]	; (8005f54 <MX_DMA_Init+0x78>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <MX_DMA_Init+0x78>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <MX_DMA_Init+0x78>)
 8005f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <MX_DMA_Init+0x78>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	200f      	movs	r0, #15
 8005f20:	f004 fb61 	bl	800a5e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005f24:	200f      	movs	r0, #15
 8005f26:	f004 fb7a 	bl	800a61e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	2038      	movs	r0, #56	; 0x38
 8005f30:	f004 fb59 	bl	800a5e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005f34:	2038      	movs	r0, #56	; 0x38
 8005f36:	f004 fb72 	bl	800a61e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	203a      	movs	r0, #58	; 0x3a
 8005f40:	f004 fb51 	bl	800a5e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005f44:	203a      	movs	r0, #58	; 0x3a
 8005f46:	f004 fb6a 	bl	800a61e <HAL_NVIC_EnableIRQ>

}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800

08005f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f5e:	f107 0314 	add.w	r3, r7, #20
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	609a      	str	r2, [r3, #8]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	4b68      	ldr	r3, [pc, #416]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	4a67      	ldr	r2, [pc, #412]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005f78:	f043 0304 	orr.w	r3, r3, #4
 8005f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7e:	4b65      	ldr	r3, [pc, #404]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	4b61      	ldr	r3, [pc, #388]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	4a60      	ldr	r2, [pc, #384]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f98:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9a:	4b5e      	ldr	r3, [pc, #376]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	4b5a      	ldr	r3, [pc, #360]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	4a59      	ldr	r2, [pc, #356]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb6:	4b57      	ldr	r3, [pc, #348]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	4b53      	ldr	r3, [pc, #332]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	4a52      	ldr	r2, [pc, #328]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd2:	4b50      	ldr	r3, [pc, #320]	; (8006114 <MX_GPIO_Init+0x1bc>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8005fe4:	484c      	ldr	r0, [pc, #304]	; (8006118 <MX_GPIO_Init+0x1c0>)
 8005fe6:	f005 f8e3 	bl	800b1b0 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8005fea:	2201      	movs	r2, #1
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	484b      	ldr	r0, [pc, #300]	; (800611c <MX_GPIO_Init+0x1c4>)
 8005ff0:	f005 f8de 	bl	800b1b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ffa:	4847      	ldr	r0, [pc, #284]	; (8006118 <MX_GPIO_Init+0x1c0>)
 8005ffc:	f005 f8d8 	bl	800b1b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_TUNE_Pin|DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8006000:	2200      	movs	r2, #0
 8006002:	21e0      	movs	r1, #224	; 0xe0
 8006004:	4846      	ldr	r0, [pc, #280]	; (8006120 <MX_GPIO_Init+0x1c8>)
 8006006:	f005 f8d3 	bl	800b1b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800600a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800600e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006010:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	4619      	mov	r1, r3
 8006020:	483e      	ldr	r0, [pc, #248]	; (800611c <MX_GPIO_Init+0x1c4>)
 8006022:	f004 ff19 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8006026:	f248 4360 	movw	r3, #33888	; 0x8460
 800602a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800602c:	2301      	movs	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006034:	2300      	movs	r3, #0
 8006036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4619      	mov	r1, r3
 800603e:	4836      	ldr	r0, [pc, #216]	; (8006118 <MX_GPIO_Init+0x1c0>)
 8006040:	f004 ff0a 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006048:	2301      	movs	r3, #1
 800604a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006050:	2302      	movs	r3, #2
 8006052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	4619      	mov	r1, r3
 800605a:	482f      	ldr	r0, [pc, #188]	; (8006118 <MX_GPIO_Init+0x1c0>)
 800605c:	f004 fefc 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006064:	2301      	movs	r3, #1
 8006066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800606c:	2303      	movs	r3, #3
 800606e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	4619      	mov	r1, r3
 8006076:	4829      	ldr	r0, [pc, #164]	; (800611c <MX_GPIO_Init+0x1c4>)
 8006078:	f004 feee 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800607c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006082:	2301      	movs	r3, #1
 8006084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800608a:	2303      	movs	r3, #3
 800608c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	4619      	mov	r1, r3
 8006094:	4820      	ldr	r0, [pc, #128]	; (8006118 <MX_GPIO_Init+0x1c0>)
 8006096:	f004 fedf 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800609a:	2310      	movs	r3, #16
 800609c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800609e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80060a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4619      	mov	r1, r3
 80060ae:	481c      	ldr	r0, [pc, #112]	; (8006120 <MX_GPIO_Init+0x1c8>)
 80060b0:	f004 fed2 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_TUNE_Pin */
  GPIO_InitStruct.Pin = CLK_TUNE_Pin;
 80060b4:	2320      	movs	r3, #32
 80060b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060b8:	2301      	movs	r3, #1
 80060ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80060c0:	2301      	movs	r3, #1
 80060c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CLK_TUNE_GPIO_Port, &GPIO_InitStruct);
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	4619      	mov	r1, r3
 80060ca:	4815      	ldr	r0, [pc, #84]	; (8006120 <MX_GPIO_Init+0x1c8>)
 80060cc:	f004 fec4 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 80060d0:	23c0      	movs	r3, #192	; 0xc0
 80060d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060d4:	2301      	movs	r3, #1
 80060d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060dc:	2300      	movs	r3, #0
 80060de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	4619      	mov	r1, r3
 80060e6:	480e      	ldr	r0, [pc, #56]	; (8006120 <MX_GPIO_Init+0x1c8>)
 80060e8:	f004 feb6 	bl	800ae58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80060ec:	2200      	movs	r2, #0
 80060ee:	2100      	movs	r1, #0
 80060f0:	200a      	movs	r0, #10
 80060f2:	f004 fa78 	bl	800a5e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80060f6:	200a      	movs	r0, #10
 80060f8:	f004 fa91 	bl	800a61e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80060fc:	2200      	movs	r2, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	2028      	movs	r0, #40	; 0x28
 8006102:	f004 fa70 	bl	800a5e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006106:	2028      	movs	r0, #40	; 0x28
 8006108:	f004 fa89 	bl	800a61e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800610c:	bf00      	nop
 800610e:	3728      	adds	r7, #40	; 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	40020000 	.word	0x40020000
 800611c:	40020800 	.word	0x40020800
 8006120:	40020400 	.word	0x40020400

08006124 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a06      	ldr	r2, [pc, #24]	; (8006148 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d105      	bne.n	8006140 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin (CLK_TUNE_GPIO_Port, CLK_TUNE_Pin);
 8006134:	2120      	movs	r1, #32
 8006136:	4805      	ldr	r0, [pc, #20]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006138:	f005 f853 	bl	800b1e2 <HAL_GPIO_TogglePin>
		calc_update_energy_totals();
 800613c:	f7fc fc80 	bl	8002a40 <calc_update_energy_totals>
	}
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20002380 	.word	0x20002380
 800614c:	40020400 	.word	0x40020400

08006150 <HAL_GPIO_EXTI_Callback>:
	ee24_read_done = true;
}

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b10      	cmp	r3, #16
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_EXTI_Callback+0x18>
 8006160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006164:	d004      	beq.n	8006170 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8006166:	e007      	b.n	8006178 <HAL_GPIO_EXTI_Callback+0x28>
		touch_action = 1;
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <HAL_GPIO_EXTI_Callback+0x34>)
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
		break;
 800616e:	e003      	b.n	8006178 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <HAL_GPIO_EXTI_Callback+0x38>)
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
		break;
 8006176:	bf00      	nop
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	200025ff 	.word	0x200025ff
 8006188:	200025fe 	.word	0x200025fe

0800618c <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <HAL_ADC_ConvCpltCallback+0x34>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d105      	bne.n	80061a8 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_ADC_ConvCpltCallback+0x38>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <HAL_ADC_ConvCpltCallback+0x38>)
 80061a4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 80061a6:	e004      	b.n	80061b2 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80061b0:	6013      	str	r3, [r2, #0]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	200020dc 	.word	0x200020dc
 80061c4:	20002610 	.word	0x20002610
 80061c8:	20002618 	.word	0x20002618

080061cc <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d105      	bne.n	80061e8 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	4a08      	ldr	r2, [pc, #32]	; (8006204 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80061e4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80061e6:	e004      	b.n	80061f2 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80061e8:	4b07      	ldr	r3, [pc, #28]	; (8006208 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	4a06      	ldr	r2, [pc, #24]	; (8006208 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80061f0:	6013      	str	r3, [r2, #0]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	200020dc 	.word	0x200020dc
 8006204:	2000260c 	.word	0x2000260c
 8006208:	20002614 	.word	0x20002614

0800620c <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <HAL_ADC_ErrorCallback+0x94>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d102      	bne.n	8006222 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 800621c:	2301      	movs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e001      	b.n	8006226 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8006222:	2302      	movs	r3, #2
 8006224:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	2b04      	cmp	r3, #4
 800622c:	d82c      	bhi.n	8006288 <HAL_ADC_ErrorCallback+0x7c>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <HAL_ADC_ErrorCallback+0x28>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006249 	.word	0x08006249
 8006238:	08006259 	.word	0x08006259
 800623c:	08006269 	.word	0x08006269
 8006240:	08006289 	.word	0x08006289
 8006244:	08006279 	.word	0x08006279
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624c:	461a      	mov	r2, r3
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	4814      	ldr	r0, [pc, #80]	; (80062a4 <HAL_ADC_ErrorCallback+0x98>)
 8006252:	f000 fd25 	bl	8006ca0 <term_print>
		break;
 8006256:	e01e      	b.n	8006296 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625c:	461a      	mov	r2, r3
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	4811      	ldr	r0, [pc, #68]	; (80062a8 <HAL_ADC_ErrorCallback+0x9c>)
 8006262:	f000 fd1d 	bl	8006ca0 <term_print>
		break;
 8006266:	e016      	b.n	8006296 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	461a      	mov	r2, r3
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	480e      	ldr	r0, [pc, #56]	; (80062ac <HAL_ADC_ErrorCallback+0xa0>)
 8006272:	f000 fd15 	bl	8006ca0 <term_print>
		break;
 8006276:	e00e      	b.n	8006296 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	461a      	mov	r2, r3
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	480b      	ldr	r0, [pc, #44]	; (80062b0 <HAL_ADC_ErrorCallback+0xa4>)
 8006282:	f000 fd0d 	bl	8006ca0 <term_print>
		break;
 8006286:	e006      	b.n	8006296 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	4619      	mov	r1, r3
 800628e:	4809      	ldr	r0, [pc, #36]	; (80062b4 <HAL_ADC_ErrorCallback+0xa8>)
 8006290:	f000 fd06 	bl	8006ca0 <term_print>
	}
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200020dc 	.word	0x200020dc
 80062a4:	08013c68 	.word	0x08013c68
 80062a8:	08013c84 	.word	0x08013c84
 80062ac:	08013ca8 	.word	0x08013ca8
 80062b0:	08013cc8 	.word	0x08013cc8
 80062b4:	08013ce4 	.word	0x08013ce4

080062b8 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <HAL_UART_RxCpltCallback+0xe8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d13b      	bne.n	8006340 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 80062c8:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b7f      	cmp	r3, #127	; 0x7f
 80062d0:	d902      	bls.n	80062d8 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 80062d2:	4b34      	ldr	r3, [pc, #208]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80062d8:	2201      	movs	r2, #1
 80062da:	4933      	ldr	r1, [pc, #204]	; (80063a8 <HAL_UART_RxCpltCallback+0xf0>)
 80062dc:	4830      	ldr	r0, [pc, #192]	; (80063a0 <HAL_UART_RxCpltCallback+0xe8>)
 80062de:	f008 f914 	bl	800e50a <HAL_UART_Receive_IT>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d156      	bne.n	8006396 <HAL_UART_RxCpltCallback+0xde>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 80062e8:	4b2f      	ldr	r3, [pc, #188]	; (80063a8 <HAL_UART_RxCpltCallback+0xf0>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b0a      	cmp	r3, #10
 80062f0:	d012      	beq.n	8006318 <HAL_UART_RxCpltCallback+0x60>
 80062f2:	4b2d      	ldr	r3, [pc, #180]	; (80063a8 <HAL_UART_RxCpltCallback+0xf0>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b0d      	cmp	r3, #13
 80062fa:	d00d      	beq.n	8006318 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 80062fc:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	b291      	uxth	r1, r2
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 8006308:	8011      	strh	r1, [r2, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <HAL_UART_RxCpltCallback+0xf0>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	b2d9      	uxtb	r1, r3
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <HAL_UART_RxCpltCallback+0xf4>)
 8006314:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8006316:	e03e      	b.n	8006396 <HAL_UART_RxCpltCallback+0xde>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8006318:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d039      	beq.n	8006396 <HAL_UART_RxCpltCallback+0xde>
					cli_rx_cmd_ready = 1;
 8006322:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <HAL_UART_RxCpltCallback+0xf8>)
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8006328:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	b291      	uxth	r1, r2
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <HAL_UART_RxCpltCallback+0xec>)
 8006334:	8011      	strh	r1, [r2, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <HAL_UART_RxCpltCallback+0xf4>)
 800633a:	2100      	movs	r1, #0
 800633c:	5499      	strb	r1, [r3, r2]
		return;
 800633e:	e02a      	b.n	8006396 <HAL_UART_RxCpltCallback+0xde>
	}
#ifdef USE_WIFI
	// receive data from ESP
	if (huart == &ESP_UART) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_UART_RxCpltCallback+0xfc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d127      	bne.n	8006398 <HAL_UART_RxCpltCallback+0xe0>
		if ( HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8006348:	2201      	movs	r2, #1
 800634a:	491b      	ldr	r1, [pc, #108]	; (80063b8 <HAL_UART_RxCpltCallback+0x100>)
 800634c:	4819      	ldr	r0, [pc, #100]	; (80063b4 <HAL_UART_RxCpltCallback+0xfc>)
 800634e:	f008 f8dc 	bl	800e50a <HAL_UART_Receive_IT>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d117      	bne.n	8006388 <HAL_UART_RxCpltCallback+0xd0>
			if (esp_rx_count >= ESP_RX_BUF_SIZE) {		// prevent RX buffer overrun
 8006358:	4b18      	ldr	r3, [pc, #96]	; (80063bc <HAL_UART_RxCpltCallback+0x104>)
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d305      	bcc.n	800636e <HAL_UART_RxCpltCallback+0xb6>
				esp_rx_count = 0;
 8006362:	4b16      	ldr	r3, [pc, #88]	; (80063bc <HAL_UART_RxCpltCallback+0x104>)
 8006364:	2200      	movs	r2, #0
 8006366:	801a      	strh	r2, [r3, #0]
				esp_rx_buffer_overflow = true;				// set error flag
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <HAL_UART_RxCpltCallback+0x108>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
			}
			esp_rx_buf[esp_rx_count++] = esp_rx_byte;		// add received byte to RX buffer
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <HAL_UART_RxCpltCallback+0x104>)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	b291      	uxth	r1, r2
 8006376:	4a11      	ldr	r2, [pc, #68]	; (80063bc <HAL_UART_RxCpltCallback+0x104>)
 8006378:	8011      	strh	r1, [r2, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_UART_RxCpltCallback+0x100>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b2d9      	uxtb	r1, r3
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_UART_RxCpltCallback+0x10c>)
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	e007      	b.n	8006398 <HAL_UART_RxCpltCallback+0xe0>
		} else {	// this should never happen
			esp_rx_error_count++;
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_UART_RxCpltCallback+0x110>)
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	3301      	adds	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <HAL_UART_RxCpltCallback+0x110>)
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e000      	b.n	8006398 <HAL_UART_RxCpltCallback+0xe0>
		return;
 8006396:	bf00      	nop
		}
	}
#endif
}
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200023c8 	.word	0x200023c8
 80063a4:	20002550 	.word	0x20002550
 80063a8:	20002552 	.word	0x20002552
 80063ac:	20002554 	.word	0x20002554
 80063b0:	200025d4 	.word	0x200025d4
 80063b4:	2000240c 	.word	0x2000240c
 80063b8:	200025d5 	.word	0x200025d5
 80063bc:	20008af8 	.word	0x20008af8
 80063c0:	20008afc 	.word	0x20008afc
 80063c4:	20008678 	.word	0x20008678
 80063c8:	20008afa 	.word	0x20008afa

080063cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 80063d0:	4802      	ldr	r0, [pc, #8]	; (80063dc <Error_Handler+0x10>)
 80063d2:	f009 ffa9 	bl	8010328 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80063d6:	b672      	cpsid	i
}
 80063d8:	bf00      	nop
    __disable_irq();
    while (1)
 80063da:	e7fe      	b.n	80063da <Error_Handler+0xe>
 80063dc:	08013d04 	.word	0x08013d04

080063e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <HAL_MspInit+0x4c>)
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	4a0f      	ldr	r2, [pc, #60]	; (800642c <HAL_MspInit+0x4c>)
 80063f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063f4:	6453      	str	r3, [r2, #68]	; 0x44
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <HAL_MspInit+0x4c>)
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <HAL_MspInit+0x4c>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	4a08      	ldr	r2, [pc, #32]	; (800642c <HAL_MspInit+0x4c>)
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006410:	6413      	str	r3, [r2, #64]	; 0x40
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <HAL_MspInit+0x4c>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800641e:	2007      	movs	r0, #7
 8006420:	f004 f8d6 	bl	800a5d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800

08006430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	; 0x38
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a79      	ldr	r2, [pc, #484]	; (8006634 <HAL_ADC_MspInit+0x204>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d173      	bne.n	800653a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	4b78      	ldr	r3, [pc, #480]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	4a77      	ldr	r2, [pc, #476]	; (8006638 <HAL_ADC_MspInit+0x208>)
 800645c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006460:	6453      	str	r3, [r2, #68]	; 0x44
 8006462:	4b75      	ldr	r3, [pc, #468]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	623b      	str	r3, [r7, #32]
 800646c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800646e:	2300      	movs	r3, #0
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	4b71      	ldr	r3, [pc, #452]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	4a70      	ldr	r2, [pc, #448]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006478:	f043 0304 	orr.w	r3, r3, #4
 800647c:	6313      	str	r3, [r2, #48]	; 0x30
 800647e:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	4b6a      	ldr	r3, [pc, #424]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	4a69      	ldr	r2, [pc, #420]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	6313      	str	r3, [r2, #48]	; 0x30
 800649a:	4b67      	ldr	r3, [pc, #412]	; (8006638 <HAL_ADC_MspInit+0x208>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80064a6:	2301      	movs	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064aa:	2303      	movs	r3, #3
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b6:	4619      	mov	r1, r3
 80064b8:	4860      	ldr	r0, [pc, #384]	; (800663c <HAL_ADC_MspInit+0x20c>)
 80064ba:	f004 fccd 	bl	800ae58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80064be:	2301      	movs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064c2:	2303      	movs	r3, #3
 80064c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ce:	4619      	mov	r1, r3
 80064d0:	485b      	ldr	r0, [pc, #364]	; (8006640 <HAL_ADC_MspInit+0x210>)
 80064d2:	f004 fcc1 	bl	800ae58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80064d6:	4b5b      	ldr	r3, [pc, #364]	; (8006644 <HAL_ADC_MspInit+0x214>)
 80064d8:	4a5b      	ldr	r2, [pc, #364]	; (8006648 <HAL_ADC_MspInit+0x218>)
 80064da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064dc:	4b59      	ldr	r3, [pc, #356]	; (8006644 <HAL_ADC_MspInit+0x214>)
 80064de:	2200      	movs	r2, #0
 80064e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064e2:	4b58      	ldr	r3, [pc, #352]	; (8006644 <HAL_ADC_MspInit+0x214>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064e8:	4b56      	ldr	r3, [pc, #344]	; (8006644 <HAL_ADC_MspInit+0x214>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064ee:	4b55      	ldr	r3, [pc, #340]	; (8006644 <HAL_ADC_MspInit+0x214>)
 80064f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064f6:	4b53      	ldr	r3, [pc, #332]	; (8006644 <HAL_ADC_MspInit+0x214>)
 80064f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064fe:	4b51      	ldr	r3, [pc, #324]	; (8006644 <HAL_ADC_MspInit+0x214>)
 8006500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006504:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <HAL_ADC_MspInit+0x214>)
 8006508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800650c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800650e:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <HAL_ADC_MspInit+0x214>)
 8006510:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006514:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006516:	4b4b      	ldr	r3, [pc, #300]	; (8006644 <HAL_ADC_MspInit+0x214>)
 8006518:	2200      	movs	r2, #0
 800651a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800651c:	4849      	ldr	r0, [pc, #292]	; (8006644 <HAL_ADC_MspInit+0x214>)
 800651e:	f004 f899 	bl	800a654 <HAL_DMA_Init>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8006528:	f7ff ff50 	bl	80063cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a45      	ldr	r2, [pc, #276]	; (8006644 <HAL_ADC_MspInit+0x214>)
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <HAL_ADC_MspInit+0x214>)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006538:	e078      	b.n	800662c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a43      	ldr	r2, [pc, #268]	; (800664c <HAL_ADC_MspInit+0x21c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d173      	bne.n	800662c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <HAL_ADC_MspInit+0x208>)
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	4a3a      	ldr	r2, [pc, #232]	; (8006638 <HAL_ADC_MspInit+0x208>)
 800654e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006552:	6453      	str	r3, [r2, #68]	; 0x44
 8006554:	4b38      	ldr	r3, [pc, #224]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	4b34      	ldr	r3, [pc, #208]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	4a33      	ldr	r2, [pc, #204]	; (8006638 <HAL_ADC_MspInit+0x208>)
 800656a:	f043 0304 	orr.w	r3, r3, #4
 800656e:	6313      	str	r3, [r2, #48]	; 0x30
 8006570:	4b31      	ldr	r3, [pc, #196]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <HAL_ADC_MspInit+0x208>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6313      	str	r3, [r2, #48]	; 0x30
 800658c:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <HAL_ADC_MspInit+0x208>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006598:	2302      	movs	r3, #2
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800659c:	2303      	movs	r3, #3
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a8:	4619      	mov	r1, r3
 80065aa:	4824      	ldr	r0, [pc, #144]	; (800663c <HAL_ADC_MspInit+0x20c>)
 80065ac:	f004 fc54 	bl	800ae58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80065b0:	2302      	movs	r3, #2
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065b4:	2303      	movs	r3, #3
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c0:	4619      	mov	r1, r3
 80065c2:	481f      	ldr	r0, [pc, #124]	; (8006640 <HAL_ADC_MspInit+0x210>)
 80065c4:	f004 fc48 	bl	800ae58 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80065c8:	4b21      	ldr	r3, [pc, #132]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065ca:	4a22      	ldr	r2, [pc, #136]	; (8006654 <HAL_ADC_MspInit+0x224>)
 80065cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80065ce:	4b20      	ldr	r3, [pc, #128]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065d6:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065d8:	2200      	movs	r2, #0
 80065da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80065dc:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065de:	2200      	movs	r2, #0
 80065e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065ea:	4b19      	ldr	r3, [pc, #100]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80065f2:	4b17      	ldr	r3, [pc, #92]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065f8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80065fa:	4b15      	ldr	r3, [pc, #84]	; (8006650 <HAL_ADC_MspInit+0x220>)
 80065fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006600:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006602:	4b13      	ldr	r3, [pc, #76]	; (8006650 <HAL_ADC_MspInit+0x220>)
 8006604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006608:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_ADC_MspInit+0x220>)
 800660c:	2200      	movs	r2, #0
 800660e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006610:	480f      	ldr	r0, [pc, #60]	; (8006650 <HAL_ADC_MspInit+0x220>)
 8006612:	f004 f81f 	bl	800a654 <HAL_DMA_Init>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 800661c:	f7ff fed6 	bl	80063cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a0b      	ldr	r2, [pc, #44]	; (8006650 <HAL_ADC_MspInit+0x220>)
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <HAL_ADC_MspInit+0x220>)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800662c:	bf00      	nop
 800662e:	3738      	adds	r7, #56	; 0x38
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40012000 	.word	0x40012000
 8006638:	40023800 	.word	0x40023800
 800663c:	40020800 	.word	0x40020800
 8006640:	40020000 	.word	0x40020000
 8006644:	2000216c 	.word	0x2000216c
 8006648:	40026410 	.word	0x40026410
 800664c:	40012100 	.word	0x40012100
 8006650:	200021cc 	.word	0x200021cc
 8006654:	40026440 	.word	0x40026440

08006658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <HAL_I2C_MspInit+0x84>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d12c      	bne.n	80066d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	4b18      	ldr	r3, [pc, #96]	; (80066e0 <HAL_I2C_MspInit+0x88>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_I2C_MspInit+0x88>)
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6313      	str	r3, [r2, #48]	; 0x30
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <HAL_I2C_MspInit+0x88>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800669a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800669c:	2312      	movs	r3, #18
 800669e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a4:	2303      	movs	r3, #3
 80066a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80066a8:	2304      	movs	r3, #4
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	4619      	mov	r1, r3
 80066b2:	480c      	ldr	r0, [pc, #48]	; (80066e4 <HAL_I2C_MspInit+0x8c>)
 80066b4:	f004 fbd0 	bl	800ae58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	4b08      	ldr	r3, [pc, #32]	; (80066e0 <HAL_I2C_MspInit+0x88>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	4a07      	ldr	r2, [pc, #28]	; (80066e0 <HAL_I2C_MspInit+0x88>)
 80066c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066c6:	6413      	str	r3, [r2, #64]	; 0x40
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_I2C_MspInit+0x88>)
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80066d4:	bf00      	nop
 80066d6:	3728      	adds	r7, #40	; 0x28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40005400 	.word	0x40005400
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40020400 	.word	0x40020400

080066e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f0:	f107 0314 	add.w	r3, r7, #20
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a43      	ldr	r2, [pc, #268]	; (8006814 <HAL_SPI_MspInit+0x12c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d17f      	bne.n	800680a <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	4b42      	ldr	r3, [pc, #264]	; (8006818 <HAL_SPI_MspInit+0x130>)
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	4a41      	ldr	r2, [pc, #260]	; (8006818 <HAL_SPI_MspInit+0x130>)
 8006714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006718:	6413      	str	r3, [r2, #64]	; 0x40
 800671a:	4b3f      	ldr	r3, [pc, #252]	; (8006818 <HAL_SPI_MspInit+0x130>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <HAL_SPI_MspInit+0x130>)
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	4a3a      	ldr	r2, [pc, #232]	; (8006818 <HAL_SPI_MspInit+0x130>)
 8006730:	f043 0304 	orr.w	r3, r3, #4
 8006734:	6313      	str	r3, [r2, #48]	; 0x30
 8006736:	4b38      	ldr	r3, [pc, #224]	; (8006818 <HAL_SPI_MspInit+0x130>)
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	4b34      	ldr	r3, [pc, #208]	; (8006818 <HAL_SPI_MspInit+0x130>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	4a33      	ldr	r2, [pc, #204]	; (8006818 <HAL_SPI_MspInit+0x130>)
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	6313      	str	r3, [r2, #48]	; 0x30
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <HAL_SPI_MspInit+0x130>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	60bb      	str	r3, [r7, #8]
 800675c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800675e:	230c      	movs	r3, #12
 8006760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006762:	2302      	movs	r3, #2
 8006764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800676a:	2303      	movs	r3, #3
 800676c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800676e:	2305      	movs	r3, #5
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006772:	f107 0314 	add.w	r3, r7, #20
 8006776:	4619      	mov	r1, r3
 8006778:	4828      	ldr	r0, [pc, #160]	; (800681c <HAL_SPI_MspInit+0x134>)
 800677a:	f004 fb6d 	bl	800ae58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 800677e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006784:	2302      	movs	r3, #2
 8006786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800678c:	2303      	movs	r3, #3
 800678e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006790:	2305      	movs	r3, #5
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8006794:	f107 0314 	add.w	r3, r7, #20
 8006798:	4619      	mov	r1, r3
 800679a:	4821      	ldr	r0, [pc, #132]	; (8006820 <HAL_SPI_MspInit+0x138>)
 800679c:	f004 fb5c 	bl	800ae58 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80067a0:	4b20      	ldr	r3, [pc, #128]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067a2:	4a21      	ldr	r2, [pc, #132]	; (8006828 <HAL_SPI_MspInit+0x140>)
 80067a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80067a6:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067ae:	2240      	movs	r2, #64	; 0x40
 80067b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067b2:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067c0:	4b18      	ldr	r3, [pc, #96]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80067cc:	4b15      	ldr	r3, [pc, #84]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067da:	2200      	movs	r2, #0
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80067de:	4811      	ldr	r0, [pc, #68]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067e0:	f003 ff38 	bl	800a654 <HAL_DMA_Init>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80067ea:	f7ff fdef 	bl	80063cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067f2:	649a      	str	r2, [r3, #72]	; 0x48
 80067f4:	4a0b      	ldr	r2, [pc, #44]	; (8006824 <HAL_SPI_MspInit+0x13c>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	2024      	movs	r0, #36	; 0x24
 8006800:	f003 fef1 	bl	800a5e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006804:	2024      	movs	r0, #36	; 0x24
 8006806:	f003 ff0a 	bl	800a61e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800680a:	bf00      	nop
 800680c:	3728      	adds	r7, #40	; 0x28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40003800 	.word	0x40003800
 8006818:	40023800 	.word	0x40023800
 800681c:	40020800 	.word	0x40020800
 8006820:	40020400 	.word	0x40020400
 8006824:	200022d8 	.word	0x200022d8
 8006828:	40026070 	.word	0x40026070

0800682c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d116      	bne.n	800686c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <HAL_TIM_Base_MspInit+0x80>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a19      	ldr	r2, [pc, #100]	; (80068ac <HAL_TIM_Base_MspInit+0x80>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
 800684e:	4b17      	ldr	r3, [pc, #92]	; (80068ac <HAL_TIM_Base_MspInit+0x80>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	2100      	movs	r1, #0
 800685e:	201c      	movs	r0, #28
 8006860:	f003 fec1 	bl	800a5e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006864:	201c      	movs	r0, #28
 8006866:	f003 feda 	bl	800a61e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800686a:	e01a      	b.n	80068a2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <HAL_TIM_Base_MspInit+0x84>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d115      	bne.n	80068a2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <HAL_TIM_Base_MspInit+0x80>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	4a0b      	ldr	r2, [pc, #44]	; (80068ac <HAL_TIM_Base_MspInit+0x80>)
 8006880:	f043 0302 	orr.w	r3, r3, #2
 8006884:	6413      	str	r3, [r2, #64]	; 0x40
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_TIM_Base_MspInit+0x80>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	60bb      	str	r3, [r7, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	201d      	movs	r0, #29
 8006898:	f003 fea5 	bl	800a5e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800689c:	201d      	movs	r0, #29
 800689e:	f003 febe 	bl	800a61e <HAL_NVIC_EnableIRQ>
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40023800 	.word	0x40023800
 80068b0:	40000400 	.word	0x40000400

080068b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068bc:	f107 031c 	add.w	r3, r7, #28
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	605a      	str	r2, [r3, #4]
 80068c6:	609a      	str	r2, [r3, #8]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <HAL_UART_MspInit+0x108>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d134      	bne.n	8006940 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 80068e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e4:	6413      	str	r3, [r2, #64]	; 0x40
 80068e6:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	4b32      	ldr	r3, [pc, #200]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	4a31      	ldr	r2, [pc, #196]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	6313      	str	r3, [r2, #48]	; 0x30
 8006902:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800690e:	230c      	movs	r3, #12
 8006910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006912:	2302      	movs	r3, #2
 8006914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006916:	2300      	movs	r3, #0
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800691a:	2303      	movs	r3, #3
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800691e:	2307      	movs	r3, #7
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006922:	f107 031c 	add.w	r3, r7, #28
 8006926:	4619      	mov	r1, r3
 8006928:	4826      	ldr	r0, [pc, #152]	; (80069c4 <HAL_UART_MspInit+0x110>)
 800692a:	f004 fa95 	bl	800ae58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	2026      	movs	r0, #38	; 0x26
 8006934:	f003 fe57 	bl	800a5e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006938:	2026      	movs	r0, #38	; 0x26
 800693a:	f003 fe70 	bl	800a61e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800693e:	e039      	b.n	80069b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <HAL_UART_MspInit+0x114>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d134      	bne.n	80069b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	4b1c      	ldr	r3, [pc, #112]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 8006954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006958:	6413      	str	r3, [r2, #64]	; 0x40
 800695a:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	4a14      	ldr	r2, [pc, #80]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 8006970:	f043 0304 	orr.w	r3, r3, #4
 8006974:	6313      	str	r3, [r2, #48]	; 0x30
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <HAL_UART_MspInit+0x10c>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8006982:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8006986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006988:	2302      	movs	r3, #2
 800698a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	2300      	movs	r3, #0
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006990:	2303      	movs	r3, #3
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006994:	2307      	movs	r3, #7
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006998:	f107 031c 	add.w	r3, r7, #28
 800699c:	4619      	mov	r1, r3
 800699e:	480b      	ldr	r0, [pc, #44]	; (80069cc <HAL_UART_MspInit+0x118>)
 80069a0:	f004 fa5a 	bl	800ae58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80069a4:	2200      	movs	r2, #0
 80069a6:	2100      	movs	r1, #0
 80069a8:	2027      	movs	r0, #39	; 0x27
 80069aa:	f003 fe1c 	bl	800a5e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80069ae:	2027      	movs	r0, #39	; 0x27
 80069b0:	f003 fe35 	bl	800a61e <HAL_NVIC_EnableIRQ>
}
 80069b4:	bf00      	nop
 80069b6:	3730      	adds	r7, #48	; 0x30
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40004400 	.word	0x40004400
 80069c0:	40023800 	.word	0x40023800
 80069c4:	40020000 	.word	0x40020000
 80069c8:	40004800 	.word	0x40004800
 80069cc:	40020800 	.word	0x40020800

080069d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80069d4:	e7fe      	b.n	80069d4 <NMI_Handler+0x4>

080069d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069d6:	b480      	push	{r7}
 80069d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069da:	e7fe      	b.n	80069da <HardFault_Handler+0x4>

080069dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069e0:	e7fe      	b.n	80069e0 <MemManage_Handler+0x4>

080069e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069e2:	b480      	push	{r7}
 80069e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069e6:	e7fe      	b.n	80069e6 <BusFault_Handler+0x4>

080069e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069ec:	e7fe      	b.n	80069ec <UsageFault_Handler+0x4>

080069ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069ee:	b480      	push	{r7}
 80069f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069f2:	bf00      	nop
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a00:	bf00      	nop
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a0e:	bf00      	nop
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a1c:	f003 f8c0 	bl	8009ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a20:	bf00      	nop
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8006a28:	2010      	movs	r0, #16
 8006a2a:	f004 fbf5 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006a2e:	bf00      	nop
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006a38:	4802      	ldr	r0, [pc, #8]	; (8006a44 <DMA1_Stream4_IRQHandler+0x10>)
 8006a3a:	f003 ffa3 	bl	800a984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	200022d8 	.word	0x200022d8

08006a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006a4c:	4804      	ldr	r0, [pc, #16]	; (8006a60 <TIM2_IRQHandler+0x18>)
 8006a4e:	f007 f8bb 	bl	800dbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8006a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a56:	4803      	ldr	r0, [pc, #12]	; (8006a64 <TIM2_IRQHandler+0x1c>)
 8006a58:	f004 fbc3 	bl	800b1e2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8006a5c:	bf00      	nop
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20002338 	.word	0x20002338
 8006a64:	40020000 	.word	0x40020000

08006a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006a6c:	4802      	ldr	r0, [pc, #8]	; (8006a78 <TIM3_IRQHandler+0x10>)
 8006a6e:	f007 f8ab 	bl	800dbc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006a72:	bf00      	nop
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20002380 	.word	0x20002380

08006a7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006a80:	4802      	ldr	r0, [pc, #8]	; (8006a8c <SPI2_IRQHandler+0x10>)
 8006a82:	f006 fd83 	bl	800d58c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006a86:	bf00      	nop
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20002280 	.word	0x20002280

08006a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006a94:	4802      	ldr	r0, [pc, #8]	; (8006aa0 <USART2_IRQHandler+0x10>)
 8006a96:	f007 fd69 	bl	800e56c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200023c8 	.word	0x200023c8

08006aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006aa8:	4802      	ldr	r0, [pc, #8]	; (8006ab4 <USART3_IRQHandler+0x10>)
 8006aaa:	f007 fd5f 	bl	800e56c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2000240c 	.word	0x2000240c

08006ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006abc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006ac0:	f004 fbaa 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006ac4:	bf00      	nop
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006acc:	4802      	ldr	r0, [pc, #8]	; (8006ad8 <DMA2_Stream0_IRQHandler+0x10>)
 8006ace:	f003 ff59 	bl	800a984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006ad2:	bf00      	nop
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2000216c 	.word	0x2000216c

08006adc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006ae0:	4802      	ldr	r0, [pc, #8]	; (8006aec <DMA2_Stream2_IRQHandler+0x10>)
 8006ae2:	f003 ff4f 	bl	800a984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006ae6:	bf00      	nop
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200021cc 	.word	0x200021cc

08006af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  return 1;
 8006af4:	2301      	movs	r3, #1
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <_kill>:

int _kill(int pid, int sig)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006b0a:	f009 fcd1 	bl	80104b0 <__errno>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2216      	movs	r2, #22
 8006b12:	601a      	str	r2, [r3, #0]
  return -1;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <_exit>:

void _exit (int status)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff ffe7 	bl	8006b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006b32:	e7fe      	b.n	8006b32 <_exit+0x12>

08006b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e00a      	b.n	8006b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006b46:	f3af 8000 	nop.w
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	60ba      	str	r2, [r7, #8]
 8006b52:	b2ca      	uxtb	r2, r1
 8006b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	dbf0      	blt.n	8006b46 <_read+0x12>
  }

  return len;
 8006b64:	687b      	ldr	r3, [r7, #4]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	e009      	b.n	8006b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	60ba      	str	r2, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	3301      	adds	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	dbf1      	blt.n	8006b80 <_write+0x12>
  }
  return len;
 8006b9c:	687b      	ldr	r3, [r7, #4]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <_close>:

int _close(int file)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bce:	605a      	str	r2, [r3, #4]
  return 0;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <_isatty>:

int _isatty(int file)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006be6:	2301      	movs	r3, #1
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
	...

08006c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c18:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <_sbrk+0x5c>)
 8006c1a:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <_sbrk+0x60>)
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c24:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <_sbrk+0x64>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <_sbrk+0x64>)
 8006c2e:	4a12      	ldr	r2, [pc, #72]	; (8006c78 <_sbrk+0x68>)
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c32:	4b10      	ldr	r3, [pc, #64]	; (8006c74 <_sbrk+0x64>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4413      	add	r3, r2
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d207      	bcs.n	8006c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c40:	f009 fc36 	bl	80104b0 <__errno>
 8006c44:	4603      	mov	r3, r0
 8006c46:	220c      	movs	r2, #12
 8006c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c4e:	e009      	b.n	8006c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c50:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <_sbrk+0x64>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <_sbrk+0x64>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4a05      	ldr	r2, [pc, #20]	; (8006c74 <_sbrk+0x64>)
 8006c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c62:	68fb      	ldr	r3, [r7, #12]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20020000 	.word	0x20020000
 8006c70:	00000400 	.word	0x00000400
 8006c74:	20008274 	.word	0x20008274
 8006c78:	2000a070 	.word	0x2000a070

08006c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <SystemInit+0x20>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c86:	4a05      	ldr	r2, [pc, #20]	; (8006c9c <SystemInit+0x20>)
 8006c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c90:	bf00      	nop
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	e000ed00 	.word	0xe000ed00

08006ca0 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8006ca0:	b40f      	push	{r0, r1, r2, r3}
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cb6:	480b      	ldr	r0, [pc, #44]	; (8006ce4 <term_print+0x44>)
 8006cb8:	f009 fb28 	bl	801030c <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8006cbc:	4809      	ldr	r0, [pc, #36]	; (8006ce4 <term_print+0x44>)
 8006cbe:	f7f9 faf7 	bl	80002b0 <strlen>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cca:	4906      	ldr	r1, [pc, #24]	; (8006ce4 <term_print+0x44>)
 8006ccc:	4806      	ldr	r0, [pc, #24]	; (8006ce8 <term_print+0x48>)
 8006cce:	f007 fb8a 	bl	800e3e6 <HAL_UART_Transmit>
 8006cd2:	4603      	mov	r3, r0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cde:	b004      	add	sp, #16
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20008278 	.word	0x20008278
 8006ce8:	200023c8 	.word	0x200023c8

08006cec <term_print_hex>:
 * Print buffer content in hexadecimal format
 * parameter buf: buffer
 * parameter len: buffer length
 * parameter per_line: number of values to print per line (0=default)
 */
void term_print_hex(uint8_t* buf, unsigned len, uint8_t per_line) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]
	if (per_line < 4) { per_line = 16; }
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d801      	bhi.n	8006d08 <term_print_hex+0x1c>
 8006d04:	2310      	movs	r3, #16
 8006d06:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < len; i++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	e016      	b.n	8006d3c <term_print_hex+0x50>
		term_print("%02X ", buf[i]);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	480d      	ldr	r0, [pc, #52]	; (8006d50 <term_print_hex+0x64>)
 8006d1a:	f7ff ffc1 	bl	8006ca0 <term_print>
		if (++count >= per_line) {
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	3301      	adds	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
 8006d24:	7dfa      	ldrb	r2, [r7, #23]
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d304      	bcc.n	8006d36 <term_print_hex+0x4a>
			term_print("\r\n");
 8006d2c:	4809      	ldr	r0, [pc, #36]	; (8006d54 <term_print_hex+0x68>)
 8006d2e:	f7ff ffb7 	bl	8006ca0 <term_print>
			count = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < len; i++) {
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d8e4      	bhi.n	8006d0e <term_print_hex+0x22>
		}
	}
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08013d38 	.word	0x08013d38
 8006d54:	08013d40 	.word	0x08013d40

08006d58 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d838      	bhi.n	8006de2 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	4619      	mov	r1, r3
 8006d74:	481d      	ldr	r0, [pc, #116]	; (8006dec <term_show_buffer+0x94>)
 8006d76:	f7ff ff93 	bl	8006ca0 <term_print>
	term_print("%3d: ", 0);
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	481c      	ldr	r0, [pc, #112]	; (8006df0 <term_show_buffer+0x98>)
 8006d7e:	f7ff ff8f 	bl	8006ca0 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e020      	b.n	8006dca <term_show_buffer+0x72>
		if (count >= 20) {
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b13      	cmp	r3, #19
 8006d8c:	dd06      	ble.n	8006d9c <term_show_buffer+0x44>
			count =0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8006d92:	8a7b      	ldrh	r3, [r7, #18]
 8006d94:	4619      	mov	r1, r3
 8006d96:	4817      	ldr	r0, [pc, #92]	; (8006df4 <term_show_buffer+0x9c>)
 8006d98:	f7ff ff82 	bl	8006ca0 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	4916      	ldr	r1, [pc, #88]	; (8006df8 <term_show_buffer+0xa0>)
 8006da0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006da4:	fb03 f202 	mul.w	r2, r3, r2
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006db0:	4619      	mov	r1, r3
 8006db2:	4812      	ldr	r0, [pc, #72]	; (8006dfc <term_show_buffer+0xa4>)
 8006db4:	f7ff ff74 	bl	8006ca0 <term_print>
		count++; address++;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	8a7b      	ldrh	r3, [r7, #18]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8006dd0:	d3da      	bcc.n	8006d88 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8006dd2:	480b      	ldr	r0, [pc, #44]	; (8006e00 <term_show_buffer+0xa8>)
 8006dd4:	f7ff ff64 	bl	8006ca0 <term_print>
	term_show_channel(bufnum);
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f8f6 	bl	8006fcc <term_show_channel>
 8006de0:	e000      	b.n	8006de4 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006de2:	bf00      	nop
}
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	08013d44 	.word	0x08013d44
 8006df0:	08013d50 	.word	0x08013d50
 8006df4:	08013d58 	.word	0x08013d58
 8006df8:	200074dc 	.word	0x200074dc
 8006dfc:	08013d60 	.word	0x08013d60
 8006e00:	08013d40 	.word	0x08013d40
 8006e04:	00000000 	.word	0x00000000

08006e08 <term_show_measurements>:

void term_show_measurements() {
 8006e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e0c:	b090      	sub	sp, #64	; 0x40
 8006e0e:	af0c      	add	r7, sp, #48	; 0x30
			term_print(" invalid readings\r\n");
			return;
		}
	}
	*/
	term_print("%.1fV \r\nI%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", v_filtered, I1+1, i_filtered[I1], va_filtered[I1], w_filtered[I1], pf_filtered[I1], acos(pf_filtered[I1]) * (180.0 / 3.14159265) );
 8006e10:	4b67      	ldr	r3, [pc, #412]	; (8006fb0 <term_show_measurements+0x1a8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7f9 fbb7 	bl	8000588 <__aeabi_f2d>
 8006e1a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006e1e:	4b65      	ldr	r3, [pc, #404]	; (8006fb4 <term_show_measurements+0x1ac>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7f9 fbb0 	bl	8000588 <__aeabi_f2d>
 8006e28:	4604      	mov	r4, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	4b62      	ldr	r3, [pc, #392]	; (8006fb8 <term_show_measurements+0x1b0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7f9 fba9 	bl	8000588 <__aeabi_f2d>
 8006e36:	4680      	mov	r8, r0
 8006e38:	4689      	mov	r9, r1
 8006e3a:	4b60      	ldr	r3, [pc, #384]	; (8006fbc <term_show_measurements+0x1b4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7f9 fba2 	bl	8000588 <__aeabi_f2d>
 8006e44:	4682      	mov	sl, r0
 8006e46:	468b      	mov	fp, r1
 8006e48:	4b5d      	ldr	r3, [pc, #372]	; (8006fc0 <term_show_measurements+0x1b8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7f9 fb9b 	bl	8000588 <__aeabi_f2d>
 8006e52:	e9c7 0100 	strd	r0, r1, [r7]
 8006e56:	4b5a      	ldr	r3, [pc, #360]	; (8006fc0 <term_show_measurements+0x1b8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7f9 fb94 	bl	8000588 <__aeabi_f2d>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	ec43 2b10 	vmov	d0, r2, r3
 8006e68:	f00b ff18 	bl	8012c9c <acos>
 8006e6c:	ec51 0b10 	vmov	r0, r1, d0
 8006e70:	a34d      	add	r3, pc, #308	; (adr r3, 8006fa8 <term_show_measurements+0x1a0>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 fbdf 	bl	8000638 <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e82:	ed97 7b00 	vldr	d7, [r7]
 8006e86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006e8a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8006e8e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006e92:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e96:	2301      	movs	r3, #1
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e9e:	4849      	ldr	r0, [pc, #292]	; (8006fc4 <term_show_measurements+0x1bc>)
 8006ea0:	f7ff fefe 	bl	8006ca0 <term_print>
	term_print("I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", I2+1, i_filtered[I2], va_filtered[I2], w_filtered[I2], pf_filtered[I2], acos(pf_filtered[I2]) * (180.0 / 3.14159265) );
 8006ea4:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <term_show_measurements+0x1ac>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7f9 fb6d 	bl	8000588 <__aeabi_f2d>
 8006eae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006eb2:	4b41      	ldr	r3, [pc, #260]	; (8006fb8 <term_show_measurements+0x1b0>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7f9 fb66 	bl	8000588 <__aeabi_f2d>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	4b3e      	ldr	r3, [pc, #248]	; (8006fbc <term_show_measurements+0x1b4>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7f9 fb5f 	bl	8000588 <__aeabi_f2d>
 8006eca:	4680      	mov	r8, r0
 8006ecc:	4689      	mov	r9, r1
 8006ece:	4b3c      	ldr	r3, [pc, #240]	; (8006fc0 <term_show_measurements+0x1b8>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7f9 fb58 	bl	8000588 <__aeabi_f2d>
 8006ed8:	4682      	mov	sl, r0
 8006eda:	468b      	mov	fp, r1
 8006edc:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <term_show_measurements+0x1b8>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 fb51 	bl	8000588 <__aeabi_f2d>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	ec43 2b10 	vmov	d0, r2, r3
 8006eee:	f00b fed5 	bl	8012c9c <acos>
 8006ef2:	ec51 0b10 	vmov	r0, r1, d0
 8006ef6:	a32c      	add	r3, pc, #176	; (adr r3, 8006fa8 <term_show_measurements+0x1a0>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 fb9c 	bl	8000638 <__aeabi_dmul>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f08:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006f0c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006f10:	e9cd 4500 	strd	r4, r5, [sp]
 8006f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f18:	2102      	movs	r1, #2
 8006f1a:	482b      	ldr	r0, [pc, #172]	; (8006fc8 <term_show_measurements+0x1c0>)
 8006f1c:	f7ff fec0 	bl	8006ca0 <term_print>
	term_print("I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", I3+1, i_filtered[I3], va_filtered[I3], w_filtered[I3], pf_filtered[I3], acos(pf_filtered[I3]) * (180.0 / 3.14159265) );
 8006f20:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <term_show_measurements+0x1ac>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7f9 fb2f 	bl	8000588 <__aeabi_f2d>
 8006f2a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006f2e:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <term_show_measurements+0x1b0>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7f9 fb28 	bl	8000588 <__aeabi_f2d>
 8006f38:	4604      	mov	r4, r0
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <term_show_measurements+0x1b4>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7f9 fb21 	bl	8000588 <__aeabi_f2d>
 8006f46:	4680      	mov	r8, r0
 8006f48:	4689      	mov	r9, r1
 8006f4a:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <term_show_measurements+0x1b8>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 fb1a 	bl	8000588 <__aeabi_f2d>
 8006f54:	4682      	mov	sl, r0
 8006f56:	468b      	mov	fp, r1
 8006f58:	4b19      	ldr	r3, [pc, #100]	; (8006fc0 <term_show_measurements+0x1b8>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7f9 fb13 	bl	8000588 <__aeabi_f2d>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	ec43 2b10 	vmov	d0, r2, r3
 8006f6a:	f00b fe97 	bl	8012c9c <acos>
 8006f6e:	ec51 0b10 	vmov	r0, r1, d0
 8006f72:	a30d      	add	r3, pc, #52	; (adr r3, 8006fa8 <term_show_measurements+0x1a0>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f7f9 fb5e 	bl	8000638 <__aeabi_dmul>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f84:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006f88:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006f8c:	e9cd 4500 	strd	r4, r5, [sp]
 8006f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f94:	2103      	movs	r1, #3
 8006f96:	480c      	ldr	r0, [pc, #48]	; (8006fc8 <term_show_measurements+0x1c0>)
 8006f98:	f7ff fe82 	bl	8006ca0 <term_print>
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fa6:	bf00      	nop
 8006fa8:	1af05a77 	.word	0x1af05a77
 8006fac:	404ca5dc 	.word	0x404ca5dc
 8006fb0:	200003c4 	.word	0x200003c4
 8006fb4:	200003c8 	.word	0x200003c8
 8006fb8:	200003d4 	.word	0x200003d4
 8006fbc:	200003e0 	.word	0x200003e0
 8006fc0:	200003ec 	.word	0x200003ec
 8006fc4:	08013d68 	.word	0x08013d68
 8006fc8:	08013d9c 	.word	0x08013d9c

08006fcc <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8006fcc:	b5b0      	push	{r4, r5, r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	f200 80a5 	bhi.w	8007128 <term_show_channel+0x15c>
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4853      	ldr	r0, [pc, #332]	; (8007130 <term_show_channel+0x164>)
 8006fe4:	f7ff fe5c 	bl	8006ca0 <term_print>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8006fe8:	79fa      	ldrb	r2, [r7, #7]
 8006fea:	4952      	ldr	r1, [pc, #328]	; (8007134 <term_show_channel+0x168>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d004      	beq.n	8007008 <term_show_channel+0x3c>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	4619      	mov	r1, r3
 8007002:	484d      	ldr	r0, [pc, #308]	; (8007138 <term_show_channel+0x16c>)
 8007004:	f7ff fe4c 	bl	8006ca0 <term_print>
		//term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
		//return;
	}

	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8007008:	79fa      	ldrb	r2, [r7, #7]
 800700a:	494a      	ldr	r1, [pc, #296]	; (8007134 <term_show_channel+0x168>)
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	3302      	adds	r3, #2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	79fa      	ldrb	r2, [r7, #7]
 800701e:	4945      	ldr	r1, [pc, #276]	; (8007134 <term_show_channel+0x168>)
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	1ac3      	subs	r3, r0, r3
 800702e:	60fb      	str	r3, [r7, #12]
	term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, pp_reading );
 8007030:	79fa      	ldrb	r2, [r7, #7]
 8007032:	4940      	ldr	r1, [pc, #256]	; (8007134 <term_show_channel+0x168>)
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	79fa      	ldrb	r2, [r7, #7]
 8007044:	493b      	ldr	r1, [pc, #236]	; (8007134 <term_show_channel+0x168>)
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	3302      	adds	r3, #2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4601      	mov	r1, r0
 800705a:	4838      	ldr	r0, [pc, #224]	; (800713c <term_show_channel+0x170>)
 800705c:	f7ff fe20 	bl	8006ca0 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8007060:	79fa      	ldrb	r2, [r7, #7]
 8007062:	4934      	ldr	r1, [pc, #208]	; (8007134 <term_show_channel+0x168>)
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	3310      	adds	r3, #16
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	b21b      	sxth	r3, r3
 8007074:	4618      	mov	r0, r3
 8007076:	f7fb fe1f 	bl	8002cb8 <calc_adc_raw_to_mv_int>
 800707a:	4604      	mov	r4, r0
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	b21b      	sxth	r3, r3
 8007080:	4618      	mov	r0, r3
 8007082:	f7fb fe19 	bl	8002cb8 <calc_adc_raw_to_mv_int>
 8007086:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2 + sample_buf_meta[bufnum].min) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	0fda      	lsrs	r2, r3, #31
 800708c:	4413      	add	r3, r2
 800708e:	105b      	asrs	r3, r3, #1
 8007090:	b299      	uxth	r1, r3
 8007092:	79fa      	ldrb	r2, [r7, #7]
 8007094:	4827      	ldr	r0, [pc, #156]	; (8007134 <term_show_channel+0x168>)
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4403      	add	r3, r0
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	440b      	add	r3, r1
 80070a4:	b29b      	uxth	r3, r3
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fb fe05 	bl	8002cb8 <calc_adc_raw_to_mv_int>
 80070ae:	4603      	mov	r3, r0
 80070b0:	462a      	mov	r2, r5
 80070b2:	4621      	mov	r1, r4
 80070b4:	4822      	ldr	r0, [pc, #136]	; (8007140 <term_show_channel+0x174>)
 80070b6:	f7ff fdf3 	bl	8006ca0 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 80070ba:	79fa      	ldrb	r2, [r7, #7]
 80070bc:	491d      	ldr	r1, [pc, #116]	; (8007134 <term_show_channel+0x168>)
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b21b      	sxth	r3, r3
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fb fdf3 	bl	8002cb8 <calc_adc_raw_to_mv_int>
 80070d2:	4604      	mov	r4, r0
 80070d4:	79fa      	ldrb	r2, [r7, #7]
 80070d6:	4917      	ldr	r1, [pc, #92]	; (8007134 <term_show_channel+0x168>)
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	3302      	adds	r3, #2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b21b      	sxth	r3, r3
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fb fde5 	bl	8002cb8 <calc_adc_raw_to_mv_int>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	4621      	mov	r1, r4
 80070f4:	4813      	ldr	r0, [pc, #76]	; (8007144 <term_show_channel+0x178>)
 80070f6:	f7ff fdd3 	bl	8006ca0 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 80070fa:	79fa      	ldrb	r2, [r7, #7]
 80070fc:	490d      	ldr	r1, [pc, #52]	; (8007134 <term_show_channel+0x168>)
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	3304      	adds	r3, #4
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	79fa      	ldrb	r2, [r7, #7]
 800710e:	4809      	ldr	r0, [pc, #36]	; (8007134 <term_show_channel+0x168>)
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4403      	add	r3, r0
 800711a:	3308      	adds	r3, #8
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	4809      	ldr	r0, [pc, #36]	; (8007148 <term_show_channel+0x17c>)
 8007122:	f7ff fdbd 	bl	8006ca0 <term_print>
 8007126:	e000      	b.n	800712a <term_show_channel+0x15e>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8007128:	bf00      	nop
}
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bdb0      	pop	{r4, r5, r7, pc}
 8007130:	08013dc8 	.word	0x08013dc8
 8007134:	2000026c 	.word	0x2000026c
 8007138:	08013de4 	.word	0x08013de4
 800713c:	08013e04 	.word	0x08013e04
 8007140:	08013e1c 	.word	0x08013e1c
 8007144:	08013e40 	.word	0x08013e40
 8007148:	08013e58 	.word	0x08013e58

0800714c <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d821      	bhi.n	80071a0 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	4619      	mov	r1, r3
 8007160:	4811      	ldr	r0, [pc, #68]	; (80071a8 <term_csv_buffer+0x5c>)
 8007162:	f7ff fd9d 	bl	8006ca0 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e011      	b.n	8007190 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	490f      	ldr	r1, [pc, #60]	; (80071ac <term_csv_buffer+0x60>)
 8007170:	f44f 7252 	mov.w	r2, #840	; 0x348
 8007174:	fb03 f202 	mul.w	r2, r3, r2
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007180:	461a      	mov	r2, r3
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	480a      	ldr	r0, [pc, #40]	; (80071b0 <term_csv_buffer+0x64>)
 8007186:	f7ff fd8b 	bl	8006ca0 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3301      	adds	r3, #1
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8007196:	d3e9      	bcc.n	800716c <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8007198:	4806      	ldr	r0, [pc, #24]	; (80071b4 <term_csv_buffer+0x68>)
 800719a:	f7ff fd81 	bl	8006ca0 <term_print>
 800719e:	e000      	b.n	80071a2 <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 80071a0:	bf00      	nop
}
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	08013d44 	.word	0x08013d44
 80071ac:	20005a9c 	.word	0x20005a9c
 80071b0:	08013e78 	.word	0x08013e78
 80071b4:	08013e80 	.word	0x08013e80

080071b8 <wifi_handle_esp_rx_data>:
 * @brief  Handle data received from ESP-01
 * @note   The first lot of data received from the ESP after reset is received with a different
 * 	       baudrate (76800) and is therefore unreadable. This function ignores the first RX.
 *         The ESP is init sequence is initiated as soon as the first lot of data is received.
 */
void wifi_handle_esp_rx_data() {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0

	if (esp_rx_error_count) {
 80071bc:	4b1f      	ldr	r3, [pc, #124]	; (800723c <wifi_handle_esp_rx_data+0x84>)
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <wifi_handle_esp_rx_data+0x2a>
		term_print("\r\nrx:%d error:%d\r\n", esp_rx_count, esp_rx_error_count);
 80071c6:	4b1e      	ldr	r3, [pc, #120]	; (8007240 <wifi_handle_esp_rx_data+0x88>)
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	4b1b      	ldr	r3, [pc, #108]	; (800723c <wifi_handle_esp_rx_data+0x84>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	481b      	ldr	r0, [pc, #108]	; (8007244 <wifi_handle_esp_rx_data+0x8c>)
 80071d8:	f7ff fd62 	bl	8006ca0 <term_print>
		esp_rx_error_count = 0;
 80071dc:	4b17      	ldr	r3, [pc, #92]	; (800723c <wifi_handle_esp_rx_data+0x84>)
 80071de:	2200      	movs	r2, #0
 80071e0:	801a      	strh	r2, [r3, #0]
	}
	if (esp_rx_buffer_overflow) {
 80071e2:	4b19      	ldr	r3, [pc, #100]	; (8007248 <wifi_handle_esp_rx_data+0x90>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <wifi_handle_esp_rx_data+0x40>
		term_print("\r\nESP RX buffer overflow\r\n");
 80071ec:	4817      	ldr	r0, [pc, #92]	; (800724c <wifi_handle_esp_rx_data+0x94>)
 80071ee:	f7ff fd57 	bl	8006ca0 <term_print>
		esp_rx_buffer_overflow = false;
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <wifi_handle_esp_rx_data+0x90>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
	}
	if (!esp_first_rx) {
 80071f8:	4b15      	ldr	r3, [pc, #84]	; (8007250 <wifi_handle_esp_rx_data+0x98>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f083 0301 	eor.w	r3, r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <wifi_handle_esp_rx_data+0x62>
		//term_print("\r\nESP first RX\r\n");
		esp_first_rx = true;
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <wifi_handle_esp_rx_data+0x98>)
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800720c:	2032      	movs	r0, #50	; 0x32
 800720e:	f002 fce7 	bl	8009be0 <HAL_Delay>
		at_echo(false);		// turn echo off
 8007212:	2000      	movs	r0, #0
 8007214:	f000 f87e 	bl	8007314 <at_echo>
	} else {
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
		//term_print("\r\n%s() - <%s>\r\n", __FUNCTION__, esp_rx_buf);
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
	}
}
 8007218:	e00d      	b.n	8007236 <wifi_handle_esp_rx_data+0x7e>
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
 800721a:	4b09      	ldr	r3, [pc, #36]	; (8007240 <wifi_handle_esp_rx_data+0x88>)
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <wifi_handle_esp_rx_data+0x9c>)
 8007224:	2100      	movs	r1, #0
 8007226:	5499      	strb	r1, [r3, r2]
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <wifi_handle_esp_rx_data+0x88>)
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	4619      	mov	r1, r3
 8007230:	4808      	ldr	r0, [pc, #32]	; (8007254 <wifi_handle_esp_rx_data+0x9c>)
 8007232:	f000 fb99 	bl	8007968 <evaluate_esp_response>
}
 8007236:	bf00      	nop
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20008afa 	.word	0x20008afa
 8007240:	20008af8 	.word	0x20008af8
 8007244:	08013e98 	.word	0x08013e98
 8007248:	20008afc 	.word	0x20008afc
 800724c:	08013eac 	.word	0x08013eac
 8007250:	20008f00 	.word	0x20008f00
 8007254:	20008678 	.word	0x20008678

08007258 <cmd_sequence>:
 * @brief  ESP-01 init sequence commands
 * @note   Each step decrements the init step number.
 *         Command sent = step--
 *         OK response = step--
 */
void cmd_sequence() {
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
#ifdef WIFI_DEBUG
	term_print( "%s() - step: %d\r\n", __FUNCTION__, esp_cmd_step );
#endif
	switch (esp_cmd_step) {
 800725c:	4b27      	ldr	r3, [pc, #156]	; (80072fc <cmd_sequence+0xa4>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b06      	cmp	r3, #6
 8007262:	d006      	beq.n	8007272 <cmd_sequence+0x1a>
 8007264:	2b06      	cmp	r3, #6
 8007266:	dc47      	bgt.n	80072f8 <cmd_sequence+0xa0>
 8007268:	2b02      	cmp	r3, #2
 800726a:	d02e      	beq.n	80072ca <cmd_sequence+0x72>
 800726c:	2b04      	cmp	r3, #4
 800726e:	d016      	beq.n	800729e <cmd_sequence+0x46>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
		esp_cmd_step --;
		break;
	default:
	}
}
 8007270:	e042      	b.n	80072f8 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIFSR\r\n");		// get IP address
 8007272:	4923      	ldr	r1, [pc, #140]	; (8007300 <cmd_sequence+0xa8>)
 8007274:	4823      	ldr	r0, [pc, #140]	; (8007304 <cmd_sequence+0xac>)
 8007276:	f008 fe3b 	bl	800fef0 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 800727a:	4822      	ldr	r0, [pc, #136]	; (8007304 <cmd_sequence+0xac>)
 800727c:	f7f9 f818 	bl	80002b0 <strlen>
 8007280:	4603      	mov	r3, r0
 8007282:	b29a      	uxth	r2, r3
 8007284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007288:	491e      	ldr	r1, [pc, #120]	; (8007304 <cmd_sequence+0xac>)
 800728a:	481f      	ldr	r0, [pc, #124]	; (8007308 <cmd_sequence+0xb0>)
 800728c:	f007 f8ab 	bl	800e3e6 <HAL_UART_Transmit>
		esp_cmd_step --;
 8007290:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <cmd_sequence+0xa4>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	3b01      	subs	r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	4b18      	ldr	r3, [pc, #96]	; (80072fc <cmd_sequence+0xa4>)
 800729a:	701a      	strb	r2, [r3, #0]
		break;
 800729c:	e02c      	b.n	80072f8 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIPMUX=1\r\n");	// start server
 800729e:	491b      	ldr	r1, [pc, #108]	; (800730c <cmd_sequence+0xb4>)
 80072a0:	4818      	ldr	r0, [pc, #96]	; (8007304 <cmd_sequence+0xac>)
 80072a2:	f008 fe25 	bl	800fef0 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80072a6:	4817      	ldr	r0, [pc, #92]	; (8007304 <cmd_sequence+0xac>)
 80072a8:	f7f9 f802 	bl	80002b0 <strlen>
 80072ac:	4603      	mov	r3, r0
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072b4:	4913      	ldr	r1, [pc, #76]	; (8007304 <cmd_sequence+0xac>)
 80072b6:	4814      	ldr	r0, [pc, #80]	; (8007308 <cmd_sequence+0xb0>)
 80072b8:	f007 f895 	bl	800e3e6 <HAL_UART_Transmit>
		esp_cmd_step --;
 80072bc:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <cmd_sequence+0xa4>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <cmd_sequence+0xa4>)
 80072c6:	701a      	strb	r2, [r3, #0]
		break;
 80072c8:	e016      	b.n	80072f8 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIPSERVER=1,%d\r\n", MODBUS_SERVER_PORT);	// start server
 80072ca:	2250      	movs	r2, #80	; 0x50
 80072cc:	4910      	ldr	r1, [pc, #64]	; (8007310 <cmd_sequence+0xb8>)
 80072ce:	480d      	ldr	r0, [pc, #52]	; (8007304 <cmd_sequence+0xac>)
 80072d0:	f008 fe0e 	bl	800fef0 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80072d4:	480b      	ldr	r0, [pc, #44]	; (8007304 <cmd_sequence+0xac>)
 80072d6:	f7f8 ffeb 	bl	80002b0 <strlen>
 80072da:	4603      	mov	r3, r0
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e2:	4908      	ldr	r1, [pc, #32]	; (8007304 <cmd_sequence+0xac>)
 80072e4:	4808      	ldr	r0, [pc, #32]	; (8007308 <cmd_sequence+0xb0>)
 80072e6:	f007 f87e 	bl	800e3e6 <HAL_UART_Transmit>
		esp_cmd_step --;
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <cmd_sequence+0xa4>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4b02      	ldr	r3, [pc, #8]	; (80072fc <cmd_sequence+0xa4>)
 80072f4:	701a      	strb	r2, [r3, #0]
		break;
 80072f6:	bf00      	nop
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20008f04 	.word	0x20008f04
 8007300:	08013ed8 	.word	0x08013ed8
 8007304:	20008a78 	.word	0x20008a78
 8007308:	2000240c 	.word	0x2000240c
 800730c:	08013ee4 	.word	0x08013ee4
 8007310:	08013ef4 	.word	0x08013ef4

08007314 <at_echo>:

/*
 * @brief  disable echo
 * @para   on_off  true to enable echo, false to disable
 */
void at_echo(bool on_off) {
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
	if (on_off == true) {
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <at_echo+0x1a>
		sprintf((char*)esp_tx_buf, "ATE1\r\n");	// enable echo
 8007324:	490b      	ldr	r1, [pc, #44]	; (8007354 <at_echo+0x40>)
 8007326:	480c      	ldr	r0, [pc, #48]	; (8007358 <at_echo+0x44>)
 8007328:	f008 fde2 	bl	800fef0 <siprintf>
 800732c:	e003      	b.n	8007336 <at_echo+0x22>
	} else {
		sprintf((char*)esp_tx_buf, "ATE0\r\n");	// disable echo
 800732e:	490b      	ldr	r1, [pc, #44]	; (800735c <at_echo+0x48>)
 8007330:	4809      	ldr	r0, [pc, #36]	; (8007358 <at_echo+0x44>)
 8007332:	f008 fddd 	bl	800fef0 <siprintf>
	}
	HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 8007336:	4808      	ldr	r0, [pc, #32]	; (8007358 <at_echo+0x44>)
 8007338:	f7f8 ffba 	bl	80002b0 <strlen>
 800733c:	4603      	mov	r3, r0
 800733e:	b29a      	uxth	r2, r3
 8007340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007344:	4904      	ldr	r1, [pc, #16]	; (8007358 <at_echo+0x44>)
 8007346:	4806      	ldr	r0, [pc, #24]	; (8007360 <at_echo+0x4c>)
 8007348:	f007 f84d 	bl	800e3e6 <HAL_UART_Transmit>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	08013f08 	.word	0x08013f08
 8007358:	20008a78 	.word	0x20008a78
 800735c:	08013f10 	.word	0x08013f10
 8007360:	2000240c 	.word	0x2000240c

08007364 <on_link>:

/*
 * @brief  perform functions on TCP Link Up/Down
 * @para   up_down  true = up, false = down
 */
void on_link(bool up_down) {
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	71fb      	strb	r3, [r7, #7]
	if (up_down == true) {
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <on_link+0x26>
#ifdef WIFI_DEBUG
		term_print("%s() - LINK UP\r\n", __FUNCTION__);
#endif
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8007374:	2201      	movs	r2, #1
 8007376:	2120      	movs	r1, #32
 8007378:	480b      	ldr	r0, [pc, #44]	; (80073a8 <on_link+0x44>)
 800737a:	f003 ff19 	bl	800b1b0 <HAL_GPIO_WritePin>
		esp_cmd_step = 6;	// kick off commands
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <on_link+0x48>)
 8007380:	2206      	movs	r2, #6
 8007382:	701a      	strb	r2, [r3, #0]
		cmd_sequence();
 8007384:	f7ff ff68 	bl	8007258 <cmd_sequence>
		strcpy(ip_addr_str, empty_ip);
#ifdef WIFI_DEBUG
		term_print("%s() - LINK DOWN\r\n", __FUNCTION__);
#endif
	}
}
 8007388:	e00a      	b.n	80073a0 <on_link+0x3c>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800738a:	2200      	movs	r2, #0
 800738c:	2120      	movs	r1, #32
 800738e:	4806      	ldr	r0, [pc, #24]	; (80073a8 <on_link+0x44>)
 8007390:	f003 ff0e 	bl	800b1b0 <HAL_GPIO_WritePin>
		strcpy(ip_addr_str, empty_ip);
 8007394:	4b06      	ldr	r3, [pc, #24]	; (80073b0 <on_link+0x4c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	4806      	ldr	r0, [pc, #24]	; (80073b4 <on_link+0x50>)
 800739c:	f009 f8c3 	bl	8010526 <strcpy>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40020000 	.word	0x40020000
 80073ac:	20008f04 	.word	0x20008f04
 80073b0:	20000040 	.word	0x20000040
 80073b4:	20000044 	.word	0x20000044

080073b8 <set_connection_status>:

/*
 * @brief  Update connection status
 * @para   new_status  new connection status
 */
void set_connection_status(uint8_t new_status) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	71fb      	strb	r3, [r7, #7]
	bool new_con = false;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
	if (new_status == 2) { new_con = true; }
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d101      	bne.n	80073d0 <set_connection_status+0x18>
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]

	if (new_con != esp_con_is_up) {
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <set_connection_status+0x38>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	7bfa      	ldrb	r2, [r7, #15]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d006      	beq.n	80073e8 <set_connection_status+0x30>
		esp_con_is_up = new_con;
 80073da:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <set_connection_status+0x38>)
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	7013      	strb	r3, [r2, #0]
		on_link( new_con );
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff ffbe 	bl	8007364 <on_link>
	}
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20008f03 	.word	0x20008f03

080073f4 <esp_client_connection>:
/*
 * @brief   Client connection messsage
 * @para    token  0,CONNECT or 0,DISCONNECT
 * @retval  -1 on failure
 */
int esp_client_connection(char* token) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	uint8_t client_num;
	if (token[1] != ',') { return -1; }
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b2c      	cmp	r3, #44	; 0x2c
 8007404:	d002      	beq.n	800740c <esp_client_connection+0x18>
 8007406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800740a:	e034      	b.n	8007476 <esp_client_connection+0x82>
	client_num = token[0] - '0';
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	3b30      	subs	r3, #48	; 0x30
 8007412:	73fb      	strb	r3, [r7, #15]
	if (token[2] !=  'C') { return -1; }
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3302      	adds	r3, #2
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b43      	cmp	r3, #67	; 0x43
 800741c:	d002      	beq.n	8007424 <esp_client_connection+0x30>
 800741e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007422:	e028      	b.n	8007476 <esp_client_connection+0x82>
	if (token[3] ==  'O') {		// CONNECT
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3303      	adds	r3, #3
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b4f      	cmp	r3, #79	; 0x4f
 800742c:	d10a      	bne.n	8007444 <esp_client_connection+0x50>
		client_connection[client_num] = true;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	4a13      	ldr	r2, [pc, #76]	; (8007480 <esp_client_connection+0x8c>)
 8007432:	2101      	movs	r1, #1
 8007434:	54d1      	strb	r1, [r2, r3]
		term_print("%s() - Client %d Connected\r\n", __FUNCTION__, client_num);
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	461a      	mov	r2, r3
 800743a:	4912      	ldr	r1, [pc, #72]	; (8007484 <esp_client_connection+0x90>)
 800743c:	4812      	ldr	r0, [pc, #72]	; (8007488 <esp_client_connection+0x94>)
 800743e:	f7ff fc2f 	bl	8006ca0 <term_print>
 8007442:	e017      	b.n	8007474 <esp_client_connection+0x80>
	} else if (token[3] == 'L') {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3303      	adds	r3, #3
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b4c      	cmp	r3, #76	; 0x4c
 800744c:	d10a      	bne.n	8007464 <esp_client_connection+0x70>
		client_connection[client_num] = false;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	4a0b      	ldr	r2, [pc, #44]	; (8007480 <esp_client_connection+0x8c>)
 8007452:	2100      	movs	r1, #0
 8007454:	54d1      	strb	r1, [r2, r3]
		term_print("%s() - Client %d Disconnected\r\n", __FUNCTION__, client_num);
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	461a      	mov	r2, r3
 800745a:	490a      	ldr	r1, [pc, #40]	; (8007484 <esp_client_connection+0x90>)
 800745c:	480b      	ldr	r0, [pc, #44]	; (800748c <esp_client_connection+0x98>)
 800745e:	f7ff fc1f 	bl	8006ca0 <term_print>
 8007462:	e007      	b.n	8007474 <esp_client_connection+0x80>
	} else {
		term_print("%s() - Error:<<%s>>\r\n", __FUNCTION__, token);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4907      	ldr	r1, [pc, #28]	; (8007484 <esp_client_connection+0x90>)
 8007468:	4809      	ldr	r0, [pc, #36]	; (8007490 <esp_client_connection+0x9c>)
 800746a:	f7ff fc19 	bl	8006ca0 <term_print>
		return -1;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007472:	e000      	b.n	8007476 <esp_client_connection+0x82>
	}

	return 0;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20008f08 	.word	0x20008f08
 8007484:	080190a8 	.word	0x080190a8
 8007488:	08013f18 	.word	0x08013f18
 800748c:	08013f38 	.word	0x08013f38
 8007490:	08013f58 	.word	0x08013f58

08007494 <esp_client_disconnect>:

int esp_client_disconnect(uint8_t connection) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
	// Disconnect client
	sprintf((char*)esp_tx_buf, "AT+CIPCLOSE=%d\r\n", connection);	// start server
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	461a      	mov	r2, r3
 80074a2:	490a      	ldr	r1, [pc, #40]	; (80074cc <esp_client_disconnect+0x38>)
 80074a4:	480a      	ldr	r0, [pc, #40]	; (80074d0 <esp_client_disconnect+0x3c>)
 80074a6:	f008 fd23 	bl	800fef0 <siprintf>
	HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80074aa:	4809      	ldr	r0, [pc, #36]	; (80074d0 <esp_client_disconnect+0x3c>)
 80074ac:	f7f8 ff00 	bl	80002b0 <strlen>
 80074b0:	4603      	mov	r3, r0
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074b8:	4905      	ldr	r1, [pc, #20]	; (80074d0 <esp_client_disconnect+0x3c>)
 80074ba:	4806      	ldr	r0, [pc, #24]	; (80074d4 <esp_client_disconnect+0x40>)
 80074bc:	f006 ff93 	bl	800e3e6 <HAL_UART_Transmit>
	return 0;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	08013f70 	.word	0x08013f70
 80074d0:	20008a78 	.word	0x20008a78
 80074d4:	2000240c 	.word	0x2000240c

080074d8 <process_incoming_data>:
 * @param   data        buffer containing received data
 * @param   len         length of data buffer
 * @param   connection  the origin connection
 * @retval  0 on success
 */
int process_incoming_data(uint8_t *data, unsigned len, uint8_t connection) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	71fb      	strb	r3, [r7, #7]

	term_print("%s() - %d bytes from connection %d\r\n", __FUNCTION__, len, connection);
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	490a      	ldr	r1, [pc, #40]	; (8007514 <process_incoming_data+0x3c>)
 80074ec:	480a      	ldr	r0, [pc, #40]	; (8007518 <process_incoming_data+0x40>)
 80074ee:	f7ff fbd7 	bl	8006ca0 <term_print>
	term_print_hex(data, len, 0);
 80074f2:	2200      	movs	r2, #0
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fbf8 	bl	8006cec <term_print_hex>
	term_print("\r\n");
 80074fc:	4807      	ldr	r0, [pc, #28]	; (800751c <process_incoming_data+0x44>)
 80074fe:	f7ff fbcf 	bl	8006ca0 <term_print>

	// Disconnect client
	esp_client_disconnect(connection);
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff ffc5 	bl	8007494 <esp_client_disconnect>

	return 0;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	080190c0 	.word	0x080190c0
 8007518:	08013f84 	.word	0x08013f84
 800751c:	08013fac 	.word	0x08013fac

08007520 <process_esp_response_ipd>:
 * @brief  Process the ESP response containing data from a connected client
 * @param  response  ESP receive buffer
 * @param  len       length of receive buffer
 * @retval 0 on successful
 */
int process_esp_response_ipd(char* response, int len) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
	uint8_t *data_start;
	char* token;
	char* token_ptr;
	int data_len = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
	uint8_t con;

	token = strtok_r(response, ",", &token_ptr);	// +IPD
 800752e:	f107 030c 	add.w	r3, r7, #12
 8007532:	461a      	mov	r2, r3
 8007534:	4922      	ldr	r1, [pc, #136]	; (80075c0 <process_esp_response_ipd+0xa0>)
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f008 ff55 	bl	80103e6 <strtok_r>
 800753c:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <process_esp_response_ipd+0x2a>
 8007544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007548:	e036      	b.n	80075b8 <process_esp_response_ipd+0x98>
	token = strtok_r(NULL,",", &token_ptr);	// connection number
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	461a      	mov	r2, r3
 8007550:	491b      	ldr	r1, [pc, #108]	; (80075c0 <process_esp_response_ipd+0xa0>)
 8007552:	2000      	movs	r0, #0
 8007554:	f008 ff47 	bl	80103e6 <strtok_r>
 8007558:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <process_esp_response_ipd+0x46>
 8007560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007564:	e028      	b.n	80075b8 <process_esp_response_ipd+0x98>
	else { con = token[0] - '0'; }
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	3b30      	subs	r3, #48	; 0x30
 800756c:	75fb      	strb	r3, [r7, #23]
	token = strtok_r(NULL, ":", &token_ptr);	// data length
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	461a      	mov	r2, r3
 8007574:	4913      	ldr	r1, [pc, #76]	; (80075c4 <process_esp_response_ipd+0xa4>)
 8007576:	2000      	movs	r0, #0
 8007578:	f008 ff35 	bl	80103e6 <strtok_r>
 800757c:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <process_esp_response_ipd+0x6a>
 8007584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007588:	e016      	b.n	80075b8 <process_esp_response_ipd+0x98>
	data_len = atoi(token);
 800758a:	69b8      	ldr	r0, [r7, #24]
 800758c:	f007 ff56 	bl	800f43c <atoi>
 8007590:	61f8      	str	r0, [r7, #28]
	if ((data_len <= 0) || (data_len >= len)) { return -1; }	// sanity check on data length
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd03      	ble.n	80075a0 <process_esp_response_ipd+0x80>
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	db02      	blt.n	80075a6 <process_esp_response_ipd+0x86>
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a4:	e008      	b.n	80075b8 <process_esp_response_ipd+0x98>
	//We have valid data
	data_start = (uint8_t*) token_ptr;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	613b      	str	r3, [r7, #16]
	return (process_incoming_data(data_start, data_len, con));
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	7dfa      	ldrb	r2, [r7, #23]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6938      	ldr	r0, [r7, #16]
 80075b2:	f7ff ff91 	bl	80074d8 <process_incoming_data>
 80075b6:	4603      	mov	r3, r0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	08013fb0 	.word	0x08013fb0
 80075c4:	08013fb4 	.word	0x08013fb4

080075c8 <process_esp_response_wifi>:
 * @brief   Process ESP responses starting with "WIFI ....."
 * @para    token      the token (word) which comes after "WIFI" in the ESP response
 * @para    token_num  the number if the token in the ESP response (WIFI=1)
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_wifi(char* token, uint8_t token_num) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
#ifdef WIFI_DEBUG
	term_print( "%s() - token%d = <%s>\r\n", __FUNCTION__, token_num, token );
#endif
	uint8_t con_status = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
	int retval = -1;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075dc:	60bb      	str	r3, [r7, #8]
	if (strncmp(token, "CONNECTED", 9)==0) {	// "WIFI CONNECTED"
 80075de:	2209      	movs	r2, #9
 80075e0:	4922      	ldr	r1, [pc, #136]	; (800766c <process_esp_response_wifi+0xa4>)
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f008 feb2 	bl	801034c <strncmp>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <process_esp_response_wifi+0x32>
		//term_print( "%s() - CON\r\n", __FUNCTION__);
		retval = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
		esp_wifi_connected = true;
 80075f2:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <process_esp_response_wifi+0xa8>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	701a      	strb	r2, [r3, #0]
 80075f8:	e01f      	b.n	800763a <process_esp_response_wifi+0x72>
	} else if(strncmp(token, "GOT", 3)==0) {		// "WIFI GOT IP"
 80075fa:	2203      	movs	r2, #3
 80075fc:	491d      	ldr	r1, [pc, #116]	; (8007674 <process_esp_response_wifi+0xac>)
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f008 fea4 	bl	801034c <strncmp>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <process_esp_response_wifi+0x4e>
		//term_print( "%s() - GOT\r\n", __FUNCTION__);
		retval = 1;		// ignore next token "IP"
 800760a:	2301      	movs	r3, #1
 800760c:	60bb      	str	r3, [r7, #8]
		esp_wifi_got_ip = true;
 800760e:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <process_esp_response_wifi+0xb0>)
 8007610:	2201      	movs	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e011      	b.n	800763a <process_esp_response_wifi+0x72>
	} else if(strncmp(token, "DISCONNECTED", 12)==0) { // "WIFI DISCONNECTED"
 8007616:	220c      	movs	r2, #12
 8007618:	4918      	ldr	r1, [pc, #96]	; (800767c <process_esp_response_wifi+0xb4>)
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f008 fe96 	bl	801034c <strncmp>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <process_esp_response_wifi+0x72>
		retval = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	60bb      	str	r3, [r7, #8]
		esp_wifi_connected = false;
 800762a:	4b11      	ldr	r3, [pc, #68]	; (8007670 <process_esp_response_wifi+0xa8>)
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
		esp_wifi_got_ip = false;
 8007630:	4b11      	ldr	r3, [pc, #68]	; (8007678 <process_esp_response_wifi+0xb0>)
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
		con_status = 4;
 8007636:	2304      	movs	r3, #4
 8007638:	73fb      	strb	r3, [r7, #15]
	}
	if (esp_wifi_connected == true) {
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <process_esp_response_wifi+0xa8>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <process_esp_response_wifi+0x8c>
		if (esp_wifi_got_ip == true) {
 8007642:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <process_esp_response_wifi+0xb0>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <process_esp_response_wifi+0x88>
			con_status = 2;
 800764a:	2302      	movs	r3, #2
 800764c:	73fb      	strb	r3, [r7, #15]
 800764e:	e001      	b.n	8007654 <process_esp_response_wifi+0x8c>
		} else {
			con_status = 3;
 8007650:	2303      	movs	r3, #3
 8007652:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (con_status != 0) {
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <process_esp_response_wifi+0x9a>
		set_connection_status(con_status);
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff feab 	bl	80073b8 <set_connection_status>
	}
	//term_print( "%s() - CONNECTED=%d GOT IP=%d (retval=%d)\r\n", __FUNCTION__, esp_wifi_connected, esp_wifi_got_ip, retval );
	return retval;
 8007662:	68bb      	ldr	r3, [r7, #8]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	08013fb8 	.word	0x08013fb8
 8007670:	20008f01 	.word	0x20008f01
 8007674:	08013fc4 	.word	0x08013fc4
 8007678:	20008f02 	.word	0x20008f02
 800767c:	08013fc8 	.word	0x08013fc8

08007680 <process_esp_response_status>:
 * @brief   Process ESP status response "STATUS:2"
 * @para    token      the token (word) which starts with the word "STATUS"
 * @para    token_num  the number if the token in the ESP response, normally 1 for STATUS
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_status(char* token, uint8_t token_num) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
	int retval = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
	uint8_t con_status = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	72fb      	strb	r3, [r7, #11]
	if (strlen(token) != 8) { return -1; }
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7f8 fe0b 	bl	80002b0 <strlen>
 800769a:	4603      	mov	r3, r0
 800769c:	2b08      	cmp	r3, #8
 800769e:	d002      	beq.n	80076a6 <process_esp_response_status+0x26>
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076a4:	e036      	b.n	8007714 <process_esp_response_status+0x94>
	if (token[6] != ':') { return -1; }
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3306      	adds	r3, #6
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b3a      	cmp	r3, #58	; 0x3a
 80076ae:	d002      	beq.n	80076b6 <process_esp_response_status+0x36>
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076b4:	e02e      	b.n	8007714 <process_esp_response_status+0x94>
	switch(token[7]) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3307      	adds	r3, #7
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b34      	cmp	r3, #52	; 0x34
 80076be:	d015      	beq.n	80076ec <process_esp_response_status+0x6c>
 80076c0:	2b34      	cmp	r3, #52	; 0x34
 80076c2:	dc1c      	bgt.n	80076fe <process_esp_response_status+0x7e>
 80076c4:	2b32      	cmp	r3, #50	; 0x32
 80076c6:	d002      	beq.n	80076ce <process_esp_response_status+0x4e>
 80076c8:	2b33      	cmp	r3, #51	; 0x33
 80076ca:	d009      	beq.n	80076e0 <process_esp_response_status+0x60>
 80076cc:	e017      	b.n	80076fe <process_esp_response_status+0x7e>
	case '2':		// GOT IP
		esp_wifi_got_ip = true;
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <process_esp_response_status+0x9c>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = true;
 80076d4:	4b12      	ldr	r3, [pc, #72]	; (8007720 <process_esp_response_status+0xa0>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	701a      	strb	r2, [r3, #0]
		con_status = 2;
 80076da:	2302      	movs	r3, #2
 80076dc:	72fb      	strb	r3, [r7, #11]
		break;
 80076de:	e011      	b.n	8007704 <process_esp_response_status+0x84>
	case '3':		// CONNECTED
		esp_wifi_connected = true;
 80076e0:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <process_esp_response_status+0xa0>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	701a      	strb	r2, [r3, #0]
		con_status = 3;
 80076e6:	2303      	movs	r3, #3
 80076e8:	72fb      	strb	r3, [r7, #11]
		break;
 80076ea:	e00b      	b.n	8007704 <process_esp_response_status+0x84>
	case '4':		// DISCONNECTED
		esp_wifi_got_ip = false;
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <process_esp_response_status+0x9c>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = false;
 80076f2:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <process_esp_response_status+0xa0>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
		con_status = 4;
 80076f8:	2304      	movs	r3, #4
 80076fa:	72fb      	strb	r3, [r7, #11]
		break;
 80076fc:	e002      	b.n	8007704 <process_esp_response_status+0x84>
	default:		// unknown status
		retval = -1;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007702:	60fb      	str	r3, [r7, #12]
	}
	// advise connection status
	if (retval == 0) {
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d103      	bne.n	8007712 <process_esp_response_status+0x92>
		set_connection_status(con_status);
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff fe53 	bl	80073b8 <set_connection_status>
	}
	return retval;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20008f02 	.word	0x20008f02
 8007720:	20008f01 	.word	0x20008f01

08007724 <process_esp_repsonse_plus>:
/*
 * @brief   Process line starting with '+'
 * @para    line     the response line
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_repsonse_plus(char* line) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 800772c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007730:	617b      	str	r3, [r7, #20]
	int len;
#ifdef WIFI_DEBUG
	term_print( "%s() - <%s>\r\n", __FUNCTION__, line);
#endif

	token = strtok_r(line, ",", &token_ptr);
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	461a      	mov	r2, r3
 8007738:	4927      	ldr	r1, [pc, #156]	; (80077d8 <process_esp_repsonse_plus+0xb4>)
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f008 fe53 	bl	80103e6 <strtok_r>
 8007740:	6138      	str	r0, [r7, #16]
	if (strncmp(token, "+CIFSR", 6)==0) {
 8007742:	2206      	movs	r2, #6
 8007744:	4925      	ldr	r1, [pc, #148]	; (80077dc <process_esp_repsonse_plus+0xb8>)
 8007746:	6938      	ldr	r0, [r7, #16]
 8007748:	f008 fe00 	bl	801034c <strncmp>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d13c      	bne.n	80077cc <process_esp_repsonse_plus+0xa8>
		if (line[10] == 'I') { 			// +CIFSR:STAIP,"192.168.0.xxx"
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	330a      	adds	r3, #10
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b49      	cmp	r3, #73	; 0x49
 800775a:	d119      	bne.n	8007790 <process_esp_repsonse_plus+0x6c>
			len = strlen(token_ptr);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4618      	mov	r0, r3
 8007760:	f7f8 fda6 	bl	80002b0 <strlen>
 8007764:	4603      	mov	r3, r0
 8007766:	60fb      	str	r3, [r7, #12]
			token_ptr[len-1] = 0;	// remove " at end of string
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3b01      	subs	r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
			token_ptr[0] = 0;		// remove " at start of string
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
			token_ptr++;			// advance ptr to start of IP string
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3301      	adds	r3, #1
 800777e:	60bb      	str	r3, [r7, #8]
			strcpy(ip_addr_str, token_ptr);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4619      	mov	r1, r3
 8007784:	4816      	ldr	r0, [pc, #88]	; (80077e0 <process_esp_repsonse_plus+0xbc>)
 8007786:	f008 fece 	bl	8010526 <strcpy>
#ifdef WIFI_DEBUG
			term_print( "%s() - IP=<%s>\r\n", __FUNCTION__, ip_addr_str);
#endif
			retval = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e01d      	b.n	80077cc <process_esp_repsonse_plus+0xa8>
		} else if (line[10] == 'M') {	// +CIFSR:STAMAC,"bc:dd:c2:a1:25:79"
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	330a      	adds	r3, #10
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b4d      	cmp	r3, #77	; 0x4d
 8007798:	d118      	bne.n	80077cc <process_esp_repsonse_plus+0xa8>
			len = strlen(token_ptr);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4618      	mov	r0, r3
 800779e:	f7f8 fd87 	bl	80002b0 <strlen>
 80077a2:	4603      	mov	r3, r0
 80077a4:	60fb      	str	r3, [r7, #12]
			token_ptr[len-1] = 0;	// remove " at end of string
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4413      	add	r3, r2
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
			token_ptr[0] = 0;		// remove " at start of string
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
			token_ptr++;			// advance ptr to start of MAC string
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]
			strcpy(mac_addr_str, token_ptr);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4619      	mov	r1, r3
 80077c2:	4808      	ldr	r0, [pc, #32]	; (80077e4 <process_esp_repsonse_plus+0xc0>)
 80077c4:	f008 feaf 	bl	8010526 <strcpy>
#ifdef WIFI_DEBUG
			term_print( "%s() - MAC=<%s>\r\n", __FUNCTION__, mac_addr_str);
#endif
			retval = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
		}
	}
	return retval;
 80077cc:	697b      	ldr	r3, [r7, #20]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	08013fb0 	.word	0x08013fb0
 80077dc:	08013fd8 	.word	0x08013fd8
 80077e0:	20000044 	.word	0x20000044
 80077e4:	20000054 	.word	0x20000054

080077e8 <process_esp_response_line>:
 * @brief   Process ESP response line"
 * @para    line     the response line
 * @para    line_num the line number
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_response_line(char* line, uint8_t line_num) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
	int retval = -1;
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077f8:	61fb      	str	r3, [r7, #28]
	char* token;
	char* token_ptr;
	uint8_t token_count = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
	const char s[1] = {' '};	// token separator
 80077fe:	2320      	movs	r3, #32
 8007800:	723b      	strb	r3, [r7, #8]
	int ignore_tokens = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]

#ifdef WIFI_DEBUG
	term_print( "%s() - %d:<%s>\r\n", __FUNCTION__, line_num, line);
#endif
	if (line[0] == '+') {	// IP related info
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b2b      	cmp	r3, #43	; 0x2b
 800780c:	d104      	bne.n	8007818 <process_esp_response_line+0x30>
		return process_esp_repsonse_plus(line);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff88 	bl	8007724 <process_esp_repsonse_plus>
 8007814:	4603      	mov	r3, r0
 8007816:	e094      	b.n	8007942 <process_esp_response_line+0x15a>
	}

	// evaluate all tokens
	token = strtok_r(line, s, &token_ptr);
 8007818:	f107 020c 	add.w	r2, r7, #12
 800781c:	f107 0308 	add.w	r3, r7, #8
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f008 fddf 	bl	80103e6 <strtok_r>
 8007828:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 800782a:	e085      	b.n	8007938 <process_esp_response_line+0x150>
		token_count++;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	3301      	adds	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
		//term_print( "%s() - token %d = <%s>\r\n", __FUNCTION__, token_count, token);
		if (ignore_tokens > 0) {
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd03      	ble.n	8007840 <process_esp_response_line+0x58>
			ignore_tokens--;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	3b01      	subs	r3, #1
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	e072      	b.n	8007926 <process_esp_response_line+0x13e>
		} else {
			if (strncmp(token,"WIFI",4)==0) {
 8007840:	2204      	movs	r2, #4
 8007842:	4942      	ldr	r1, [pc, #264]	; (800794c <process_esp_response_line+0x164>)
 8007844:	69b8      	ldr	r0, [r7, #24]
 8007846:	f008 fd81 	bl	801034c <strncmp>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11a      	bne.n	8007886 <process_esp_response_line+0x9e>
				//term_print( "%s() - found WIFI\r\n", __FUNCTION__);
				token = strtok_r(NULL, s, &token_ptr);
 8007850:	f107 020c 	add.w	r2, r7, #12
 8007854:	f107 0308 	add.w	r3, r7, #8
 8007858:	4619      	mov	r1, r3
 800785a:	2000      	movs	r0, #0
 800785c:	f008 fdc3 	bl	80103e6 <strtok_r>
 8007860:	61b8      	str	r0, [r7, #24]
				if (token != NULL) {
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d05e      	beq.n	8007926 <process_esp_response_line+0x13e>
					token_count++;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	3301      	adds	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
					ignore_tokens = process_esp_response_wifi(token, token_count);
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	4619      	mov	r1, r3
 8007872:	69b8      	ldr	r0, [r7, #24]
 8007874:	f7ff fea8 	bl	80075c8 <process_esp_response_wifi>
 8007878:	6138      	str	r0, [r7, #16]
					if (ignore_tokens >= 0) { retval = 0; }
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	db52      	blt.n	8007926 <process_esp_response_line+0x13e>
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e04f      	b.n	8007926 <process_esp_response_line+0x13e>
				}
			} else if (strncmp(token,"STATUS",6)==0){
 8007886:	2206      	movs	r2, #6
 8007888:	4931      	ldr	r1, [pc, #196]	; (8007950 <process_esp_response_line+0x168>)
 800788a:	69b8      	ldr	r0, [r7, #24]
 800788c:	f008 fd5e 	bl	801034c <strncmp>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10b      	bne.n	80078ae <process_esp_response_line+0xc6>
				ignore_tokens = process_esp_response_status(token, token_count);
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	4619      	mov	r1, r3
 800789a:	69b8      	ldr	r0, [r7, #24]
 800789c:	f7ff fef0 	bl	8007680 <process_esp_response_status>
 80078a0:	6138      	str	r0, [r7, #16]
				if (ignore_tokens >= 0) { retval = 1; }		// OK to follow
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	db3e      	blt.n	8007926 <process_esp_response_line+0x13e>
 80078a8:	2301      	movs	r3, #1
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	e03b      	b.n	8007926 <process_esp_response_line+0x13e>
			} else if (strncmp(token,"OK",2)==0) {
 80078ae:	2202      	movs	r2, #2
 80078b0:	4928      	ldr	r1, [pc, #160]	; (8007954 <process_esp_response_line+0x16c>)
 80078b2:	69b8      	ldr	r0, [r7, #24]
 80078b4:	f008 fd4a 	bl	801034c <strncmp>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d115      	bne.n	80078ea <process_esp_response_line+0x102>
				//term_print( "%s() - found OK\r\n", __FUNCTION__);
				if (esp_cmd_step) {
 80078be:	4b26      	ldr	r3, [pc, #152]	; (8007958 <process_esp_response_line+0x170>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <process_esp_response_line+0xf6>
					if (--esp_cmd_step) {
 80078c6:	4b24      	ldr	r3, [pc, #144]	; (8007958 <process_esp_response_line+0x170>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	4b22      	ldr	r3, [pc, #136]	; (8007958 <process_esp_response_line+0x170>)
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <process_esp_response_line+0x170>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <process_esp_response_line+0xf6>
						cmd_sequence();
 80078da:	f7ff fcbd 	bl	8007258 <cmd_sequence>
					}
				}
				if (token_count == 1) {
 80078de:	7dfb      	ldrb	r3, [r7, #23]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d120      	bne.n	8007926 <process_esp_response_line+0x13e>
					retval = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	e01d      	b.n	8007926 <process_esp_response_line+0x13e>
				}
			} else if (strncmp(token,"ATE0",4)==0) {		// echo of ATE0 command
 80078ea:	2204      	movs	r2, #4
 80078ec:	491b      	ldr	r1, [pc, #108]	; (800795c <process_esp_response_line+0x174>)
 80078ee:	69b8      	ldr	r0, [r7, #24]
 80078f0:	f008 fd2c 	bl	801034c <strncmp>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <process_esp_response_line+0x118>
				retval = 0;		// init_squence() will be triggered by OK
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	e012      	b.n	8007926 <process_esp_response_line+0x13e>
				//if (--esp_init_step) {
				//	init_sequence();
				//}
			} else if ((token[0]>='0') && (token[0]<='9')) {	// 0,CONNECT
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b2f      	cmp	r3, #47	; 0x2f
 8007906:	d908      	bls.n	800791a <process_esp_response_line+0x132>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b39      	cmp	r3, #57	; 0x39
 800790e:	d804      	bhi.n	800791a <process_esp_response_line+0x132>
				retval = esp_client_connection(token);
 8007910:	69b8      	ldr	r0, [r7, #24]
 8007912:	f7ff fd6f 	bl	80073f4 <esp_client_connection>
 8007916:	61f8      	str	r0, [r7, #28]
 8007918:	e005      	b.n	8007926 <process_esp_response_line+0x13e>
			} else {
				term_print( "%s() - unknown token%d=%s\r\n", __FUNCTION__, token_count, token);
 800791a:	7dfa      	ldrb	r2, [r7, #23]
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	4910      	ldr	r1, [pc, #64]	; (8007960 <process_esp_response_line+0x178>)
 8007920:	4810      	ldr	r0, [pc, #64]	; (8007964 <process_esp_response_line+0x17c>)
 8007922:	f7ff f9bd 	bl	8006ca0 <term_print>
			}
		}
		token = strtok_r(NULL, s, &token_ptr);
 8007926:	f107 020c 	add.w	r2, r7, #12
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4619      	mov	r1, r3
 8007930:	2000      	movs	r0, #0
 8007932:	f008 fd58 	bl	80103e6 <strtok_r>
 8007936:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f47f af76 	bne.w	800782c <process_esp_response_line+0x44>
	}
	//term_print( "%s() - retval=%d\r\n", __FUNCTION__, retval);
	return retval;
 8007940:	69fb      	ldr	r3, [r7, #28]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	08013fe0 	.word	0x08013fe0
 8007950:	08013fe8 	.word	0x08013fe8
 8007954:	08013ff0 	.word	0x08013ff0
 8007958:	20008f04 	.word	0x20008f04
 800795c:	08013ff4 	.word	0x08013ff4
 8007960:	080190d8 	.word	0x080190d8
 8007964:	08013ffc 	.word	0x08013ffc

08007968 <evaluate_esp_response>:

void evaluate_esp_response(char* response, int len) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	char *line;
	char *resp;
	char *token_ptr;
	uint8_t line_count = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	76fb      	strb	r3, [r7, #27]
	const char s[2] = {0x0D, 0x0A};		// line separator
 8007976:	f640 230d 	movw	r3, #2573	; 0xa0d
 800797a:	813b      	strh	r3, [r7, #8]
	int ignore_lines = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]

	// copy response to our own buffer
	resp = malloc(len+1);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4618      	mov	r0, r3
 8007986:	f008 f833 	bl	800f9f0 <malloc>
 800798a:	4603      	mov	r3, r0
 800798c:	613b      	str	r3, [r7, #16]
	strncpy(resp, response, len);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	6938      	ldr	r0, [r7, #16]
 8007996:	f008 fceb 	bl	8010370 <strncpy>
	resp[len] = 0;		// EOS
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
	term_print("%s() - %d bytes: %s\r\n", __FUNCTION__, strlen(resp), resp);
	term_print_hex((uint8_t*)resp, len, 0);
	term_print("\r\n");
#endif
	// did we receive data from a connected client? (CR LF +IPD,0,5:xxxxx)
	if ((resp[2]=='+')&&(resp[3]=='I')&&(resp[4]=='P')) {
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	3302      	adds	r3, #2
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b2b      	cmp	r3, #43	; 0x2b
 80079ac:	d10e      	bne.n	80079cc <evaluate_esp_response+0x64>
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	3303      	adds	r3, #3
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b49      	cmp	r3, #73	; 0x49
 80079b6:	d109      	bne.n	80079cc <evaluate_esp_response+0x64>
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3304      	adds	r3, #4
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b50      	cmp	r3, #80	; 0x50
 80079c0:	d104      	bne.n	80079cc <evaluate_esp_response+0x64>
		process_esp_response_ipd(resp, len);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6938      	ldr	r0, [r7, #16]
 80079c6:	f7ff fdab 	bl	8007520 <process_esp_response_ipd>
 80079ca:	e035      	b.n	8007a38 <evaluate_esp_response+0xd0>
		return;
	}

	// get first line from ESP response buffer
	line = strtok_r(resp, s, &token_ptr);
 80079cc:	f107 020c 	add.w	r2, r7, #12
 80079d0:	f107 0308 	add.w	r3, r7, #8
 80079d4:	4619      	mov	r1, r3
 80079d6:	6938      	ldr	r0, [r7, #16]
 80079d8:	f008 fd05 	bl	80103e6 <strtok_r>
 80079dc:	61f8      	str	r0, [r7, #28]

	// iterate through lines
	while( line != NULL ) {
 80079de:	e025      	b.n	8007a2c <evaluate_esp_response+0xc4>
		line_count++;
 80079e0:	7efb      	ldrb	r3, [r7, #27]
 80079e2:	3301      	adds	r3, #1
 80079e4:	76fb      	strb	r3, [r7, #27]
		//term_print( "%s() - %d:<%s>\r\n", __FUNCTION__, line_count, line);
		if (ignore_lines > 0) {
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dd03      	ble.n	80079f4 <evaluate_esp_response+0x8c>
			ignore_lines--;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e012      	b.n	8007a1a <evaluate_esp_response+0xb2>
		} else {
			strcpy((char*)line_buf, line);
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	4812      	ldr	r0, [pc, #72]	; (8007a40 <evaluate_esp_response+0xd8>)
 80079f8:	f008 fd95 	bl	8010526 <strcpy>
			ignore_lines = process_esp_response_line(line_buf, line_count);
 80079fc:	7efb      	ldrb	r3, [r7, #27]
 80079fe:	4619      	mov	r1, r3
 8007a00:	480f      	ldr	r0, [pc, #60]	; (8007a40 <evaluate_esp_response+0xd8>)
 8007a02:	f7ff fef1 	bl	80077e8 <process_esp_response_line>
 8007a06:	6178      	str	r0, [r7, #20]
			if (ignore_lines < 0) {
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	da05      	bge.n	8007a1a <evaluate_esp_response+0xb2>
				term_print( "%s() - Error[%d] <<%s>>\r\n", __FUNCTION__, line_count, line_buf);
 8007a0e:	7efa      	ldrb	r2, [r7, #27]
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <evaluate_esp_response+0xd8>)
 8007a12:	490c      	ldr	r1, [pc, #48]	; (8007a44 <evaluate_esp_response+0xdc>)
 8007a14:	480c      	ldr	r0, [pc, #48]	; (8007a48 <evaluate_esp_response+0xe0>)
 8007a16:	f7ff f943 	bl	8006ca0 <term_print>
			} else {
				//term_print( "%s() - Line%d ignore_lines=%d\r\n", __FUNCTION__, line_count, ignore_lines);
			}
		}
		line = strtok_r(NULL, s, &token_ptr);	// get next line
 8007a1a:	f107 020c 	add.w	r2, r7, #12
 8007a1e:	f107 0308 	add.w	r3, r7, #8
 8007a22:	4619      	mov	r1, r3
 8007a24:	2000      	movs	r0, #0
 8007a26:	f008 fcde 	bl	80103e6 <strtok_r>
 8007a2a:	61f8      	str	r0, [r7, #28]
	while( line != NULL ) {
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1d6      	bne.n	80079e0 <evaluate_esp_response+0x78>
	}
	//term_print( "%s() - %d lines found\r\n", __FUNCTION__, line_count);
	free(resp);
 8007a32:	6938      	ldr	r0, [r7, #16]
 8007a34:	f007 ffe4 	bl	800fa00 <free>
}
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20008b00 	.word	0x20008b00
 8007a44:	080190f4 	.word	0x080190f4
 8007a48:	08014018 	.word	0x08014018

08007a4c <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8007a50:	2180      	movs	r1, #128	; 0x80
 8007a52:	480f      	ldr	r0, [pc, #60]	; (8007a90 <Displ_Select+0x44>)
 8007a54:	f003 fb94 	bl	800b180 <HAL_GPIO_ReadPin>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d015      	beq.n	8007a8a <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a64:	480b      	ldr	r0, [pc, #44]	; (8007a94 <Displ_Select+0x48>)
 8007a66:	f003 fba3 	bl	800b1b0 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <Displ_Select+0x4c>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	490a      	ldr	r1, [pc, #40]	; (8007a98 <Displ_Select+0x4c>)
 8007a70:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8007a74:	4013      	ands	r3, r2
 8007a76:	600b      	str	r3, [r1, #0]
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <Displ_Select+0x4c>)
 8007a7a:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <Displ_Select+0x4c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8007a80:	2200      	movs	r2, #0
 8007a82:	2180      	movs	r1, #128	; 0x80
 8007a84:	4802      	ldr	r0, [pc, #8]	; (8007a90 <Displ_Select+0x44>)
 8007a86:	f003 fb93 	bl	800b1b0 <HAL_GPIO_WritePin>
		}
	}
}
 8007a8a:	bf00      	nop
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40020800 	.word	0x40020800
 8007a94:	40020000 	.word	0x40020000
 8007a98:	40003800 	.word	0x40003800

08007a9c <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6039      	str	r1, [r7, #0]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	71fb      	strb	r3, [r7, #7]
 8007aac:	460b      	mov	r3, r1
 8007aae:	80bb      	strh	r3, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8007ab4:	bf00      	nop
 8007ab6:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <Displ_Transmit+0xa4>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0fa      	beq.n	8007ab6 <Displ_Transmit+0x1a>

	Displ_Select();
 8007ac0:	f7ff ffc4 	bl	8007a4c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	481e      	ldr	r0, [pc, #120]	; (8007b44 <Displ_Transmit+0xa8>)
 8007acc:	f003 fb70 	bl	800b1b0 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8007ad0:	79bb      	ldrb	r3, [r7, #6]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d016      	beq.n	8007b04 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8007ad6:	88bb      	ldrh	r3, [r7, #4]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	4413      	add	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e00b      	b.n	8007afc <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	ba5b      	rev16	r3, r3
 8007aee:	60bb      	str	r3, [r7, #8]
  return result;
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	3304      	adds	r3, #4
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d3ef      	bcc.n	8007ae4 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8007b04:	88bb      	ldrh	r3, [r7, #4]
 8007b06:	2b13      	cmp	r3, #19
 8007b08:	d80d      	bhi.n	8007b26 <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8007b0a:	4b0d      	ldr	r3, [pc, #52]	; (8007b40 <Displ_Transmit+0xa4>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8007b10:	88ba      	ldrh	r2, [r7, #4]
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <Displ_Transmit+0xac>)
 8007b1a:	f005 fb44 	bl	800d1a6 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <Displ_Transmit+0xa4>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8007b24:	e008      	b.n	8007b38 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <Displ_Transmit+0xa4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8007b2c:	88bb      	ldrh	r3, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	4805      	ldr	r0, [pc, #20]	; (8007b48 <Displ_Transmit+0xac>)
 8007b34:	f005 fc74 	bl	800d420 <HAL_SPI_Transmit_DMA>
	}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20000066 	.word	0x20000066
 8007b44:	40020000 	.word	0x40020000
 8007b48:	20002280 	.word	0x20002280

08007b4c <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8007b56:	1df9      	adds	r1, r7, #7
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f7ff ff9d 	bl	8007a9c <Displ_Transmit>
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	4613      	mov	r3, r2
 8007b76:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	68f9      	ldr	r1, [r7, #12]
 8007b86:	2001      	movs	r0, #1
 8007b88:	f7ff ff88 	bl	8007a9c <Displ_Transmit>
 8007b8c:	e000      	b.n	8007b90 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8007b8e:	bf00      	nop
}
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
	Displ_Select();
 8007b9c:	f7ff ff56 	bl	8007a4c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2140      	movs	r1, #64	; 0x40
 8007ba4:	4819      	ldr	r0, [pc, #100]	; (8007c0c <ILI9XXX_Init+0x74>)
 8007ba6:	f003 fb03 	bl	800b1b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007baa:	2001      	movs	r0, #1
 8007bac:	f002 f818 	bl	8009be0 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	2140      	movs	r1, #64	; 0x40
 8007bb4:	4815      	ldr	r0, [pc, #84]	; (8007c0c <ILI9XXX_Init+0x74>)
 8007bb6:	f003 fafb 	bl	800b1b0 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8007bba:	20a5      	movs	r0, #165	; 0xa5
 8007bbc:	f002 f810 	bl	8009be0 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8007bc0:	203a      	movs	r0, #58	; 0x3a
 8007bc2:	f7ff ffc3 	bl	8007b4c <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2101      	movs	r1, #1
 8007bca:	4811      	ldr	r0, [pc, #68]	; (8007c10 <ILI9XXX_Init+0x78>)
 8007bcc:	f7ff ffcd 	bl	8007b6a <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8007bd0:	20b0      	movs	r0, #176	; 0xb0
 8007bd2:	f7ff ffbb 	bl	8007b4c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2101      	movs	r1, #1
 8007bda:	480e      	ldr	r0, [pc, #56]	; (8007c14 <ILI9XXX_Init+0x7c>)
 8007bdc:	f7ff ffc5 	bl	8007b6a <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8007be0:	20b0      	movs	r0, #176	; 0xb0
 8007be2:	f7ff ffb3 	bl	8007b4c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8007be6:	2200      	movs	r2, #0
 8007be8:	2101      	movs	r1, #1
 8007bea:	480a      	ldr	r0, [pc, #40]	; (8007c14 <ILI9XXX_Init+0x7c>)
 8007bec:	f7ff ffbd 	bl	8007b6a <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8007bf0:	2011      	movs	r0, #17
 8007bf2:	f7ff ffab 	bl	8007b4c <Displ_WriteCommand>
	HAL_Delay(120);
 8007bf6:	2078      	movs	r0, #120	; 0x78
 8007bf8:	f001 fff2 	bl	8009be0 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8007bfc:	2029      	movs	r0, #41	; 0x29
 8007bfe:	f7ff ffa5 	bl	8007b4c <Displ_WriteCommand>
	HAL_Delay(5);
 8007c02:	2005      	movs	r0, #5
 8007c04:	f001 ffec 	bl	8009be0 <HAL_Delay>

}
 8007c08:	bf00      	nop
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40020400 	.word	0x40020400
 8007c10:	08014034 	.word	0x08014034
 8007c14:	08014038 	.word	0x08014038

08007c18 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8007c18:	b590      	push	{r4, r7, lr}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	4623      	mov	r3, r4
 8007c28:	80fb      	strh	r3, [r7, #6]
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	80bb      	strh	r3, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	807b      	strh	r3, [r7, #2]
 8007c32:	4613      	mov	r3, r2
 8007c34:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8007c36:	887b      	ldrh	r3, [r7, #2]
 8007c38:	061a      	lsls	r2, r3, #24
 8007c3a:	887b      	ldrh	r3, [r7, #2]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c42:	431a      	orrs	r2, r3
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	88fa      	ldrh	r2, [r7, #6]
 8007c4e:	0a12      	lsrs	r2, r2, #8
 8007c50:	b292      	uxth	r2, r2
 8007c52:	431a      	orrs	r2, r3
 8007c54:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <Displ_SetAddressWindow+0x90>)
 8007c56:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8007c58:	202a      	movs	r0, #42	; 0x2a
 8007c5a:	f7ff ff77 	bl	8007b4c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2104      	movs	r1, #4
 8007c62:	4811      	ldr	r0, [pc, #68]	; (8007ca8 <Displ_SetAddressWindow+0x90>)
 8007c64:	f7ff ff81 	bl	8007b6a <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8007c68:	883b      	ldrh	r3, [r7, #0]
 8007c6a:	061a      	lsls	r2, r3, #24
 8007c6c:	883b      	ldrh	r3, [r7, #0]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c74:	431a      	orrs	r2, r3
 8007c76:	88bb      	ldrh	r3, [r7, #4]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	88ba      	ldrh	r2, [r7, #4]
 8007c80:	0a12      	lsrs	r2, r2, #8
 8007c82:	b292      	uxth	r2, r2
 8007c84:	431a      	orrs	r2, r3
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <Displ_SetAddressWindow+0x90>)
 8007c88:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8007c8a:	202b      	movs	r0, #43	; 0x2b
 8007c8c:	f7ff ff5e 	bl	8007b4c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8007c90:	2200      	movs	r2, #0
 8007c92:	2104      	movs	r1, #4
 8007c94:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <Displ_SetAddressWindow+0x90>)
 8007c96:	f7ff ff68 	bl	8007b6a <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8007c9a:	202c      	movs	r0, #44	; 0x2c
 8007c9c:	f7ff ff56 	bl	8007b4c <Displ_WriteCommand>
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}
 8007ca8:	20009f18 	.word	0x20009f18

08007cac <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <Displ_Init+0x34>)
 8007cbc:	f003 fa78 	bl	800b1b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cc6:	4807      	ldr	r0, [pc, #28]	; (8007ce4 <Displ_Init+0x38>)
 8007cc8:	f003 fa72 	bl	800b1b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8007ccc:	f7ff ff64 	bl	8007b98 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f808 	bl	8007ce8 <Displ_Orientation>
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	40020800 	.word	0x40020800
 8007ce4:	40020000 	.word	0x40020000

08007ce8 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d837      	bhi.n	8007d68 <Displ_Orientation+0x80>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <Displ_Orientation+0x18>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d11 	.word	0x08007d11
 8007d04:	08007d27 	.word	0x08007d27
 8007d08:	08007d3d 	.word	0x08007d3d
 8007d0c:	08007d53 	.word	0x08007d53
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8007d10:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <Displ_Orientation+0xa0>)
 8007d12:	2288      	movs	r2, #136	; 0x88
 8007d14:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8007d16:	4b1d      	ldr	r3, [pc, #116]	; (8007d8c <Displ_Orientation+0xa4>)
 8007d18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d1c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8007d1e:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <Displ_Orientation+0xa8>)
 8007d20:	22f0      	movs	r2, #240	; 0xf0
 8007d22:	801a      	strh	r2, [r3, #0]
			break;
 8007d24:	e020      	b.n	8007d68 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8007d26:	4b18      	ldr	r3, [pc, #96]	; (8007d88 <Displ_Orientation+0xa0>)
 8007d28:	22e8      	movs	r2, #232	; 0xe8
 8007d2a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8007d2c:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <Displ_Orientation+0xa4>)
 8007d2e:	22f0      	movs	r2, #240	; 0xf0
 8007d30:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8007d32:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <Displ_Orientation+0xa8>)
 8007d34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d38:	801a      	strh	r2, [r3, #0]
			break;
 8007d3a:	e015      	b.n	8007d68 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8007d3c:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <Displ_Orientation+0xa0>)
 8007d3e:	2248      	movs	r2, #72	; 0x48
 8007d40:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <Displ_Orientation+0xa4>)
 8007d44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d48:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8007d4a:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <Displ_Orientation+0xa8>)
 8007d4c:	22f0      	movs	r2, #240	; 0xf0
 8007d4e:	801a      	strh	r2, [r3, #0]
			break;
 8007d50:	e00a      	b.n	8007d68 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8007d52:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <Displ_Orientation+0xa0>)
 8007d54:	2228      	movs	r2, #40	; 0x28
 8007d56:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <Displ_Orientation+0xa4>)
 8007d5a:	22f0      	movs	r2, #240	; 0xf0
 8007d5c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <Displ_Orientation+0xa8>)
 8007d60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d64:	801a      	strh	r2, [r3, #0]
			break;
 8007d66:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8007d68:	2036      	movs	r0, #54	; 0x36
 8007d6a:	f7ff feef 	bl	8007b4c <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2101      	movs	r1, #1
 8007d72:	4805      	ldr	r0, [pc, #20]	; (8007d88 <Displ_Orientation+0xa0>)
 8007d74:	f7ff fef9 	bl	8007b6a <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8007d78:	4a06      	ldr	r2, [pc, #24]	; (8007d94 <Displ_Orientation+0xac>)
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	7013      	strb	r3, [r2, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20009f1c 	.word	0x20009f1c
 8007d8c:	20008f16 	.word	0x20008f16
 8007d90:	20008f14 	.word	0x20008f14
 8007d94:	20008f12 	.word	0x20008f12

08007d98 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <HAL_SPI_ErrorCallback+0x24>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d102      	bne.n	8007db0 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <HAL_SPI_ErrorCallback+0x28>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	40003800 	.word	0x40003800
 8007dc0:	20000066 	.word	0x20000066

08007dc4 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a05      	ldr	r2, [pc, #20]	; (8007de8 <HAL_SPI_TxCpltCallback+0x24>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d102      	bne.n	8007ddc <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_SPI_TxCpltCallback+0x28>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40003800 	.word	0x40003800
 8007dec:	20000066 	.word	0x20000066

08007df0 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b08b      	sub	sp, #44	; 0x2c
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4623      	mov	r3, r4
 8007e00:	80fb      	strh	r3, [r7, #6]
 8007e02:	4603      	mov	r3, r0
 8007e04:	80bb      	strh	r3, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	807b      	strh	r3, [r7, #2]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	4a4f      	ldr	r2, [pc, #316]	; (8007f50 <Displ_FillArea+0x160>)
 8007e12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007e16:	4293      	cmp	r3, r2
 8007e18:	f280 8096 	bge.w	8007f48 <Displ_FillArea+0x158>
 8007e1c:	88bb      	ldrh	r3, [r7, #4]
 8007e1e:	4a4d      	ldr	r2, [pc, #308]	; (8007f54 <Displ_FillArea+0x164>)
 8007e20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	f280 808f 	bge.w	8007f48 <Displ_FillArea+0x158>
 8007e2a:	887b      	ldrh	r3, [r7, #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 808b 	beq.w	8007f48 <Displ_FillArea+0x158>
 8007e32:	883b      	ldrh	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8087 	beq.w	8007f48 <Displ_FillArea+0x158>

	x1=x + w - 1;
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	887b      	ldrh	r3, [r7, #2]
 8007e3e:	4413      	add	r3, r2
 8007e40:	3b01      	subs	r3, #1
 8007e42:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8007e44:	4b42      	ldr	r3, [pc, #264]	; (8007f50 <Displ_FillArea+0x160>)
 8007e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d903      	bls.n	8007e5a <Displ_FillArea+0x6a>
		x1=_width;
 8007e52:	4b3f      	ldr	r3, [pc, #252]	; (8007f50 <Displ_FillArea+0x160>)
 8007e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e58:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8007e5a:	88ba      	ldrh	r2, [r7, #4]
 8007e5c:	883b      	ldrh	r3, [r7, #0]
 8007e5e:	4413      	add	r3, r2
 8007e60:	3b01      	subs	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8007e64:	4b3b      	ldr	r3, [pc, #236]	; (8007f54 <Displ_FillArea+0x164>)
 8007e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d903      	bls.n	8007e7a <Displ_FillArea+0x8a>
		y1=_height;
 8007e72:	4b38      	ldr	r3, [pc, #224]	; (8007f54 <Displ_FillArea+0x164>)
 8007e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e78:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8007e7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	431a      	orrs	r2, r3
 8007e88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e8a:	061b      	lsls	r3, r3, #24
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8007e90:	88bb      	ldrh	r3, [r7, #4]
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	3301      	adds	r3, #1
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	6a39      	ldr	r1, [r7, #32]
 8007e9c:	1a8a      	subs	r2, r1, r2
 8007e9e:	3201      	adds	r2, #1
 8007ea0:	fb02 f303 	mul.w	r3, r2, r3
 8007ea4:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8007ea6:	4b2c      	ldr	r3, [pc, #176]	; (8007f58 <Displ_FillArea+0x168>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb2:	d204      	bcs.n	8007ebe <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	3301      	adds	r3, #1
 8007eba:	61bb      	str	r3, [r7, #24]
 8007ebc:	e002      	b.n	8007ec4 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8007ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ec2:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec8:	e007      	b.n	8007eda <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	1d1a      	adds	r2, r3, #4
 8007ece:	617a      	str	r2, [r7, #20]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d3f3      	bcc.n	8007eca <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	88b9      	ldrh	r1, [r7, #4]
 8007eec:	88f8      	ldrh	r0, [r7, #6]
 8007eee:	f7ff fe93 	bl	8007c18 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	0a9b      	lsrs	r3, r3, #10
 8007ef6:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8007ef8:	2300      	movs	r3, #0
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
 8007efc:	e00a      	b.n	8007f14 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <Displ_FillArea+0x168>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fe2e 	bl	8007b6a <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	3301      	adds	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
 8007f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d3f0      	bcc.n	8007efe <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <Displ_FillArea+0x168>)
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	005a      	lsls	r2, r3, #1
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	02db      	lsls	r3, r3, #11
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f7ff fe1c 	bl	8007b6a <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <Displ_FillArea+0x168>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <Displ_FillArea+0x16c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d101      	bne.n	8007f40 <Displ_FillArea+0x150>
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <Displ_FillArea+0x170>)
 8007f3e:	e000      	b.n	8007f42 <Displ_FillArea+0x152>
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <Displ_FillArea+0x16c>)
 8007f42:	4a05      	ldr	r2, [pc, #20]	; (8007f58 <Displ_FillArea+0x168>)
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e000      	b.n	8007f4a <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8007f48:	bf00      	nop

}
 8007f4a:	372c      	adds	r7, #44	; 0x2c
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd90      	pop	{r4, r7, pc}
 8007f50:	20008f14 	.word	0x20008f14
 8007f54:	20008f16 	.word	0x20008f16
 8007f58:	20000068 	.word	0x20000068
 8007f5c:	20008f18 	.word	0x20008f18
 8007f60:	20009718 	.word	0x20009718

08007f64 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	80fb      	strh	r3, [r7, #6]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	80bb      	strh	r3, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	4a0b      	ldr	r2, [pc, #44]	; (8007fa8 <Displ_Pixel+0x44>)
 8007f7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	da0e      	bge.n	8007fa0 <Displ_Pixel+0x3c>
 8007f82:	88bb      	ldrh	r3, [r7, #4]
 8007f84:	4a09      	ldr	r2, [pc, #36]	; (8007fac <Displ_Pixel+0x48>)
 8007f86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	da08      	bge.n	8007fa0 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8007f8e:	88b9      	ldrh	r1, [r7, #4]
 8007f90:	88f8      	ldrh	r0, [r7, #6]
 8007f92:	887b      	ldrh	r3, [r7, #2]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	2301      	movs	r3, #1
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f7ff ff29 	bl	8007df0 <Displ_FillArea>
 8007f9e:	e000      	b.n	8007fa2 <Displ_Pixel+0x3e>
        return;
 8007fa0:	bf00      	nop

}
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20008f14 	.word	0x20008f14
 8007fac:	20008f16 	.word	0x20008f16

08007fb0 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8007fb0:	b590      	push	{r4, r7, lr}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4623      	mov	r3, r4
 8007fc0:	80fb      	strh	r3, [r7, #6]
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	80bb      	strh	r3, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	807b      	strh	r3, [r7, #2]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8007fce:	887b      	ldrh	r3, [r7, #2]
 8007fd0:	f1c3 0301 	rsb	r3, r3, #1
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8007fdc:	887b      	ldrh	r3, [r7, #2]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	03d2      	lsls	r2, r2, #15
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8007fee:	887b      	ldrh	r3, [r7, #2]
 8007ff0:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8007ff2:	88f8      	ldrh	r0, [r7, #6]
 8007ff4:	88ba      	ldrh	r2, [r7, #4]
 8007ff6:	887b      	ldrh	r3, [r7, #2]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	883a      	ldrh	r2, [r7, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	f7ff ffb0 	bl	8007f64 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8008004:	88f8      	ldrh	r0, [r7, #6]
 8008006:	88ba      	ldrh	r2, [r7, #4]
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	b29b      	uxth	r3, r3
 800800e:	883a      	ldrh	r2, [r7, #0]
 8008010:	4619      	mov	r1, r3
 8008012:	f7ff ffa7 	bl	8007f64 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	887b      	ldrh	r3, [r7, #2]
 800801a:	4413      	add	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	88b9      	ldrh	r1, [r7, #4]
 8008020:	883a      	ldrh	r2, [r7, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff ff9e 	bl	8007f64 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	887b      	ldrh	r3, [r7, #2]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	b29b      	uxth	r3, r3
 8008030:	88b9      	ldrh	r1, [r7, #4]
 8008032:	883a      	ldrh	r2, [r7, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff ff95 	bl	8007f64 <Displ_Pixel>

    while (x<y) {
 800803a:	e081      	b.n	8008140 <Displ_drawCircle+0x190>
        if (f >= 0) {
 800803c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008040:	2b00      	cmp	r3, #0
 8008042:	db0e      	blt.n	8008062 <Displ_drawCircle+0xb2>
            y--;
 8008044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8008050:	8a7b      	ldrh	r3, [r7, #18]
 8008052:	3302      	adds	r3, #2
 8008054:	b29b      	uxth	r3, r3
 8008056:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8008058:	8afa      	ldrh	r2, [r7, #22]
 800805a:	8a7b      	ldrh	r3, [r7, #18]
 800805c:	4413      	add	r3, r2
 800805e:	b29b      	uxth	r3, r3
 8008060:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8008062:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008066:	b29b      	uxth	r3, r3
 8008068:	3301      	adds	r3, #1
 800806a:	b29b      	uxth	r3, r3
 800806c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800806e:	8abb      	ldrh	r3, [r7, #20]
 8008070:	3302      	adds	r3, #2
 8008072:	b29b      	uxth	r3, r3
 8008074:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8008076:	8afa      	ldrh	r2, [r7, #22]
 8008078:	8abb      	ldrh	r3, [r7, #20]
 800807a:	4413      	add	r3, r2
 800807c:	b29b      	uxth	r3, r3
 800807e:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8008080:	88fa      	ldrh	r2, [r7, #6]
 8008082:	8a3b      	ldrh	r3, [r7, #16]
 8008084:	4413      	add	r3, r2
 8008086:	b298      	uxth	r0, r3
 8008088:	88ba      	ldrh	r2, [r7, #4]
 800808a:	89fb      	ldrh	r3, [r7, #14]
 800808c:	4413      	add	r3, r2
 800808e:	b29b      	uxth	r3, r3
 8008090:	883a      	ldrh	r2, [r7, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	f7ff ff66 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	8a3b      	ldrh	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	b298      	uxth	r0, r3
 80080a0:	88ba      	ldrh	r2, [r7, #4]
 80080a2:	89fb      	ldrh	r3, [r7, #14]
 80080a4:	4413      	add	r3, r2
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	883a      	ldrh	r2, [r7, #0]
 80080aa:	4619      	mov	r1, r3
 80080ac:	f7ff ff5a 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	8a3b      	ldrh	r3, [r7, #16]
 80080b4:	4413      	add	r3, r2
 80080b6:	b298      	uxth	r0, r3
 80080b8:	88ba      	ldrh	r2, [r7, #4]
 80080ba:	89fb      	ldrh	r3, [r7, #14]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	b29b      	uxth	r3, r3
 80080c0:	883a      	ldrh	r2, [r7, #0]
 80080c2:	4619      	mov	r1, r3
 80080c4:	f7ff ff4e 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 80080c8:	88fa      	ldrh	r2, [r7, #6]
 80080ca:	8a3b      	ldrh	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	b298      	uxth	r0, r3
 80080d0:	88ba      	ldrh	r2, [r7, #4]
 80080d2:	89fb      	ldrh	r3, [r7, #14]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	883a      	ldrh	r2, [r7, #0]
 80080da:	4619      	mov	r1, r3
 80080dc:	f7ff ff42 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	89fb      	ldrh	r3, [r7, #14]
 80080e4:	4413      	add	r3, r2
 80080e6:	b298      	uxth	r0, r3
 80080e8:	88ba      	ldrh	r2, [r7, #4]
 80080ea:	8a3b      	ldrh	r3, [r7, #16]
 80080ec:	4413      	add	r3, r2
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	883a      	ldrh	r2, [r7, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	f7ff ff36 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80080f8:	88fa      	ldrh	r2, [r7, #6]
 80080fa:	89fb      	ldrh	r3, [r7, #14]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	b298      	uxth	r0, r3
 8008100:	88ba      	ldrh	r2, [r7, #4]
 8008102:	8a3b      	ldrh	r3, [r7, #16]
 8008104:	4413      	add	r3, r2
 8008106:	b29b      	uxth	r3, r3
 8008108:	883a      	ldrh	r2, [r7, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	f7ff ff2a 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	89fb      	ldrh	r3, [r7, #14]
 8008114:	4413      	add	r3, r2
 8008116:	b298      	uxth	r0, r3
 8008118:	88ba      	ldrh	r2, [r7, #4]
 800811a:	8a3b      	ldrh	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	b29b      	uxth	r3, r3
 8008120:	883a      	ldrh	r2, [r7, #0]
 8008122:	4619      	mov	r1, r3
 8008124:	f7ff ff1e 	bl	8007f64 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	89fb      	ldrh	r3, [r7, #14]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	b298      	uxth	r0, r3
 8008130:	88ba      	ldrh	r2, [r7, #4]
 8008132:	8a3b      	ldrh	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	883a      	ldrh	r2, [r7, #0]
 800813a:	4619      	mov	r1, r3
 800813c:	f7ff ff12 	bl	8007f64 <Displ_Pixel>
    while (x<y) {
 8008140:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008148:	429a      	cmp	r2, r3
 800814a:	f6ff af77 	blt.w	800803c <Displ_drawCircle+0x8c>
    }
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	bd90      	pop	{r4, r7, pc}

08008158 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af02      	add	r7, sp, #8
 800815e:	4603      	mov	r3, r0
 8008160:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8008162:	4b09      	ldr	r3, [pc, #36]	; (8008188 <Displ_CLS+0x30>)
 8008164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008168:	b29a      	uxth	r2, r3
 800816a:	4b08      	ldr	r3, [pc, #32]	; (800818c <Displ_CLS+0x34>)
 800816c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008170:	b299      	uxth	r1, r3
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	460b      	mov	r3, r1
 8008178:	2100      	movs	r1, #0
 800817a:	2000      	movs	r0, #0
 800817c:	f7ff fe38 	bl	8007df0 <Displ_FillArea>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20008f14 	.word	0x20008f14
 800818c:	20008f16 	.word	0x20008f16

08008190 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8008190:	b590      	push	{r4, r7, lr}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	4611      	mov	r1, r2
 800819c:	461a      	mov	r2, r3
 800819e:	4623      	mov	r3, r4
 80081a0:	80fb      	strh	r3, [r7, #6]
 80081a2:	4603      	mov	r3, r0
 80081a4:	80bb      	strh	r3, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	807b      	strh	r3, [r7, #2]
 80081aa:	4613      	mov	r3, r2
 80081ac:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80081ae:	887b      	ldrh	r3, [r7, #2]
 80081b0:	f1c3 0301 	rsb	r3, r3, #1
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80081b8:	2301      	movs	r3, #1
 80081ba:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80081bc:	887b      	ldrh	r3, [r7, #2]
 80081be:	461a      	mov	r2, r3
 80081c0:	03d2      	lsls	r2, r2, #15
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80081ce:	887b      	ldrh	r3, [r7, #2]
 80081d0:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 80081d2:	e095      	b.n	8008300 <drawCircleHelper+0x170>
        if (f >= 0) {
 80081d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db0e      	blt.n	80081fa <drawCircleHelper+0x6a>
            y--;
 80081dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80081e8:	8a7b      	ldrh	r3, [r7, #18]
 80081ea:	3302      	adds	r3, #2
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80081f0:	8afa      	ldrh	r2, [r7, #22]
 80081f2:	8a7b      	ldrh	r3, [r7, #18]
 80081f4:	4413      	add	r3, r2
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80081fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3301      	adds	r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8008206:	8abb      	ldrh	r3, [r7, #20]
 8008208:	3302      	adds	r3, #2
 800820a:	b29b      	uxth	r3, r3
 800820c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800820e:	8afa      	ldrh	r2, [r7, #22]
 8008210:	8abb      	ldrh	r3, [r7, #20]
 8008212:	4413      	add	r3, r2
 8008214:	b29b      	uxth	r3, r3
 8008216:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8008218:	787b      	ldrb	r3, [r7, #1]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d017      	beq.n	8008252 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	8a3b      	ldrh	r3, [r7, #16]
 8008226:	4413      	add	r3, r2
 8008228:	b298      	uxth	r0, r3
 800822a:	88ba      	ldrh	r2, [r7, #4]
 800822c:	89fb      	ldrh	r3, [r7, #14]
 800822e:	4413      	add	r3, r2
 8008230:	b29b      	uxth	r3, r3
 8008232:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008234:	4619      	mov	r1, r3
 8008236:	f7ff fe95 	bl	8007f64 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 800823a:	88fa      	ldrh	r2, [r7, #6]
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	4413      	add	r3, r2
 8008240:	b298      	uxth	r0, r3
 8008242:	88ba      	ldrh	r2, [r7, #4]
 8008244:	8a3b      	ldrh	r3, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	b29b      	uxth	r3, r3
 800824a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800824c:	4619      	mov	r1, r3
 800824e:	f7ff fe89 	bl	8007f64 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8008252:	787b      	ldrb	r3, [r7, #1]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d017      	beq.n	800828c <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	8a3b      	ldrh	r3, [r7, #16]
 8008260:	4413      	add	r3, r2
 8008262:	b298      	uxth	r0, r3
 8008264:	88ba      	ldrh	r2, [r7, #4]
 8008266:	89fb      	ldrh	r3, [r7, #14]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	b29b      	uxth	r3, r3
 800826c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800826e:	4619      	mov	r1, r3
 8008270:	f7ff fe78 	bl	8007f64 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8008274:	88fa      	ldrh	r2, [r7, #6]
 8008276:	89fb      	ldrh	r3, [r7, #14]
 8008278:	4413      	add	r3, r2
 800827a:	b298      	uxth	r0, r3
 800827c:	88ba      	ldrh	r2, [r7, #4]
 800827e:	8a3b      	ldrh	r3, [r7, #16]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	b29b      	uxth	r3, r3
 8008284:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008286:	4619      	mov	r1, r3
 8008288:	f7ff fe6c 	bl	8007f64 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 800828c:	787b      	ldrb	r3, [r7, #1]
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	2b00      	cmp	r3, #0
 8008294:	d017      	beq.n	80082c6 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8008296:	88fa      	ldrh	r2, [r7, #6]
 8008298:	89fb      	ldrh	r3, [r7, #14]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	b298      	uxth	r0, r3
 800829e:	88ba      	ldrh	r2, [r7, #4]
 80082a0:	8a3b      	ldrh	r3, [r7, #16]
 80082a2:	4413      	add	r3, r2
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80082a8:	4619      	mov	r1, r3
 80082aa:	f7ff fe5b 	bl	8007f64 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	8a3b      	ldrh	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	b298      	uxth	r0, r3
 80082b6:	88ba      	ldrh	r2, [r7, #4]
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	4413      	add	r3, r2
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7ff fe4f 	bl	8007f64 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 80082c6:	787b      	ldrb	r3, [r7, #1]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d017      	beq.n	8008300 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	89fb      	ldrh	r3, [r7, #14]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	b298      	uxth	r0, r3
 80082d8:	88ba      	ldrh	r2, [r7, #4]
 80082da:	8a3b      	ldrh	r3, [r7, #16]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80082e2:	4619      	mov	r1, r3
 80082e4:	f7ff fe3e 	bl	8007f64 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	8a3b      	ldrh	r3, [r7, #16]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	b298      	uxth	r0, r3
 80082f0:	88ba      	ldrh	r2, [r7, #4]
 80082f2:	89fb      	ldrh	r3, [r7, #14]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80082fa:	4619      	mov	r1, r3
 80082fc:	f7ff fe32 	bl	8007f64 <Displ_Pixel>
    while (x<y) {
 8008300:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008308:	429a      	cmp	r2, r3
 800830a:	f6ff af63 	blt.w	80081d4 <drawCircleHelper+0x44>
        }
    }
}
 800830e:	bf00      	nop
 8008310:	bf00      	nop
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	bd90      	pop	{r4, r7, pc}

08008318 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b089      	sub	sp, #36	; 0x24
 800831c:	af02      	add	r7, sp, #8
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	461a      	mov	r2, r3
 8008326:	4623      	mov	r3, r4
 8008328:	80fb      	strh	r3, [r7, #6]
 800832a:	4603      	mov	r3, r0
 800832c:	80bb      	strh	r3, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	807b      	strh	r3, [r7, #2]
 8008332:	4613      	mov	r3, r2
 8008334:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8008336:	887b      	ldrh	r3, [r7, #2]
 8008338:	f1c3 0301 	rsb	r3, r3, #1
 800833c:	b29b      	uxth	r3, r3
 800833e:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8008340:	2301      	movs	r3, #1
 8008342:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8008344:	887b      	ldrh	r3, [r7, #2]
 8008346:	461a      	mov	r2, r3
 8008348:	03d2      	lsls	r2, r2, #15
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	b29b      	uxth	r3, r3
 8008350:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8008356:	887b      	ldrh	r3, [r7, #2]
 8008358:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 800835a:	e0a7      	b.n	80084ac <fillCircleHelper+0x194>
    if (f >= 0) {
 800835c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008360:	2b00      	cmp	r3, #0
 8008362:	db0e      	blt.n	8008382 <fillCircleHelper+0x6a>
      y--;
 8008364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29b      	uxth	r3, r3
 800836e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8008370:	8a7b      	ldrh	r3, [r7, #18]
 8008372:	3302      	adds	r3, #2
 8008374:	b29b      	uxth	r3, r3
 8008376:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8008378:	8afa      	ldrh	r2, [r7, #22]
 800837a:	8a7b      	ldrh	r3, [r7, #18]
 800837c:	4413      	add	r3, r2
 800837e:	b29b      	uxth	r3, r3
 8008380:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8008382:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008386:	b29b      	uxth	r3, r3
 8008388:	3301      	adds	r3, #1
 800838a:	b29b      	uxth	r3, r3
 800838c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800838e:	8abb      	ldrh	r3, [r7, #20]
 8008390:	3302      	adds	r3, #2
 8008392:	b29b      	uxth	r3, r3
 8008394:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8008396:	8afa      	ldrh	r2, [r7, #22]
 8008398:	8abb      	ldrh	r3, [r7, #20]
 800839a:	4413      	add	r3, r2
 800839c:	b29b      	uxth	r3, r3
 800839e:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80083a0:	787b      	ldrb	r3, [r7, #1]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d03d      	beq.n	8008426 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	8a3b      	ldrh	r3, [r7, #16]
 80083ae:	4413      	add	r3, r2
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b218      	sxth	r0, r3
 80083b4:	88ba      	ldrh	r2, [r7, #4]
 80083b6:	89fb      	ldrh	r3, [r7, #14]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	b219      	sxth	r1, r3
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	8a3b      	ldrh	r3, [r7, #16]
 80083c2:	4413      	add	r3, r2
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	b21c      	sxth	r4, r3
 80083c8:	88ba      	ldrh	r2, [r7, #4]
 80083ca:	89fb      	ldrh	r3, [r7, #14]
 80083cc:	4413      	add	r3, r2
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083d2:	4413      	add	r3, r2
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3301      	adds	r3, #1
 80083d8:	b29b      	uxth	r3, r3
 80083da:	b21a      	sxth	r2, r3
 80083dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	4622      	mov	r2, r4
 80083e4:	f000 f8a1 	bl	800852a <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 80083e8:	88fa      	ldrh	r2, [r7, #6]
 80083ea:	89fb      	ldrh	r3, [r7, #14]
 80083ec:	4413      	add	r3, r2
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	b218      	sxth	r0, r3
 80083f2:	88ba      	ldrh	r2, [r7, #4]
 80083f4:	8a3b      	ldrh	r3, [r7, #16]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	b219      	sxth	r1, r3
 80083fc:	88fa      	ldrh	r2, [r7, #6]
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	4413      	add	r3, r2
 8008402:	b29b      	uxth	r3, r3
 8008404:	b21c      	sxth	r4, r3
 8008406:	88ba      	ldrh	r2, [r7, #4]
 8008408:	8a3b      	ldrh	r3, [r7, #16]
 800840a:	4413      	add	r3, r2
 800840c:	b29a      	uxth	r2, r3
 800840e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008410:	4413      	add	r3, r2
 8008412:	b29b      	uxth	r3, r3
 8008414:	3301      	adds	r3, #1
 8008416:	b29b      	uxth	r3, r3
 8008418:	b21a      	sxth	r2, r3
 800841a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	4613      	mov	r3, r2
 8008420:	4622      	mov	r2, r4
 8008422:	f000 f882 	bl	800852a <Displ_Line>
    }
    if (cornername & 0x2) {
 8008426:	787b      	ldrb	r3, [r7, #1]
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d03d      	beq.n	80084ac <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	8a3b      	ldrh	r3, [r7, #16]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	b29b      	uxth	r3, r3
 8008438:	b218      	sxth	r0, r3
 800843a:	88ba      	ldrh	r2, [r7, #4]
 800843c:	89fb      	ldrh	r3, [r7, #14]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	b29b      	uxth	r3, r3
 8008442:	b219      	sxth	r1, r3
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	8a3b      	ldrh	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	b29b      	uxth	r3, r3
 800844c:	b21c      	sxth	r4, r3
 800844e:	88ba      	ldrh	r2, [r7, #4]
 8008450:	89fb      	ldrh	r3, [r7, #14]
 8008452:	4413      	add	r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008458:	4413      	add	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	3301      	adds	r3, #1
 800845e:	b29b      	uxth	r3, r3
 8008460:	b21a      	sxth	r2, r3
 8008462:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	4613      	mov	r3, r2
 8008468:	4622      	mov	r2, r4
 800846a:	f000 f85e 	bl	800852a <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	b29b      	uxth	r3, r3
 8008476:	b218      	sxth	r0, r3
 8008478:	88ba      	ldrh	r2, [r7, #4]
 800847a:	8a3b      	ldrh	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	b29b      	uxth	r3, r3
 8008480:	b219      	sxth	r1, r3
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	89fb      	ldrh	r3, [r7, #14]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	b29b      	uxth	r3, r3
 800848a:	b21c      	sxth	r4, r3
 800848c:	88ba      	ldrh	r2, [r7, #4]
 800848e:	8a3b      	ldrh	r3, [r7, #16]
 8008490:	4413      	add	r3, r2
 8008492:	b29a      	uxth	r2, r3
 8008494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008496:	4413      	add	r3, r2
 8008498:	b29b      	uxth	r3, r3
 800849a:	3301      	adds	r3, #1
 800849c:	b29b      	uxth	r3, r3
 800849e:	b21a      	sxth	r2, r3
 80084a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	4622      	mov	r2, r4
 80084a8:	f000 f83f 	bl	800852a <Displ_Line>
  while (x<y) {
 80084ac:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80084b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	f6ff af51 	blt.w	800835c <fillCircleHelper+0x44>
    }
  }
}
 80084ba:	bf00      	nop
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	4623      	mov	r3, r4
 80084d4:	80fb      	strh	r3, [r7, #6]
 80084d6:	4603      	mov	r3, r0
 80084d8:	80bb      	strh	r3, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	807b      	strh	r3, [r7, #2]
 80084de:	4613      	mov	r3, r2
 80084e0:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 80084e2:	88ba      	ldrh	r2, [r7, #4]
 80084e4:	887b      	ldrh	r3, [r7, #2]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	b219      	sxth	r1, r3
 80084ec:	88ba      	ldrh	r2, [r7, #4]
 80084ee:	887b      	ldrh	r3, [r7, #2]
 80084f0:	4413      	add	r3, r2
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	b21c      	sxth	r4, r3
 80084f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80084fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80084fe:	883b      	ldrh	r3, [r7, #0]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	4623      	mov	r3, r4
 8008504:	f000 f811 	bl	800852a <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8008508:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800850c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008510:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008514:	883b      	ldrh	r3, [r7, #0]
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	2300      	movs	r3, #0
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	2303      	movs	r3, #3
 800851e:	f7ff fefb 	bl	8008318 <fillCircleHelper>
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	bd90      	pop	{r4, r7, pc}

0800852a <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800852a:	b590      	push	{r4, r7, lr}
 800852c:	b08b      	sub	sp, #44	; 0x2c
 800852e:	af02      	add	r7, sp, #8
 8008530:	4604      	mov	r4, r0
 8008532:	4608      	mov	r0, r1
 8008534:	4611      	mov	r1, r2
 8008536:	461a      	mov	r2, r3
 8008538:	4623      	mov	r3, r4
 800853a:	80fb      	strh	r3, [r7, #6]
 800853c:	4603      	mov	r3, r0
 800853e:	80bb      	strh	r3, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	807b      	strh	r3, [r7, #2]
 8008544:	4613      	mov	r3, r2
 8008546:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8008548:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800854c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008550:	429a      	cmp	r2, r3
 8008552:	d123      	bne.n	800859c <Displ_Line+0x72>
    	if (y1>y0){
 8008554:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008558:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	dd0e      	ble.n	800857e <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8008560:	88f8      	ldrh	r0, [r7, #6]
 8008562:	88b9      	ldrh	r1, [r7, #4]
 8008564:	883a      	ldrh	r2, [r7, #0]
 8008566:	88bb      	ldrh	r3, [r7, #4]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	b29b      	uxth	r3, r3
 800856c:	3301      	adds	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	2201      	movs	r2, #1
 8008578:	f7ff fc3a 	bl	8007df0 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 800857c:	e103      	b.n	8008786 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 800857e:	88f8      	ldrh	r0, [r7, #6]
 8008580:	8839      	ldrh	r1, [r7, #0]
 8008582:	88ba      	ldrh	r2, [r7, #4]
 8008584:	883b      	ldrh	r3, [r7, #0]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	b29b      	uxth	r3, r3
 800858a:	3301      	adds	r3, #1
 800858c:	b29a      	uxth	r2, r3
 800858e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4613      	mov	r3, r2
 8008594:	2201      	movs	r2, #1
 8008596:	f7ff fc2b 	bl	8007df0 <Displ_FillArea>
    	return;
 800859a:	e0f4      	b.n	8008786 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 800859c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80085a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d121      	bne.n	80085ec <Displ_Line+0xc2>
    	if (x1>x0)
 80085a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80085ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	dd0d      	ble.n	80085d0 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80085b4:	88f8      	ldrh	r0, [r7, #6]
 80085b6:	88b9      	ldrh	r1, [r7, #4]
 80085b8:	887a      	ldrh	r2, [r7, #2]
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	b29b      	uxth	r3, r3
 80085c0:	3301      	adds	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2301      	movs	r3, #1
 80085ca:	f7ff fc11 	bl	8007df0 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 80085ce:	e0da      	b.n	8008786 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80085d0:	8878      	ldrh	r0, [r7, #2]
 80085d2:	8839      	ldrh	r1, [r7, #0]
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	887b      	ldrh	r3, [r7, #2]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	b29b      	uxth	r3, r3
 80085dc:	3301      	adds	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2301      	movs	r3, #1
 80085e6:	f7ff fc03 	bl	8007df0 <Displ_FillArea>
    	return;
 80085ea:	e0cc      	b.n	8008786 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80085ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80085f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	dd05      	ble.n	8008604 <Displ_Line+0xda>
 80085f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80085fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008600:	1ad2      	subs	r2, r2, r3
 8008602:	e004      	b.n	800860e <Displ_Line+0xe4>
 8008604:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008608:	f9b7 3000 	ldrsh.w	r3, [r7]
 800860c:	1ad2      	subs	r2, r2, r3
 800860e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8008612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008616:	4299      	cmp	r1, r3
 8008618:	dd05      	ble.n	8008626 <Displ_Line+0xfc>
 800861a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800861e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008622:	1acb      	subs	r3, r1, r3
 8008624:	e004      	b.n	8008630 <Displ_Line+0x106>
 8008626:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800862a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800862e:	1acb      	subs	r3, r1, r3
 8008630:	429a      	cmp	r2, r3
 8008632:	bfcc      	ite	gt
 8008634:	2301      	movgt	r3, #1
 8008636:	2300      	movle	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 800863c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	827b      	strh	r3, [r7, #18]
 8008648:	88bb      	ldrh	r3, [r7, #4]
 800864a:	80fb      	strh	r3, [r7, #6]
 800864c:	8a7b      	ldrh	r3, [r7, #18]
 800864e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8008650:	887b      	ldrh	r3, [r7, #2]
 8008652:	823b      	strh	r3, [r7, #16]
 8008654:	883b      	ldrh	r3, [r7, #0]
 8008656:	807b      	strh	r3, [r7, #2]
 8008658:	8a3b      	ldrh	r3, [r7, #16]
 800865a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800865c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008664:	429a      	cmp	r2, r3
 8008666:	dd0b      	ble.n	8008680 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8008668:	88fb      	ldrh	r3, [r7, #6]
 800866a:	81fb      	strh	r3, [r7, #14]
 800866c:	887b      	ldrh	r3, [r7, #2]
 800866e:	80fb      	strh	r3, [r7, #6]
 8008670:	89fb      	ldrh	r3, [r7, #14]
 8008672:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8008674:	88bb      	ldrh	r3, [r7, #4]
 8008676:	81bb      	strh	r3, [r7, #12]
 8008678:	883b      	ldrh	r3, [r7, #0]
 800867a:	80bb      	strh	r3, [r7, #4]
 800867c:	89bb      	ldrh	r3, [r7, #12]
 800867e:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8008680:	887a      	ldrh	r2, [r7, #2]
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	b29b      	uxth	r3, r3
 8008688:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800868a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800868e:	105b      	asrs	r3, r3, #1
 8008690:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8008692:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008696:	f9b7 3000 	ldrsh.w	r3, [r7]
 800869a:	429a      	cmp	r2, r3
 800869c:	da07      	bge.n	80086ae <Displ_Line+0x184>
        dy = y1-y0;
 800869e:	883a      	ldrh	r2, [r7, #0]
 80086a0:	88bb      	ldrh	r3, [r7, #4]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80086a8:	2301      	movs	r3, #1
 80086aa:	837b      	strh	r3, [r7, #26]
 80086ac:	e007      	b.n	80086be <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80086ae:	88ba      	ldrh	r2, [r7, #4]
 80086b0:	883b      	ldrh	r3, [r7, #0]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80086b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086bc:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80086be:	2300      	movs	r3, #0
 80086c0:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	83bb      	strh	r3, [r7, #28]
 80086c6:	e03a      	b.n	800873e <Displ_Line+0x214>
    	l++;
 80086c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3301      	adds	r3, #1
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80086d4:	8b3a      	ldrh	r2, [r7, #24]
 80086d6:	8afb      	ldrh	r3, [r7, #22]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	b29b      	uxth	r3, r3
 80086dc:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80086de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da25      	bge.n	8008732 <Displ_Line+0x208>
        	if (steep) {
 80086e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 80086ee:	88b8      	ldrh	r0, [r7, #4]
 80086f0:	88f9      	ldrh	r1, [r7, #6]
 80086f2:	8bfa      	ldrh	r2, [r7, #30]
 80086f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	2201      	movs	r2, #1
 80086fc:	f7ff fb78 	bl	8007df0 <Displ_FillArea>
 8008700:	e007      	b.n	8008712 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8008702:	88f8      	ldrh	r0, [r7, #6]
 8008704:	88b9      	ldrh	r1, [r7, #4]
 8008706:	8bfa      	ldrh	r2, [r7, #30]
 8008708:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2301      	movs	r3, #1
 800870e:	f7ff fb6f 	bl	8007df0 <Displ_FillArea>
            }
            y0 += ystep;
 8008712:	88ba      	ldrh	r2, [r7, #4]
 8008714:	8b7b      	ldrh	r3, [r7, #26]
 8008716:	4413      	add	r3, r2
 8008718:	b29b      	uxth	r3, r3
 800871a:	80bb      	strh	r3, [r7, #4]
            l=0;
 800871c:	2300      	movs	r3, #0
 800871e:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8008720:	8bbb      	ldrh	r3, [r7, #28]
 8008722:	3301      	adds	r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8008728:	8b3a      	ldrh	r2, [r7, #24]
 800872a:	897b      	ldrh	r3, [r7, #10]
 800872c:	4413      	add	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8008732:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008736:	b29b      	uxth	r3, r3
 8008738:	3301      	adds	r3, #1
 800873a:	b29b      	uxth	r3, r3
 800873c:	83bb      	strh	r3, [r7, #28]
 800873e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008742:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008746:	429a      	cmp	r2, r3
 8008748:	ddbe      	ble.n	80086c8 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 800874a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d019      	beq.n	8008786 <Displ_Line+0x25c>
    	if (steep) {
 8008752:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 800875a:	88b8      	ldrh	r0, [r7, #4]
 800875c:	88f9      	ldrh	r1, [r7, #6]
 800875e:	8bfb      	ldrh	r3, [r7, #30]
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	2201      	movs	r2, #1
 800876c:	f7ff fb40 	bl	8007df0 <Displ_FillArea>
 8008770:	e009      	b.n	8008786 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8008772:	88f8      	ldrh	r0, [r7, #6]
 8008774:	88b9      	ldrh	r1, [r7, #4]
 8008776:	8bfb      	ldrh	r3, [r7, #30]
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	2301      	movs	r3, #1
 8008782:	f7ff fb35 	bl	8007df0 <Displ_FillArea>
    	}
    }
}
 8008786:	3724      	adds	r7, #36	; 0x24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}

0800878c <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b085      	sub	sp, #20
 8008790:	af02      	add	r7, sp, #8
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	461a      	mov	r2, r3
 800879a:	4623      	mov	r3, r4
 800879c:	80fb      	strh	r3, [r7, #6]
 800879e:	4603      	mov	r3, r0
 80087a0:	80bb      	strh	r3, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	807b      	strh	r3, [r7, #2]
 80087a6:	4613      	mov	r3, r2
 80087a8:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 80087aa:	88f8      	ldrh	r0, [r7, #6]
 80087ac:	88b9      	ldrh	r1, [r7, #4]
 80087ae:	887a      	ldrh	r2, [r7, #2]
 80087b0:	8b3c      	ldrh	r4, [r7, #24]
 80087b2:	8bbb      	ldrh	r3, [r7, #28]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4623      	mov	r3, r4
 80087b8:	f7ff fb1a 	bl	8007df0 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 80087bc:	88f8      	ldrh	r0, [r7, #6]
 80087be:	88ba      	ldrh	r2, [r7, #4]
 80087c0:	883b      	ldrh	r3, [r7, #0]
 80087c2:	4413      	add	r3, r2
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	8b3b      	ldrh	r3, [r7, #24]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	b299      	uxth	r1, r3
 80087cc:	887a      	ldrh	r2, [r7, #2]
 80087ce:	8b3c      	ldrh	r4, [r7, #24]
 80087d0:	8bbb      	ldrh	r3, [r7, #28]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	4623      	mov	r3, r4
 80087d6:	f7ff fb0b 	bl	8007df0 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 80087da:	88f8      	ldrh	r0, [r7, #6]
 80087dc:	88b9      	ldrh	r1, [r7, #4]
 80087de:	8b3a      	ldrh	r2, [r7, #24]
 80087e0:	883c      	ldrh	r4, [r7, #0]
 80087e2:	8bbb      	ldrh	r3, [r7, #28]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	4623      	mov	r3, r4
 80087e8:	f7ff fb02 	bl	8007df0 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	887b      	ldrh	r3, [r7, #2]
 80087f0:	4413      	add	r3, r2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	8b3b      	ldrh	r3, [r7, #24]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	b298      	uxth	r0, r3
 80087fa:	88b9      	ldrh	r1, [r7, #4]
 80087fc:	8b3a      	ldrh	r2, [r7, #24]
 80087fe:	883c      	ldrh	r4, [r7, #0]
 8008800:	8bbb      	ldrh	r3, [r7, #28]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	4623      	mov	r3, r4
 8008806:	f7ff faf3 	bl	8007df0 <Displ_FillArea>
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	bd90      	pop	{r4, r7, pc}

08008812 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8008812:	b590      	push	{r4, r7, lr}
 8008814:	b085      	sub	sp, #20
 8008816:	af02      	add	r7, sp, #8
 8008818:	4604      	mov	r4, r0
 800881a:	4608      	mov	r0, r1
 800881c:	4611      	mov	r1, r2
 800881e:	461a      	mov	r2, r3
 8008820:	4623      	mov	r3, r4
 8008822:	80fb      	strh	r3, [r7, #6]
 8008824:	4603      	mov	r3, r0
 8008826:	80bb      	strh	r3, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	807b      	strh	r3, [r7, #2]
 800882c:	4613      	mov	r3, r2
 800882e:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8008830:	f9b7 4000 	ldrsh.w	r4, [r7]
 8008834:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008838:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800883c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008840:	8c3b      	ldrh	r3, [r7, #32]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	4623      	mov	r3, r4
 8008846:	f7ff fe70 	bl	800852a <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 800884a:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 800884e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008852:	f9b7 1000 	ldrsh.w	r1, [r7]
 8008856:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800885a:	8c3b      	ldrh	r3, [r7, #32]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	4623      	mov	r3, r4
 8008860:	f7ff fe63 	bl	800852a <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8008864:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008868:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800886c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8008870:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8008874:	8c3b      	ldrh	r3, [r7, #32]
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	4623      	mov	r3, r4
 800887a:	f7ff fe56 	bl	800852a <Displ_Line>
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bd90      	pop	{r4, r7, pc}

08008886 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8008886:	b590      	push	{r4, r7, lr}
 8008888:	b091      	sub	sp, #68	; 0x44
 800888a:	af02      	add	r7, sp, #8
 800888c:	4604      	mov	r4, r0
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	4623      	mov	r3, r4
 8008896:	80fb      	strh	r3, [r7, #6]
 8008898:	4603      	mov	r3, r0
 800889a:	80bb      	strh	r3, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	807b      	strh	r3, [r7, #2]
 80088a0:	4613      	mov	r3, r2
 80088a2:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80088a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80088a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	dd0b      	ble.n	80088c8 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80088b0:	88bb      	ldrh	r3, [r7, #4]
 80088b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80088b4:	883b      	ldrh	r3, [r7, #0]
 80088b6:	80bb      	strh	r3, [r7, #4]
 80088b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088ba:	803b      	strh	r3, [r7, #0]
 80088bc:	88fb      	ldrh	r3, [r7, #6]
 80088be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80088c0:	887b      	ldrh	r3, [r7, #2]
 80088c2:	80fb      	strh	r3, [r7, #6]
 80088c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088c6:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80088c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80088cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	dd0f      	ble.n	80088f4 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80088d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80088d8:	847b      	strh	r3, [r7, #34]	; 0x22
 80088da:	883b      	ldrh	r3, [r7, #0]
 80088dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80088e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088e2:	803b      	strh	r3, [r7, #0]
 80088e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80088e8:	843b      	strh	r3, [r7, #32]
 80088ea:	887b      	ldrh	r3, [r7, #2]
 80088ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80088f0:	8c3b      	ldrh	r3, [r7, #32]
 80088f2:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80088f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80088f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	dd0b      	ble.n	8008918 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8008900:	88bb      	ldrh	r3, [r7, #4]
 8008902:	83fb      	strh	r3, [r7, #30]
 8008904:	883b      	ldrh	r3, [r7, #0]
 8008906:	80bb      	strh	r3, [r7, #4]
 8008908:	8bfb      	ldrh	r3, [r7, #30]
 800890a:	803b      	strh	r3, [r7, #0]
 800890c:	88fb      	ldrh	r3, [r7, #6]
 800890e:	83bb      	strh	r3, [r7, #28]
 8008910:	887b      	ldrh	r3, [r7, #2]
 8008912:	80fb      	strh	r3, [r7, #6]
 8008914:	8bbb      	ldrh	r3, [r7, #28]
 8008916:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8008918:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800891c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8008920:	429a      	cmp	r2, r3
 8008922:	d136      	bne.n	8008992 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008928:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800892a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 800892c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008930:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008934:	429a      	cmp	r2, r3
 8008936:	da02      	bge.n	800893e <Displ_fillTriangle+0xb8>
 8008938:	887b      	ldrh	r3, [r7, #2]
 800893a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800893c:	e007      	b.n	800894e <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800893e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008942:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8008946:	429a      	cmp	r2, r3
 8008948:	dd01      	ble.n	800894e <Displ_fillTriangle+0xc8>
 800894a:	887b      	ldrh	r3, [r7, #2]
 800894c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 800894e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8008952:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008956:	429a      	cmp	r2, r3
 8008958:	da03      	bge.n	8008962 <Displ_fillTriangle+0xdc>
 800895a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800895e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008960:	e008      	b.n	8008974 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8008962:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8008966:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800896a:	429a      	cmp	r2, r3
 800896c:	dd02      	ble.n	8008974 <Displ_fillTriangle+0xee>
 800896e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008972:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8008974:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008978:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800897c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008980:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8008984:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	4623      	mov	r3, r4
 800898c:	f7ff fdcd 	bl	800852a <Displ_Line>
        return;
 8008990:	e0d2      	b.n	8008b38 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8008992:	887a      	ldrh	r2, [r7, #2]
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	b29b      	uxth	r3, r3
 800899a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 800899c:	883a      	ldrh	r2, [r7, #0]
 800899e:	88bb      	ldrh	r3, [r7, #4]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80089a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80089aa:	88fb      	ldrh	r3, [r7, #6]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80089b2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80089b6:	88bb      	ldrh	r3, [r7, #4]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80089be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80089c2:	887b      	ldrh	r3, [r7, #2]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80089ca:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80089ce:	883b      	ldrh	r3, [r7, #0]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80089d6:	2300      	movs	r3, #0
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80089de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80089e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d102      	bne.n	80089f0 <Displ_fillTriangle+0x16a>
 80089ea:	883b      	ldrh	r3, [r7, #0]
 80089ec:	863b      	strh	r3, [r7, #48]	; 0x30
 80089ee:	e003      	b.n	80089f8 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80089f0:	883b      	ldrh	r3, [r7, #0]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80089f8:	88bb      	ldrh	r3, [r7, #4]
 80089fa:	867b      	strh	r3, [r7, #50]	; 0x32
 80089fc:	e03d      	b.n	8008a7a <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80089fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8008a12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	88fb      	ldrh	r3, [r7, #6]
 8008a20:	4413      	add	r3, r2
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8008a26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2c:	4413      	add	r3, r2
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8008a30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a36:	4413      	add	r3, r2
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8008a3a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8008a3e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8008a42:	429a      	cmp	r2, r3
 8008a44:	dd05      	ble.n	8008a52 <Displ_fillTriangle+0x1cc>
 8008a46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a48:	81bb      	strh	r3, [r7, #12]
 8008a4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008a4e:	89bb      	ldrh	r3, [r7, #12]
 8008a50:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8008a52:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8008a56:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8008a5a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008a5e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8008a62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4623      	mov	r3, r4
 8008a6a:	f7ff fd5e 	bl	800852a <Displ_Line>
    for(y=y0; y<=last; y++) {
 8008a6e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3301      	adds	r3, #1
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	867b      	strh	r3, [r7, #50]	; 0x32
 8008a7a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8008a7e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8008a82:	429a      	cmp	r2, r3
 8008a84:	ddbb      	ble.n	80089fe <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8008a86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a8a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008a8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008a92:	1a8a      	subs	r2, r1, r2
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8008a9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a9e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008aa2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008aa6:	1a8a      	subs	r2, r1, r2
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8008aae:	e03d      	b.n	8008b2c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8008ab0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	887b      	ldrh	r3, [r7, #2]
 8008abe:	4413      	add	r3, r2
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8008ac4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8008ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ade:	4413      	add	r3, r2
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8008ae2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae8:	4413      	add	r3, r2
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8008aec:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8008af0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8008af4:	429a      	cmp	r2, r3
 8008af6:	dd05      	ble.n	8008b04 <Displ_fillTriangle+0x27e>
 8008af8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008afa:	81fb      	strh	r3, [r7, #14]
 8008afc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008afe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008b00:	89fb      	ldrh	r3, [r7, #14]
 8008b02:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8008b04:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8008b08:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8008b0c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008b10:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8008b14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4623      	mov	r3, r4
 8008b1c:	f7ff fd05 	bl	800852a <Displ_Line>
    for(; y<=y2; y++) {
 8008b20:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3301      	adds	r3, #1
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	867b      	strh	r3, [r7, #50]	; 0x32
 8008b2c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8008b30:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	ddbb      	ble.n	8008ab0 <Displ_fillTriangle+0x22a>
    }
}
 8008b38:	373c      	adds	r7, #60	; 0x3c
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd90      	pop	{r4, r7, pc}
	...

08008b40 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8008b40:	b082      	sub	sp, #8
 8008b42:	b590      	push	{r4, r7, lr}
 8008b44:	b08f      	sub	sp, #60	; 0x3c
 8008b46:	af02      	add	r7, sp, #8
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	80fb      	strh	r3, [r7, #6]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	80bb      	strh	r3, [r7, #4]
 8008b52:	4613      	mov	r3, r2
 8008b54:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8008b56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b5a:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8008b5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d102      	bne.n	8008b6a <Displ_WChar+0x2a>
		wsize<<= 1;
 8008b64:	7efb      	ldrb	r3, [r7, #27]
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8008b6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b72:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
 8008b7a:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8008b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	3b20      	subs	r3, #32
 8008b82:	4619      	mov	r1, r3
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8008b8e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d005      	beq.n	8008ba2 <Displ_WChar+0x62>
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d107      	bne.n	8008baa <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8008b9a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b9e:	61fb      	str	r3, [r7, #28]
			break;
 8008ba0:	e005      	b.n	8008bae <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba6:	61fb      	str	r3, [r7, #28]
			break;
 8008ba8:	e001      	b.n	8008bae <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8008baa:	2380      	movs	r3, #128	; 0x80
 8008bac:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8008bae:	4b68      	ldr	r3, [pc, #416]	; (8008d50 <Displ_WChar+0x210>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8008bb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	b21a      	sxth	r2, r3
 8008bbc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	b21b      	sxth	r3, r3
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b21b      	sxth	r3, r3
 8008bca:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8008bcc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	b21a      	sxth	r2, r3
 8008bd4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	b21b      	sxth	r3, r3
 8008bde:	4313      	orrs	r3, r2
 8008be0:	b21b      	sxth	r3, r3
 8008be2:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8008be4:	2300      	movs	r3, #0
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be8:	e06f      	b.n	8008cca <Displ_WChar+0x18a>
		b=0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8008bee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d015      	beq.n	8008c22 <Displ_WChar+0xe2>
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d120      	bne.n	8008c3c <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	4413      	add	r3, r2
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	041a      	lsls	r2, r3, #16
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	3301      	adds	r3, #1
 8008c08:	6939      	ldr	r1, [r7, #16]
 8008c0a:	440b      	add	r3, r1
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	4313      	orrs	r3, r2
 8008c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c14:	3202      	adds	r2, #2
 8008c16:	6939      	ldr	r1, [r7, #16]
 8008c18:	440a      	add	r2, r1
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8008c20:	e011      	b.n	8008c46 <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	4413      	add	r3, r2
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2e:	3201      	adds	r2, #1
 8008c30:	6939      	ldr	r1, [r7, #16]
 8008c32:	440a      	add	r2, r1
 8008c34:	7812      	ldrb	r2, [r2, #0]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8008c3a:	e004      	b.n	8008c46 <Displ_WChar+0x106>
			default:
				b=pos[i];
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	4413      	add	r3, r2
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8008c46:	2300      	movs	r3, #0
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4a:	e032      	b.n	8008cb2 <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8008c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	409a      	lsls	r2, r3
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4013      	ands	r3, r2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d014      	beq.n	8008c84 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	623a      	str	r2, [r7, #32]
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	897a      	ldrh	r2, [r7, #10]
 8008c68:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8008c6a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d11c      	bne.n	8008cac <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	623a      	str	r2, [r7, #32]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	897a      	ldrh	r2, [r7, #10]
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	e013      	b.n	8008cac <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	623a      	str	r2, [r7, #32]
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	893a      	ldrh	r2, [r7, #8]
 8008c92:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8008c94:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d107      	bne.n	8008cac <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	623a      	str	r2, [r7, #32]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	893a      	ldrh	r2, [r7, #8]
 8008caa:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	3301      	adds	r3, #1
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d3c6      	bcc.n	8008c4c <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8008cbe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	4413      	add	r3, r2
 8008cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d38b      	bcc.n	8008bea <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8008cd8:	7efb      	ldrb	r3, [r7, #27]
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	88fb      	ldrh	r3, [r7, #6]
 8008cde:	4413      	add	r3, r2
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29c      	uxth	r4, r3
 8008ce6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8008cea:	88bb      	ldrh	r3, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	88b9      	ldrh	r1, [r7, #4]
 8008cf6:	88f8      	ldrh	r0, [r7, #6]
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	f7fe ff8d 	bl	8007c18 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d04:	d90b      	bls.n	8008d1e <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8008d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	f240 33ad 	movw	r3, #941	; 0x3ad
 8008d14:	4a0f      	ldr	r2, [pc, #60]	; (8008d54 <Displ_WChar+0x214>)
 8008d16:	4910      	ldr	r1, [pc, #64]	; (8008d58 <Displ_WChar+0x218>)
 8008d18:	4810      	ldr	r0, [pc, #64]	; (8008d5c <Displ_WChar+0x21c>)
 8008d1a:	f7fd ffc1 	bl	8006ca0 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <Displ_WChar+0x210>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	6a39      	ldr	r1, [r7, #32]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe ff1f 	bl	8007b6a <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <Displ_WChar+0x210>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a0b      	ldr	r2, [pc, #44]	; (8008d60 <Displ_WChar+0x220>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d101      	bne.n	8008d3a <Displ_WChar+0x1fa>
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <Displ_WChar+0x224>)
 8008d38:	e000      	b.n	8008d3c <Displ_WChar+0x1fc>
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <Displ_WChar+0x220>)
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <Displ_WChar+0x210>)
 8008d3e:	6013      	str	r3, [r2, #0]

}
 8008d40:	bf00      	nop
 8008d42:	3734      	adds	r7, #52	; 0x34
 8008d44:	46bd      	mov	sp, r7
 8008d46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008d4a:	b002      	add	sp, #8
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20000068 	.word	0x20000068
 8008d54:	0801910c 	.word	0x0801910c
 8008d58:	0801403c 	.word	0x0801403c
 8008d5c:	0801405c 	.word	0x0801405c
 8008d60:	20008f18 	.word	0x20008f18
 8008d64:	20009718 	.word	0x20009718

08008d68 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	4623      	mov	r3, r4
 8008d78:	80fb      	strh	r3, [r7, #6]
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	80bb      	strh	r3, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	807b      	strh	r3, [r7, #2]
 8008d82:	4613      	mov	r3, r2
 8008d84:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8008d86:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008d8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	bfa8      	it	ge
 8008d92:	4613      	movge	r3, r2
 8008d94:	b21b      	sxth	r3, r3
 8008d96:	0fda      	lsrs	r2, r3, #31
 8008d98:	4413      	add	r3, r2
 8008d9a:	105b      	asrs	r3, r3, #1
 8008d9c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8008d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	dd01      	ble.n	8008dae <Displ_drawRoundRect+0x46>
 8008daa:	89fb      	ldrh	r3, [r7, #14]
 8008dac:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	8c3b      	ldrh	r3, [r7, #32]
 8008db2:	4413      	add	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	b218      	sxth	r0, r3
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	8c3b      	ldrh	r3, [r7, #32]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	b21a      	sxth	r2, r3
 8008dcc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008dd0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	4623      	mov	r3, r4
 8008dda:	f7ff fba6 	bl	800852a <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	8c3b      	ldrh	r3, [r7, #32]
 8008de2:	4413      	add	r3, r2
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	b218      	sxth	r0, r3
 8008de8:	88ba      	ldrh	r2, [r7, #4]
 8008dea:	883b      	ldrh	r3, [r7, #0]
 8008dec:	4413      	add	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	b219      	sxth	r1, r3
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	887b      	ldrh	r3, [r7, #2]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	8c3b      	ldrh	r3, [r7, #32]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	b21c      	sxth	r4, r3
 8008e0a:	88ba      	ldrh	r2, [r7, #4]
 8008e0c:	883b      	ldrh	r3, [r7, #0]
 8008e0e:	4413      	add	r3, r2
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	b21a      	sxth	r2, r3
 8008e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	4622      	mov	r2, r4
 8008e20:	f7ff fb83 	bl	800852a <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8008e24:	88ba      	ldrh	r2, [r7, #4]
 8008e26:	8c3b      	ldrh	r3, [r7, #32]
 8008e28:	4413      	add	r3, r2
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	b219      	sxth	r1, r3
 8008e2e:	88ba      	ldrh	r2, [r7, #4]
 8008e30:	883b      	ldrh	r3, [r7, #0]
 8008e32:	4413      	add	r3, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	8c3b      	ldrh	r3, [r7, #32]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	b21c      	sxth	r4, r3
 8008e42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	4623      	mov	r3, r4
 8008e50:	f7ff fb6b 	bl	800852a <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8008e54:	88fa      	ldrh	r2, [r7, #6]
 8008e56:	887b      	ldrh	r3, [r7, #2]
 8008e58:	4413      	add	r3, r2
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	b218      	sxth	r0, r3
 8008e62:	88ba      	ldrh	r2, [r7, #4]
 8008e64:	8c3b      	ldrh	r3, [r7, #32]
 8008e66:	4413      	add	r3, r2
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	b219      	sxth	r1, r3
 8008e6c:	88fa      	ldrh	r2, [r7, #6]
 8008e6e:	887b      	ldrh	r3, [r7, #2]
 8008e70:	4413      	add	r3, r2
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	b21c      	sxth	r4, r3
 8008e7a:	88ba      	ldrh	r2, [r7, #4]
 8008e7c:	883b      	ldrh	r3, [r7, #0]
 8008e7e:	4413      	add	r3, r2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	8c3b      	ldrh	r3, [r7, #32]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	b21a      	sxth	r2, r3
 8008e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4613      	mov	r3, r2
 8008e94:	4622      	mov	r2, r4
 8008e96:	f7ff fb48 	bl	800852a <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	8c3b      	ldrh	r3, [r7, #32]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	b218      	sxth	r0, r3
 8008ea4:	88ba      	ldrh	r2, [r7, #4]
 8008ea6:	8c3b      	ldrh	r3, [r7, #32]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	b219      	sxth	r1, r3
 8008eae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f7ff f96a 	bl	8008190 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8008ebc:	88fa      	ldrh	r2, [r7, #6]
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	8c3b      	ldrh	r3, [r7, #32]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	b218      	sxth	r0, r3
 8008ed0:	88ba      	ldrh	r2, [r7, #4]
 8008ed2:	8c3b      	ldrh	r3, [r7, #32]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	b219      	sxth	r1, r3
 8008eda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	f7ff f954 	bl	8008190 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8008ee8:	88fa      	ldrh	r2, [r7, #6]
 8008eea:	887b      	ldrh	r3, [r7, #2]
 8008eec:	4413      	add	r3, r2
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	8c3b      	ldrh	r3, [r7, #32]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	b218      	sxth	r0, r3
 8008efc:	88ba      	ldrh	r2, [r7, #4]
 8008efe:	883b      	ldrh	r3, [r7, #0]
 8008f00:	4413      	add	r3, r2
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	8c3b      	ldrh	r3, [r7, #32]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	b219      	sxth	r1, r3
 8008f10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	2304      	movs	r3, #4
 8008f1a:	f7ff f939 	bl	8008190 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8008f1e:	88fa      	ldrh	r2, [r7, #6]
 8008f20:	8c3b      	ldrh	r3, [r7, #32]
 8008f22:	4413      	add	r3, r2
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	b218      	sxth	r0, r3
 8008f28:	88ba      	ldrh	r2, [r7, #4]
 8008f2a:	883b      	ldrh	r3, [r7, #0]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	8c3b      	ldrh	r3, [r7, #32]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	b219      	sxth	r1, r3
 8008f3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	2308      	movs	r3, #8
 8008f46:	f7ff f923 	bl	8008190 <drawCircleHelper>
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd90      	pop	{r4, r7, pc}

08008f52 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8008f52:	b590      	push	{r4, r7, lr}
 8008f54:	b087      	sub	sp, #28
 8008f56:	af02      	add	r7, sp, #8
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	461a      	mov	r2, r3
 8008f60:	4623      	mov	r3, r4
 8008f62:	80fb      	strh	r3, [r7, #6]
 8008f64:	4603      	mov	r3, r0
 8008f66:	80bb      	strh	r3, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8008f70:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008f74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	bfa8      	it	ge
 8008f7c:	4613      	movge	r3, r2
 8008f7e:	b21b      	sxth	r3, r3
 8008f80:	0fda      	lsrs	r2, r3, #31
 8008f82:	4413      	add	r3, r2
 8008f84:	105b      	asrs	r3, r3, #1
 8008f86:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8008f88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	dd01      	ble.n	8008f98 <Displ_fillRoundRect+0x46>
 8008f94:	89fb      	ldrh	r3, [r7, #14]
 8008f96:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8008f98:	88fa      	ldrh	r2, [r7, #6]
 8008f9a:	8c3b      	ldrh	r3, [r7, #32]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	b298      	uxth	r0, r3
 8008fa0:	88b9      	ldrh	r1, [r7, #4]
 8008fa2:	887a      	ldrh	r2, [r7, #2]
 8008fa4:	8c3b      	ldrh	r3, [r7, #32]
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	883c      	ldrh	r4, [r7, #0]
 8008fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	f7fe ff1b 	bl	8007df0 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	887b      	ldrh	r3, [r7, #2]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	8c3b      	ldrh	r3, [r7, #32]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	b218      	sxth	r0, r3
 8008fce:	88ba      	ldrh	r2, [r7, #4]
 8008fd0:	8c3b      	ldrh	r3, [r7, #32]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	b219      	sxth	r1, r3
 8008fd8:	883a      	ldrh	r2, [r7, #0]
 8008fda:	8c3b      	ldrh	r3, [r7, #32]
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	b21b      	sxth	r3, r3
 8008fea:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8008fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ff0:	9201      	str	r2, [sp, #4]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	f7ff f98e 	bl	8008318 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	8c3b      	ldrh	r3, [r7, #32]
 8009000:	4413      	add	r3, r2
 8009002:	b29b      	uxth	r3, r3
 8009004:	b218      	sxth	r0, r3
 8009006:	88ba      	ldrh	r2, [r7, #4]
 8009008:	8c3b      	ldrh	r3, [r7, #32]
 800900a:	4413      	add	r3, r2
 800900c:	b29b      	uxth	r3, r3
 800900e:	b219      	sxth	r1, r3
 8009010:	883a      	ldrh	r2, [r7, #0]
 8009012:	8c3b      	ldrh	r3, [r7, #32]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	b29b      	uxth	r3, r3
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29b      	uxth	r3, r3
 8009020:	b21b      	sxth	r3, r3
 8009022:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	2302      	movs	r3, #2
 800902e:	4622      	mov	r2, r4
 8009030:	f7ff f972 	bl	8008318 <fillCircleHelper>
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bd90      	pop	{r4, r7, pc}

0800903c <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800903c:	b082      	sub	sp, #8
 800903e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009040:	b08b      	sub	sp, #44	; 0x2c
 8009042:	af06      	add	r7, sp, #24
 8009044:	603a      	str	r2, [r7, #0]
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009048:	4603      	mov	r3, r0
 800904a:	80fb      	strh	r3, [r7, #6]
 800904c:	460b      	mov	r3, r1
 800904e:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8009050:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009052:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8009054:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009058:	2b01      	cmp	r3, #1
 800905a:	d922      	bls.n	80090a2 <Displ_WString+0x66>
		delta<<=1;
 800905c:	89fb      	ldrh	r3, [r7, #14]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8009062:	e01e      	b.n	80090a2 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	88bd      	ldrh	r5, [r7, #4]
 800906a:	88fc      	ldrh	r4, [r7, #6]
 800906c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	466e      	mov	r6, sp
 800907e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009082:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009086:	e886 0003 	stmia.w	r6, {r0, r1}
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	4629      	mov	r1, r5
 800908e:	4620      	mov	r0, r4
 8009090:	f7ff fd56 	bl	8008b40 <Displ_WChar>
        x += delta;
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	89fb      	ldrh	r3, [r7, #14]
 8009098:	4413      	add	r3, r2
 800909a:	80fb      	strh	r3, [r7, #6]
        str++;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1dc      	bne.n	8009064 <Displ_WString+0x28>
    }
}
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80090b6:	b002      	add	sp, #8
 80090b8:	4770      	bx	lr
	...

080090bc <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b51      	cmp	r3, #81	; 0x51
 80090ca:	d00a      	beq.n	80090e2 <Displ_BackLight+0x26>
 80090cc:	2b51      	cmp	r3, #81	; 0x51
 80090ce:	dc16      	bgt.n	80090fe <Displ_BackLight+0x42>
 80090d0:	2b46      	cmp	r3, #70	; 0x46
 80090d2:	d008      	beq.n	80090e6 <Displ_BackLight+0x2a>
 80090d4:	2b46      	cmp	r3, #70	; 0x46
 80090d6:	dc12      	bgt.n	80090fe <Displ_BackLight+0x42>
 80090d8:	2b30      	cmp	r3, #48	; 0x30
 80090da:	d00a      	beq.n	80090f2 <Displ_BackLight+0x36>
 80090dc:	2b31      	cmp	r3, #49	; 0x31
 80090de:	d002      	beq.n	80090e6 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80090e0:	e00d      	b.n	80090fe <Displ_BackLight+0x42>
		__NOP();
 80090e2:	bf00      	nop
		break;
 80090e4:	e00c      	b.n	8009100 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 80090e6:	2201      	movs	r2, #1
 80090e8:	2140      	movs	r1, #64	; 0x40
 80090ea:	480a      	ldr	r0, [pc, #40]	; (8009114 <Displ_BackLight+0x58>)
 80090ec:	f002 f860 	bl	800b1b0 <HAL_GPIO_WritePin>
		break;
 80090f0:	e006      	b.n	8009100 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2140      	movs	r1, #64	; 0x40
 80090f6:	4807      	ldr	r0, [pc, #28]	; (8009114 <Displ_BackLight+0x58>)
 80090f8:	f002 f85a 	bl	800b1b0 <HAL_GPIO_WritePin>
		break;
 80090fc:	e000      	b.n	8009100 <Displ_BackLight+0x44>
		break;
 80090fe:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8009100:	2140      	movs	r1, #64	; 0x40
 8009102:	4804      	ldr	r0, [pc, #16]	; (8009114 <Displ_BackLight+0x58>)
 8009104:	f002 f83c 	bl	800b180 <HAL_GPIO_ReadPin>
 8009108:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	40020000 	.word	0x40020000

08009118 <testLines>:




void testLines(uint16_t color)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b08b      	sub	sp, #44	; 0x2c
 800911c:	af02      	add	r7, sp, #8
 800911e:	4603      	mov	r3, r0
 8009120:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8009122:	4b7c      	ldr	r3, [pc, #496]	; (8009314 <testLines+0x1fc>)
 8009124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009128:	617b      	str	r3, [r7, #20]
                  h = _height;
 800912a:	4b7b      	ldr	r3, [pc, #492]	; (8009318 <testLines+0x200>)
 800912c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009130:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8009132:	2000      	movs	r0, #0
 8009134:	f7ff f810 	bl	8008158 <Displ_CLS>

    x1 = y1 = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	3b01      	subs	r3, #1
 8009144:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8009146:	2300      	movs	r3, #0
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	e00f      	b.n	800916c <testLines+0x54>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	b218      	sxth	r0, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	b219      	sxth	r1, r3
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	b21a      	sxth	r2, r3
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	b21c      	sxth	r4, r3
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4623      	mov	r3, r4
 8009162:	f7ff f9e2 	bl	800852a <Displ_Line>
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	3306      	adds	r3, #6
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	429a      	cmp	r2, r3
 8009172:	dbeb      	blt.n	800914c <testLines+0x34>
    x2    = w - 1;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	3b01      	subs	r3, #1
 8009178:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800917a:	2300      	movs	r3, #0
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	e00f      	b.n	80091a0 <testLines+0x88>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	b218      	sxth	r0, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	b219      	sxth	r1, r3
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	b21a      	sxth	r2, r3
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	b21c      	sxth	r4, r3
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	4623      	mov	r3, r4
 8009196:	f7ff f9c8 	bl	800852a <Displ_Line>
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	3306      	adds	r3, #6
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	dbeb      	blt.n	8009180 <testLines+0x68>

    Displ_CLS(BLACK);
 80091a8:	2000      	movs	r0, #0
 80091aa:	f7fe ffd5 	bl	8008158 <Displ_CLS>

    x1    = w - 1;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80091be:	2300      	movs	r3, #0
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	e00f      	b.n	80091e4 <testLines+0xcc>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	b218      	sxth	r0, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	b219      	sxth	r1, r3
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	b21a      	sxth	r2, r3
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	b21c      	sxth	r4, r3
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4623      	mov	r3, r4
 80091da:	f7ff f9a6 	bl	800852a <Displ_Line>
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	3306      	adds	r3, #6
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	dbeb      	blt.n	80091c4 <testLines+0xac>
    x2    = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80091f0:	2300      	movs	r3, #0
 80091f2:	61bb      	str	r3, [r7, #24]
 80091f4:	e00f      	b.n	8009216 <testLines+0xfe>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	b218      	sxth	r0, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	b219      	sxth	r1, r3
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	b21a      	sxth	r2, r3
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	b21c      	sxth	r4, r3
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	4623      	mov	r3, r4
 800920c:	f7ff f98d 	bl	800852a <Displ_Line>
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	3306      	adds	r3, #6
 8009214:	61bb      	str	r3, [r7, #24]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	429a      	cmp	r2, r3
 800921c:	dbeb      	blt.n	80091f6 <testLines+0xde>

    Displ_CLS(BLACK);
 800921e:	2000      	movs	r0, #0
 8009220:	f7fe ff9a 	bl	8008158 <Displ_CLS>

    x1    = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	3b01      	subs	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800922e:	2300      	movs	r3, #0
 8009230:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	e00f      	b.n	8009258 <testLines+0x140>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	b218      	sxth	r0, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	b219      	sxth	r1, r3
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	b21a      	sxth	r2, r3
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	b21c      	sxth	r4, r3
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	4623      	mov	r3, r4
 800924e:	f7ff f96c 	bl	800852a <Displ_Line>
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	3306      	adds	r3, #6
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	429a      	cmp	r2, r3
 800925e:	dbeb      	blt.n	8009238 <testLines+0x120>
    x2    = w - 1;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3b01      	subs	r3, #1
 8009264:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8009266:	2300      	movs	r3, #0
 8009268:	61bb      	str	r3, [r7, #24]
 800926a:	e00f      	b.n	800928c <testLines+0x174>
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	b218      	sxth	r0, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	b219      	sxth	r1, r3
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	b21a      	sxth	r2, r3
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	b21c      	sxth	r4, r3
 800927c:	88fb      	ldrh	r3, [r7, #6]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4623      	mov	r3, r4
 8009282:	f7ff f952 	bl	800852a <Displ_Line>
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	3306      	adds	r3, #6
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	429a      	cmp	r2, r3
 8009292:	dbeb      	blt.n	800926c <testLines+0x154>

    Displ_CLS(BLACK);
 8009294:	2000      	movs	r0, #0
 8009296:	f7fe ff5f 	bl	8008158 <Displ_CLS>

    x1    = w - 1;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	3b01      	subs	r3, #1
 800929e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
 80092ae:	e00f      	b.n	80092d0 <testLines+0x1b8>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	b218      	sxth	r0, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	b219      	sxth	r1, r3
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	b21a      	sxth	r2, r3
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	b21c      	sxth	r4, r3
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	4623      	mov	r3, r4
 80092c6:	f7ff f930 	bl	800852a <Displ_Line>
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	3306      	adds	r3, #6
 80092ce:	61fb      	str	r3, [r7, #28]
 80092d0:	69fa      	ldr	r2, [r7, #28]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	dbeb      	blt.n	80092b0 <testLines+0x198>
    x2    = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80092dc:	2300      	movs	r3, #0
 80092de:	61bb      	str	r3, [r7, #24]
 80092e0:	e00f      	b.n	8009302 <testLines+0x1ea>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	b218      	sxth	r0, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	b219      	sxth	r1, r3
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	b21a      	sxth	r2, r3
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	b21c      	sxth	r4, r3
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4623      	mov	r3, r4
 80092f8:	f7ff f917 	bl	800852a <Displ_Line>
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	3306      	adds	r3, #6
 8009300:	61bb      	str	r3, [r7, #24]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	dbeb      	blt.n	80092e2 <testLines+0x1ca>

}
 800930a:	bf00      	nop
 800930c:	bf00      	nop
 800930e:	3724      	adds	r7, #36	; 0x24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd90      	pop	{r4, r7, pc}
 8009314:	20008f14 	.word	0x20008f14
 8009318:	20008f16 	.word	0x20008f16

0800931c <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af02      	add	r7, sp, #8
 8009322:	4603      	mov	r3, r0
 8009324:	460a      	mov	r2, r1
 8009326:	80fb      	strh	r3, [r7, #6]
 8009328:	4613      	mov	r3, r2
 800932a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 800932c:	4b20      	ldr	r3, [pc, #128]	; (80093b0 <testFastLines+0x94>)
 800932e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	4b1f      	ldr	r3, [pc, #124]	; (80093b4 <testFastLines+0x98>)
 8009336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800933a:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800933c:	2000      	movs	r0, #0
 800933e:	f7fe ff0b 	bl	8008158 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e011      	b.n	800936c <testFastLines+0x50>
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	b219      	sxth	r1, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29b      	uxth	r3, r3
 8009354:	b21a      	sxth	r2, r3
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	b218      	sxth	r0, r3
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	4603      	mov	r3, r0
 8009360:	2000      	movs	r0, #0
 8009362:	f7ff f8e2 	bl	800852a <Displ_Line>
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	3305      	adds	r3, #5
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	429a      	cmp	r2, r3
 8009372:	dbe9      	blt.n	8009348 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8009374:	2300      	movs	r3, #0
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e011      	b.n	800939e <testFastLines+0x82>
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	b218      	sxth	r0, r3
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	b21a      	sxth	r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	b29b      	uxth	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	b29b      	uxth	r3, r3
 800938a:	b219      	sxth	r1, r3
 800938c:	88bb      	ldrh	r3, [r7, #4]
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	460b      	mov	r3, r1
 8009392:	2100      	movs	r1, #0
 8009394:	f7ff f8c9 	bl	800852a <Displ_Line>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	3305      	adds	r3, #5
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	dbe9      	blt.n	800937a <testFastLines+0x5e>
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20008f14 	.word	0x20008f14
 80093b4:	20008f16 	.word	0x20008f16

080093b8 <testRects>:




void testRects(uint16_t color)
{
 80093b8:	b590      	push	{r4, r7, lr}
 80093ba:	b08b      	sub	sp, #44	; 0x2c
 80093bc:	af02      	add	r7, sp, #8
 80093be:	4603      	mov	r3, r0
 80093c0:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 80093c2:	4b25      	ldr	r3, [pc, #148]	; (8009458 <testRects+0xa0>)
 80093c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093c8:	0fda      	lsrs	r2, r3, #31
 80093ca:	4413      	add	r3, r2
 80093cc:	105b      	asrs	r3, r3, #1
 80093ce:	b21b      	sxth	r3, r3
 80093d0:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 80093d2:	4b22      	ldr	r3, [pc, #136]	; (800945c <testRects+0xa4>)
 80093d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093d8:	0fda      	lsrs	r2, r3, #31
 80093da:	4413      	add	r3, r2
 80093dc:	105b      	asrs	r3, r3, #1
 80093de:	b21b      	sxth	r3, r3
 80093e0:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80093e2:	2000      	movs	r0, #0
 80093e4:	f7fe feb8 	bl	8008158 <Displ_CLS>
	n     = min(_width, _height);
 80093e8:	4b1c      	ldr	r3, [pc, #112]	; (800945c <testRects+0xa4>)
 80093ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80093ee:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <testRects+0xa0>)
 80093f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfa8      	it	ge
 80093f8:	4613      	movge	r3, r2
 80093fa:	b21b      	sxth	r3, r3
 80093fc:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80093fe:	2302      	movs	r3, #2
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	e020      	b.n	8009446 <testRects+0x8e>
		i2 = i / 2;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	0fda      	lsrs	r2, r3, #31
 8009408:	4413      	add	r3, r2
 800940a:	105b      	asrs	r3, r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	b29b      	uxth	r3, r3
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	b29b      	uxth	r3, r3
 800941a:	b218      	sxth	r0, r3
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	b29b      	uxth	r3, r3
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	b29b      	uxth	r3, r3
 8009428:	b219      	sxth	r1, r3
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	b21a      	sxth	r2, r3
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	b21c      	sxth	r4, r3
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	2301      	movs	r3, #1
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	4623      	mov	r3, r4
 800943c:	f7ff f9a6 	bl	800878c <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	3306      	adds	r3, #6
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	429a      	cmp	r2, r3
 800944c:	dbda      	blt.n	8009404 <testRects+0x4c>
	}
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	3724      	adds	r7, #36	; 0x24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd90      	pop	{r4, r7, pc}
 8009458:	20008f14 	.word	0x20008f14
 800945c:	20008f16 	.word	0x20008f16

08009460 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b08b      	sub	sp, #44	; 0x2c
 8009464:	af02      	add	r7, sp, #8
 8009466:	4603      	mov	r3, r0
 8009468:	460a      	mov	r2, r1
 800946a:	80fb      	strh	r3, [r7, #6]
 800946c:	4613      	mov	r3, r2
 800946e:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8009470:	4b30      	ldr	r3, [pc, #192]	; (8009534 <testFilledRects+0xd4>)
 8009472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009476:	0fda      	lsrs	r2, r3, #31
 8009478:	4413      	add	r3, r2
 800947a:	105b      	asrs	r3, r3, #1
 800947c:	b21b      	sxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8009482:	4b2d      	ldr	r3, [pc, #180]	; (8009538 <testFilledRects+0xd8>)
 8009484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009488:	0fda      	lsrs	r2, r3, #31
 800948a:	4413      	add	r3, r2
 800948c:	105b      	asrs	r3, r3, #1
 800948e:	b21b      	sxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8009494:	2000      	movs	r0, #0
 8009496:	f7fe fe5f 	bl	8008158 <Displ_CLS>
	n = min(_width, _height);
 800949a:	4b27      	ldr	r3, [pc, #156]	; (8009538 <testFilledRects+0xd8>)
 800949c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80094a0:	4b24      	ldr	r3, [pc, #144]	; (8009534 <testFilledRects+0xd4>)
 80094a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bfa8      	it	ge
 80094aa:	4613      	movge	r3, r2
 80094ac:	b21b      	sxth	r3, r3
 80094ae:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	61fb      	str	r3, [r7, #28]
 80094b4:	e035      	b.n	8009522 <testFilledRects+0xc2>
		i2    = i / 2;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	0fda      	lsrs	r2, r3, #31
 80094ba:	4413      	add	r3, r2
 80094bc:	105b      	asrs	r3, r3, #1
 80094be:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	b298      	uxth	r0, r3
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	b299      	uxth	r1, r3
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	b29a      	uxth	r2, r3
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	b29c      	uxth	r4, r3
 80094e0:	88fb      	ldrh	r3, [r7, #6]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4623      	mov	r3, r4
 80094e6:	f7fe fc83 	bl	8007df0 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	b218      	sxth	r0, r3
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	b29b      	uxth	r3, r3
 8009504:	b219      	sxth	r1, r3
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	b21a      	sxth	r2, r3
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	b21c      	sxth	r4, r3
 800950e:	88bb      	ldrh	r3, [r7, #4]
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	2301      	movs	r3, #1
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4623      	mov	r3, r4
 8009518:	f7ff f938 	bl	800878c <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	3b06      	subs	r3, #6
 8009520:	61fb      	str	r3, [r7, #28]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dcc6      	bgt.n	80094b6 <testFilledRects+0x56>
	}
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	3724      	adds	r7, #36	; 0x24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd90      	pop	{r4, r7, pc}
 8009532:	bf00      	nop
 8009534:	20008f14 	.word	0x20008f14
 8009538:	20008f16 	.word	0x20008f16

0800953c <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	460a      	mov	r2, r1
 8009546:	71fb      	strb	r3, [r7, #7]
 8009548:	4613      	mov	r3, r2
 800954a:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 800954c:	4b18      	ldr	r3, [pc, #96]	; (80095b0 <testFilledCircles+0x74>)
 800954e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <testFilledCircles+0x78>)
 8009556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800955a:	613b      	str	r3, [r7, #16]
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8009562:	2000      	movs	r0, #0
 8009564:	f7fe fdf8 	bl	8008158 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	e017      	b.n	800959e <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	e00c      	b.n	800958e <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	b218      	sxth	r0, r3
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	b219      	sxth	r1, r3
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	b21a      	sxth	r2, r3
 8009580:	88bb      	ldrh	r3, [r7, #4]
 8009582:	f7fe ff9f 	bl	80084c4 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	429a      	cmp	r2, r3
 8009594:	dbee      	blt.n	8009574 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	dbe3      	blt.n	800956e <testFilledCircles+0x32>
        }
    }
}
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	3720      	adds	r7, #32
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20008f14 	.word	0x20008f14
 80095b4:	20008f16 	.word	0x20008f16

080095b8 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	460a      	mov	r2, r1
 80095c2:	71fb      	strb	r3, [r7, #7]
 80095c4:	4613      	mov	r3, r2
 80095c6:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80095ce:	4b19      	ldr	r3, [pc, #100]	; (8009634 <testCircles+0x7c>)
 80095d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095d4:	461a      	mov	r2, r3
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	4413      	add	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80095dc:	4b16      	ldr	r3, [pc, #88]	; (8009638 <testCircles+0x80>)
 80095de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095e2:	461a      	mov	r2, r3
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	4413      	add	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80095ea:	2300      	movs	r3, #0
 80095ec:	61fb      	str	r3, [r7, #28]
 80095ee:	e017      	b.n	8009620 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80095f0:	2300      	movs	r3, #0
 80095f2:	61bb      	str	r3, [r7, #24]
 80095f4:	e00c      	b.n	8009610 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	b218      	sxth	r0, r3
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	b219      	sxth	r1, r3
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	b21a      	sxth	r2, r3
 8009602:	88bb      	ldrh	r3, [r7, #4]
 8009604:	f7fe fcd4 	bl	8007fb0 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	4413      	add	r3, r2
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	dbee      	blt.n	80095f6 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	4413      	add	r3, r2
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	69fa      	ldr	r2, [r7, #28]
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	429a      	cmp	r2, r3
 8009626:	dbe3      	blt.n	80095f0 <testCircles+0x38>
        }
    }
}
 8009628:	bf00      	nop
 800962a:	bf00      	nop
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20008f14 	.word	0x20008f14
 8009638:	20008f16 	.word	0x20008f16

0800963c <testTriangles>:




void testTriangles()
{
 800963c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800963e:	b089      	sub	sp, #36	; 0x24
 8009640:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8009642:	4b2e      	ldr	r3, [pc, #184]	; (80096fc <testTriangles+0xc0>)
 8009644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009648:	0fda      	lsrs	r2, r3, #31
 800964a:	4413      	add	r3, r2
 800964c:	105b      	asrs	r3, r3, #1
 800964e:	b21b      	sxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8009654:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <testTriangles+0xc4>)
 8009656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800965a:	0fda      	lsrs	r2, r3, #31
 800965c:	4413      	add	r3, r2
 800965e:	105b      	asrs	r3, r3, #1
 8009660:	b21b      	sxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8009666:	2000      	movs	r0, #0
 8009668:	f7fe fd76 	bl	8008158 <Displ_CLS>
    n     = min(cx, cy);
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	4293      	cmp	r3, r2
 8009672:	bfa8      	it	ge
 8009674:	4613      	movge	r3, r2
 8009676:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	e035      	b.n	80096ea <testTriangles+0xae>
    	Displ_drawTriangle(
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	b29b      	uxth	r3, r3
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800968e:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	b29b      	uxth	r3, r3
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800969c:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	4413      	add	r3, r2
 80096a8:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80096aa:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4413      	add	r3, r2
 80096b6:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80096b8:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	b291      	uxth	r1, r2
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	b292      	uxth	r2, r2
 80096c2:	440a      	add	r2, r1
 80096c4:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 80096c6:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80096c8:	68f9      	ldr	r1, [r7, #12]
 80096ca:	10c9      	asrs	r1, r1, #3
 80096cc:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 80096ce:	f001 011f 	and.w	r1, r1, #31
 80096d2:	b289      	uxth	r1, r1
 80096d4:	9102      	str	r1, [sp, #8]
 80096d6:	9201      	str	r2, [sp, #4]
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	4633      	mov	r3, r6
 80096dc:	462a      	mov	r2, r5
 80096de:	4621      	mov	r1, r4
 80096e0:	f7ff f897 	bl	8008812 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3305      	adds	r3, #5
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	dbc5      	blt.n	800967e <testTriangles+0x42>
    }
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fc:	20008f14 	.word	0x20008f14
 8009700:	20008f16 	.word	0x20008f16

08009704 <testFilledTriangles>:





void testFilledTriangles() {
 8009704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009706:	b089      	sub	sp, #36	; 0x24
 8009708:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 800970a:	4b53      	ldr	r3, [pc, #332]	; (8009858 <testFilledTriangles+0x154>)
 800970c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009710:	0fda      	lsrs	r2, r3, #31
 8009712:	4413      	add	r3, r2
 8009714:	105b      	asrs	r3, r3, #1
 8009716:	b21b      	sxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 800971c:	4b4f      	ldr	r3, [pc, #316]	; (800985c <testFilledTriangles+0x158>)
 800971e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009722:	0fda      	lsrs	r2, r3, #31
 8009724:	4413      	add	r3, r2
 8009726:	105b      	asrs	r3, r3, #1
 8009728:	b21b      	sxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800972e:	2000      	movs	r0, #0
 8009730:	f7fe fd12 	bl	8008158 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	4293      	cmp	r3, r2
 800973a:	bfa8      	it	ge
 800973c:	4613      	movge	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	e080      	b.n	8009844 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	b21c      	sxth	r4, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	b29b      	uxth	r3, r3
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	b29b      	uxth	r3, r3
 8009752:	b21d      	sxth	r5, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	b29b      	uxth	r3, r3
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	b29b      	uxth	r3, r3
 8009760:	b21e      	sxth	r6, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	b29b      	uxth	r3, r3
 800976a:	4413      	add	r3, r2
 800976c:	b29b      	uxth	r3, r3
 800976e:	fa0f fc83 	sxth.w	ip, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	b29b      	uxth	r3, r3
 800977a:	4413      	add	r3, r2
 800977c:	b29b      	uxth	r3, r3
 800977e:	b21b      	sxth	r3, r3
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	b291      	uxth	r1, r2
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	b292      	uxth	r2, r2
 8009788:	440a      	add	r2, r1
 800978a:	b292      	uxth	r2, r2
 800978c:	b212      	sxth	r2, r2
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	00c9      	lsls	r1, r1, #3
 8009792:	b209      	sxth	r1, r1
 8009794:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8009798:	b208      	sxth	r0, r1
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	10c9      	asrs	r1, r1, #3
 800979e:	b209      	sxth	r1, r1
 80097a0:	f001 011f 	and.w	r1, r1, #31
 80097a4:	b209      	sxth	r1, r1
 80097a6:	4301      	orrs	r1, r0
 80097a8:	b209      	sxth	r1, r1
 80097aa:	b289      	uxth	r1, r1
 80097ac:	9102      	str	r1, [sp, #8]
 80097ae:	9201      	str	r2, [sp, #4]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	4663      	mov	r3, ip
 80097b4:	4632      	mov	r2, r6
 80097b6:	4629      	mov	r1, r5
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff f864 	bl	8008886 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	b21c      	sxth	r4, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	b21d      	sxth	r5, r3
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	b29b      	uxth	r3, r3
 80097dc:	b21e      	sxth	r6, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	4413      	add	r3, r2
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	fa0f fc83 	sxth.w	ip, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	b21a      	sxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	b299      	uxth	r1, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	b29b      	uxth	r3, r3
 8009804:	440b      	add	r3, r1
 8009806:	b29b      	uxth	r3, r3
 8009808:	b219      	sxth	r1, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	b21b      	sxth	r3, r3
 8009810:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009814:	f023 0307 	bic.w	r3, r3, #7
 8009818:	b218      	sxth	r0, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	b21b      	sxth	r3, r3
 8009820:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8009824:	b21b      	sxth	r3, r3
 8009826:	4303      	orrs	r3, r0
 8009828:	b21b      	sxth	r3, r3
 800982a:	b29b      	uxth	r3, r3
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	9101      	str	r1, [sp, #4]
 8009830:	9200      	str	r2, [sp, #0]
 8009832:	4663      	mov	r3, ip
 8009834:	4632      	mov	r2, r6
 8009836:	4629      	mov	r1, r5
 8009838:	4620      	mov	r0, r4
 800983a:	f7fe ffea 	bl	8008812 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3b05      	subs	r3, #5
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b0a      	cmp	r3, #10
 8009848:	f73f af7b 	bgt.w	8009742 <testFilledTriangles+0x3e>
    }
}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009856:	bf00      	nop
 8009858:	20008f14 	.word	0x20008f14
 800985c:	20008f16 	.word	0x20008f16

08009860 <testRoundRects>:





void testRoundRects() {
 8009860:	b5b0      	push	{r4, r5, r7, lr}
 8009862:	b08a      	sub	sp, #40	; 0x28
 8009864:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8009866:	4b33      	ldr	r3, [pc, #204]	; (8009934 <testRoundRects+0xd4>)
 8009868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800986c:	0fda      	lsrs	r2, r3, #31
 800986e:	4413      	add	r3, r2
 8009870:	105b      	asrs	r3, r3, #1
 8009872:	b21b      	sxth	r3, r3
 8009874:	3b01      	subs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8009878:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <testRoundRects+0xd8>)
 800987a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800987e:	0fda      	lsrs	r2, r3, #31
 8009880:	4413      	add	r3, r2
 8009882:	105b      	asrs	r3, r3, #1
 8009884:	b21b      	sxth	r3, r3
 8009886:	3b01      	subs	r3, #1
 8009888:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 800988a:	2000      	movs	r0, #0
 800988c:	f7fe fc64 	bl	8008158 <Displ_CLS>
    w     = min(_width, _height);
 8009890:	4b29      	ldr	r3, [pc, #164]	; (8009938 <testRoundRects+0xd8>)
 8009892:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009896:	4b27      	ldr	r3, [pc, #156]	; (8009934 <testRoundRects+0xd4>)
 8009898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800989c:	4293      	cmp	r3, r2
 800989e:	bfa8      	it	ge
 80098a0:	4613      	movge	r3, r2
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	60fb      	str	r3, [r7, #12]
    red = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 80098aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80098b4:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80098b6:	2300      	movs	r3, #0
 80098b8:	61fb      	str	r3, [r7, #28]
 80098ba:	e031      	b.n	8009920 <testRoundRects+0xc0>
        i2 = i / 2;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	0fda      	lsrs	r2, r3, #31
 80098c0:	4413      	add	r3, r2
 80098c2:	105b      	asrs	r3, r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
        red += step;
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4413      	add	r3, r2
 80098cc:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	b29b      	uxth	r3, r3
 80098da:	b218      	sxth	r0, r3
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	b219      	sxth	r1, r3
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	b21c      	sxth	r4, r3
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	b21d      	sxth	r5, r3
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da00      	bge.n	80098fa <testRoundRects+0x9a>
 80098f8:	3307      	adds	r3, #7
 80098fa:	10db      	asrs	r3, r3, #3
 80098fc:	b21a      	sxth	r2, r3
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	b29b      	uxth	r3, r3
 8009904:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009908:	f023 0307 	bic.w	r3, r3, #7
 800990c:	b29b      	uxth	r3, r3
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	9200      	str	r2, [sp, #0]
 8009912:	462b      	mov	r3, r5
 8009914:	4622      	mov	r2, r4
 8009916:	f7ff fa27 	bl	8008d68 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	3306      	adds	r3, #6
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	69fa      	ldr	r2, [r7, #28]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	dbc9      	blt.n	80098bc <testRoundRects+0x5c>
    }
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	3720      	adds	r7, #32
 800992e:	46bd      	mov	sp, r7
 8009930:	bdb0      	pop	{r4, r5, r7, pc}
 8009932:	bf00      	nop
 8009934:	20008f14 	.word	0x20008f14
 8009938:	20008f16 	.word	0x20008f16

0800993c <testFilledRoundRects>:





void testFilledRoundRects() {
 800993c:	b5b0      	push	{r4, r5, r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8009942:	4b36      	ldr	r3, [pc, #216]	; (8009a1c <testFilledRoundRects+0xe0>)
 8009944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009948:	0fda      	lsrs	r2, r3, #31
 800994a:	4413      	add	r3, r2
 800994c:	105b      	asrs	r3, r3, #1
 800994e:	b21b      	sxth	r3, r3
 8009950:	3b01      	subs	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8009954:	4b32      	ldr	r3, [pc, #200]	; (8009a20 <testFilledRoundRects+0xe4>)
 8009956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800995a:	0fda      	lsrs	r2, r3, #31
 800995c:	4413      	add	r3, r2
 800995e:	105b      	asrs	r3, r3, #1
 8009960:	b21b      	sxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8009966:	2000      	movs	r0, #0
 8009968:	f7fe fbf6 	bl	8008158 <Displ_CLS>
    green = 256;
 800996c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009970:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8009972:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <testFilledRoundRects+0xe4>)
 8009974:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009978:	4b28      	ldr	r3, [pc, #160]	; (8009a1c <testFilledRoundRects+0xe0>)
 800997a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800997e:	4293      	cmp	r3, r2
 8009980:	bfa8      	it	ge
 8009982:	4613      	movge	r3, r2
 8009984:	b21b      	sxth	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800998c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009990:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8009992:	4b23      	ldr	r3, [pc, #140]	; (8009a20 <testFilledRoundRects+0xe4>)
 8009994:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009998:	4b20      	ldr	r3, [pc, #128]	; (8009a1c <testFilledRoundRects+0xe0>)
 800999a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999e:	4293      	cmp	r3, r2
 80099a0:	bfa8      	it	ge
 80099a2:	4613      	movge	r3, r2
 80099a4:	b21b      	sxth	r3, r3
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	e02f      	b.n	8009a0a <testFilledRoundRects+0xce>
        i2 = i / 2;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	0fda      	lsrs	r2, r3, #31
 80099ae:	4413      	add	r3, r2
 80099b0:	105b      	asrs	r3, r3, #1
 80099b2:	603b      	str	r3, [r7, #0]
        green -= step;
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	b29a      	uxth	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	b218      	sxth	r0, r3
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	b219      	sxth	r1, r3
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	b21c      	sxth	r4, r3
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	b21d      	sxth	r5, r3
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da00      	bge.n	80099e8 <testFilledRoundRects+0xac>
 80099e6:	3307      	adds	r3, #7
 80099e8:	10db      	asrs	r3, r3, #3
 80099ea:	b21b      	sxth	r3, r3
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	00d2      	lsls	r2, r2, #3
 80099f0:	b292      	uxth	r2, r2
 80099f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80099f6:	b292      	uxth	r2, r2
 80099f8:	9201      	str	r2, [sp, #4]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	462b      	mov	r3, r5
 80099fe:	4622      	mov	r2, r4
 8009a00:	f7ff faa7 	bl	8008f52 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	3b06      	subs	r3, #6
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b14      	cmp	r3, #20
 8009a0e:	dccc      	bgt.n	80099aa <testFilledRoundRects+0x6e>
    }
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bdb0      	pop	{r4, r5, r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20008f14 	.word	0x20008f14
 8009a20:	20008f16 	.word	0x20008f16

08009a24 <testFillScreen>:




void testFillScreen()
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8009a28:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8009a2c:	f7fe fb94 	bl	8008158 <Displ_CLS>
	Displ_CLS(GREEN);
 8009a30:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8009a34:	f7fe fb90 	bl	8008158 <Displ_CLS>
	Displ_CLS(BLUE);
 8009a38:	201f      	movs	r0, #31
 8009a3a:	f7fe fb8d 	bl	8008158 <Displ_CLS>
	Displ_CLS(YELLOW);
 8009a3e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8009a42:	f7fe fb89 	bl	8008158 <Displ_CLS>
	Displ_CLS(BLACK);
 8009a46:	2000      	movs	r0, #0
 8009a48:	f7fe fb86 	bl	8008158 <Displ_CLS>
}
 8009a4c:	bf00      	nop
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <Displ_TestAll>:





void Displ_TestAll (){
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
	testFillScreen();
 8009a54:	f7ff ffe6 	bl	8009a24 <testFillScreen>
	testLines(CYAN);
 8009a58:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8009a5c:	f7ff fb5c 	bl	8009118 <testLines>
	testFastLines(RED, BLUE);
 8009a60:	211f      	movs	r1, #31
 8009a62:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8009a66:	f7ff fc59 	bl	800931c <testFastLines>
	testRects(GREEN);
 8009a6a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8009a6e:	f7ff fca3 	bl	80093b8 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8009a72:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8009a76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8009a7a:	f7ff fcf1 	bl	8009460 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8009a7e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8009a82:	200a      	movs	r0, #10
 8009a84:	f7ff fd5a 	bl	800953c <testFilledCircles>
	testCircles(10, WHITE);
 8009a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009a8c:	200a      	movs	r0, #10
 8009a8e:	f7ff fd93 	bl	80095b8 <testCircles>
	testTriangles();
 8009a92:	f7ff fdd3 	bl	800963c <testTriangles>
	testFilledTriangles();
 8009a96:	f7ff fe35 	bl	8009704 <testFilledTriangles>
	testRoundRects();
 8009a9a:	f7ff fee1 	bl	8009860 <testRoundRects>
	testFilledRoundRects();
 8009a9e:	f7ff ff4d 	bl	800993c <testFilledRoundRects>
}
 8009aa2:	bf00      	nop
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <Reset_Handler>:
 8009aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ae0 <LoopFillZerobss+0x12>
 8009aac:	480d      	ldr	r0, [pc, #52]	; (8009ae4 <LoopFillZerobss+0x16>)
 8009aae:	490e      	ldr	r1, [pc, #56]	; (8009ae8 <LoopFillZerobss+0x1a>)
 8009ab0:	4a0e      	ldr	r2, [pc, #56]	; (8009aec <LoopFillZerobss+0x1e>)
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e002      	b.n	8009abc <LoopCopyDataInit>

08009ab6 <CopyDataInit>:
 8009ab6:	58d4      	ldr	r4, [r2, r3]
 8009ab8:	50c4      	str	r4, [r0, r3]
 8009aba:	3304      	adds	r3, #4

08009abc <LoopCopyDataInit>:
 8009abc:	18c4      	adds	r4, r0, r3
 8009abe:	428c      	cmp	r4, r1
 8009ac0:	d3f9      	bcc.n	8009ab6 <CopyDataInit>
 8009ac2:	4a0b      	ldr	r2, [pc, #44]	; (8009af0 <LoopFillZerobss+0x22>)
 8009ac4:	4c0b      	ldr	r4, [pc, #44]	; (8009af4 <LoopFillZerobss+0x26>)
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e001      	b.n	8009ace <LoopFillZerobss>

08009aca <FillZerobss>:
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	3204      	adds	r2, #4

08009ace <LoopFillZerobss>:
 8009ace:	42a2      	cmp	r2, r4
 8009ad0:	d3fb      	bcc.n	8009aca <FillZerobss>
 8009ad2:	f7fd f8d3 	bl	8006c7c <SystemInit>
 8009ad6:	f006 fcf1 	bl	80104bc <__libc_init_array>
 8009ada:	f7fb fc53 	bl	8005384 <main>
 8009ade:	4770      	bx	lr
 8009ae0:	20020000 	.word	0x20020000
 8009ae4:	20000000 	.word	0x20000000
 8009ae8:	20000250 	.word	0x20000250
 8009aec:	080194c0 	.word	0x080194c0
 8009af0:	20000250 	.word	0x20000250
 8009af4:	2000a070 	.word	0x2000a070

08009af8 <ADC_IRQHandler>:
 8009af8:	e7fe      	b.n	8009af8 <ADC_IRQHandler>
	...

08009afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009b00:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <HAL_Init+0x40>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a0d      	ldr	r2, [pc, #52]	; (8009b3c <HAL_Init+0x40>)
 8009b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <HAL_Init+0x40>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <HAL_Init+0x40>)
 8009b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b18:	4b08      	ldr	r3, [pc, #32]	; (8009b3c <HAL_Init+0x40>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a07      	ldr	r2, [pc, #28]	; (8009b3c <HAL_Init+0x40>)
 8009b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b24:	2003      	movs	r0, #3
 8009b26:	f000 fd53 	bl	800a5d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	f000 f808 	bl	8009b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b30:	f7fc fc56 	bl	80063e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	40023c00 	.word	0x40023c00

08009b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b48:	4b12      	ldr	r3, [pc, #72]	; (8009b94 <HAL_InitTick+0x54>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <HAL_InitTick+0x58>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	4619      	mov	r1, r3
 8009b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fd6b 	bl	800a63a <HAL_SYSTICK_Config>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e00e      	b.n	8009b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b0f      	cmp	r3, #15
 8009b72:	d80a      	bhi.n	8009b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b74:	2200      	movs	r2, #0
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b7c:	f000 fd33 	bl	800a5e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009b80:	4a06      	ldr	r2, [pc, #24]	; (8009b9c <HAL_InitTick+0x5c>)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e000      	b.n	8009b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	2000003c 	.word	0x2000003c
 8009b98:	20000070 	.word	0x20000070
 8009b9c:	2000006c 	.word	0x2000006c

08009ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <HAL_IncTick+0x20>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <HAL_IncTick+0x24>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4413      	add	r3, r2
 8009bb0:	4a04      	ldr	r2, [pc, #16]	; (8009bc4 <HAL_IncTick+0x24>)
 8009bb2:	6013      	str	r3, [r2, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	20000070 	.word	0x20000070
 8009bc4:	20009f20 	.word	0x20009f20

08009bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0
  return uwTick;
 8009bcc:	4b03      	ldr	r3, [pc, #12]	; (8009bdc <HAL_GetTick+0x14>)
 8009bce:	681b      	ldr	r3, [r3, #0]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20009f20 	.word	0x20009f20

08009be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009be8:	f7ff ffee 	bl	8009bc8 <HAL_GetTick>
 8009bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf8:	d005      	beq.n	8009c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <HAL_Delay+0x44>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009c06:	bf00      	nop
 8009c08:	f7ff ffde 	bl	8009bc8 <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d8f7      	bhi.n	8009c08 <HAL_Delay+0x28>
  {
  }
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000070 	.word	0x20000070

08009c28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e033      	b.n	8009ca6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d109      	bne.n	8009c5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7fc fbf2 	bl	8006430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f003 0310 	and.w	r3, r3, #16
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d118      	bne.n	8009c98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009c6e:	f023 0302 	bic.w	r3, r3, #2
 8009c72:	f043 0202 	orr.w	r2, r3, #2
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa5a 	bl	800a134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	f023 0303 	bic.w	r3, r3, #3
 8009c8e:	f043 0201 	orr.w	r2, r3, #1
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	641a      	str	r2, [r3, #64]	; 0x40
 8009c96:	e001      	b.n	8009c9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_ADC_Start_DMA+0x1e>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e0e9      	b.n	8009ea2 <HAL_ADC_Start_DMA+0x1f2>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d018      	beq.n	8009d16 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009cf4:	4b6d      	ldr	r3, [pc, #436]	; (8009eac <HAL_ADC_Start_DMA+0x1fc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a6d      	ldr	r2, [pc, #436]	; (8009eb0 <HAL_ADC_Start_DMA+0x200>)
 8009cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfe:	0c9a      	lsrs	r2, r3, #18
 8009d00:	4613      	mov	r3, r2
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	4413      	add	r3, r2
 8009d06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009d08:	e002      	b.n	8009d10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f9      	bne.n	8009d0a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d24:	d107      	bne.n	8009d36 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d34:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	f040 80a1 	bne.w	8009e88 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009d4e:	f023 0301 	bic.w	r3, r3, #1
 8009d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d84:	d106      	bne.n	8009d94 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	f023 0206 	bic.w	r2, r3, #6
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	645a      	str	r2, [r3, #68]	; 0x44
 8009d92:	e002      	b.n	8009d9a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009da2:	4b44      	ldr	r3, [pc, #272]	; (8009eb4 <HAL_ADC_Start_DMA+0x204>)
 8009da4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	4a43      	ldr	r2, [pc, #268]	; (8009eb8 <HAL_ADC_Start_DMA+0x208>)
 8009dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	4a42      	ldr	r2, [pc, #264]	; (8009ebc <HAL_ADC_Start_DMA+0x20c>)
 8009db4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	4a41      	ldr	r2, [pc, #260]	; (8009ec0 <HAL_ADC_Start_DMA+0x210>)
 8009dbc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009dc6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009dd6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009de6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	334c      	adds	r3, #76	; 0x4c
 8009df2:	4619      	mov	r1, r3
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f000 fcda 	bl	800a7b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f003 031f 	and.w	r3, r3, #31
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d12a      	bne.n	8009e5e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <HAL_ADC_Start_DMA+0x214>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d015      	beq.n	8009e3e <HAL_ADC_Start_DMA+0x18e>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a2c      	ldr	r2, [pc, #176]	; (8009ec8 <HAL_ADC_Start_DMA+0x218>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d105      	bne.n	8009e28 <HAL_ADC_Start_DMA+0x178>
 8009e1c:	4b25      	ldr	r3, [pc, #148]	; (8009eb4 <HAL_ADC_Start_DMA+0x204>)
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f003 031f 	and.w	r3, r3, #31
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a27      	ldr	r2, [pc, #156]	; (8009ecc <HAL_ADC_Start_DMA+0x21c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d136      	bne.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
 8009e32:	4b20      	ldr	r3, [pc, #128]	; (8009eb4 <HAL_ADC_Start_DMA+0x204>)
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d130      	bne.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d129      	bne.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e5a:	609a      	str	r2, [r3, #8]
 8009e5c:	e020      	b.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <HAL_ADC_Start_DMA+0x214>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d11b      	bne.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d114      	bne.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e84:	609a      	str	r2, [r3, #8]
 8009e86:	e00b      	b.n	8009ea0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8c:	f043 0210 	orr.w	r2, r3, #16
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e98:	f043 0201 	orr.w	r2, r3, #1
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	2000003c 	.word	0x2000003c
 8009eb0:	431bde83 	.word	0x431bde83
 8009eb4:	40012300 	.word	0x40012300
 8009eb8:	0800a32d 	.word	0x0800a32d
 8009ebc:	0800a3e7 	.word	0x0800a3e7
 8009ec0:	0800a403 	.word	0x0800a403
 8009ec4:	40012000 	.word	0x40012000
 8009ec8:	40012100 	.word	0x40012100
 8009ecc:	40012200 	.word	0x40012200

08009ed0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_ADC_ConfigChannel+0x1c>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e113      	b.n	800a114 <HAL_ADC_ConfigChannel+0x244>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d925      	bls.n	8009f48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68d9      	ldr	r1, [r3, #12]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	4413      	add	r3, r2
 8009f10:	3b1e      	subs	r3, #30
 8009f12:	2207      	movs	r2, #7
 8009f14:	fa02 f303 	lsl.w	r3, r2, r3
 8009f18:	43da      	mvns	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	400a      	ands	r2, r1
 8009f20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68d9      	ldr	r1, [r3, #12]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	4618      	mov	r0, r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	4403      	add	r3, r0
 8009f3a:	3b1e      	subs	r3, #30
 8009f3c:	409a      	lsls	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	60da      	str	r2, [r3, #12]
 8009f46:	e022      	b.n	8009f8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6919      	ldr	r1, [r3, #16]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	4613      	mov	r3, r2
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	4413      	add	r3, r2
 8009f5c:	2207      	movs	r2, #7
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	43da      	mvns	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	400a      	ands	r2, r1
 8009f6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6919      	ldr	r1, [r3, #16]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	689a      	ldr	r2, [r3, #8]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4403      	add	r3, r0
 8009f84:	409a      	lsls	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2b06      	cmp	r3, #6
 8009f94:	d824      	bhi.n	8009fe0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3b05      	subs	r3, #5
 8009fa8:	221f      	movs	r2, #31
 8009faa:	fa02 f303 	lsl.w	r3, r2, r3
 8009fae:	43da      	mvns	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	400a      	ands	r2, r1
 8009fb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	3b05      	subs	r3, #5
 8009fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8009fde:	e04c      	b.n	800a07a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b0c      	cmp	r3, #12
 8009fe6:	d824      	bhi.n	800a032 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3b23      	subs	r3, #35	; 0x23
 8009ffa:	221f      	movs	r2, #31
 8009ffc:	fa02 f303 	lsl.w	r3, r2, r3
 800a000:	43da      	mvns	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	400a      	ands	r2, r1
 800a008:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	4618      	mov	r0, r3
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	3b23      	subs	r3, #35	; 0x23
 800a024:	fa00 f203 	lsl.w	r2, r0, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	631a      	str	r2, [r3, #48]	; 0x30
 800a030:	e023      	b.n	800a07a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	3b41      	subs	r3, #65	; 0x41
 800a044:	221f      	movs	r2, #31
 800a046:	fa02 f303 	lsl.w	r3, r2, r3
 800a04a:	43da      	mvns	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	400a      	ands	r2, r1
 800a052:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4618      	mov	r0, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	3b41      	subs	r3, #65	; 0x41
 800a06e:	fa00 f203 	lsl.w	r2, r0, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a07a:	4b29      	ldr	r3, [pc, #164]	; (800a120 <HAL_ADC_ConfigChannel+0x250>)
 800a07c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a28      	ldr	r2, [pc, #160]	; (800a124 <HAL_ADC_ConfigChannel+0x254>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d10f      	bne.n	800a0a8 <HAL_ADC_ConfigChannel+0x1d8>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b12      	cmp	r3, #18
 800a08e:	d10b      	bne.n	800a0a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a1d      	ldr	r2, [pc, #116]	; (800a124 <HAL_ADC_ConfigChannel+0x254>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d12b      	bne.n	800a10a <HAL_ADC_ConfigChannel+0x23a>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a1c      	ldr	r2, [pc, #112]	; (800a128 <HAL_ADC_ConfigChannel+0x258>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <HAL_ADC_ConfigChannel+0x1f4>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b11      	cmp	r3, #17
 800a0c2:	d122      	bne.n	800a10a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a11      	ldr	r2, [pc, #68]	; (800a128 <HAL_ADC_ConfigChannel+0x258>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d111      	bne.n	800a10a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a0e6:	4b11      	ldr	r3, [pc, #68]	; (800a12c <HAL_ADC_ConfigChannel+0x25c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a11      	ldr	r2, [pc, #68]	; (800a130 <HAL_ADC_ConfigChannel+0x260>)
 800a0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f0:	0c9a      	lsrs	r2, r3, #18
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a0fc:	e002      	b.n	800a104 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	3b01      	subs	r3, #1
 800a102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f9      	bne.n	800a0fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	40012300 	.word	0x40012300
 800a124:	40012000 	.word	0x40012000
 800a128:	10000012 	.word	0x10000012
 800a12c:	2000003c 	.word	0x2000003c
 800a130:	431bde83 	.word	0x431bde83

0800a134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a13c:	4b79      	ldr	r3, [pc, #484]	; (800a324 <ADC_Init+0x1f0>)
 800a13e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	431a      	orrs	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6859      	ldr	r1, [r3, #4]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	021a      	lsls	r2, r3, #8
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a18c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6859      	ldr	r1, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6899      	ldr	r1, [r3, #8]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	4a58      	ldr	r2, [pc, #352]	; (800a328 <ADC_Init+0x1f4>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d022      	beq.n	800a212 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a1da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6899      	ldr	r1, [r3, #8]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a1fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6899      	ldr	r1, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	609a      	str	r2, [r3, #8]
 800a210:	e00f      	b.n	800a232 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0202 	bic.w	r2, r2, #2
 800a240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6899      	ldr	r1, [r3, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7e1b      	ldrb	r3, [r3, #24]
 800a24c:	005a      	lsls	r2, r3, #1
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d01b      	beq.n	800a298 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a26e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a27e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6859      	ldr	r1, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	3b01      	subs	r3, #1
 800a28c:	035a      	lsls	r2, r3, #13
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	e007      	b.n	800a2a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a2b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	051a      	lsls	r2, r3, #20
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a2dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6899      	ldr	r1, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ea:	025a      	lsls	r2, r3, #9
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6899      	ldr	r1, [r3, #8]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	029a      	lsls	r2, r3, #10
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	609a      	str	r2, [r3, #8]
}
 800a318:	bf00      	nop
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40012300 	.word	0x40012300
 800a328:	0f000001 	.word	0x0f000001

0800a32c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a342:	2b00      	cmp	r3, #0
 800a344:	d13c      	bne.n	800a3c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d12b      	bne.n	800a3b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a364:	2b00      	cmp	r3, #0
 800a366:	d127      	bne.n	800a3b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a380:	2b00      	cmp	r3, #0
 800a382:	d119      	bne.n	800a3b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0220 	bic.w	r2, r2, #32
 800a392:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d105      	bne.n	800a3b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b0:	f043 0201 	orr.w	r2, r3, #1
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7fb fee7 	bl	800618c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a3be:	e00e      	b.n	800a3de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c4:	f003 0310 	and.w	r3, r3, #16
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7fb ff1d 	bl	800620c <HAL_ADC_ErrorCallback>
}
 800a3d2:	e004      	b.n	800a3de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	4798      	blx	r3
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7fb fee9 	bl	80061cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2240      	movs	r2, #64	; 0x40
 800a414:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41a:	f043 0204 	orr.w	r2, r3, #4
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f7fb fef2 	bl	800620c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a428:	bf00      	nop
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f003 0307 	and.w	r3, r3, #7
 800a43e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <__NVIC_SetPriorityGrouping+0x44>)
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a44c:	4013      	ands	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a45c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a462:	4a04      	ldr	r2, [pc, #16]	; (800a474 <__NVIC_SetPriorityGrouping+0x44>)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	60d3      	str	r3, [r2, #12]
}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	e000ed00 	.word	0xe000ed00

0800a478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <__NVIC_GetPriorityGrouping+0x18>)
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	0a1b      	lsrs	r3, r3, #8
 800a482:	f003 0307 	and.w	r3, r3, #7
}
 800a486:	4618      	mov	r0, r3
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	e000ed00 	.word	0xe000ed00

0800a494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	db0b      	blt.n	800a4be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	f003 021f 	and.w	r2, r3, #31
 800a4ac:	4907      	ldr	r1, [pc, #28]	; (800a4cc <__NVIC_EnableIRQ+0x38>)
 800a4ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4b2:	095b      	lsrs	r3, r3, #5
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	fa00 f202 	lsl.w	r2, r0, r2
 800a4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	e000e100 	.word	0xe000e100

0800a4d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	db0a      	blt.n	800a4fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	490c      	ldr	r1, [pc, #48]	; (800a51c <__NVIC_SetPriority+0x4c>)
 800a4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ee:	0112      	lsls	r2, r2, #4
 800a4f0:	b2d2      	uxtb	r2, r2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a4f8:	e00a      	b.n	800a510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	4908      	ldr	r1, [pc, #32]	; (800a520 <__NVIC_SetPriority+0x50>)
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	3b04      	subs	r3, #4
 800a508:	0112      	lsls	r2, r2, #4
 800a50a:	b2d2      	uxtb	r2, r2
 800a50c:	440b      	add	r3, r1
 800a50e:	761a      	strb	r2, [r3, #24]
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	e000e100 	.word	0xe000e100
 800a520:	e000ed00 	.word	0xe000ed00

0800a524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a524:	b480      	push	{r7}
 800a526:	b089      	sub	sp, #36	; 0x24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	f1c3 0307 	rsb	r3, r3, #7
 800a53e:	2b04      	cmp	r3, #4
 800a540:	bf28      	it	cs
 800a542:	2304      	movcs	r3, #4
 800a544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	3304      	adds	r3, #4
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d902      	bls.n	800a554 <NVIC_EncodePriority+0x30>
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	3b03      	subs	r3, #3
 800a552:	e000      	b.n	800a556 <NVIC_EncodePriority+0x32>
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	fa02 f303 	lsl.w	r3, r2, r3
 800a562:	43da      	mvns	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	401a      	ands	r2, r3
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a56c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	fa01 f303 	lsl.w	r3, r1, r3
 800a576:	43d9      	mvns	r1, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a57c:	4313      	orrs	r3, r2
         );
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3724      	adds	r7, #36	; 0x24
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
	...

0800a58c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3b01      	subs	r3, #1
 800a598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a59c:	d301      	bcc.n	800a5a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e00f      	b.n	800a5c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5a2:	4a0a      	ldr	r2, [pc, #40]	; (800a5cc <SysTick_Config+0x40>)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5aa:	210f      	movs	r1, #15
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5b0:	f7ff ff8e 	bl	800a4d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5b4:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <SysTick_Config+0x40>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a5ba:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <SysTick_Config+0x40>)
 800a5bc:	2207      	movs	r2, #7
 800a5be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	e000e010 	.word	0xe000e010

0800a5d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ff29 	bl	800a430 <__NVIC_SetPriorityGrouping>
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b086      	sub	sp, #24
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
 800a5f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5f8:	f7ff ff3e 	bl	800a478 <__NVIC_GetPriorityGrouping>
 800a5fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f7ff ff8e 	bl	800a524 <NVIC_EncodePriority>
 800a608:	4602      	mov	r2, r0
 800a60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff ff5d 	bl	800a4d0 <__NVIC_SetPriority>
}
 800a616:	bf00      	nop
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	4603      	mov	r3, r0
 800a626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff ff31 	bl	800a494 <__NVIC_EnableIRQ>
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7ff ffa2 	bl	800a58c <SysTick_Config>
 800a648:	4603      	mov	r3, r0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a660:	f7ff fab2 	bl	8009bc8 <HAL_GetTick>
 800a664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e099      	b.n	800a7a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0201 	bic.w	r2, r2, #1
 800a68e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a690:	e00f      	b.n	800a6b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a692:	f7ff fa99 	bl	8009bc8 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	2b05      	cmp	r3, #5
 800a69e:	d908      	bls.n	800a6b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2203      	movs	r2, #3
 800a6aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e078      	b.n	800a7a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e8      	bne.n	800a692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	4b38      	ldr	r3, [pc, #224]	; (800a7ac <HAL_DMA_Init+0x158>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	4313      	orrs	r3, r2
 800a702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d107      	bne.n	800a71c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a714:	4313      	orrs	r3, r2
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f023 0307 	bic.w	r3, r3, #7
 800a732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	2b04      	cmp	r3, #4
 800a744:	d117      	bne.n	800a776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00e      	beq.n	800a776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fb01 	bl	800ad60 <DMA_CheckFifoParam>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d008      	beq.n	800a776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2240      	movs	r2, #64	; 0x40
 800a768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a772:	2301      	movs	r3, #1
 800a774:	e016      	b.n	800a7a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fab8 	bl	800acf4 <DMA_CalcBaseAndBitshift>
 800a784:	4603      	mov	r3, r0
 800a786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78c:	223f      	movs	r2, #63	; 0x3f
 800a78e:	409a      	lsls	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	f010803f 	.word	0xf010803f

0800a7b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d101      	bne.n	800a7d6 <HAL_DMA_Start_IT+0x26>
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	e040      	b.n	800a858 <HAL_DMA_Start_IT+0xa8>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d12f      	bne.n	800a84a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 fa4a 	bl	800ac98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a808:	223f      	movs	r2, #63	; 0x3f
 800a80a:	409a      	lsls	r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0216 	orr.w	r2, r2, #22
 800a81e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a824:	2b00      	cmp	r3, #0
 800a826:	d007      	beq.n	800a838 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0208 	orr.w	r2, r2, #8
 800a836:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	e005      	b.n	800a856 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a852:	2302      	movs	r3, #2
 800a854:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a86e:	f7ff f9ab 	bl	8009bc8 <HAL_GetTick>
 800a872:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d008      	beq.n	800a892 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2280      	movs	r2, #128	; 0x80
 800a884:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e052      	b.n	800a938 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0216 	bic.w	r2, r2, #22
 800a8a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d103      	bne.n	800a8c2 <HAL_DMA_Abort+0x62>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d007      	beq.n	800a8d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0208 	bic.w	r2, r2, #8
 800a8d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8e2:	e013      	b.n	800a90c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8e4:	f7ff f970 	bl	8009bc8 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b05      	cmp	r3, #5
 800a8f0:	d90c      	bls.n	800a90c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e015      	b.n	800a938 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e4      	bne.n	800a8e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91e:	223f      	movs	r2, #63	; 0x3f
 800a920:	409a      	lsls	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d004      	beq.n	800a95e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2280      	movs	r2, #128	; 0x80
 800a958:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e00c      	b.n	800a978 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2205      	movs	r2, #5
 800a962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0201 	bic.w	r2, r2, #1
 800a974:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a990:	4b8e      	ldr	r3, [pc, #568]	; (800abcc <HAL_DMA_IRQHandler+0x248>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a8e      	ldr	r2, [pc, #568]	; (800abd0 <HAL_DMA_IRQHandler+0x24c>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	0a9b      	lsrs	r3, r3, #10
 800a99c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ae:	2208      	movs	r2, #8
 800a9b0:	409a      	lsls	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01a      	beq.n	800a9f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d013      	beq.n	800a9f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f022 0204 	bic.w	r2, r2, #4
 800a9d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9dc:	2208      	movs	r2, #8
 800a9de:	409a      	lsls	r2, r3
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e8:	f043 0201 	orr.w	r2, r3, #1
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	409a      	lsls	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d012      	beq.n	800aa26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa12:	2201      	movs	r2, #1
 800aa14:	409a      	lsls	r2, r3
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1e:	f043 0202 	orr.w	r2, r3, #2
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	409a      	lsls	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4013      	ands	r3, r2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d012      	beq.n	800aa5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa48:	2204      	movs	r2, #4
 800aa4a:	409a      	lsls	r2, r3
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa54:	f043 0204 	orr.w	r2, r3, #4
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa60:	2210      	movs	r2, #16
 800aa62:	409a      	lsls	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4013      	ands	r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d043      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0308 	and.w	r3, r3, #8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d03c      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7e:	2210      	movs	r2, #16
 800aa80:	409a      	lsls	r2, r3
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d018      	beq.n	800aac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d108      	bne.n	800aab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d024      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	4798      	blx	r3
 800aab2:	e01f      	b.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01b      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	4798      	blx	r3
 800aac4:	e016      	b.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d107      	bne.n	800aae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0208 	bic.w	r2, r2, #8
 800aae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf8:	2220      	movs	r2, #32
 800aafa:	409a      	lsls	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4013      	ands	r3, r2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 808f 	beq.w	800ac24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0310 	and.w	r3, r3, #16
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 8087 	beq.w	800ac24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	409a      	lsls	r2, r3
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b05      	cmp	r3, #5
 800ab2c:	d136      	bne.n	800ab9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 0216 	bic.w	r2, r2, #22
 800ab3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	695a      	ldr	r2, [r3, #20]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <HAL_DMA_IRQHandler+0x1da>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0208 	bic.w	r2, r2, #8
 800ab6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab72:	223f      	movs	r2, #63	; 0x3f
 800ab74:	409a      	lsls	r2, r3
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d07e      	beq.n	800ac90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
        }
        return;
 800ab9a:	e079      	b.n	800ac90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d01d      	beq.n	800abe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10d      	bne.n	800abd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d031      	beq.n	800ac24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
 800abc8:	e02c      	b.n	800ac24 <HAL_DMA_IRQHandler+0x2a0>
 800abca:	bf00      	nop
 800abcc:	2000003c 	.word	0x2000003c
 800abd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d023      	beq.n	800ac24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
 800abe4:	e01e      	b.n	800ac24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10f      	bne.n	800ac14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0210 	bic.w	r2, r2, #16
 800ac02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d032      	beq.n	800ac92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d022      	beq.n	800ac7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2205      	movs	r2, #5
 800ac3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0201 	bic.w	r2, r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	3301      	adds	r3, #1
 800ac54:	60bb      	str	r3, [r7, #8]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d307      	bcc.n	800ac6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1f2      	bne.n	800ac50 <HAL_DMA_IRQHandler+0x2cc>
 800ac6a:	e000      	b.n	800ac6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ac6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	4798      	blx	r3
 800ac8e:	e000      	b.n	800ac92 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ac90:	bf00      	nop
    }
  }
}
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	2b40      	cmp	r3, #64	; 0x40
 800acc4:	d108      	bne.n	800acd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800acd6:	e007      	b.n	800ace8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	60da      	str	r2, [r3, #12]
}
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	3b10      	subs	r3, #16
 800ad04:	4a14      	ldr	r2, [pc, #80]	; (800ad58 <DMA_CalcBaseAndBitshift+0x64>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	091b      	lsrs	r3, r3, #4
 800ad0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad0e:	4a13      	ldr	r2, [pc, #76]	; (800ad5c <DMA_CalcBaseAndBitshift+0x68>)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	4413      	add	r3, r2
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d909      	bls.n	800ad36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	659a      	str	r2, [r3, #88]	; 0x58
 800ad34:	e007      	b.n	800ad46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	aaaaaaab 	.word	0xaaaaaaab
 800ad5c:	08019118 	.word	0x08019118

0800ad60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d11f      	bne.n	800adba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d856      	bhi.n	800ae2e <DMA_CheckFifoParam+0xce>
 800ad80:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <DMA_CheckFifoParam+0x28>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800ad99 	.word	0x0800ad99
 800ad8c:	0800adab 	.word	0x0800adab
 800ad90:	0800ad99 	.word	0x0800ad99
 800ad94:	0800ae2f 	.word	0x0800ae2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d046      	beq.n	800ae32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ada8:	e043      	b.n	800ae32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800adb2:	d140      	bne.n	800ae36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adb8:	e03d      	b.n	800ae36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc2:	d121      	bne.n	800ae08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d837      	bhi.n	800ae3a <DMA_CheckFifoParam+0xda>
 800adca:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <DMA_CheckFifoParam+0x70>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800ade1 	.word	0x0800ade1
 800add4:	0800ade7 	.word	0x0800ade7
 800add8:	0800ade1 	.word	0x0800ade1
 800addc:	0800adf9 	.word	0x0800adf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
      break;
 800ade4:	e030      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d025      	beq.n	800ae3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adf6:	e022      	b.n	800ae3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae00:	d11f      	bne.n	800ae42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae06:	e01c      	b.n	800ae42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d903      	bls.n	800ae16 <DMA_CheckFifoParam+0xb6>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d003      	beq.n	800ae1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae14:	e018      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
      break;
 800ae1a:	e015      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00e      	beq.n	800ae46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae2c:	e00b      	b.n	800ae46 <DMA_CheckFifoParam+0xe6>
      break;
 800ae2e:	bf00      	nop
 800ae30:	e00a      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      break;
 800ae32:	bf00      	nop
 800ae34:	e008      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      break;
 800ae36:	bf00      	nop
 800ae38:	e006      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      break;
 800ae3a:	bf00      	nop
 800ae3c:	e004      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      break;
 800ae3e:	bf00      	nop
 800ae40:	e002      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      break;   
 800ae42:	bf00      	nop
 800ae44:	e000      	b.n	800ae48 <DMA_CheckFifoParam+0xe8>
      break;
 800ae46:	bf00      	nop
    }
  } 
  
  return status; 
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop

0800ae58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b089      	sub	sp, #36	; 0x24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61fb      	str	r3, [r7, #28]
 800ae72:	e165      	b.n	800b140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae74:	2201      	movs	r2, #1
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	4013      	ands	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	f040 8154 	bne.w	800b13a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d005      	beq.n	800aeaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d130      	bne.n	800af0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeba:	43db      	mvns	r3, r3
 800aebc:	69ba      	ldr	r2, [r7, #24]
 800aebe:	4013      	ands	r3, r2
 800aec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	005b      	lsls	r3, r3, #1
 800aeca:	fa02 f303 	lsl.w	r3, r2, r3
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aee0:	2201      	movs	r2, #1
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	fa02 f303 	lsl.w	r3, r2, r3
 800aee8:	43db      	mvns	r3, r3
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	4013      	ands	r3, r2
 800aeee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	091b      	lsrs	r3, r3, #4
 800aef6:	f003 0201 	and.w	r2, r3, #1
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	4313      	orrs	r3, r2
 800af04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	2b03      	cmp	r3, #3
 800af16:	d017      	beq.n	800af48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	2203      	movs	r2, #3
 800af24:	fa02 f303 	lsl.w	r3, r2, r3
 800af28:	43db      	mvns	r3, r3
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	4013      	ands	r3, r2
 800af2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	fa02 f303 	lsl.w	r3, r2, r3
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	4313      	orrs	r3, r2
 800af40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f003 0303 	and.w	r3, r3, #3
 800af50:	2b02      	cmp	r3, #2
 800af52:	d123      	bne.n	800af9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	08da      	lsrs	r2, r3, #3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3208      	adds	r2, #8
 800af5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	f003 0307 	and.w	r3, r3, #7
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	220f      	movs	r2, #15
 800af6c:	fa02 f303 	lsl.w	r3, r2, r3
 800af70:	43db      	mvns	r3, r3
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	4013      	ands	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f003 0307 	and.w	r3, r3, #7
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	08da      	lsrs	r2, r3, #3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3208      	adds	r2, #8
 800af96:	69b9      	ldr	r1, [r7, #24]
 800af98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	2203      	movs	r2, #3
 800afa8:	fa02 f303 	lsl.w	r3, r2, r3
 800afac:	43db      	mvns	r3, r3
 800afae:	69ba      	ldr	r2, [r7, #24]
 800afb0:	4013      	ands	r3, r2
 800afb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	f003 0203 	and.w	r2, r3, #3
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 80ae 	beq.w	800b13a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	4b5d      	ldr	r3, [pc, #372]	; (800b158 <HAL_GPIO_Init+0x300>)
 800afe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe6:	4a5c      	ldr	r2, [pc, #368]	; (800b158 <HAL_GPIO_Init+0x300>)
 800afe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afec:	6453      	str	r3, [r2, #68]	; 0x44
 800afee:	4b5a      	ldr	r3, [pc, #360]	; (800b158 <HAL_GPIO_Init+0x300>)
 800aff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800affa:	4a58      	ldr	r2, [pc, #352]	; (800b15c <HAL_GPIO_Init+0x304>)
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	089b      	lsrs	r3, r3, #2
 800b000:	3302      	adds	r3, #2
 800b002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	f003 0303 	and.w	r3, r3, #3
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	220f      	movs	r2, #15
 800b012:	fa02 f303 	lsl.w	r3, r2, r3
 800b016:	43db      	mvns	r3, r3
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	4013      	ands	r3, r2
 800b01c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a4f      	ldr	r2, [pc, #316]	; (800b160 <HAL_GPIO_Init+0x308>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d025      	beq.n	800b072 <HAL_GPIO_Init+0x21a>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a4e      	ldr	r2, [pc, #312]	; (800b164 <HAL_GPIO_Init+0x30c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d01f      	beq.n	800b06e <HAL_GPIO_Init+0x216>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a4d      	ldr	r2, [pc, #308]	; (800b168 <HAL_GPIO_Init+0x310>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d019      	beq.n	800b06a <HAL_GPIO_Init+0x212>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a4c      	ldr	r2, [pc, #304]	; (800b16c <HAL_GPIO_Init+0x314>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d013      	beq.n	800b066 <HAL_GPIO_Init+0x20e>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a4b      	ldr	r2, [pc, #300]	; (800b170 <HAL_GPIO_Init+0x318>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00d      	beq.n	800b062 <HAL_GPIO_Init+0x20a>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a4a      	ldr	r2, [pc, #296]	; (800b174 <HAL_GPIO_Init+0x31c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d007      	beq.n	800b05e <HAL_GPIO_Init+0x206>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a49      	ldr	r2, [pc, #292]	; (800b178 <HAL_GPIO_Init+0x320>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d101      	bne.n	800b05a <HAL_GPIO_Init+0x202>
 800b056:	2306      	movs	r3, #6
 800b058:	e00c      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b05a:	2307      	movs	r3, #7
 800b05c:	e00a      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b05e:	2305      	movs	r3, #5
 800b060:	e008      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b062:	2304      	movs	r3, #4
 800b064:	e006      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b066:	2303      	movs	r3, #3
 800b068:	e004      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b06a:	2302      	movs	r3, #2
 800b06c:	e002      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b06e:	2301      	movs	r3, #1
 800b070:	e000      	b.n	800b074 <HAL_GPIO_Init+0x21c>
 800b072:	2300      	movs	r3, #0
 800b074:	69fa      	ldr	r2, [r7, #28]
 800b076:	f002 0203 	and.w	r2, r2, #3
 800b07a:	0092      	lsls	r2, r2, #2
 800b07c:	4093      	lsls	r3, r2
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	4313      	orrs	r3, r2
 800b082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b084:	4935      	ldr	r1, [pc, #212]	; (800b15c <HAL_GPIO_Init+0x304>)
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	089b      	lsrs	r3, r3, #2
 800b08a:	3302      	adds	r3, #2
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b092:	4b3a      	ldr	r3, [pc, #232]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	43db      	mvns	r3, r3
 800b09c:	69ba      	ldr	r2, [r7, #24]
 800b09e:	4013      	ands	r3, r2
 800b0a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b0b6:	4a31      	ldr	r2, [pc, #196]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b0bc:	4b2f      	ldr	r3, [pc, #188]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	69ba      	ldr	r2, [r7, #24]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b0e0:	4a26      	ldr	r2, [pc, #152]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b0e6:	4b25      	ldr	r3, [pc, #148]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	43db      	mvns	r3, r3
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	4313      	orrs	r3, r2
 800b108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b10a:	4a1c      	ldr	r2, [pc, #112]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b110:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	43db      	mvns	r3, r3
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	4013      	ands	r3, r2
 800b11e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	4313      	orrs	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b134:	4a11      	ldr	r2, [pc, #68]	; (800b17c <HAL_GPIO_Init+0x324>)
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	3301      	adds	r3, #1
 800b13e:	61fb      	str	r3, [r7, #28]
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	2b0f      	cmp	r3, #15
 800b144:	f67f ae96 	bls.w	800ae74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b148:	bf00      	nop
 800b14a:	bf00      	nop
 800b14c:	3724      	adds	r7, #36	; 0x24
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	40023800 	.word	0x40023800
 800b15c:	40013800 	.word	0x40013800
 800b160:	40020000 	.word	0x40020000
 800b164:	40020400 	.word	0x40020400
 800b168:	40020800 	.word	0x40020800
 800b16c:	40020c00 	.word	0x40020c00
 800b170:	40021000 	.word	0x40021000
 800b174:	40021400 	.word	0x40021400
 800b178:	40021800 	.word	0x40021800
 800b17c:	40013c00 	.word	0x40013c00

0800b180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	887b      	ldrh	r3, [r7, #2]
 800b192:	4013      	ands	r3, r2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b198:	2301      	movs	r3, #1
 800b19a:	73fb      	strb	r3, [r7, #15]
 800b19c:	e001      	b.n	800b1a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	807b      	strh	r3, [r7, #2]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1c0:	787b      	ldrb	r3, [r7, #1]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b1c6:	887a      	ldrh	r2, [r7, #2]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b1cc:	e003      	b.n	800b1d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b1ce:	887b      	ldrh	r3, [r7, #2]
 800b1d0:	041a      	lsls	r2, r3, #16
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	619a      	str	r2, [r3, #24]
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b1f4:	887a      	ldrh	r2, [r7, #2]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	041a      	lsls	r2, r3, #16
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	43d9      	mvns	r1, r3
 800b200:	887b      	ldrh	r3, [r7, #2]
 800b202:	400b      	ands	r3, r1
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	619a      	str	r2, [r3, #24]
}
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b222:	4b08      	ldr	r3, [pc, #32]	; (800b244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b224:	695a      	ldr	r2, [r3, #20]
 800b226:	88fb      	ldrh	r3, [r7, #6]
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d006      	beq.n	800b23c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b22e:	4a05      	ldr	r2, [pc, #20]	; (800b244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	4618      	mov	r0, r3
 800b238:	f7fa ff8a 	bl	8006150 <HAL_GPIO_EXTI_Callback>
  }
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40013c00 	.word	0x40013c00

0800b248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e12b      	b.n	800b4b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7fb f9f2 	bl	8006658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2224      	movs	r2, #36	; 0x24
 800b278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f022 0201 	bic.w	r2, r2, #1
 800b28a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b29a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b2ac:	f001 f9fc 	bl	800c6a8 <HAL_RCC_GetPCLK1Freq>
 800b2b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4a81      	ldr	r2, [pc, #516]	; (800b4bc <HAL_I2C_Init+0x274>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d807      	bhi.n	800b2cc <HAL_I2C_Init+0x84>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a80      	ldr	r2, [pc, #512]	; (800b4c0 <HAL_I2C_Init+0x278>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	bf94      	ite	ls
 800b2c4:	2301      	movls	r3, #1
 800b2c6:	2300      	movhi	r3, #0
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	e006      	b.n	800b2da <HAL_I2C_Init+0x92>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4a7d      	ldr	r2, [pc, #500]	; (800b4c4 <HAL_I2C_Init+0x27c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	bf94      	ite	ls
 800b2d4:	2301      	movls	r3, #1
 800b2d6:	2300      	movhi	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e0e7      	b.n	800b4b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4a78      	ldr	r2, [pc, #480]	; (800b4c8 <HAL_I2C_Init+0x280>)
 800b2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ea:	0c9b      	lsrs	r3, r3, #18
 800b2ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6a1b      	ldr	r3, [r3, #32]
 800b308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	4a6a      	ldr	r2, [pc, #424]	; (800b4bc <HAL_I2C_Init+0x274>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d802      	bhi.n	800b31c <HAL_I2C_Init+0xd4>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3301      	adds	r3, #1
 800b31a:	e009      	b.n	800b330 <HAL_I2C_Init+0xe8>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b322:	fb02 f303 	mul.w	r3, r2, r3
 800b326:	4a69      	ldr	r2, [pc, #420]	; (800b4cc <HAL_I2C_Init+0x284>)
 800b328:	fba2 2303 	umull	r2, r3, r2, r3
 800b32c:	099b      	lsrs	r3, r3, #6
 800b32e:	3301      	adds	r3, #1
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	430b      	orrs	r3, r1
 800b336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	495c      	ldr	r1, [pc, #368]	; (800b4bc <HAL_I2C_Init+0x274>)
 800b34c:	428b      	cmp	r3, r1
 800b34e:	d819      	bhi.n	800b384 <HAL_I2C_Init+0x13c>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	1e59      	subs	r1, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b35e:	1c59      	adds	r1, r3, #1
 800b360:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b364:	400b      	ands	r3, r1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <HAL_I2C_Init+0x138>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	1e59      	subs	r1, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	fbb1 f3f3 	udiv	r3, r1, r3
 800b378:	3301      	adds	r3, #1
 800b37a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b37e:	e051      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b380:	2304      	movs	r3, #4
 800b382:	e04f      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d111      	bne.n	800b3b0 <HAL_I2C_Init+0x168>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	1e58      	subs	r0, r3, #1
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6859      	ldr	r1, [r3, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	440b      	add	r3, r1
 800b39a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b39e:	3301      	adds	r3, #1
 800b3a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bf0c      	ite	eq
 800b3a8:	2301      	moveq	r3, #1
 800b3aa:	2300      	movne	r3, #0
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	e012      	b.n	800b3d6 <HAL_I2C_Init+0x18e>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	1e58      	subs	r0, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6859      	ldr	r1, [r3, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	440b      	add	r3, r1
 800b3be:	0099      	lsls	r1, r3, #2
 800b3c0:	440b      	add	r3, r1
 800b3c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bf0c      	ite	eq
 800b3d0:	2301      	moveq	r3, #1
 800b3d2:	2300      	movne	r3, #0
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <HAL_I2C_Init+0x196>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e022      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10e      	bne.n	800b404 <HAL_I2C_Init+0x1bc>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	1e58      	subs	r0, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6859      	ldr	r1, [r3, #4]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	440b      	add	r3, r1
 800b3f4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b402:	e00f      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	1e58      	subs	r0, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6859      	ldr	r1, [r3, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	440b      	add	r3, r1
 800b412:	0099      	lsls	r1, r3, #2
 800b414:	440b      	add	r3, r1
 800b416:	fbb0 f3f3 	udiv	r3, r0, r3
 800b41a:	3301      	adds	r3, #1
 800b41c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	6809      	ldr	r1, [r1, #0]
 800b428:	4313      	orrs	r3, r2
 800b42a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	69da      	ldr	r2, [r3, #28]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	431a      	orrs	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6911      	ldr	r1, [r2, #16]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	68d2      	ldr	r2, [r2, #12]
 800b45e:	4311      	orrs	r1, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6812      	ldr	r2, [r2, #0]
 800b464:	430b      	orrs	r3, r1
 800b466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695a      	ldr	r2, [r3, #20]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	431a      	orrs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0201 	orr.w	r2, r2, #1
 800b492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2220      	movs	r2, #32
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	000186a0 	.word	0x000186a0
 800b4c0:	001e847f 	.word	0x001e847f
 800b4c4:	003d08ff 	.word	0x003d08ff
 800b4c8:	431bde83 	.word	0x431bde83
 800b4cc:	10624dd3 	.word	0x10624dd3

0800b4d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af02      	add	r7, sp, #8
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	4608      	mov	r0, r1
 800b4da:	4611      	mov	r1, r2
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	817b      	strh	r3, [r7, #10]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	813b      	strh	r3, [r7, #8]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b4ea:	f7fe fb6d 	bl	8009bc8 <HAL_GetTick>
 800b4ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b20      	cmp	r3, #32
 800b4fa:	f040 80d9 	bne.w	800b6b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	2319      	movs	r3, #25
 800b504:	2201      	movs	r2, #1
 800b506:	496d      	ldr	r1, [pc, #436]	; (800b6bc <HAL_I2C_Mem_Write+0x1ec>)
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fdad 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b514:	2302      	movs	r3, #2
 800b516:	e0cc      	b.n	800b6b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d101      	bne.n	800b526 <HAL_I2C_Mem_Write+0x56>
 800b522:	2302      	movs	r3, #2
 800b524:	e0c5      	b.n	800b6b2 <HAL_I2C_Mem_Write+0x1e2>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d007      	beq.n	800b54c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f042 0201 	orr.w	r2, r2, #1
 800b54a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b55a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2221      	movs	r2, #33	; 0x21
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2240      	movs	r2, #64	; 0x40
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6a3a      	ldr	r2, [r7, #32]
 800b576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b57c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b582:	b29a      	uxth	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4a4d      	ldr	r2, [pc, #308]	; (800b6c0 <HAL_I2C_Mem_Write+0x1f0>)
 800b58c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b58e:	88f8      	ldrh	r0, [r7, #6]
 800b590:	893a      	ldrh	r2, [r7, #8]
 800b592:	8979      	ldrh	r1, [r7, #10]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	4603      	mov	r3, r0
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 fbe4 	bl	800bd6c <I2C_RequestMemoryWrite>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d052      	beq.n	800b650 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e081      	b.n	800b6b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 fe2e 	bl	800c214 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	2b04      	cmp	r3, #4
 800b5c4:	d107      	bne.n	800b5d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e06b      	b.n	800b6b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	f003 0304 	and.w	r3, r3, #4
 800b614:	2b04      	cmp	r3, #4
 800b616:	d11b      	bne.n	800b650 <HAL_I2C_Mem_Write+0x180>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d017      	beq.n	800b650 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	781a      	ldrb	r2, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b646:	b29b      	uxth	r3, r3
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1aa      	bne.n	800b5ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 fe1a 	bl	800c296 <I2C_WaitOnBTFFlagUntilTimeout>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00d      	beq.n	800b684 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d107      	bne.n	800b680 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b67e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e016      	b.n	800b6b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2220      	movs	r2, #32
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	e000      	b.n	800b6b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b6b0:	2302      	movs	r3, #2
  }
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	00100002 	.word	0x00100002
 800b6c0:	ffff0000 	.word	0xffff0000

0800b6c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08c      	sub	sp, #48	; 0x30
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	817b      	strh	r3, [r7, #10]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	813b      	strh	r3, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6de:	f7fe fa73 	bl	8009bc8 <HAL_GetTick>
 800b6e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b20      	cmp	r3, #32
 800b6ee:	f040 8208 	bne.w	800bb02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	2319      	movs	r3, #25
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	497b      	ldr	r1, [pc, #492]	; (800b8e8 <HAL_I2C_Mem_Read+0x224>)
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 fcb3 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b708:	2302      	movs	r3, #2
 800b70a:	e1fb      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_I2C_Mem_Read+0x56>
 800b716:	2302      	movs	r3, #2
 800b718:	e1f4      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d007      	beq.n	800b740 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f042 0201 	orr.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b74e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2222      	movs	r2, #34	; 0x22
 800b754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2240      	movs	r2, #64	; 0x40
 800b75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4a5b      	ldr	r2, [pc, #364]	; (800b8ec <HAL_I2C_Mem_Read+0x228>)
 800b780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b782:	88f8      	ldrh	r0, [r7, #6]
 800b784:	893a      	ldrh	r2, [r7, #8]
 800b786:	8979      	ldrh	r1, [r7, #10]
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	9301      	str	r3, [sp, #4]
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4603      	mov	r3, r0
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 fb80 	bl	800be98 <I2C_RequestMemoryRead>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e1b0      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d113      	bne.n	800b7d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	623b      	str	r3, [r7, #32]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	623b      	str	r3, [r7, #32]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	623b      	str	r3, [r7, #32]
 800b7be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	e184      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d11b      	bne.n	800b812 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	61fb      	str	r3, [r7, #28]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	61fb      	str	r3, [r7, #28]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b80e:	601a      	str	r2, [r3, #0]
 800b810:	e164      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b816:	2b02      	cmp	r3, #2
 800b818:	d11b      	bne.n	800b852 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b828:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b83a:	2300      	movs	r3, #0
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	61bb      	str	r3, [r7, #24]
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	e144      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b868:	e138      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b86e:	2b03      	cmp	r3, #3
 800b870:	f200 80f1 	bhi.w	800ba56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d123      	bne.n	800b8c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 fd49 	bl	800c318 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e139      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	691a      	ldr	r2, [r3, #16]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8c2:	e10b      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d14e      	bne.n	800b96a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4906      	ldr	r1, [pc, #24]	; (800b8f0 <HAL_I2C_Mem_Read+0x22c>)
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f000 fbc6 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e10e      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
 800b8e6:	bf00      	nop
 800b8e8:	00100002 	.word	0x00100002
 800b8ec:	ffff0000 	.word	0xffff0000
 800b8f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	691a      	ldr	r2, [r3, #16]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b920:	3b01      	subs	r3, #1
 800b922:	b29a      	uxth	r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	3b01      	subs	r3, #1
 800b930:	b29a      	uxth	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	691a      	ldr	r2, [r3, #16]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	b2d2      	uxtb	r2, r2
 800b942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b952:	3b01      	subs	r3, #1
 800b954:	b29a      	uxth	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b95e:	b29b      	uxth	r3, r3
 800b960:	3b01      	subs	r3, #1
 800b962:	b29a      	uxth	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b968:	e0b8      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	2200      	movs	r2, #0
 800b972:	4966      	ldr	r1, [pc, #408]	; (800bb0c <HAL_I2C_Mem_Read+0x448>)
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 fb77 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e0bf      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691a      	ldr	r2, [r3, #16]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	494f      	ldr	r1, [pc, #316]	; (800bb0c <HAL_I2C_Mem_Read+0x448>)
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 fb49 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e091      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	691a      	ldr	r2, [r3, #16]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	b2d2      	uxtb	r2, r2
 800b9fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	691a      	ldr	r2, [r3, #16]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	b2d2      	uxtb	r2, r2
 800ba2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba54:	e042      	b.n	800badc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 fc5c 	bl	800c318 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e04c      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	691a      	ldr	r2, [r3, #16]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	b2d2      	uxtb	r2, r2
 800ba76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba86:	3b01      	subs	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	3b01      	subs	r3, #1
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	f003 0304 	and.w	r3, r3, #4
 800baa6:	2b04      	cmp	r3, #4
 800baa8:	d118      	bne.n	800badc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	691a      	ldr	r2, [r3, #16]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	b2d2      	uxtb	r2, r2
 800bab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac6:	3b01      	subs	r3, #1
 800bac8:	b29a      	uxth	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	3b01      	subs	r3, #1
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f47f aec2 	bne.w	800b86a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2220      	movs	r2, #32
 800baea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e000      	b.n	800bb04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb02:	2302      	movs	r3, #2
  }
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3728      	adds	r7, #40	; 0x28
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	00010004 	.word	0x00010004

0800bb10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08a      	sub	sp, #40	; 0x28
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	607a      	str	r2, [r7, #4]
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800bb20:	f7fe f852 	bl	8009bc8 <HAL_GetTick>
 800bb24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	f040 8111 	bne.w	800bd5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	2319      	movs	r3, #25
 800bb3e:	2201      	movs	r2, #1
 800bb40:	4988      	ldr	r1, [pc, #544]	; (800bd64 <HAL_I2C_IsDeviceReady+0x254>)
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f000 fa90 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800bb4e:	2302      	movs	r3, #2
 800bb50:	e104      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d101      	bne.n	800bb60 <HAL_I2C_IsDeviceReady+0x50>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e0fd      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d007      	beq.n	800bb86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f042 0201 	orr.w	r2, r2, #1
 800bb84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2224      	movs	r2, #36	; 0x24
 800bb9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4a70      	ldr	r2, [pc, #448]	; (800bd68 <HAL_I2C_IsDeviceReady+0x258>)
 800bba8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 fa4e 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00d      	beq.n	800bbee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe0:	d103      	bne.n	800bbea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbe8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e0b6      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bbee:	897b      	ldrh	r3, [r7, #10]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bbfc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800bbfe:	f7fd ffe3 	bl	8009bc8 <HAL_GetTick>
 800bc02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	f003 0302 	and.w	r3, r3, #2
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	bf0c      	ite	eq
 800bc12:	2301      	moveq	r3, #1
 800bc14:	2300      	movne	r3, #0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc28:	bf0c      	ite	eq
 800bc2a:	2301      	moveq	r3, #1
 800bc2c:	2300      	movne	r3, #0
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800bc32:	e025      	b.n	800bc80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc34:	f7fd ffc8 	bl	8009bc8 <HAL_GetTick>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d302      	bcc.n	800bc4a <HAL_I2C_IsDeviceReady+0x13a>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d103      	bne.n	800bc52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	22a0      	movs	r2, #160	; 0xa0
 800bc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	695b      	ldr	r3, [r3, #20]
 800bc58:	f003 0302 	and.w	r3, r3, #2
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	bf0c      	ite	eq
 800bc60:	2301      	moveq	r3, #1
 800bc62:	2300      	movne	r3, #0
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc76:	bf0c      	ite	eq
 800bc78:	2301      	moveq	r3, #1
 800bc7a:	2300      	movne	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2ba0      	cmp	r3, #160	; 0xa0
 800bc8a:	d005      	beq.n	800bc98 <HAL_I2C_IsDeviceReady+0x188>
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d102      	bne.n	800bc98 <HAL_I2C_IsDeviceReady+0x188>
 800bc92:	7dbb      	ldrb	r3, [r7, #22]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0cd      	beq.n	800bc34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d129      	bne.n	800bd02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcbc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	2319      	movs	r3, #25
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4921      	ldr	r1, [pc, #132]	; (800bd64 <HAL_I2C_IsDeviceReady+0x254>)
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f9c2 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e036      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e02c      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	2319      	movs	r3, #25
 800bd22:	2201      	movs	r2, #1
 800bd24:	490f      	ldr	r1, [pc, #60]	; (800bd64 <HAL_I2C_IsDeviceReady+0x254>)
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 f99e 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e012      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	f4ff af32 	bcc.w	800bbaa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800bd5a:	2302      	movs	r3, #2
  }
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	00100002 	.word	0x00100002
 800bd68:	ffff0000 	.word	0xffff0000

0800bd6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	4608      	mov	r0, r1
 800bd76:	4611      	mov	r1, r2
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	817b      	strh	r3, [r7, #10]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	813b      	strh	r3, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 f960 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00d      	beq.n	800bdca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdbc:	d103      	bne.n	800bdc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e05f      	b.n	800be8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdca:	897b      	ldrh	r3, [r7, #10]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bdd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	6a3a      	ldr	r2, [r7, #32]
 800bdde:	492d      	ldr	r1, [pc, #180]	; (800be94 <I2C_RequestMemoryWrite+0x128>)
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 f998 	bl	800c116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e04c      	b.n	800be8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	617b      	str	r3, [r7, #20]
 800be04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be08:	6a39      	ldr	r1, [r7, #32]
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 fa02 	bl	800c214 <I2C_WaitOnTXEFlagUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00d      	beq.n	800be32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1a:	2b04      	cmp	r3, #4
 800be1c:	d107      	bne.n	800be2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e02b      	b.n	800be8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be32:	88fb      	ldrh	r3, [r7, #6]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d105      	bne.n	800be44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be38:	893b      	ldrh	r3, [r7, #8]
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	611a      	str	r2, [r3, #16]
 800be42:	e021      	b.n	800be88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800be44:	893b      	ldrh	r3, [r7, #8]
 800be46:	0a1b      	lsrs	r3, r3, #8
 800be48:	b29b      	uxth	r3, r3
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be54:	6a39      	ldr	r1, [r7, #32]
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f000 f9dc 	bl	800c214 <I2C_WaitOnTXEFlagUntilTimeout>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00d      	beq.n	800be7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be66:	2b04      	cmp	r3, #4
 800be68:	d107      	bne.n	800be7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e005      	b.n	800be8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be7e:	893b      	ldrh	r3, [r7, #8]
 800be80:	b2da      	uxtb	r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	00010002 	.word	0x00010002

0800be98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	4608      	mov	r0, r1
 800bea2:	4611      	mov	r1, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	4603      	mov	r3, r0
 800bea8:	817b      	strh	r3, [r7, #10]
 800beaa:	460b      	mov	r3, r1
 800beac:	813b      	strh	r3, [r7, #8]
 800beae:	4613      	mov	r3, r2
 800beb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	2200      	movs	r2, #0
 800beda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 f8c2 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00d      	beq.n	800bf06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bef8:	d103      	bne.n	800bf02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e0aa      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf06:	897b      	ldrh	r3, [r7, #10]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bf14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	6a3a      	ldr	r2, [r7, #32]
 800bf1a:	4952      	ldr	r1, [pc, #328]	; (800c064 <I2C_RequestMemoryRead+0x1cc>)
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 f8fa 	bl	800c116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e097      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf44:	6a39      	ldr	r1, [r7, #32]
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 f964 	bl	800c214 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00d      	beq.n	800bf6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	2b04      	cmp	r3, #4
 800bf58:	d107      	bne.n	800bf6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e076      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf6e:	88fb      	ldrh	r3, [r7, #6]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d105      	bne.n	800bf80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf74:	893b      	ldrh	r3, [r7, #8]
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	611a      	str	r2, [r3, #16]
 800bf7e:	e021      	b.n	800bfc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bf80:	893b      	ldrh	r3, [r7, #8]
 800bf82:	0a1b      	lsrs	r3, r3, #8
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf90:	6a39      	ldr	r1, [r7, #32]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f93e 	bl	800c214 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00d      	beq.n	800bfba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d107      	bne.n	800bfb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e050      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bfba:	893b      	ldrh	r3, [r7, #8]
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc6:	6a39      	ldr	r1, [r7, #32]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f923 	bl	800c214 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00d      	beq.n	800bff0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	d107      	bne.n	800bfec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e035      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bffe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	2200      	movs	r2, #0
 800c008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 f82b 	bl	800c068 <I2C_WaitOnFlagUntilTimeout>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00d      	beq.n	800c034 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c026:	d103      	bne.n	800c030 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c02e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c030:	2303      	movs	r3, #3
 800c032:	e013      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c034:	897b      	ldrh	r3, [r7, #10]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f043 0301 	orr.w	r3, r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	6a3a      	ldr	r2, [r7, #32]
 800c048:	4906      	ldr	r1, [pc, #24]	; (800c064 <I2C_RequestMemoryRead+0x1cc>)
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 f863 	bl	800c116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	00010002 	.word	0x00010002

0800c068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	4613      	mov	r3, r2
 800c076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c078:	e025      	b.n	800c0c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c080:	d021      	beq.n	800c0c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c082:	f7fd fda1 	bl	8009bc8 <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d302      	bcc.n	800c098 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d116      	bne.n	800c0c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	f043 0220 	orr.w	r2, r3, #32
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e023      	b.n	800c10e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	0c1b      	lsrs	r3, r3, #16
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d10d      	bne.n	800c0ec <I2C_WaitOnFlagUntilTimeout+0x84>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	43da      	mvns	r2, r3
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	4013      	ands	r3, r2
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bf0c      	ite	eq
 800c0e2:	2301      	moveq	r3, #1
 800c0e4:	2300      	movne	r3, #0
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	e00c      	b.n	800c106 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	43da      	mvns	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bf0c      	ite	eq
 800c0fe:	2301      	moveq	r3, #1
 800c100:	2300      	movne	r3, #0
 800c102:	b2db      	uxtb	r3, r3
 800c104:	461a      	mov	r2, r3
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d0b6      	beq.n	800c07a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	607a      	str	r2, [r7, #4]
 800c122:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c124:	e051      	b.n	800c1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c134:	d123      	bne.n	800c17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c144:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c14e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2220      	movs	r2, #32
 800c15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	f043 0204 	orr.w	r2, r3, #4
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e046      	b.n	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c184:	d021      	beq.n	800c1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c186:	f7fd fd1f 	bl	8009bc8 <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	429a      	cmp	r2, r3
 800c194:	d302      	bcc.n	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d116      	bne.n	800c1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2220      	movs	r2, #32
 800c1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b6:	f043 0220 	orr.w	r2, r3, #32
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e020      	b.n	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	0c1b      	lsrs	r3, r3, #16
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d10c      	bne.n	800c1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	43da      	mvns	r2, r3
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	4013      	ands	r3, r2
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	bf14      	ite	ne
 800c1e6:	2301      	movne	r3, #1
 800c1e8:	2300      	moveq	r3, #0
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	e00b      	b.n	800c206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	699b      	ldr	r3, [r3, #24]
 800c1f4:	43da      	mvns	r2, r3
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bf14      	ite	ne
 800c200:	2301      	movne	r3, #1
 800c202:	2300      	moveq	r3, #0
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d18d      	bne.n	800c126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c220:	e02d      	b.n	800c27e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 f8ce 	bl	800c3c4 <I2C_IsAcknowledgeFailed>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e02d      	b.n	800c28e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c238:	d021      	beq.n	800c27e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c23a:	f7fd fcc5 	bl	8009bc8 <HAL_GetTick>
 800c23e:	4602      	mov	r2, r0
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	1ad3      	subs	r3, r2, r3
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	d302      	bcc.n	800c250 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d116      	bne.n	800c27e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2220      	movs	r2, #32
 800c25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26a:	f043 0220 	orr.w	r2, r3, #32
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e007      	b.n	800c28e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c288:	2b80      	cmp	r3, #128	; 0x80
 800c28a:	d1ca      	bne.n	800c222 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2a2:	e02d      	b.n	800c300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f88d 	bl	800c3c4 <I2C_IsAcknowledgeFailed>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e02d      	b.n	800c310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ba:	d021      	beq.n	800c300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2bc:	f7fd fc84 	bl	8009bc8 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d302      	bcc.n	800c2d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d116      	bne.n	800c300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2220      	movs	r2, #32
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ec:	f043 0220 	orr.w	r2, r3, #32
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e007      	b.n	800c310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	f003 0304 	and.w	r3, r3, #4
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d1ca      	bne.n	800c2a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c324:	e042      	b.n	800c3ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b10      	cmp	r3, #16
 800c332:	d119      	bne.n	800c368 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f06f 0210 	mvn.w	r2, #16
 800c33c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2220      	movs	r2, #32
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e029      	b.n	800c3bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c368:	f7fd fc2e 	bl	8009bc8 <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	429a      	cmp	r2, r3
 800c376:	d302      	bcc.n	800c37e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d116      	bne.n	800c3ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2220      	movs	r2, #32
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	f043 0220 	orr.w	r2, r3, #32
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e007      	b.n	800c3bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b6:	2b40      	cmp	r3, #64	; 0x40
 800c3b8:	d1b5      	bne.n	800c326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3da:	d11b      	bne.n	800c414 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c3e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c400:	f043 0204 	orr.w	r2, r3, #4
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	e000      	b.n	800c416 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
	...

0800c424 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c42e:	2300      	movs	r3, #0
 800c430:	603b      	str	r3, [r7, #0]
 800c432:	4b20      	ldr	r3, [pc, #128]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c436:	4a1f      	ldr	r2, [pc, #124]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c43c:	6413      	str	r3, [r2, #64]	; 0x40
 800c43e:	4b1d      	ldr	r3, [pc, #116]	; (800c4b4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c44a:	4b1b      	ldr	r3, [pc, #108]	; (800c4b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800c44c:	2201      	movs	r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c450:	f7fd fbba 	bl	8009bc8 <HAL_GetTick>
 800c454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c456:	e009      	b.n	800c46c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c458:	f7fd fbb6 	bl	8009bc8 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c466:	d901      	bls.n	800c46c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e01f      	b.n	800c4ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c46c:	4b13      	ldr	r3, [pc, #76]	; (800c4bc <HAL_PWREx_EnableOverDrive+0x98>)
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c478:	d1ee      	bne.n	800c458 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c47a:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c47c:	2201      	movs	r2, #1
 800c47e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c480:	f7fd fba2 	bl	8009bc8 <HAL_GetTick>
 800c484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c486:	e009      	b.n	800c49c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c488:	f7fd fb9e 	bl	8009bc8 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c496:	d901      	bls.n	800c49c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c498:	2303      	movs	r3, #3
 800c49a:	e007      	b.n	800c4ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c49c:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <HAL_PWREx_EnableOverDrive+0x98>)
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a8:	d1ee      	bne.n	800c488 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	40023800 	.word	0x40023800
 800c4b8:	420e0040 	.word	0x420e0040
 800c4bc:	40007000 	.word	0x40007000
 800c4c0:	420e0044 	.word	0x420e0044

0800c4c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e0cc      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c4d8:	4b68      	ldr	r3, [pc, #416]	; (800c67c <HAL_RCC_ClockConfig+0x1b8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 030f 	and.w	r3, r3, #15
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d90c      	bls.n	800c500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4e6:	4b65      	ldr	r3, [pc, #404]	; (800c67c <HAL_RCC_ClockConfig+0x1b8>)
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	b2d2      	uxtb	r2, r2
 800c4ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4ee:	4b63      	ldr	r3, [pc, #396]	; (800c67c <HAL_RCC_ClockConfig+0x1b8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 030f 	and.w	r3, r3, #15
 800c4f6:	683a      	ldr	r2, [r7, #0]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d001      	beq.n	800c500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e0b8      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0302 	and.w	r3, r3, #2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d020      	beq.n	800c54e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0304 	and.w	r3, r3, #4
 800c514:	2b00      	cmp	r3, #0
 800c516:	d005      	beq.n	800c524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c518:	4b59      	ldr	r3, [pc, #356]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	4a58      	ldr	r2, [pc, #352]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c51e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0308 	and.w	r3, r3, #8
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d005      	beq.n	800c53c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c530:	4b53      	ldr	r3, [pc, #332]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	4a52      	ldr	r2, [pc, #328]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c53a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c53c:	4b50      	ldr	r3, [pc, #320]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	494d      	ldr	r1, [pc, #308]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	d044      	beq.n	800c5e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d107      	bne.n	800c572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c562:	4b47      	ldr	r3, [pc, #284]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d119      	bne.n	800c5a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e07f      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	2b02      	cmp	r3, #2
 800c578:	d003      	beq.n	800c582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d107      	bne.n	800c592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c582:	4b3f      	ldr	r3, [pc, #252]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d109      	bne.n	800c5a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e06f      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c592:	4b3b      	ldr	r3, [pc, #236]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0302 	and.w	r3, r3, #2
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e067      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c5a2:	4b37      	ldr	r3, [pc, #220]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f023 0203 	bic.w	r2, r3, #3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	4934      	ldr	r1, [pc, #208]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c5b4:	f7fd fb08 	bl	8009bc8 <HAL_GetTick>
 800c5b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5ba:	e00a      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5bc:	f7fd fb04 	bl	8009bc8 <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d901      	bls.n	800c5d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e04f      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5d2:	4b2b      	ldr	r3, [pc, #172]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f003 020c 	and.w	r2, r3, #12
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d1eb      	bne.n	800c5bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c5e4:	4b25      	ldr	r3, [pc, #148]	; (800c67c <HAL_RCC_ClockConfig+0x1b8>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 030f 	and.w	r3, r3, #15
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d20c      	bcs.n	800c60c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5f2:	4b22      	ldr	r3, [pc, #136]	; (800c67c <HAL_RCC_ClockConfig+0x1b8>)
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5fa:	4b20      	ldr	r3, [pc, #128]	; (800c67c <HAL_RCC_ClockConfig+0x1b8>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 030f 	and.w	r3, r3, #15
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d001      	beq.n	800c60c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	e032      	b.n	800c672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 0304 	and.w	r3, r3, #4
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c618:	4b19      	ldr	r3, [pc, #100]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	4916      	ldr	r1, [pc, #88]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c626:	4313      	orrs	r3, r2
 800c628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 0308 	and.w	r3, r3, #8
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c636:	4b12      	ldr	r3, [pc, #72]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	490e      	ldr	r1, [pc, #56]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c646:	4313      	orrs	r3, r2
 800c648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c64a:	f000 f855 	bl	800c6f8 <HAL_RCC_GetSysClockFreq>
 800c64e:	4602      	mov	r2, r0
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <HAL_RCC_ClockConfig+0x1bc>)
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	091b      	lsrs	r3, r3, #4
 800c656:	f003 030f 	and.w	r3, r3, #15
 800c65a:	490a      	ldr	r1, [pc, #40]	; (800c684 <HAL_RCC_ClockConfig+0x1c0>)
 800c65c:	5ccb      	ldrb	r3, [r1, r3]
 800c65e:	fa22 f303 	lsr.w	r3, r2, r3
 800c662:	4a09      	ldr	r2, [pc, #36]	; (800c688 <HAL_RCC_ClockConfig+0x1c4>)
 800c664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c666:	4b09      	ldr	r3, [pc, #36]	; (800c68c <HAL_RCC_ClockConfig+0x1c8>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fd fa68 	bl	8009b40 <HAL_InitTick>

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	40023c00 	.word	0x40023c00
 800c680:	40023800 	.word	0x40023800
 800c684:	08019090 	.word	0x08019090
 800c688:	2000003c 	.word	0x2000003c
 800c68c:	2000006c 	.word	0x2000006c

0800c690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c690:	b480      	push	{r7}
 800c692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c694:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c696:	681b      	ldr	r3, [r3, #0]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	2000003c 	.word	0x2000003c

0800c6a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c6ac:	f7ff fff0 	bl	800c690 <HAL_RCC_GetHCLKFreq>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	0a9b      	lsrs	r3, r3, #10
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	4903      	ldr	r1, [pc, #12]	; (800c6cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6be:	5ccb      	ldrb	r3, [r1, r3]
 800c6c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	40023800 	.word	0x40023800
 800c6cc:	080190a0 	.word	0x080190a0

0800c6d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c6d4:	f7ff ffdc 	bl	800c690 <HAL_RCC_GetHCLKFreq>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	0b5b      	lsrs	r3, r3, #13
 800c6e0:	f003 0307 	and.w	r3, r3, #7
 800c6e4:	4903      	ldr	r1, [pc, #12]	; (800c6f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6e6:	5ccb      	ldrb	r3, [r1, r3]
 800c6e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	40023800 	.word	0x40023800
 800c6f4:	080190a0 	.word	0x080190a0

0800c6f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6fc:	b0ae      	sub	sp, #184	; 0xb8
 800c6fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800c706:	2300      	movs	r3, #0
 800c708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800c70c:	2300      	movs	r3, #0
 800c70e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c71e:	4bcb      	ldr	r3, [pc, #812]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f003 030c 	and.w	r3, r3, #12
 800c726:	2b0c      	cmp	r3, #12
 800c728:	f200 8206 	bhi.w	800cb38 <HAL_RCC_GetSysClockFreq+0x440>
 800c72c:	a201      	add	r2, pc, #4	; (adr r2, 800c734 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c732:	bf00      	nop
 800c734:	0800c769 	.word	0x0800c769
 800c738:	0800cb39 	.word	0x0800cb39
 800c73c:	0800cb39 	.word	0x0800cb39
 800c740:	0800cb39 	.word	0x0800cb39
 800c744:	0800c771 	.word	0x0800c771
 800c748:	0800cb39 	.word	0x0800cb39
 800c74c:	0800cb39 	.word	0x0800cb39
 800c750:	0800cb39 	.word	0x0800cb39
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800cb39 	.word	0x0800cb39
 800c75c:	0800cb39 	.word	0x0800cb39
 800c760:	0800cb39 	.word	0x0800cb39
 800c764:	0800c969 	.word	0x0800c969
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c768:	4bb9      	ldr	r3, [pc, #740]	; (800ca50 <HAL_RCC_GetSysClockFreq+0x358>)
 800c76a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c76e:	e1e7      	b.n	800cb40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c770:	4bb8      	ldr	r3, [pc, #736]	; (800ca54 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c776:	e1e3      	b.n	800cb40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c778:	4bb4      	ldr	r3, [pc, #720]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c784:	4bb1      	ldr	r3, [pc, #708]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d071      	beq.n	800c874 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c790:	4bae      	ldr	r3, [pc, #696]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	099b      	lsrs	r3, r3, #6
 800c796:	2200      	movs	r2, #0
 800c798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c79c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c7a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	f04f 0000 	mov.w	r0, #0
 800c7be:	f04f 0100 	mov.w	r1, #0
 800c7c2:	0159      	lsls	r1, r3, #5
 800c7c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c7c8:	0150      	lsls	r0, r2, #5
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	1a51      	subs	r1, r2, r1
 800c7d2:	6439      	str	r1, [r7, #64]	; 0x40
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	eb63 0301 	sbc.w	r3, r3, r1
 800c7da:	647b      	str	r3, [r7, #68]	; 0x44
 800c7dc:	f04f 0200 	mov.w	r2, #0
 800c7e0:	f04f 0300 	mov.w	r3, #0
 800c7e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	018b      	lsls	r3, r1, #6
 800c7ec:	4641      	mov	r1, r8
 800c7ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c7f2:	4641      	mov	r1, r8
 800c7f4:	018a      	lsls	r2, r1, #6
 800c7f6:	4641      	mov	r1, r8
 800c7f8:	1a51      	subs	r1, r2, r1
 800c7fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	eb63 0301 	sbc.w	r3, r3, r1
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c804:	f04f 0200 	mov.w	r2, #0
 800c808:	f04f 0300 	mov.w	r3, #0
 800c80c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c810:	4649      	mov	r1, r9
 800c812:	00cb      	lsls	r3, r1, #3
 800c814:	4641      	mov	r1, r8
 800c816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c81a:	4641      	mov	r1, r8
 800c81c:	00ca      	lsls	r2, r1, #3
 800c81e:	4610      	mov	r0, r2
 800c820:	4619      	mov	r1, r3
 800c822:	4603      	mov	r3, r0
 800c824:	4622      	mov	r2, r4
 800c826:	189b      	adds	r3, r3, r2
 800c828:	633b      	str	r3, [r7, #48]	; 0x30
 800c82a:	462b      	mov	r3, r5
 800c82c:	460a      	mov	r2, r1
 800c82e:	eb42 0303 	adc.w	r3, r2, r3
 800c832:	637b      	str	r3, [r7, #52]	; 0x34
 800c834:	f04f 0200 	mov.w	r2, #0
 800c838:	f04f 0300 	mov.w	r3, #0
 800c83c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c840:	4629      	mov	r1, r5
 800c842:	024b      	lsls	r3, r1, #9
 800c844:	4621      	mov	r1, r4
 800c846:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c84a:	4621      	mov	r1, r4
 800c84c:	024a      	lsls	r2, r1, #9
 800c84e:	4610      	mov	r0, r2
 800c850:	4619      	mov	r1, r3
 800c852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c856:	2200      	movs	r2, #0
 800c858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c85c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c860:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c864:	f7f4 fa80 	bl	8000d68 <__aeabi_uldivmod>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	4613      	mov	r3, r2
 800c86e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c872:	e067      	b.n	800c944 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c874:	4b75      	ldr	r3, [pc, #468]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	099b      	lsrs	r3, r3, #6
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c880:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c88c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c88e:	2300      	movs	r3, #0
 800c890:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c892:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c896:	4622      	mov	r2, r4
 800c898:	462b      	mov	r3, r5
 800c89a:	f04f 0000 	mov.w	r0, #0
 800c89e:	f04f 0100 	mov.w	r1, #0
 800c8a2:	0159      	lsls	r1, r3, #5
 800c8a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c8a8:	0150      	lsls	r0, r2, #5
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	1a51      	subs	r1, r2, r1
 800c8b2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	eb63 0301 	sbc.w	r3, r3, r1
 800c8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8bc:	f04f 0200 	mov.w	r2, #0
 800c8c0:	f04f 0300 	mov.w	r3, #0
 800c8c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	018b      	lsls	r3, r1, #6
 800c8cc:	4641      	mov	r1, r8
 800c8ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c8d2:	4641      	mov	r1, r8
 800c8d4:	018a      	lsls	r2, r1, #6
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	ebb2 0a01 	subs.w	sl, r2, r1
 800c8dc:	4649      	mov	r1, r9
 800c8de:	eb63 0b01 	sbc.w	fp, r3, r1
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	f04f 0300 	mov.w	r3, #0
 800c8ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c8f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8f6:	4692      	mov	sl, r2
 800c8f8:	469b      	mov	fp, r3
 800c8fa:	4623      	mov	r3, r4
 800c8fc:	eb1a 0303 	adds.w	r3, sl, r3
 800c900:	623b      	str	r3, [r7, #32]
 800c902:	462b      	mov	r3, r5
 800c904:	eb4b 0303 	adc.w	r3, fp, r3
 800c908:	627b      	str	r3, [r7, #36]	; 0x24
 800c90a:	f04f 0200 	mov.w	r2, #0
 800c90e:	f04f 0300 	mov.w	r3, #0
 800c912:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c916:	4629      	mov	r1, r5
 800c918:	028b      	lsls	r3, r1, #10
 800c91a:	4621      	mov	r1, r4
 800c91c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c920:	4621      	mov	r1, r4
 800c922:	028a      	lsls	r2, r1, #10
 800c924:	4610      	mov	r0, r2
 800c926:	4619      	mov	r1, r3
 800c928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c92c:	2200      	movs	r2, #0
 800c92e:	673b      	str	r3, [r7, #112]	; 0x70
 800c930:	677a      	str	r2, [r7, #116]	; 0x74
 800c932:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c936:	f7f4 fa17 	bl	8000d68 <__aeabi_uldivmod>
 800c93a:	4602      	mov	r2, r0
 800c93c:	460b      	mov	r3, r1
 800c93e:	4613      	mov	r3, r2
 800c940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c944:	4b41      	ldr	r3, [pc, #260]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	0c1b      	lsrs	r3, r3, #16
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	3301      	adds	r3, #1
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c95a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c966:	e0eb      	b.n	800cb40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c968:	4b38      	ldr	r3, [pc, #224]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c974:	4b35      	ldr	r3, [pc, #212]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d06b      	beq.n	800ca58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c980:	4b32      	ldr	r3, [pc, #200]	; (800ca4c <HAL_RCC_GetSysClockFreq+0x354>)
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	099b      	lsrs	r3, r3, #6
 800c986:	2200      	movs	r2, #0
 800c988:	66bb      	str	r3, [r7, #104]	; 0x68
 800c98a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c98c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	663b      	str	r3, [r7, #96]	; 0x60
 800c994:	2300      	movs	r3, #0
 800c996:	667b      	str	r3, [r7, #100]	; 0x64
 800c998:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c99c:	4622      	mov	r2, r4
 800c99e:	462b      	mov	r3, r5
 800c9a0:	f04f 0000 	mov.w	r0, #0
 800c9a4:	f04f 0100 	mov.w	r1, #0
 800c9a8:	0159      	lsls	r1, r3, #5
 800c9aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c9ae:	0150      	lsls	r0, r2, #5
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	1a51      	subs	r1, r2, r1
 800c9b8:	61b9      	str	r1, [r7, #24]
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	eb63 0301 	sbc.w	r3, r3, r1
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	f04f 0200 	mov.w	r2, #0
 800c9c6:	f04f 0300 	mov.w	r3, #0
 800c9ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c9ce:	4659      	mov	r1, fp
 800c9d0:	018b      	lsls	r3, r1, #6
 800c9d2:	4651      	mov	r1, sl
 800c9d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c9d8:	4651      	mov	r1, sl
 800c9da:	018a      	lsls	r2, r1, #6
 800c9dc:	4651      	mov	r1, sl
 800c9de:	ebb2 0801 	subs.w	r8, r2, r1
 800c9e2:	4659      	mov	r1, fp
 800c9e4:	eb63 0901 	sbc.w	r9, r3, r1
 800c9e8:	f04f 0200 	mov.w	r2, #0
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9fc:	4690      	mov	r8, r2
 800c9fe:	4699      	mov	r9, r3
 800ca00:	4623      	mov	r3, r4
 800ca02:	eb18 0303 	adds.w	r3, r8, r3
 800ca06:	613b      	str	r3, [r7, #16]
 800ca08:	462b      	mov	r3, r5
 800ca0a:	eb49 0303 	adc.w	r3, r9, r3
 800ca0e:	617b      	str	r3, [r7, #20]
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	024b      	lsls	r3, r1, #9
 800ca20:	4621      	mov	r1, r4
 800ca22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ca26:	4621      	mov	r1, r4
 800ca28:	024a      	lsls	r2, r1, #9
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca32:	2200      	movs	r2, #0
 800ca34:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca36:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ca38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca3c:	f7f4 f994 	bl	8000d68 <__aeabi_uldivmod>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4613      	mov	r3, r2
 800ca46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca4a:	e065      	b.n	800cb18 <HAL_RCC_GetSysClockFreq+0x420>
 800ca4c:	40023800 	.word	0x40023800
 800ca50:	00f42400 	.word	0x00f42400
 800ca54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca58:	4b3d      	ldr	r3, [pc, #244]	; (800cb50 <HAL_RCC_GetSysClockFreq+0x458>)
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	099b      	lsrs	r3, r3, #6
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4618      	mov	r0, r3
 800ca62:	4611      	mov	r1, r2
 800ca64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ca68:	653b      	str	r3, [r7, #80]	; 0x50
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	657b      	str	r3, [r7, #84]	; 0x54
 800ca6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800ca72:	4642      	mov	r2, r8
 800ca74:	464b      	mov	r3, r9
 800ca76:	f04f 0000 	mov.w	r0, #0
 800ca7a:	f04f 0100 	mov.w	r1, #0
 800ca7e:	0159      	lsls	r1, r3, #5
 800ca80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca84:	0150      	lsls	r0, r2, #5
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4641      	mov	r1, r8
 800ca8c:	1a51      	subs	r1, r2, r1
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	4649      	mov	r1, r9
 800ca92:	eb63 0301 	sbc.w	r3, r3, r1
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	f04f 0200 	mov.w	r2, #0
 800ca9c:	f04f 0300 	mov.w	r3, #0
 800caa0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800caa4:	4659      	mov	r1, fp
 800caa6:	018b      	lsls	r3, r1, #6
 800caa8:	4651      	mov	r1, sl
 800caaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800caae:	4651      	mov	r1, sl
 800cab0:	018a      	lsls	r2, r1, #6
 800cab2:	4651      	mov	r1, sl
 800cab4:	1a54      	subs	r4, r2, r1
 800cab6:	4659      	mov	r1, fp
 800cab8:	eb63 0501 	sbc.w	r5, r3, r1
 800cabc:	f04f 0200 	mov.w	r2, #0
 800cac0:	f04f 0300 	mov.w	r3, #0
 800cac4:	00eb      	lsls	r3, r5, #3
 800cac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800caca:	00e2      	lsls	r2, r4, #3
 800cacc:	4614      	mov	r4, r2
 800cace:	461d      	mov	r5, r3
 800cad0:	4643      	mov	r3, r8
 800cad2:	18e3      	adds	r3, r4, r3
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	464b      	mov	r3, r9
 800cad8:	eb45 0303 	adc.w	r3, r5, r3
 800cadc:	607b      	str	r3, [r7, #4]
 800cade:	f04f 0200 	mov.w	r2, #0
 800cae2:	f04f 0300 	mov.w	r3, #0
 800cae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800caea:	4629      	mov	r1, r5
 800caec:	028b      	lsls	r3, r1, #10
 800caee:	4621      	mov	r1, r4
 800caf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800caf4:	4621      	mov	r1, r4
 800caf6:	028a      	lsls	r2, r1, #10
 800caf8:	4610      	mov	r0, r2
 800cafa:	4619      	mov	r1, r3
 800cafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb00:	2200      	movs	r2, #0
 800cb02:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb04:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cb06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb0a:	f7f4 f92d 	bl	8000d68 <__aeabi_uldivmod>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	4613      	mov	r3, r2
 800cb14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800cb18:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <HAL_RCC_GetSysClockFreq+0x458>)
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	0f1b      	lsrs	r3, r3, #28
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800cb26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cb2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800cb36:	e003      	b.n	800cb40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cb38:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x45c>)
 800cb3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800cb3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cb40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	37b8      	adds	r7, #184	; 0xb8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb4e:	bf00      	nop
 800cb50:	40023800 	.word	0x40023800
 800cb54:	00f42400 	.word	0x00f42400

0800cb58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e28d      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f000 8083 	beq.w	800cc7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb78:	4b94      	ldr	r3, [pc, #592]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	f003 030c 	and.w	r3, r3, #12
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d019      	beq.n	800cbb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800cb84:	4b91      	ldr	r3, [pc, #580]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d106      	bne.n	800cb9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800cb90:	4b8e      	ldr	r3, [pc, #568]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb9c:	d00c      	beq.n	800cbb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb9e:	4b8b      	ldr	r3, [pc, #556]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800cba6:	2b0c      	cmp	r3, #12
 800cba8:	d112      	bne.n	800cbd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbaa:	4b88      	ldr	r3, [pc, #544]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbb6:	d10b      	bne.n	800cbd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbb8:	4b84      	ldr	r3, [pc, #528]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d05b      	beq.n	800cc7c <HAL_RCC_OscConfig+0x124>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d157      	bne.n	800cc7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e25a      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd8:	d106      	bne.n	800cbe8 <HAL_RCC_OscConfig+0x90>
 800cbda:	4b7c      	ldr	r3, [pc, #496]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a7b      	ldr	r2, [pc, #492]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cbe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	e01d      	b.n	800cc24 <HAL_RCC_OscConfig+0xcc>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbf0:	d10c      	bne.n	800cc0c <HAL_RCC_OscConfig+0xb4>
 800cbf2:	4b76      	ldr	r3, [pc, #472]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a75      	ldr	r2, [pc, #468]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cbf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	4b73      	ldr	r3, [pc, #460]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a72      	ldr	r2, [pc, #456]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	e00b      	b.n	800cc24 <HAL_RCC_OscConfig+0xcc>
 800cc0c:	4b6f      	ldr	r3, [pc, #444]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a6e      	ldr	r2, [pc, #440]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	4b6c      	ldr	r3, [pc, #432]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a6b      	ldr	r2, [pc, #428]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d013      	beq.n	800cc54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc2c:	f7fc ffcc 	bl	8009bc8 <HAL_GetTick>
 800cc30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc32:	e008      	b.n	800cc46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc34:	f7fc ffc8 	bl	8009bc8 <HAL_GetTick>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	2b64      	cmp	r3, #100	; 0x64
 800cc40:	d901      	bls.n	800cc46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e21f      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc46:	4b61      	ldr	r3, [pc, #388]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d0f0      	beq.n	800cc34 <HAL_RCC_OscConfig+0xdc>
 800cc52:	e014      	b.n	800cc7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc54:	f7fc ffb8 	bl	8009bc8 <HAL_GetTick>
 800cc58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc5a:	e008      	b.n	800cc6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc5c:	f7fc ffb4 	bl	8009bc8 <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2b64      	cmp	r3, #100	; 0x64
 800cc68:	d901      	bls.n	800cc6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e20b      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc6e:	4b57      	ldr	r3, [pc, #348]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1f0      	bne.n	800cc5c <HAL_RCC_OscConfig+0x104>
 800cc7a:	e000      	b.n	800cc7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d06f      	beq.n	800cd6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cc8a:	4b50      	ldr	r3, [pc, #320]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f003 030c 	and.w	r3, r3, #12
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d017      	beq.n	800ccc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cc96:	4b4d      	ldr	r3, [pc, #308]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cc9e:	2b08      	cmp	r3, #8
 800cca0:	d105      	bne.n	800ccae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cca2:	4b4a      	ldr	r3, [pc, #296]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00b      	beq.n	800ccc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccae:	4b47      	ldr	r3, [pc, #284]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ccb6:	2b0c      	cmp	r3, #12
 800ccb8:	d11c      	bne.n	800ccf4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccba:	4b44      	ldr	r3, [pc, #272]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d116      	bne.n	800ccf4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccc6:	4b41      	ldr	r3, [pc, #260]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 0302 	and.w	r3, r3, #2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d005      	beq.n	800ccde <HAL_RCC_OscConfig+0x186>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d001      	beq.n	800ccde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e1d3      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccde:	4b3b      	ldr	r3, [pc, #236]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	4937      	ldr	r1, [pc, #220]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccf2:	e03a      	b.n	800cd6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d020      	beq.n	800cd3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ccfc:	4b34      	ldr	r3, [pc, #208]	; (800cdd0 <HAL_RCC_OscConfig+0x278>)
 800ccfe:	2201      	movs	r2, #1
 800cd00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd02:	f7fc ff61 	bl	8009bc8 <HAL_GetTick>
 800cd06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd08:	e008      	b.n	800cd1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd0a:	f7fc ff5d 	bl	8009bc8 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d901      	bls.n	800cd1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e1b4      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd1c:	4b2b      	ldr	r3, [pc, #172]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 0302 	and.w	r3, r3, #2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0f0      	beq.n	800cd0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd28:	4b28      	ldr	r3, [pc, #160]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	4925      	ldr	r1, [pc, #148]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	600b      	str	r3, [r1, #0]
 800cd3c:	e015      	b.n	800cd6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd3e:	4b24      	ldr	r3, [pc, #144]	; (800cdd0 <HAL_RCC_OscConfig+0x278>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd44:	f7fc ff40 	bl	8009bc8 <HAL_GetTick>
 800cd48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd4a:	e008      	b.n	800cd5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd4c:	f7fc ff3c 	bl	8009bc8 <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d901      	bls.n	800cd5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e193      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd5e:	4b1b      	ldr	r3, [pc, #108]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 0302 	and.w	r3, r3, #2
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1f0      	bne.n	800cd4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0308 	and.w	r3, r3, #8
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d036      	beq.n	800cde4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d016      	beq.n	800cdac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd7e:	4b15      	ldr	r3, [pc, #84]	; (800cdd4 <HAL_RCC_OscConfig+0x27c>)
 800cd80:	2201      	movs	r2, #1
 800cd82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd84:	f7fc ff20 	bl	8009bc8 <HAL_GetTick>
 800cd88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd8a:	e008      	b.n	800cd9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd8c:	f7fc ff1c 	bl	8009bc8 <HAL_GetTick>
 800cd90:	4602      	mov	r2, r0
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d901      	bls.n	800cd9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e173      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd9e:	4b0b      	ldr	r3, [pc, #44]	; (800cdcc <HAL_RCC_OscConfig+0x274>)
 800cda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cda2:	f003 0302 	and.w	r3, r3, #2
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0f0      	beq.n	800cd8c <HAL_RCC_OscConfig+0x234>
 800cdaa:	e01b      	b.n	800cde4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <HAL_RCC_OscConfig+0x27c>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdb2:	f7fc ff09 	bl	8009bc8 <HAL_GetTick>
 800cdb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdb8:	e00e      	b.n	800cdd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cdba:	f7fc ff05 	bl	8009bc8 <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	d907      	bls.n	800cdd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	e15c      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
 800cdcc:	40023800 	.word	0x40023800
 800cdd0:	42470000 	.word	0x42470000
 800cdd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdd8:	4b8a      	ldr	r3, [pc, #552]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cdda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1ea      	bne.n	800cdba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0304 	and.w	r3, r3, #4
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 8097 	beq.w	800cf20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cdf6:	4b83      	ldr	r3, [pc, #524]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10f      	bne.n	800ce22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce02:	2300      	movs	r3, #0
 800ce04:	60bb      	str	r3, [r7, #8]
 800ce06:	4b7f      	ldr	r3, [pc, #508]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0a:	4a7e      	ldr	r2, [pc, #504]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce10:	6413      	str	r3, [r2, #64]	; 0x40
 800ce12:	4b7c      	ldr	r3, [pc, #496]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce1a:	60bb      	str	r3, [r7, #8]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce22:	4b79      	ldr	r3, [pc, #484]	; (800d008 <HAL_RCC_OscConfig+0x4b0>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d118      	bne.n	800ce60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce2e:	4b76      	ldr	r3, [pc, #472]	; (800d008 <HAL_RCC_OscConfig+0x4b0>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a75      	ldr	r2, [pc, #468]	; (800d008 <HAL_RCC_OscConfig+0x4b0>)
 800ce34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce3a:	f7fc fec5 	bl	8009bc8 <HAL_GetTick>
 800ce3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce40:	e008      	b.n	800ce54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce42:	f7fc fec1 	bl	8009bc8 <HAL_GetTick>
 800ce46:	4602      	mov	r2, r0
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d901      	bls.n	800ce54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e118      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce54:	4b6c      	ldr	r3, [pc, #432]	; (800d008 <HAL_RCC_OscConfig+0x4b0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0f0      	beq.n	800ce42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d106      	bne.n	800ce76 <HAL_RCC_OscConfig+0x31e>
 800ce68:	4b66      	ldr	r3, [pc, #408]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6c:	4a65      	ldr	r2, [pc, #404]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	6713      	str	r3, [r2, #112]	; 0x70
 800ce74:	e01c      	b.n	800ceb0 <HAL_RCC_OscConfig+0x358>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	2b05      	cmp	r3, #5
 800ce7c:	d10c      	bne.n	800ce98 <HAL_RCC_OscConfig+0x340>
 800ce7e:	4b61      	ldr	r3, [pc, #388]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce82:	4a60      	ldr	r2, [pc, #384]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce84:	f043 0304 	orr.w	r3, r3, #4
 800ce88:	6713      	str	r3, [r2, #112]	; 0x70
 800ce8a:	4b5e      	ldr	r3, [pc, #376]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8e:	4a5d      	ldr	r2, [pc, #372]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce90:	f043 0301 	orr.w	r3, r3, #1
 800ce94:	6713      	str	r3, [r2, #112]	; 0x70
 800ce96:	e00b      	b.n	800ceb0 <HAL_RCC_OscConfig+0x358>
 800ce98:	4b5a      	ldr	r3, [pc, #360]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce9c:	4a59      	ldr	r2, [pc, #356]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ce9e:	f023 0301 	bic.w	r3, r3, #1
 800cea2:	6713      	str	r3, [r2, #112]	; 0x70
 800cea4:	4b57      	ldr	r3, [pc, #348]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	4a56      	ldr	r2, [pc, #344]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ceaa:	f023 0304 	bic.w	r3, r3, #4
 800ceae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d015      	beq.n	800cee4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceb8:	f7fc fe86 	bl	8009bc8 <HAL_GetTick>
 800cebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cebe:	e00a      	b.n	800ced6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cec0:	f7fc fe82 	bl	8009bc8 <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	f241 3288 	movw	r2, #5000	; 0x1388
 800cece:	4293      	cmp	r3, r2
 800ced0:	d901      	bls.n	800ced6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ced2:	2303      	movs	r3, #3
 800ced4:	e0d7      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ced6:	4b4b      	ldr	r3, [pc, #300]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800ced8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceda:	f003 0302 	and.w	r3, r3, #2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d0ee      	beq.n	800cec0 <HAL_RCC_OscConfig+0x368>
 800cee2:	e014      	b.n	800cf0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cee4:	f7fc fe70 	bl	8009bc8 <HAL_GetTick>
 800cee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ceea:	e00a      	b.n	800cf02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ceec:	f7fc fe6c 	bl	8009bc8 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d901      	bls.n	800cf02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	e0c1      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf02:	4b40      	ldr	r3, [pc, #256]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf06:	f003 0302 	and.w	r3, r3, #2
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1ee      	bne.n	800ceec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d105      	bne.n	800cf20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf14:	4b3b      	ldr	r3, [pc, #236]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf18:	4a3a      	ldr	r2, [pc, #232]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cf1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 80ad 	beq.w	800d084 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf2a:	4b36      	ldr	r3, [pc, #216]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	f003 030c 	and.w	r3, r3, #12
 800cf32:	2b08      	cmp	r3, #8
 800cf34:	d060      	beq.n	800cff8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d145      	bne.n	800cfca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf3e:	4b33      	ldr	r3, [pc, #204]	; (800d00c <HAL_RCC_OscConfig+0x4b4>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf44:	f7fc fe40 	bl	8009bc8 <HAL_GetTick>
 800cf48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf4a:	e008      	b.n	800cf5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf4c:	f7fc fe3c 	bl	8009bc8 <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d901      	bls.n	800cf5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e093      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf5e:	4b29      	ldr	r3, [pc, #164]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d1f0      	bne.n	800cf4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	69da      	ldr	r2, [r3, #28]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	431a      	orrs	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	019b      	lsls	r3, r3, #6
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf80:	085b      	lsrs	r3, r3, #1
 800cf82:	3b01      	subs	r3, #1
 800cf84:	041b      	lsls	r3, r3, #16
 800cf86:	431a      	orrs	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8c:	061b      	lsls	r3, r3, #24
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf94:	071b      	lsls	r3, r3, #28
 800cf96:	491b      	ldr	r1, [pc, #108]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf9c:	4b1b      	ldr	r3, [pc, #108]	; (800d00c <HAL_RCC_OscConfig+0x4b4>)
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfa2:	f7fc fe11 	bl	8009bc8 <HAL_GetTick>
 800cfa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfa8:	e008      	b.n	800cfbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfaa:	f7fc fe0d 	bl	8009bc8 <HAL_GetTick>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d901      	bls.n	800cfbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cfb8:	2303      	movs	r3, #3
 800cfba:	e064      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfbc:	4b11      	ldr	r3, [pc, #68]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d0f0      	beq.n	800cfaa <HAL_RCC_OscConfig+0x452>
 800cfc8:	e05c      	b.n	800d084 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfca:	4b10      	ldr	r3, [pc, #64]	; (800d00c <HAL_RCC_OscConfig+0x4b4>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfd0:	f7fc fdfa 	bl	8009bc8 <HAL_GetTick>
 800cfd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfd6:	e008      	b.n	800cfea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfd8:	f7fc fdf6 	bl	8009bc8 <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d901      	bls.n	800cfea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e04d      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfea:	4b06      	ldr	r3, [pc, #24]	; (800d004 <HAL_RCC_OscConfig+0x4ac>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1f0      	bne.n	800cfd8 <HAL_RCC_OscConfig+0x480>
 800cff6:	e045      	b.n	800d084 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d107      	bne.n	800d010 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e040      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
 800d004:	40023800 	.word	0x40023800
 800d008:	40007000 	.word	0x40007000
 800d00c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d010:	4b1f      	ldr	r3, [pc, #124]	; (800d090 <HAL_RCC_OscConfig+0x538>)
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d030      	beq.n	800d080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d028:	429a      	cmp	r2, r3
 800d02a:	d129      	bne.n	800d080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d036:	429a      	cmp	r2, r3
 800d038:	d122      	bne.n	800d080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d040:	4013      	ands	r3, r2
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d048:	4293      	cmp	r3, r2
 800d04a:	d119      	bne.n	800d080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d056:	085b      	lsrs	r3, r3, #1
 800d058:	3b01      	subs	r3, #1
 800d05a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d10f      	bne.n	800d080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d107      	bne.n	800d080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d001      	beq.n	800d084 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e000      	b.n	800d086 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	40023800 	.word	0x40023800

0800d094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e07b      	b.n	800d19e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d108      	bne.n	800d0c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0b6:	d009      	beq.n	800d0cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	61da      	str	r2, [r3, #28]
 800d0be:	e005      	b.n	800d0cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d106      	bne.n	800d0ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7f9 fafe 	bl	80066e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d114:	431a      	orrs	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d11e:	431a      	orrs	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	f003 0302 	and.w	r3, r3, #2
 800d128:	431a      	orrs	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	431a      	orrs	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	699b      	ldr	r3, [r3, #24]
 800d138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d13c:	431a      	orrs	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	69db      	ldr	r3, [r3, #28]
 800d142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d146:	431a      	orrs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d150:	ea42 0103 	orr.w	r1, r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	430a      	orrs	r2, r1
 800d162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	0c1b      	lsrs	r3, r3, #16
 800d16a:	f003 0104 	and.w	r1, r3, #4
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d172:	f003 0210 	and.w	r2, r3, #16
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	69da      	ldr	r2, [r3, #28]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d18c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b088      	sub	sp, #32
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	60f8      	str	r0, [r7, #12]
 800d1ae:	60b9      	str	r1, [r7, #8]
 800d1b0:	603b      	str	r3, [r7, #0]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d101      	bne.n	800d1c8 <HAL_SPI_Transmit+0x22>
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	e126      	b.n	800d416 <HAL_SPI_Transmit+0x270>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d1d0:	f7fc fcfa 	bl	8009bc8 <HAL_GetTick>
 800d1d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d002      	beq.n	800d1ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d1ea:	e10b      	b.n	800d404 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <HAL_SPI_Transmit+0x52>
 800d1f2:	88fb      	ldrh	r3, [r7, #6]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d102      	bne.n	800d1fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d1fc:	e102      	b.n	800d404 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2203      	movs	r2, #3
 800d202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	88fa      	ldrh	r2, [r7, #6]
 800d216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	88fa      	ldrh	r2, [r7, #6]
 800d21c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d244:	d10f      	bne.n	800d266 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d270:	2b40      	cmp	r3, #64	; 0x40
 800d272:	d007      	beq.n	800d284 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d28c:	d14b      	bne.n	800d326 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <HAL_SPI_Transmit+0xf6>
 800d296:	8afb      	ldrh	r3, [r7, #22]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d13e      	bne.n	800d31a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a0:	881a      	ldrh	r2, [r3, #0]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ac:	1c9a      	adds	r2, r3, #2
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d2c0:	e02b      	b.n	800d31a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f003 0302 	and.w	r3, r3, #2
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d112      	bne.n	800d2f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d4:	881a      	ldrh	r2, [r3, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e0:	1c9a      	adds	r2, r3, #2
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	86da      	strh	r2, [r3, #54]	; 0x36
 800d2f4:	e011      	b.n	800d31a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2f6:	f7fc fc67 	bl	8009bc8 <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	429a      	cmp	r2, r3
 800d304:	d803      	bhi.n	800d30e <HAL_SPI_Transmit+0x168>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d30c:	d102      	bne.n	800d314 <HAL_SPI_Transmit+0x16e>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d102      	bne.n	800d31a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d318:	e074      	b.n	800d404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d31e:	b29b      	uxth	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1ce      	bne.n	800d2c2 <HAL_SPI_Transmit+0x11c>
 800d324:	e04c      	b.n	800d3c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <HAL_SPI_Transmit+0x18e>
 800d32e:	8afb      	ldrh	r3, [r7, #22]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d140      	bne.n	800d3b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	330c      	adds	r3, #12
 800d33e:	7812      	ldrb	r2, [r2, #0]
 800d340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b29a      	uxth	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d35a:	e02c      	b.n	800d3b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	2b02      	cmp	r3, #2
 800d368:	d113      	bne.n	800d392 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	330c      	adds	r3, #12
 800d374:	7812      	ldrb	r2, [r2, #0]
 800d376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d386:	b29b      	uxth	r3, r3
 800d388:	3b01      	subs	r3, #1
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	86da      	strh	r2, [r3, #54]	; 0x36
 800d390:	e011      	b.n	800d3b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d392:	f7fc fc19 	bl	8009bc8 <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d803      	bhi.n	800d3aa <HAL_SPI_Transmit+0x204>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3a8:	d102      	bne.n	800d3b0 <HAL_SPI_Transmit+0x20a>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d102      	bne.n	800d3b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d3b4:	e026      	b.n	800d404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1cd      	bne.n	800d35c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 fafd 	bl	800d9c4 <SPI_EndRxTxTransaction>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3de:	2300      	movs	r3, #0
 800d3e0:	613b      	str	r3, [r7, #16]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	613b      	str	r3, [r7, #16]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	613b      	str	r3, [r7, #16]
 800d3f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	77fb      	strb	r3, [r7, #31]
 800d400:	e000      	b.n	800d404 <HAL_SPI_Transmit+0x25e>
  }

error:
 800d402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2201      	movs	r2, #1
 800d408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d414:	7ffb      	ldrb	r3, [r7, #31]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3720      	adds	r7, #32
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	4613      	mov	r3, r2
 800d42c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d101      	bne.n	800d440 <HAL_SPI_Transmit_DMA+0x20>
 800d43c:	2302      	movs	r3, #2
 800d43e:	e09b      	b.n	800d578 <HAL_SPI_Transmit_DMA+0x158>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	2b01      	cmp	r3, #1
 800d452:	d002      	beq.n	800d45a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d454:	2302      	movs	r3, #2
 800d456:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d458:	e089      	b.n	800d56e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <HAL_SPI_Transmit_DMA+0x46>
 800d460:	88fb      	ldrh	r3, [r7, #6]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d102      	bne.n	800d46c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d46a:	e080      	b.n	800d56e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2203      	movs	r2, #3
 800d470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2200      	movs	r2, #0
 800d478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	88fa      	ldrh	r2, [r7, #6]
 800d484:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	88fa      	ldrh	r2, [r7, #6]
 800d48a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2200      	movs	r2, #0
 800d496:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4b2:	d10f      	bne.n	800d4d4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4d8:	4a29      	ldr	r2, [pc, #164]	; (800d580 <HAL_SPI_Transmit_DMA+0x160>)
 800d4da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e0:	4a28      	ldr	r2, [pc, #160]	; (800d584 <HAL_SPI_Transmit_DMA+0x164>)
 800d4e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e8:	4a27      	ldr	r2, [pc, #156]	; (800d588 <HAL_SPI_Transmit_DMA+0x168>)
 800d4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	330c      	adds	r3, #12
 800d504:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d50a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d50c:	f7fd f950 	bl	800a7b0 <HAL_DMA_Start_IT>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00c      	beq.n	800d530 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d51a:	f043 0210 	orr.w	r2, r3, #16
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d52e:	e01e      	b.n	800d56e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d53a:	2b40      	cmp	r3, #64	; 0x40
 800d53c:	d007      	beq.n	800d54e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d54c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f042 0220 	orr.w	r2, r2, #32
 800d55c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	685a      	ldr	r2, [r3, #4]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f042 0202 	orr.w	r2, r2, #2
 800d56c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d576:	7dfb      	ldrb	r3, [r7, #23]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	0800d831 	.word	0x0800d831
 800d584:	0800d789 	.word	0x0800d789
 800d588:	0800d84d 	.word	0x0800d84d

0800d58c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10e      	bne.n	800d5cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d009      	beq.n	800d5cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d004      	beq.n	800d5cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	4798      	blx	r3
    return;
 800d5ca:	e0ce      	b.n	800d76a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	f003 0302 	and.w	r3, r3, #2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d009      	beq.n	800d5ea <HAL_SPI_IRQHandler+0x5e>
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d004      	beq.n	800d5ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	4798      	blx	r3
    return;
 800d5e8:	e0bf      	b.n	800d76a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	f003 0320 	and.w	r3, r3, #32
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10a      	bne.n	800d60a <HAL_SPI_IRQHandler+0x7e>
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d105      	bne.n	800d60a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 80b0 	beq.w	800d76a <HAL_SPI_IRQHandler+0x1de>
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	f003 0320 	and.w	r3, r3, #32
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 80aa 	beq.w	800d76a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d023      	beq.n	800d668 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b03      	cmp	r3, #3
 800d62a:	d011      	beq.n	800d650 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d630:	f043 0204 	orr.w	r2, r3, #4
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	617b      	str	r3, [r7, #20]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	617b      	str	r3, [r7, #20]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	e00b      	b.n	800d668 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d650:	2300      	movs	r3, #0
 800d652:	613b      	str	r3, [r7, #16]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	613b      	str	r3, [r7, #16]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	613b      	str	r3, [r7, #16]
 800d664:	693b      	ldr	r3, [r7, #16]
        return;
 800d666:	e080      	b.n	800d76a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d014      	beq.n	800d69c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d676:	f043 0201 	orr.w	r2, r3, #1
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	60fb      	str	r3, [r7, #12]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00c      	beq.n	800d6c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6aa:	f043 0208 	orr.w	r2, r3, #8
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60bb      	str	r3, [r7, #8]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	60bb      	str	r3, [r7, #8]
 800d6be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d04f      	beq.n	800d768 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d6d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	f003 0302 	and.w	r3, r3, #2
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d104      	bne.n	800d6f4 <HAL_SPI_IRQHandler+0x168>
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	f003 0301 	and.w	r3, r3, #1
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d034      	beq.n	800d75e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	685a      	ldr	r2, [r3, #4]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f022 0203 	bic.w	r2, r2, #3
 800d702:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d011      	beq.n	800d730 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d710:	4a17      	ldr	r2, [pc, #92]	; (800d770 <HAL_SPI_IRQHandler+0x1e4>)
 800d712:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fd f911 	bl	800a940 <HAL_DMA_Abort_IT>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d005      	beq.n	800d730 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d734:	2b00      	cmp	r3, #0
 800d736:	d016      	beq.n	800d766 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d73c:	4a0c      	ldr	r2, [pc, #48]	; (800d770 <HAL_SPI_IRQHandler+0x1e4>)
 800d73e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d744:	4618      	mov	r0, r3
 800d746:	f7fd f8fb 	bl	800a940 <HAL_DMA_Abort_IT>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00a      	beq.n	800d766 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d75c:	e003      	b.n	800d766 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7fa fb1a 	bl	8007d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d764:	e000      	b.n	800d768 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d766:	bf00      	nop
    return;
 800d768:	bf00      	nop
  }
}
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	0800d88d 	.word	0x0800d88d

0800d774 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d794:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d796:	f7fc fa17 	bl	8009bc8 <HAL_GetTick>
 800d79a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7aa:	d03b      	beq.n	800d824 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f022 0220 	bic.w	r2, r2, #32
 800d7ba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f022 0202 	bic.w	r2, r2, #2
 800d7ca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	2164      	movs	r1, #100	; 0x64
 800d7d0:	6978      	ldr	r0, [r7, #20]
 800d7d2:	f000 f8f7 	bl	800d9c4 <SPI_EndRxTxTransaction>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d005      	beq.n	800d7e8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e0:	f043 0220 	orr.w	r2, r3, #32
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10a      	bne.n	800d806 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2200      	movs	r2, #0
 800d80a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d81c:	6978      	ldr	r0, [r7, #20]
 800d81e:	f7fa fabb 	bl	8007d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d822:	e002      	b.n	800d82a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d824:	6978      	ldr	r0, [r7, #20]
 800d826:	f7fa facd 	bl	8007dc4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f7ff ff98 	bl	800d774 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d844:	bf00      	nop
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d858:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f022 0203 	bic.w	r2, r2, #3
 800d868:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86e:	f043 0210 	orr.w	r2, r3, #16
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f7fa fa8a 	bl	8007d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d884:	bf00      	nop
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d898:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f7fa fa76 	bl	8007d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d8ac:	bf00      	nop
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	603b      	str	r3, [r7, #0]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d8c4:	f7fc f980 	bl	8009bc8 <HAL_GetTick>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	1a9b      	subs	r3, r3, r2
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d8d4:	f7fc f978 	bl	8009bc8 <HAL_GetTick>
 800d8d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d8da:	4b39      	ldr	r3, [pc, #228]	; (800d9c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	015b      	lsls	r3, r3, #5
 800d8e0:	0d1b      	lsrs	r3, r3, #20
 800d8e2:	69fa      	ldr	r2, [r7, #28]
 800d8e4:	fb02 f303 	mul.w	r3, r2, r3
 800d8e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8ea:	e054      	b.n	800d996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8f2:	d050      	beq.n	800d996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8f4:	f7fc f968 	bl	8009bc8 <HAL_GetTick>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	69fa      	ldr	r2, [r7, #28]
 800d900:	429a      	cmp	r2, r3
 800d902:	d902      	bls.n	800d90a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d13d      	bne.n	800d986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d922:	d111      	bne.n	800d948 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d92c:	d004      	beq.n	800d938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d936:	d107      	bne.n	800d948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d950:	d10f      	bne.n	800d972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e017      	b.n	800d9b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d98c:	2300      	movs	r3, #0
 800d98e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	3b01      	subs	r3, #1
 800d994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	4013      	ands	r3, r2
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	bf0c      	ite	eq
 800d9a6:	2301      	moveq	r3, #1
 800d9a8:	2300      	movne	r3, #0
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d19b      	bne.n	800d8ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3720      	adds	r7, #32
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	2000003c 	.word	0x2000003c

0800d9c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d9d0:	4b1b      	ldr	r3, [pc, #108]	; (800da40 <SPI_EndRxTxTransaction+0x7c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a1b      	ldr	r2, [pc, #108]	; (800da44 <SPI_EndRxTxTransaction+0x80>)
 800d9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9da:	0d5b      	lsrs	r3, r3, #21
 800d9dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9e0:	fb02 f303 	mul.w	r3, r2, r3
 800d9e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9ee:	d112      	bne.n	800da16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2180      	movs	r1, #128	; 0x80
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f7ff ff5a 	bl	800d8b4 <SPI_WaitFlagStateUntilTimeout>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d016      	beq.n	800da34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da0a:	f043 0220 	orr.w	r2, r3, #32
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e00f      	b.n	800da36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00a      	beq.n	800da32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	3b01      	subs	r3, #1
 800da20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da2c:	2b80      	cmp	r3, #128	; 0x80
 800da2e:	d0f2      	beq.n	800da16 <SPI_EndRxTxTransaction+0x52>
 800da30:	e000      	b.n	800da34 <SPI_EndRxTxTransaction+0x70>
        break;
 800da32:	bf00      	nop
  }

  return HAL_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	2000003c 	.word	0x2000003c
 800da44:	165e9f81 	.word	0x165e9f81

0800da48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e041      	b.n	800dade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d106      	bne.n	800da74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7f8 fedc 	bl	800682c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3304      	adds	r3, #4
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f000 fa96 	bl	800dfb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
	...

0800dae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d001      	beq.n	800db00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e04e      	b.n	800db9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68da      	ldr	r2, [r3, #12]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f042 0201 	orr.w	r2, r2, #1
 800db16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a23      	ldr	r2, [pc, #140]	; (800dbac <HAL_TIM_Base_Start_IT+0xc4>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d022      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db2a:	d01d      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a1f      	ldr	r2, [pc, #124]	; (800dbb0 <HAL_TIM_Base_Start_IT+0xc8>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d018      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a1e      	ldr	r2, [pc, #120]	; (800dbb4 <HAL_TIM_Base_Start_IT+0xcc>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d013      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a1c      	ldr	r2, [pc, #112]	; (800dbb8 <HAL_TIM_Base_Start_IT+0xd0>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d00e      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a1b      	ldr	r2, [pc, #108]	; (800dbbc <HAL_TIM_Base_Start_IT+0xd4>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d009      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a19      	ldr	r2, [pc, #100]	; (800dbc0 <HAL_TIM_Base_Start_IT+0xd8>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d004      	beq.n	800db68 <HAL_TIM_Base_Start_IT+0x80>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a18      	ldr	r2, [pc, #96]	; (800dbc4 <HAL_TIM_Base_Start_IT+0xdc>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d111      	bne.n	800db8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b06      	cmp	r3, #6
 800db78:	d010      	beq.n	800db9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f042 0201 	orr.w	r2, r2, #1
 800db88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db8a:	e007      	b.n	800db9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f042 0201 	orr.w	r2, r2, #1
 800db9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	40010000 	.word	0x40010000
 800dbb0:	40000400 	.word	0x40000400
 800dbb4:	40000800 	.word	0x40000800
 800dbb8:	40000c00 	.word	0x40000c00
 800dbbc:	40010400 	.word	0x40010400
 800dbc0:	40014000 	.word	0x40014000
 800dbc4:	40001800 	.word	0x40001800

0800dbc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	f003 0302 	and.w	r3, r3, #2
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d122      	bne.n	800dc24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	f003 0302 	and.w	r3, r3, #2
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	d11b      	bne.n	800dc24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f06f 0202 	mvn.w	r2, #2
 800dbf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	f003 0303 	and.w	r3, r3, #3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d003      	beq.n	800dc12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f9b5 	bl	800df7a <HAL_TIM_IC_CaptureCallback>
 800dc10:	e005      	b.n	800dc1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f9a7 	bl	800df66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f9b8 	bl	800df8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	f003 0304 	and.w	r3, r3, #4
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	d122      	bne.n	800dc78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	f003 0304 	and.w	r3, r3, #4
 800dc3c:	2b04      	cmp	r3, #4
 800dc3e:	d11b      	bne.n	800dc78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f06f 0204 	mvn.w	r2, #4
 800dc48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f98b 	bl	800df7a <HAL_TIM_IC_CaptureCallback>
 800dc64:	e005      	b.n	800dc72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f97d 	bl	800df66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f98e 	bl	800df8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	f003 0308 	and.w	r3, r3, #8
 800dc82:	2b08      	cmp	r3, #8
 800dc84:	d122      	bne.n	800dccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	f003 0308 	and.w	r3, r3, #8
 800dc90:	2b08      	cmp	r3, #8
 800dc92:	d11b      	bne.n	800dccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f06f 0208 	mvn.w	r2, #8
 800dc9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2204      	movs	r2, #4
 800dca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	f003 0303 	and.w	r3, r3, #3
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 f961 	bl	800df7a <HAL_TIM_IC_CaptureCallback>
 800dcb8:	e005      	b.n	800dcc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f953 	bl	800df66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f964 	bl	800df8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	f003 0310 	and.w	r3, r3, #16
 800dcd6:	2b10      	cmp	r3, #16
 800dcd8:	d122      	bne.n	800dd20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	f003 0310 	and.w	r3, r3, #16
 800dce4:	2b10      	cmp	r3, #16
 800dce6:	d11b      	bne.n	800dd20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f06f 0210 	mvn.w	r2, #16
 800dcf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2208      	movs	r2, #8
 800dcf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	69db      	ldr	r3, [r3, #28]
 800dcfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d003      	beq.n	800dd0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f937 	bl	800df7a <HAL_TIM_IC_CaptureCallback>
 800dd0c:	e005      	b.n	800dd1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f929 	bl	800df66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f93a 	bl	800df8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	691b      	ldr	r3, [r3, #16]
 800dd26:	f003 0301 	and.w	r3, r3, #1
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d10e      	bne.n	800dd4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d107      	bne.n	800dd4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f06f 0201 	mvn.w	r2, #1
 800dd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7f8 f9ec 	bl	8006124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd56:	2b80      	cmp	r3, #128	; 0x80
 800dd58:	d10e      	bne.n	800dd78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd64:	2b80      	cmp	r3, #128	; 0x80
 800dd66:	d107      	bne.n	800dd78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fae0 	bl	800e338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd82:	2b40      	cmp	r3, #64	; 0x40
 800dd84:	d10e      	bne.n	800dda4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd90:	2b40      	cmp	r3, #64	; 0x40
 800dd92:	d107      	bne.n	800dda4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f8ff 	bl	800dfa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f003 0320 	and.w	r3, r3, #32
 800ddae:	2b20      	cmp	r3, #32
 800ddb0:	d10e      	bne.n	800ddd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	f003 0320 	and.w	r3, r3, #32
 800ddbc:	2b20      	cmp	r3, #32
 800ddbe:	d107      	bne.n	800ddd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f06f 0220 	mvn.w	r2, #32
 800ddc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 faaa 	bl	800e324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dde2:	2300      	movs	r3, #0
 800dde4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d101      	bne.n	800ddf4 <HAL_TIM_ConfigClockSource+0x1c>
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	e0b4      	b.n	800df5e <HAL_TIM_ConfigClockSource+0x186>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2202      	movs	r2, #2
 800de00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800de12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de2c:	d03e      	beq.n	800deac <HAL_TIM_ConfigClockSource+0xd4>
 800de2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de32:	f200 8087 	bhi.w	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de3a:	f000 8086 	beq.w	800df4a <HAL_TIM_ConfigClockSource+0x172>
 800de3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de42:	d87f      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de44:	2b70      	cmp	r3, #112	; 0x70
 800de46:	d01a      	beq.n	800de7e <HAL_TIM_ConfigClockSource+0xa6>
 800de48:	2b70      	cmp	r3, #112	; 0x70
 800de4a:	d87b      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de4c:	2b60      	cmp	r3, #96	; 0x60
 800de4e:	d050      	beq.n	800def2 <HAL_TIM_ConfigClockSource+0x11a>
 800de50:	2b60      	cmp	r3, #96	; 0x60
 800de52:	d877      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de54:	2b50      	cmp	r3, #80	; 0x50
 800de56:	d03c      	beq.n	800ded2 <HAL_TIM_ConfigClockSource+0xfa>
 800de58:	2b50      	cmp	r3, #80	; 0x50
 800de5a:	d873      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de5c:	2b40      	cmp	r3, #64	; 0x40
 800de5e:	d058      	beq.n	800df12 <HAL_TIM_ConfigClockSource+0x13a>
 800de60:	2b40      	cmp	r3, #64	; 0x40
 800de62:	d86f      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de64:	2b30      	cmp	r3, #48	; 0x30
 800de66:	d064      	beq.n	800df32 <HAL_TIM_ConfigClockSource+0x15a>
 800de68:	2b30      	cmp	r3, #48	; 0x30
 800de6a:	d86b      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de6c:	2b20      	cmp	r3, #32
 800de6e:	d060      	beq.n	800df32 <HAL_TIM_ConfigClockSource+0x15a>
 800de70:	2b20      	cmp	r3, #32
 800de72:	d867      	bhi.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
 800de74:	2b00      	cmp	r3, #0
 800de76:	d05c      	beq.n	800df32 <HAL_TIM_ConfigClockSource+0x15a>
 800de78:	2b10      	cmp	r3, #16
 800de7a:	d05a      	beq.n	800df32 <HAL_TIM_ConfigClockSource+0x15a>
 800de7c:	e062      	b.n	800df44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6818      	ldr	r0, [r3, #0]
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	6899      	ldr	r1, [r3, #8]
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	685a      	ldr	r2, [r3, #4]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	f000 f9ad 	bl	800e1ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	609a      	str	r2, [r3, #8]
      break;
 800deaa:	e04f      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6818      	ldr	r0, [r3, #0]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	6899      	ldr	r1, [r3, #8]
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	685a      	ldr	r2, [r3, #4]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	f000 f996 	bl	800e1ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	689a      	ldr	r2, [r3, #8]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dece:	609a      	str	r2, [r3, #8]
      break;
 800ded0:	e03c      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6818      	ldr	r0, [r3, #0]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	6859      	ldr	r1, [r3, #4]
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	461a      	mov	r2, r3
 800dee0:	f000 f90a 	bl	800e0f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2150      	movs	r1, #80	; 0x50
 800deea:	4618      	mov	r0, r3
 800deec:	f000 f963 	bl	800e1b6 <TIM_ITRx_SetConfig>
      break;
 800def0:	e02c      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6818      	ldr	r0, [r3, #0]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	6859      	ldr	r1, [r3, #4]
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	461a      	mov	r2, r3
 800df00:	f000 f929 	bl	800e156 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2160      	movs	r1, #96	; 0x60
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f953 	bl	800e1b6 <TIM_ITRx_SetConfig>
      break;
 800df10:	e01c      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6818      	ldr	r0, [r3, #0]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	6859      	ldr	r1, [r3, #4]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	461a      	mov	r2, r3
 800df20:	f000 f8ea 	bl	800e0f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2140      	movs	r1, #64	; 0x40
 800df2a:	4618      	mov	r0, r3
 800df2c:	f000 f943 	bl	800e1b6 <TIM_ITRx_SetConfig>
      break;
 800df30:	e00c      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f000 f93a 	bl	800e1b6 <TIM_ITRx_SetConfig>
      break;
 800df42:	e003      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800df44:	2301      	movs	r3, #1
 800df46:	73fb      	strb	r3, [r7, #15]
      break;
 800df48:	e000      	b.n	800df4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800df4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df66:	b480      	push	{r7}
 800df68:	b083      	sub	sp, #12
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df6e:	bf00      	nop
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b083      	sub	sp, #12
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df82:	bf00      	nop
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df8e:	b480      	push	{r7}
 800df90:	b083      	sub	sp, #12
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dfa2:	b480      	push	{r7}
 800dfa4:	b083      	sub	sp, #12
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfaa:	bf00      	nop
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
	...

0800dfb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a40      	ldr	r2, [pc, #256]	; (800e0cc <TIM_Base_SetConfig+0x114>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d013      	beq.n	800dff8 <TIM_Base_SetConfig+0x40>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfd6:	d00f      	beq.n	800dff8 <TIM_Base_SetConfig+0x40>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a3d      	ldr	r2, [pc, #244]	; (800e0d0 <TIM_Base_SetConfig+0x118>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d00b      	beq.n	800dff8 <TIM_Base_SetConfig+0x40>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a3c      	ldr	r2, [pc, #240]	; (800e0d4 <TIM_Base_SetConfig+0x11c>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d007      	beq.n	800dff8 <TIM_Base_SetConfig+0x40>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a3b      	ldr	r2, [pc, #236]	; (800e0d8 <TIM_Base_SetConfig+0x120>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d003      	beq.n	800dff8 <TIM_Base_SetConfig+0x40>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4a3a      	ldr	r2, [pc, #232]	; (800e0dc <TIM_Base_SetConfig+0x124>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d108      	bne.n	800e00a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	4313      	orrs	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a2f      	ldr	r2, [pc, #188]	; (800e0cc <TIM_Base_SetConfig+0x114>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d02b      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e018:	d027      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a2c      	ldr	r2, [pc, #176]	; (800e0d0 <TIM_Base_SetConfig+0x118>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d023      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a2b      	ldr	r2, [pc, #172]	; (800e0d4 <TIM_Base_SetConfig+0x11c>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d01f      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a2a      	ldr	r2, [pc, #168]	; (800e0d8 <TIM_Base_SetConfig+0x120>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d01b      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a29      	ldr	r2, [pc, #164]	; (800e0dc <TIM_Base_SetConfig+0x124>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d017      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a28      	ldr	r2, [pc, #160]	; (800e0e0 <TIM_Base_SetConfig+0x128>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d013      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a27      	ldr	r2, [pc, #156]	; (800e0e4 <TIM_Base_SetConfig+0x12c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d00f      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a26      	ldr	r2, [pc, #152]	; (800e0e8 <TIM_Base_SetConfig+0x130>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d00b      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a25      	ldr	r2, [pc, #148]	; (800e0ec <TIM_Base_SetConfig+0x134>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d007      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4a24      	ldr	r2, [pc, #144]	; (800e0f0 <TIM_Base_SetConfig+0x138>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d003      	beq.n	800e06a <TIM_Base_SetConfig+0xb2>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a23      	ldr	r2, [pc, #140]	; (800e0f4 <TIM_Base_SetConfig+0x13c>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d108      	bne.n	800e07c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	4313      	orrs	r3, r2
 800e07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	4313      	orrs	r3, r2
 800e088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	689a      	ldr	r2, [r3, #8]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a0a      	ldr	r2, [pc, #40]	; (800e0cc <TIM_Base_SetConfig+0x114>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d003      	beq.n	800e0b0 <TIM_Base_SetConfig+0xf8>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4a0c      	ldr	r2, [pc, #48]	; (800e0dc <TIM_Base_SetConfig+0x124>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d103      	bne.n	800e0b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	691a      	ldr	r2, [r3, #16]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	615a      	str	r2, [r3, #20]
}
 800e0be:	bf00      	nop
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	40010000 	.word	0x40010000
 800e0d0:	40000400 	.word	0x40000400
 800e0d4:	40000800 	.word	0x40000800
 800e0d8:	40000c00 	.word	0x40000c00
 800e0dc:	40010400 	.word	0x40010400
 800e0e0:	40014000 	.word	0x40014000
 800e0e4:	40014400 	.word	0x40014400
 800e0e8:	40014800 	.word	0x40014800
 800e0ec:	40001800 	.word	0x40001800
 800e0f0:	40001c00 	.word	0x40001c00
 800e0f4:	40002000 	.word	0x40002000

0800e0f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b087      	sub	sp, #28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6a1b      	ldr	r3, [r3, #32]
 800e108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	f023 0201 	bic.w	r2, r3, #1
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	011b      	lsls	r3, r3, #4
 800e128:	693a      	ldr	r2, [r7, #16]
 800e12a:	4313      	orrs	r3, r2
 800e12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f023 030a 	bic.w	r3, r3, #10
 800e134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	621a      	str	r2, [r3, #32]
}
 800e14a:	bf00      	nop
 800e14c:	371c      	adds	r7, #28
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e156:	b480      	push	{r7}
 800e158:	b087      	sub	sp, #28
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	60f8      	str	r0, [r7, #12]
 800e15e:	60b9      	str	r1, [r7, #8]
 800e160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6a1b      	ldr	r3, [r3, #32]
 800e166:	f023 0210 	bic.w	r2, r3, #16
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	699b      	ldr	r3, [r3, #24]
 800e172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	031b      	lsls	r3, r3, #12
 800e186:	697a      	ldr	r2, [r7, #20]
 800e188:	4313      	orrs	r3, r2
 800e18a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	011b      	lsls	r3, r3, #4
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	697a      	ldr	r2, [r7, #20]
 800e1a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	693a      	ldr	r2, [r7, #16]
 800e1a8:	621a      	str	r2, [r3, #32]
}
 800e1aa:	bf00      	nop
 800e1ac:	371c      	adds	r7, #28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	b085      	sub	sp, #20
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	f043 0307 	orr.w	r3, r3, #7
 800e1d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	609a      	str	r2, [r3, #8]
}
 800e1e0:	bf00      	nop
 800e1e2:	3714      	adds	r7, #20
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
 800e1f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	021a      	lsls	r2, r3, #8
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	431a      	orrs	r2, r3
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	4313      	orrs	r3, r2
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	4313      	orrs	r3, r2
 800e218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	609a      	str	r2, [r3, #8]
}
 800e220:	bf00      	nop
 800e222:	371c      	adds	r7, #28
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d101      	bne.n	800e244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e240:	2302      	movs	r3, #2
 800e242:	e05a      	b.n	800e2fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2202      	movs	r2, #2
 800e250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e26a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	4313      	orrs	r3, r2
 800e274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a21      	ldr	r2, [pc, #132]	; (800e308 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d022      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e290:	d01d      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a1d      	ldr	r2, [pc, #116]	; (800e30c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d018      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a1b      	ldr	r2, [pc, #108]	; (800e310 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d013      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a1a      	ldr	r2, [pc, #104]	; (800e314 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00e      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a18      	ldr	r2, [pc, #96]	; (800e318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d009      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a17      	ldr	r2, [pc, #92]	; (800e31c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d004      	beq.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a15      	ldr	r2, [pc, #84]	; (800e320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d10c      	bne.n	800e2e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	68ba      	ldr	r2, [r7, #8]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	40010000 	.word	0x40010000
 800e30c:	40000400 	.word	0x40000400
 800e310:	40000800 	.word	0x40000800
 800e314:	40000c00 	.word	0x40000c00
 800e318:	40010400 	.word	0x40010400
 800e31c:	40014000 	.word	0x40014000
 800e320:	40001800 	.word	0x40001800

0800e324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d101      	bne.n	800e35e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e03f      	b.n	800e3de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7f8 fa9e 	bl	80068b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2224      	movs	r2, #36	; 0x24
 800e37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68da      	ldr	r2, [r3, #12]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e38e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fddf 	bl	800ef54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	691a      	ldr	r2, [r3, #16]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	695a      	ldr	r2, [r3, #20]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e3b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68da      	ldr	r2, [r3, #12]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e3c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2220      	movs	r2, #32
 800e3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2220      	movs	r2, #32
 800e3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b08a      	sub	sp, #40	; 0x28
 800e3ea:	af02      	add	r7, sp, #8
 800e3ec:	60f8      	str	r0, [r7, #12]
 800e3ee:	60b9      	str	r1, [r7, #8]
 800e3f0:	603b      	str	r3, [r7, #0]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b20      	cmp	r3, #32
 800e404:	d17c      	bne.n	800e500 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d002      	beq.n	800e412 <HAL_UART_Transmit+0x2c>
 800e40c:	88fb      	ldrh	r3, [r7, #6]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d101      	bne.n	800e416 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	e075      	b.n	800e502 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d101      	bne.n	800e424 <HAL_UART_Transmit+0x3e>
 800e420:	2302      	movs	r3, #2
 800e422:	e06e      	b.n	800e502 <HAL_UART_Transmit+0x11c>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2201      	movs	r2, #1
 800e428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2221      	movs	r2, #33	; 0x21
 800e436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e43a:	f7fb fbc5 	bl	8009bc8 <HAL_GetTick>
 800e43e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	88fa      	ldrh	r2, [r7, #6]
 800e444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	88fa      	ldrh	r2, [r7, #6]
 800e44a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e454:	d108      	bne.n	800e468 <HAL_UART_Transmit+0x82>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d104      	bne.n	800e468 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e45e:	2300      	movs	r3, #0
 800e460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	e003      	b.n	800e470 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e46c:	2300      	movs	r3, #0
 800e46e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e478:	e02a      	b.n	800e4d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	2200      	movs	r2, #0
 800e482:	2180      	movs	r1, #128	; 0x80
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f000 fb1f 	bl	800eac8 <UART_WaitOnFlagUntilTimeout>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e490:	2303      	movs	r3, #3
 800e492:	e036      	b.n	800e502 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10b      	bne.n	800e4b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	3302      	adds	r3, #2
 800e4ae:	61bb      	str	r3, [r7, #24]
 800e4b0:	e007      	b.n	800e4c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	781a      	ldrb	r2, [r3, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1cf      	bne.n	800e47a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2140      	movs	r1, #64	; 0x40
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 faef 	bl	800eac8 <UART_WaitOnFlagUntilTimeout>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e4f0:	2303      	movs	r3, #3
 800e4f2:	e006      	b.n	800e502 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2220      	movs	r2, #32
 800e4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	e000      	b.n	800e502 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e500:	2302      	movs	r3, #2
  }
}
 800e502:	4618      	mov	r0, r3
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	60f8      	str	r0, [r7, #12]
 800e512:	60b9      	str	r1, [r7, #8]
 800e514:	4613      	mov	r3, r2
 800e516:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	2b20      	cmp	r3, #32
 800e522:	d11d      	bne.n	800e560 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d002      	beq.n	800e530 <HAL_UART_Receive_IT+0x26>
 800e52a:	88fb      	ldrh	r3, [r7, #6]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d101      	bne.n	800e534 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e530:	2301      	movs	r3, #1
 800e532:	e016      	b.n	800e562 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d101      	bne.n	800e542 <HAL_UART_Receive_IT+0x38>
 800e53e:	2302      	movs	r3, #2
 800e540:	e00f      	b.n	800e562 <HAL_UART_Receive_IT+0x58>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e550:	88fb      	ldrh	r3, [r7, #6]
 800e552:	461a      	mov	r2, r3
 800e554:	68b9      	ldr	r1, [r7, #8]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 fb24 	bl	800eba4 <UART_Start_Receive_IT>
 800e55c:	4603      	mov	r3, r0
 800e55e:	e000      	b.n	800e562 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e560:	2302      	movs	r3, #2
  }
}
 800e562:	4618      	mov	r0, r3
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
	...

0800e56c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b0ba      	sub	sp, #232	; 0xe8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	695b      	ldr	r3, [r3, #20]
 800e58e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e592:	2300      	movs	r3, #0
 800e594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e598:	2300      	movs	r3, #0
 800e59a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a2:	f003 030f 	and.w	r3, r3, #15
 800e5a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e5aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10f      	bne.n	800e5d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b6:	f003 0320 	and.w	r3, r3, #32
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d009      	beq.n	800e5d2 <HAL_UART_IRQHandler+0x66>
 800e5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c2:	f003 0320 	and.w	r3, r3, #32
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fc07 	bl	800edde <UART_Receive_IT>
      return;
 800e5d0:	e256      	b.n	800ea80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e5d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f000 80de 	beq.w	800e798 <HAL_UART_IRQHandler+0x22c>
 800e5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 80d1 	beq.w	800e798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00b      	beq.n	800e61a <HAL_UART_IRQHandler+0xae>
 800e602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d005      	beq.n	800e61a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e612:	f043 0201 	orr.w	r2, r3, #1
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e61e:	f003 0304 	and.w	r3, r3, #4
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00b      	beq.n	800e63e <HAL_UART_IRQHandler+0xd2>
 800e626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d005      	beq.n	800e63e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e636:	f043 0202 	orr.w	r2, r3, #2
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e642:	f003 0302 	and.w	r3, r3, #2
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00b      	beq.n	800e662 <HAL_UART_IRQHandler+0xf6>
 800e64a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	2b00      	cmp	r3, #0
 800e654:	d005      	beq.n	800e662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e65a:	f043 0204 	orr.w	r2, r3, #4
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e666:	f003 0308 	and.w	r3, r3, #8
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d011      	beq.n	800e692 <HAL_UART_IRQHandler+0x126>
 800e66e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e672:	f003 0320 	and.w	r3, r3, #32
 800e676:	2b00      	cmp	r3, #0
 800e678:	d105      	bne.n	800e686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e67a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d005      	beq.n	800e692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e68a:	f043 0208 	orr.w	r2, r3, #8
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e696:	2b00      	cmp	r3, #0
 800e698:	f000 81ed 	beq.w	800ea76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a0:	f003 0320 	and.w	r3, r3, #32
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d008      	beq.n	800e6ba <HAL_UART_IRQHandler+0x14e>
 800e6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ac:	f003 0320 	and.w	r3, r3, #32
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fb92 	bl	800edde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	695b      	ldr	r3, [r3, #20]
 800e6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c4:	2b40      	cmp	r3, #64	; 0x40
 800e6c6:	bf0c      	ite	eq
 800e6c8:	2301      	moveq	r3, #1
 800e6ca:	2300      	movne	r3, #0
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d6:	f003 0308 	and.w	r3, r3, #8
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d103      	bne.n	800e6e6 <HAL_UART_IRQHandler+0x17a>
 800e6de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d04f      	beq.n	800e786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 fa9a 	bl	800ec20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f6:	2b40      	cmp	r3, #64	; 0x40
 800e6f8:	d141      	bne.n	800e77e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3314      	adds	r3, #20
 800e700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e708:	e853 3f00 	ldrex	r3, [r3]
 800e70c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3314      	adds	r3, #20
 800e722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e72a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e736:	e841 2300 	strex	r3, r2, [r1]
 800e73a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e73e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1d9      	bne.n	800e6fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d013      	beq.n	800e776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e752:	4a7d      	ldr	r2, [pc, #500]	; (800e948 <HAL_UART_IRQHandler+0x3dc>)
 800e754:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fc f8f0 	bl	800a940 <HAL_DMA_Abort_IT>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d016      	beq.n	800e794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e770:	4610      	mov	r0, r2
 800e772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e774:	e00e      	b.n	800e794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 f990 	bl	800ea9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e77c:	e00a      	b.n	800e794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f98c 	bl	800ea9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e784:	e006      	b.n	800e794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f988 	bl	800ea9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e792:	e170      	b.n	800ea76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e794:	bf00      	nop
    return;
 800e796:	e16e      	b.n	800ea76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	f040 814a 	bne.w	800ea36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7a6:	f003 0310 	and.w	r3, r3, #16
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 8143 	beq.w	800ea36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7b4:	f003 0310 	and.w	r3, r3, #16
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f000 813c 	beq.w	800ea36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60bb      	str	r3, [r7, #8]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	60bb      	str	r3, [r7, #8]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	60bb      	str	r3, [r7, #8]
 800e7d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7de:	2b40      	cmp	r3, #64	; 0x40
 800e7e0:	f040 80b4 	bne.w	800e94c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e7f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 8140 	beq.w	800ea7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e7fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e802:	429a      	cmp	r2, r3
 800e804:	f080 8139 	bcs.w	800ea7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e80e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	69db      	ldr	r3, [r3, #28]
 800e816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e81a:	f000 8088 	beq.w	800e92e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	330c      	adds	r3, #12
 800e824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e82c:	e853 3f00 	ldrex	r3, [r3]
 800e830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e83c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	330c      	adds	r3, #12
 800e846:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e84a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e84e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e85a:	e841 2300 	strex	r3, r2, [r1]
 800e85e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e866:	2b00      	cmp	r3, #0
 800e868:	d1d9      	bne.n	800e81e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3314      	adds	r3, #20
 800e870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e874:	e853 3f00 	ldrex	r3, [r3]
 800e878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e87c:	f023 0301 	bic.w	r3, r3, #1
 800e880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3314      	adds	r3, #20
 800e88a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e88e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e89a:	e841 2300 	strex	r3, r2, [r1]
 800e89e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e8a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d1e1      	bne.n	800e86a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	3314      	adds	r3, #20
 800e8ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8b0:	e853 3f00 	ldrex	r3, [r3]
 800e8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3314      	adds	r3, #20
 800e8c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e8ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e8cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e3      	bne.n	800e8a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2220      	movs	r2, #32
 800e8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	330c      	adds	r3, #12
 800e8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f6:	e853 3f00 	ldrex	r3, [r3]
 800e8fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8fe:	f023 0310 	bic.w	r3, r3, #16
 800e902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	330c      	adds	r3, #12
 800e90c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e910:	65ba      	str	r2, [r7, #88]	; 0x58
 800e912:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e918:	e841 2300 	strex	r3, r2, [r1]
 800e91c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1e3      	bne.n	800e8ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fb ff99 	bl	800a860 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e936:	b29b      	uxth	r3, r3
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	4619      	mov	r1, r3
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 f8b6 	bl	800eab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e944:	e099      	b.n	800ea7a <HAL_UART_IRQHandler+0x50e>
 800e946:	bf00      	nop
 800e948:	0800ece7 	.word	0x0800ece7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e954:	b29b      	uxth	r3, r3
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e960:	b29b      	uxth	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 808b 	beq.w	800ea7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 8086 	beq.w	800ea7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	330c      	adds	r3, #12
 800e978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e988:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	330c      	adds	r3, #12
 800e992:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e996:	647a      	str	r2, [r7, #68]	; 0x44
 800e998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e99c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e99e:	e841 2300 	strex	r3, r2, [r1]
 800e9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1e3      	bne.n	800e972 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3314      	adds	r3, #20
 800e9b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	e853 3f00 	ldrex	r3, [r3]
 800e9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	f023 0301 	bic.w	r3, r3, #1
 800e9c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3314      	adds	r3, #20
 800e9ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e9ce:	633a      	str	r2, [r7, #48]	; 0x30
 800e9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d6:	e841 2300 	strex	r3, r2, [r1]
 800e9da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e3      	bne.n	800e9aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2220      	movs	r2, #32
 800e9e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	330c      	adds	r3, #12
 800e9f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	e853 3f00 	ldrex	r3, [r3]
 800e9fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f023 0310 	bic.w	r3, r3, #16
 800ea06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	330c      	adds	r3, #12
 800ea10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ea14:	61fa      	str	r2, [r7, #28]
 800ea16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea18:	69b9      	ldr	r1, [r7, #24]
 800ea1a:	69fa      	ldr	r2, [r7, #28]
 800ea1c:	e841 2300 	strex	r3, r2, [r1]
 800ea20:	617b      	str	r3, [r7, #20]
   return(result);
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1e3      	bne.n	800e9f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f83e 	bl	800eab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ea34:	e023      	b.n	800ea7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ea36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <HAL_UART_IRQHandler+0x4ea>
 800ea42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d003      	beq.n	800ea56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f95d 	bl	800ed0e <UART_Transmit_IT>
    return;
 800ea54:	e014      	b.n	800ea80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ea56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00e      	beq.n	800ea80 <HAL_UART_IRQHandler+0x514>
 800ea62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d008      	beq.n	800ea80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 f99d 	bl	800edae <UART_EndTransmit_IT>
    return;
 800ea74:	e004      	b.n	800ea80 <HAL_UART_IRQHandler+0x514>
    return;
 800ea76:	bf00      	nop
 800ea78:	e002      	b.n	800ea80 <HAL_UART_IRQHandler+0x514>
      return;
 800ea7a:	bf00      	nop
 800ea7c:	e000      	b.n	800ea80 <HAL_UART_IRQHandler+0x514>
      return;
 800ea7e:	bf00      	nop
  }
}
 800ea80:	37e8      	adds	r7, #232	; 0xe8
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop

0800ea88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800eaa4:	bf00      	nop
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b090      	sub	sp, #64	; 0x40
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	603b      	str	r3, [r7, #0]
 800ead4:	4613      	mov	r3, r2
 800ead6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ead8:	e050      	b.n	800eb7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eadc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eae0:	d04c      	beq.n	800eb7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800eae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d007      	beq.n	800eaf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800eae8:	f7fb f86e 	bl	8009bc8 <HAL_GetTick>
 800eaec:	4602      	mov	r2, r0
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d241      	bcs.n	800eb7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	330c      	adds	r3, #12
 800eafe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	e853 3f00 	ldrex	r3, [r3]
 800eb06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	330c      	adds	r3, #12
 800eb16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb18:	637a      	str	r2, [r7, #52]	; 0x34
 800eb1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb20:	e841 2300 	strex	r3, r2, [r1]
 800eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1e5      	bne.n	800eaf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3314      	adds	r3, #20
 800eb32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	e853 3f00 	ldrex	r3, [r3]
 800eb3a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	f023 0301 	bic.w	r3, r3, #1
 800eb42:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	3314      	adds	r3, #20
 800eb4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb4c:	623a      	str	r2, [r7, #32]
 800eb4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb50:	69f9      	ldr	r1, [r7, #28]
 800eb52:	6a3a      	ldr	r2, [r7, #32]
 800eb54:	e841 2300 	strex	r3, r2, [r1]
 800eb58:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1e5      	bne.n	800eb2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2220      	movs	r2, #32
 800eb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2220      	movs	r2, #32
 800eb6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	e00f      	b.n	800eb9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	4013      	ands	r3, r2
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	bf0c      	ite	eq
 800eb8c:	2301      	moveq	r3, #1
 800eb8e:	2300      	movne	r3, #0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	461a      	mov	r2, r3
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d09f      	beq.n	800eada <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3740      	adds	r7, #64	; 0x40
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	88fa      	ldrh	r2, [r7, #6]
 800ebbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	88fa      	ldrh	r2, [r7, #6]
 800ebc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2222      	movs	r2, #34	; 0x22
 800ebce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d007      	beq.n	800ebf2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68da      	ldr	r2, [r3, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ebf0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	695a      	ldr	r2, [r3, #20]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f042 0201 	orr.w	r2, r2, #1
 800ec00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68da      	ldr	r2, [r3, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f042 0220 	orr.w	r2, r2, #32
 800ec10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3714      	adds	r7, #20
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b095      	sub	sp, #84	; 0x54
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	330c      	adds	r3, #12
 800ec2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec32:	e853 3f00 	ldrex	r3, [r3]
 800ec36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	330c      	adds	r3, #12
 800ec46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec48:	643a      	str	r2, [r7, #64]	; 0x40
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec50:	e841 2300 	strex	r3, r2, [r1]
 800ec54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1e5      	bne.n	800ec28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3314      	adds	r3, #20
 800ec62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	e853 3f00 	ldrex	r3, [r3]
 800ec6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	f023 0301 	bic.w	r3, r3, #1
 800ec72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3314      	adds	r3, #20
 800ec7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec84:	e841 2300 	strex	r3, r2, [r1]
 800ec88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d1e5      	bne.n	800ec5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d119      	bne.n	800eccc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	330c      	adds	r3, #12
 800ec9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	e853 3f00 	ldrex	r3, [r3]
 800eca6:	60bb      	str	r3, [r7, #8]
   return(result);
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	f023 0310 	bic.w	r3, r3, #16
 800ecae:	647b      	str	r3, [r7, #68]	; 0x44
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	330c      	adds	r3, #12
 800ecb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecb8:	61ba      	str	r2, [r7, #24]
 800ecba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecbc:	6979      	ldr	r1, [r7, #20]
 800ecbe:	69ba      	ldr	r2, [r7, #24]
 800ecc0:	e841 2300 	strex	r3, r2, [r1]
 800ecc4:	613b      	str	r3, [r7, #16]
   return(result);
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1e5      	bne.n	800ec98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ecda:	bf00      	nop
 800ecdc:	3754      	adds	r7, #84	; 0x54
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b084      	sub	sp, #16
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f7ff fecb 	bl	800ea9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed06:	bf00      	nop
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b085      	sub	sp, #20
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b21      	cmp	r3, #33	; 0x21
 800ed20:	d13e      	bne.n	800eda0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed2a:	d114      	bne.n	800ed56 <UART_Transmit_IT+0x48>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d110      	bne.n	800ed56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	1c9a      	adds	r2, r3, #2
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	621a      	str	r2, [r3, #32]
 800ed54:	e008      	b.n	800ed68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	1c59      	adds	r1, r3, #1
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	6211      	str	r1, [r2, #32]
 800ed60:	781a      	ldrb	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	4619      	mov	r1, r3
 800ed76:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10f      	bne.n	800ed9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	68da      	ldr	r2, [r3, #12]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	68da      	ldr	r2, [r3, #12]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	e000      	b.n	800eda2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800eda0:	2302      	movs	r3, #2
  }
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3714      	adds	r7, #20
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr

0800edae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68da      	ldr	r2, [r3, #12]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2220      	movs	r2, #32
 800edca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7ff fe5a 	bl	800ea88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b08c      	sub	sp, #48	; 0x30
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b22      	cmp	r3, #34	; 0x22
 800edf0:	f040 80ab 	bne.w	800ef4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edfc:	d117      	bne.n	800ee2e <UART_Receive_IT+0x50>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d113      	bne.n	800ee2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee26:	1c9a      	adds	r2, r3, #2
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	629a      	str	r2, [r3, #40]	; 0x28
 800ee2c:	e026      	b.n	800ee7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee40:	d007      	beq.n	800ee52 <UART_Receive_IT+0x74>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d10a      	bne.n	800ee60 <UART_Receive_IT+0x82>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	691b      	ldr	r3, [r3, #16]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d106      	bne.n	800ee60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5c:	701a      	strb	r2, [r3, #0]
 800ee5e:	e008      	b.n	800ee72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	1c5a      	adds	r2, r3, #1
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	3b01      	subs	r3, #1
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d15a      	bne.n	800ef46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68da      	ldr	r2, [r3, #12]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f022 0220 	bic.w	r2, r2, #32
 800ee9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	68da      	ldr	r2, [r3, #12]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eeae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	695a      	ldr	r2, [r3, #20]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f022 0201 	bic.w	r2, r2, #1
 800eebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2220      	movs	r2, #32
 800eec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d135      	bne.n	800ef3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	330c      	adds	r3, #12
 800eedc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	e853 3f00 	ldrex	r3, [r3]
 800eee4:	613b      	str	r3, [r7, #16]
   return(result);
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	f023 0310 	bic.w	r3, r3, #16
 800eeec:	627b      	str	r3, [r7, #36]	; 0x24
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	330c      	adds	r3, #12
 800eef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef6:	623a      	str	r2, [r7, #32]
 800eef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefa:	69f9      	ldr	r1, [r7, #28]
 800eefc:	6a3a      	ldr	r2, [r7, #32]
 800eefe:	e841 2300 	strex	r3, r2, [r1]
 800ef02:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1e5      	bne.n	800eed6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f003 0310 	and.w	r3, r3, #16
 800ef14:	2b10      	cmp	r3, #16
 800ef16:	d10a      	bne.n	800ef2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ef18:	2300      	movs	r3, #0
 800ef1a:	60fb      	str	r3, [r7, #12]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	60fb      	str	r3, [r7, #12]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ef32:	4619      	mov	r1, r3
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7ff fdbb 	bl	800eab0 <HAL_UARTEx_RxEventCallback>
 800ef3a:	e002      	b.n	800ef42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7f7 f9bb 	bl	80062b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ef42:	2300      	movs	r3, #0
 800ef44:	e002      	b.n	800ef4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	e000      	b.n	800ef4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ef4a:	2302      	movs	r3, #2
  }
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3730      	adds	r7, #48	; 0x30
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef58:	b0c0      	sub	sp, #256	; 0x100
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	691b      	ldr	r3, [r3, #16]
 800ef68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ef6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef70:	68d9      	ldr	r1, [r3, #12]
 800ef72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	ea40 0301 	orr.w	r3, r0, r1
 800ef7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ef7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef88:	691b      	ldr	r3, [r3, #16]
 800ef8a:	431a      	orrs	r2, r3
 800ef8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef90:	695b      	ldr	r3, [r3, #20]
 800ef92:	431a      	orrs	r2, r3
 800ef94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef98:	69db      	ldr	r3, [r3, #28]
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800efa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800efac:	f021 010c 	bic.w	r1, r1, #12
 800efb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efba:	430b      	orrs	r3, r1
 800efbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800efbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800efca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efce:	6999      	ldr	r1, [r3, #24]
 800efd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	ea40 0301 	orr.w	r3, r0, r1
 800efda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800efdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	4b8f      	ldr	r3, [pc, #572]	; (800f220 <UART_SetConfig+0x2cc>)
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d005      	beq.n	800eff4 <UART_SetConfig+0xa0>
 800efe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	4b8d      	ldr	r3, [pc, #564]	; (800f224 <UART_SetConfig+0x2d0>)
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d104      	bne.n	800effe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eff4:	f7fd fb6c 	bl	800c6d0 <HAL_RCC_GetPCLK2Freq>
 800eff8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800effc:	e003      	b.n	800f006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800effe:	f7fd fb53 	bl	800c6a8 <HAL_RCC_GetPCLK1Freq>
 800f002:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f010:	f040 810c 	bne.w	800f22c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f018:	2200      	movs	r2, #0
 800f01a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f01e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800f026:	4622      	mov	r2, r4
 800f028:	462b      	mov	r3, r5
 800f02a:	1891      	adds	r1, r2, r2
 800f02c:	65b9      	str	r1, [r7, #88]	; 0x58
 800f02e:	415b      	adcs	r3, r3
 800f030:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f036:	4621      	mov	r1, r4
 800f038:	eb12 0801 	adds.w	r8, r2, r1
 800f03c:	4629      	mov	r1, r5
 800f03e:	eb43 0901 	adc.w	r9, r3, r1
 800f042:	f04f 0200 	mov.w	r2, #0
 800f046:	f04f 0300 	mov.w	r3, #0
 800f04a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f04e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f056:	4690      	mov	r8, r2
 800f058:	4699      	mov	r9, r3
 800f05a:	4623      	mov	r3, r4
 800f05c:	eb18 0303 	adds.w	r3, r8, r3
 800f060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f064:	462b      	mov	r3, r5
 800f066:	eb49 0303 	adc.w	r3, r9, r3
 800f06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	2200      	movs	r2, #0
 800f076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f07a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800f07e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f082:	460b      	mov	r3, r1
 800f084:	18db      	adds	r3, r3, r3
 800f086:	653b      	str	r3, [r7, #80]	; 0x50
 800f088:	4613      	mov	r3, r2
 800f08a:	eb42 0303 	adc.w	r3, r2, r3
 800f08e:	657b      	str	r3, [r7, #84]	; 0x54
 800f090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800f098:	f7f1 fe66 	bl	8000d68 <__aeabi_uldivmod>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4b61      	ldr	r3, [pc, #388]	; (800f228 <UART_SetConfig+0x2d4>)
 800f0a2:	fba3 2302 	umull	r2, r3, r3, r2
 800f0a6:	095b      	lsrs	r3, r3, #5
 800f0a8:	011c      	lsls	r4, r3, #4
 800f0aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800f0b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800f0bc:	4642      	mov	r2, r8
 800f0be:	464b      	mov	r3, r9
 800f0c0:	1891      	adds	r1, r2, r2
 800f0c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800f0c4:	415b      	adcs	r3, r3
 800f0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f0cc:	4641      	mov	r1, r8
 800f0ce:	eb12 0a01 	adds.w	sl, r2, r1
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	eb43 0b01 	adc.w	fp, r3, r1
 800f0d8:	f04f 0200 	mov.w	r2, #0
 800f0dc:	f04f 0300 	mov.w	r3, #0
 800f0e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f0e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f0e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0ec:	4692      	mov	sl, r2
 800f0ee:	469b      	mov	fp, r3
 800f0f0:	4643      	mov	r3, r8
 800f0f2:	eb1a 0303 	adds.w	r3, sl, r3
 800f0f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f0fa:	464b      	mov	r3, r9
 800f0fc:	eb4b 0303 	adc.w	r3, fp, r3
 800f100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f110:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f118:	460b      	mov	r3, r1
 800f11a:	18db      	adds	r3, r3, r3
 800f11c:	643b      	str	r3, [r7, #64]	; 0x40
 800f11e:	4613      	mov	r3, r2
 800f120:	eb42 0303 	adc.w	r3, r2, r3
 800f124:	647b      	str	r3, [r7, #68]	; 0x44
 800f126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f12a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f12e:	f7f1 fe1b 	bl	8000d68 <__aeabi_uldivmod>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	4611      	mov	r1, r2
 800f138:	4b3b      	ldr	r3, [pc, #236]	; (800f228 <UART_SetConfig+0x2d4>)
 800f13a:	fba3 2301 	umull	r2, r3, r3, r1
 800f13e:	095b      	lsrs	r3, r3, #5
 800f140:	2264      	movs	r2, #100	; 0x64
 800f142:	fb02 f303 	mul.w	r3, r2, r3
 800f146:	1acb      	subs	r3, r1, r3
 800f148:	00db      	lsls	r3, r3, #3
 800f14a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f14e:	4b36      	ldr	r3, [pc, #216]	; (800f228 <UART_SetConfig+0x2d4>)
 800f150:	fba3 2302 	umull	r2, r3, r3, r2
 800f154:	095b      	lsrs	r3, r3, #5
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f15c:	441c      	add	r4, r3
 800f15e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f162:	2200      	movs	r2, #0
 800f164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f168:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f16c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f170:	4642      	mov	r2, r8
 800f172:	464b      	mov	r3, r9
 800f174:	1891      	adds	r1, r2, r2
 800f176:	63b9      	str	r1, [r7, #56]	; 0x38
 800f178:	415b      	adcs	r3, r3
 800f17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f17c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f180:	4641      	mov	r1, r8
 800f182:	1851      	adds	r1, r2, r1
 800f184:	6339      	str	r1, [r7, #48]	; 0x30
 800f186:	4649      	mov	r1, r9
 800f188:	414b      	adcs	r3, r1
 800f18a:	637b      	str	r3, [r7, #52]	; 0x34
 800f18c:	f04f 0200 	mov.w	r2, #0
 800f190:	f04f 0300 	mov.w	r3, #0
 800f194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f198:	4659      	mov	r1, fp
 800f19a:	00cb      	lsls	r3, r1, #3
 800f19c:	4651      	mov	r1, sl
 800f19e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f1a2:	4651      	mov	r1, sl
 800f1a4:	00ca      	lsls	r2, r1, #3
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	4642      	mov	r2, r8
 800f1ae:	189b      	adds	r3, r3, r2
 800f1b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f1b4:	464b      	mov	r3, r9
 800f1b6:	460a      	mov	r2, r1
 800f1b8:	eb42 0303 	adc.w	r3, r2, r3
 800f1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f1cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f1d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	18db      	adds	r3, r3, r3
 800f1d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1da:	4613      	mov	r3, r2
 800f1dc:	eb42 0303 	adc.w	r3, r2, r3
 800f1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f1e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f1ea:	f7f1 fdbd 	bl	8000d68 <__aeabi_uldivmod>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <UART_SetConfig+0x2d4>)
 800f1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800f1f8:	095b      	lsrs	r3, r3, #5
 800f1fa:	2164      	movs	r1, #100	; 0x64
 800f1fc:	fb01 f303 	mul.w	r3, r1, r3
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	3332      	adds	r3, #50	; 0x32
 800f206:	4a08      	ldr	r2, [pc, #32]	; (800f228 <UART_SetConfig+0x2d4>)
 800f208:	fba2 2303 	umull	r2, r3, r2, r3
 800f20c:	095b      	lsrs	r3, r3, #5
 800f20e:	f003 0207 	and.w	r2, r3, #7
 800f212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4422      	add	r2, r4
 800f21a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f21c:	e106      	b.n	800f42c <UART_SetConfig+0x4d8>
 800f21e:	bf00      	nop
 800f220:	40011000 	.word	0x40011000
 800f224:	40011400 	.word	0x40011400
 800f228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f22c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f230:	2200      	movs	r2, #0
 800f232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f236:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f23a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f23e:	4642      	mov	r2, r8
 800f240:	464b      	mov	r3, r9
 800f242:	1891      	adds	r1, r2, r2
 800f244:	6239      	str	r1, [r7, #32]
 800f246:	415b      	adcs	r3, r3
 800f248:	627b      	str	r3, [r7, #36]	; 0x24
 800f24a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f24e:	4641      	mov	r1, r8
 800f250:	1854      	adds	r4, r2, r1
 800f252:	4649      	mov	r1, r9
 800f254:	eb43 0501 	adc.w	r5, r3, r1
 800f258:	f04f 0200 	mov.w	r2, #0
 800f25c:	f04f 0300 	mov.w	r3, #0
 800f260:	00eb      	lsls	r3, r5, #3
 800f262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f266:	00e2      	lsls	r2, r4, #3
 800f268:	4614      	mov	r4, r2
 800f26a:	461d      	mov	r5, r3
 800f26c:	4643      	mov	r3, r8
 800f26e:	18e3      	adds	r3, r4, r3
 800f270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f274:	464b      	mov	r3, r9
 800f276:	eb45 0303 	adc.w	r3, r5, r3
 800f27a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f28a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f28e:	f04f 0200 	mov.w	r2, #0
 800f292:	f04f 0300 	mov.w	r3, #0
 800f296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f29a:	4629      	mov	r1, r5
 800f29c:	008b      	lsls	r3, r1, #2
 800f29e:	4621      	mov	r1, r4
 800f2a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	008a      	lsls	r2, r1, #2
 800f2a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f2ac:	f7f1 fd5c 	bl	8000d68 <__aeabi_uldivmod>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	4b60      	ldr	r3, [pc, #384]	; (800f438 <UART_SetConfig+0x4e4>)
 800f2b6:	fba3 2302 	umull	r2, r3, r3, r2
 800f2ba:	095b      	lsrs	r3, r3, #5
 800f2bc:	011c      	lsls	r4, r3, #4
 800f2be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f2c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f2cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f2d0:	4642      	mov	r2, r8
 800f2d2:	464b      	mov	r3, r9
 800f2d4:	1891      	adds	r1, r2, r2
 800f2d6:	61b9      	str	r1, [r7, #24]
 800f2d8:	415b      	adcs	r3, r3
 800f2da:	61fb      	str	r3, [r7, #28]
 800f2dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2e0:	4641      	mov	r1, r8
 800f2e2:	1851      	adds	r1, r2, r1
 800f2e4:	6139      	str	r1, [r7, #16]
 800f2e6:	4649      	mov	r1, r9
 800f2e8:	414b      	adcs	r3, r1
 800f2ea:	617b      	str	r3, [r7, #20]
 800f2ec:	f04f 0200 	mov.w	r2, #0
 800f2f0:	f04f 0300 	mov.w	r3, #0
 800f2f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f2f8:	4659      	mov	r1, fp
 800f2fa:	00cb      	lsls	r3, r1, #3
 800f2fc:	4651      	mov	r1, sl
 800f2fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f302:	4651      	mov	r1, sl
 800f304:	00ca      	lsls	r2, r1, #3
 800f306:	4610      	mov	r0, r2
 800f308:	4619      	mov	r1, r3
 800f30a:	4603      	mov	r3, r0
 800f30c:	4642      	mov	r2, r8
 800f30e:	189b      	adds	r3, r3, r2
 800f310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f314:	464b      	mov	r3, r9
 800f316:	460a      	mov	r2, r1
 800f318:	eb42 0303 	adc.w	r3, r2, r3
 800f31c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	67bb      	str	r3, [r7, #120]	; 0x78
 800f32a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	f04f 0300 	mov.w	r3, #0
 800f334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f338:	4649      	mov	r1, r9
 800f33a:	008b      	lsls	r3, r1, #2
 800f33c:	4641      	mov	r1, r8
 800f33e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f342:	4641      	mov	r1, r8
 800f344:	008a      	lsls	r2, r1, #2
 800f346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f34a:	f7f1 fd0d 	bl	8000d68 <__aeabi_uldivmod>
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	4611      	mov	r1, r2
 800f354:	4b38      	ldr	r3, [pc, #224]	; (800f438 <UART_SetConfig+0x4e4>)
 800f356:	fba3 2301 	umull	r2, r3, r3, r1
 800f35a:	095b      	lsrs	r3, r3, #5
 800f35c:	2264      	movs	r2, #100	; 0x64
 800f35e:	fb02 f303 	mul.w	r3, r2, r3
 800f362:	1acb      	subs	r3, r1, r3
 800f364:	011b      	lsls	r3, r3, #4
 800f366:	3332      	adds	r3, #50	; 0x32
 800f368:	4a33      	ldr	r2, [pc, #204]	; (800f438 <UART_SetConfig+0x4e4>)
 800f36a:	fba2 2303 	umull	r2, r3, r2, r3
 800f36e:	095b      	lsrs	r3, r3, #5
 800f370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f374:	441c      	add	r4, r3
 800f376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f37a:	2200      	movs	r2, #0
 800f37c:	673b      	str	r3, [r7, #112]	; 0x70
 800f37e:	677a      	str	r2, [r7, #116]	; 0x74
 800f380:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f384:	4642      	mov	r2, r8
 800f386:	464b      	mov	r3, r9
 800f388:	1891      	adds	r1, r2, r2
 800f38a:	60b9      	str	r1, [r7, #8]
 800f38c:	415b      	adcs	r3, r3
 800f38e:	60fb      	str	r3, [r7, #12]
 800f390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f394:	4641      	mov	r1, r8
 800f396:	1851      	adds	r1, r2, r1
 800f398:	6039      	str	r1, [r7, #0]
 800f39a:	4649      	mov	r1, r9
 800f39c:	414b      	adcs	r3, r1
 800f39e:	607b      	str	r3, [r7, #4]
 800f3a0:	f04f 0200 	mov.w	r2, #0
 800f3a4:	f04f 0300 	mov.w	r3, #0
 800f3a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f3ac:	4659      	mov	r1, fp
 800f3ae:	00cb      	lsls	r3, r1, #3
 800f3b0:	4651      	mov	r1, sl
 800f3b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f3b6:	4651      	mov	r1, sl
 800f3b8:	00ca      	lsls	r2, r1, #3
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4603      	mov	r3, r0
 800f3c0:	4642      	mov	r2, r8
 800f3c2:	189b      	adds	r3, r3, r2
 800f3c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f3c6:	464b      	mov	r3, r9
 800f3c8:	460a      	mov	r2, r1
 800f3ca:	eb42 0303 	adc.w	r3, r2, r3
 800f3ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	663b      	str	r3, [r7, #96]	; 0x60
 800f3da:	667a      	str	r2, [r7, #100]	; 0x64
 800f3dc:	f04f 0200 	mov.w	r2, #0
 800f3e0:	f04f 0300 	mov.w	r3, #0
 800f3e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f3e8:	4649      	mov	r1, r9
 800f3ea:	008b      	lsls	r3, r1, #2
 800f3ec:	4641      	mov	r1, r8
 800f3ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f3f2:	4641      	mov	r1, r8
 800f3f4:	008a      	lsls	r2, r1, #2
 800f3f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f3fa:	f7f1 fcb5 	bl	8000d68 <__aeabi_uldivmod>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	4b0d      	ldr	r3, [pc, #52]	; (800f438 <UART_SetConfig+0x4e4>)
 800f404:	fba3 1302 	umull	r1, r3, r3, r2
 800f408:	095b      	lsrs	r3, r3, #5
 800f40a:	2164      	movs	r1, #100	; 0x64
 800f40c:	fb01 f303 	mul.w	r3, r1, r3
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	011b      	lsls	r3, r3, #4
 800f414:	3332      	adds	r3, #50	; 0x32
 800f416:	4a08      	ldr	r2, [pc, #32]	; (800f438 <UART_SetConfig+0x4e4>)
 800f418:	fba2 2303 	umull	r2, r3, r2, r3
 800f41c:	095b      	lsrs	r3, r3, #5
 800f41e:	f003 020f 	and.w	r2, r3, #15
 800f422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4422      	add	r2, r4
 800f42a:	609a      	str	r2, [r3, #8]
}
 800f42c:	bf00      	nop
 800f42e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f432:	46bd      	mov	sp, r7
 800f434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f438:	51eb851f 	.word	0x51eb851f

0800f43c <atoi>:
 800f43c:	220a      	movs	r2, #10
 800f43e:	2100      	movs	r1, #0
 800f440:	f000 bf10 	b.w	8010264 <strtol>

0800f444 <__cvt>:
 800f444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f448:	ec55 4b10 	vmov	r4, r5, d0
 800f44c:	2d00      	cmp	r5, #0
 800f44e:	460e      	mov	r6, r1
 800f450:	4619      	mov	r1, r3
 800f452:	462b      	mov	r3, r5
 800f454:	bfbb      	ittet	lt
 800f456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f45a:	461d      	movlt	r5, r3
 800f45c:	2300      	movge	r3, #0
 800f45e:	232d      	movlt	r3, #45	; 0x2d
 800f460:	700b      	strb	r3, [r1, #0]
 800f462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f464:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f468:	4691      	mov	r9, r2
 800f46a:	f023 0820 	bic.w	r8, r3, #32
 800f46e:	bfbc      	itt	lt
 800f470:	4622      	movlt	r2, r4
 800f472:	4614      	movlt	r4, r2
 800f474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f478:	d005      	beq.n	800f486 <__cvt+0x42>
 800f47a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f47e:	d100      	bne.n	800f482 <__cvt+0x3e>
 800f480:	3601      	adds	r6, #1
 800f482:	2102      	movs	r1, #2
 800f484:	e000      	b.n	800f488 <__cvt+0x44>
 800f486:	2103      	movs	r1, #3
 800f488:	ab03      	add	r3, sp, #12
 800f48a:	9301      	str	r3, [sp, #4]
 800f48c:	ab02      	add	r3, sp, #8
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	ec45 4b10 	vmov	d0, r4, r5
 800f494:	4653      	mov	r3, sl
 800f496:	4632      	mov	r2, r6
 800f498:	f001 f8f6 	bl	8010688 <_dtoa_r>
 800f49c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	d102      	bne.n	800f4aa <__cvt+0x66>
 800f4a4:	f019 0f01 	tst.w	r9, #1
 800f4a8:	d022      	beq.n	800f4f0 <__cvt+0xac>
 800f4aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4ae:	eb07 0906 	add.w	r9, r7, r6
 800f4b2:	d110      	bne.n	800f4d6 <__cvt+0x92>
 800f4b4:	783b      	ldrb	r3, [r7, #0]
 800f4b6:	2b30      	cmp	r3, #48	; 0x30
 800f4b8:	d10a      	bne.n	800f4d0 <__cvt+0x8c>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	f7f1 fb21 	bl	8000b08 <__aeabi_dcmpeq>
 800f4c6:	b918      	cbnz	r0, 800f4d0 <__cvt+0x8c>
 800f4c8:	f1c6 0601 	rsb	r6, r6, #1
 800f4cc:	f8ca 6000 	str.w	r6, [sl]
 800f4d0:	f8da 3000 	ldr.w	r3, [sl]
 800f4d4:	4499      	add	r9, r3
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	f7f1 fb13 	bl	8000b08 <__aeabi_dcmpeq>
 800f4e2:	b108      	cbz	r0, 800f4e8 <__cvt+0xa4>
 800f4e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4e8:	2230      	movs	r2, #48	; 0x30
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	454b      	cmp	r3, r9
 800f4ee:	d307      	bcc.n	800f500 <__cvt+0xbc>
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4f4:	1bdb      	subs	r3, r3, r7
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	6013      	str	r3, [r2, #0]
 800f4fa:	b004      	add	sp, #16
 800f4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f500:	1c59      	adds	r1, r3, #1
 800f502:	9103      	str	r1, [sp, #12]
 800f504:	701a      	strb	r2, [r3, #0]
 800f506:	e7f0      	b.n	800f4ea <__cvt+0xa6>

0800f508 <__exponent>:
 800f508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f50a:	4603      	mov	r3, r0
 800f50c:	2900      	cmp	r1, #0
 800f50e:	bfb8      	it	lt
 800f510:	4249      	neglt	r1, r1
 800f512:	f803 2b02 	strb.w	r2, [r3], #2
 800f516:	bfb4      	ite	lt
 800f518:	222d      	movlt	r2, #45	; 0x2d
 800f51a:	222b      	movge	r2, #43	; 0x2b
 800f51c:	2909      	cmp	r1, #9
 800f51e:	7042      	strb	r2, [r0, #1]
 800f520:	dd2a      	ble.n	800f578 <__exponent+0x70>
 800f522:	f10d 0207 	add.w	r2, sp, #7
 800f526:	4617      	mov	r7, r2
 800f528:	260a      	movs	r6, #10
 800f52a:	4694      	mov	ip, r2
 800f52c:	fb91 f5f6 	sdiv	r5, r1, r6
 800f530:	fb06 1415 	mls	r4, r6, r5, r1
 800f534:	3430      	adds	r4, #48	; 0x30
 800f536:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f53a:	460c      	mov	r4, r1
 800f53c:	2c63      	cmp	r4, #99	; 0x63
 800f53e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f542:	4629      	mov	r1, r5
 800f544:	dcf1      	bgt.n	800f52a <__exponent+0x22>
 800f546:	3130      	adds	r1, #48	; 0x30
 800f548:	f1ac 0402 	sub.w	r4, ip, #2
 800f54c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f550:	1c41      	adds	r1, r0, #1
 800f552:	4622      	mov	r2, r4
 800f554:	42ba      	cmp	r2, r7
 800f556:	d30a      	bcc.n	800f56e <__exponent+0x66>
 800f558:	f10d 0209 	add.w	r2, sp, #9
 800f55c:	eba2 020c 	sub.w	r2, r2, ip
 800f560:	42bc      	cmp	r4, r7
 800f562:	bf88      	it	hi
 800f564:	2200      	movhi	r2, #0
 800f566:	4413      	add	r3, r2
 800f568:	1a18      	subs	r0, r3, r0
 800f56a:	b003      	add	sp, #12
 800f56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f56e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f572:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f576:	e7ed      	b.n	800f554 <__exponent+0x4c>
 800f578:	2330      	movs	r3, #48	; 0x30
 800f57a:	3130      	adds	r1, #48	; 0x30
 800f57c:	7083      	strb	r3, [r0, #2]
 800f57e:	70c1      	strb	r1, [r0, #3]
 800f580:	1d03      	adds	r3, r0, #4
 800f582:	e7f1      	b.n	800f568 <__exponent+0x60>

0800f584 <_printf_float>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	ed2d 8b02 	vpush	{d8}
 800f58c:	b08d      	sub	sp, #52	; 0x34
 800f58e:	460c      	mov	r4, r1
 800f590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f594:	4616      	mov	r6, r2
 800f596:	461f      	mov	r7, r3
 800f598:	4605      	mov	r5, r0
 800f59a:	f000 ff2f 	bl	80103fc <_localeconv_r>
 800f59e:	f8d0 a000 	ldr.w	sl, [r0]
 800f5a2:	4650      	mov	r0, sl
 800f5a4:	f7f0 fe84 	bl	80002b0 <strlen>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	9305      	str	r3, [sp, #20]
 800f5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5b8:	3307      	adds	r3, #7
 800f5ba:	f023 0307 	bic.w	r3, r3, #7
 800f5be:	f103 0208 	add.w	r2, r3, #8
 800f5c2:	f8c8 2000 	str.w	r2, [r8]
 800f5c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5ce:	9307      	str	r3, [sp, #28]
 800f5d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5d4:	ee08 0a10 	vmov	s16, r0
 800f5d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f5dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e0:	4b9e      	ldr	r3, [pc, #632]	; (800f85c <_printf_float+0x2d8>)
 800f5e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e6:	f7f1 fac1 	bl	8000b6c <__aeabi_dcmpun>
 800f5ea:	bb88      	cbnz	r0, 800f650 <_printf_float+0xcc>
 800f5ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5f0:	4b9a      	ldr	r3, [pc, #616]	; (800f85c <_printf_float+0x2d8>)
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5f6:	f7f1 fa9b 	bl	8000b30 <__aeabi_dcmple>
 800f5fa:	bb48      	cbnz	r0, 800f650 <_printf_float+0xcc>
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	2300      	movs	r3, #0
 800f600:	4640      	mov	r0, r8
 800f602:	4649      	mov	r1, r9
 800f604:	f7f1 fa8a 	bl	8000b1c <__aeabi_dcmplt>
 800f608:	b110      	cbz	r0, 800f610 <_printf_float+0x8c>
 800f60a:	232d      	movs	r3, #45	; 0x2d
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	4a93      	ldr	r2, [pc, #588]	; (800f860 <_printf_float+0x2dc>)
 800f612:	4b94      	ldr	r3, [pc, #592]	; (800f864 <_printf_float+0x2e0>)
 800f614:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f618:	bf94      	ite	ls
 800f61a:	4690      	movls	r8, r2
 800f61c:	4698      	movhi	r8, r3
 800f61e:	2303      	movs	r3, #3
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	f023 0304 	bic.w	r3, r3, #4
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	f04f 0900 	mov.w	r9, #0
 800f62e:	9700      	str	r7, [sp, #0]
 800f630:	4633      	mov	r3, r6
 800f632:	aa0b      	add	r2, sp, #44	; 0x2c
 800f634:	4621      	mov	r1, r4
 800f636:	4628      	mov	r0, r5
 800f638:	f000 fa8a 	bl	800fb50 <_printf_common>
 800f63c:	3001      	adds	r0, #1
 800f63e:	f040 8090 	bne.w	800f762 <_printf_float+0x1de>
 800f642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f646:	b00d      	add	sp, #52	; 0x34
 800f648:	ecbd 8b02 	vpop	{d8}
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	4642      	mov	r2, r8
 800f652:	464b      	mov	r3, r9
 800f654:	4640      	mov	r0, r8
 800f656:	4649      	mov	r1, r9
 800f658:	f7f1 fa88 	bl	8000b6c <__aeabi_dcmpun>
 800f65c:	b140      	cbz	r0, 800f670 <_printf_float+0xec>
 800f65e:	464b      	mov	r3, r9
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfbc      	itt	lt
 800f664:	232d      	movlt	r3, #45	; 0x2d
 800f666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f66a:	4a7f      	ldr	r2, [pc, #508]	; (800f868 <_printf_float+0x2e4>)
 800f66c:	4b7f      	ldr	r3, [pc, #508]	; (800f86c <_printf_float+0x2e8>)
 800f66e:	e7d1      	b.n	800f614 <_printf_float+0x90>
 800f670:	6863      	ldr	r3, [r4, #4]
 800f672:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f676:	9206      	str	r2, [sp, #24]
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	d13f      	bne.n	800f6fc <_printf_float+0x178>
 800f67c:	2306      	movs	r3, #6
 800f67e:	6063      	str	r3, [r4, #4]
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	6861      	ldr	r1, [r4, #4]
 800f684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f688:	2300      	movs	r3, #0
 800f68a:	9303      	str	r3, [sp, #12]
 800f68c:	ab0a      	add	r3, sp, #40	; 0x28
 800f68e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f692:	ab09      	add	r3, sp, #36	; 0x24
 800f694:	ec49 8b10 	vmov	d0, r8, r9
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f7ff fecf 	bl	800f444 <__cvt>
 800f6a6:	9b06      	ldr	r3, [sp, #24]
 800f6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6aa:	2b47      	cmp	r3, #71	; 0x47
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	d108      	bne.n	800f6c2 <_printf_float+0x13e>
 800f6b0:	1cc8      	adds	r0, r1, #3
 800f6b2:	db02      	blt.n	800f6ba <_printf_float+0x136>
 800f6b4:	6863      	ldr	r3, [r4, #4]
 800f6b6:	4299      	cmp	r1, r3
 800f6b8:	dd41      	ble.n	800f73e <_printf_float+0x1ba>
 800f6ba:	f1ab 0302 	sub.w	r3, fp, #2
 800f6be:	fa5f fb83 	uxtb.w	fp, r3
 800f6c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6c6:	d820      	bhi.n	800f70a <_printf_float+0x186>
 800f6c8:	3901      	subs	r1, #1
 800f6ca:	465a      	mov	r2, fp
 800f6cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6d0:	9109      	str	r1, [sp, #36]	; 0x24
 800f6d2:	f7ff ff19 	bl	800f508 <__exponent>
 800f6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6d8:	1813      	adds	r3, r2, r0
 800f6da:	2a01      	cmp	r2, #1
 800f6dc:	4681      	mov	r9, r0
 800f6de:	6123      	str	r3, [r4, #16]
 800f6e0:	dc02      	bgt.n	800f6e8 <_printf_float+0x164>
 800f6e2:	6822      	ldr	r2, [r4, #0]
 800f6e4:	07d2      	lsls	r2, r2, #31
 800f6e6:	d501      	bpl.n	800f6ec <_printf_float+0x168>
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d09c      	beq.n	800f62e <_printf_float+0xaa>
 800f6f4:	232d      	movs	r3, #45	; 0x2d
 800f6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6fa:	e798      	b.n	800f62e <_printf_float+0xaa>
 800f6fc:	9a06      	ldr	r2, [sp, #24]
 800f6fe:	2a47      	cmp	r2, #71	; 0x47
 800f700:	d1be      	bne.n	800f680 <_printf_float+0xfc>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1bc      	bne.n	800f680 <_printf_float+0xfc>
 800f706:	2301      	movs	r3, #1
 800f708:	e7b9      	b.n	800f67e <_printf_float+0xfa>
 800f70a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f70e:	d118      	bne.n	800f742 <_printf_float+0x1be>
 800f710:	2900      	cmp	r1, #0
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	dd0b      	ble.n	800f72e <_printf_float+0x1aa>
 800f716:	6121      	str	r1, [r4, #16]
 800f718:	b913      	cbnz	r3, 800f720 <_printf_float+0x19c>
 800f71a:	6822      	ldr	r2, [r4, #0]
 800f71c:	07d0      	lsls	r0, r2, #31
 800f71e:	d502      	bpl.n	800f726 <_printf_float+0x1a2>
 800f720:	3301      	adds	r3, #1
 800f722:	440b      	add	r3, r1
 800f724:	6123      	str	r3, [r4, #16]
 800f726:	65a1      	str	r1, [r4, #88]	; 0x58
 800f728:	f04f 0900 	mov.w	r9, #0
 800f72c:	e7de      	b.n	800f6ec <_printf_float+0x168>
 800f72e:	b913      	cbnz	r3, 800f736 <_printf_float+0x1b2>
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	07d2      	lsls	r2, r2, #31
 800f734:	d501      	bpl.n	800f73a <_printf_float+0x1b6>
 800f736:	3302      	adds	r3, #2
 800f738:	e7f4      	b.n	800f724 <_printf_float+0x1a0>
 800f73a:	2301      	movs	r3, #1
 800f73c:	e7f2      	b.n	800f724 <_printf_float+0x1a0>
 800f73e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f744:	4299      	cmp	r1, r3
 800f746:	db05      	blt.n	800f754 <_printf_float+0x1d0>
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	6121      	str	r1, [r4, #16]
 800f74c:	07d8      	lsls	r0, r3, #31
 800f74e:	d5ea      	bpl.n	800f726 <_printf_float+0x1a2>
 800f750:	1c4b      	adds	r3, r1, #1
 800f752:	e7e7      	b.n	800f724 <_printf_float+0x1a0>
 800f754:	2900      	cmp	r1, #0
 800f756:	bfd4      	ite	le
 800f758:	f1c1 0202 	rsble	r2, r1, #2
 800f75c:	2201      	movgt	r2, #1
 800f75e:	4413      	add	r3, r2
 800f760:	e7e0      	b.n	800f724 <_printf_float+0x1a0>
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	055a      	lsls	r2, r3, #21
 800f766:	d407      	bmi.n	800f778 <_printf_float+0x1f4>
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	4642      	mov	r2, r8
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d12c      	bne.n	800f7d0 <_printf_float+0x24c>
 800f776:	e764      	b.n	800f642 <_printf_float+0xbe>
 800f778:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f77c:	f240 80e0 	bls.w	800f940 <_printf_float+0x3bc>
 800f780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f784:	2200      	movs	r2, #0
 800f786:	2300      	movs	r3, #0
 800f788:	f7f1 f9be 	bl	8000b08 <__aeabi_dcmpeq>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d034      	beq.n	800f7fa <_printf_float+0x276>
 800f790:	4a37      	ldr	r2, [pc, #220]	; (800f870 <_printf_float+0x2ec>)
 800f792:	2301      	movs	r3, #1
 800f794:	4631      	mov	r1, r6
 800f796:	4628      	mov	r0, r5
 800f798:	47b8      	blx	r7
 800f79a:	3001      	adds	r0, #1
 800f79c:	f43f af51 	beq.w	800f642 <_printf_float+0xbe>
 800f7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	db02      	blt.n	800f7ae <_printf_float+0x22a>
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	07d8      	lsls	r0, r3, #31
 800f7ac:	d510      	bpl.n	800f7d0 <_printf_float+0x24c>
 800f7ae:	ee18 3a10 	vmov	r3, s16
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af41 	beq.w	800f642 <_printf_float+0xbe>
 800f7c0:	f04f 0800 	mov.w	r8, #0
 800f7c4:	f104 091a 	add.w	r9, r4, #26
 800f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	4543      	cmp	r3, r8
 800f7ce:	dc09      	bgt.n	800f7e4 <_printf_float+0x260>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	079b      	lsls	r3, r3, #30
 800f7d4:	f100 8107 	bmi.w	800f9e6 <_printf_float+0x462>
 800f7d8:	68e0      	ldr	r0, [r4, #12]
 800f7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	4618      	movlt	r0, r3
 800f7e2:	e730      	b.n	800f646 <_printf_float+0xc2>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	464a      	mov	r2, r9
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	f43f af27 	beq.w	800f642 <_printf_float+0xbe>
 800f7f4:	f108 0801 	add.w	r8, r8, #1
 800f7f8:	e7e6      	b.n	800f7c8 <_printf_float+0x244>
 800f7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dc39      	bgt.n	800f874 <_printf_float+0x2f0>
 800f800:	4a1b      	ldr	r2, [pc, #108]	; (800f870 <_printf_float+0x2ec>)
 800f802:	2301      	movs	r3, #1
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	47b8      	blx	r7
 800f80a:	3001      	adds	r0, #1
 800f80c:	f43f af19 	beq.w	800f642 <_printf_float+0xbe>
 800f810:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f814:	4313      	orrs	r3, r2
 800f816:	d102      	bne.n	800f81e <_printf_float+0x29a>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	07d9      	lsls	r1, r3, #31
 800f81c:	d5d8      	bpl.n	800f7d0 <_printf_float+0x24c>
 800f81e:	ee18 3a10 	vmov	r3, s16
 800f822:	4652      	mov	r2, sl
 800f824:	4631      	mov	r1, r6
 800f826:	4628      	mov	r0, r5
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	f43f af09 	beq.w	800f642 <_printf_float+0xbe>
 800f830:	f04f 0900 	mov.w	r9, #0
 800f834:	f104 0a1a 	add.w	sl, r4, #26
 800f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f83a:	425b      	negs	r3, r3
 800f83c:	454b      	cmp	r3, r9
 800f83e:	dc01      	bgt.n	800f844 <_printf_float+0x2c0>
 800f840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f842:	e792      	b.n	800f76a <_printf_float+0x1e6>
 800f844:	2301      	movs	r3, #1
 800f846:	4652      	mov	r2, sl
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f aef7 	beq.w	800f642 <_printf_float+0xbe>
 800f854:	f109 0901 	add.w	r9, r9, #1
 800f858:	e7ee      	b.n	800f838 <_printf_float+0x2b4>
 800f85a:	bf00      	nop
 800f85c:	7fefffff 	.word	0x7fefffff
 800f860:	08019120 	.word	0x08019120
 800f864:	08019124 	.word	0x08019124
 800f868:	08019128 	.word	0x08019128
 800f86c:	0801912c 	.word	0x0801912c
 800f870:	08019343 	.word	0x08019343
 800f874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f878:	429a      	cmp	r2, r3
 800f87a:	bfa8      	it	ge
 800f87c:	461a      	movge	r2, r3
 800f87e:	2a00      	cmp	r2, #0
 800f880:	4691      	mov	r9, r2
 800f882:	dc37      	bgt.n	800f8f4 <_printf_float+0x370>
 800f884:	f04f 0b00 	mov.w	fp, #0
 800f888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f88c:	f104 021a 	add.w	r2, r4, #26
 800f890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f892:	9305      	str	r3, [sp, #20]
 800f894:	eba3 0309 	sub.w	r3, r3, r9
 800f898:	455b      	cmp	r3, fp
 800f89a:	dc33      	bgt.n	800f904 <_printf_float+0x380>
 800f89c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	db3b      	blt.n	800f91c <_printf_float+0x398>
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	07da      	lsls	r2, r3, #31
 800f8a8:	d438      	bmi.n	800f91c <_printf_float+0x398>
 800f8aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f8ae:	eba2 0903 	sub.w	r9, r2, r3
 800f8b2:	9b05      	ldr	r3, [sp, #20]
 800f8b4:	1ad2      	subs	r2, r2, r3
 800f8b6:	4591      	cmp	r9, r2
 800f8b8:	bfa8      	it	ge
 800f8ba:	4691      	movge	r9, r2
 800f8bc:	f1b9 0f00 	cmp.w	r9, #0
 800f8c0:	dc35      	bgt.n	800f92e <_printf_float+0x3aa>
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ca:	f104 0a1a 	add.w	sl, r4, #26
 800f8ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8d2:	1a9b      	subs	r3, r3, r2
 800f8d4:	eba3 0309 	sub.w	r3, r3, r9
 800f8d8:	4543      	cmp	r3, r8
 800f8da:	f77f af79 	ble.w	800f7d0 <_printf_float+0x24c>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	4652      	mov	r2, sl
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	f43f aeaa 	beq.w	800f642 <_printf_float+0xbe>
 800f8ee:	f108 0801 	add.w	r8, r8, #1
 800f8f2:	e7ec      	b.n	800f8ce <_printf_float+0x34a>
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b8      	blx	r7
 800f8fe:	3001      	adds	r0, #1
 800f900:	d1c0      	bne.n	800f884 <_printf_float+0x300>
 800f902:	e69e      	b.n	800f642 <_printf_float+0xbe>
 800f904:	2301      	movs	r3, #1
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	9205      	str	r2, [sp, #20]
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f ae97 	beq.w	800f642 <_printf_float+0xbe>
 800f914:	9a05      	ldr	r2, [sp, #20]
 800f916:	f10b 0b01 	add.w	fp, fp, #1
 800f91a:	e7b9      	b.n	800f890 <_printf_float+0x30c>
 800f91c:	ee18 3a10 	vmov	r3, s16
 800f920:	4652      	mov	r2, sl
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	d1be      	bne.n	800f8aa <_printf_float+0x326>
 800f92c:	e689      	b.n	800f642 <_printf_float+0xbe>
 800f92e:	9a05      	ldr	r2, [sp, #20]
 800f930:	464b      	mov	r3, r9
 800f932:	4442      	add	r2, r8
 800f934:	4631      	mov	r1, r6
 800f936:	4628      	mov	r0, r5
 800f938:	47b8      	blx	r7
 800f93a:	3001      	adds	r0, #1
 800f93c:	d1c1      	bne.n	800f8c2 <_printf_float+0x33e>
 800f93e:	e680      	b.n	800f642 <_printf_float+0xbe>
 800f940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f942:	2a01      	cmp	r2, #1
 800f944:	dc01      	bgt.n	800f94a <_printf_float+0x3c6>
 800f946:	07db      	lsls	r3, r3, #31
 800f948:	d53a      	bpl.n	800f9c0 <_printf_float+0x43c>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4642      	mov	r2, r8
 800f94e:	4631      	mov	r1, r6
 800f950:	4628      	mov	r0, r5
 800f952:	47b8      	blx	r7
 800f954:	3001      	adds	r0, #1
 800f956:	f43f ae74 	beq.w	800f642 <_printf_float+0xbe>
 800f95a:	ee18 3a10 	vmov	r3, s16
 800f95e:	4652      	mov	r2, sl
 800f960:	4631      	mov	r1, r6
 800f962:	4628      	mov	r0, r5
 800f964:	47b8      	blx	r7
 800f966:	3001      	adds	r0, #1
 800f968:	f43f ae6b 	beq.w	800f642 <_printf_float+0xbe>
 800f96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f970:	2200      	movs	r2, #0
 800f972:	2300      	movs	r3, #0
 800f974:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f978:	f7f1 f8c6 	bl	8000b08 <__aeabi_dcmpeq>
 800f97c:	b9d8      	cbnz	r0, 800f9b6 <_printf_float+0x432>
 800f97e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f982:	f108 0201 	add.w	r2, r8, #1
 800f986:	4631      	mov	r1, r6
 800f988:	4628      	mov	r0, r5
 800f98a:	47b8      	blx	r7
 800f98c:	3001      	adds	r0, #1
 800f98e:	d10e      	bne.n	800f9ae <_printf_float+0x42a>
 800f990:	e657      	b.n	800f642 <_printf_float+0xbe>
 800f992:	2301      	movs	r3, #1
 800f994:	4652      	mov	r2, sl
 800f996:	4631      	mov	r1, r6
 800f998:	4628      	mov	r0, r5
 800f99a:	47b8      	blx	r7
 800f99c:	3001      	adds	r0, #1
 800f99e:	f43f ae50 	beq.w	800f642 <_printf_float+0xbe>
 800f9a2:	f108 0801 	add.w	r8, r8, #1
 800f9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	4543      	cmp	r3, r8
 800f9ac:	dcf1      	bgt.n	800f992 <_printf_float+0x40e>
 800f9ae:	464b      	mov	r3, r9
 800f9b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9b4:	e6da      	b.n	800f76c <_printf_float+0x1e8>
 800f9b6:	f04f 0800 	mov.w	r8, #0
 800f9ba:	f104 0a1a 	add.w	sl, r4, #26
 800f9be:	e7f2      	b.n	800f9a6 <_printf_float+0x422>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	4642      	mov	r2, r8
 800f9c4:	e7df      	b.n	800f986 <_printf_float+0x402>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	464a      	mov	r2, r9
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	47b8      	blx	r7
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	f43f ae36 	beq.w	800f642 <_printf_float+0xbe>
 800f9d6:	f108 0801 	add.w	r8, r8, #1
 800f9da:	68e3      	ldr	r3, [r4, #12]
 800f9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9de:	1a5b      	subs	r3, r3, r1
 800f9e0:	4543      	cmp	r3, r8
 800f9e2:	dcf0      	bgt.n	800f9c6 <_printf_float+0x442>
 800f9e4:	e6f8      	b.n	800f7d8 <_printf_float+0x254>
 800f9e6:	f04f 0800 	mov.w	r8, #0
 800f9ea:	f104 0919 	add.w	r9, r4, #25
 800f9ee:	e7f4      	b.n	800f9da <_printf_float+0x456>

0800f9f0 <malloc>:
 800f9f0:	4b02      	ldr	r3, [pc, #8]	; (800f9fc <malloc+0xc>)
 800f9f2:	4601      	mov	r1, r0
 800f9f4:	6818      	ldr	r0, [r3, #0]
 800f9f6:	f000 b82b 	b.w	800fa50 <_malloc_r>
 800f9fa:	bf00      	nop
 800f9fc:	200000cc 	.word	0x200000cc

0800fa00 <free>:
 800fa00:	4b02      	ldr	r3, [pc, #8]	; (800fa0c <free+0xc>)
 800fa02:	4601      	mov	r1, r0
 800fa04:	6818      	ldr	r0, [r3, #0]
 800fa06:	f001 bc31 	b.w	801126c <_free_r>
 800fa0a:	bf00      	nop
 800fa0c:	200000cc 	.word	0x200000cc

0800fa10 <sbrk_aligned>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	4e0e      	ldr	r6, [pc, #56]	; (800fa4c <sbrk_aligned+0x3c>)
 800fa14:	460c      	mov	r4, r1
 800fa16:	6831      	ldr	r1, [r6, #0]
 800fa18:	4605      	mov	r5, r0
 800fa1a:	b911      	cbnz	r1, 800fa22 <sbrk_aligned+0x12>
 800fa1c:	f000 fd26 	bl	801046c <_sbrk_r>
 800fa20:	6030      	str	r0, [r6, #0]
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	f000 fd21 	bl	801046c <_sbrk_r>
 800fa2a:	1c43      	adds	r3, r0, #1
 800fa2c:	d00a      	beq.n	800fa44 <sbrk_aligned+0x34>
 800fa2e:	1cc4      	adds	r4, r0, #3
 800fa30:	f024 0403 	bic.w	r4, r4, #3
 800fa34:	42a0      	cmp	r0, r4
 800fa36:	d007      	beq.n	800fa48 <sbrk_aligned+0x38>
 800fa38:	1a21      	subs	r1, r4, r0
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f000 fd16 	bl	801046c <_sbrk_r>
 800fa40:	3001      	adds	r0, #1
 800fa42:	d101      	bne.n	800fa48 <sbrk_aligned+0x38>
 800fa44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fa48:	4620      	mov	r0, r4
 800fa4a:	bd70      	pop	{r4, r5, r6, pc}
 800fa4c:	20009f28 	.word	0x20009f28

0800fa50 <_malloc_r>:
 800fa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa54:	1ccd      	adds	r5, r1, #3
 800fa56:	f025 0503 	bic.w	r5, r5, #3
 800fa5a:	3508      	adds	r5, #8
 800fa5c:	2d0c      	cmp	r5, #12
 800fa5e:	bf38      	it	cc
 800fa60:	250c      	movcc	r5, #12
 800fa62:	2d00      	cmp	r5, #0
 800fa64:	4607      	mov	r7, r0
 800fa66:	db01      	blt.n	800fa6c <_malloc_r+0x1c>
 800fa68:	42a9      	cmp	r1, r5
 800fa6a:	d905      	bls.n	800fa78 <_malloc_r+0x28>
 800fa6c:	230c      	movs	r3, #12
 800fa6e:	603b      	str	r3, [r7, #0]
 800fa70:	2600      	movs	r6, #0
 800fa72:	4630      	mov	r0, r6
 800fa74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fb4c <_malloc_r+0xfc>
 800fa7c:	f000 fa2c 	bl	800fed8 <__malloc_lock>
 800fa80:	f8d8 3000 	ldr.w	r3, [r8]
 800fa84:	461c      	mov	r4, r3
 800fa86:	bb5c      	cbnz	r4, 800fae0 <_malloc_r+0x90>
 800fa88:	4629      	mov	r1, r5
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	f7ff ffc0 	bl	800fa10 <sbrk_aligned>
 800fa90:	1c43      	adds	r3, r0, #1
 800fa92:	4604      	mov	r4, r0
 800fa94:	d155      	bne.n	800fb42 <_malloc_r+0xf2>
 800fa96:	f8d8 4000 	ldr.w	r4, [r8]
 800fa9a:	4626      	mov	r6, r4
 800fa9c:	2e00      	cmp	r6, #0
 800fa9e:	d145      	bne.n	800fb2c <_malloc_r+0xdc>
 800faa0:	2c00      	cmp	r4, #0
 800faa2:	d048      	beq.n	800fb36 <_malloc_r+0xe6>
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	4631      	mov	r1, r6
 800faa8:	4638      	mov	r0, r7
 800faaa:	eb04 0903 	add.w	r9, r4, r3
 800faae:	f000 fcdd 	bl	801046c <_sbrk_r>
 800fab2:	4581      	cmp	r9, r0
 800fab4:	d13f      	bne.n	800fb36 <_malloc_r+0xe6>
 800fab6:	6821      	ldr	r1, [r4, #0]
 800fab8:	1a6d      	subs	r5, r5, r1
 800faba:	4629      	mov	r1, r5
 800fabc:	4638      	mov	r0, r7
 800fabe:	f7ff ffa7 	bl	800fa10 <sbrk_aligned>
 800fac2:	3001      	adds	r0, #1
 800fac4:	d037      	beq.n	800fb36 <_malloc_r+0xe6>
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	442b      	add	r3, r5
 800faca:	6023      	str	r3, [r4, #0]
 800facc:	f8d8 3000 	ldr.w	r3, [r8]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d038      	beq.n	800fb46 <_malloc_r+0xf6>
 800fad4:	685a      	ldr	r2, [r3, #4]
 800fad6:	42a2      	cmp	r2, r4
 800fad8:	d12b      	bne.n	800fb32 <_malloc_r+0xe2>
 800fada:	2200      	movs	r2, #0
 800fadc:	605a      	str	r2, [r3, #4]
 800fade:	e00f      	b.n	800fb00 <_malloc_r+0xb0>
 800fae0:	6822      	ldr	r2, [r4, #0]
 800fae2:	1b52      	subs	r2, r2, r5
 800fae4:	d41f      	bmi.n	800fb26 <_malloc_r+0xd6>
 800fae6:	2a0b      	cmp	r2, #11
 800fae8:	d917      	bls.n	800fb1a <_malloc_r+0xca>
 800faea:	1961      	adds	r1, r4, r5
 800faec:	42a3      	cmp	r3, r4
 800faee:	6025      	str	r5, [r4, #0]
 800faf0:	bf18      	it	ne
 800faf2:	6059      	strne	r1, [r3, #4]
 800faf4:	6863      	ldr	r3, [r4, #4]
 800faf6:	bf08      	it	eq
 800faf8:	f8c8 1000 	streq.w	r1, [r8]
 800fafc:	5162      	str	r2, [r4, r5]
 800fafe:	604b      	str	r3, [r1, #4]
 800fb00:	4638      	mov	r0, r7
 800fb02:	f104 060b 	add.w	r6, r4, #11
 800fb06:	f000 f9ed 	bl	800fee4 <__malloc_unlock>
 800fb0a:	f026 0607 	bic.w	r6, r6, #7
 800fb0e:	1d23      	adds	r3, r4, #4
 800fb10:	1af2      	subs	r2, r6, r3
 800fb12:	d0ae      	beq.n	800fa72 <_malloc_r+0x22>
 800fb14:	1b9b      	subs	r3, r3, r6
 800fb16:	50a3      	str	r3, [r4, r2]
 800fb18:	e7ab      	b.n	800fa72 <_malloc_r+0x22>
 800fb1a:	42a3      	cmp	r3, r4
 800fb1c:	6862      	ldr	r2, [r4, #4]
 800fb1e:	d1dd      	bne.n	800fadc <_malloc_r+0x8c>
 800fb20:	f8c8 2000 	str.w	r2, [r8]
 800fb24:	e7ec      	b.n	800fb00 <_malloc_r+0xb0>
 800fb26:	4623      	mov	r3, r4
 800fb28:	6864      	ldr	r4, [r4, #4]
 800fb2a:	e7ac      	b.n	800fa86 <_malloc_r+0x36>
 800fb2c:	4634      	mov	r4, r6
 800fb2e:	6876      	ldr	r6, [r6, #4]
 800fb30:	e7b4      	b.n	800fa9c <_malloc_r+0x4c>
 800fb32:	4613      	mov	r3, r2
 800fb34:	e7cc      	b.n	800fad0 <_malloc_r+0x80>
 800fb36:	230c      	movs	r3, #12
 800fb38:	603b      	str	r3, [r7, #0]
 800fb3a:	4638      	mov	r0, r7
 800fb3c:	f000 f9d2 	bl	800fee4 <__malloc_unlock>
 800fb40:	e797      	b.n	800fa72 <_malloc_r+0x22>
 800fb42:	6025      	str	r5, [r4, #0]
 800fb44:	e7dc      	b.n	800fb00 <_malloc_r+0xb0>
 800fb46:	605b      	str	r3, [r3, #4]
 800fb48:	deff      	udf	#255	; 0xff
 800fb4a:	bf00      	nop
 800fb4c:	20009f24 	.word	0x20009f24

0800fb50 <_printf_common>:
 800fb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb54:	4616      	mov	r6, r2
 800fb56:	4699      	mov	r9, r3
 800fb58:	688a      	ldr	r2, [r1, #8]
 800fb5a:	690b      	ldr	r3, [r1, #16]
 800fb5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb60:	4293      	cmp	r3, r2
 800fb62:	bfb8      	it	lt
 800fb64:	4613      	movlt	r3, r2
 800fb66:	6033      	str	r3, [r6, #0]
 800fb68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb6c:	4607      	mov	r7, r0
 800fb6e:	460c      	mov	r4, r1
 800fb70:	b10a      	cbz	r2, 800fb76 <_printf_common+0x26>
 800fb72:	3301      	adds	r3, #1
 800fb74:	6033      	str	r3, [r6, #0]
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	0699      	lsls	r1, r3, #26
 800fb7a:	bf42      	ittt	mi
 800fb7c:	6833      	ldrmi	r3, [r6, #0]
 800fb7e:	3302      	addmi	r3, #2
 800fb80:	6033      	strmi	r3, [r6, #0]
 800fb82:	6825      	ldr	r5, [r4, #0]
 800fb84:	f015 0506 	ands.w	r5, r5, #6
 800fb88:	d106      	bne.n	800fb98 <_printf_common+0x48>
 800fb8a:	f104 0a19 	add.w	sl, r4, #25
 800fb8e:	68e3      	ldr	r3, [r4, #12]
 800fb90:	6832      	ldr	r2, [r6, #0]
 800fb92:	1a9b      	subs	r3, r3, r2
 800fb94:	42ab      	cmp	r3, r5
 800fb96:	dc26      	bgt.n	800fbe6 <_printf_common+0x96>
 800fb98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb9c:	1e13      	subs	r3, r2, #0
 800fb9e:	6822      	ldr	r2, [r4, #0]
 800fba0:	bf18      	it	ne
 800fba2:	2301      	movne	r3, #1
 800fba4:	0692      	lsls	r2, r2, #26
 800fba6:	d42b      	bmi.n	800fc00 <_printf_common+0xb0>
 800fba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbac:	4649      	mov	r1, r9
 800fbae:	4638      	mov	r0, r7
 800fbb0:	47c0      	blx	r8
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	d01e      	beq.n	800fbf4 <_printf_common+0xa4>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	6922      	ldr	r2, [r4, #16]
 800fbba:	f003 0306 	and.w	r3, r3, #6
 800fbbe:	2b04      	cmp	r3, #4
 800fbc0:	bf02      	ittt	eq
 800fbc2:	68e5      	ldreq	r5, [r4, #12]
 800fbc4:	6833      	ldreq	r3, [r6, #0]
 800fbc6:	1aed      	subeq	r5, r5, r3
 800fbc8:	68a3      	ldr	r3, [r4, #8]
 800fbca:	bf0c      	ite	eq
 800fbcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbd0:	2500      	movne	r5, #0
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	bfc4      	itt	gt
 800fbd6:	1a9b      	subgt	r3, r3, r2
 800fbd8:	18ed      	addgt	r5, r5, r3
 800fbda:	2600      	movs	r6, #0
 800fbdc:	341a      	adds	r4, #26
 800fbde:	42b5      	cmp	r5, r6
 800fbe0:	d11a      	bne.n	800fc18 <_printf_common+0xc8>
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	e008      	b.n	800fbf8 <_printf_common+0xa8>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	4652      	mov	r2, sl
 800fbea:	4649      	mov	r1, r9
 800fbec:	4638      	mov	r0, r7
 800fbee:	47c0      	blx	r8
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d103      	bne.n	800fbfc <_printf_common+0xac>
 800fbf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfc:	3501      	adds	r5, #1
 800fbfe:	e7c6      	b.n	800fb8e <_printf_common+0x3e>
 800fc00:	18e1      	adds	r1, r4, r3
 800fc02:	1c5a      	adds	r2, r3, #1
 800fc04:	2030      	movs	r0, #48	; 0x30
 800fc06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc0a:	4422      	add	r2, r4
 800fc0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc14:	3302      	adds	r3, #2
 800fc16:	e7c7      	b.n	800fba8 <_printf_common+0x58>
 800fc18:	2301      	movs	r3, #1
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	4638      	mov	r0, r7
 800fc20:	47c0      	blx	r8
 800fc22:	3001      	adds	r0, #1
 800fc24:	d0e6      	beq.n	800fbf4 <_printf_common+0xa4>
 800fc26:	3601      	adds	r6, #1
 800fc28:	e7d9      	b.n	800fbde <_printf_common+0x8e>
	...

0800fc2c <_printf_i>:
 800fc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc30:	7e0f      	ldrb	r7, [r1, #24]
 800fc32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc34:	2f78      	cmp	r7, #120	; 0x78
 800fc36:	4691      	mov	r9, r2
 800fc38:	4680      	mov	r8, r0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	469a      	mov	sl, r3
 800fc3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc42:	d807      	bhi.n	800fc54 <_printf_i+0x28>
 800fc44:	2f62      	cmp	r7, #98	; 0x62
 800fc46:	d80a      	bhi.n	800fc5e <_printf_i+0x32>
 800fc48:	2f00      	cmp	r7, #0
 800fc4a:	f000 80d4 	beq.w	800fdf6 <_printf_i+0x1ca>
 800fc4e:	2f58      	cmp	r7, #88	; 0x58
 800fc50:	f000 80c0 	beq.w	800fdd4 <_printf_i+0x1a8>
 800fc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc5c:	e03a      	b.n	800fcd4 <_printf_i+0xa8>
 800fc5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc62:	2b15      	cmp	r3, #21
 800fc64:	d8f6      	bhi.n	800fc54 <_printf_i+0x28>
 800fc66:	a101      	add	r1, pc, #4	; (adr r1, 800fc6c <_printf_i+0x40>)
 800fc68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc6c:	0800fcc5 	.word	0x0800fcc5
 800fc70:	0800fcd9 	.word	0x0800fcd9
 800fc74:	0800fc55 	.word	0x0800fc55
 800fc78:	0800fc55 	.word	0x0800fc55
 800fc7c:	0800fc55 	.word	0x0800fc55
 800fc80:	0800fc55 	.word	0x0800fc55
 800fc84:	0800fcd9 	.word	0x0800fcd9
 800fc88:	0800fc55 	.word	0x0800fc55
 800fc8c:	0800fc55 	.word	0x0800fc55
 800fc90:	0800fc55 	.word	0x0800fc55
 800fc94:	0800fc55 	.word	0x0800fc55
 800fc98:	0800fddd 	.word	0x0800fddd
 800fc9c:	0800fd05 	.word	0x0800fd05
 800fca0:	0800fd97 	.word	0x0800fd97
 800fca4:	0800fc55 	.word	0x0800fc55
 800fca8:	0800fc55 	.word	0x0800fc55
 800fcac:	0800fdff 	.word	0x0800fdff
 800fcb0:	0800fc55 	.word	0x0800fc55
 800fcb4:	0800fd05 	.word	0x0800fd05
 800fcb8:	0800fc55 	.word	0x0800fc55
 800fcbc:	0800fc55 	.word	0x0800fc55
 800fcc0:	0800fd9f 	.word	0x0800fd9f
 800fcc4:	682b      	ldr	r3, [r5, #0]
 800fcc6:	1d1a      	adds	r2, r3, #4
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	602a      	str	r2, [r5, #0]
 800fccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	e09f      	b.n	800fe18 <_printf_i+0x1ec>
 800fcd8:	6820      	ldr	r0, [r4, #0]
 800fcda:	682b      	ldr	r3, [r5, #0]
 800fcdc:	0607      	lsls	r7, r0, #24
 800fcde:	f103 0104 	add.w	r1, r3, #4
 800fce2:	6029      	str	r1, [r5, #0]
 800fce4:	d501      	bpl.n	800fcea <_printf_i+0xbe>
 800fce6:	681e      	ldr	r6, [r3, #0]
 800fce8:	e003      	b.n	800fcf2 <_printf_i+0xc6>
 800fcea:	0646      	lsls	r6, r0, #25
 800fcec:	d5fb      	bpl.n	800fce6 <_printf_i+0xba>
 800fcee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fcf2:	2e00      	cmp	r6, #0
 800fcf4:	da03      	bge.n	800fcfe <_printf_i+0xd2>
 800fcf6:	232d      	movs	r3, #45	; 0x2d
 800fcf8:	4276      	negs	r6, r6
 800fcfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcfe:	485a      	ldr	r0, [pc, #360]	; (800fe68 <_printf_i+0x23c>)
 800fd00:	230a      	movs	r3, #10
 800fd02:	e012      	b.n	800fd2a <_printf_i+0xfe>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	6820      	ldr	r0, [r4, #0]
 800fd08:	1d19      	adds	r1, r3, #4
 800fd0a:	6029      	str	r1, [r5, #0]
 800fd0c:	0605      	lsls	r5, r0, #24
 800fd0e:	d501      	bpl.n	800fd14 <_printf_i+0xe8>
 800fd10:	681e      	ldr	r6, [r3, #0]
 800fd12:	e002      	b.n	800fd1a <_printf_i+0xee>
 800fd14:	0641      	lsls	r1, r0, #25
 800fd16:	d5fb      	bpl.n	800fd10 <_printf_i+0xe4>
 800fd18:	881e      	ldrh	r6, [r3, #0]
 800fd1a:	4853      	ldr	r0, [pc, #332]	; (800fe68 <_printf_i+0x23c>)
 800fd1c:	2f6f      	cmp	r7, #111	; 0x6f
 800fd1e:	bf0c      	ite	eq
 800fd20:	2308      	moveq	r3, #8
 800fd22:	230a      	movne	r3, #10
 800fd24:	2100      	movs	r1, #0
 800fd26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd2a:	6865      	ldr	r5, [r4, #4]
 800fd2c:	60a5      	str	r5, [r4, #8]
 800fd2e:	2d00      	cmp	r5, #0
 800fd30:	bfa2      	ittt	ge
 800fd32:	6821      	ldrge	r1, [r4, #0]
 800fd34:	f021 0104 	bicge.w	r1, r1, #4
 800fd38:	6021      	strge	r1, [r4, #0]
 800fd3a:	b90e      	cbnz	r6, 800fd40 <_printf_i+0x114>
 800fd3c:	2d00      	cmp	r5, #0
 800fd3e:	d04b      	beq.n	800fdd8 <_printf_i+0x1ac>
 800fd40:	4615      	mov	r5, r2
 800fd42:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd46:	fb03 6711 	mls	r7, r3, r1, r6
 800fd4a:	5dc7      	ldrb	r7, [r0, r7]
 800fd4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd50:	4637      	mov	r7, r6
 800fd52:	42bb      	cmp	r3, r7
 800fd54:	460e      	mov	r6, r1
 800fd56:	d9f4      	bls.n	800fd42 <_printf_i+0x116>
 800fd58:	2b08      	cmp	r3, #8
 800fd5a:	d10b      	bne.n	800fd74 <_printf_i+0x148>
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	07de      	lsls	r6, r3, #31
 800fd60:	d508      	bpl.n	800fd74 <_printf_i+0x148>
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	6861      	ldr	r1, [r4, #4]
 800fd66:	4299      	cmp	r1, r3
 800fd68:	bfde      	ittt	le
 800fd6a:	2330      	movle	r3, #48	; 0x30
 800fd6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fd74:	1b52      	subs	r2, r2, r5
 800fd76:	6122      	str	r2, [r4, #16]
 800fd78:	f8cd a000 	str.w	sl, [sp]
 800fd7c:	464b      	mov	r3, r9
 800fd7e:	aa03      	add	r2, sp, #12
 800fd80:	4621      	mov	r1, r4
 800fd82:	4640      	mov	r0, r8
 800fd84:	f7ff fee4 	bl	800fb50 <_printf_common>
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d14a      	bne.n	800fe22 <_printf_i+0x1f6>
 800fd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd90:	b004      	add	sp, #16
 800fd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	f043 0320 	orr.w	r3, r3, #32
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	4833      	ldr	r0, [pc, #204]	; (800fe6c <_printf_i+0x240>)
 800fda0:	2778      	movs	r7, #120	; 0x78
 800fda2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	6829      	ldr	r1, [r5, #0]
 800fdaa:	061f      	lsls	r7, r3, #24
 800fdac:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdb0:	d402      	bmi.n	800fdb8 <_printf_i+0x18c>
 800fdb2:	065f      	lsls	r7, r3, #25
 800fdb4:	bf48      	it	mi
 800fdb6:	b2b6      	uxthmi	r6, r6
 800fdb8:	07df      	lsls	r7, r3, #31
 800fdba:	bf48      	it	mi
 800fdbc:	f043 0320 	orrmi.w	r3, r3, #32
 800fdc0:	6029      	str	r1, [r5, #0]
 800fdc2:	bf48      	it	mi
 800fdc4:	6023      	strmi	r3, [r4, #0]
 800fdc6:	b91e      	cbnz	r6, 800fdd0 <_printf_i+0x1a4>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	f023 0320 	bic.w	r3, r3, #32
 800fdce:	6023      	str	r3, [r4, #0]
 800fdd0:	2310      	movs	r3, #16
 800fdd2:	e7a7      	b.n	800fd24 <_printf_i+0xf8>
 800fdd4:	4824      	ldr	r0, [pc, #144]	; (800fe68 <_printf_i+0x23c>)
 800fdd6:	e7e4      	b.n	800fda2 <_printf_i+0x176>
 800fdd8:	4615      	mov	r5, r2
 800fdda:	e7bd      	b.n	800fd58 <_printf_i+0x12c>
 800fddc:	682b      	ldr	r3, [r5, #0]
 800fdde:	6826      	ldr	r6, [r4, #0]
 800fde0:	6961      	ldr	r1, [r4, #20]
 800fde2:	1d18      	adds	r0, r3, #4
 800fde4:	6028      	str	r0, [r5, #0]
 800fde6:	0635      	lsls	r5, r6, #24
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	d501      	bpl.n	800fdf0 <_printf_i+0x1c4>
 800fdec:	6019      	str	r1, [r3, #0]
 800fdee:	e002      	b.n	800fdf6 <_printf_i+0x1ca>
 800fdf0:	0670      	lsls	r0, r6, #25
 800fdf2:	d5fb      	bpl.n	800fdec <_printf_i+0x1c0>
 800fdf4:	8019      	strh	r1, [r3, #0]
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	6123      	str	r3, [r4, #16]
 800fdfa:	4615      	mov	r5, r2
 800fdfc:	e7bc      	b.n	800fd78 <_printf_i+0x14c>
 800fdfe:	682b      	ldr	r3, [r5, #0]
 800fe00:	1d1a      	adds	r2, r3, #4
 800fe02:	602a      	str	r2, [r5, #0]
 800fe04:	681d      	ldr	r5, [r3, #0]
 800fe06:	6862      	ldr	r2, [r4, #4]
 800fe08:	2100      	movs	r1, #0
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	f7f0 fa00 	bl	8000210 <memchr>
 800fe10:	b108      	cbz	r0, 800fe16 <_printf_i+0x1ea>
 800fe12:	1b40      	subs	r0, r0, r5
 800fe14:	6060      	str	r0, [r4, #4]
 800fe16:	6863      	ldr	r3, [r4, #4]
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe20:	e7aa      	b.n	800fd78 <_printf_i+0x14c>
 800fe22:	6923      	ldr	r3, [r4, #16]
 800fe24:	462a      	mov	r2, r5
 800fe26:	4649      	mov	r1, r9
 800fe28:	4640      	mov	r0, r8
 800fe2a:	47d0      	blx	sl
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	d0ad      	beq.n	800fd8c <_printf_i+0x160>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	079b      	lsls	r3, r3, #30
 800fe34:	d413      	bmi.n	800fe5e <_printf_i+0x232>
 800fe36:	68e0      	ldr	r0, [r4, #12]
 800fe38:	9b03      	ldr	r3, [sp, #12]
 800fe3a:	4298      	cmp	r0, r3
 800fe3c:	bfb8      	it	lt
 800fe3e:	4618      	movlt	r0, r3
 800fe40:	e7a6      	b.n	800fd90 <_printf_i+0x164>
 800fe42:	2301      	movs	r3, #1
 800fe44:	4632      	mov	r2, r6
 800fe46:	4649      	mov	r1, r9
 800fe48:	4640      	mov	r0, r8
 800fe4a:	47d0      	blx	sl
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d09d      	beq.n	800fd8c <_printf_i+0x160>
 800fe50:	3501      	adds	r5, #1
 800fe52:	68e3      	ldr	r3, [r4, #12]
 800fe54:	9903      	ldr	r1, [sp, #12]
 800fe56:	1a5b      	subs	r3, r3, r1
 800fe58:	42ab      	cmp	r3, r5
 800fe5a:	dcf2      	bgt.n	800fe42 <_printf_i+0x216>
 800fe5c:	e7eb      	b.n	800fe36 <_printf_i+0x20a>
 800fe5e:	2500      	movs	r5, #0
 800fe60:	f104 0619 	add.w	r6, r4, #25
 800fe64:	e7f5      	b.n	800fe52 <_printf_i+0x226>
 800fe66:	bf00      	nop
 800fe68:	08019130 	.word	0x08019130
 800fe6c:	08019141 	.word	0x08019141

0800fe70 <sniprintf>:
 800fe70:	b40c      	push	{r2, r3}
 800fe72:	b530      	push	{r4, r5, lr}
 800fe74:	4b17      	ldr	r3, [pc, #92]	; (800fed4 <sniprintf+0x64>)
 800fe76:	1e0c      	subs	r4, r1, #0
 800fe78:	681d      	ldr	r5, [r3, #0]
 800fe7a:	b09d      	sub	sp, #116	; 0x74
 800fe7c:	da08      	bge.n	800fe90 <sniprintf+0x20>
 800fe7e:	238b      	movs	r3, #139	; 0x8b
 800fe80:	602b      	str	r3, [r5, #0]
 800fe82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe86:	b01d      	add	sp, #116	; 0x74
 800fe88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe8c:	b002      	add	sp, #8
 800fe8e:	4770      	bx	lr
 800fe90:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fe94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fe98:	bf14      	ite	ne
 800fe9a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fe9e:	4623      	moveq	r3, r4
 800fea0:	9304      	str	r3, [sp, #16]
 800fea2:	9307      	str	r3, [sp, #28]
 800fea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fea8:	9002      	str	r0, [sp, #8]
 800feaa:	9006      	str	r0, [sp, #24]
 800feac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800feb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800feb2:	ab21      	add	r3, sp, #132	; 0x84
 800feb4:	a902      	add	r1, sp, #8
 800feb6:	4628      	mov	r0, r5
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	f001 fa7d 	bl	80113b8 <_svfiprintf_r>
 800febe:	1c43      	adds	r3, r0, #1
 800fec0:	bfbc      	itt	lt
 800fec2:	238b      	movlt	r3, #139	; 0x8b
 800fec4:	602b      	strlt	r3, [r5, #0]
 800fec6:	2c00      	cmp	r4, #0
 800fec8:	d0dd      	beq.n	800fe86 <sniprintf+0x16>
 800feca:	9b02      	ldr	r3, [sp, #8]
 800fecc:	2200      	movs	r2, #0
 800fece:	701a      	strb	r2, [r3, #0]
 800fed0:	e7d9      	b.n	800fe86 <sniprintf+0x16>
 800fed2:	bf00      	nop
 800fed4:	200000cc 	.word	0x200000cc

0800fed8 <__malloc_lock>:
 800fed8:	4801      	ldr	r0, [pc, #4]	; (800fee0 <__malloc_lock+0x8>)
 800feda:	f000 bb14 	b.w	8010506 <__retarget_lock_acquire_recursive>
 800fede:	bf00      	nop
 800fee0:	2000a06c 	.word	0x2000a06c

0800fee4 <__malloc_unlock>:
 800fee4:	4801      	ldr	r0, [pc, #4]	; (800feec <__malloc_unlock+0x8>)
 800fee6:	f000 bb0f 	b.w	8010508 <__retarget_lock_release_recursive>
 800feea:	bf00      	nop
 800feec:	2000a06c 	.word	0x2000a06c

0800fef0 <siprintf>:
 800fef0:	b40e      	push	{r1, r2, r3}
 800fef2:	b500      	push	{lr}
 800fef4:	b09c      	sub	sp, #112	; 0x70
 800fef6:	ab1d      	add	r3, sp, #116	; 0x74
 800fef8:	9002      	str	r0, [sp, #8]
 800fefa:	9006      	str	r0, [sp, #24]
 800fefc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff00:	4809      	ldr	r0, [pc, #36]	; (800ff28 <siprintf+0x38>)
 800ff02:	9107      	str	r1, [sp, #28]
 800ff04:	9104      	str	r1, [sp, #16]
 800ff06:	4909      	ldr	r1, [pc, #36]	; (800ff2c <siprintf+0x3c>)
 800ff08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff0c:	9105      	str	r1, [sp, #20]
 800ff0e:	6800      	ldr	r0, [r0, #0]
 800ff10:	9301      	str	r3, [sp, #4]
 800ff12:	a902      	add	r1, sp, #8
 800ff14:	f001 fa50 	bl	80113b8 <_svfiprintf_r>
 800ff18:	9b02      	ldr	r3, [sp, #8]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	b01c      	add	sp, #112	; 0x70
 800ff20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff24:	b003      	add	sp, #12
 800ff26:	4770      	bx	lr
 800ff28:	200000cc 	.word	0x200000cc
 800ff2c:	ffff0208 	.word	0xffff0208

0800ff30 <siscanf>:
 800ff30:	b40e      	push	{r1, r2, r3}
 800ff32:	b510      	push	{r4, lr}
 800ff34:	b09f      	sub	sp, #124	; 0x7c
 800ff36:	ac21      	add	r4, sp, #132	; 0x84
 800ff38:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ff3c:	f854 2b04 	ldr.w	r2, [r4], #4
 800ff40:	9201      	str	r2, [sp, #4]
 800ff42:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ff46:	9004      	str	r0, [sp, #16]
 800ff48:	9008      	str	r0, [sp, #32]
 800ff4a:	f7f0 f9b1 	bl	80002b0 <strlen>
 800ff4e:	4b0c      	ldr	r3, [pc, #48]	; (800ff80 <siscanf+0x50>)
 800ff50:	9005      	str	r0, [sp, #20]
 800ff52:	9009      	str	r0, [sp, #36]	; 0x24
 800ff54:	930d      	str	r3, [sp, #52]	; 0x34
 800ff56:	480b      	ldr	r0, [pc, #44]	; (800ff84 <siscanf+0x54>)
 800ff58:	9a01      	ldr	r2, [sp, #4]
 800ff5a:	6800      	ldr	r0, [r0, #0]
 800ff5c:	9403      	str	r4, [sp, #12]
 800ff5e:	2300      	movs	r3, #0
 800ff60:	9311      	str	r3, [sp, #68]	; 0x44
 800ff62:	9316      	str	r3, [sp, #88]	; 0x58
 800ff64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff68:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ff6c:	a904      	add	r1, sp, #16
 800ff6e:	4623      	mov	r3, r4
 800ff70:	f001 fb7a 	bl	8011668 <__ssvfiscanf_r>
 800ff74:	b01f      	add	sp, #124	; 0x7c
 800ff76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff7a:	b003      	add	sp, #12
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop
 800ff80:	0800ffab 	.word	0x0800ffab
 800ff84:	200000cc 	.word	0x200000cc

0800ff88 <__sread>:
 800ff88:	b510      	push	{r4, lr}
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff90:	f000 fa5a 	bl	8010448 <_read_r>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	bfab      	itete	ge
 800ff98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ff9c:	181b      	addge	r3, r3, r0
 800ff9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffa2:	bfac      	ite	ge
 800ffa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffa6:	81a3      	strhlt	r3, [r4, #12]
 800ffa8:	bd10      	pop	{r4, pc}

0800ffaa <__seofread>:
 800ffaa:	2000      	movs	r0, #0
 800ffac:	4770      	bx	lr

0800ffae <__swrite>:
 800ffae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb2:	461f      	mov	r7, r3
 800ffb4:	898b      	ldrh	r3, [r1, #12]
 800ffb6:	05db      	lsls	r3, r3, #23
 800ffb8:	4605      	mov	r5, r0
 800ffba:	460c      	mov	r4, r1
 800ffbc:	4616      	mov	r6, r2
 800ffbe:	d505      	bpl.n	800ffcc <__swrite+0x1e>
 800ffc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc4:	2302      	movs	r3, #2
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f000 fa2c 	bl	8010424 <_lseek_r>
 800ffcc:	89a3      	ldrh	r3, [r4, #12]
 800ffce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffd6:	81a3      	strh	r3, [r4, #12]
 800ffd8:	4632      	mov	r2, r6
 800ffda:	463b      	mov	r3, r7
 800ffdc:	4628      	mov	r0, r5
 800ffde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe2:	f000 ba53 	b.w	801048c <_write_r>

0800ffe6 <__sseek>:
 800ffe6:	b510      	push	{r4, lr}
 800ffe8:	460c      	mov	r4, r1
 800ffea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffee:	f000 fa19 	bl	8010424 <_lseek_r>
 800fff2:	1c43      	adds	r3, r0, #1
 800fff4:	89a3      	ldrh	r3, [r4, #12]
 800fff6:	bf15      	itete	ne
 800fff8:	6560      	strne	r0, [r4, #84]	; 0x54
 800fffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010002:	81a3      	strheq	r3, [r4, #12]
 8010004:	bf18      	it	ne
 8010006:	81a3      	strhne	r3, [r4, #12]
 8010008:	bd10      	pop	{r4, pc}

0801000a <__sclose>:
 801000a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801000e:	f000 b9f9 	b.w	8010404 <_close_r>
	...

08010014 <std>:
 8010014:	2300      	movs	r3, #0
 8010016:	b510      	push	{r4, lr}
 8010018:	4604      	mov	r4, r0
 801001a:	e9c0 3300 	strd	r3, r3, [r0]
 801001e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010022:	6083      	str	r3, [r0, #8]
 8010024:	8181      	strh	r1, [r0, #12]
 8010026:	6643      	str	r3, [r0, #100]	; 0x64
 8010028:	81c2      	strh	r2, [r0, #14]
 801002a:	6183      	str	r3, [r0, #24]
 801002c:	4619      	mov	r1, r3
 801002e:	2208      	movs	r2, #8
 8010030:	305c      	adds	r0, #92	; 0x5c
 8010032:	f000 f9db 	bl	80103ec <memset>
 8010036:	4b0d      	ldr	r3, [pc, #52]	; (801006c <std+0x58>)
 8010038:	6263      	str	r3, [r4, #36]	; 0x24
 801003a:	4b0d      	ldr	r3, [pc, #52]	; (8010070 <std+0x5c>)
 801003c:	62a3      	str	r3, [r4, #40]	; 0x28
 801003e:	4b0d      	ldr	r3, [pc, #52]	; (8010074 <std+0x60>)
 8010040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010042:	4b0d      	ldr	r3, [pc, #52]	; (8010078 <std+0x64>)
 8010044:	6323      	str	r3, [r4, #48]	; 0x30
 8010046:	4b0d      	ldr	r3, [pc, #52]	; (801007c <std+0x68>)
 8010048:	6224      	str	r4, [r4, #32]
 801004a:	429c      	cmp	r4, r3
 801004c:	d006      	beq.n	801005c <std+0x48>
 801004e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010052:	4294      	cmp	r4, r2
 8010054:	d002      	beq.n	801005c <std+0x48>
 8010056:	33d0      	adds	r3, #208	; 0xd0
 8010058:	429c      	cmp	r4, r3
 801005a:	d105      	bne.n	8010068 <std+0x54>
 801005c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010064:	f000 ba4e 	b.w	8010504 <__retarget_lock_init_recursive>
 8010068:	bd10      	pop	{r4, pc}
 801006a:	bf00      	nop
 801006c:	0800ff89 	.word	0x0800ff89
 8010070:	0800ffaf 	.word	0x0800ffaf
 8010074:	0800ffe7 	.word	0x0800ffe7
 8010078:	0801000b 	.word	0x0801000b
 801007c:	20009f2c 	.word	0x20009f2c

08010080 <stdio_exit_handler>:
 8010080:	4a02      	ldr	r2, [pc, #8]	; (801008c <stdio_exit_handler+0xc>)
 8010082:	4903      	ldr	r1, [pc, #12]	; (8010090 <stdio_exit_handler+0x10>)
 8010084:	4803      	ldr	r0, [pc, #12]	; (8010094 <stdio_exit_handler+0x14>)
 8010086:	f000 b8f7 	b.w	8010278 <_fwalk_sglue>
 801008a:	bf00      	nop
 801008c:	20000074 	.word	0x20000074
 8010090:	08011ffd 	.word	0x08011ffd
 8010094:	20000080 	.word	0x20000080

08010098 <cleanup_stdio>:
 8010098:	6841      	ldr	r1, [r0, #4]
 801009a:	4b0c      	ldr	r3, [pc, #48]	; (80100cc <cleanup_stdio+0x34>)
 801009c:	4299      	cmp	r1, r3
 801009e:	b510      	push	{r4, lr}
 80100a0:	4604      	mov	r4, r0
 80100a2:	d001      	beq.n	80100a8 <cleanup_stdio+0x10>
 80100a4:	f001 ffaa 	bl	8011ffc <_fflush_r>
 80100a8:	68a1      	ldr	r1, [r4, #8]
 80100aa:	4b09      	ldr	r3, [pc, #36]	; (80100d0 <cleanup_stdio+0x38>)
 80100ac:	4299      	cmp	r1, r3
 80100ae:	d002      	beq.n	80100b6 <cleanup_stdio+0x1e>
 80100b0:	4620      	mov	r0, r4
 80100b2:	f001 ffa3 	bl	8011ffc <_fflush_r>
 80100b6:	68e1      	ldr	r1, [r4, #12]
 80100b8:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <cleanup_stdio+0x3c>)
 80100ba:	4299      	cmp	r1, r3
 80100bc:	d004      	beq.n	80100c8 <cleanup_stdio+0x30>
 80100be:	4620      	mov	r0, r4
 80100c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100c4:	f001 bf9a 	b.w	8011ffc <_fflush_r>
 80100c8:	bd10      	pop	{r4, pc}
 80100ca:	bf00      	nop
 80100cc:	20009f2c 	.word	0x20009f2c
 80100d0:	20009f94 	.word	0x20009f94
 80100d4:	20009ffc 	.word	0x20009ffc

080100d8 <global_stdio_init.part.0>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <global_stdio_init.part.0+0x30>)
 80100dc:	4c0b      	ldr	r4, [pc, #44]	; (801010c <global_stdio_init.part.0+0x34>)
 80100de:	4a0c      	ldr	r2, [pc, #48]	; (8010110 <global_stdio_init.part.0+0x38>)
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	4620      	mov	r0, r4
 80100e4:	2200      	movs	r2, #0
 80100e6:	2104      	movs	r1, #4
 80100e8:	f7ff ff94 	bl	8010014 <std>
 80100ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80100f0:	2201      	movs	r2, #1
 80100f2:	2109      	movs	r1, #9
 80100f4:	f7ff ff8e 	bl	8010014 <std>
 80100f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80100fc:	2202      	movs	r2, #2
 80100fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010102:	2112      	movs	r1, #18
 8010104:	f7ff bf86 	b.w	8010014 <std>
 8010108:	2000a064 	.word	0x2000a064
 801010c:	20009f2c 	.word	0x20009f2c
 8010110:	08010081 	.word	0x08010081

08010114 <__sfp_lock_acquire>:
 8010114:	4801      	ldr	r0, [pc, #4]	; (801011c <__sfp_lock_acquire+0x8>)
 8010116:	f000 b9f6 	b.w	8010506 <__retarget_lock_acquire_recursive>
 801011a:	bf00      	nop
 801011c:	2000a06d 	.word	0x2000a06d

08010120 <__sfp_lock_release>:
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__sfp_lock_release+0x8>)
 8010122:	f000 b9f1 	b.w	8010508 <__retarget_lock_release_recursive>
 8010126:	bf00      	nop
 8010128:	2000a06d 	.word	0x2000a06d

0801012c <__sinit>:
 801012c:	b510      	push	{r4, lr}
 801012e:	4604      	mov	r4, r0
 8010130:	f7ff fff0 	bl	8010114 <__sfp_lock_acquire>
 8010134:	6a23      	ldr	r3, [r4, #32]
 8010136:	b11b      	cbz	r3, 8010140 <__sinit+0x14>
 8010138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013c:	f7ff bff0 	b.w	8010120 <__sfp_lock_release>
 8010140:	4b04      	ldr	r3, [pc, #16]	; (8010154 <__sinit+0x28>)
 8010142:	6223      	str	r3, [r4, #32]
 8010144:	4b04      	ldr	r3, [pc, #16]	; (8010158 <__sinit+0x2c>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1f5      	bne.n	8010138 <__sinit+0xc>
 801014c:	f7ff ffc4 	bl	80100d8 <global_stdio_init.part.0>
 8010150:	e7f2      	b.n	8010138 <__sinit+0xc>
 8010152:	bf00      	nop
 8010154:	08010099 	.word	0x08010099
 8010158:	2000a064 	.word	0x2000a064

0801015c <_strtol_l.constprop.0>:
 801015c:	2b01      	cmp	r3, #1
 801015e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010162:	d001      	beq.n	8010168 <_strtol_l.constprop.0+0xc>
 8010164:	2b24      	cmp	r3, #36	; 0x24
 8010166:	d906      	bls.n	8010176 <_strtol_l.constprop.0+0x1a>
 8010168:	f000 f9a2 	bl	80104b0 <__errno>
 801016c:	2316      	movs	r3, #22
 801016e:	6003      	str	r3, [r0, #0]
 8010170:	2000      	movs	r0, #0
 8010172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010176:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801025c <_strtol_l.constprop.0+0x100>
 801017a:	460d      	mov	r5, r1
 801017c:	462e      	mov	r6, r5
 801017e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010182:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010186:	f017 0708 	ands.w	r7, r7, #8
 801018a:	d1f7      	bne.n	801017c <_strtol_l.constprop.0+0x20>
 801018c:	2c2d      	cmp	r4, #45	; 0x2d
 801018e:	d132      	bne.n	80101f6 <_strtol_l.constprop.0+0x9a>
 8010190:	782c      	ldrb	r4, [r5, #0]
 8010192:	2701      	movs	r7, #1
 8010194:	1cb5      	adds	r5, r6, #2
 8010196:	2b00      	cmp	r3, #0
 8010198:	d05b      	beq.n	8010252 <_strtol_l.constprop.0+0xf6>
 801019a:	2b10      	cmp	r3, #16
 801019c:	d109      	bne.n	80101b2 <_strtol_l.constprop.0+0x56>
 801019e:	2c30      	cmp	r4, #48	; 0x30
 80101a0:	d107      	bne.n	80101b2 <_strtol_l.constprop.0+0x56>
 80101a2:	782c      	ldrb	r4, [r5, #0]
 80101a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80101a8:	2c58      	cmp	r4, #88	; 0x58
 80101aa:	d14d      	bne.n	8010248 <_strtol_l.constprop.0+0xec>
 80101ac:	786c      	ldrb	r4, [r5, #1]
 80101ae:	2310      	movs	r3, #16
 80101b0:	3502      	adds	r5, #2
 80101b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80101b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80101ba:	f04f 0e00 	mov.w	lr, #0
 80101be:	fbb8 f9f3 	udiv	r9, r8, r3
 80101c2:	4676      	mov	r6, lr
 80101c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80101c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80101cc:	f1bc 0f09 	cmp.w	ip, #9
 80101d0:	d816      	bhi.n	8010200 <_strtol_l.constprop.0+0xa4>
 80101d2:	4664      	mov	r4, ip
 80101d4:	42a3      	cmp	r3, r4
 80101d6:	dd24      	ble.n	8010222 <_strtol_l.constprop.0+0xc6>
 80101d8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80101dc:	d008      	beq.n	80101f0 <_strtol_l.constprop.0+0x94>
 80101de:	45b1      	cmp	r9, r6
 80101e0:	d31c      	bcc.n	801021c <_strtol_l.constprop.0+0xc0>
 80101e2:	d101      	bne.n	80101e8 <_strtol_l.constprop.0+0x8c>
 80101e4:	45a2      	cmp	sl, r4
 80101e6:	db19      	blt.n	801021c <_strtol_l.constprop.0+0xc0>
 80101e8:	fb06 4603 	mla	r6, r6, r3, r4
 80101ec:	f04f 0e01 	mov.w	lr, #1
 80101f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101f4:	e7e8      	b.n	80101c8 <_strtol_l.constprop.0+0x6c>
 80101f6:	2c2b      	cmp	r4, #43	; 0x2b
 80101f8:	bf04      	itt	eq
 80101fa:	782c      	ldrbeq	r4, [r5, #0]
 80101fc:	1cb5      	addeq	r5, r6, #2
 80101fe:	e7ca      	b.n	8010196 <_strtol_l.constprop.0+0x3a>
 8010200:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010204:	f1bc 0f19 	cmp.w	ip, #25
 8010208:	d801      	bhi.n	801020e <_strtol_l.constprop.0+0xb2>
 801020a:	3c37      	subs	r4, #55	; 0x37
 801020c:	e7e2      	b.n	80101d4 <_strtol_l.constprop.0+0x78>
 801020e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010212:	f1bc 0f19 	cmp.w	ip, #25
 8010216:	d804      	bhi.n	8010222 <_strtol_l.constprop.0+0xc6>
 8010218:	3c57      	subs	r4, #87	; 0x57
 801021a:	e7db      	b.n	80101d4 <_strtol_l.constprop.0+0x78>
 801021c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8010220:	e7e6      	b.n	80101f0 <_strtol_l.constprop.0+0x94>
 8010222:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8010226:	d105      	bne.n	8010234 <_strtol_l.constprop.0+0xd8>
 8010228:	2322      	movs	r3, #34	; 0x22
 801022a:	6003      	str	r3, [r0, #0]
 801022c:	4646      	mov	r6, r8
 801022e:	b942      	cbnz	r2, 8010242 <_strtol_l.constprop.0+0xe6>
 8010230:	4630      	mov	r0, r6
 8010232:	e79e      	b.n	8010172 <_strtol_l.constprop.0+0x16>
 8010234:	b107      	cbz	r7, 8010238 <_strtol_l.constprop.0+0xdc>
 8010236:	4276      	negs	r6, r6
 8010238:	2a00      	cmp	r2, #0
 801023a:	d0f9      	beq.n	8010230 <_strtol_l.constprop.0+0xd4>
 801023c:	f1be 0f00 	cmp.w	lr, #0
 8010240:	d000      	beq.n	8010244 <_strtol_l.constprop.0+0xe8>
 8010242:	1e69      	subs	r1, r5, #1
 8010244:	6011      	str	r1, [r2, #0]
 8010246:	e7f3      	b.n	8010230 <_strtol_l.constprop.0+0xd4>
 8010248:	2430      	movs	r4, #48	; 0x30
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1b1      	bne.n	80101b2 <_strtol_l.constprop.0+0x56>
 801024e:	2308      	movs	r3, #8
 8010250:	e7af      	b.n	80101b2 <_strtol_l.constprop.0+0x56>
 8010252:	2c30      	cmp	r4, #48	; 0x30
 8010254:	d0a5      	beq.n	80101a2 <_strtol_l.constprop.0+0x46>
 8010256:	230a      	movs	r3, #10
 8010258:	e7ab      	b.n	80101b2 <_strtol_l.constprop.0+0x56>
 801025a:	bf00      	nop
 801025c:	08019153 	.word	0x08019153

08010260 <_strtol_r>:
 8010260:	f7ff bf7c 	b.w	801015c <_strtol_l.constprop.0>

08010264 <strtol>:
 8010264:	4613      	mov	r3, r2
 8010266:	460a      	mov	r2, r1
 8010268:	4601      	mov	r1, r0
 801026a:	4802      	ldr	r0, [pc, #8]	; (8010274 <strtol+0x10>)
 801026c:	6800      	ldr	r0, [r0, #0]
 801026e:	f7ff bf75 	b.w	801015c <_strtol_l.constprop.0>
 8010272:	bf00      	nop
 8010274:	200000cc 	.word	0x200000cc

08010278 <_fwalk_sglue>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	4607      	mov	r7, r0
 801027e:	4688      	mov	r8, r1
 8010280:	4614      	mov	r4, r2
 8010282:	2600      	movs	r6, #0
 8010284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010288:	f1b9 0901 	subs.w	r9, r9, #1
 801028c:	d505      	bpl.n	801029a <_fwalk_sglue+0x22>
 801028e:	6824      	ldr	r4, [r4, #0]
 8010290:	2c00      	cmp	r4, #0
 8010292:	d1f7      	bne.n	8010284 <_fwalk_sglue+0xc>
 8010294:	4630      	mov	r0, r6
 8010296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801029a:	89ab      	ldrh	r3, [r5, #12]
 801029c:	2b01      	cmp	r3, #1
 801029e:	d907      	bls.n	80102b0 <_fwalk_sglue+0x38>
 80102a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102a4:	3301      	adds	r3, #1
 80102a6:	d003      	beq.n	80102b0 <_fwalk_sglue+0x38>
 80102a8:	4629      	mov	r1, r5
 80102aa:	4638      	mov	r0, r7
 80102ac:	47c0      	blx	r8
 80102ae:	4306      	orrs	r6, r0
 80102b0:	3568      	adds	r5, #104	; 0x68
 80102b2:	e7e9      	b.n	8010288 <_fwalk_sglue+0x10>

080102b4 <_vsniprintf_r>:
 80102b4:	b530      	push	{r4, r5, lr}
 80102b6:	4614      	mov	r4, r2
 80102b8:	2c00      	cmp	r4, #0
 80102ba:	b09b      	sub	sp, #108	; 0x6c
 80102bc:	4605      	mov	r5, r0
 80102be:	461a      	mov	r2, r3
 80102c0:	da05      	bge.n	80102ce <_vsniprintf_r+0x1a>
 80102c2:	238b      	movs	r3, #139	; 0x8b
 80102c4:	6003      	str	r3, [r0, #0]
 80102c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102ca:	b01b      	add	sp, #108	; 0x6c
 80102cc:	bd30      	pop	{r4, r5, pc}
 80102ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 80102d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80102d6:	bf14      	ite	ne
 80102d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80102dc:	4623      	moveq	r3, r4
 80102de:	9302      	str	r3, [sp, #8]
 80102e0:	9305      	str	r3, [sp, #20]
 80102e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102e6:	9100      	str	r1, [sp, #0]
 80102e8:	9104      	str	r1, [sp, #16]
 80102ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80102ee:	4669      	mov	r1, sp
 80102f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80102f2:	f001 f861 	bl	80113b8 <_svfiprintf_r>
 80102f6:	1c43      	adds	r3, r0, #1
 80102f8:	bfbc      	itt	lt
 80102fa:	238b      	movlt	r3, #139	; 0x8b
 80102fc:	602b      	strlt	r3, [r5, #0]
 80102fe:	2c00      	cmp	r4, #0
 8010300:	d0e3      	beq.n	80102ca <_vsniprintf_r+0x16>
 8010302:	9b00      	ldr	r3, [sp, #0]
 8010304:	2200      	movs	r2, #0
 8010306:	701a      	strb	r2, [r3, #0]
 8010308:	e7df      	b.n	80102ca <_vsniprintf_r+0x16>
	...

0801030c <vsniprintf>:
 801030c:	b507      	push	{r0, r1, r2, lr}
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	4613      	mov	r3, r2
 8010312:	460a      	mov	r2, r1
 8010314:	4601      	mov	r1, r0
 8010316:	4803      	ldr	r0, [pc, #12]	; (8010324 <vsniprintf+0x18>)
 8010318:	6800      	ldr	r0, [r0, #0]
 801031a:	f7ff ffcb 	bl	80102b4 <_vsniprintf_r>
 801031e:	b003      	add	sp, #12
 8010320:	f85d fb04 	ldr.w	pc, [sp], #4
 8010324:	200000cc 	.word	0x200000cc

08010328 <iprintf>:
 8010328:	b40f      	push	{r0, r1, r2, r3}
 801032a:	b507      	push	{r0, r1, r2, lr}
 801032c:	4906      	ldr	r1, [pc, #24]	; (8010348 <iprintf+0x20>)
 801032e:	ab04      	add	r3, sp, #16
 8010330:	6808      	ldr	r0, [r1, #0]
 8010332:	f853 2b04 	ldr.w	r2, [r3], #4
 8010336:	6881      	ldr	r1, [r0, #8]
 8010338:	9301      	str	r3, [sp, #4]
 801033a:	f001 fb37 	bl	80119ac <_vfiprintf_r>
 801033e:	b003      	add	sp, #12
 8010340:	f85d eb04 	ldr.w	lr, [sp], #4
 8010344:	b004      	add	sp, #16
 8010346:	4770      	bx	lr
 8010348:	200000cc 	.word	0x200000cc

0801034c <strncmp>:
 801034c:	b510      	push	{r4, lr}
 801034e:	b16a      	cbz	r2, 801036c <strncmp+0x20>
 8010350:	3901      	subs	r1, #1
 8010352:	1884      	adds	r4, r0, r2
 8010354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010358:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801035c:	429a      	cmp	r2, r3
 801035e:	d103      	bne.n	8010368 <strncmp+0x1c>
 8010360:	42a0      	cmp	r0, r4
 8010362:	d001      	beq.n	8010368 <strncmp+0x1c>
 8010364:	2a00      	cmp	r2, #0
 8010366:	d1f5      	bne.n	8010354 <strncmp+0x8>
 8010368:	1ad0      	subs	r0, r2, r3
 801036a:	bd10      	pop	{r4, pc}
 801036c:	4610      	mov	r0, r2
 801036e:	e7fc      	b.n	801036a <strncmp+0x1e>

08010370 <strncpy>:
 8010370:	b510      	push	{r4, lr}
 8010372:	3901      	subs	r1, #1
 8010374:	4603      	mov	r3, r0
 8010376:	b132      	cbz	r2, 8010386 <strncpy+0x16>
 8010378:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801037c:	f803 4b01 	strb.w	r4, [r3], #1
 8010380:	3a01      	subs	r2, #1
 8010382:	2c00      	cmp	r4, #0
 8010384:	d1f7      	bne.n	8010376 <strncpy+0x6>
 8010386:	441a      	add	r2, r3
 8010388:	2100      	movs	r1, #0
 801038a:	4293      	cmp	r3, r2
 801038c:	d100      	bne.n	8010390 <strncpy+0x20>
 801038e:	bd10      	pop	{r4, pc}
 8010390:	f803 1b01 	strb.w	r1, [r3], #1
 8010394:	e7f9      	b.n	801038a <strncpy+0x1a>

08010396 <__strtok_r>:
 8010396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010398:	b908      	cbnz	r0, 801039e <__strtok_r+0x8>
 801039a:	6810      	ldr	r0, [r2, #0]
 801039c:	b188      	cbz	r0, 80103c2 <__strtok_r+0x2c>
 801039e:	4604      	mov	r4, r0
 80103a0:	4620      	mov	r0, r4
 80103a2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80103a6:	460f      	mov	r7, r1
 80103a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80103ac:	b91e      	cbnz	r6, 80103b6 <__strtok_r+0x20>
 80103ae:	b965      	cbnz	r5, 80103ca <__strtok_r+0x34>
 80103b0:	6015      	str	r5, [r2, #0]
 80103b2:	4628      	mov	r0, r5
 80103b4:	e005      	b.n	80103c2 <__strtok_r+0x2c>
 80103b6:	42b5      	cmp	r5, r6
 80103b8:	d1f6      	bne.n	80103a8 <__strtok_r+0x12>
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1f0      	bne.n	80103a0 <__strtok_r+0xa>
 80103be:	6014      	str	r4, [r2, #0]
 80103c0:	7003      	strb	r3, [r0, #0]
 80103c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103c4:	461c      	mov	r4, r3
 80103c6:	e00c      	b.n	80103e2 <__strtok_r+0x4c>
 80103c8:	b915      	cbnz	r5, 80103d0 <__strtok_r+0x3a>
 80103ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103ce:	460e      	mov	r6, r1
 80103d0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80103d4:	42ab      	cmp	r3, r5
 80103d6:	d1f7      	bne.n	80103c8 <__strtok_r+0x32>
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d0f3      	beq.n	80103c4 <__strtok_r+0x2e>
 80103dc:	2300      	movs	r3, #0
 80103de:	f804 3c01 	strb.w	r3, [r4, #-1]
 80103e2:	6014      	str	r4, [r2, #0]
 80103e4:	e7ed      	b.n	80103c2 <__strtok_r+0x2c>

080103e6 <strtok_r>:
 80103e6:	2301      	movs	r3, #1
 80103e8:	f7ff bfd5 	b.w	8010396 <__strtok_r>

080103ec <memset>:
 80103ec:	4402      	add	r2, r0
 80103ee:	4603      	mov	r3, r0
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d100      	bne.n	80103f6 <memset+0xa>
 80103f4:	4770      	bx	lr
 80103f6:	f803 1b01 	strb.w	r1, [r3], #1
 80103fa:	e7f9      	b.n	80103f0 <memset+0x4>

080103fc <_localeconv_r>:
 80103fc:	4800      	ldr	r0, [pc, #0]	; (8010400 <_localeconv_r+0x4>)
 80103fe:	4770      	bx	lr
 8010400:	200001c0 	.word	0x200001c0

08010404 <_close_r>:
 8010404:	b538      	push	{r3, r4, r5, lr}
 8010406:	4d06      	ldr	r5, [pc, #24]	; (8010420 <_close_r+0x1c>)
 8010408:	2300      	movs	r3, #0
 801040a:	4604      	mov	r4, r0
 801040c:	4608      	mov	r0, r1
 801040e:	602b      	str	r3, [r5, #0]
 8010410:	f7f6 fbc9 	bl	8006ba6 <_close>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d102      	bne.n	801041e <_close_r+0x1a>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	b103      	cbz	r3, 801041e <_close_r+0x1a>
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	2000a068 	.word	0x2000a068

08010424 <_lseek_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4d07      	ldr	r5, [pc, #28]	; (8010444 <_lseek_r+0x20>)
 8010428:	4604      	mov	r4, r0
 801042a:	4608      	mov	r0, r1
 801042c:	4611      	mov	r1, r2
 801042e:	2200      	movs	r2, #0
 8010430:	602a      	str	r2, [r5, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	f7f6 fbde 	bl	8006bf4 <_lseek>
 8010438:	1c43      	adds	r3, r0, #1
 801043a:	d102      	bne.n	8010442 <_lseek_r+0x1e>
 801043c:	682b      	ldr	r3, [r5, #0]
 801043e:	b103      	cbz	r3, 8010442 <_lseek_r+0x1e>
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	bd38      	pop	{r3, r4, r5, pc}
 8010444:	2000a068 	.word	0x2000a068

08010448 <_read_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	; (8010468 <_read_r+0x20>)
 801044c:	4604      	mov	r4, r0
 801044e:	4608      	mov	r0, r1
 8010450:	4611      	mov	r1, r2
 8010452:	2200      	movs	r2, #0
 8010454:	602a      	str	r2, [r5, #0]
 8010456:	461a      	mov	r2, r3
 8010458:	f7f6 fb6c 	bl	8006b34 <_read>
 801045c:	1c43      	adds	r3, r0, #1
 801045e:	d102      	bne.n	8010466 <_read_r+0x1e>
 8010460:	682b      	ldr	r3, [r5, #0]
 8010462:	b103      	cbz	r3, 8010466 <_read_r+0x1e>
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	2000a068 	.word	0x2000a068

0801046c <_sbrk_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d06      	ldr	r5, [pc, #24]	; (8010488 <_sbrk_r+0x1c>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	602b      	str	r3, [r5, #0]
 8010478:	f7f6 fbca 	bl	8006c10 <_sbrk>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_sbrk_r+0x1a>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_sbrk_r+0x1a>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	2000a068 	.word	0x2000a068

0801048c <_write_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4d07      	ldr	r5, [pc, #28]	; (80104ac <_write_r+0x20>)
 8010490:	4604      	mov	r4, r0
 8010492:	4608      	mov	r0, r1
 8010494:	4611      	mov	r1, r2
 8010496:	2200      	movs	r2, #0
 8010498:	602a      	str	r2, [r5, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	f7f6 fb67 	bl	8006b6e <_write>
 80104a0:	1c43      	adds	r3, r0, #1
 80104a2:	d102      	bne.n	80104aa <_write_r+0x1e>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	b103      	cbz	r3, 80104aa <_write_r+0x1e>
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	bd38      	pop	{r3, r4, r5, pc}
 80104ac:	2000a068 	.word	0x2000a068

080104b0 <__errno>:
 80104b0:	4b01      	ldr	r3, [pc, #4]	; (80104b8 <__errno+0x8>)
 80104b2:	6818      	ldr	r0, [r3, #0]
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	200000cc 	.word	0x200000cc

080104bc <__libc_init_array>:
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	4d0d      	ldr	r5, [pc, #52]	; (80104f4 <__libc_init_array+0x38>)
 80104c0:	4c0d      	ldr	r4, [pc, #52]	; (80104f8 <__libc_init_array+0x3c>)
 80104c2:	1b64      	subs	r4, r4, r5
 80104c4:	10a4      	asrs	r4, r4, #2
 80104c6:	2600      	movs	r6, #0
 80104c8:	42a6      	cmp	r6, r4
 80104ca:	d109      	bne.n	80104e0 <__libc_init_array+0x24>
 80104cc:	4d0b      	ldr	r5, [pc, #44]	; (80104fc <__libc_init_array+0x40>)
 80104ce:	4c0c      	ldr	r4, [pc, #48]	; (8010500 <__libc_init_array+0x44>)
 80104d0:	f003 f816 	bl	8013500 <_init>
 80104d4:	1b64      	subs	r4, r4, r5
 80104d6:	10a4      	asrs	r4, r4, #2
 80104d8:	2600      	movs	r6, #0
 80104da:	42a6      	cmp	r6, r4
 80104dc:	d105      	bne.n	80104ea <__libc_init_array+0x2e>
 80104de:	bd70      	pop	{r4, r5, r6, pc}
 80104e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80104e4:	4798      	blx	r3
 80104e6:	3601      	adds	r6, #1
 80104e8:	e7ee      	b.n	80104c8 <__libc_init_array+0xc>
 80104ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80104ee:	4798      	blx	r3
 80104f0:	3601      	adds	r6, #1
 80104f2:	e7f2      	b.n	80104da <__libc_init_array+0x1e>
 80104f4:	080194b8 	.word	0x080194b8
 80104f8:	080194b8 	.word	0x080194b8
 80104fc:	080194b8 	.word	0x080194b8
 8010500:	080194bc 	.word	0x080194bc

08010504 <__retarget_lock_init_recursive>:
 8010504:	4770      	bx	lr

08010506 <__retarget_lock_acquire_recursive>:
 8010506:	4770      	bx	lr

08010508 <__retarget_lock_release_recursive>:
 8010508:	4770      	bx	lr

0801050a <memcpy>:
 801050a:	440a      	add	r2, r1
 801050c:	4291      	cmp	r1, r2
 801050e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010512:	d100      	bne.n	8010516 <memcpy+0xc>
 8010514:	4770      	bx	lr
 8010516:	b510      	push	{r4, lr}
 8010518:	f811 4b01 	ldrb.w	r4, [r1], #1
 801051c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010520:	4291      	cmp	r1, r2
 8010522:	d1f9      	bne.n	8010518 <memcpy+0xe>
 8010524:	bd10      	pop	{r4, pc}

08010526 <strcpy>:
 8010526:	4603      	mov	r3, r0
 8010528:	f811 2b01 	ldrb.w	r2, [r1], #1
 801052c:	f803 2b01 	strb.w	r2, [r3], #1
 8010530:	2a00      	cmp	r2, #0
 8010532:	d1f9      	bne.n	8010528 <strcpy+0x2>
 8010534:	4770      	bx	lr
	...

08010538 <__assert_func>:
 8010538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801053a:	4614      	mov	r4, r2
 801053c:	461a      	mov	r2, r3
 801053e:	4b09      	ldr	r3, [pc, #36]	; (8010564 <__assert_func+0x2c>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4605      	mov	r5, r0
 8010544:	68d8      	ldr	r0, [r3, #12]
 8010546:	b14c      	cbz	r4, 801055c <__assert_func+0x24>
 8010548:	4b07      	ldr	r3, [pc, #28]	; (8010568 <__assert_func+0x30>)
 801054a:	9100      	str	r1, [sp, #0]
 801054c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010550:	4906      	ldr	r1, [pc, #24]	; (801056c <__assert_func+0x34>)
 8010552:	462b      	mov	r3, r5
 8010554:	f002 f8f6 	bl	8012744 <fiprintf>
 8010558:	f002 fb18 	bl	8012b8c <abort>
 801055c:	4b04      	ldr	r3, [pc, #16]	; (8010570 <__assert_func+0x38>)
 801055e:	461c      	mov	r4, r3
 8010560:	e7f3      	b.n	801054a <__assert_func+0x12>
 8010562:	bf00      	nop
 8010564:	200000cc 	.word	0x200000cc
 8010568:	08019253 	.word	0x08019253
 801056c:	08019260 	.word	0x08019260
 8010570:	0801928e 	.word	0x0801928e

08010574 <quorem>:
 8010574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010578:	6903      	ldr	r3, [r0, #16]
 801057a:	690c      	ldr	r4, [r1, #16]
 801057c:	42a3      	cmp	r3, r4
 801057e:	4607      	mov	r7, r0
 8010580:	db7e      	blt.n	8010680 <quorem+0x10c>
 8010582:	3c01      	subs	r4, #1
 8010584:	f101 0814 	add.w	r8, r1, #20
 8010588:	f100 0514 	add.w	r5, r0, #20
 801058c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801059a:	3301      	adds	r3, #1
 801059c:	429a      	cmp	r2, r3
 801059e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80105aa:	d331      	bcc.n	8010610 <quorem+0x9c>
 80105ac:	f04f 0e00 	mov.w	lr, #0
 80105b0:	4640      	mov	r0, r8
 80105b2:	46ac      	mov	ip, r5
 80105b4:	46f2      	mov	sl, lr
 80105b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80105ba:	b293      	uxth	r3, r2
 80105bc:	fb06 e303 	mla	r3, r6, r3, lr
 80105c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105c4:	0c1a      	lsrs	r2, r3, #16
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	ebaa 0303 	sub.w	r3, sl, r3
 80105cc:	f8dc a000 	ldr.w	sl, [ip]
 80105d0:	fa13 f38a 	uxtah	r3, r3, sl
 80105d4:	fb06 220e 	mla	r2, r6, lr, r2
 80105d8:	9300      	str	r3, [sp, #0]
 80105da:	9b00      	ldr	r3, [sp, #0]
 80105dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105e0:	b292      	uxth	r2, r2
 80105e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80105e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80105ee:	4581      	cmp	r9, r0
 80105f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105f4:	f84c 3b04 	str.w	r3, [ip], #4
 80105f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80105fc:	d2db      	bcs.n	80105b6 <quorem+0x42>
 80105fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8010602:	b92b      	cbnz	r3, 8010610 <quorem+0x9c>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	3b04      	subs	r3, #4
 8010608:	429d      	cmp	r5, r3
 801060a:	461a      	mov	r2, r3
 801060c:	d32c      	bcc.n	8010668 <quorem+0xf4>
 801060e:	613c      	str	r4, [r7, #16]
 8010610:	4638      	mov	r0, r7
 8010612:	f001 ff97 	bl	8012544 <__mcmp>
 8010616:	2800      	cmp	r0, #0
 8010618:	db22      	blt.n	8010660 <quorem+0xec>
 801061a:	3601      	adds	r6, #1
 801061c:	4629      	mov	r1, r5
 801061e:	2000      	movs	r0, #0
 8010620:	f858 2b04 	ldr.w	r2, [r8], #4
 8010624:	f8d1 c000 	ldr.w	ip, [r1]
 8010628:	b293      	uxth	r3, r2
 801062a:	1ac3      	subs	r3, r0, r3
 801062c:	0c12      	lsrs	r2, r2, #16
 801062e:	fa13 f38c 	uxtah	r3, r3, ip
 8010632:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010636:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801063a:	b29b      	uxth	r3, r3
 801063c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010640:	45c1      	cmp	r9, r8
 8010642:	f841 3b04 	str.w	r3, [r1], #4
 8010646:	ea4f 4022 	mov.w	r0, r2, asr #16
 801064a:	d2e9      	bcs.n	8010620 <quorem+0xac>
 801064c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010654:	b922      	cbnz	r2, 8010660 <quorem+0xec>
 8010656:	3b04      	subs	r3, #4
 8010658:	429d      	cmp	r5, r3
 801065a:	461a      	mov	r2, r3
 801065c:	d30a      	bcc.n	8010674 <quorem+0x100>
 801065e:	613c      	str	r4, [r7, #16]
 8010660:	4630      	mov	r0, r6
 8010662:	b003      	add	sp, #12
 8010664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010668:	6812      	ldr	r2, [r2, #0]
 801066a:	3b04      	subs	r3, #4
 801066c:	2a00      	cmp	r2, #0
 801066e:	d1ce      	bne.n	801060e <quorem+0x9a>
 8010670:	3c01      	subs	r4, #1
 8010672:	e7c9      	b.n	8010608 <quorem+0x94>
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	3b04      	subs	r3, #4
 8010678:	2a00      	cmp	r2, #0
 801067a:	d1f0      	bne.n	801065e <quorem+0xea>
 801067c:	3c01      	subs	r4, #1
 801067e:	e7eb      	b.n	8010658 <quorem+0xe4>
 8010680:	2000      	movs	r0, #0
 8010682:	e7ee      	b.n	8010662 <quorem+0xee>
 8010684:	0000      	movs	r0, r0
	...

08010688 <_dtoa_r>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	ed2d 8b04 	vpush	{d8-d9}
 8010690:	69c5      	ldr	r5, [r0, #28]
 8010692:	b093      	sub	sp, #76	; 0x4c
 8010694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010698:	ec57 6b10 	vmov	r6, r7, d0
 801069c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106a0:	9107      	str	r1, [sp, #28]
 80106a2:	4604      	mov	r4, r0
 80106a4:	920a      	str	r2, [sp, #40]	; 0x28
 80106a6:	930d      	str	r3, [sp, #52]	; 0x34
 80106a8:	b975      	cbnz	r5, 80106c8 <_dtoa_r+0x40>
 80106aa:	2010      	movs	r0, #16
 80106ac:	f7ff f9a0 	bl	800f9f0 <malloc>
 80106b0:	4602      	mov	r2, r0
 80106b2:	61e0      	str	r0, [r4, #28]
 80106b4:	b920      	cbnz	r0, 80106c0 <_dtoa_r+0x38>
 80106b6:	4bae      	ldr	r3, [pc, #696]	; (8010970 <_dtoa_r+0x2e8>)
 80106b8:	21ef      	movs	r1, #239	; 0xef
 80106ba:	48ae      	ldr	r0, [pc, #696]	; (8010974 <_dtoa_r+0x2ec>)
 80106bc:	f7ff ff3c 	bl	8010538 <__assert_func>
 80106c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106c4:	6005      	str	r5, [r0, #0]
 80106c6:	60c5      	str	r5, [r0, #12]
 80106c8:	69e3      	ldr	r3, [r4, #28]
 80106ca:	6819      	ldr	r1, [r3, #0]
 80106cc:	b151      	cbz	r1, 80106e4 <_dtoa_r+0x5c>
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	604a      	str	r2, [r1, #4]
 80106d2:	2301      	movs	r3, #1
 80106d4:	4093      	lsls	r3, r2
 80106d6:	608b      	str	r3, [r1, #8]
 80106d8:	4620      	mov	r0, r4
 80106da:	f001 fcf7 	bl	80120cc <_Bfree>
 80106de:	69e3      	ldr	r3, [r4, #28]
 80106e0:	2200      	movs	r2, #0
 80106e2:	601a      	str	r2, [r3, #0]
 80106e4:	1e3b      	subs	r3, r7, #0
 80106e6:	bfbb      	ittet	lt
 80106e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80106ec:	9303      	strlt	r3, [sp, #12]
 80106ee:	2300      	movge	r3, #0
 80106f0:	2201      	movlt	r2, #1
 80106f2:	bfac      	ite	ge
 80106f4:	f8c8 3000 	strge.w	r3, [r8]
 80106f8:	f8c8 2000 	strlt.w	r2, [r8]
 80106fc:	4b9e      	ldr	r3, [pc, #632]	; (8010978 <_dtoa_r+0x2f0>)
 80106fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010702:	ea33 0308 	bics.w	r3, r3, r8
 8010706:	d11b      	bne.n	8010740 <_dtoa_r+0xb8>
 8010708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801070a:	f242 730f 	movw	r3, #9999	; 0x270f
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010714:	4333      	orrs	r3, r6
 8010716:	f000 8593 	beq.w	8011240 <_dtoa_r+0xbb8>
 801071a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801071c:	b963      	cbnz	r3, 8010738 <_dtoa_r+0xb0>
 801071e:	4b97      	ldr	r3, [pc, #604]	; (801097c <_dtoa_r+0x2f4>)
 8010720:	e027      	b.n	8010772 <_dtoa_r+0xea>
 8010722:	4b97      	ldr	r3, [pc, #604]	; (8010980 <_dtoa_r+0x2f8>)
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	3308      	adds	r3, #8
 8010728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	9800      	ldr	r0, [sp, #0]
 801072e:	b013      	add	sp, #76	; 0x4c
 8010730:	ecbd 8b04 	vpop	{d8-d9}
 8010734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010738:	4b90      	ldr	r3, [pc, #576]	; (801097c <_dtoa_r+0x2f4>)
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	3303      	adds	r3, #3
 801073e:	e7f3      	b.n	8010728 <_dtoa_r+0xa0>
 8010740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010744:	2200      	movs	r2, #0
 8010746:	ec51 0b17 	vmov	r0, r1, d7
 801074a:	eeb0 8a47 	vmov.f32	s16, s14
 801074e:	eef0 8a67 	vmov.f32	s17, s15
 8010752:	2300      	movs	r3, #0
 8010754:	f7f0 f9d8 	bl	8000b08 <__aeabi_dcmpeq>
 8010758:	4681      	mov	r9, r0
 801075a:	b160      	cbz	r0, 8010776 <_dtoa_r+0xee>
 801075c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801075e:	2301      	movs	r3, #1
 8010760:	6013      	str	r3, [r2, #0]
 8010762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 8568 	beq.w	801123a <_dtoa_r+0xbb2>
 801076a:	4b86      	ldr	r3, [pc, #536]	; (8010984 <_dtoa_r+0x2fc>)
 801076c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801076e:	6013      	str	r3, [r2, #0]
 8010770:	3b01      	subs	r3, #1
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	e7da      	b.n	801072c <_dtoa_r+0xa4>
 8010776:	aa10      	add	r2, sp, #64	; 0x40
 8010778:	a911      	add	r1, sp, #68	; 0x44
 801077a:	4620      	mov	r0, r4
 801077c:	eeb0 0a48 	vmov.f32	s0, s16
 8010780:	eef0 0a68 	vmov.f32	s1, s17
 8010784:	f001 ff84 	bl	8012690 <__d2b>
 8010788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801078c:	4682      	mov	sl, r0
 801078e:	2d00      	cmp	r5, #0
 8010790:	d07f      	beq.n	8010892 <_dtoa_r+0x20a>
 8010792:	ee18 3a90 	vmov	r3, s17
 8010796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801079a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801079e:	ec51 0b18 	vmov	r0, r1, d8
 80107a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80107a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80107ae:	4619      	mov	r1, r3
 80107b0:	2200      	movs	r2, #0
 80107b2:	4b75      	ldr	r3, [pc, #468]	; (8010988 <_dtoa_r+0x300>)
 80107b4:	f7ef fd88 	bl	80002c8 <__aeabi_dsub>
 80107b8:	a367      	add	r3, pc, #412	; (adr r3, 8010958 <_dtoa_r+0x2d0>)
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	f7ef ff3b 	bl	8000638 <__aeabi_dmul>
 80107c2:	a367      	add	r3, pc, #412	; (adr r3, 8010960 <_dtoa_r+0x2d8>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef fd80 	bl	80002cc <__adddf3>
 80107cc:	4606      	mov	r6, r0
 80107ce:	4628      	mov	r0, r5
 80107d0:	460f      	mov	r7, r1
 80107d2:	f7ef fec7 	bl	8000564 <__aeabi_i2d>
 80107d6:	a364      	add	r3, pc, #400	; (adr r3, 8010968 <_dtoa_r+0x2e0>)
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	f7ef ff2c 	bl	8000638 <__aeabi_dmul>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	4630      	mov	r0, r6
 80107e6:	4639      	mov	r1, r7
 80107e8:	f7ef fd70 	bl	80002cc <__adddf3>
 80107ec:	4606      	mov	r6, r0
 80107ee:	460f      	mov	r7, r1
 80107f0:	f7f0 f9d2 	bl	8000b98 <__aeabi_d2iz>
 80107f4:	2200      	movs	r2, #0
 80107f6:	4683      	mov	fp, r0
 80107f8:	2300      	movs	r3, #0
 80107fa:	4630      	mov	r0, r6
 80107fc:	4639      	mov	r1, r7
 80107fe:	f7f0 f98d 	bl	8000b1c <__aeabi_dcmplt>
 8010802:	b148      	cbz	r0, 8010818 <_dtoa_r+0x190>
 8010804:	4658      	mov	r0, fp
 8010806:	f7ef fead 	bl	8000564 <__aeabi_i2d>
 801080a:	4632      	mov	r2, r6
 801080c:	463b      	mov	r3, r7
 801080e:	f7f0 f97b 	bl	8000b08 <__aeabi_dcmpeq>
 8010812:	b908      	cbnz	r0, 8010818 <_dtoa_r+0x190>
 8010814:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010818:	f1bb 0f16 	cmp.w	fp, #22
 801081c:	d857      	bhi.n	80108ce <_dtoa_r+0x246>
 801081e:	4b5b      	ldr	r3, [pc, #364]	; (801098c <_dtoa_r+0x304>)
 8010820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	ec51 0b18 	vmov	r0, r1, d8
 801082c:	f7f0 f976 	bl	8000b1c <__aeabi_dcmplt>
 8010830:	2800      	cmp	r0, #0
 8010832:	d04e      	beq.n	80108d2 <_dtoa_r+0x24a>
 8010834:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010838:	2300      	movs	r3, #0
 801083a:	930c      	str	r3, [sp, #48]	; 0x30
 801083c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801083e:	1b5b      	subs	r3, r3, r5
 8010840:	1e5a      	subs	r2, r3, #1
 8010842:	bf45      	ittet	mi
 8010844:	f1c3 0301 	rsbmi	r3, r3, #1
 8010848:	9305      	strmi	r3, [sp, #20]
 801084a:	2300      	movpl	r3, #0
 801084c:	2300      	movmi	r3, #0
 801084e:	9206      	str	r2, [sp, #24]
 8010850:	bf54      	ite	pl
 8010852:	9305      	strpl	r3, [sp, #20]
 8010854:	9306      	strmi	r3, [sp, #24]
 8010856:	f1bb 0f00 	cmp.w	fp, #0
 801085a:	db3c      	blt.n	80108d6 <_dtoa_r+0x24e>
 801085c:	9b06      	ldr	r3, [sp, #24]
 801085e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010862:	445b      	add	r3, fp
 8010864:	9306      	str	r3, [sp, #24]
 8010866:	2300      	movs	r3, #0
 8010868:	9308      	str	r3, [sp, #32]
 801086a:	9b07      	ldr	r3, [sp, #28]
 801086c:	2b09      	cmp	r3, #9
 801086e:	d868      	bhi.n	8010942 <_dtoa_r+0x2ba>
 8010870:	2b05      	cmp	r3, #5
 8010872:	bfc4      	itt	gt
 8010874:	3b04      	subgt	r3, #4
 8010876:	9307      	strgt	r3, [sp, #28]
 8010878:	9b07      	ldr	r3, [sp, #28]
 801087a:	f1a3 0302 	sub.w	r3, r3, #2
 801087e:	bfcc      	ite	gt
 8010880:	2500      	movgt	r5, #0
 8010882:	2501      	movle	r5, #1
 8010884:	2b03      	cmp	r3, #3
 8010886:	f200 8085 	bhi.w	8010994 <_dtoa_r+0x30c>
 801088a:	e8df f003 	tbb	[pc, r3]
 801088e:	3b2e      	.short	0x3b2e
 8010890:	5839      	.short	0x5839
 8010892:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010896:	441d      	add	r5, r3
 8010898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801089c:	2b20      	cmp	r3, #32
 801089e:	bfc1      	itttt	gt
 80108a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80108a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80108ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80108b0:	bfd6      	itet	le
 80108b2:	f1c3 0320 	rsble	r3, r3, #32
 80108b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80108ba:	fa06 f003 	lslle.w	r0, r6, r3
 80108be:	f7ef fe41 	bl	8000544 <__aeabi_ui2d>
 80108c2:	2201      	movs	r2, #1
 80108c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80108c8:	3d01      	subs	r5, #1
 80108ca:	920e      	str	r2, [sp, #56]	; 0x38
 80108cc:	e76f      	b.n	80107ae <_dtoa_r+0x126>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e7b3      	b.n	801083a <_dtoa_r+0x1b2>
 80108d2:	900c      	str	r0, [sp, #48]	; 0x30
 80108d4:	e7b2      	b.n	801083c <_dtoa_r+0x1b4>
 80108d6:	9b05      	ldr	r3, [sp, #20]
 80108d8:	eba3 030b 	sub.w	r3, r3, fp
 80108dc:	9305      	str	r3, [sp, #20]
 80108de:	f1cb 0300 	rsb	r3, fp, #0
 80108e2:	9308      	str	r3, [sp, #32]
 80108e4:	2300      	movs	r3, #0
 80108e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80108e8:	e7bf      	b.n	801086a <_dtoa_r+0x1e2>
 80108ea:	2300      	movs	r3, #0
 80108ec:	9309      	str	r3, [sp, #36]	; 0x24
 80108ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	dc52      	bgt.n	801099a <_dtoa_r+0x312>
 80108f4:	2301      	movs	r3, #1
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	9304      	str	r3, [sp, #16]
 80108fa:	461a      	mov	r2, r3
 80108fc:	920a      	str	r2, [sp, #40]	; 0x28
 80108fe:	e00b      	b.n	8010918 <_dtoa_r+0x290>
 8010900:	2301      	movs	r3, #1
 8010902:	e7f3      	b.n	80108ec <_dtoa_r+0x264>
 8010904:	2300      	movs	r3, #0
 8010906:	9309      	str	r3, [sp, #36]	; 0x24
 8010908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801090a:	445b      	add	r3, fp
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	3301      	adds	r3, #1
 8010910:	2b01      	cmp	r3, #1
 8010912:	9304      	str	r3, [sp, #16]
 8010914:	bfb8      	it	lt
 8010916:	2301      	movlt	r3, #1
 8010918:	69e0      	ldr	r0, [r4, #28]
 801091a:	2100      	movs	r1, #0
 801091c:	2204      	movs	r2, #4
 801091e:	f102 0614 	add.w	r6, r2, #20
 8010922:	429e      	cmp	r6, r3
 8010924:	d93d      	bls.n	80109a2 <_dtoa_r+0x31a>
 8010926:	6041      	str	r1, [r0, #4]
 8010928:	4620      	mov	r0, r4
 801092a:	f001 fb8f 	bl	801204c <_Balloc>
 801092e:	9000      	str	r0, [sp, #0]
 8010930:	2800      	cmp	r0, #0
 8010932:	d139      	bne.n	80109a8 <_dtoa_r+0x320>
 8010934:	4b16      	ldr	r3, [pc, #88]	; (8010990 <_dtoa_r+0x308>)
 8010936:	4602      	mov	r2, r0
 8010938:	f240 11af 	movw	r1, #431	; 0x1af
 801093c:	e6bd      	b.n	80106ba <_dtoa_r+0x32>
 801093e:	2301      	movs	r3, #1
 8010940:	e7e1      	b.n	8010906 <_dtoa_r+0x27e>
 8010942:	2501      	movs	r5, #1
 8010944:	2300      	movs	r3, #0
 8010946:	9307      	str	r3, [sp, #28]
 8010948:	9509      	str	r5, [sp, #36]	; 0x24
 801094a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	9304      	str	r3, [sp, #16]
 8010952:	2200      	movs	r2, #0
 8010954:	2312      	movs	r3, #18
 8010956:	e7d1      	b.n	80108fc <_dtoa_r+0x274>
 8010958:	636f4361 	.word	0x636f4361
 801095c:	3fd287a7 	.word	0x3fd287a7
 8010960:	8b60c8b3 	.word	0x8b60c8b3
 8010964:	3fc68a28 	.word	0x3fc68a28
 8010968:	509f79fb 	.word	0x509f79fb
 801096c:	3fd34413 	.word	0x3fd34413
 8010970:	0801929c 	.word	0x0801929c
 8010974:	080192b3 	.word	0x080192b3
 8010978:	7ff00000 	.word	0x7ff00000
 801097c:	08019298 	.word	0x08019298
 8010980:	0801928f 	.word	0x0801928f
 8010984:	08019344 	.word	0x08019344
 8010988:	3ff80000 	.word	0x3ff80000
 801098c:	080193d0 	.word	0x080193d0
 8010990:	0801930b 	.word	0x0801930b
 8010994:	2301      	movs	r3, #1
 8010996:	9309      	str	r3, [sp, #36]	; 0x24
 8010998:	e7d7      	b.n	801094a <_dtoa_r+0x2c2>
 801099a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	9304      	str	r3, [sp, #16]
 80109a0:	e7ba      	b.n	8010918 <_dtoa_r+0x290>
 80109a2:	3101      	adds	r1, #1
 80109a4:	0052      	lsls	r2, r2, #1
 80109a6:	e7ba      	b.n	801091e <_dtoa_r+0x296>
 80109a8:	69e3      	ldr	r3, [r4, #28]
 80109aa:	9a00      	ldr	r2, [sp, #0]
 80109ac:	601a      	str	r2, [r3, #0]
 80109ae:	9b04      	ldr	r3, [sp, #16]
 80109b0:	2b0e      	cmp	r3, #14
 80109b2:	f200 80a8 	bhi.w	8010b06 <_dtoa_r+0x47e>
 80109b6:	2d00      	cmp	r5, #0
 80109b8:	f000 80a5 	beq.w	8010b06 <_dtoa_r+0x47e>
 80109bc:	f1bb 0f00 	cmp.w	fp, #0
 80109c0:	dd38      	ble.n	8010a34 <_dtoa_r+0x3ac>
 80109c2:	4bc0      	ldr	r3, [pc, #768]	; (8010cc4 <_dtoa_r+0x63c>)
 80109c4:	f00b 020f 	and.w	r2, fp, #15
 80109c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80109d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80109d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80109d8:	d019      	beq.n	8010a0e <_dtoa_r+0x386>
 80109da:	4bbb      	ldr	r3, [pc, #748]	; (8010cc8 <_dtoa_r+0x640>)
 80109dc:	ec51 0b18 	vmov	r0, r1, d8
 80109e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109e4:	f7ef ff52 	bl	800088c <__aeabi_ddiv>
 80109e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109ec:	f008 080f 	and.w	r8, r8, #15
 80109f0:	2503      	movs	r5, #3
 80109f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010cc8 <_dtoa_r+0x640>
 80109f6:	f1b8 0f00 	cmp.w	r8, #0
 80109fa:	d10a      	bne.n	8010a12 <_dtoa_r+0x38a>
 80109fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a00:	4632      	mov	r2, r6
 8010a02:	463b      	mov	r3, r7
 8010a04:	f7ef ff42 	bl	800088c <__aeabi_ddiv>
 8010a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a0c:	e02b      	b.n	8010a66 <_dtoa_r+0x3de>
 8010a0e:	2502      	movs	r5, #2
 8010a10:	e7ef      	b.n	80109f2 <_dtoa_r+0x36a>
 8010a12:	f018 0f01 	tst.w	r8, #1
 8010a16:	d008      	beq.n	8010a2a <_dtoa_r+0x3a2>
 8010a18:	4630      	mov	r0, r6
 8010a1a:	4639      	mov	r1, r7
 8010a1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010a20:	f7ef fe0a 	bl	8000638 <__aeabi_dmul>
 8010a24:	3501      	adds	r5, #1
 8010a26:	4606      	mov	r6, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a2e:	f109 0908 	add.w	r9, r9, #8
 8010a32:	e7e0      	b.n	80109f6 <_dtoa_r+0x36e>
 8010a34:	f000 809f 	beq.w	8010b76 <_dtoa_r+0x4ee>
 8010a38:	f1cb 0600 	rsb	r6, fp, #0
 8010a3c:	4ba1      	ldr	r3, [pc, #644]	; (8010cc4 <_dtoa_r+0x63c>)
 8010a3e:	4fa2      	ldr	r7, [pc, #648]	; (8010cc8 <_dtoa_r+0x640>)
 8010a40:	f006 020f 	and.w	r2, r6, #15
 8010a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	ec51 0b18 	vmov	r0, r1, d8
 8010a50:	f7ef fdf2 	bl	8000638 <__aeabi_dmul>
 8010a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a58:	1136      	asrs	r6, r6, #4
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	2502      	movs	r5, #2
 8010a5e:	2e00      	cmp	r6, #0
 8010a60:	d17e      	bne.n	8010b60 <_dtoa_r+0x4d8>
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1d0      	bne.n	8010a08 <_dtoa_r+0x380>
 8010a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 8084 	beq.w	8010b7a <_dtoa_r+0x4f2>
 8010a72:	4b96      	ldr	r3, [pc, #600]	; (8010ccc <_dtoa_r+0x644>)
 8010a74:	2200      	movs	r2, #0
 8010a76:	4640      	mov	r0, r8
 8010a78:	4649      	mov	r1, r9
 8010a7a:	f7f0 f84f 	bl	8000b1c <__aeabi_dcmplt>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d07b      	beq.n	8010b7a <_dtoa_r+0x4f2>
 8010a82:	9b04      	ldr	r3, [sp, #16]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d078      	beq.n	8010b7a <_dtoa_r+0x4f2>
 8010a88:	9b01      	ldr	r3, [sp, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dd39      	ble.n	8010b02 <_dtoa_r+0x47a>
 8010a8e:	4b90      	ldr	r3, [pc, #576]	; (8010cd0 <_dtoa_r+0x648>)
 8010a90:	2200      	movs	r2, #0
 8010a92:	4640      	mov	r0, r8
 8010a94:	4649      	mov	r1, r9
 8010a96:	f7ef fdcf 	bl	8000638 <__aeabi_dmul>
 8010a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a9e:	9e01      	ldr	r6, [sp, #4]
 8010aa0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8010aa4:	3501      	adds	r5, #1
 8010aa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7ef fd5a 	bl	8000564 <__aeabi_i2d>
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	f7ef fdc0 	bl	8000638 <__aeabi_dmul>
 8010ab8:	4b86      	ldr	r3, [pc, #536]	; (8010cd4 <_dtoa_r+0x64c>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	f7ef fc06 	bl	80002cc <__adddf3>
 8010ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ac8:	9303      	str	r3, [sp, #12]
 8010aca:	2e00      	cmp	r6, #0
 8010acc:	d158      	bne.n	8010b80 <_dtoa_r+0x4f8>
 8010ace:	4b82      	ldr	r3, [pc, #520]	; (8010cd8 <_dtoa_r+0x650>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	4649      	mov	r1, r9
 8010ad6:	f7ef fbf7 	bl	80002c8 <__aeabi_dsub>
 8010ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ade:	4680      	mov	r8, r0
 8010ae0:	4689      	mov	r9, r1
 8010ae2:	f7f0 f839 	bl	8000b58 <__aeabi_dcmpgt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f040 8296 	bne.w	8011018 <_dtoa_r+0x990>
 8010aec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010af0:	4640      	mov	r0, r8
 8010af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010af6:	4649      	mov	r1, r9
 8010af8:	f7f0 f810 	bl	8000b1c <__aeabi_dcmplt>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	f040 8289 	bne.w	8011014 <_dtoa_r+0x98c>
 8010b02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f2c0 814e 	blt.w	8010daa <_dtoa_r+0x722>
 8010b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8010b12:	f300 814a 	bgt.w	8010daa <_dtoa_r+0x722>
 8010b16:	4b6b      	ldr	r3, [pc, #428]	; (8010cc4 <_dtoa_r+0x63c>)
 8010b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f280 80dc 	bge.w	8010ce0 <_dtoa_r+0x658>
 8010b28:	9b04      	ldr	r3, [sp, #16]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f300 80d8 	bgt.w	8010ce0 <_dtoa_r+0x658>
 8010b30:	f040 826f 	bne.w	8011012 <_dtoa_r+0x98a>
 8010b34:	4b68      	ldr	r3, [pc, #416]	; (8010cd8 <_dtoa_r+0x650>)
 8010b36:	2200      	movs	r2, #0
 8010b38:	4640      	mov	r0, r8
 8010b3a:	4649      	mov	r1, r9
 8010b3c:	f7ef fd7c 	bl	8000638 <__aeabi_dmul>
 8010b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b44:	f7ef fffe 	bl	8000b44 <__aeabi_dcmpge>
 8010b48:	9e04      	ldr	r6, [sp, #16]
 8010b4a:	4637      	mov	r7, r6
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	f040 8245 	bne.w	8010fdc <_dtoa_r+0x954>
 8010b52:	9d00      	ldr	r5, [sp, #0]
 8010b54:	2331      	movs	r3, #49	; 0x31
 8010b56:	f805 3b01 	strb.w	r3, [r5], #1
 8010b5a:	f10b 0b01 	add.w	fp, fp, #1
 8010b5e:	e241      	b.n	8010fe4 <_dtoa_r+0x95c>
 8010b60:	07f2      	lsls	r2, r6, #31
 8010b62:	d505      	bpl.n	8010b70 <_dtoa_r+0x4e8>
 8010b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b68:	f7ef fd66 	bl	8000638 <__aeabi_dmul>
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	2301      	movs	r3, #1
 8010b70:	1076      	asrs	r6, r6, #1
 8010b72:	3708      	adds	r7, #8
 8010b74:	e773      	b.n	8010a5e <_dtoa_r+0x3d6>
 8010b76:	2502      	movs	r5, #2
 8010b78:	e775      	b.n	8010a66 <_dtoa_r+0x3de>
 8010b7a:	9e04      	ldr	r6, [sp, #16]
 8010b7c:	465f      	mov	r7, fp
 8010b7e:	e792      	b.n	8010aa6 <_dtoa_r+0x41e>
 8010b80:	9900      	ldr	r1, [sp, #0]
 8010b82:	4b50      	ldr	r3, [pc, #320]	; (8010cc4 <_dtoa_r+0x63c>)
 8010b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b88:	4431      	add	r1, r6
 8010b8a:	9102      	str	r1, [sp, #8]
 8010b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b8e:	eeb0 9a47 	vmov.f32	s18, s14
 8010b92:	eef0 9a67 	vmov.f32	s19, s15
 8010b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b9e:	2900      	cmp	r1, #0
 8010ba0:	d044      	beq.n	8010c2c <_dtoa_r+0x5a4>
 8010ba2:	494e      	ldr	r1, [pc, #312]	; (8010cdc <_dtoa_r+0x654>)
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	f7ef fe71 	bl	800088c <__aeabi_ddiv>
 8010baa:	ec53 2b19 	vmov	r2, r3, d9
 8010bae:	f7ef fb8b 	bl	80002c8 <__aeabi_dsub>
 8010bb2:	9d00      	ldr	r5, [sp, #0]
 8010bb4:	ec41 0b19 	vmov	d9, r0, r1
 8010bb8:	4649      	mov	r1, r9
 8010bba:	4640      	mov	r0, r8
 8010bbc:	f7ef ffec 	bl	8000b98 <__aeabi_d2iz>
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	f7ef fccf 	bl	8000564 <__aeabi_i2d>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4640      	mov	r0, r8
 8010bcc:	4649      	mov	r1, r9
 8010bce:	f7ef fb7b 	bl	80002c8 <__aeabi_dsub>
 8010bd2:	3630      	adds	r6, #48	; 0x30
 8010bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8010bd8:	ec53 2b19 	vmov	r2, r3, d9
 8010bdc:	4680      	mov	r8, r0
 8010bde:	4689      	mov	r9, r1
 8010be0:	f7ef ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d164      	bne.n	8010cb2 <_dtoa_r+0x62a>
 8010be8:	4642      	mov	r2, r8
 8010bea:	464b      	mov	r3, r9
 8010bec:	4937      	ldr	r1, [pc, #220]	; (8010ccc <_dtoa_r+0x644>)
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f7ef fb6a 	bl	80002c8 <__aeabi_dsub>
 8010bf4:	ec53 2b19 	vmov	r2, r3, d9
 8010bf8:	f7ef ff90 	bl	8000b1c <__aeabi_dcmplt>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	f040 80b6 	bne.w	8010d6e <_dtoa_r+0x6e6>
 8010c02:	9b02      	ldr	r3, [sp, #8]
 8010c04:	429d      	cmp	r5, r3
 8010c06:	f43f af7c 	beq.w	8010b02 <_dtoa_r+0x47a>
 8010c0a:	4b31      	ldr	r3, [pc, #196]	; (8010cd0 <_dtoa_r+0x648>)
 8010c0c:	ec51 0b19 	vmov	r0, r1, d9
 8010c10:	2200      	movs	r2, #0
 8010c12:	f7ef fd11 	bl	8000638 <__aeabi_dmul>
 8010c16:	4b2e      	ldr	r3, [pc, #184]	; (8010cd0 <_dtoa_r+0x648>)
 8010c18:	ec41 0b19 	vmov	d9, r0, r1
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	4640      	mov	r0, r8
 8010c20:	4649      	mov	r1, r9
 8010c22:	f7ef fd09 	bl	8000638 <__aeabi_dmul>
 8010c26:	4680      	mov	r8, r0
 8010c28:	4689      	mov	r9, r1
 8010c2a:	e7c5      	b.n	8010bb8 <_dtoa_r+0x530>
 8010c2c:	ec51 0b17 	vmov	r0, r1, d7
 8010c30:	f7ef fd02 	bl	8000638 <__aeabi_dmul>
 8010c34:	9b02      	ldr	r3, [sp, #8]
 8010c36:	9d00      	ldr	r5, [sp, #0]
 8010c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c3a:	ec41 0b19 	vmov	d9, r0, r1
 8010c3e:	4649      	mov	r1, r9
 8010c40:	4640      	mov	r0, r8
 8010c42:	f7ef ffa9 	bl	8000b98 <__aeabi_d2iz>
 8010c46:	4606      	mov	r6, r0
 8010c48:	f7ef fc8c 	bl	8000564 <__aeabi_i2d>
 8010c4c:	3630      	adds	r6, #48	; 0x30
 8010c4e:	4602      	mov	r2, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	4640      	mov	r0, r8
 8010c54:	4649      	mov	r1, r9
 8010c56:	f7ef fb37 	bl	80002c8 <__aeabi_dsub>
 8010c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8010c5e:	9b02      	ldr	r3, [sp, #8]
 8010c60:	429d      	cmp	r5, r3
 8010c62:	4680      	mov	r8, r0
 8010c64:	4689      	mov	r9, r1
 8010c66:	f04f 0200 	mov.w	r2, #0
 8010c6a:	d124      	bne.n	8010cb6 <_dtoa_r+0x62e>
 8010c6c:	4b1b      	ldr	r3, [pc, #108]	; (8010cdc <_dtoa_r+0x654>)
 8010c6e:	ec51 0b19 	vmov	r0, r1, d9
 8010c72:	f7ef fb2b 	bl	80002cc <__adddf3>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4640      	mov	r0, r8
 8010c7c:	4649      	mov	r1, r9
 8010c7e:	f7ef ff6b 	bl	8000b58 <__aeabi_dcmpgt>
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d173      	bne.n	8010d6e <_dtoa_r+0x6e6>
 8010c86:	ec53 2b19 	vmov	r2, r3, d9
 8010c8a:	4914      	ldr	r1, [pc, #80]	; (8010cdc <_dtoa_r+0x654>)
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f7ef fb1b 	bl	80002c8 <__aeabi_dsub>
 8010c92:	4602      	mov	r2, r0
 8010c94:	460b      	mov	r3, r1
 8010c96:	4640      	mov	r0, r8
 8010c98:	4649      	mov	r1, r9
 8010c9a:	f7ef ff3f 	bl	8000b1c <__aeabi_dcmplt>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	f43f af2f 	beq.w	8010b02 <_dtoa_r+0x47a>
 8010ca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ca6:	1e6b      	subs	r3, r5, #1
 8010ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cae:	2b30      	cmp	r3, #48	; 0x30
 8010cb0:	d0f8      	beq.n	8010ca4 <_dtoa_r+0x61c>
 8010cb2:	46bb      	mov	fp, r7
 8010cb4:	e04a      	b.n	8010d4c <_dtoa_r+0x6c4>
 8010cb6:	4b06      	ldr	r3, [pc, #24]	; (8010cd0 <_dtoa_r+0x648>)
 8010cb8:	f7ef fcbe 	bl	8000638 <__aeabi_dmul>
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	4689      	mov	r9, r1
 8010cc0:	e7bd      	b.n	8010c3e <_dtoa_r+0x5b6>
 8010cc2:	bf00      	nop
 8010cc4:	080193d0 	.word	0x080193d0
 8010cc8:	080193a8 	.word	0x080193a8
 8010ccc:	3ff00000 	.word	0x3ff00000
 8010cd0:	40240000 	.word	0x40240000
 8010cd4:	401c0000 	.word	0x401c0000
 8010cd8:	40140000 	.word	0x40140000
 8010cdc:	3fe00000 	.word	0x3fe00000
 8010ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ce4:	9d00      	ldr	r5, [sp, #0]
 8010ce6:	4642      	mov	r2, r8
 8010ce8:	464b      	mov	r3, r9
 8010cea:	4630      	mov	r0, r6
 8010cec:	4639      	mov	r1, r7
 8010cee:	f7ef fdcd 	bl	800088c <__aeabi_ddiv>
 8010cf2:	f7ef ff51 	bl	8000b98 <__aeabi_d2iz>
 8010cf6:	9001      	str	r0, [sp, #4]
 8010cf8:	f7ef fc34 	bl	8000564 <__aeabi_i2d>
 8010cfc:	4642      	mov	r2, r8
 8010cfe:	464b      	mov	r3, r9
 8010d00:	f7ef fc9a 	bl	8000638 <__aeabi_dmul>
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	4630      	mov	r0, r6
 8010d0a:	4639      	mov	r1, r7
 8010d0c:	f7ef fadc 	bl	80002c8 <__aeabi_dsub>
 8010d10:	9e01      	ldr	r6, [sp, #4]
 8010d12:	9f04      	ldr	r7, [sp, #16]
 8010d14:	3630      	adds	r6, #48	; 0x30
 8010d16:	f805 6b01 	strb.w	r6, [r5], #1
 8010d1a:	9e00      	ldr	r6, [sp, #0]
 8010d1c:	1bae      	subs	r6, r5, r6
 8010d1e:	42b7      	cmp	r7, r6
 8010d20:	4602      	mov	r2, r0
 8010d22:	460b      	mov	r3, r1
 8010d24:	d134      	bne.n	8010d90 <_dtoa_r+0x708>
 8010d26:	f7ef fad1 	bl	80002cc <__adddf3>
 8010d2a:	4642      	mov	r2, r8
 8010d2c:	464b      	mov	r3, r9
 8010d2e:	4606      	mov	r6, r0
 8010d30:	460f      	mov	r7, r1
 8010d32:	f7ef ff11 	bl	8000b58 <__aeabi_dcmpgt>
 8010d36:	b9c8      	cbnz	r0, 8010d6c <_dtoa_r+0x6e4>
 8010d38:	4642      	mov	r2, r8
 8010d3a:	464b      	mov	r3, r9
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	4639      	mov	r1, r7
 8010d40:	f7ef fee2 	bl	8000b08 <__aeabi_dcmpeq>
 8010d44:	b110      	cbz	r0, 8010d4c <_dtoa_r+0x6c4>
 8010d46:	9b01      	ldr	r3, [sp, #4]
 8010d48:	07db      	lsls	r3, r3, #31
 8010d4a:	d40f      	bmi.n	8010d6c <_dtoa_r+0x6e4>
 8010d4c:	4651      	mov	r1, sl
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f001 f9bc 	bl	80120cc <_Bfree>
 8010d54:	2300      	movs	r3, #0
 8010d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d58:	702b      	strb	r3, [r5, #0]
 8010d5a:	f10b 0301 	add.w	r3, fp, #1
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f43f ace2 	beq.w	801072c <_dtoa_r+0xa4>
 8010d68:	601d      	str	r5, [r3, #0]
 8010d6a:	e4df      	b.n	801072c <_dtoa_r+0xa4>
 8010d6c:	465f      	mov	r7, fp
 8010d6e:	462b      	mov	r3, r5
 8010d70:	461d      	mov	r5, r3
 8010d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d76:	2a39      	cmp	r2, #57	; 0x39
 8010d78:	d106      	bne.n	8010d88 <_dtoa_r+0x700>
 8010d7a:	9a00      	ldr	r2, [sp, #0]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d1f7      	bne.n	8010d70 <_dtoa_r+0x6e8>
 8010d80:	9900      	ldr	r1, [sp, #0]
 8010d82:	2230      	movs	r2, #48	; 0x30
 8010d84:	3701      	adds	r7, #1
 8010d86:	700a      	strb	r2, [r1, #0]
 8010d88:	781a      	ldrb	r2, [r3, #0]
 8010d8a:	3201      	adds	r2, #1
 8010d8c:	701a      	strb	r2, [r3, #0]
 8010d8e:	e790      	b.n	8010cb2 <_dtoa_r+0x62a>
 8010d90:	4ba3      	ldr	r3, [pc, #652]	; (8011020 <_dtoa_r+0x998>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	f7ef fc50 	bl	8000638 <__aeabi_dmul>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	460f      	mov	r7, r1
 8010da0:	f7ef feb2 	bl	8000b08 <__aeabi_dcmpeq>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d09e      	beq.n	8010ce6 <_dtoa_r+0x65e>
 8010da8:	e7d0      	b.n	8010d4c <_dtoa_r+0x6c4>
 8010daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dac:	2a00      	cmp	r2, #0
 8010dae:	f000 80ca 	beq.w	8010f46 <_dtoa_r+0x8be>
 8010db2:	9a07      	ldr	r2, [sp, #28]
 8010db4:	2a01      	cmp	r2, #1
 8010db6:	f300 80ad 	bgt.w	8010f14 <_dtoa_r+0x88c>
 8010dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	f000 80a5 	beq.w	8010f0c <_dtoa_r+0x884>
 8010dc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010dc6:	9e08      	ldr	r6, [sp, #32]
 8010dc8:	9d05      	ldr	r5, [sp, #20]
 8010dca:	9a05      	ldr	r2, [sp, #20]
 8010dcc:	441a      	add	r2, r3
 8010dce:	9205      	str	r2, [sp, #20]
 8010dd0:	9a06      	ldr	r2, [sp, #24]
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	441a      	add	r2, r3
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	9206      	str	r2, [sp, #24]
 8010dda:	f001 fa2d 	bl	8012238 <__i2b>
 8010dde:	4607      	mov	r7, r0
 8010de0:	b165      	cbz	r5, 8010dfc <_dtoa_r+0x774>
 8010de2:	9b06      	ldr	r3, [sp, #24]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dd09      	ble.n	8010dfc <_dtoa_r+0x774>
 8010de8:	42ab      	cmp	r3, r5
 8010dea:	9a05      	ldr	r2, [sp, #20]
 8010dec:	bfa8      	it	ge
 8010dee:	462b      	movge	r3, r5
 8010df0:	1ad2      	subs	r2, r2, r3
 8010df2:	9205      	str	r2, [sp, #20]
 8010df4:	9a06      	ldr	r2, [sp, #24]
 8010df6:	1aed      	subs	r5, r5, r3
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	9306      	str	r3, [sp, #24]
 8010dfc:	9b08      	ldr	r3, [sp, #32]
 8010dfe:	b1f3      	cbz	r3, 8010e3e <_dtoa_r+0x7b6>
 8010e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80a3 	beq.w	8010f4e <_dtoa_r+0x8c6>
 8010e08:	2e00      	cmp	r6, #0
 8010e0a:	dd10      	ble.n	8010e2e <_dtoa_r+0x7a6>
 8010e0c:	4639      	mov	r1, r7
 8010e0e:	4632      	mov	r2, r6
 8010e10:	4620      	mov	r0, r4
 8010e12:	f001 fad1 	bl	80123b8 <__pow5mult>
 8010e16:	4652      	mov	r2, sl
 8010e18:	4601      	mov	r1, r0
 8010e1a:	4607      	mov	r7, r0
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f001 fa21 	bl	8012264 <__multiply>
 8010e22:	4651      	mov	r1, sl
 8010e24:	4680      	mov	r8, r0
 8010e26:	4620      	mov	r0, r4
 8010e28:	f001 f950 	bl	80120cc <_Bfree>
 8010e2c:	46c2      	mov	sl, r8
 8010e2e:	9b08      	ldr	r3, [sp, #32]
 8010e30:	1b9a      	subs	r2, r3, r6
 8010e32:	d004      	beq.n	8010e3e <_dtoa_r+0x7b6>
 8010e34:	4651      	mov	r1, sl
 8010e36:	4620      	mov	r0, r4
 8010e38:	f001 fabe 	bl	80123b8 <__pow5mult>
 8010e3c:	4682      	mov	sl, r0
 8010e3e:	2101      	movs	r1, #1
 8010e40:	4620      	mov	r0, r4
 8010e42:	f001 f9f9 	bl	8012238 <__i2b>
 8010e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	f340 8081 	ble.w	8010f52 <_dtoa_r+0x8ca>
 8010e50:	461a      	mov	r2, r3
 8010e52:	4601      	mov	r1, r0
 8010e54:	4620      	mov	r0, r4
 8010e56:	f001 faaf 	bl	80123b8 <__pow5mult>
 8010e5a:	9b07      	ldr	r3, [sp, #28]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	4606      	mov	r6, r0
 8010e60:	dd7a      	ble.n	8010f58 <_dtoa_r+0x8d0>
 8010e62:	f04f 0800 	mov.w	r8, #0
 8010e66:	6933      	ldr	r3, [r6, #16]
 8010e68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010e6c:	6918      	ldr	r0, [r3, #16]
 8010e6e:	f001 f995 	bl	801219c <__hi0bits>
 8010e72:	f1c0 0020 	rsb	r0, r0, #32
 8010e76:	9b06      	ldr	r3, [sp, #24]
 8010e78:	4418      	add	r0, r3
 8010e7a:	f010 001f 	ands.w	r0, r0, #31
 8010e7e:	f000 8094 	beq.w	8010faa <_dtoa_r+0x922>
 8010e82:	f1c0 0320 	rsb	r3, r0, #32
 8010e86:	2b04      	cmp	r3, #4
 8010e88:	f340 8085 	ble.w	8010f96 <_dtoa_r+0x90e>
 8010e8c:	9b05      	ldr	r3, [sp, #20]
 8010e8e:	f1c0 001c 	rsb	r0, r0, #28
 8010e92:	4403      	add	r3, r0
 8010e94:	9305      	str	r3, [sp, #20]
 8010e96:	9b06      	ldr	r3, [sp, #24]
 8010e98:	4403      	add	r3, r0
 8010e9a:	4405      	add	r5, r0
 8010e9c:	9306      	str	r3, [sp, #24]
 8010e9e:	9b05      	ldr	r3, [sp, #20]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	dd05      	ble.n	8010eb0 <_dtoa_r+0x828>
 8010ea4:	4651      	mov	r1, sl
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f001 fadf 	bl	801246c <__lshift>
 8010eae:	4682      	mov	sl, r0
 8010eb0:	9b06      	ldr	r3, [sp, #24]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	dd05      	ble.n	8010ec2 <_dtoa_r+0x83a>
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f001 fad6 	bl	801246c <__lshift>
 8010ec0:	4606      	mov	r6, r0
 8010ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d072      	beq.n	8010fae <_dtoa_r+0x926>
 8010ec8:	4631      	mov	r1, r6
 8010eca:	4650      	mov	r0, sl
 8010ecc:	f001 fb3a 	bl	8012544 <__mcmp>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	da6c      	bge.n	8010fae <_dtoa_r+0x926>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	4651      	mov	r1, sl
 8010ed8:	220a      	movs	r2, #10
 8010eda:	4620      	mov	r0, r4
 8010edc:	f001 f918 	bl	8012110 <__multadd>
 8010ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010ee6:	4682      	mov	sl, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 81b0 	beq.w	801124e <_dtoa_r+0xbc6>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	4639      	mov	r1, r7
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f001 f90b 	bl	8012110 <__multadd>
 8010efa:	9b01      	ldr	r3, [sp, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	4607      	mov	r7, r0
 8010f00:	f300 8096 	bgt.w	8011030 <_dtoa_r+0x9a8>
 8010f04:	9b07      	ldr	r3, [sp, #28]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	dc59      	bgt.n	8010fbe <_dtoa_r+0x936>
 8010f0a:	e091      	b.n	8011030 <_dtoa_r+0x9a8>
 8010f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f12:	e758      	b.n	8010dc6 <_dtoa_r+0x73e>
 8010f14:	9b04      	ldr	r3, [sp, #16]
 8010f16:	1e5e      	subs	r6, r3, #1
 8010f18:	9b08      	ldr	r3, [sp, #32]
 8010f1a:	42b3      	cmp	r3, r6
 8010f1c:	bfbf      	itttt	lt
 8010f1e:	9b08      	ldrlt	r3, [sp, #32]
 8010f20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010f22:	9608      	strlt	r6, [sp, #32]
 8010f24:	1af3      	sublt	r3, r6, r3
 8010f26:	bfb4      	ite	lt
 8010f28:	18d2      	addlt	r2, r2, r3
 8010f2a:	1b9e      	subge	r6, r3, r6
 8010f2c:	9b04      	ldr	r3, [sp, #16]
 8010f2e:	bfbc      	itt	lt
 8010f30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010f32:	2600      	movlt	r6, #0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	bfb7      	itett	lt
 8010f38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010f3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010f40:	1a9d      	sublt	r5, r3, r2
 8010f42:	2300      	movlt	r3, #0
 8010f44:	e741      	b.n	8010dca <_dtoa_r+0x742>
 8010f46:	9e08      	ldr	r6, [sp, #32]
 8010f48:	9d05      	ldr	r5, [sp, #20]
 8010f4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f4c:	e748      	b.n	8010de0 <_dtoa_r+0x758>
 8010f4e:	9a08      	ldr	r2, [sp, #32]
 8010f50:	e770      	b.n	8010e34 <_dtoa_r+0x7ac>
 8010f52:	9b07      	ldr	r3, [sp, #28]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	dc19      	bgt.n	8010f8c <_dtoa_r+0x904>
 8010f58:	9b02      	ldr	r3, [sp, #8]
 8010f5a:	b9bb      	cbnz	r3, 8010f8c <_dtoa_r+0x904>
 8010f5c:	9b03      	ldr	r3, [sp, #12]
 8010f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f62:	b99b      	cbnz	r3, 8010f8c <_dtoa_r+0x904>
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f6a:	0d1b      	lsrs	r3, r3, #20
 8010f6c:	051b      	lsls	r3, r3, #20
 8010f6e:	b183      	cbz	r3, 8010f92 <_dtoa_r+0x90a>
 8010f70:	9b05      	ldr	r3, [sp, #20]
 8010f72:	3301      	adds	r3, #1
 8010f74:	9305      	str	r3, [sp, #20]
 8010f76:	9b06      	ldr	r3, [sp, #24]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	9306      	str	r3, [sp, #24]
 8010f7c:	f04f 0801 	mov.w	r8, #1
 8010f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f47f af6f 	bne.w	8010e66 <_dtoa_r+0x7de>
 8010f88:	2001      	movs	r0, #1
 8010f8a:	e774      	b.n	8010e76 <_dtoa_r+0x7ee>
 8010f8c:	f04f 0800 	mov.w	r8, #0
 8010f90:	e7f6      	b.n	8010f80 <_dtoa_r+0x8f8>
 8010f92:	4698      	mov	r8, r3
 8010f94:	e7f4      	b.n	8010f80 <_dtoa_r+0x8f8>
 8010f96:	d082      	beq.n	8010e9e <_dtoa_r+0x816>
 8010f98:	9a05      	ldr	r2, [sp, #20]
 8010f9a:	331c      	adds	r3, #28
 8010f9c:	441a      	add	r2, r3
 8010f9e:	9205      	str	r2, [sp, #20]
 8010fa0:	9a06      	ldr	r2, [sp, #24]
 8010fa2:	441a      	add	r2, r3
 8010fa4:	441d      	add	r5, r3
 8010fa6:	9206      	str	r2, [sp, #24]
 8010fa8:	e779      	b.n	8010e9e <_dtoa_r+0x816>
 8010faa:	4603      	mov	r3, r0
 8010fac:	e7f4      	b.n	8010f98 <_dtoa_r+0x910>
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	dc37      	bgt.n	8011024 <_dtoa_r+0x99c>
 8010fb4:	9b07      	ldr	r3, [sp, #28]
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	dd34      	ble.n	8011024 <_dtoa_r+0x99c>
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	9301      	str	r3, [sp, #4]
 8010fbe:	9b01      	ldr	r3, [sp, #4]
 8010fc0:	b963      	cbnz	r3, 8010fdc <_dtoa_r+0x954>
 8010fc2:	4631      	mov	r1, r6
 8010fc4:	2205      	movs	r2, #5
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f001 f8a2 	bl	8012110 <__multadd>
 8010fcc:	4601      	mov	r1, r0
 8010fce:	4606      	mov	r6, r0
 8010fd0:	4650      	mov	r0, sl
 8010fd2:	f001 fab7 	bl	8012544 <__mcmp>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f73f adbb 	bgt.w	8010b52 <_dtoa_r+0x4ca>
 8010fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fde:	9d00      	ldr	r5, [sp, #0]
 8010fe0:	ea6f 0b03 	mvn.w	fp, r3
 8010fe4:	f04f 0800 	mov.w	r8, #0
 8010fe8:	4631      	mov	r1, r6
 8010fea:	4620      	mov	r0, r4
 8010fec:	f001 f86e 	bl	80120cc <_Bfree>
 8010ff0:	2f00      	cmp	r7, #0
 8010ff2:	f43f aeab 	beq.w	8010d4c <_dtoa_r+0x6c4>
 8010ff6:	f1b8 0f00 	cmp.w	r8, #0
 8010ffa:	d005      	beq.n	8011008 <_dtoa_r+0x980>
 8010ffc:	45b8      	cmp	r8, r7
 8010ffe:	d003      	beq.n	8011008 <_dtoa_r+0x980>
 8011000:	4641      	mov	r1, r8
 8011002:	4620      	mov	r0, r4
 8011004:	f001 f862 	bl	80120cc <_Bfree>
 8011008:	4639      	mov	r1, r7
 801100a:	4620      	mov	r0, r4
 801100c:	f001 f85e 	bl	80120cc <_Bfree>
 8011010:	e69c      	b.n	8010d4c <_dtoa_r+0x6c4>
 8011012:	2600      	movs	r6, #0
 8011014:	4637      	mov	r7, r6
 8011016:	e7e1      	b.n	8010fdc <_dtoa_r+0x954>
 8011018:	46bb      	mov	fp, r7
 801101a:	4637      	mov	r7, r6
 801101c:	e599      	b.n	8010b52 <_dtoa_r+0x4ca>
 801101e:	bf00      	nop
 8011020:	40240000 	.word	0x40240000
 8011024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	f000 80c8 	beq.w	80111bc <_dtoa_r+0xb34>
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	2d00      	cmp	r5, #0
 8011032:	dd05      	ble.n	8011040 <_dtoa_r+0x9b8>
 8011034:	4639      	mov	r1, r7
 8011036:	462a      	mov	r2, r5
 8011038:	4620      	mov	r0, r4
 801103a:	f001 fa17 	bl	801246c <__lshift>
 801103e:	4607      	mov	r7, r0
 8011040:	f1b8 0f00 	cmp.w	r8, #0
 8011044:	d05b      	beq.n	80110fe <_dtoa_r+0xa76>
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	4620      	mov	r0, r4
 801104a:	f000 ffff 	bl	801204c <_Balloc>
 801104e:	4605      	mov	r5, r0
 8011050:	b928      	cbnz	r0, 801105e <_dtoa_r+0x9d6>
 8011052:	4b83      	ldr	r3, [pc, #524]	; (8011260 <_dtoa_r+0xbd8>)
 8011054:	4602      	mov	r2, r0
 8011056:	f240 21ef 	movw	r1, #751	; 0x2ef
 801105a:	f7ff bb2e 	b.w	80106ba <_dtoa_r+0x32>
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	3202      	adds	r2, #2
 8011062:	0092      	lsls	r2, r2, #2
 8011064:	f107 010c 	add.w	r1, r7, #12
 8011068:	300c      	adds	r0, #12
 801106a:	f7ff fa4e 	bl	801050a <memcpy>
 801106e:	2201      	movs	r2, #1
 8011070:	4629      	mov	r1, r5
 8011072:	4620      	mov	r0, r4
 8011074:	f001 f9fa 	bl	801246c <__lshift>
 8011078:	9b00      	ldr	r3, [sp, #0]
 801107a:	3301      	adds	r3, #1
 801107c:	9304      	str	r3, [sp, #16]
 801107e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011082:	4413      	add	r3, r2
 8011084:	9308      	str	r3, [sp, #32]
 8011086:	9b02      	ldr	r3, [sp, #8]
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	46b8      	mov	r8, r7
 801108e:	9306      	str	r3, [sp, #24]
 8011090:	4607      	mov	r7, r0
 8011092:	9b04      	ldr	r3, [sp, #16]
 8011094:	4631      	mov	r1, r6
 8011096:	3b01      	subs	r3, #1
 8011098:	4650      	mov	r0, sl
 801109a:	9301      	str	r3, [sp, #4]
 801109c:	f7ff fa6a 	bl	8010574 <quorem>
 80110a0:	4641      	mov	r1, r8
 80110a2:	9002      	str	r0, [sp, #8]
 80110a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80110a8:	4650      	mov	r0, sl
 80110aa:	f001 fa4b 	bl	8012544 <__mcmp>
 80110ae:	463a      	mov	r2, r7
 80110b0:	9005      	str	r0, [sp, #20]
 80110b2:	4631      	mov	r1, r6
 80110b4:	4620      	mov	r0, r4
 80110b6:	f001 fa61 	bl	801257c <__mdiff>
 80110ba:	68c2      	ldr	r2, [r0, #12]
 80110bc:	4605      	mov	r5, r0
 80110be:	bb02      	cbnz	r2, 8011102 <_dtoa_r+0xa7a>
 80110c0:	4601      	mov	r1, r0
 80110c2:	4650      	mov	r0, sl
 80110c4:	f001 fa3e 	bl	8012544 <__mcmp>
 80110c8:	4602      	mov	r2, r0
 80110ca:	4629      	mov	r1, r5
 80110cc:	4620      	mov	r0, r4
 80110ce:	9209      	str	r2, [sp, #36]	; 0x24
 80110d0:	f000 fffc 	bl	80120cc <_Bfree>
 80110d4:	9b07      	ldr	r3, [sp, #28]
 80110d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110d8:	9d04      	ldr	r5, [sp, #16]
 80110da:	ea43 0102 	orr.w	r1, r3, r2
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	4319      	orrs	r1, r3
 80110e2:	d110      	bne.n	8011106 <_dtoa_r+0xa7e>
 80110e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80110e8:	d029      	beq.n	801113e <_dtoa_r+0xab6>
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dd02      	ble.n	80110f6 <_dtoa_r+0xa6e>
 80110f0:	9b02      	ldr	r3, [sp, #8]
 80110f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	f883 9000 	strb.w	r9, [r3]
 80110fc:	e774      	b.n	8010fe8 <_dtoa_r+0x960>
 80110fe:	4638      	mov	r0, r7
 8011100:	e7ba      	b.n	8011078 <_dtoa_r+0x9f0>
 8011102:	2201      	movs	r2, #1
 8011104:	e7e1      	b.n	80110ca <_dtoa_r+0xa42>
 8011106:	9b05      	ldr	r3, [sp, #20]
 8011108:	2b00      	cmp	r3, #0
 801110a:	db04      	blt.n	8011116 <_dtoa_r+0xa8e>
 801110c:	9907      	ldr	r1, [sp, #28]
 801110e:	430b      	orrs	r3, r1
 8011110:	9906      	ldr	r1, [sp, #24]
 8011112:	430b      	orrs	r3, r1
 8011114:	d120      	bne.n	8011158 <_dtoa_r+0xad0>
 8011116:	2a00      	cmp	r2, #0
 8011118:	dded      	ble.n	80110f6 <_dtoa_r+0xa6e>
 801111a:	4651      	mov	r1, sl
 801111c:	2201      	movs	r2, #1
 801111e:	4620      	mov	r0, r4
 8011120:	f001 f9a4 	bl	801246c <__lshift>
 8011124:	4631      	mov	r1, r6
 8011126:	4682      	mov	sl, r0
 8011128:	f001 fa0c 	bl	8012544 <__mcmp>
 801112c:	2800      	cmp	r0, #0
 801112e:	dc03      	bgt.n	8011138 <_dtoa_r+0xab0>
 8011130:	d1e1      	bne.n	80110f6 <_dtoa_r+0xa6e>
 8011132:	f019 0f01 	tst.w	r9, #1
 8011136:	d0de      	beq.n	80110f6 <_dtoa_r+0xa6e>
 8011138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801113c:	d1d8      	bne.n	80110f0 <_dtoa_r+0xa68>
 801113e:	9a01      	ldr	r2, [sp, #4]
 8011140:	2339      	movs	r3, #57	; 0x39
 8011142:	7013      	strb	r3, [r2, #0]
 8011144:	462b      	mov	r3, r5
 8011146:	461d      	mov	r5, r3
 8011148:	3b01      	subs	r3, #1
 801114a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801114e:	2a39      	cmp	r2, #57	; 0x39
 8011150:	d06c      	beq.n	801122c <_dtoa_r+0xba4>
 8011152:	3201      	adds	r2, #1
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	e747      	b.n	8010fe8 <_dtoa_r+0x960>
 8011158:	2a00      	cmp	r2, #0
 801115a:	dd07      	ble.n	801116c <_dtoa_r+0xae4>
 801115c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011160:	d0ed      	beq.n	801113e <_dtoa_r+0xab6>
 8011162:	9a01      	ldr	r2, [sp, #4]
 8011164:	f109 0301 	add.w	r3, r9, #1
 8011168:	7013      	strb	r3, [r2, #0]
 801116a:	e73d      	b.n	8010fe8 <_dtoa_r+0x960>
 801116c:	9b04      	ldr	r3, [sp, #16]
 801116e:	9a08      	ldr	r2, [sp, #32]
 8011170:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011174:	4293      	cmp	r3, r2
 8011176:	d043      	beq.n	8011200 <_dtoa_r+0xb78>
 8011178:	4651      	mov	r1, sl
 801117a:	2300      	movs	r3, #0
 801117c:	220a      	movs	r2, #10
 801117e:	4620      	mov	r0, r4
 8011180:	f000 ffc6 	bl	8012110 <__multadd>
 8011184:	45b8      	cmp	r8, r7
 8011186:	4682      	mov	sl, r0
 8011188:	f04f 0300 	mov.w	r3, #0
 801118c:	f04f 020a 	mov.w	r2, #10
 8011190:	4641      	mov	r1, r8
 8011192:	4620      	mov	r0, r4
 8011194:	d107      	bne.n	80111a6 <_dtoa_r+0xb1e>
 8011196:	f000 ffbb 	bl	8012110 <__multadd>
 801119a:	4680      	mov	r8, r0
 801119c:	4607      	mov	r7, r0
 801119e:	9b04      	ldr	r3, [sp, #16]
 80111a0:	3301      	adds	r3, #1
 80111a2:	9304      	str	r3, [sp, #16]
 80111a4:	e775      	b.n	8011092 <_dtoa_r+0xa0a>
 80111a6:	f000 ffb3 	bl	8012110 <__multadd>
 80111aa:	4639      	mov	r1, r7
 80111ac:	4680      	mov	r8, r0
 80111ae:	2300      	movs	r3, #0
 80111b0:	220a      	movs	r2, #10
 80111b2:	4620      	mov	r0, r4
 80111b4:	f000 ffac 	bl	8012110 <__multadd>
 80111b8:	4607      	mov	r7, r0
 80111ba:	e7f0      	b.n	801119e <_dtoa_r+0xb16>
 80111bc:	9b04      	ldr	r3, [sp, #16]
 80111be:	9301      	str	r3, [sp, #4]
 80111c0:	9d00      	ldr	r5, [sp, #0]
 80111c2:	4631      	mov	r1, r6
 80111c4:	4650      	mov	r0, sl
 80111c6:	f7ff f9d5 	bl	8010574 <quorem>
 80111ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80111ce:	9b00      	ldr	r3, [sp, #0]
 80111d0:	f805 9b01 	strb.w	r9, [r5], #1
 80111d4:	1aea      	subs	r2, r5, r3
 80111d6:	9b01      	ldr	r3, [sp, #4]
 80111d8:	4293      	cmp	r3, r2
 80111da:	dd07      	ble.n	80111ec <_dtoa_r+0xb64>
 80111dc:	4651      	mov	r1, sl
 80111de:	2300      	movs	r3, #0
 80111e0:	220a      	movs	r2, #10
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 ff94 	bl	8012110 <__multadd>
 80111e8:	4682      	mov	sl, r0
 80111ea:	e7ea      	b.n	80111c2 <_dtoa_r+0xb3a>
 80111ec:	9b01      	ldr	r3, [sp, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	bfc8      	it	gt
 80111f2:	461d      	movgt	r5, r3
 80111f4:	9b00      	ldr	r3, [sp, #0]
 80111f6:	bfd8      	it	le
 80111f8:	2501      	movle	r5, #1
 80111fa:	441d      	add	r5, r3
 80111fc:	f04f 0800 	mov.w	r8, #0
 8011200:	4651      	mov	r1, sl
 8011202:	2201      	movs	r2, #1
 8011204:	4620      	mov	r0, r4
 8011206:	f001 f931 	bl	801246c <__lshift>
 801120a:	4631      	mov	r1, r6
 801120c:	4682      	mov	sl, r0
 801120e:	f001 f999 	bl	8012544 <__mcmp>
 8011212:	2800      	cmp	r0, #0
 8011214:	dc96      	bgt.n	8011144 <_dtoa_r+0xabc>
 8011216:	d102      	bne.n	801121e <_dtoa_r+0xb96>
 8011218:	f019 0f01 	tst.w	r9, #1
 801121c:	d192      	bne.n	8011144 <_dtoa_r+0xabc>
 801121e:	462b      	mov	r3, r5
 8011220:	461d      	mov	r5, r3
 8011222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011226:	2a30      	cmp	r2, #48	; 0x30
 8011228:	d0fa      	beq.n	8011220 <_dtoa_r+0xb98>
 801122a:	e6dd      	b.n	8010fe8 <_dtoa_r+0x960>
 801122c:	9a00      	ldr	r2, [sp, #0]
 801122e:	429a      	cmp	r2, r3
 8011230:	d189      	bne.n	8011146 <_dtoa_r+0xabe>
 8011232:	f10b 0b01 	add.w	fp, fp, #1
 8011236:	2331      	movs	r3, #49	; 0x31
 8011238:	e796      	b.n	8011168 <_dtoa_r+0xae0>
 801123a:	4b0a      	ldr	r3, [pc, #40]	; (8011264 <_dtoa_r+0xbdc>)
 801123c:	f7ff ba99 	b.w	8010772 <_dtoa_r+0xea>
 8011240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011242:	2b00      	cmp	r3, #0
 8011244:	f47f aa6d 	bne.w	8010722 <_dtoa_r+0x9a>
 8011248:	4b07      	ldr	r3, [pc, #28]	; (8011268 <_dtoa_r+0xbe0>)
 801124a:	f7ff ba92 	b.w	8010772 <_dtoa_r+0xea>
 801124e:	9b01      	ldr	r3, [sp, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	dcb5      	bgt.n	80111c0 <_dtoa_r+0xb38>
 8011254:	9b07      	ldr	r3, [sp, #28]
 8011256:	2b02      	cmp	r3, #2
 8011258:	f73f aeb1 	bgt.w	8010fbe <_dtoa_r+0x936>
 801125c:	e7b0      	b.n	80111c0 <_dtoa_r+0xb38>
 801125e:	bf00      	nop
 8011260:	0801930b 	.word	0x0801930b
 8011264:	08019343 	.word	0x08019343
 8011268:	0801928f 	.word	0x0801928f

0801126c <_free_r>:
 801126c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801126e:	2900      	cmp	r1, #0
 8011270:	d044      	beq.n	80112fc <_free_r+0x90>
 8011272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011276:	9001      	str	r0, [sp, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	f1a1 0404 	sub.w	r4, r1, #4
 801127e:	bfb8      	it	lt
 8011280:	18e4      	addlt	r4, r4, r3
 8011282:	f7fe fe29 	bl	800fed8 <__malloc_lock>
 8011286:	4a1e      	ldr	r2, [pc, #120]	; (8011300 <_free_r+0x94>)
 8011288:	9801      	ldr	r0, [sp, #4]
 801128a:	6813      	ldr	r3, [r2, #0]
 801128c:	b933      	cbnz	r3, 801129c <_free_r+0x30>
 801128e:	6063      	str	r3, [r4, #4]
 8011290:	6014      	str	r4, [r2, #0]
 8011292:	b003      	add	sp, #12
 8011294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011298:	f7fe be24 	b.w	800fee4 <__malloc_unlock>
 801129c:	42a3      	cmp	r3, r4
 801129e:	d908      	bls.n	80112b2 <_free_r+0x46>
 80112a0:	6825      	ldr	r5, [r4, #0]
 80112a2:	1961      	adds	r1, r4, r5
 80112a4:	428b      	cmp	r3, r1
 80112a6:	bf01      	itttt	eq
 80112a8:	6819      	ldreq	r1, [r3, #0]
 80112aa:	685b      	ldreq	r3, [r3, #4]
 80112ac:	1949      	addeq	r1, r1, r5
 80112ae:	6021      	streq	r1, [r4, #0]
 80112b0:	e7ed      	b.n	801128e <_free_r+0x22>
 80112b2:	461a      	mov	r2, r3
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	b10b      	cbz	r3, 80112bc <_free_r+0x50>
 80112b8:	42a3      	cmp	r3, r4
 80112ba:	d9fa      	bls.n	80112b2 <_free_r+0x46>
 80112bc:	6811      	ldr	r1, [r2, #0]
 80112be:	1855      	adds	r5, r2, r1
 80112c0:	42a5      	cmp	r5, r4
 80112c2:	d10b      	bne.n	80112dc <_free_r+0x70>
 80112c4:	6824      	ldr	r4, [r4, #0]
 80112c6:	4421      	add	r1, r4
 80112c8:	1854      	adds	r4, r2, r1
 80112ca:	42a3      	cmp	r3, r4
 80112cc:	6011      	str	r1, [r2, #0]
 80112ce:	d1e0      	bne.n	8011292 <_free_r+0x26>
 80112d0:	681c      	ldr	r4, [r3, #0]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	6053      	str	r3, [r2, #4]
 80112d6:	440c      	add	r4, r1
 80112d8:	6014      	str	r4, [r2, #0]
 80112da:	e7da      	b.n	8011292 <_free_r+0x26>
 80112dc:	d902      	bls.n	80112e4 <_free_r+0x78>
 80112de:	230c      	movs	r3, #12
 80112e0:	6003      	str	r3, [r0, #0]
 80112e2:	e7d6      	b.n	8011292 <_free_r+0x26>
 80112e4:	6825      	ldr	r5, [r4, #0]
 80112e6:	1961      	adds	r1, r4, r5
 80112e8:	428b      	cmp	r3, r1
 80112ea:	bf04      	itt	eq
 80112ec:	6819      	ldreq	r1, [r3, #0]
 80112ee:	685b      	ldreq	r3, [r3, #4]
 80112f0:	6063      	str	r3, [r4, #4]
 80112f2:	bf04      	itt	eq
 80112f4:	1949      	addeq	r1, r1, r5
 80112f6:	6021      	streq	r1, [r4, #0]
 80112f8:	6054      	str	r4, [r2, #4]
 80112fa:	e7ca      	b.n	8011292 <_free_r+0x26>
 80112fc:	b003      	add	sp, #12
 80112fe:	bd30      	pop	{r4, r5, pc}
 8011300:	20009f24 	.word	0x20009f24

08011304 <__ssputs_r>:
 8011304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011308:	688e      	ldr	r6, [r1, #8]
 801130a:	461f      	mov	r7, r3
 801130c:	42be      	cmp	r6, r7
 801130e:	680b      	ldr	r3, [r1, #0]
 8011310:	4682      	mov	sl, r0
 8011312:	460c      	mov	r4, r1
 8011314:	4690      	mov	r8, r2
 8011316:	d82c      	bhi.n	8011372 <__ssputs_r+0x6e>
 8011318:	898a      	ldrh	r2, [r1, #12]
 801131a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801131e:	d026      	beq.n	801136e <__ssputs_r+0x6a>
 8011320:	6965      	ldr	r5, [r4, #20]
 8011322:	6909      	ldr	r1, [r1, #16]
 8011324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011328:	eba3 0901 	sub.w	r9, r3, r1
 801132c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011330:	1c7b      	adds	r3, r7, #1
 8011332:	444b      	add	r3, r9
 8011334:	106d      	asrs	r5, r5, #1
 8011336:	429d      	cmp	r5, r3
 8011338:	bf38      	it	cc
 801133a:	461d      	movcc	r5, r3
 801133c:	0553      	lsls	r3, r2, #21
 801133e:	d527      	bpl.n	8011390 <__ssputs_r+0x8c>
 8011340:	4629      	mov	r1, r5
 8011342:	f7fe fb85 	bl	800fa50 <_malloc_r>
 8011346:	4606      	mov	r6, r0
 8011348:	b360      	cbz	r0, 80113a4 <__ssputs_r+0xa0>
 801134a:	6921      	ldr	r1, [r4, #16]
 801134c:	464a      	mov	r2, r9
 801134e:	f7ff f8dc 	bl	801050a <memcpy>
 8011352:	89a3      	ldrh	r3, [r4, #12]
 8011354:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801135c:	81a3      	strh	r3, [r4, #12]
 801135e:	6126      	str	r6, [r4, #16]
 8011360:	6165      	str	r5, [r4, #20]
 8011362:	444e      	add	r6, r9
 8011364:	eba5 0509 	sub.w	r5, r5, r9
 8011368:	6026      	str	r6, [r4, #0]
 801136a:	60a5      	str	r5, [r4, #8]
 801136c:	463e      	mov	r6, r7
 801136e:	42be      	cmp	r6, r7
 8011370:	d900      	bls.n	8011374 <__ssputs_r+0x70>
 8011372:	463e      	mov	r6, r7
 8011374:	6820      	ldr	r0, [r4, #0]
 8011376:	4632      	mov	r2, r6
 8011378:	4641      	mov	r1, r8
 801137a:	f001 fbcb 	bl	8012b14 <memmove>
 801137e:	68a3      	ldr	r3, [r4, #8]
 8011380:	1b9b      	subs	r3, r3, r6
 8011382:	60a3      	str	r3, [r4, #8]
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	4433      	add	r3, r6
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	2000      	movs	r0, #0
 801138c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011390:	462a      	mov	r2, r5
 8011392:	f001 fa23 	bl	80127dc <_realloc_r>
 8011396:	4606      	mov	r6, r0
 8011398:	2800      	cmp	r0, #0
 801139a:	d1e0      	bne.n	801135e <__ssputs_r+0x5a>
 801139c:	6921      	ldr	r1, [r4, #16]
 801139e:	4650      	mov	r0, sl
 80113a0:	f7ff ff64 	bl	801126c <_free_r>
 80113a4:	230c      	movs	r3, #12
 80113a6:	f8ca 3000 	str.w	r3, [sl]
 80113aa:	89a3      	ldrh	r3, [r4, #12]
 80113ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b0:	81a3      	strh	r3, [r4, #12]
 80113b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113b6:	e7e9      	b.n	801138c <__ssputs_r+0x88>

080113b8 <_svfiprintf_r>:
 80113b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113bc:	4698      	mov	r8, r3
 80113be:	898b      	ldrh	r3, [r1, #12]
 80113c0:	061b      	lsls	r3, r3, #24
 80113c2:	b09d      	sub	sp, #116	; 0x74
 80113c4:	4607      	mov	r7, r0
 80113c6:	460d      	mov	r5, r1
 80113c8:	4614      	mov	r4, r2
 80113ca:	d50e      	bpl.n	80113ea <_svfiprintf_r+0x32>
 80113cc:	690b      	ldr	r3, [r1, #16]
 80113ce:	b963      	cbnz	r3, 80113ea <_svfiprintf_r+0x32>
 80113d0:	2140      	movs	r1, #64	; 0x40
 80113d2:	f7fe fb3d 	bl	800fa50 <_malloc_r>
 80113d6:	6028      	str	r0, [r5, #0]
 80113d8:	6128      	str	r0, [r5, #16]
 80113da:	b920      	cbnz	r0, 80113e6 <_svfiprintf_r+0x2e>
 80113dc:	230c      	movs	r3, #12
 80113de:	603b      	str	r3, [r7, #0]
 80113e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113e4:	e0d0      	b.n	8011588 <_svfiprintf_r+0x1d0>
 80113e6:	2340      	movs	r3, #64	; 0x40
 80113e8:	616b      	str	r3, [r5, #20]
 80113ea:	2300      	movs	r3, #0
 80113ec:	9309      	str	r3, [sp, #36]	; 0x24
 80113ee:	2320      	movs	r3, #32
 80113f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80113f8:	2330      	movs	r3, #48	; 0x30
 80113fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80115a0 <_svfiprintf_r+0x1e8>
 80113fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011402:	f04f 0901 	mov.w	r9, #1
 8011406:	4623      	mov	r3, r4
 8011408:	469a      	mov	sl, r3
 801140a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801140e:	b10a      	cbz	r2, 8011414 <_svfiprintf_r+0x5c>
 8011410:	2a25      	cmp	r2, #37	; 0x25
 8011412:	d1f9      	bne.n	8011408 <_svfiprintf_r+0x50>
 8011414:	ebba 0b04 	subs.w	fp, sl, r4
 8011418:	d00b      	beq.n	8011432 <_svfiprintf_r+0x7a>
 801141a:	465b      	mov	r3, fp
 801141c:	4622      	mov	r2, r4
 801141e:	4629      	mov	r1, r5
 8011420:	4638      	mov	r0, r7
 8011422:	f7ff ff6f 	bl	8011304 <__ssputs_r>
 8011426:	3001      	adds	r0, #1
 8011428:	f000 80a9 	beq.w	801157e <_svfiprintf_r+0x1c6>
 801142c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801142e:	445a      	add	r2, fp
 8011430:	9209      	str	r2, [sp, #36]	; 0x24
 8011432:	f89a 3000 	ldrb.w	r3, [sl]
 8011436:	2b00      	cmp	r3, #0
 8011438:	f000 80a1 	beq.w	801157e <_svfiprintf_r+0x1c6>
 801143c:	2300      	movs	r3, #0
 801143e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011446:	f10a 0a01 	add.w	sl, sl, #1
 801144a:	9304      	str	r3, [sp, #16]
 801144c:	9307      	str	r3, [sp, #28]
 801144e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011452:	931a      	str	r3, [sp, #104]	; 0x68
 8011454:	4654      	mov	r4, sl
 8011456:	2205      	movs	r2, #5
 8011458:	f814 1b01 	ldrb.w	r1, [r4], #1
 801145c:	4850      	ldr	r0, [pc, #320]	; (80115a0 <_svfiprintf_r+0x1e8>)
 801145e:	f7ee fed7 	bl	8000210 <memchr>
 8011462:	9a04      	ldr	r2, [sp, #16]
 8011464:	b9d8      	cbnz	r0, 801149e <_svfiprintf_r+0xe6>
 8011466:	06d0      	lsls	r0, r2, #27
 8011468:	bf44      	itt	mi
 801146a:	2320      	movmi	r3, #32
 801146c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011470:	0711      	lsls	r1, r2, #28
 8011472:	bf44      	itt	mi
 8011474:	232b      	movmi	r3, #43	; 0x2b
 8011476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801147a:	f89a 3000 	ldrb.w	r3, [sl]
 801147e:	2b2a      	cmp	r3, #42	; 0x2a
 8011480:	d015      	beq.n	80114ae <_svfiprintf_r+0xf6>
 8011482:	9a07      	ldr	r2, [sp, #28]
 8011484:	4654      	mov	r4, sl
 8011486:	2000      	movs	r0, #0
 8011488:	f04f 0c0a 	mov.w	ip, #10
 801148c:	4621      	mov	r1, r4
 801148e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011492:	3b30      	subs	r3, #48	; 0x30
 8011494:	2b09      	cmp	r3, #9
 8011496:	d94d      	bls.n	8011534 <_svfiprintf_r+0x17c>
 8011498:	b1b0      	cbz	r0, 80114c8 <_svfiprintf_r+0x110>
 801149a:	9207      	str	r2, [sp, #28]
 801149c:	e014      	b.n	80114c8 <_svfiprintf_r+0x110>
 801149e:	eba0 0308 	sub.w	r3, r0, r8
 80114a2:	fa09 f303 	lsl.w	r3, r9, r3
 80114a6:	4313      	orrs	r3, r2
 80114a8:	9304      	str	r3, [sp, #16]
 80114aa:	46a2      	mov	sl, r4
 80114ac:	e7d2      	b.n	8011454 <_svfiprintf_r+0x9c>
 80114ae:	9b03      	ldr	r3, [sp, #12]
 80114b0:	1d19      	adds	r1, r3, #4
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	9103      	str	r1, [sp, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bfbb      	ittet	lt
 80114ba:	425b      	neglt	r3, r3
 80114bc:	f042 0202 	orrlt.w	r2, r2, #2
 80114c0:	9307      	strge	r3, [sp, #28]
 80114c2:	9307      	strlt	r3, [sp, #28]
 80114c4:	bfb8      	it	lt
 80114c6:	9204      	strlt	r2, [sp, #16]
 80114c8:	7823      	ldrb	r3, [r4, #0]
 80114ca:	2b2e      	cmp	r3, #46	; 0x2e
 80114cc:	d10c      	bne.n	80114e8 <_svfiprintf_r+0x130>
 80114ce:	7863      	ldrb	r3, [r4, #1]
 80114d0:	2b2a      	cmp	r3, #42	; 0x2a
 80114d2:	d134      	bne.n	801153e <_svfiprintf_r+0x186>
 80114d4:	9b03      	ldr	r3, [sp, #12]
 80114d6:	1d1a      	adds	r2, r3, #4
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	9203      	str	r2, [sp, #12]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	bfb8      	it	lt
 80114e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80114e4:	3402      	adds	r4, #2
 80114e6:	9305      	str	r3, [sp, #20]
 80114e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80115b0 <_svfiprintf_r+0x1f8>
 80114ec:	7821      	ldrb	r1, [r4, #0]
 80114ee:	2203      	movs	r2, #3
 80114f0:	4650      	mov	r0, sl
 80114f2:	f7ee fe8d 	bl	8000210 <memchr>
 80114f6:	b138      	cbz	r0, 8011508 <_svfiprintf_r+0x150>
 80114f8:	9b04      	ldr	r3, [sp, #16]
 80114fa:	eba0 000a 	sub.w	r0, r0, sl
 80114fe:	2240      	movs	r2, #64	; 0x40
 8011500:	4082      	lsls	r2, r0
 8011502:	4313      	orrs	r3, r2
 8011504:	3401      	adds	r4, #1
 8011506:	9304      	str	r3, [sp, #16]
 8011508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801150c:	4825      	ldr	r0, [pc, #148]	; (80115a4 <_svfiprintf_r+0x1ec>)
 801150e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011512:	2206      	movs	r2, #6
 8011514:	f7ee fe7c 	bl	8000210 <memchr>
 8011518:	2800      	cmp	r0, #0
 801151a:	d038      	beq.n	801158e <_svfiprintf_r+0x1d6>
 801151c:	4b22      	ldr	r3, [pc, #136]	; (80115a8 <_svfiprintf_r+0x1f0>)
 801151e:	bb1b      	cbnz	r3, 8011568 <_svfiprintf_r+0x1b0>
 8011520:	9b03      	ldr	r3, [sp, #12]
 8011522:	3307      	adds	r3, #7
 8011524:	f023 0307 	bic.w	r3, r3, #7
 8011528:	3308      	adds	r3, #8
 801152a:	9303      	str	r3, [sp, #12]
 801152c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801152e:	4433      	add	r3, r6
 8011530:	9309      	str	r3, [sp, #36]	; 0x24
 8011532:	e768      	b.n	8011406 <_svfiprintf_r+0x4e>
 8011534:	fb0c 3202 	mla	r2, ip, r2, r3
 8011538:	460c      	mov	r4, r1
 801153a:	2001      	movs	r0, #1
 801153c:	e7a6      	b.n	801148c <_svfiprintf_r+0xd4>
 801153e:	2300      	movs	r3, #0
 8011540:	3401      	adds	r4, #1
 8011542:	9305      	str	r3, [sp, #20]
 8011544:	4619      	mov	r1, r3
 8011546:	f04f 0c0a 	mov.w	ip, #10
 801154a:	4620      	mov	r0, r4
 801154c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011550:	3a30      	subs	r2, #48	; 0x30
 8011552:	2a09      	cmp	r2, #9
 8011554:	d903      	bls.n	801155e <_svfiprintf_r+0x1a6>
 8011556:	2b00      	cmp	r3, #0
 8011558:	d0c6      	beq.n	80114e8 <_svfiprintf_r+0x130>
 801155a:	9105      	str	r1, [sp, #20]
 801155c:	e7c4      	b.n	80114e8 <_svfiprintf_r+0x130>
 801155e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011562:	4604      	mov	r4, r0
 8011564:	2301      	movs	r3, #1
 8011566:	e7f0      	b.n	801154a <_svfiprintf_r+0x192>
 8011568:	ab03      	add	r3, sp, #12
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	462a      	mov	r2, r5
 801156e:	4b0f      	ldr	r3, [pc, #60]	; (80115ac <_svfiprintf_r+0x1f4>)
 8011570:	a904      	add	r1, sp, #16
 8011572:	4638      	mov	r0, r7
 8011574:	f7fe f806 	bl	800f584 <_printf_float>
 8011578:	1c42      	adds	r2, r0, #1
 801157a:	4606      	mov	r6, r0
 801157c:	d1d6      	bne.n	801152c <_svfiprintf_r+0x174>
 801157e:	89ab      	ldrh	r3, [r5, #12]
 8011580:	065b      	lsls	r3, r3, #25
 8011582:	f53f af2d 	bmi.w	80113e0 <_svfiprintf_r+0x28>
 8011586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011588:	b01d      	add	sp, #116	; 0x74
 801158a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801158e:	ab03      	add	r3, sp, #12
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	462a      	mov	r2, r5
 8011594:	4b05      	ldr	r3, [pc, #20]	; (80115ac <_svfiprintf_r+0x1f4>)
 8011596:	a904      	add	r1, sp, #16
 8011598:	4638      	mov	r0, r7
 801159a:	f7fe fb47 	bl	800fc2c <_printf_i>
 801159e:	e7eb      	b.n	8011578 <_svfiprintf_r+0x1c0>
 80115a0:	0801931c 	.word	0x0801931c
 80115a4:	08019326 	.word	0x08019326
 80115a8:	0800f585 	.word	0x0800f585
 80115ac:	08011305 	.word	0x08011305
 80115b0:	08019322 	.word	0x08019322

080115b4 <_sungetc_r>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	1c4b      	adds	r3, r1, #1
 80115b8:	4614      	mov	r4, r2
 80115ba:	d103      	bne.n	80115c4 <_sungetc_r+0x10>
 80115bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80115c0:	4628      	mov	r0, r5
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	8993      	ldrh	r3, [r2, #12]
 80115c6:	f023 0320 	bic.w	r3, r3, #32
 80115ca:	8193      	strh	r3, [r2, #12]
 80115cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115ce:	6852      	ldr	r2, [r2, #4]
 80115d0:	b2cd      	uxtb	r5, r1
 80115d2:	b18b      	cbz	r3, 80115f8 <_sungetc_r+0x44>
 80115d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80115d6:	4293      	cmp	r3, r2
 80115d8:	dd08      	ble.n	80115ec <_sungetc_r+0x38>
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	1e5a      	subs	r2, r3, #1
 80115de:	6022      	str	r2, [r4, #0]
 80115e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80115e4:	6863      	ldr	r3, [r4, #4]
 80115e6:	3301      	adds	r3, #1
 80115e8:	6063      	str	r3, [r4, #4]
 80115ea:	e7e9      	b.n	80115c0 <_sungetc_r+0xc>
 80115ec:	4621      	mov	r1, r4
 80115ee:	f001 f8bb 	bl	8012768 <__submore>
 80115f2:	2800      	cmp	r0, #0
 80115f4:	d0f1      	beq.n	80115da <_sungetc_r+0x26>
 80115f6:	e7e1      	b.n	80115bc <_sungetc_r+0x8>
 80115f8:	6921      	ldr	r1, [r4, #16]
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	b151      	cbz	r1, 8011614 <_sungetc_r+0x60>
 80115fe:	4299      	cmp	r1, r3
 8011600:	d208      	bcs.n	8011614 <_sungetc_r+0x60>
 8011602:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011606:	42a9      	cmp	r1, r5
 8011608:	d104      	bne.n	8011614 <_sungetc_r+0x60>
 801160a:	3b01      	subs	r3, #1
 801160c:	3201      	adds	r2, #1
 801160e:	6023      	str	r3, [r4, #0]
 8011610:	6062      	str	r2, [r4, #4]
 8011612:	e7d5      	b.n	80115c0 <_sungetc_r+0xc>
 8011614:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801161c:	6363      	str	r3, [r4, #52]	; 0x34
 801161e:	2303      	movs	r3, #3
 8011620:	63a3      	str	r3, [r4, #56]	; 0x38
 8011622:	4623      	mov	r3, r4
 8011624:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	2301      	movs	r3, #1
 801162c:	e7dc      	b.n	80115e8 <_sungetc_r+0x34>

0801162e <__ssrefill_r>:
 801162e:	b510      	push	{r4, lr}
 8011630:	460c      	mov	r4, r1
 8011632:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011634:	b169      	cbz	r1, 8011652 <__ssrefill_r+0x24>
 8011636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801163a:	4299      	cmp	r1, r3
 801163c:	d001      	beq.n	8011642 <__ssrefill_r+0x14>
 801163e:	f7ff fe15 	bl	801126c <_free_r>
 8011642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011644:	6063      	str	r3, [r4, #4]
 8011646:	2000      	movs	r0, #0
 8011648:	6360      	str	r0, [r4, #52]	; 0x34
 801164a:	b113      	cbz	r3, 8011652 <__ssrefill_r+0x24>
 801164c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801164e:	6023      	str	r3, [r4, #0]
 8011650:	bd10      	pop	{r4, pc}
 8011652:	6923      	ldr	r3, [r4, #16]
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	2300      	movs	r3, #0
 8011658:	6063      	str	r3, [r4, #4]
 801165a:	89a3      	ldrh	r3, [r4, #12]
 801165c:	f043 0320 	orr.w	r3, r3, #32
 8011660:	81a3      	strh	r3, [r4, #12]
 8011662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011666:	e7f3      	b.n	8011650 <__ssrefill_r+0x22>

08011668 <__ssvfiscanf_r>:
 8011668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	460c      	mov	r4, r1
 801166e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011672:	2100      	movs	r1, #0
 8011674:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011678:	49a6      	ldr	r1, [pc, #664]	; (8011914 <__ssvfiscanf_r+0x2ac>)
 801167a:	91a0      	str	r1, [sp, #640]	; 0x280
 801167c:	f10d 0804 	add.w	r8, sp, #4
 8011680:	49a5      	ldr	r1, [pc, #660]	; (8011918 <__ssvfiscanf_r+0x2b0>)
 8011682:	4fa6      	ldr	r7, [pc, #664]	; (801191c <__ssvfiscanf_r+0x2b4>)
 8011684:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011920 <__ssvfiscanf_r+0x2b8>
 8011688:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801168c:	4606      	mov	r6, r0
 801168e:	91a1      	str	r1, [sp, #644]	; 0x284
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	7813      	ldrb	r3, [r2, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 815a 	beq.w	801194e <__ssvfiscanf_r+0x2e6>
 801169a:	5cf9      	ldrb	r1, [r7, r3]
 801169c:	f011 0108 	ands.w	r1, r1, #8
 80116a0:	f102 0501 	add.w	r5, r2, #1
 80116a4:	d019      	beq.n	80116da <__ssvfiscanf_r+0x72>
 80116a6:	6863      	ldr	r3, [r4, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	dd0f      	ble.n	80116cc <__ssvfiscanf_r+0x64>
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	781a      	ldrb	r2, [r3, #0]
 80116b0:	5cba      	ldrb	r2, [r7, r2]
 80116b2:	0712      	lsls	r2, r2, #28
 80116b4:	d401      	bmi.n	80116ba <__ssvfiscanf_r+0x52>
 80116b6:	462a      	mov	r2, r5
 80116b8:	e7eb      	b.n	8011692 <__ssvfiscanf_r+0x2a>
 80116ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80116bc:	3201      	adds	r2, #1
 80116be:	9245      	str	r2, [sp, #276]	; 0x114
 80116c0:	6862      	ldr	r2, [r4, #4]
 80116c2:	3301      	adds	r3, #1
 80116c4:	3a01      	subs	r2, #1
 80116c6:	6062      	str	r2, [r4, #4]
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	e7ec      	b.n	80116a6 <__ssvfiscanf_r+0x3e>
 80116cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80116ce:	4621      	mov	r1, r4
 80116d0:	4630      	mov	r0, r6
 80116d2:	4798      	blx	r3
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d0e9      	beq.n	80116ac <__ssvfiscanf_r+0x44>
 80116d8:	e7ed      	b.n	80116b6 <__ssvfiscanf_r+0x4e>
 80116da:	2b25      	cmp	r3, #37	; 0x25
 80116dc:	d012      	beq.n	8011704 <__ssvfiscanf_r+0x9c>
 80116de:	469a      	mov	sl, r3
 80116e0:	6863      	ldr	r3, [r4, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f340 8091 	ble.w	801180a <__ssvfiscanf_r+0x1a2>
 80116e8:	6822      	ldr	r2, [r4, #0]
 80116ea:	7813      	ldrb	r3, [r2, #0]
 80116ec:	4553      	cmp	r3, sl
 80116ee:	f040 812e 	bne.w	801194e <__ssvfiscanf_r+0x2e6>
 80116f2:	6863      	ldr	r3, [r4, #4]
 80116f4:	3b01      	subs	r3, #1
 80116f6:	6063      	str	r3, [r4, #4]
 80116f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80116fa:	3201      	adds	r2, #1
 80116fc:	3301      	adds	r3, #1
 80116fe:	6022      	str	r2, [r4, #0]
 8011700:	9345      	str	r3, [sp, #276]	; 0x114
 8011702:	e7d8      	b.n	80116b6 <__ssvfiscanf_r+0x4e>
 8011704:	9141      	str	r1, [sp, #260]	; 0x104
 8011706:	9143      	str	r1, [sp, #268]	; 0x10c
 8011708:	7853      	ldrb	r3, [r2, #1]
 801170a:	2b2a      	cmp	r3, #42	; 0x2a
 801170c:	bf02      	ittt	eq
 801170e:	2310      	moveq	r3, #16
 8011710:	1c95      	addeq	r5, r2, #2
 8011712:	9341      	streq	r3, [sp, #260]	; 0x104
 8011714:	220a      	movs	r2, #10
 8011716:	46aa      	mov	sl, r5
 8011718:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801171c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011720:	2b09      	cmp	r3, #9
 8011722:	d91c      	bls.n	801175e <__ssvfiscanf_r+0xf6>
 8011724:	487e      	ldr	r0, [pc, #504]	; (8011920 <__ssvfiscanf_r+0x2b8>)
 8011726:	2203      	movs	r2, #3
 8011728:	f7ee fd72 	bl	8000210 <memchr>
 801172c:	b138      	cbz	r0, 801173e <__ssvfiscanf_r+0xd6>
 801172e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011730:	eba0 0009 	sub.w	r0, r0, r9
 8011734:	2301      	movs	r3, #1
 8011736:	4083      	lsls	r3, r0
 8011738:	4313      	orrs	r3, r2
 801173a:	9341      	str	r3, [sp, #260]	; 0x104
 801173c:	4655      	mov	r5, sl
 801173e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011742:	2b78      	cmp	r3, #120	; 0x78
 8011744:	d806      	bhi.n	8011754 <__ssvfiscanf_r+0xec>
 8011746:	2b57      	cmp	r3, #87	; 0x57
 8011748:	d810      	bhi.n	801176c <__ssvfiscanf_r+0x104>
 801174a:	2b25      	cmp	r3, #37	; 0x25
 801174c:	d0c7      	beq.n	80116de <__ssvfiscanf_r+0x76>
 801174e:	d857      	bhi.n	8011800 <__ssvfiscanf_r+0x198>
 8011750:	2b00      	cmp	r3, #0
 8011752:	d065      	beq.n	8011820 <__ssvfiscanf_r+0x1b8>
 8011754:	2303      	movs	r3, #3
 8011756:	9347      	str	r3, [sp, #284]	; 0x11c
 8011758:	230a      	movs	r3, #10
 801175a:	9342      	str	r3, [sp, #264]	; 0x108
 801175c:	e076      	b.n	801184c <__ssvfiscanf_r+0x1e4>
 801175e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011760:	fb02 1103 	mla	r1, r2, r3, r1
 8011764:	3930      	subs	r1, #48	; 0x30
 8011766:	9143      	str	r1, [sp, #268]	; 0x10c
 8011768:	4655      	mov	r5, sl
 801176a:	e7d4      	b.n	8011716 <__ssvfiscanf_r+0xae>
 801176c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011770:	2a20      	cmp	r2, #32
 8011772:	d8ef      	bhi.n	8011754 <__ssvfiscanf_r+0xec>
 8011774:	a101      	add	r1, pc, #4	; (adr r1, 801177c <__ssvfiscanf_r+0x114>)
 8011776:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801177a:	bf00      	nop
 801177c:	0801182f 	.word	0x0801182f
 8011780:	08011755 	.word	0x08011755
 8011784:	08011755 	.word	0x08011755
 8011788:	0801188d 	.word	0x0801188d
 801178c:	08011755 	.word	0x08011755
 8011790:	08011755 	.word	0x08011755
 8011794:	08011755 	.word	0x08011755
 8011798:	08011755 	.word	0x08011755
 801179c:	08011755 	.word	0x08011755
 80117a0:	08011755 	.word	0x08011755
 80117a4:	08011755 	.word	0x08011755
 80117a8:	080118a3 	.word	0x080118a3
 80117ac:	08011889 	.word	0x08011889
 80117b0:	08011807 	.word	0x08011807
 80117b4:	08011807 	.word	0x08011807
 80117b8:	08011807 	.word	0x08011807
 80117bc:	08011755 	.word	0x08011755
 80117c0:	08011845 	.word	0x08011845
 80117c4:	08011755 	.word	0x08011755
 80117c8:	08011755 	.word	0x08011755
 80117cc:	08011755 	.word	0x08011755
 80117d0:	08011755 	.word	0x08011755
 80117d4:	080118b3 	.word	0x080118b3
 80117d8:	08011881 	.word	0x08011881
 80117dc:	08011827 	.word	0x08011827
 80117e0:	08011755 	.word	0x08011755
 80117e4:	08011755 	.word	0x08011755
 80117e8:	080118af 	.word	0x080118af
 80117ec:	08011755 	.word	0x08011755
 80117f0:	08011889 	.word	0x08011889
 80117f4:	08011755 	.word	0x08011755
 80117f8:	08011755 	.word	0x08011755
 80117fc:	0801182f 	.word	0x0801182f
 8011800:	3b45      	subs	r3, #69	; 0x45
 8011802:	2b02      	cmp	r3, #2
 8011804:	d8a6      	bhi.n	8011754 <__ssvfiscanf_r+0xec>
 8011806:	2305      	movs	r3, #5
 8011808:	e01f      	b.n	801184a <__ssvfiscanf_r+0x1e2>
 801180a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801180c:	4621      	mov	r1, r4
 801180e:	4630      	mov	r0, r6
 8011810:	4798      	blx	r3
 8011812:	2800      	cmp	r0, #0
 8011814:	f43f af68 	beq.w	80116e8 <__ssvfiscanf_r+0x80>
 8011818:	9844      	ldr	r0, [sp, #272]	; 0x110
 801181a:	2800      	cmp	r0, #0
 801181c:	f040 808d 	bne.w	801193a <__ssvfiscanf_r+0x2d2>
 8011820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011824:	e08f      	b.n	8011946 <__ssvfiscanf_r+0x2de>
 8011826:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011828:	f042 0220 	orr.w	r2, r2, #32
 801182c:	9241      	str	r2, [sp, #260]	; 0x104
 801182e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011834:	9241      	str	r2, [sp, #260]	; 0x104
 8011836:	2210      	movs	r2, #16
 8011838:	2b6f      	cmp	r3, #111	; 0x6f
 801183a:	9242      	str	r2, [sp, #264]	; 0x108
 801183c:	bf34      	ite	cc
 801183e:	2303      	movcc	r3, #3
 8011840:	2304      	movcs	r3, #4
 8011842:	e002      	b.n	801184a <__ssvfiscanf_r+0x1e2>
 8011844:	2300      	movs	r3, #0
 8011846:	9342      	str	r3, [sp, #264]	; 0x108
 8011848:	2303      	movs	r3, #3
 801184a:	9347      	str	r3, [sp, #284]	; 0x11c
 801184c:	6863      	ldr	r3, [r4, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	dd3d      	ble.n	80118ce <__ssvfiscanf_r+0x266>
 8011852:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011854:	0659      	lsls	r1, r3, #25
 8011856:	d404      	bmi.n	8011862 <__ssvfiscanf_r+0x1fa>
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	781a      	ldrb	r2, [r3, #0]
 801185c:	5cba      	ldrb	r2, [r7, r2]
 801185e:	0712      	lsls	r2, r2, #28
 8011860:	d43c      	bmi.n	80118dc <__ssvfiscanf_r+0x274>
 8011862:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011864:	2b02      	cmp	r3, #2
 8011866:	dc4b      	bgt.n	8011900 <__ssvfiscanf_r+0x298>
 8011868:	466b      	mov	r3, sp
 801186a:	4622      	mov	r2, r4
 801186c:	a941      	add	r1, sp, #260	; 0x104
 801186e:	4630      	mov	r0, r6
 8011870:	f000 f9b6 	bl	8011be0 <_scanf_chars>
 8011874:	2801      	cmp	r0, #1
 8011876:	d06a      	beq.n	801194e <__ssvfiscanf_r+0x2e6>
 8011878:	2802      	cmp	r0, #2
 801187a:	f47f af1c 	bne.w	80116b6 <__ssvfiscanf_r+0x4e>
 801187e:	e7cb      	b.n	8011818 <__ssvfiscanf_r+0x1b0>
 8011880:	2308      	movs	r3, #8
 8011882:	9342      	str	r3, [sp, #264]	; 0x108
 8011884:	2304      	movs	r3, #4
 8011886:	e7e0      	b.n	801184a <__ssvfiscanf_r+0x1e2>
 8011888:	220a      	movs	r2, #10
 801188a:	e7d5      	b.n	8011838 <__ssvfiscanf_r+0x1d0>
 801188c:	4629      	mov	r1, r5
 801188e:	4640      	mov	r0, r8
 8011890:	f000 faf4 	bl	8011e7c <__sccl>
 8011894:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801189a:	9341      	str	r3, [sp, #260]	; 0x104
 801189c:	4605      	mov	r5, r0
 801189e:	2301      	movs	r3, #1
 80118a0:	e7d3      	b.n	801184a <__ssvfiscanf_r+0x1e2>
 80118a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80118a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118a8:	9341      	str	r3, [sp, #260]	; 0x104
 80118aa:	2300      	movs	r3, #0
 80118ac:	e7cd      	b.n	801184a <__ssvfiscanf_r+0x1e2>
 80118ae:	2302      	movs	r3, #2
 80118b0:	e7cb      	b.n	801184a <__ssvfiscanf_r+0x1e2>
 80118b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80118b4:	06c3      	lsls	r3, r0, #27
 80118b6:	f53f aefe 	bmi.w	80116b6 <__ssvfiscanf_r+0x4e>
 80118ba:	9b00      	ldr	r3, [sp, #0]
 80118bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80118be:	1d19      	adds	r1, r3, #4
 80118c0:	9100      	str	r1, [sp, #0]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	07c0      	lsls	r0, r0, #31
 80118c6:	bf4c      	ite	mi
 80118c8:	801a      	strhmi	r2, [r3, #0]
 80118ca:	601a      	strpl	r2, [r3, #0]
 80118cc:	e6f3      	b.n	80116b6 <__ssvfiscanf_r+0x4e>
 80118ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80118d0:	4621      	mov	r1, r4
 80118d2:	4630      	mov	r0, r6
 80118d4:	4798      	blx	r3
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d0bb      	beq.n	8011852 <__ssvfiscanf_r+0x1ea>
 80118da:	e79d      	b.n	8011818 <__ssvfiscanf_r+0x1b0>
 80118dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80118de:	3201      	adds	r2, #1
 80118e0:	9245      	str	r2, [sp, #276]	; 0x114
 80118e2:	6862      	ldr	r2, [r4, #4]
 80118e4:	3a01      	subs	r2, #1
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	6062      	str	r2, [r4, #4]
 80118ea:	dd02      	ble.n	80118f2 <__ssvfiscanf_r+0x28a>
 80118ec:	3301      	adds	r3, #1
 80118ee:	6023      	str	r3, [r4, #0]
 80118f0:	e7b2      	b.n	8011858 <__ssvfiscanf_r+0x1f0>
 80118f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80118f4:	4621      	mov	r1, r4
 80118f6:	4630      	mov	r0, r6
 80118f8:	4798      	blx	r3
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d0ac      	beq.n	8011858 <__ssvfiscanf_r+0x1f0>
 80118fe:	e78b      	b.n	8011818 <__ssvfiscanf_r+0x1b0>
 8011900:	2b04      	cmp	r3, #4
 8011902:	dc0f      	bgt.n	8011924 <__ssvfiscanf_r+0x2bc>
 8011904:	466b      	mov	r3, sp
 8011906:	4622      	mov	r2, r4
 8011908:	a941      	add	r1, sp, #260	; 0x104
 801190a:	4630      	mov	r0, r6
 801190c:	f000 f9c2 	bl	8011c94 <_scanf_i>
 8011910:	e7b0      	b.n	8011874 <__ssvfiscanf_r+0x20c>
 8011912:	bf00      	nop
 8011914:	080115b5 	.word	0x080115b5
 8011918:	0801162f 	.word	0x0801162f
 801191c:	08019153 	.word	0x08019153
 8011920:	08019322 	.word	0x08019322
 8011924:	4b0b      	ldr	r3, [pc, #44]	; (8011954 <__ssvfiscanf_r+0x2ec>)
 8011926:	2b00      	cmp	r3, #0
 8011928:	f43f aec5 	beq.w	80116b6 <__ssvfiscanf_r+0x4e>
 801192c:	466b      	mov	r3, sp
 801192e:	4622      	mov	r2, r4
 8011930:	a941      	add	r1, sp, #260	; 0x104
 8011932:	4630      	mov	r0, r6
 8011934:	f3af 8000 	nop.w
 8011938:	e79c      	b.n	8011874 <__ssvfiscanf_r+0x20c>
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011940:	bf18      	it	ne
 8011942:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8011946:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011950:	e7f9      	b.n	8011946 <__ssvfiscanf_r+0x2de>
 8011952:	bf00      	nop
 8011954:	00000000 	.word	0x00000000

08011958 <__sfputc_r>:
 8011958:	6893      	ldr	r3, [r2, #8]
 801195a:	3b01      	subs	r3, #1
 801195c:	2b00      	cmp	r3, #0
 801195e:	b410      	push	{r4}
 8011960:	6093      	str	r3, [r2, #8]
 8011962:	da08      	bge.n	8011976 <__sfputc_r+0x1e>
 8011964:	6994      	ldr	r4, [r2, #24]
 8011966:	42a3      	cmp	r3, r4
 8011968:	db01      	blt.n	801196e <__sfputc_r+0x16>
 801196a:	290a      	cmp	r1, #10
 801196c:	d103      	bne.n	8011976 <__sfputc_r+0x1e>
 801196e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011972:	f000 bfd7 	b.w	8012924 <__swbuf_r>
 8011976:	6813      	ldr	r3, [r2, #0]
 8011978:	1c58      	adds	r0, r3, #1
 801197a:	6010      	str	r0, [r2, #0]
 801197c:	7019      	strb	r1, [r3, #0]
 801197e:	4608      	mov	r0, r1
 8011980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011984:	4770      	bx	lr

08011986 <__sfputs_r>:
 8011986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011988:	4606      	mov	r6, r0
 801198a:	460f      	mov	r7, r1
 801198c:	4614      	mov	r4, r2
 801198e:	18d5      	adds	r5, r2, r3
 8011990:	42ac      	cmp	r4, r5
 8011992:	d101      	bne.n	8011998 <__sfputs_r+0x12>
 8011994:	2000      	movs	r0, #0
 8011996:	e007      	b.n	80119a8 <__sfputs_r+0x22>
 8011998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801199c:	463a      	mov	r2, r7
 801199e:	4630      	mov	r0, r6
 80119a0:	f7ff ffda 	bl	8011958 <__sfputc_r>
 80119a4:	1c43      	adds	r3, r0, #1
 80119a6:	d1f3      	bne.n	8011990 <__sfputs_r+0xa>
 80119a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119ac <_vfiprintf_r>:
 80119ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b0:	460d      	mov	r5, r1
 80119b2:	b09d      	sub	sp, #116	; 0x74
 80119b4:	4614      	mov	r4, r2
 80119b6:	4698      	mov	r8, r3
 80119b8:	4606      	mov	r6, r0
 80119ba:	b118      	cbz	r0, 80119c4 <_vfiprintf_r+0x18>
 80119bc:	6a03      	ldr	r3, [r0, #32]
 80119be:	b90b      	cbnz	r3, 80119c4 <_vfiprintf_r+0x18>
 80119c0:	f7fe fbb4 	bl	801012c <__sinit>
 80119c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119c6:	07d9      	lsls	r1, r3, #31
 80119c8:	d405      	bmi.n	80119d6 <_vfiprintf_r+0x2a>
 80119ca:	89ab      	ldrh	r3, [r5, #12]
 80119cc:	059a      	lsls	r2, r3, #22
 80119ce:	d402      	bmi.n	80119d6 <_vfiprintf_r+0x2a>
 80119d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119d2:	f7fe fd98 	bl	8010506 <__retarget_lock_acquire_recursive>
 80119d6:	89ab      	ldrh	r3, [r5, #12]
 80119d8:	071b      	lsls	r3, r3, #28
 80119da:	d501      	bpl.n	80119e0 <_vfiprintf_r+0x34>
 80119dc:	692b      	ldr	r3, [r5, #16]
 80119de:	b99b      	cbnz	r3, 8011a08 <_vfiprintf_r+0x5c>
 80119e0:	4629      	mov	r1, r5
 80119e2:	4630      	mov	r0, r6
 80119e4:	f000 ffdc 	bl	80129a0 <__swsetup_r>
 80119e8:	b170      	cbz	r0, 8011a08 <_vfiprintf_r+0x5c>
 80119ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119ec:	07dc      	lsls	r4, r3, #31
 80119ee:	d504      	bpl.n	80119fa <_vfiprintf_r+0x4e>
 80119f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119f4:	b01d      	add	sp, #116	; 0x74
 80119f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fa:	89ab      	ldrh	r3, [r5, #12]
 80119fc:	0598      	lsls	r0, r3, #22
 80119fe:	d4f7      	bmi.n	80119f0 <_vfiprintf_r+0x44>
 8011a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a02:	f7fe fd81 	bl	8010508 <__retarget_lock_release_recursive>
 8011a06:	e7f3      	b.n	80119f0 <_vfiprintf_r+0x44>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a0c:	2320      	movs	r3, #32
 8011a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a16:	2330      	movs	r3, #48	; 0x30
 8011a18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011bcc <_vfiprintf_r+0x220>
 8011a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a20:	f04f 0901 	mov.w	r9, #1
 8011a24:	4623      	mov	r3, r4
 8011a26:	469a      	mov	sl, r3
 8011a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a2c:	b10a      	cbz	r2, 8011a32 <_vfiprintf_r+0x86>
 8011a2e:	2a25      	cmp	r2, #37	; 0x25
 8011a30:	d1f9      	bne.n	8011a26 <_vfiprintf_r+0x7a>
 8011a32:	ebba 0b04 	subs.w	fp, sl, r4
 8011a36:	d00b      	beq.n	8011a50 <_vfiprintf_r+0xa4>
 8011a38:	465b      	mov	r3, fp
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	4629      	mov	r1, r5
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f7ff ffa1 	bl	8011986 <__sfputs_r>
 8011a44:	3001      	adds	r0, #1
 8011a46:	f000 80a9 	beq.w	8011b9c <_vfiprintf_r+0x1f0>
 8011a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a4c:	445a      	add	r2, fp
 8011a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8011a50:	f89a 3000 	ldrb.w	r3, [sl]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	f000 80a1 	beq.w	8011b9c <_vfiprintf_r+0x1f0>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a64:	f10a 0a01 	add.w	sl, sl, #1
 8011a68:	9304      	str	r3, [sp, #16]
 8011a6a:	9307      	str	r3, [sp, #28]
 8011a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a70:	931a      	str	r3, [sp, #104]	; 0x68
 8011a72:	4654      	mov	r4, sl
 8011a74:	2205      	movs	r2, #5
 8011a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a7a:	4854      	ldr	r0, [pc, #336]	; (8011bcc <_vfiprintf_r+0x220>)
 8011a7c:	f7ee fbc8 	bl	8000210 <memchr>
 8011a80:	9a04      	ldr	r2, [sp, #16]
 8011a82:	b9d8      	cbnz	r0, 8011abc <_vfiprintf_r+0x110>
 8011a84:	06d1      	lsls	r1, r2, #27
 8011a86:	bf44      	itt	mi
 8011a88:	2320      	movmi	r3, #32
 8011a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a8e:	0713      	lsls	r3, r2, #28
 8011a90:	bf44      	itt	mi
 8011a92:	232b      	movmi	r3, #43	; 0x2b
 8011a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a98:	f89a 3000 	ldrb.w	r3, [sl]
 8011a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8011a9e:	d015      	beq.n	8011acc <_vfiprintf_r+0x120>
 8011aa0:	9a07      	ldr	r2, [sp, #28]
 8011aa2:	4654      	mov	r4, sl
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	f04f 0c0a 	mov.w	ip, #10
 8011aaa:	4621      	mov	r1, r4
 8011aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ab0:	3b30      	subs	r3, #48	; 0x30
 8011ab2:	2b09      	cmp	r3, #9
 8011ab4:	d94d      	bls.n	8011b52 <_vfiprintf_r+0x1a6>
 8011ab6:	b1b0      	cbz	r0, 8011ae6 <_vfiprintf_r+0x13a>
 8011ab8:	9207      	str	r2, [sp, #28]
 8011aba:	e014      	b.n	8011ae6 <_vfiprintf_r+0x13a>
 8011abc:	eba0 0308 	sub.w	r3, r0, r8
 8011ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	9304      	str	r3, [sp, #16]
 8011ac8:	46a2      	mov	sl, r4
 8011aca:	e7d2      	b.n	8011a72 <_vfiprintf_r+0xc6>
 8011acc:	9b03      	ldr	r3, [sp, #12]
 8011ace:	1d19      	adds	r1, r3, #4
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	9103      	str	r1, [sp, #12]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfbb      	ittet	lt
 8011ad8:	425b      	neglt	r3, r3
 8011ada:	f042 0202 	orrlt.w	r2, r2, #2
 8011ade:	9307      	strge	r3, [sp, #28]
 8011ae0:	9307      	strlt	r3, [sp, #28]
 8011ae2:	bfb8      	it	lt
 8011ae4:	9204      	strlt	r2, [sp, #16]
 8011ae6:	7823      	ldrb	r3, [r4, #0]
 8011ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8011aea:	d10c      	bne.n	8011b06 <_vfiprintf_r+0x15a>
 8011aec:	7863      	ldrb	r3, [r4, #1]
 8011aee:	2b2a      	cmp	r3, #42	; 0x2a
 8011af0:	d134      	bne.n	8011b5c <_vfiprintf_r+0x1b0>
 8011af2:	9b03      	ldr	r3, [sp, #12]
 8011af4:	1d1a      	adds	r2, r3, #4
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	9203      	str	r2, [sp, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	bfb8      	it	lt
 8011afe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011b02:	3402      	adds	r4, #2
 8011b04:	9305      	str	r3, [sp, #20]
 8011b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011bdc <_vfiprintf_r+0x230>
 8011b0a:	7821      	ldrb	r1, [r4, #0]
 8011b0c:	2203      	movs	r2, #3
 8011b0e:	4650      	mov	r0, sl
 8011b10:	f7ee fb7e 	bl	8000210 <memchr>
 8011b14:	b138      	cbz	r0, 8011b26 <_vfiprintf_r+0x17a>
 8011b16:	9b04      	ldr	r3, [sp, #16]
 8011b18:	eba0 000a 	sub.w	r0, r0, sl
 8011b1c:	2240      	movs	r2, #64	; 0x40
 8011b1e:	4082      	lsls	r2, r0
 8011b20:	4313      	orrs	r3, r2
 8011b22:	3401      	adds	r4, #1
 8011b24:	9304      	str	r3, [sp, #16]
 8011b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b2a:	4829      	ldr	r0, [pc, #164]	; (8011bd0 <_vfiprintf_r+0x224>)
 8011b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b30:	2206      	movs	r2, #6
 8011b32:	f7ee fb6d 	bl	8000210 <memchr>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	d03f      	beq.n	8011bba <_vfiprintf_r+0x20e>
 8011b3a:	4b26      	ldr	r3, [pc, #152]	; (8011bd4 <_vfiprintf_r+0x228>)
 8011b3c:	bb1b      	cbnz	r3, 8011b86 <_vfiprintf_r+0x1da>
 8011b3e:	9b03      	ldr	r3, [sp, #12]
 8011b40:	3307      	adds	r3, #7
 8011b42:	f023 0307 	bic.w	r3, r3, #7
 8011b46:	3308      	adds	r3, #8
 8011b48:	9303      	str	r3, [sp, #12]
 8011b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b4c:	443b      	add	r3, r7
 8011b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b50:	e768      	b.n	8011a24 <_vfiprintf_r+0x78>
 8011b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b56:	460c      	mov	r4, r1
 8011b58:	2001      	movs	r0, #1
 8011b5a:	e7a6      	b.n	8011aaa <_vfiprintf_r+0xfe>
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	3401      	adds	r4, #1
 8011b60:	9305      	str	r3, [sp, #20]
 8011b62:	4619      	mov	r1, r3
 8011b64:	f04f 0c0a 	mov.w	ip, #10
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b6e:	3a30      	subs	r2, #48	; 0x30
 8011b70:	2a09      	cmp	r2, #9
 8011b72:	d903      	bls.n	8011b7c <_vfiprintf_r+0x1d0>
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d0c6      	beq.n	8011b06 <_vfiprintf_r+0x15a>
 8011b78:	9105      	str	r1, [sp, #20]
 8011b7a:	e7c4      	b.n	8011b06 <_vfiprintf_r+0x15a>
 8011b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b80:	4604      	mov	r4, r0
 8011b82:	2301      	movs	r3, #1
 8011b84:	e7f0      	b.n	8011b68 <_vfiprintf_r+0x1bc>
 8011b86:	ab03      	add	r3, sp, #12
 8011b88:	9300      	str	r3, [sp, #0]
 8011b8a:	462a      	mov	r2, r5
 8011b8c:	4b12      	ldr	r3, [pc, #72]	; (8011bd8 <_vfiprintf_r+0x22c>)
 8011b8e:	a904      	add	r1, sp, #16
 8011b90:	4630      	mov	r0, r6
 8011b92:	f7fd fcf7 	bl	800f584 <_printf_float>
 8011b96:	4607      	mov	r7, r0
 8011b98:	1c78      	adds	r0, r7, #1
 8011b9a:	d1d6      	bne.n	8011b4a <_vfiprintf_r+0x19e>
 8011b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b9e:	07d9      	lsls	r1, r3, #31
 8011ba0:	d405      	bmi.n	8011bae <_vfiprintf_r+0x202>
 8011ba2:	89ab      	ldrh	r3, [r5, #12]
 8011ba4:	059a      	lsls	r2, r3, #22
 8011ba6:	d402      	bmi.n	8011bae <_vfiprintf_r+0x202>
 8011ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011baa:	f7fe fcad 	bl	8010508 <__retarget_lock_release_recursive>
 8011bae:	89ab      	ldrh	r3, [r5, #12]
 8011bb0:	065b      	lsls	r3, r3, #25
 8011bb2:	f53f af1d 	bmi.w	80119f0 <_vfiprintf_r+0x44>
 8011bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bb8:	e71c      	b.n	80119f4 <_vfiprintf_r+0x48>
 8011bba:	ab03      	add	r3, sp, #12
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	462a      	mov	r2, r5
 8011bc0:	4b05      	ldr	r3, [pc, #20]	; (8011bd8 <_vfiprintf_r+0x22c>)
 8011bc2:	a904      	add	r1, sp, #16
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7fe f831 	bl	800fc2c <_printf_i>
 8011bca:	e7e4      	b.n	8011b96 <_vfiprintf_r+0x1ea>
 8011bcc:	0801931c 	.word	0x0801931c
 8011bd0:	08019326 	.word	0x08019326
 8011bd4:	0800f585 	.word	0x0800f585
 8011bd8:	08011987 	.word	0x08011987
 8011bdc:	08019322 	.word	0x08019322

08011be0 <_scanf_chars>:
 8011be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011be4:	4615      	mov	r5, r2
 8011be6:	688a      	ldr	r2, [r1, #8]
 8011be8:	4680      	mov	r8, r0
 8011bea:	460c      	mov	r4, r1
 8011bec:	b932      	cbnz	r2, 8011bfc <_scanf_chars+0x1c>
 8011bee:	698a      	ldr	r2, [r1, #24]
 8011bf0:	2a00      	cmp	r2, #0
 8011bf2:	bf0c      	ite	eq
 8011bf4:	2201      	moveq	r2, #1
 8011bf6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8011bfa:	608a      	str	r2, [r1, #8]
 8011bfc:	6822      	ldr	r2, [r4, #0]
 8011bfe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011c90 <_scanf_chars+0xb0>
 8011c02:	06d1      	lsls	r1, r2, #27
 8011c04:	bf5f      	itttt	pl
 8011c06:	681a      	ldrpl	r2, [r3, #0]
 8011c08:	1d11      	addpl	r1, r2, #4
 8011c0a:	6019      	strpl	r1, [r3, #0]
 8011c0c:	6816      	ldrpl	r6, [r2, #0]
 8011c0e:	2700      	movs	r7, #0
 8011c10:	69a0      	ldr	r0, [r4, #24]
 8011c12:	b188      	cbz	r0, 8011c38 <_scanf_chars+0x58>
 8011c14:	2801      	cmp	r0, #1
 8011c16:	d107      	bne.n	8011c28 <_scanf_chars+0x48>
 8011c18:	682a      	ldr	r2, [r5, #0]
 8011c1a:	7811      	ldrb	r1, [r2, #0]
 8011c1c:	6962      	ldr	r2, [r4, #20]
 8011c1e:	5c52      	ldrb	r2, [r2, r1]
 8011c20:	b952      	cbnz	r2, 8011c38 <_scanf_chars+0x58>
 8011c22:	2f00      	cmp	r7, #0
 8011c24:	d031      	beq.n	8011c8a <_scanf_chars+0xaa>
 8011c26:	e022      	b.n	8011c6e <_scanf_chars+0x8e>
 8011c28:	2802      	cmp	r0, #2
 8011c2a:	d120      	bne.n	8011c6e <_scanf_chars+0x8e>
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011c34:	071b      	lsls	r3, r3, #28
 8011c36:	d41a      	bmi.n	8011c6e <_scanf_chars+0x8e>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	06da      	lsls	r2, r3, #27
 8011c3c:	bf5e      	ittt	pl
 8011c3e:	682b      	ldrpl	r3, [r5, #0]
 8011c40:	781b      	ldrbpl	r3, [r3, #0]
 8011c42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011c46:	682a      	ldr	r2, [r5, #0]
 8011c48:	686b      	ldr	r3, [r5, #4]
 8011c4a:	3201      	adds	r2, #1
 8011c4c:	602a      	str	r2, [r5, #0]
 8011c4e:	68a2      	ldr	r2, [r4, #8]
 8011c50:	3b01      	subs	r3, #1
 8011c52:	3a01      	subs	r2, #1
 8011c54:	606b      	str	r3, [r5, #4]
 8011c56:	3701      	adds	r7, #1
 8011c58:	60a2      	str	r2, [r4, #8]
 8011c5a:	b142      	cbz	r2, 8011c6e <_scanf_chars+0x8e>
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	dcd7      	bgt.n	8011c10 <_scanf_chars+0x30>
 8011c60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011c64:	4629      	mov	r1, r5
 8011c66:	4640      	mov	r0, r8
 8011c68:	4798      	blx	r3
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	d0d0      	beq.n	8011c10 <_scanf_chars+0x30>
 8011c6e:	6823      	ldr	r3, [r4, #0]
 8011c70:	f013 0310 	ands.w	r3, r3, #16
 8011c74:	d105      	bne.n	8011c82 <_scanf_chars+0xa2>
 8011c76:	68e2      	ldr	r2, [r4, #12]
 8011c78:	3201      	adds	r2, #1
 8011c7a:	60e2      	str	r2, [r4, #12]
 8011c7c:	69a2      	ldr	r2, [r4, #24]
 8011c7e:	b102      	cbz	r2, 8011c82 <_scanf_chars+0xa2>
 8011c80:	7033      	strb	r3, [r6, #0]
 8011c82:	6923      	ldr	r3, [r4, #16]
 8011c84:	443b      	add	r3, r7
 8011c86:	6123      	str	r3, [r4, #16]
 8011c88:	2000      	movs	r0, #0
 8011c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c8e:	bf00      	nop
 8011c90:	08019153 	.word	0x08019153

08011c94 <_scanf_i>:
 8011c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c98:	4698      	mov	r8, r3
 8011c9a:	4b74      	ldr	r3, [pc, #464]	; (8011e6c <_scanf_i+0x1d8>)
 8011c9c:	460c      	mov	r4, r1
 8011c9e:	4682      	mov	sl, r0
 8011ca0:	4616      	mov	r6, r2
 8011ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ca6:	b087      	sub	sp, #28
 8011ca8:	ab03      	add	r3, sp, #12
 8011caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011cae:	4b70      	ldr	r3, [pc, #448]	; (8011e70 <_scanf_i+0x1dc>)
 8011cb0:	69a1      	ldr	r1, [r4, #24]
 8011cb2:	4a70      	ldr	r2, [pc, #448]	; (8011e74 <_scanf_i+0x1e0>)
 8011cb4:	2903      	cmp	r1, #3
 8011cb6:	bf18      	it	ne
 8011cb8:	461a      	movne	r2, r3
 8011cba:	68a3      	ldr	r3, [r4, #8]
 8011cbc:	9201      	str	r2, [sp, #4]
 8011cbe:	1e5a      	subs	r2, r3, #1
 8011cc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011cc4:	bf88      	it	hi
 8011cc6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011cca:	4627      	mov	r7, r4
 8011ccc:	bf82      	ittt	hi
 8011cce:	eb03 0905 	addhi.w	r9, r3, r5
 8011cd2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011cd6:	60a3      	strhi	r3, [r4, #8]
 8011cd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011cdc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011ce0:	bf98      	it	ls
 8011ce2:	f04f 0900 	movls.w	r9, #0
 8011ce6:	6023      	str	r3, [r4, #0]
 8011ce8:	463d      	mov	r5, r7
 8011cea:	f04f 0b00 	mov.w	fp, #0
 8011cee:	6831      	ldr	r1, [r6, #0]
 8011cf0:	ab03      	add	r3, sp, #12
 8011cf2:	7809      	ldrb	r1, [r1, #0]
 8011cf4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011cf8:	2202      	movs	r2, #2
 8011cfa:	f7ee fa89 	bl	8000210 <memchr>
 8011cfe:	b328      	cbz	r0, 8011d4c <_scanf_i+0xb8>
 8011d00:	f1bb 0f01 	cmp.w	fp, #1
 8011d04:	d159      	bne.n	8011dba <_scanf_i+0x126>
 8011d06:	6862      	ldr	r2, [r4, #4]
 8011d08:	b92a      	cbnz	r2, 8011d16 <_scanf_i+0x82>
 8011d0a:	6822      	ldr	r2, [r4, #0]
 8011d0c:	2308      	movs	r3, #8
 8011d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d12:	6063      	str	r3, [r4, #4]
 8011d14:	6022      	str	r2, [r4, #0]
 8011d16:	6822      	ldr	r2, [r4, #0]
 8011d18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011d1c:	6022      	str	r2, [r4, #0]
 8011d1e:	68a2      	ldr	r2, [r4, #8]
 8011d20:	1e51      	subs	r1, r2, #1
 8011d22:	60a1      	str	r1, [r4, #8]
 8011d24:	b192      	cbz	r2, 8011d4c <_scanf_i+0xb8>
 8011d26:	6832      	ldr	r2, [r6, #0]
 8011d28:	1c51      	adds	r1, r2, #1
 8011d2a:	6031      	str	r1, [r6, #0]
 8011d2c:	7812      	ldrb	r2, [r2, #0]
 8011d2e:	f805 2b01 	strb.w	r2, [r5], #1
 8011d32:	6872      	ldr	r2, [r6, #4]
 8011d34:	3a01      	subs	r2, #1
 8011d36:	2a00      	cmp	r2, #0
 8011d38:	6072      	str	r2, [r6, #4]
 8011d3a:	dc07      	bgt.n	8011d4c <_scanf_i+0xb8>
 8011d3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011d40:	4631      	mov	r1, r6
 8011d42:	4650      	mov	r0, sl
 8011d44:	4790      	blx	r2
 8011d46:	2800      	cmp	r0, #0
 8011d48:	f040 8085 	bne.w	8011e56 <_scanf_i+0x1c2>
 8011d4c:	f10b 0b01 	add.w	fp, fp, #1
 8011d50:	f1bb 0f03 	cmp.w	fp, #3
 8011d54:	d1cb      	bne.n	8011cee <_scanf_i+0x5a>
 8011d56:	6863      	ldr	r3, [r4, #4]
 8011d58:	b90b      	cbnz	r3, 8011d5e <_scanf_i+0xca>
 8011d5a:	230a      	movs	r3, #10
 8011d5c:	6063      	str	r3, [r4, #4]
 8011d5e:	6863      	ldr	r3, [r4, #4]
 8011d60:	4945      	ldr	r1, [pc, #276]	; (8011e78 <_scanf_i+0x1e4>)
 8011d62:	6960      	ldr	r0, [r4, #20]
 8011d64:	1ac9      	subs	r1, r1, r3
 8011d66:	f000 f889 	bl	8011e7c <__sccl>
 8011d6a:	f04f 0b00 	mov.w	fp, #0
 8011d6e:	68a3      	ldr	r3, [r4, #8]
 8011d70:	6822      	ldr	r2, [r4, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d03d      	beq.n	8011df2 <_scanf_i+0x15e>
 8011d76:	6831      	ldr	r1, [r6, #0]
 8011d78:	6960      	ldr	r0, [r4, #20]
 8011d7a:	f891 c000 	ldrb.w	ip, [r1]
 8011d7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d035      	beq.n	8011df2 <_scanf_i+0x15e>
 8011d86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011d8a:	d124      	bne.n	8011dd6 <_scanf_i+0x142>
 8011d8c:	0510      	lsls	r0, r2, #20
 8011d8e:	d522      	bpl.n	8011dd6 <_scanf_i+0x142>
 8011d90:	f10b 0b01 	add.w	fp, fp, #1
 8011d94:	f1b9 0f00 	cmp.w	r9, #0
 8011d98:	d003      	beq.n	8011da2 <_scanf_i+0x10e>
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011da0:	60a3      	str	r3, [r4, #8]
 8011da2:	6873      	ldr	r3, [r6, #4]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	6073      	str	r3, [r6, #4]
 8011daa:	dd1b      	ble.n	8011de4 <_scanf_i+0x150>
 8011dac:	6833      	ldr	r3, [r6, #0]
 8011dae:	3301      	adds	r3, #1
 8011db0:	6033      	str	r3, [r6, #0]
 8011db2:	68a3      	ldr	r3, [r4, #8]
 8011db4:	3b01      	subs	r3, #1
 8011db6:	60a3      	str	r3, [r4, #8]
 8011db8:	e7d9      	b.n	8011d6e <_scanf_i+0xda>
 8011dba:	f1bb 0f02 	cmp.w	fp, #2
 8011dbe:	d1ae      	bne.n	8011d1e <_scanf_i+0x8a>
 8011dc0:	6822      	ldr	r2, [r4, #0]
 8011dc2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011dc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011dca:	d1bf      	bne.n	8011d4c <_scanf_i+0xb8>
 8011dcc:	2310      	movs	r3, #16
 8011dce:	6063      	str	r3, [r4, #4]
 8011dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011dd4:	e7a2      	b.n	8011d1c <_scanf_i+0x88>
 8011dd6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011dda:	6022      	str	r2, [r4, #0]
 8011ddc:	780b      	ldrb	r3, [r1, #0]
 8011dde:	f805 3b01 	strb.w	r3, [r5], #1
 8011de2:	e7de      	b.n	8011da2 <_scanf_i+0x10e>
 8011de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011de8:	4631      	mov	r1, r6
 8011dea:	4650      	mov	r0, sl
 8011dec:	4798      	blx	r3
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d0df      	beq.n	8011db2 <_scanf_i+0x11e>
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	05d9      	lsls	r1, r3, #23
 8011df6:	d50d      	bpl.n	8011e14 <_scanf_i+0x180>
 8011df8:	42bd      	cmp	r5, r7
 8011dfa:	d909      	bls.n	8011e10 <_scanf_i+0x17c>
 8011dfc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e04:	4632      	mov	r2, r6
 8011e06:	4650      	mov	r0, sl
 8011e08:	4798      	blx	r3
 8011e0a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8011e0e:	464d      	mov	r5, r9
 8011e10:	42bd      	cmp	r5, r7
 8011e12:	d028      	beq.n	8011e66 <_scanf_i+0x1d2>
 8011e14:	6822      	ldr	r2, [r4, #0]
 8011e16:	f012 0210 	ands.w	r2, r2, #16
 8011e1a:	d113      	bne.n	8011e44 <_scanf_i+0x1b0>
 8011e1c:	702a      	strb	r2, [r5, #0]
 8011e1e:	6863      	ldr	r3, [r4, #4]
 8011e20:	9e01      	ldr	r6, [sp, #4]
 8011e22:	4639      	mov	r1, r7
 8011e24:	4650      	mov	r0, sl
 8011e26:	47b0      	blx	r6
 8011e28:	f8d8 3000 	ldr.w	r3, [r8]
 8011e2c:	6821      	ldr	r1, [r4, #0]
 8011e2e:	1d1a      	adds	r2, r3, #4
 8011e30:	f8c8 2000 	str.w	r2, [r8]
 8011e34:	f011 0f20 	tst.w	r1, #32
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	d00f      	beq.n	8011e5c <_scanf_i+0x1c8>
 8011e3c:	6018      	str	r0, [r3, #0]
 8011e3e:	68e3      	ldr	r3, [r4, #12]
 8011e40:	3301      	adds	r3, #1
 8011e42:	60e3      	str	r3, [r4, #12]
 8011e44:	6923      	ldr	r3, [r4, #16]
 8011e46:	1bed      	subs	r5, r5, r7
 8011e48:	445d      	add	r5, fp
 8011e4a:	442b      	add	r3, r5
 8011e4c:	6123      	str	r3, [r4, #16]
 8011e4e:	2000      	movs	r0, #0
 8011e50:	b007      	add	sp, #28
 8011e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e56:	f04f 0b00 	mov.w	fp, #0
 8011e5a:	e7ca      	b.n	8011df2 <_scanf_i+0x15e>
 8011e5c:	07ca      	lsls	r2, r1, #31
 8011e5e:	bf4c      	ite	mi
 8011e60:	8018      	strhmi	r0, [r3, #0]
 8011e62:	6018      	strpl	r0, [r3, #0]
 8011e64:	e7eb      	b.n	8011e3e <_scanf_i+0x1aa>
 8011e66:	2001      	movs	r0, #1
 8011e68:	e7f2      	b.n	8011e50 <_scanf_i+0x1bc>
 8011e6a:	bf00      	nop
 8011e6c:	0801409c 	.word	0x0801409c
 8011e70:	08012921 	.word	0x08012921
 8011e74:	08010261 	.word	0x08010261
 8011e78:	0801933d 	.word	0x0801933d

08011e7c <__sccl>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	780b      	ldrb	r3, [r1, #0]
 8011e80:	4604      	mov	r4, r0
 8011e82:	2b5e      	cmp	r3, #94	; 0x5e
 8011e84:	bf0b      	itete	eq
 8011e86:	784b      	ldrbeq	r3, [r1, #1]
 8011e88:	1c4a      	addne	r2, r1, #1
 8011e8a:	1c8a      	addeq	r2, r1, #2
 8011e8c:	2100      	movne	r1, #0
 8011e8e:	bf08      	it	eq
 8011e90:	2101      	moveq	r1, #1
 8011e92:	3801      	subs	r0, #1
 8011e94:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011e98:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011e9c:	42a8      	cmp	r0, r5
 8011e9e:	d1fb      	bne.n	8011e98 <__sccl+0x1c>
 8011ea0:	b90b      	cbnz	r3, 8011ea6 <__sccl+0x2a>
 8011ea2:	1e50      	subs	r0, r2, #1
 8011ea4:	bd70      	pop	{r4, r5, r6, pc}
 8011ea6:	f081 0101 	eor.w	r1, r1, #1
 8011eaa:	54e1      	strb	r1, [r4, r3]
 8011eac:	4610      	mov	r0, r2
 8011eae:	4602      	mov	r2, r0
 8011eb0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011eb4:	2d2d      	cmp	r5, #45	; 0x2d
 8011eb6:	d005      	beq.n	8011ec4 <__sccl+0x48>
 8011eb8:	2d5d      	cmp	r5, #93	; 0x5d
 8011eba:	d016      	beq.n	8011eea <__sccl+0x6e>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	d0f1      	beq.n	8011ea4 <__sccl+0x28>
 8011ec0:	462b      	mov	r3, r5
 8011ec2:	e7f2      	b.n	8011eaa <__sccl+0x2e>
 8011ec4:	7846      	ldrb	r6, [r0, #1]
 8011ec6:	2e5d      	cmp	r6, #93	; 0x5d
 8011ec8:	d0fa      	beq.n	8011ec0 <__sccl+0x44>
 8011eca:	42b3      	cmp	r3, r6
 8011ecc:	dcf8      	bgt.n	8011ec0 <__sccl+0x44>
 8011ece:	3002      	adds	r0, #2
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	3201      	adds	r2, #1
 8011ed4:	4296      	cmp	r6, r2
 8011ed6:	54a1      	strb	r1, [r4, r2]
 8011ed8:	dcfb      	bgt.n	8011ed2 <__sccl+0x56>
 8011eda:	1af2      	subs	r2, r6, r3
 8011edc:	3a01      	subs	r2, #1
 8011ede:	1c5d      	adds	r5, r3, #1
 8011ee0:	42b3      	cmp	r3, r6
 8011ee2:	bfa8      	it	ge
 8011ee4:	2200      	movge	r2, #0
 8011ee6:	18ab      	adds	r3, r5, r2
 8011ee8:	e7e1      	b.n	8011eae <__sccl+0x32>
 8011eea:	4610      	mov	r0, r2
 8011eec:	e7da      	b.n	8011ea4 <__sccl+0x28>
	...

08011ef0 <__sflush_r>:
 8011ef0:	898a      	ldrh	r2, [r1, #12]
 8011ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	0710      	lsls	r0, r2, #28
 8011efa:	460c      	mov	r4, r1
 8011efc:	d458      	bmi.n	8011fb0 <__sflush_r+0xc0>
 8011efe:	684b      	ldr	r3, [r1, #4]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	dc05      	bgt.n	8011f10 <__sflush_r+0x20>
 8011f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	dc02      	bgt.n	8011f10 <__sflush_r+0x20>
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f12:	2e00      	cmp	r6, #0
 8011f14:	d0f9      	beq.n	8011f0a <__sflush_r+0x1a>
 8011f16:	2300      	movs	r3, #0
 8011f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f1c:	682f      	ldr	r7, [r5, #0]
 8011f1e:	6a21      	ldr	r1, [r4, #32]
 8011f20:	602b      	str	r3, [r5, #0]
 8011f22:	d032      	beq.n	8011f8a <__sflush_r+0x9a>
 8011f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	075a      	lsls	r2, r3, #29
 8011f2a:	d505      	bpl.n	8011f38 <__sflush_r+0x48>
 8011f2c:	6863      	ldr	r3, [r4, #4]
 8011f2e:	1ac0      	subs	r0, r0, r3
 8011f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f32:	b10b      	cbz	r3, 8011f38 <__sflush_r+0x48>
 8011f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f36:	1ac0      	subs	r0, r0, r3
 8011f38:	2300      	movs	r3, #0
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f3e:	6a21      	ldr	r1, [r4, #32]
 8011f40:	4628      	mov	r0, r5
 8011f42:	47b0      	blx	r6
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	d106      	bne.n	8011f58 <__sflush_r+0x68>
 8011f4a:	6829      	ldr	r1, [r5, #0]
 8011f4c:	291d      	cmp	r1, #29
 8011f4e:	d82b      	bhi.n	8011fa8 <__sflush_r+0xb8>
 8011f50:	4a29      	ldr	r2, [pc, #164]	; (8011ff8 <__sflush_r+0x108>)
 8011f52:	410a      	asrs	r2, r1
 8011f54:	07d6      	lsls	r6, r2, #31
 8011f56:	d427      	bmi.n	8011fa8 <__sflush_r+0xb8>
 8011f58:	2200      	movs	r2, #0
 8011f5a:	6062      	str	r2, [r4, #4]
 8011f5c:	04d9      	lsls	r1, r3, #19
 8011f5e:	6922      	ldr	r2, [r4, #16]
 8011f60:	6022      	str	r2, [r4, #0]
 8011f62:	d504      	bpl.n	8011f6e <__sflush_r+0x7e>
 8011f64:	1c42      	adds	r2, r0, #1
 8011f66:	d101      	bne.n	8011f6c <__sflush_r+0x7c>
 8011f68:	682b      	ldr	r3, [r5, #0]
 8011f6a:	b903      	cbnz	r3, 8011f6e <__sflush_r+0x7e>
 8011f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8011f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f70:	602f      	str	r7, [r5, #0]
 8011f72:	2900      	cmp	r1, #0
 8011f74:	d0c9      	beq.n	8011f0a <__sflush_r+0x1a>
 8011f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f7a:	4299      	cmp	r1, r3
 8011f7c:	d002      	beq.n	8011f84 <__sflush_r+0x94>
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f7ff f974 	bl	801126c <_free_r>
 8011f84:	2000      	movs	r0, #0
 8011f86:	6360      	str	r0, [r4, #52]	; 0x34
 8011f88:	e7c0      	b.n	8011f0c <__sflush_r+0x1c>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	47b0      	blx	r6
 8011f90:	1c41      	adds	r1, r0, #1
 8011f92:	d1c8      	bne.n	8011f26 <__sflush_r+0x36>
 8011f94:	682b      	ldr	r3, [r5, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d0c5      	beq.n	8011f26 <__sflush_r+0x36>
 8011f9a:	2b1d      	cmp	r3, #29
 8011f9c:	d001      	beq.n	8011fa2 <__sflush_r+0xb2>
 8011f9e:	2b16      	cmp	r3, #22
 8011fa0:	d101      	bne.n	8011fa6 <__sflush_r+0xb6>
 8011fa2:	602f      	str	r7, [r5, #0]
 8011fa4:	e7b1      	b.n	8011f0a <__sflush_r+0x1a>
 8011fa6:	89a3      	ldrh	r3, [r4, #12]
 8011fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fac:	81a3      	strh	r3, [r4, #12]
 8011fae:	e7ad      	b.n	8011f0c <__sflush_r+0x1c>
 8011fb0:	690f      	ldr	r7, [r1, #16]
 8011fb2:	2f00      	cmp	r7, #0
 8011fb4:	d0a9      	beq.n	8011f0a <__sflush_r+0x1a>
 8011fb6:	0793      	lsls	r3, r2, #30
 8011fb8:	680e      	ldr	r6, [r1, #0]
 8011fba:	bf08      	it	eq
 8011fbc:	694b      	ldreq	r3, [r1, #20]
 8011fbe:	600f      	str	r7, [r1, #0]
 8011fc0:	bf18      	it	ne
 8011fc2:	2300      	movne	r3, #0
 8011fc4:	eba6 0807 	sub.w	r8, r6, r7
 8011fc8:	608b      	str	r3, [r1, #8]
 8011fca:	f1b8 0f00 	cmp.w	r8, #0
 8011fce:	dd9c      	ble.n	8011f0a <__sflush_r+0x1a>
 8011fd0:	6a21      	ldr	r1, [r4, #32]
 8011fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fd4:	4643      	mov	r3, r8
 8011fd6:	463a      	mov	r2, r7
 8011fd8:	4628      	mov	r0, r5
 8011fda:	47b0      	blx	r6
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	dc06      	bgt.n	8011fee <__sflush_r+0xfe>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fe6:	81a3      	strh	r3, [r4, #12]
 8011fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fec:	e78e      	b.n	8011f0c <__sflush_r+0x1c>
 8011fee:	4407      	add	r7, r0
 8011ff0:	eba8 0800 	sub.w	r8, r8, r0
 8011ff4:	e7e9      	b.n	8011fca <__sflush_r+0xda>
 8011ff6:	bf00      	nop
 8011ff8:	dfbffffe 	.word	0xdfbffffe

08011ffc <_fflush_r>:
 8011ffc:	b538      	push	{r3, r4, r5, lr}
 8011ffe:	690b      	ldr	r3, [r1, #16]
 8012000:	4605      	mov	r5, r0
 8012002:	460c      	mov	r4, r1
 8012004:	b913      	cbnz	r3, 801200c <_fflush_r+0x10>
 8012006:	2500      	movs	r5, #0
 8012008:	4628      	mov	r0, r5
 801200a:	bd38      	pop	{r3, r4, r5, pc}
 801200c:	b118      	cbz	r0, 8012016 <_fflush_r+0x1a>
 801200e:	6a03      	ldr	r3, [r0, #32]
 8012010:	b90b      	cbnz	r3, 8012016 <_fflush_r+0x1a>
 8012012:	f7fe f88b 	bl	801012c <__sinit>
 8012016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d0f3      	beq.n	8012006 <_fflush_r+0xa>
 801201e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012020:	07d0      	lsls	r0, r2, #31
 8012022:	d404      	bmi.n	801202e <_fflush_r+0x32>
 8012024:	0599      	lsls	r1, r3, #22
 8012026:	d402      	bmi.n	801202e <_fflush_r+0x32>
 8012028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801202a:	f7fe fa6c 	bl	8010506 <__retarget_lock_acquire_recursive>
 801202e:	4628      	mov	r0, r5
 8012030:	4621      	mov	r1, r4
 8012032:	f7ff ff5d 	bl	8011ef0 <__sflush_r>
 8012036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012038:	07da      	lsls	r2, r3, #31
 801203a:	4605      	mov	r5, r0
 801203c:	d4e4      	bmi.n	8012008 <_fflush_r+0xc>
 801203e:	89a3      	ldrh	r3, [r4, #12]
 8012040:	059b      	lsls	r3, r3, #22
 8012042:	d4e1      	bmi.n	8012008 <_fflush_r+0xc>
 8012044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012046:	f7fe fa5f 	bl	8010508 <__retarget_lock_release_recursive>
 801204a:	e7dd      	b.n	8012008 <_fflush_r+0xc>

0801204c <_Balloc>:
 801204c:	b570      	push	{r4, r5, r6, lr}
 801204e:	69c6      	ldr	r6, [r0, #28]
 8012050:	4604      	mov	r4, r0
 8012052:	460d      	mov	r5, r1
 8012054:	b976      	cbnz	r6, 8012074 <_Balloc+0x28>
 8012056:	2010      	movs	r0, #16
 8012058:	f7fd fcca 	bl	800f9f0 <malloc>
 801205c:	4602      	mov	r2, r0
 801205e:	61e0      	str	r0, [r4, #28]
 8012060:	b920      	cbnz	r0, 801206c <_Balloc+0x20>
 8012062:	4b18      	ldr	r3, [pc, #96]	; (80120c4 <_Balloc+0x78>)
 8012064:	4818      	ldr	r0, [pc, #96]	; (80120c8 <_Balloc+0x7c>)
 8012066:	216b      	movs	r1, #107	; 0x6b
 8012068:	f7fe fa66 	bl	8010538 <__assert_func>
 801206c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012070:	6006      	str	r6, [r0, #0]
 8012072:	60c6      	str	r6, [r0, #12]
 8012074:	69e6      	ldr	r6, [r4, #28]
 8012076:	68f3      	ldr	r3, [r6, #12]
 8012078:	b183      	cbz	r3, 801209c <_Balloc+0x50>
 801207a:	69e3      	ldr	r3, [r4, #28]
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012082:	b9b8      	cbnz	r0, 80120b4 <_Balloc+0x68>
 8012084:	2101      	movs	r1, #1
 8012086:	fa01 f605 	lsl.w	r6, r1, r5
 801208a:	1d72      	adds	r2, r6, #5
 801208c:	0092      	lsls	r2, r2, #2
 801208e:	4620      	mov	r0, r4
 8012090:	f000 fd83 	bl	8012b9a <_calloc_r>
 8012094:	b160      	cbz	r0, 80120b0 <_Balloc+0x64>
 8012096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801209a:	e00e      	b.n	80120ba <_Balloc+0x6e>
 801209c:	2221      	movs	r2, #33	; 0x21
 801209e:	2104      	movs	r1, #4
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 fd7a 	bl	8012b9a <_calloc_r>
 80120a6:	69e3      	ldr	r3, [r4, #28]
 80120a8:	60f0      	str	r0, [r6, #12]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e4      	bne.n	801207a <_Balloc+0x2e>
 80120b0:	2000      	movs	r0, #0
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
 80120b4:	6802      	ldr	r2, [r0, #0]
 80120b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120ba:	2300      	movs	r3, #0
 80120bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120c0:	e7f7      	b.n	80120b2 <_Balloc+0x66>
 80120c2:	bf00      	nop
 80120c4:	0801929c 	.word	0x0801929c
 80120c8:	08019348 	.word	0x08019348

080120cc <_Bfree>:
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	69c6      	ldr	r6, [r0, #28]
 80120d0:	4605      	mov	r5, r0
 80120d2:	460c      	mov	r4, r1
 80120d4:	b976      	cbnz	r6, 80120f4 <_Bfree+0x28>
 80120d6:	2010      	movs	r0, #16
 80120d8:	f7fd fc8a 	bl	800f9f0 <malloc>
 80120dc:	4602      	mov	r2, r0
 80120de:	61e8      	str	r0, [r5, #28]
 80120e0:	b920      	cbnz	r0, 80120ec <_Bfree+0x20>
 80120e2:	4b09      	ldr	r3, [pc, #36]	; (8012108 <_Bfree+0x3c>)
 80120e4:	4809      	ldr	r0, [pc, #36]	; (801210c <_Bfree+0x40>)
 80120e6:	218f      	movs	r1, #143	; 0x8f
 80120e8:	f7fe fa26 	bl	8010538 <__assert_func>
 80120ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120f0:	6006      	str	r6, [r0, #0]
 80120f2:	60c6      	str	r6, [r0, #12]
 80120f4:	b13c      	cbz	r4, 8012106 <_Bfree+0x3a>
 80120f6:	69eb      	ldr	r3, [r5, #28]
 80120f8:	6862      	ldr	r2, [r4, #4]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012100:	6021      	str	r1, [r4, #0]
 8012102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012106:	bd70      	pop	{r4, r5, r6, pc}
 8012108:	0801929c 	.word	0x0801929c
 801210c:	08019348 	.word	0x08019348

08012110 <__multadd>:
 8012110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012114:	690d      	ldr	r5, [r1, #16]
 8012116:	4607      	mov	r7, r0
 8012118:	460c      	mov	r4, r1
 801211a:	461e      	mov	r6, r3
 801211c:	f101 0c14 	add.w	ip, r1, #20
 8012120:	2000      	movs	r0, #0
 8012122:	f8dc 3000 	ldr.w	r3, [ip]
 8012126:	b299      	uxth	r1, r3
 8012128:	fb02 6101 	mla	r1, r2, r1, r6
 801212c:	0c1e      	lsrs	r6, r3, #16
 801212e:	0c0b      	lsrs	r3, r1, #16
 8012130:	fb02 3306 	mla	r3, r2, r6, r3
 8012134:	b289      	uxth	r1, r1
 8012136:	3001      	adds	r0, #1
 8012138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801213c:	4285      	cmp	r5, r0
 801213e:	f84c 1b04 	str.w	r1, [ip], #4
 8012142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012146:	dcec      	bgt.n	8012122 <__multadd+0x12>
 8012148:	b30e      	cbz	r6, 801218e <__multadd+0x7e>
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	42ab      	cmp	r3, r5
 801214e:	dc19      	bgt.n	8012184 <__multadd+0x74>
 8012150:	6861      	ldr	r1, [r4, #4]
 8012152:	4638      	mov	r0, r7
 8012154:	3101      	adds	r1, #1
 8012156:	f7ff ff79 	bl	801204c <_Balloc>
 801215a:	4680      	mov	r8, r0
 801215c:	b928      	cbnz	r0, 801216a <__multadd+0x5a>
 801215e:	4602      	mov	r2, r0
 8012160:	4b0c      	ldr	r3, [pc, #48]	; (8012194 <__multadd+0x84>)
 8012162:	480d      	ldr	r0, [pc, #52]	; (8012198 <__multadd+0x88>)
 8012164:	21ba      	movs	r1, #186	; 0xba
 8012166:	f7fe f9e7 	bl	8010538 <__assert_func>
 801216a:	6922      	ldr	r2, [r4, #16]
 801216c:	3202      	adds	r2, #2
 801216e:	f104 010c 	add.w	r1, r4, #12
 8012172:	0092      	lsls	r2, r2, #2
 8012174:	300c      	adds	r0, #12
 8012176:	f7fe f9c8 	bl	801050a <memcpy>
 801217a:	4621      	mov	r1, r4
 801217c:	4638      	mov	r0, r7
 801217e:	f7ff ffa5 	bl	80120cc <_Bfree>
 8012182:	4644      	mov	r4, r8
 8012184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012188:	3501      	adds	r5, #1
 801218a:	615e      	str	r6, [r3, #20]
 801218c:	6125      	str	r5, [r4, #16]
 801218e:	4620      	mov	r0, r4
 8012190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012194:	0801930b 	.word	0x0801930b
 8012198:	08019348 	.word	0x08019348

0801219c <__hi0bits>:
 801219c:	0c03      	lsrs	r3, r0, #16
 801219e:	041b      	lsls	r3, r3, #16
 80121a0:	b9d3      	cbnz	r3, 80121d8 <__hi0bits+0x3c>
 80121a2:	0400      	lsls	r0, r0, #16
 80121a4:	2310      	movs	r3, #16
 80121a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80121aa:	bf04      	itt	eq
 80121ac:	0200      	lsleq	r0, r0, #8
 80121ae:	3308      	addeq	r3, #8
 80121b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80121b4:	bf04      	itt	eq
 80121b6:	0100      	lsleq	r0, r0, #4
 80121b8:	3304      	addeq	r3, #4
 80121ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80121be:	bf04      	itt	eq
 80121c0:	0080      	lsleq	r0, r0, #2
 80121c2:	3302      	addeq	r3, #2
 80121c4:	2800      	cmp	r0, #0
 80121c6:	db05      	blt.n	80121d4 <__hi0bits+0x38>
 80121c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80121cc:	f103 0301 	add.w	r3, r3, #1
 80121d0:	bf08      	it	eq
 80121d2:	2320      	moveq	r3, #32
 80121d4:	4618      	mov	r0, r3
 80121d6:	4770      	bx	lr
 80121d8:	2300      	movs	r3, #0
 80121da:	e7e4      	b.n	80121a6 <__hi0bits+0xa>

080121dc <__lo0bits>:
 80121dc:	6803      	ldr	r3, [r0, #0]
 80121de:	f013 0207 	ands.w	r2, r3, #7
 80121e2:	d00c      	beq.n	80121fe <__lo0bits+0x22>
 80121e4:	07d9      	lsls	r1, r3, #31
 80121e6:	d422      	bmi.n	801222e <__lo0bits+0x52>
 80121e8:	079a      	lsls	r2, r3, #30
 80121ea:	bf49      	itett	mi
 80121ec:	085b      	lsrmi	r3, r3, #1
 80121ee:	089b      	lsrpl	r3, r3, #2
 80121f0:	6003      	strmi	r3, [r0, #0]
 80121f2:	2201      	movmi	r2, #1
 80121f4:	bf5c      	itt	pl
 80121f6:	6003      	strpl	r3, [r0, #0]
 80121f8:	2202      	movpl	r2, #2
 80121fa:	4610      	mov	r0, r2
 80121fc:	4770      	bx	lr
 80121fe:	b299      	uxth	r1, r3
 8012200:	b909      	cbnz	r1, 8012206 <__lo0bits+0x2a>
 8012202:	0c1b      	lsrs	r3, r3, #16
 8012204:	2210      	movs	r2, #16
 8012206:	b2d9      	uxtb	r1, r3
 8012208:	b909      	cbnz	r1, 801220e <__lo0bits+0x32>
 801220a:	3208      	adds	r2, #8
 801220c:	0a1b      	lsrs	r3, r3, #8
 801220e:	0719      	lsls	r1, r3, #28
 8012210:	bf04      	itt	eq
 8012212:	091b      	lsreq	r3, r3, #4
 8012214:	3204      	addeq	r2, #4
 8012216:	0799      	lsls	r1, r3, #30
 8012218:	bf04      	itt	eq
 801221a:	089b      	lsreq	r3, r3, #2
 801221c:	3202      	addeq	r2, #2
 801221e:	07d9      	lsls	r1, r3, #31
 8012220:	d403      	bmi.n	801222a <__lo0bits+0x4e>
 8012222:	085b      	lsrs	r3, r3, #1
 8012224:	f102 0201 	add.w	r2, r2, #1
 8012228:	d003      	beq.n	8012232 <__lo0bits+0x56>
 801222a:	6003      	str	r3, [r0, #0]
 801222c:	e7e5      	b.n	80121fa <__lo0bits+0x1e>
 801222e:	2200      	movs	r2, #0
 8012230:	e7e3      	b.n	80121fa <__lo0bits+0x1e>
 8012232:	2220      	movs	r2, #32
 8012234:	e7e1      	b.n	80121fa <__lo0bits+0x1e>
	...

08012238 <__i2b>:
 8012238:	b510      	push	{r4, lr}
 801223a:	460c      	mov	r4, r1
 801223c:	2101      	movs	r1, #1
 801223e:	f7ff ff05 	bl	801204c <_Balloc>
 8012242:	4602      	mov	r2, r0
 8012244:	b928      	cbnz	r0, 8012252 <__i2b+0x1a>
 8012246:	4b05      	ldr	r3, [pc, #20]	; (801225c <__i2b+0x24>)
 8012248:	4805      	ldr	r0, [pc, #20]	; (8012260 <__i2b+0x28>)
 801224a:	f240 1145 	movw	r1, #325	; 0x145
 801224e:	f7fe f973 	bl	8010538 <__assert_func>
 8012252:	2301      	movs	r3, #1
 8012254:	6144      	str	r4, [r0, #20]
 8012256:	6103      	str	r3, [r0, #16]
 8012258:	bd10      	pop	{r4, pc}
 801225a:	bf00      	nop
 801225c:	0801930b 	.word	0x0801930b
 8012260:	08019348 	.word	0x08019348

08012264 <__multiply>:
 8012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012268:	4691      	mov	r9, r2
 801226a:	690a      	ldr	r2, [r1, #16]
 801226c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012270:	429a      	cmp	r2, r3
 8012272:	bfb8      	it	lt
 8012274:	460b      	movlt	r3, r1
 8012276:	460c      	mov	r4, r1
 8012278:	bfbc      	itt	lt
 801227a:	464c      	movlt	r4, r9
 801227c:	4699      	movlt	r9, r3
 801227e:	6927      	ldr	r7, [r4, #16]
 8012280:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012284:	68a3      	ldr	r3, [r4, #8]
 8012286:	6861      	ldr	r1, [r4, #4]
 8012288:	eb07 060a 	add.w	r6, r7, sl
 801228c:	42b3      	cmp	r3, r6
 801228e:	b085      	sub	sp, #20
 8012290:	bfb8      	it	lt
 8012292:	3101      	addlt	r1, #1
 8012294:	f7ff feda 	bl	801204c <_Balloc>
 8012298:	b930      	cbnz	r0, 80122a8 <__multiply+0x44>
 801229a:	4602      	mov	r2, r0
 801229c:	4b44      	ldr	r3, [pc, #272]	; (80123b0 <__multiply+0x14c>)
 801229e:	4845      	ldr	r0, [pc, #276]	; (80123b4 <__multiply+0x150>)
 80122a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80122a4:	f7fe f948 	bl	8010538 <__assert_func>
 80122a8:	f100 0514 	add.w	r5, r0, #20
 80122ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80122b0:	462b      	mov	r3, r5
 80122b2:	2200      	movs	r2, #0
 80122b4:	4543      	cmp	r3, r8
 80122b6:	d321      	bcc.n	80122fc <__multiply+0x98>
 80122b8:	f104 0314 	add.w	r3, r4, #20
 80122bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80122c0:	f109 0314 	add.w	r3, r9, #20
 80122c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80122c8:	9202      	str	r2, [sp, #8]
 80122ca:	1b3a      	subs	r2, r7, r4
 80122cc:	3a15      	subs	r2, #21
 80122ce:	f022 0203 	bic.w	r2, r2, #3
 80122d2:	3204      	adds	r2, #4
 80122d4:	f104 0115 	add.w	r1, r4, #21
 80122d8:	428f      	cmp	r7, r1
 80122da:	bf38      	it	cc
 80122dc:	2204      	movcc	r2, #4
 80122de:	9201      	str	r2, [sp, #4]
 80122e0:	9a02      	ldr	r2, [sp, #8]
 80122e2:	9303      	str	r3, [sp, #12]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d80c      	bhi.n	8012302 <__multiply+0x9e>
 80122e8:	2e00      	cmp	r6, #0
 80122ea:	dd03      	ble.n	80122f4 <__multiply+0x90>
 80122ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d05b      	beq.n	80123ac <__multiply+0x148>
 80122f4:	6106      	str	r6, [r0, #16]
 80122f6:	b005      	add	sp, #20
 80122f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fc:	f843 2b04 	str.w	r2, [r3], #4
 8012300:	e7d8      	b.n	80122b4 <__multiply+0x50>
 8012302:	f8b3 a000 	ldrh.w	sl, [r3]
 8012306:	f1ba 0f00 	cmp.w	sl, #0
 801230a:	d024      	beq.n	8012356 <__multiply+0xf2>
 801230c:	f104 0e14 	add.w	lr, r4, #20
 8012310:	46a9      	mov	r9, r5
 8012312:	f04f 0c00 	mov.w	ip, #0
 8012316:	f85e 2b04 	ldr.w	r2, [lr], #4
 801231a:	f8d9 1000 	ldr.w	r1, [r9]
 801231e:	fa1f fb82 	uxth.w	fp, r2
 8012322:	b289      	uxth	r1, r1
 8012324:	fb0a 110b 	mla	r1, sl, fp, r1
 8012328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801232c:	f8d9 2000 	ldr.w	r2, [r9]
 8012330:	4461      	add	r1, ip
 8012332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012336:	fb0a c20b 	mla	r2, sl, fp, ip
 801233a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801233e:	b289      	uxth	r1, r1
 8012340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012344:	4577      	cmp	r7, lr
 8012346:	f849 1b04 	str.w	r1, [r9], #4
 801234a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801234e:	d8e2      	bhi.n	8012316 <__multiply+0xb2>
 8012350:	9a01      	ldr	r2, [sp, #4]
 8012352:	f845 c002 	str.w	ip, [r5, r2]
 8012356:	9a03      	ldr	r2, [sp, #12]
 8012358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801235c:	3304      	adds	r3, #4
 801235e:	f1b9 0f00 	cmp.w	r9, #0
 8012362:	d021      	beq.n	80123a8 <__multiply+0x144>
 8012364:	6829      	ldr	r1, [r5, #0]
 8012366:	f104 0c14 	add.w	ip, r4, #20
 801236a:	46ae      	mov	lr, r5
 801236c:	f04f 0a00 	mov.w	sl, #0
 8012370:	f8bc b000 	ldrh.w	fp, [ip]
 8012374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012378:	fb09 220b 	mla	r2, r9, fp, r2
 801237c:	4452      	add	r2, sl
 801237e:	b289      	uxth	r1, r1
 8012380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012384:	f84e 1b04 	str.w	r1, [lr], #4
 8012388:	f85c 1b04 	ldr.w	r1, [ip], #4
 801238c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012390:	f8be 1000 	ldrh.w	r1, [lr]
 8012394:	fb09 110a 	mla	r1, r9, sl, r1
 8012398:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801239c:	4567      	cmp	r7, ip
 801239e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80123a2:	d8e5      	bhi.n	8012370 <__multiply+0x10c>
 80123a4:	9a01      	ldr	r2, [sp, #4]
 80123a6:	50a9      	str	r1, [r5, r2]
 80123a8:	3504      	adds	r5, #4
 80123aa:	e799      	b.n	80122e0 <__multiply+0x7c>
 80123ac:	3e01      	subs	r6, #1
 80123ae:	e79b      	b.n	80122e8 <__multiply+0x84>
 80123b0:	0801930b 	.word	0x0801930b
 80123b4:	08019348 	.word	0x08019348

080123b8 <__pow5mult>:
 80123b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123bc:	4615      	mov	r5, r2
 80123be:	f012 0203 	ands.w	r2, r2, #3
 80123c2:	4606      	mov	r6, r0
 80123c4:	460f      	mov	r7, r1
 80123c6:	d007      	beq.n	80123d8 <__pow5mult+0x20>
 80123c8:	4c25      	ldr	r4, [pc, #148]	; (8012460 <__pow5mult+0xa8>)
 80123ca:	3a01      	subs	r2, #1
 80123cc:	2300      	movs	r3, #0
 80123ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80123d2:	f7ff fe9d 	bl	8012110 <__multadd>
 80123d6:	4607      	mov	r7, r0
 80123d8:	10ad      	asrs	r5, r5, #2
 80123da:	d03d      	beq.n	8012458 <__pow5mult+0xa0>
 80123dc:	69f4      	ldr	r4, [r6, #28]
 80123de:	b97c      	cbnz	r4, 8012400 <__pow5mult+0x48>
 80123e0:	2010      	movs	r0, #16
 80123e2:	f7fd fb05 	bl	800f9f0 <malloc>
 80123e6:	4602      	mov	r2, r0
 80123e8:	61f0      	str	r0, [r6, #28]
 80123ea:	b928      	cbnz	r0, 80123f8 <__pow5mult+0x40>
 80123ec:	4b1d      	ldr	r3, [pc, #116]	; (8012464 <__pow5mult+0xac>)
 80123ee:	481e      	ldr	r0, [pc, #120]	; (8012468 <__pow5mult+0xb0>)
 80123f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80123f4:	f7fe f8a0 	bl	8010538 <__assert_func>
 80123f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80123fc:	6004      	str	r4, [r0, #0]
 80123fe:	60c4      	str	r4, [r0, #12]
 8012400:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012408:	b94c      	cbnz	r4, 801241e <__pow5mult+0x66>
 801240a:	f240 2171 	movw	r1, #625	; 0x271
 801240e:	4630      	mov	r0, r6
 8012410:	f7ff ff12 	bl	8012238 <__i2b>
 8012414:	2300      	movs	r3, #0
 8012416:	f8c8 0008 	str.w	r0, [r8, #8]
 801241a:	4604      	mov	r4, r0
 801241c:	6003      	str	r3, [r0, #0]
 801241e:	f04f 0900 	mov.w	r9, #0
 8012422:	07eb      	lsls	r3, r5, #31
 8012424:	d50a      	bpl.n	801243c <__pow5mult+0x84>
 8012426:	4639      	mov	r1, r7
 8012428:	4622      	mov	r2, r4
 801242a:	4630      	mov	r0, r6
 801242c:	f7ff ff1a 	bl	8012264 <__multiply>
 8012430:	4639      	mov	r1, r7
 8012432:	4680      	mov	r8, r0
 8012434:	4630      	mov	r0, r6
 8012436:	f7ff fe49 	bl	80120cc <_Bfree>
 801243a:	4647      	mov	r7, r8
 801243c:	106d      	asrs	r5, r5, #1
 801243e:	d00b      	beq.n	8012458 <__pow5mult+0xa0>
 8012440:	6820      	ldr	r0, [r4, #0]
 8012442:	b938      	cbnz	r0, 8012454 <__pow5mult+0x9c>
 8012444:	4622      	mov	r2, r4
 8012446:	4621      	mov	r1, r4
 8012448:	4630      	mov	r0, r6
 801244a:	f7ff ff0b 	bl	8012264 <__multiply>
 801244e:	6020      	str	r0, [r4, #0]
 8012450:	f8c0 9000 	str.w	r9, [r0]
 8012454:	4604      	mov	r4, r0
 8012456:	e7e4      	b.n	8012422 <__pow5mult+0x6a>
 8012458:	4638      	mov	r0, r7
 801245a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801245e:	bf00      	nop
 8012460:	08019498 	.word	0x08019498
 8012464:	0801929c 	.word	0x0801929c
 8012468:	08019348 	.word	0x08019348

0801246c <__lshift>:
 801246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012470:	460c      	mov	r4, r1
 8012472:	6849      	ldr	r1, [r1, #4]
 8012474:	6923      	ldr	r3, [r4, #16]
 8012476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801247a:	68a3      	ldr	r3, [r4, #8]
 801247c:	4607      	mov	r7, r0
 801247e:	4691      	mov	r9, r2
 8012480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012484:	f108 0601 	add.w	r6, r8, #1
 8012488:	42b3      	cmp	r3, r6
 801248a:	db0b      	blt.n	80124a4 <__lshift+0x38>
 801248c:	4638      	mov	r0, r7
 801248e:	f7ff fddd 	bl	801204c <_Balloc>
 8012492:	4605      	mov	r5, r0
 8012494:	b948      	cbnz	r0, 80124aa <__lshift+0x3e>
 8012496:	4602      	mov	r2, r0
 8012498:	4b28      	ldr	r3, [pc, #160]	; (801253c <__lshift+0xd0>)
 801249a:	4829      	ldr	r0, [pc, #164]	; (8012540 <__lshift+0xd4>)
 801249c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80124a0:	f7fe f84a 	bl	8010538 <__assert_func>
 80124a4:	3101      	adds	r1, #1
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	e7ee      	b.n	8012488 <__lshift+0x1c>
 80124aa:	2300      	movs	r3, #0
 80124ac:	f100 0114 	add.w	r1, r0, #20
 80124b0:	f100 0210 	add.w	r2, r0, #16
 80124b4:	4618      	mov	r0, r3
 80124b6:	4553      	cmp	r3, sl
 80124b8:	db33      	blt.n	8012522 <__lshift+0xb6>
 80124ba:	6920      	ldr	r0, [r4, #16]
 80124bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80124c0:	f104 0314 	add.w	r3, r4, #20
 80124c4:	f019 091f 	ands.w	r9, r9, #31
 80124c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80124cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80124d0:	d02b      	beq.n	801252a <__lshift+0xbe>
 80124d2:	f1c9 0e20 	rsb	lr, r9, #32
 80124d6:	468a      	mov	sl, r1
 80124d8:	2200      	movs	r2, #0
 80124da:	6818      	ldr	r0, [r3, #0]
 80124dc:	fa00 f009 	lsl.w	r0, r0, r9
 80124e0:	4310      	orrs	r0, r2
 80124e2:	f84a 0b04 	str.w	r0, [sl], #4
 80124e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80124ea:	459c      	cmp	ip, r3
 80124ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80124f0:	d8f3      	bhi.n	80124da <__lshift+0x6e>
 80124f2:	ebac 0304 	sub.w	r3, ip, r4
 80124f6:	3b15      	subs	r3, #21
 80124f8:	f023 0303 	bic.w	r3, r3, #3
 80124fc:	3304      	adds	r3, #4
 80124fe:	f104 0015 	add.w	r0, r4, #21
 8012502:	4584      	cmp	ip, r0
 8012504:	bf38      	it	cc
 8012506:	2304      	movcc	r3, #4
 8012508:	50ca      	str	r2, [r1, r3]
 801250a:	b10a      	cbz	r2, 8012510 <__lshift+0xa4>
 801250c:	f108 0602 	add.w	r6, r8, #2
 8012510:	3e01      	subs	r6, #1
 8012512:	4638      	mov	r0, r7
 8012514:	612e      	str	r6, [r5, #16]
 8012516:	4621      	mov	r1, r4
 8012518:	f7ff fdd8 	bl	80120cc <_Bfree>
 801251c:	4628      	mov	r0, r5
 801251e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012522:	f842 0f04 	str.w	r0, [r2, #4]!
 8012526:	3301      	adds	r3, #1
 8012528:	e7c5      	b.n	80124b6 <__lshift+0x4a>
 801252a:	3904      	subs	r1, #4
 801252c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012530:	f841 2f04 	str.w	r2, [r1, #4]!
 8012534:	459c      	cmp	ip, r3
 8012536:	d8f9      	bhi.n	801252c <__lshift+0xc0>
 8012538:	e7ea      	b.n	8012510 <__lshift+0xa4>
 801253a:	bf00      	nop
 801253c:	0801930b 	.word	0x0801930b
 8012540:	08019348 	.word	0x08019348

08012544 <__mcmp>:
 8012544:	b530      	push	{r4, r5, lr}
 8012546:	6902      	ldr	r2, [r0, #16]
 8012548:	690c      	ldr	r4, [r1, #16]
 801254a:	1b12      	subs	r2, r2, r4
 801254c:	d10e      	bne.n	801256c <__mcmp+0x28>
 801254e:	f100 0314 	add.w	r3, r0, #20
 8012552:	3114      	adds	r1, #20
 8012554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801255c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012564:	42a5      	cmp	r5, r4
 8012566:	d003      	beq.n	8012570 <__mcmp+0x2c>
 8012568:	d305      	bcc.n	8012576 <__mcmp+0x32>
 801256a:	2201      	movs	r2, #1
 801256c:	4610      	mov	r0, r2
 801256e:	bd30      	pop	{r4, r5, pc}
 8012570:	4283      	cmp	r3, r0
 8012572:	d3f3      	bcc.n	801255c <__mcmp+0x18>
 8012574:	e7fa      	b.n	801256c <__mcmp+0x28>
 8012576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801257a:	e7f7      	b.n	801256c <__mcmp+0x28>

0801257c <__mdiff>:
 801257c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012580:	460c      	mov	r4, r1
 8012582:	4606      	mov	r6, r0
 8012584:	4611      	mov	r1, r2
 8012586:	4620      	mov	r0, r4
 8012588:	4690      	mov	r8, r2
 801258a:	f7ff ffdb 	bl	8012544 <__mcmp>
 801258e:	1e05      	subs	r5, r0, #0
 8012590:	d110      	bne.n	80125b4 <__mdiff+0x38>
 8012592:	4629      	mov	r1, r5
 8012594:	4630      	mov	r0, r6
 8012596:	f7ff fd59 	bl	801204c <_Balloc>
 801259a:	b930      	cbnz	r0, 80125aa <__mdiff+0x2e>
 801259c:	4b3a      	ldr	r3, [pc, #232]	; (8012688 <__mdiff+0x10c>)
 801259e:	4602      	mov	r2, r0
 80125a0:	f240 2137 	movw	r1, #567	; 0x237
 80125a4:	4839      	ldr	r0, [pc, #228]	; (801268c <__mdiff+0x110>)
 80125a6:	f7fd ffc7 	bl	8010538 <__assert_func>
 80125aa:	2301      	movs	r3, #1
 80125ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80125b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b4:	bfa4      	itt	ge
 80125b6:	4643      	movge	r3, r8
 80125b8:	46a0      	movge	r8, r4
 80125ba:	4630      	mov	r0, r6
 80125bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80125c0:	bfa6      	itte	ge
 80125c2:	461c      	movge	r4, r3
 80125c4:	2500      	movge	r5, #0
 80125c6:	2501      	movlt	r5, #1
 80125c8:	f7ff fd40 	bl	801204c <_Balloc>
 80125cc:	b920      	cbnz	r0, 80125d8 <__mdiff+0x5c>
 80125ce:	4b2e      	ldr	r3, [pc, #184]	; (8012688 <__mdiff+0x10c>)
 80125d0:	4602      	mov	r2, r0
 80125d2:	f240 2145 	movw	r1, #581	; 0x245
 80125d6:	e7e5      	b.n	80125a4 <__mdiff+0x28>
 80125d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80125dc:	6926      	ldr	r6, [r4, #16]
 80125de:	60c5      	str	r5, [r0, #12]
 80125e0:	f104 0914 	add.w	r9, r4, #20
 80125e4:	f108 0514 	add.w	r5, r8, #20
 80125e8:	f100 0e14 	add.w	lr, r0, #20
 80125ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80125f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80125f4:	f108 0210 	add.w	r2, r8, #16
 80125f8:	46f2      	mov	sl, lr
 80125fa:	2100      	movs	r1, #0
 80125fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012604:	fa11 f88b 	uxtah	r8, r1, fp
 8012608:	b299      	uxth	r1, r3
 801260a:	0c1b      	lsrs	r3, r3, #16
 801260c:	eba8 0801 	sub.w	r8, r8, r1
 8012610:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012614:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012618:	fa1f f888 	uxth.w	r8, r8
 801261c:	1419      	asrs	r1, r3, #16
 801261e:	454e      	cmp	r6, r9
 8012620:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012624:	f84a 3b04 	str.w	r3, [sl], #4
 8012628:	d8e8      	bhi.n	80125fc <__mdiff+0x80>
 801262a:	1b33      	subs	r3, r6, r4
 801262c:	3b15      	subs	r3, #21
 801262e:	f023 0303 	bic.w	r3, r3, #3
 8012632:	3304      	adds	r3, #4
 8012634:	3415      	adds	r4, #21
 8012636:	42a6      	cmp	r6, r4
 8012638:	bf38      	it	cc
 801263a:	2304      	movcc	r3, #4
 801263c:	441d      	add	r5, r3
 801263e:	4473      	add	r3, lr
 8012640:	469e      	mov	lr, r3
 8012642:	462e      	mov	r6, r5
 8012644:	4566      	cmp	r6, ip
 8012646:	d30e      	bcc.n	8012666 <__mdiff+0xea>
 8012648:	f10c 0203 	add.w	r2, ip, #3
 801264c:	1b52      	subs	r2, r2, r5
 801264e:	f022 0203 	bic.w	r2, r2, #3
 8012652:	3d03      	subs	r5, #3
 8012654:	45ac      	cmp	ip, r5
 8012656:	bf38      	it	cc
 8012658:	2200      	movcc	r2, #0
 801265a:	4413      	add	r3, r2
 801265c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012660:	b17a      	cbz	r2, 8012682 <__mdiff+0x106>
 8012662:	6107      	str	r7, [r0, #16]
 8012664:	e7a4      	b.n	80125b0 <__mdiff+0x34>
 8012666:	f856 8b04 	ldr.w	r8, [r6], #4
 801266a:	fa11 f288 	uxtah	r2, r1, r8
 801266e:	1414      	asrs	r4, r2, #16
 8012670:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012674:	b292      	uxth	r2, r2
 8012676:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801267a:	f84e 2b04 	str.w	r2, [lr], #4
 801267e:	1421      	asrs	r1, r4, #16
 8012680:	e7e0      	b.n	8012644 <__mdiff+0xc8>
 8012682:	3f01      	subs	r7, #1
 8012684:	e7ea      	b.n	801265c <__mdiff+0xe0>
 8012686:	bf00      	nop
 8012688:	0801930b 	.word	0x0801930b
 801268c:	08019348 	.word	0x08019348

08012690 <__d2b>:
 8012690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012694:	460f      	mov	r7, r1
 8012696:	2101      	movs	r1, #1
 8012698:	ec59 8b10 	vmov	r8, r9, d0
 801269c:	4616      	mov	r6, r2
 801269e:	f7ff fcd5 	bl	801204c <_Balloc>
 80126a2:	4604      	mov	r4, r0
 80126a4:	b930      	cbnz	r0, 80126b4 <__d2b+0x24>
 80126a6:	4602      	mov	r2, r0
 80126a8:	4b24      	ldr	r3, [pc, #144]	; (801273c <__d2b+0xac>)
 80126aa:	4825      	ldr	r0, [pc, #148]	; (8012740 <__d2b+0xb0>)
 80126ac:	f240 310f 	movw	r1, #783	; 0x30f
 80126b0:	f7fd ff42 	bl	8010538 <__assert_func>
 80126b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80126b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126bc:	bb2d      	cbnz	r5, 801270a <__d2b+0x7a>
 80126be:	9301      	str	r3, [sp, #4]
 80126c0:	f1b8 0300 	subs.w	r3, r8, #0
 80126c4:	d026      	beq.n	8012714 <__d2b+0x84>
 80126c6:	4668      	mov	r0, sp
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	f7ff fd87 	bl	80121dc <__lo0bits>
 80126ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80126d2:	b1e8      	cbz	r0, 8012710 <__d2b+0x80>
 80126d4:	f1c0 0320 	rsb	r3, r0, #32
 80126d8:	fa02 f303 	lsl.w	r3, r2, r3
 80126dc:	430b      	orrs	r3, r1
 80126de:	40c2      	lsrs	r2, r0
 80126e0:	6163      	str	r3, [r4, #20]
 80126e2:	9201      	str	r2, [sp, #4]
 80126e4:	9b01      	ldr	r3, [sp, #4]
 80126e6:	61a3      	str	r3, [r4, #24]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	bf14      	ite	ne
 80126ec:	2202      	movne	r2, #2
 80126ee:	2201      	moveq	r2, #1
 80126f0:	6122      	str	r2, [r4, #16]
 80126f2:	b1bd      	cbz	r5, 8012724 <__d2b+0x94>
 80126f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80126f8:	4405      	add	r5, r0
 80126fa:	603d      	str	r5, [r7, #0]
 80126fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012700:	6030      	str	r0, [r6, #0]
 8012702:	4620      	mov	r0, r4
 8012704:	b003      	add	sp, #12
 8012706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801270a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801270e:	e7d6      	b.n	80126be <__d2b+0x2e>
 8012710:	6161      	str	r1, [r4, #20]
 8012712:	e7e7      	b.n	80126e4 <__d2b+0x54>
 8012714:	a801      	add	r0, sp, #4
 8012716:	f7ff fd61 	bl	80121dc <__lo0bits>
 801271a:	9b01      	ldr	r3, [sp, #4]
 801271c:	6163      	str	r3, [r4, #20]
 801271e:	3020      	adds	r0, #32
 8012720:	2201      	movs	r2, #1
 8012722:	e7e5      	b.n	80126f0 <__d2b+0x60>
 8012724:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801272c:	6038      	str	r0, [r7, #0]
 801272e:	6918      	ldr	r0, [r3, #16]
 8012730:	f7ff fd34 	bl	801219c <__hi0bits>
 8012734:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012738:	e7e2      	b.n	8012700 <__d2b+0x70>
 801273a:	bf00      	nop
 801273c:	0801930b 	.word	0x0801930b
 8012740:	08019348 	.word	0x08019348

08012744 <fiprintf>:
 8012744:	b40e      	push	{r1, r2, r3}
 8012746:	b503      	push	{r0, r1, lr}
 8012748:	4601      	mov	r1, r0
 801274a:	ab03      	add	r3, sp, #12
 801274c:	4805      	ldr	r0, [pc, #20]	; (8012764 <fiprintf+0x20>)
 801274e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012752:	6800      	ldr	r0, [r0, #0]
 8012754:	9301      	str	r3, [sp, #4]
 8012756:	f7ff f929 	bl	80119ac <_vfiprintf_r>
 801275a:	b002      	add	sp, #8
 801275c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012760:	b003      	add	sp, #12
 8012762:	4770      	bx	lr
 8012764:	200000cc 	.word	0x200000cc

08012768 <__submore>:
 8012768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801276c:	460c      	mov	r4, r1
 801276e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012774:	4299      	cmp	r1, r3
 8012776:	d11d      	bne.n	80127b4 <__submore+0x4c>
 8012778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801277c:	f7fd f968 	bl	800fa50 <_malloc_r>
 8012780:	b918      	cbnz	r0, 801278a <__submore+0x22>
 8012782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801278a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801278e:	63a3      	str	r3, [r4, #56]	; 0x38
 8012790:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012794:	6360      	str	r0, [r4, #52]	; 0x34
 8012796:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801279a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801279e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80127a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80127a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80127aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80127ae:	6020      	str	r0, [r4, #0]
 80127b0:	2000      	movs	r0, #0
 80127b2:	e7e8      	b.n	8012786 <__submore+0x1e>
 80127b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80127b6:	0077      	lsls	r7, r6, #1
 80127b8:	463a      	mov	r2, r7
 80127ba:	f000 f80f 	bl	80127dc <_realloc_r>
 80127be:	4605      	mov	r5, r0
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d0de      	beq.n	8012782 <__submore+0x1a>
 80127c4:	eb00 0806 	add.w	r8, r0, r6
 80127c8:	4601      	mov	r1, r0
 80127ca:	4632      	mov	r2, r6
 80127cc:	4640      	mov	r0, r8
 80127ce:	f7fd fe9c 	bl	801050a <memcpy>
 80127d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80127d6:	f8c4 8000 	str.w	r8, [r4]
 80127da:	e7e9      	b.n	80127b0 <__submore+0x48>

080127dc <_realloc_r>:
 80127dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e0:	4680      	mov	r8, r0
 80127e2:	4614      	mov	r4, r2
 80127e4:	460e      	mov	r6, r1
 80127e6:	b921      	cbnz	r1, 80127f2 <_realloc_r+0x16>
 80127e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127ec:	4611      	mov	r1, r2
 80127ee:	f7fd b92f 	b.w	800fa50 <_malloc_r>
 80127f2:	b92a      	cbnz	r2, 8012800 <_realloc_r+0x24>
 80127f4:	f7fe fd3a 	bl	801126c <_free_r>
 80127f8:	4625      	mov	r5, r4
 80127fa:	4628      	mov	r0, r5
 80127fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012800:	f000 f9f3 	bl	8012bea <_malloc_usable_size_r>
 8012804:	4284      	cmp	r4, r0
 8012806:	4607      	mov	r7, r0
 8012808:	d802      	bhi.n	8012810 <_realloc_r+0x34>
 801280a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801280e:	d812      	bhi.n	8012836 <_realloc_r+0x5a>
 8012810:	4621      	mov	r1, r4
 8012812:	4640      	mov	r0, r8
 8012814:	f7fd f91c 	bl	800fa50 <_malloc_r>
 8012818:	4605      	mov	r5, r0
 801281a:	2800      	cmp	r0, #0
 801281c:	d0ed      	beq.n	80127fa <_realloc_r+0x1e>
 801281e:	42bc      	cmp	r4, r7
 8012820:	4622      	mov	r2, r4
 8012822:	4631      	mov	r1, r6
 8012824:	bf28      	it	cs
 8012826:	463a      	movcs	r2, r7
 8012828:	f7fd fe6f 	bl	801050a <memcpy>
 801282c:	4631      	mov	r1, r6
 801282e:	4640      	mov	r0, r8
 8012830:	f7fe fd1c 	bl	801126c <_free_r>
 8012834:	e7e1      	b.n	80127fa <_realloc_r+0x1e>
 8012836:	4635      	mov	r5, r6
 8012838:	e7df      	b.n	80127fa <_realloc_r+0x1e>
	...

0801283c <_strtoul_l.constprop.0>:
 801283c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012840:	4f36      	ldr	r7, [pc, #216]	; (801291c <_strtoul_l.constprop.0+0xe0>)
 8012842:	4686      	mov	lr, r0
 8012844:	460d      	mov	r5, r1
 8012846:	4628      	mov	r0, r5
 8012848:	f815 4b01 	ldrb.w	r4, [r5], #1
 801284c:	5d3e      	ldrb	r6, [r7, r4]
 801284e:	f016 0608 	ands.w	r6, r6, #8
 8012852:	d1f8      	bne.n	8012846 <_strtoul_l.constprop.0+0xa>
 8012854:	2c2d      	cmp	r4, #45	; 0x2d
 8012856:	d130      	bne.n	80128ba <_strtoul_l.constprop.0+0x7e>
 8012858:	782c      	ldrb	r4, [r5, #0]
 801285a:	2601      	movs	r6, #1
 801285c:	1c85      	adds	r5, r0, #2
 801285e:	2b00      	cmp	r3, #0
 8012860:	d057      	beq.n	8012912 <_strtoul_l.constprop.0+0xd6>
 8012862:	2b10      	cmp	r3, #16
 8012864:	d109      	bne.n	801287a <_strtoul_l.constprop.0+0x3e>
 8012866:	2c30      	cmp	r4, #48	; 0x30
 8012868:	d107      	bne.n	801287a <_strtoul_l.constprop.0+0x3e>
 801286a:	7828      	ldrb	r0, [r5, #0]
 801286c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012870:	2858      	cmp	r0, #88	; 0x58
 8012872:	d149      	bne.n	8012908 <_strtoul_l.constprop.0+0xcc>
 8012874:	786c      	ldrb	r4, [r5, #1]
 8012876:	2310      	movs	r3, #16
 8012878:	3502      	adds	r5, #2
 801287a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801287e:	2700      	movs	r7, #0
 8012880:	fbb8 f8f3 	udiv	r8, r8, r3
 8012884:	fb03 f908 	mul.w	r9, r3, r8
 8012888:	ea6f 0909 	mvn.w	r9, r9
 801288c:	4638      	mov	r0, r7
 801288e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012892:	f1bc 0f09 	cmp.w	ip, #9
 8012896:	d815      	bhi.n	80128c4 <_strtoul_l.constprop.0+0x88>
 8012898:	4664      	mov	r4, ip
 801289a:	42a3      	cmp	r3, r4
 801289c:	dd23      	ble.n	80128e6 <_strtoul_l.constprop.0+0xaa>
 801289e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80128a2:	d007      	beq.n	80128b4 <_strtoul_l.constprop.0+0x78>
 80128a4:	4580      	cmp	r8, r0
 80128a6:	d31b      	bcc.n	80128e0 <_strtoul_l.constprop.0+0xa4>
 80128a8:	d101      	bne.n	80128ae <_strtoul_l.constprop.0+0x72>
 80128aa:	45a1      	cmp	r9, r4
 80128ac:	db18      	blt.n	80128e0 <_strtoul_l.constprop.0+0xa4>
 80128ae:	fb00 4003 	mla	r0, r0, r3, r4
 80128b2:	2701      	movs	r7, #1
 80128b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128b8:	e7e9      	b.n	801288e <_strtoul_l.constprop.0+0x52>
 80128ba:	2c2b      	cmp	r4, #43	; 0x2b
 80128bc:	bf04      	itt	eq
 80128be:	782c      	ldrbeq	r4, [r5, #0]
 80128c0:	1c85      	addeq	r5, r0, #2
 80128c2:	e7cc      	b.n	801285e <_strtoul_l.constprop.0+0x22>
 80128c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80128c8:	f1bc 0f19 	cmp.w	ip, #25
 80128cc:	d801      	bhi.n	80128d2 <_strtoul_l.constprop.0+0x96>
 80128ce:	3c37      	subs	r4, #55	; 0x37
 80128d0:	e7e3      	b.n	801289a <_strtoul_l.constprop.0+0x5e>
 80128d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80128d6:	f1bc 0f19 	cmp.w	ip, #25
 80128da:	d804      	bhi.n	80128e6 <_strtoul_l.constprop.0+0xaa>
 80128dc:	3c57      	subs	r4, #87	; 0x57
 80128de:	e7dc      	b.n	801289a <_strtoul_l.constprop.0+0x5e>
 80128e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80128e4:	e7e6      	b.n	80128b4 <_strtoul_l.constprop.0+0x78>
 80128e6:	1c7b      	adds	r3, r7, #1
 80128e8:	d106      	bne.n	80128f8 <_strtoul_l.constprop.0+0xbc>
 80128ea:	2322      	movs	r3, #34	; 0x22
 80128ec:	f8ce 3000 	str.w	r3, [lr]
 80128f0:	4638      	mov	r0, r7
 80128f2:	b932      	cbnz	r2, 8012902 <_strtoul_l.constprop.0+0xc6>
 80128f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128f8:	b106      	cbz	r6, 80128fc <_strtoul_l.constprop.0+0xc0>
 80128fa:	4240      	negs	r0, r0
 80128fc:	2a00      	cmp	r2, #0
 80128fe:	d0f9      	beq.n	80128f4 <_strtoul_l.constprop.0+0xb8>
 8012900:	b107      	cbz	r7, 8012904 <_strtoul_l.constprop.0+0xc8>
 8012902:	1e69      	subs	r1, r5, #1
 8012904:	6011      	str	r1, [r2, #0]
 8012906:	e7f5      	b.n	80128f4 <_strtoul_l.constprop.0+0xb8>
 8012908:	2430      	movs	r4, #48	; 0x30
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1b5      	bne.n	801287a <_strtoul_l.constprop.0+0x3e>
 801290e:	2308      	movs	r3, #8
 8012910:	e7b3      	b.n	801287a <_strtoul_l.constprop.0+0x3e>
 8012912:	2c30      	cmp	r4, #48	; 0x30
 8012914:	d0a9      	beq.n	801286a <_strtoul_l.constprop.0+0x2e>
 8012916:	230a      	movs	r3, #10
 8012918:	e7af      	b.n	801287a <_strtoul_l.constprop.0+0x3e>
 801291a:	bf00      	nop
 801291c:	08019153 	.word	0x08019153

08012920 <_strtoul_r>:
 8012920:	f7ff bf8c 	b.w	801283c <_strtoul_l.constprop.0>

08012924 <__swbuf_r>:
 8012924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012926:	460e      	mov	r6, r1
 8012928:	4614      	mov	r4, r2
 801292a:	4605      	mov	r5, r0
 801292c:	b118      	cbz	r0, 8012936 <__swbuf_r+0x12>
 801292e:	6a03      	ldr	r3, [r0, #32]
 8012930:	b90b      	cbnz	r3, 8012936 <__swbuf_r+0x12>
 8012932:	f7fd fbfb 	bl	801012c <__sinit>
 8012936:	69a3      	ldr	r3, [r4, #24]
 8012938:	60a3      	str	r3, [r4, #8]
 801293a:	89a3      	ldrh	r3, [r4, #12]
 801293c:	071a      	lsls	r2, r3, #28
 801293e:	d525      	bpl.n	801298c <__swbuf_r+0x68>
 8012940:	6923      	ldr	r3, [r4, #16]
 8012942:	b31b      	cbz	r3, 801298c <__swbuf_r+0x68>
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	6922      	ldr	r2, [r4, #16]
 8012948:	1a98      	subs	r0, r3, r2
 801294a:	6963      	ldr	r3, [r4, #20]
 801294c:	b2f6      	uxtb	r6, r6
 801294e:	4283      	cmp	r3, r0
 8012950:	4637      	mov	r7, r6
 8012952:	dc04      	bgt.n	801295e <__swbuf_r+0x3a>
 8012954:	4621      	mov	r1, r4
 8012956:	4628      	mov	r0, r5
 8012958:	f7ff fb50 	bl	8011ffc <_fflush_r>
 801295c:	b9e0      	cbnz	r0, 8012998 <__swbuf_r+0x74>
 801295e:	68a3      	ldr	r3, [r4, #8]
 8012960:	3b01      	subs	r3, #1
 8012962:	60a3      	str	r3, [r4, #8]
 8012964:	6823      	ldr	r3, [r4, #0]
 8012966:	1c5a      	adds	r2, r3, #1
 8012968:	6022      	str	r2, [r4, #0]
 801296a:	701e      	strb	r6, [r3, #0]
 801296c:	6962      	ldr	r2, [r4, #20]
 801296e:	1c43      	adds	r3, r0, #1
 8012970:	429a      	cmp	r2, r3
 8012972:	d004      	beq.n	801297e <__swbuf_r+0x5a>
 8012974:	89a3      	ldrh	r3, [r4, #12]
 8012976:	07db      	lsls	r3, r3, #31
 8012978:	d506      	bpl.n	8012988 <__swbuf_r+0x64>
 801297a:	2e0a      	cmp	r6, #10
 801297c:	d104      	bne.n	8012988 <__swbuf_r+0x64>
 801297e:	4621      	mov	r1, r4
 8012980:	4628      	mov	r0, r5
 8012982:	f7ff fb3b 	bl	8011ffc <_fflush_r>
 8012986:	b938      	cbnz	r0, 8012998 <__swbuf_r+0x74>
 8012988:	4638      	mov	r0, r7
 801298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801298c:	4621      	mov	r1, r4
 801298e:	4628      	mov	r0, r5
 8012990:	f000 f806 	bl	80129a0 <__swsetup_r>
 8012994:	2800      	cmp	r0, #0
 8012996:	d0d5      	beq.n	8012944 <__swbuf_r+0x20>
 8012998:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801299c:	e7f4      	b.n	8012988 <__swbuf_r+0x64>
	...

080129a0 <__swsetup_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4b2a      	ldr	r3, [pc, #168]	; (8012a4c <__swsetup_r+0xac>)
 80129a4:	4605      	mov	r5, r0
 80129a6:	6818      	ldr	r0, [r3, #0]
 80129a8:	460c      	mov	r4, r1
 80129aa:	b118      	cbz	r0, 80129b4 <__swsetup_r+0x14>
 80129ac:	6a03      	ldr	r3, [r0, #32]
 80129ae:	b90b      	cbnz	r3, 80129b4 <__swsetup_r+0x14>
 80129b0:	f7fd fbbc 	bl	801012c <__sinit>
 80129b4:	89a3      	ldrh	r3, [r4, #12]
 80129b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129ba:	0718      	lsls	r0, r3, #28
 80129bc:	d422      	bmi.n	8012a04 <__swsetup_r+0x64>
 80129be:	06d9      	lsls	r1, r3, #27
 80129c0:	d407      	bmi.n	80129d2 <__swsetup_r+0x32>
 80129c2:	2309      	movs	r3, #9
 80129c4:	602b      	str	r3, [r5, #0]
 80129c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80129ca:	81a3      	strh	r3, [r4, #12]
 80129cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129d0:	e034      	b.n	8012a3c <__swsetup_r+0x9c>
 80129d2:	0758      	lsls	r0, r3, #29
 80129d4:	d512      	bpl.n	80129fc <__swsetup_r+0x5c>
 80129d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129d8:	b141      	cbz	r1, 80129ec <__swsetup_r+0x4c>
 80129da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129de:	4299      	cmp	r1, r3
 80129e0:	d002      	beq.n	80129e8 <__swsetup_r+0x48>
 80129e2:	4628      	mov	r0, r5
 80129e4:	f7fe fc42 	bl	801126c <_free_r>
 80129e8:	2300      	movs	r3, #0
 80129ea:	6363      	str	r3, [r4, #52]	; 0x34
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80129f2:	81a3      	strh	r3, [r4, #12]
 80129f4:	2300      	movs	r3, #0
 80129f6:	6063      	str	r3, [r4, #4]
 80129f8:	6923      	ldr	r3, [r4, #16]
 80129fa:	6023      	str	r3, [r4, #0]
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	f043 0308 	orr.w	r3, r3, #8
 8012a02:	81a3      	strh	r3, [r4, #12]
 8012a04:	6923      	ldr	r3, [r4, #16]
 8012a06:	b94b      	cbnz	r3, 8012a1c <__swsetup_r+0x7c>
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a12:	d003      	beq.n	8012a1c <__swsetup_r+0x7c>
 8012a14:	4621      	mov	r1, r4
 8012a16:	4628      	mov	r0, r5
 8012a18:	f000 f840 	bl	8012a9c <__smakebuf_r>
 8012a1c:	89a0      	ldrh	r0, [r4, #12]
 8012a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a22:	f010 0301 	ands.w	r3, r0, #1
 8012a26:	d00a      	beq.n	8012a3e <__swsetup_r+0x9e>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	60a3      	str	r3, [r4, #8]
 8012a2c:	6963      	ldr	r3, [r4, #20]
 8012a2e:	425b      	negs	r3, r3
 8012a30:	61a3      	str	r3, [r4, #24]
 8012a32:	6923      	ldr	r3, [r4, #16]
 8012a34:	b943      	cbnz	r3, 8012a48 <__swsetup_r+0xa8>
 8012a36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012a3a:	d1c4      	bne.n	80129c6 <__swsetup_r+0x26>
 8012a3c:	bd38      	pop	{r3, r4, r5, pc}
 8012a3e:	0781      	lsls	r1, r0, #30
 8012a40:	bf58      	it	pl
 8012a42:	6963      	ldrpl	r3, [r4, #20]
 8012a44:	60a3      	str	r3, [r4, #8]
 8012a46:	e7f4      	b.n	8012a32 <__swsetup_r+0x92>
 8012a48:	2000      	movs	r0, #0
 8012a4a:	e7f7      	b.n	8012a3c <__swsetup_r+0x9c>
 8012a4c:	200000cc 	.word	0x200000cc

08012a50 <__swhatbuf_r>:
 8012a50:	b570      	push	{r4, r5, r6, lr}
 8012a52:	460c      	mov	r4, r1
 8012a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a58:	2900      	cmp	r1, #0
 8012a5a:	b096      	sub	sp, #88	; 0x58
 8012a5c:	4615      	mov	r5, r2
 8012a5e:	461e      	mov	r6, r3
 8012a60:	da0d      	bge.n	8012a7e <__swhatbuf_r+0x2e>
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012a68:	f04f 0100 	mov.w	r1, #0
 8012a6c:	bf0c      	ite	eq
 8012a6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012a72:	2340      	movne	r3, #64	; 0x40
 8012a74:	2000      	movs	r0, #0
 8012a76:	6031      	str	r1, [r6, #0]
 8012a78:	602b      	str	r3, [r5, #0]
 8012a7a:	b016      	add	sp, #88	; 0x58
 8012a7c:	bd70      	pop	{r4, r5, r6, pc}
 8012a7e:	466a      	mov	r2, sp
 8012a80:	f000 f862 	bl	8012b48 <_fstat_r>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	dbec      	blt.n	8012a62 <__swhatbuf_r+0x12>
 8012a88:	9901      	ldr	r1, [sp, #4]
 8012a8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012a8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012a92:	4259      	negs	r1, r3
 8012a94:	4159      	adcs	r1, r3
 8012a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a9a:	e7eb      	b.n	8012a74 <__swhatbuf_r+0x24>

08012a9c <__smakebuf_r>:
 8012a9c:	898b      	ldrh	r3, [r1, #12]
 8012a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012aa0:	079d      	lsls	r5, r3, #30
 8012aa2:	4606      	mov	r6, r0
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	d507      	bpl.n	8012ab8 <__smakebuf_r+0x1c>
 8012aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	6123      	str	r3, [r4, #16]
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	6163      	str	r3, [r4, #20]
 8012ab4:	b002      	add	sp, #8
 8012ab6:	bd70      	pop	{r4, r5, r6, pc}
 8012ab8:	ab01      	add	r3, sp, #4
 8012aba:	466a      	mov	r2, sp
 8012abc:	f7ff ffc8 	bl	8012a50 <__swhatbuf_r>
 8012ac0:	9900      	ldr	r1, [sp, #0]
 8012ac2:	4605      	mov	r5, r0
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f7fc ffc3 	bl	800fa50 <_malloc_r>
 8012aca:	b948      	cbnz	r0, 8012ae0 <__smakebuf_r+0x44>
 8012acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ad0:	059a      	lsls	r2, r3, #22
 8012ad2:	d4ef      	bmi.n	8012ab4 <__smakebuf_r+0x18>
 8012ad4:	f023 0303 	bic.w	r3, r3, #3
 8012ad8:	f043 0302 	orr.w	r3, r3, #2
 8012adc:	81a3      	strh	r3, [r4, #12]
 8012ade:	e7e3      	b.n	8012aa8 <__smakebuf_r+0xc>
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	6020      	str	r0, [r4, #0]
 8012ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ae8:	81a3      	strh	r3, [r4, #12]
 8012aea:	9b00      	ldr	r3, [sp, #0]
 8012aec:	6163      	str	r3, [r4, #20]
 8012aee:	9b01      	ldr	r3, [sp, #4]
 8012af0:	6120      	str	r0, [r4, #16]
 8012af2:	b15b      	cbz	r3, 8012b0c <__smakebuf_r+0x70>
 8012af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012af8:	4630      	mov	r0, r6
 8012afa:	f000 f837 	bl	8012b6c <_isatty_r>
 8012afe:	b128      	cbz	r0, 8012b0c <__smakebuf_r+0x70>
 8012b00:	89a3      	ldrh	r3, [r4, #12]
 8012b02:	f023 0303 	bic.w	r3, r3, #3
 8012b06:	f043 0301 	orr.w	r3, r3, #1
 8012b0a:	81a3      	strh	r3, [r4, #12]
 8012b0c:	89a3      	ldrh	r3, [r4, #12]
 8012b0e:	431d      	orrs	r5, r3
 8012b10:	81a5      	strh	r5, [r4, #12]
 8012b12:	e7cf      	b.n	8012ab4 <__smakebuf_r+0x18>

08012b14 <memmove>:
 8012b14:	4288      	cmp	r0, r1
 8012b16:	b510      	push	{r4, lr}
 8012b18:	eb01 0402 	add.w	r4, r1, r2
 8012b1c:	d902      	bls.n	8012b24 <memmove+0x10>
 8012b1e:	4284      	cmp	r4, r0
 8012b20:	4623      	mov	r3, r4
 8012b22:	d807      	bhi.n	8012b34 <memmove+0x20>
 8012b24:	1e43      	subs	r3, r0, #1
 8012b26:	42a1      	cmp	r1, r4
 8012b28:	d008      	beq.n	8012b3c <memmove+0x28>
 8012b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b32:	e7f8      	b.n	8012b26 <memmove+0x12>
 8012b34:	4402      	add	r2, r0
 8012b36:	4601      	mov	r1, r0
 8012b38:	428a      	cmp	r2, r1
 8012b3a:	d100      	bne.n	8012b3e <memmove+0x2a>
 8012b3c:	bd10      	pop	{r4, pc}
 8012b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b46:	e7f7      	b.n	8012b38 <memmove+0x24>

08012b48 <_fstat_r>:
 8012b48:	b538      	push	{r3, r4, r5, lr}
 8012b4a:	4d07      	ldr	r5, [pc, #28]	; (8012b68 <_fstat_r+0x20>)
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	4604      	mov	r4, r0
 8012b50:	4608      	mov	r0, r1
 8012b52:	4611      	mov	r1, r2
 8012b54:	602b      	str	r3, [r5, #0]
 8012b56:	f7f4 f832 	bl	8006bbe <_fstat>
 8012b5a:	1c43      	adds	r3, r0, #1
 8012b5c:	d102      	bne.n	8012b64 <_fstat_r+0x1c>
 8012b5e:	682b      	ldr	r3, [r5, #0]
 8012b60:	b103      	cbz	r3, 8012b64 <_fstat_r+0x1c>
 8012b62:	6023      	str	r3, [r4, #0]
 8012b64:	bd38      	pop	{r3, r4, r5, pc}
 8012b66:	bf00      	nop
 8012b68:	2000a068 	.word	0x2000a068

08012b6c <_isatty_r>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4d06      	ldr	r5, [pc, #24]	; (8012b88 <_isatty_r+0x1c>)
 8012b70:	2300      	movs	r3, #0
 8012b72:	4604      	mov	r4, r0
 8012b74:	4608      	mov	r0, r1
 8012b76:	602b      	str	r3, [r5, #0]
 8012b78:	f7f4 f831 	bl	8006bde <_isatty>
 8012b7c:	1c43      	adds	r3, r0, #1
 8012b7e:	d102      	bne.n	8012b86 <_isatty_r+0x1a>
 8012b80:	682b      	ldr	r3, [r5, #0]
 8012b82:	b103      	cbz	r3, 8012b86 <_isatty_r+0x1a>
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	bd38      	pop	{r3, r4, r5, pc}
 8012b88:	2000a068 	.word	0x2000a068

08012b8c <abort>:
 8012b8c:	b508      	push	{r3, lr}
 8012b8e:	2006      	movs	r0, #6
 8012b90:	f000 f868 	bl	8012c64 <raise>
 8012b94:	2001      	movs	r0, #1
 8012b96:	f7f3 ffc3 	bl	8006b20 <_exit>

08012b9a <_calloc_r>:
 8012b9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b9c:	fba1 2402 	umull	r2, r4, r1, r2
 8012ba0:	b94c      	cbnz	r4, 8012bb6 <_calloc_r+0x1c>
 8012ba2:	4611      	mov	r1, r2
 8012ba4:	9201      	str	r2, [sp, #4]
 8012ba6:	f7fc ff53 	bl	800fa50 <_malloc_r>
 8012baa:	9a01      	ldr	r2, [sp, #4]
 8012bac:	4605      	mov	r5, r0
 8012bae:	b930      	cbnz	r0, 8012bbe <_calloc_r+0x24>
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	b003      	add	sp, #12
 8012bb4:	bd30      	pop	{r4, r5, pc}
 8012bb6:	220c      	movs	r2, #12
 8012bb8:	6002      	str	r2, [r0, #0]
 8012bba:	2500      	movs	r5, #0
 8012bbc:	e7f8      	b.n	8012bb0 <_calloc_r+0x16>
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	f7fd fc14 	bl	80103ec <memset>
 8012bc4:	e7f4      	b.n	8012bb0 <_calloc_r+0x16>

08012bc6 <__ascii_mbtowc>:
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	b901      	cbnz	r1, 8012bcc <__ascii_mbtowc+0x6>
 8012bca:	a901      	add	r1, sp, #4
 8012bcc:	b142      	cbz	r2, 8012be0 <__ascii_mbtowc+0x1a>
 8012bce:	b14b      	cbz	r3, 8012be4 <__ascii_mbtowc+0x1e>
 8012bd0:	7813      	ldrb	r3, [r2, #0]
 8012bd2:	600b      	str	r3, [r1, #0]
 8012bd4:	7812      	ldrb	r2, [r2, #0]
 8012bd6:	1e10      	subs	r0, r2, #0
 8012bd8:	bf18      	it	ne
 8012bda:	2001      	movne	r0, #1
 8012bdc:	b002      	add	sp, #8
 8012bde:	4770      	bx	lr
 8012be0:	4610      	mov	r0, r2
 8012be2:	e7fb      	b.n	8012bdc <__ascii_mbtowc+0x16>
 8012be4:	f06f 0001 	mvn.w	r0, #1
 8012be8:	e7f8      	b.n	8012bdc <__ascii_mbtowc+0x16>

08012bea <_malloc_usable_size_r>:
 8012bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bee:	1f18      	subs	r0, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	bfbc      	itt	lt
 8012bf4:	580b      	ldrlt	r3, [r1, r0]
 8012bf6:	18c0      	addlt	r0, r0, r3
 8012bf8:	4770      	bx	lr

08012bfa <__ascii_wctomb>:
 8012bfa:	b149      	cbz	r1, 8012c10 <__ascii_wctomb+0x16>
 8012bfc:	2aff      	cmp	r2, #255	; 0xff
 8012bfe:	bf85      	ittet	hi
 8012c00:	238a      	movhi	r3, #138	; 0x8a
 8012c02:	6003      	strhi	r3, [r0, #0]
 8012c04:	700a      	strbls	r2, [r1, #0]
 8012c06:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012c0a:	bf98      	it	ls
 8012c0c:	2001      	movls	r0, #1
 8012c0e:	4770      	bx	lr
 8012c10:	4608      	mov	r0, r1
 8012c12:	4770      	bx	lr

08012c14 <_raise_r>:
 8012c14:	291f      	cmp	r1, #31
 8012c16:	b538      	push	{r3, r4, r5, lr}
 8012c18:	4604      	mov	r4, r0
 8012c1a:	460d      	mov	r5, r1
 8012c1c:	d904      	bls.n	8012c28 <_raise_r+0x14>
 8012c1e:	2316      	movs	r3, #22
 8012c20:	6003      	str	r3, [r0, #0]
 8012c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012c2a:	b112      	cbz	r2, 8012c32 <_raise_r+0x1e>
 8012c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c30:	b94b      	cbnz	r3, 8012c46 <_raise_r+0x32>
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 f830 	bl	8012c98 <_getpid_r>
 8012c38:	462a      	mov	r2, r5
 8012c3a:	4601      	mov	r1, r0
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c42:	f000 b817 	b.w	8012c74 <_kill_r>
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d00a      	beq.n	8012c60 <_raise_r+0x4c>
 8012c4a:	1c59      	adds	r1, r3, #1
 8012c4c:	d103      	bne.n	8012c56 <_raise_r+0x42>
 8012c4e:	2316      	movs	r3, #22
 8012c50:	6003      	str	r3, [r0, #0]
 8012c52:	2001      	movs	r0, #1
 8012c54:	e7e7      	b.n	8012c26 <_raise_r+0x12>
 8012c56:	2400      	movs	r4, #0
 8012c58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	4798      	blx	r3
 8012c60:	2000      	movs	r0, #0
 8012c62:	e7e0      	b.n	8012c26 <_raise_r+0x12>

08012c64 <raise>:
 8012c64:	4b02      	ldr	r3, [pc, #8]	; (8012c70 <raise+0xc>)
 8012c66:	4601      	mov	r1, r0
 8012c68:	6818      	ldr	r0, [r3, #0]
 8012c6a:	f7ff bfd3 	b.w	8012c14 <_raise_r>
 8012c6e:	bf00      	nop
 8012c70:	200000cc 	.word	0x200000cc

08012c74 <_kill_r>:
 8012c74:	b538      	push	{r3, r4, r5, lr}
 8012c76:	4d07      	ldr	r5, [pc, #28]	; (8012c94 <_kill_r+0x20>)
 8012c78:	2300      	movs	r3, #0
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	4608      	mov	r0, r1
 8012c7e:	4611      	mov	r1, r2
 8012c80:	602b      	str	r3, [r5, #0]
 8012c82:	f7f3 ff3d 	bl	8006b00 <_kill>
 8012c86:	1c43      	adds	r3, r0, #1
 8012c88:	d102      	bne.n	8012c90 <_kill_r+0x1c>
 8012c8a:	682b      	ldr	r3, [r5, #0]
 8012c8c:	b103      	cbz	r3, 8012c90 <_kill_r+0x1c>
 8012c8e:	6023      	str	r3, [r4, #0]
 8012c90:	bd38      	pop	{r3, r4, r5, pc}
 8012c92:	bf00      	nop
 8012c94:	2000a068 	.word	0x2000a068

08012c98 <_getpid_r>:
 8012c98:	f7f3 bf2a 	b.w	8006af0 <_getpid>

08012c9c <acos>:
 8012c9c:	b538      	push	{r3, r4, r5, lr}
 8012c9e:	ed2d 8b02 	vpush	{d8}
 8012ca2:	ec55 4b10 	vmov	r4, r5, d0
 8012ca6:	f000 f82f 	bl	8012d08 <__ieee754_acos>
 8012caa:	4622      	mov	r2, r4
 8012cac:	462b      	mov	r3, r5
 8012cae:	4620      	mov	r0, r4
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	eeb0 8a40 	vmov.f32	s16, s0
 8012cb6:	eef0 8a60 	vmov.f32	s17, s1
 8012cba:	f7ed ff57 	bl	8000b6c <__aeabi_dcmpun>
 8012cbe:	b9a8      	cbnz	r0, 8012cec <acos+0x50>
 8012cc0:	ec45 4b10 	vmov	d0, r4, r5
 8012cc4:	f000 faac 	bl	8013220 <fabs>
 8012cc8:	4b0c      	ldr	r3, [pc, #48]	; (8012cfc <acos+0x60>)
 8012cca:	ec51 0b10 	vmov	r0, r1, d0
 8012cce:	2200      	movs	r2, #0
 8012cd0:	f7ed ff42 	bl	8000b58 <__aeabi_dcmpgt>
 8012cd4:	b150      	cbz	r0, 8012cec <acos+0x50>
 8012cd6:	f7fd fbeb 	bl	80104b0 <__errno>
 8012cda:	ecbd 8b02 	vpop	{d8}
 8012cde:	2321      	movs	r3, #33	; 0x21
 8012ce0:	6003      	str	r3, [r0, #0]
 8012ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ce6:	4806      	ldr	r0, [pc, #24]	; (8012d00 <acos+0x64>)
 8012ce8:	f000 bc02 	b.w	80134f0 <nan>
 8012cec:	eeb0 0a48 	vmov.f32	s0, s16
 8012cf0:	eef0 0a68 	vmov.f32	s1, s17
 8012cf4:	ecbd 8b02 	vpop	{d8}
 8012cf8:	bd38      	pop	{r3, r4, r5, pc}
 8012cfa:	bf00      	nop
 8012cfc:	3ff00000 	.word	0x3ff00000
 8012d00:	0801928e 	.word	0x0801928e
 8012d04:	00000000 	.word	0x00000000

08012d08 <__ieee754_acos>:
 8012d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	ec55 4b10 	vmov	r4, r5, d0
 8012d10:	49b7      	ldr	r1, [pc, #732]	; (8012ff0 <__ieee754_acos+0x2e8>)
 8012d12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012d16:	428b      	cmp	r3, r1
 8012d18:	dd1b      	ble.n	8012d52 <__ieee754_acos+0x4a>
 8012d1a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8012d1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012d22:	4323      	orrs	r3, r4
 8012d24:	d106      	bne.n	8012d34 <__ieee754_acos+0x2c>
 8012d26:	2d00      	cmp	r5, #0
 8012d28:	f300 8211 	bgt.w	801314e <__ieee754_acos+0x446>
 8012d2c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8012f88 <__ieee754_acos+0x280>
 8012d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d34:	ee10 2a10 	vmov	r2, s0
 8012d38:	462b      	mov	r3, r5
 8012d3a:	ee10 0a10 	vmov	r0, s0
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ed fac2 	bl	80002c8 <__aeabi_dsub>
 8012d44:	4602      	mov	r2, r0
 8012d46:	460b      	mov	r3, r1
 8012d48:	f7ed fda0 	bl	800088c <__aeabi_ddiv>
 8012d4c:	ec41 0b10 	vmov	d0, r0, r1
 8012d50:	e7ee      	b.n	8012d30 <__ieee754_acos+0x28>
 8012d52:	49a8      	ldr	r1, [pc, #672]	; (8012ff4 <__ieee754_acos+0x2ec>)
 8012d54:	428b      	cmp	r3, r1
 8012d56:	f300 8087 	bgt.w	8012e68 <__ieee754_acos+0x160>
 8012d5a:	4aa7      	ldr	r2, [pc, #668]	; (8012ff8 <__ieee754_acos+0x2f0>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	f340 81f9 	ble.w	8013154 <__ieee754_acos+0x44c>
 8012d62:	ee10 2a10 	vmov	r2, s0
 8012d66:	ee10 0a10 	vmov	r0, s0
 8012d6a:	462b      	mov	r3, r5
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	f7ed fc63 	bl	8000638 <__aeabi_dmul>
 8012d72:	a387      	add	r3, pc, #540	; (adr r3, 8012f90 <__ieee754_acos+0x288>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	4606      	mov	r6, r0
 8012d7a:	460f      	mov	r7, r1
 8012d7c:	f7ed fc5c 	bl	8000638 <__aeabi_dmul>
 8012d80:	a385      	add	r3, pc, #532	; (adr r3, 8012f98 <__ieee754_acos+0x290>)
 8012d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d86:	f7ed faa1 	bl	80002cc <__adddf3>
 8012d8a:	4632      	mov	r2, r6
 8012d8c:	463b      	mov	r3, r7
 8012d8e:	f7ed fc53 	bl	8000638 <__aeabi_dmul>
 8012d92:	a383      	add	r3, pc, #524	; (adr r3, 8012fa0 <__ieee754_acos+0x298>)
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	f7ed fa96 	bl	80002c8 <__aeabi_dsub>
 8012d9c:	4632      	mov	r2, r6
 8012d9e:	463b      	mov	r3, r7
 8012da0:	f7ed fc4a 	bl	8000638 <__aeabi_dmul>
 8012da4:	a380      	add	r3, pc, #512	; (adr r3, 8012fa8 <__ieee754_acos+0x2a0>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	f7ed fa8f 	bl	80002cc <__adddf3>
 8012dae:	4632      	mov	r2, r6
 8012db0:	463b      	mov	r3, r7
 8012db2:	f7ed fc41 	bl	8000638 <__aeabi_dmul>
 8012db6:	a37e      	add	r3, pc, #504	; (adr r3, 8012fb0 <__ieee754_acos+0x2a8>)
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	f7ed fa84 	bl	80002c8 <__aeabi_dsub>
 8012dc0:	4632      	mov	r2, r6
 8012dc2:	463b      	mov	r3, r7
 8012dc4:	f7ed fc38 	bl	8000638 <__aeabi_dmul>
 8012dc8:	a37b      	add	r3, pc, #492	; (adr r3, 8012fb8 <__ieee754_acos+0x2b0>)
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	f7ed fa7d 	bl	80002cc <__adddf3>
 8012dd2:	4632      	mov	r2, r6
 8012dd4:	463b      	mov	r3, r7
 8012dd6:	f7ed fc2f 	bl	8000638 <__aeabi_dmul>
 8012dda:	a379      	add	r3, pc, #484	; (adr r3, 8012fc0 <__ieee754_acos+0x2b8>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	4680      	mov	r8, r0
 8012de2:	4689      	mov	r9, r1
 8012de4:	4630      	mov	r0, r6
 8012de6:	4639      	mov	r1, r7
 8012de8:	f7ed fc26 	bl	8000638 <__aeabi_dmul>
 8012dec:	a376      	add	r3, pc, #472	; (adr r3, 8012fc8 <__ieee754_acos+0x2c0>)
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	f7ed fa69 	bl	80002c8 <__aeabi_dsub>
 8012df6:	4632      	mov	r2, r6
 8012df8:	463b      	mov	r3, r7
 8012dfa:	f7ed fc1d 	bl	8000638 <__aeabi_dmul>
 8012dfe:	a374      	add	r3, pc, #464	; (adr r3, 8012fd0 <__ieee754_acos+0x2c8>)
 8012e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e04:	f7ed fa62 	bl	80002cc <__adddf3>
 8012e08:	4632      	mov	r2, r6
 8012e0a:	463b      	mov	r3, r7
 8012e0c:	f7ed fc14 	bl	8000638 <__aeabi_dmul>
 8012e10:	a371      	add	r3, pc, #452	; (adr r3, 8012fd8 <__ieee754_acos+0x2d0>)
 8012e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e16:	f7ed fa57 	bl	80002c8 <__aeabi_dsub>
 8012e1a:	4632      	mov	r2, r6
 8012e1c:	463b      	mov	r3, r7
 8012e1e:	f7ed fc0b 	bl	8000638 <__aeabi_dmul>
 8012e22:	4b76      	ldr	r3, [pc, #472]	; (8012ffc <__ieee754_acos+0x2f4>)
 8012e24:	2200      	movs	r2, #0
 8012e26:	f7ed fa51 	bl	80002cc <__adddf3>
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	4640      	mov	r0, r8
 8012e30:	4649      	mov	r1, r9
 8012e32:	f7ed fd2b 	bl	800088c <__aeabi_ddiv>
 8012e36:	4622      	mov	r2, r4
 8012e38:	462b      	mov	r3, r5
 8012e3a:	f7ed fbfd 	bl	8000638 <__aeabi_dmul>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	a167      	add	r1, pc, #412	; (adr r1, 8012fe0 <__ieee754_acos+0x2d8>)
 8012e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e48:	f7ed fa3e 	bl	80002c8 <__aeabi_dsub>
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	460b      	mov	r3, r1
 8012e50:	4620      	mov	r0, r4
 8012e52:	4629      	mov	r1, r5
 8012e54:	f7ed fa38 	bl	80002c8 <__aeabi_dsub>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	460b      	mov	r3, r1
 8012e5c:	a162      	add	r1, pc, #392	; (adr r1, 8012fe8 <__ieee754_acos+0x2e0>)
 8012e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e62:	f7ed fa31 	bl	80002c8 <__aeabi_dsub>
 8012e66:	e771      	b.n	8012d4c <__ieee754_acos+0x44>
 8012e68:	2d00      	cmp	r5, #0
 8012e6a:	f280 80cb 	bge.w	8013004 <__ieee754_acos+0x2fc>
 8012e6e:	ee10 0a10 	vmov	r0, s0
 8012e72:	4b62      	ldr	r3, [pc, #392]	; (8012ffc <__ieee754_acos+0x2f4>)
 8012e74:	2200      	movs	r2, #0
 8012e76:	4629      	mov	r1, r5
 8012e78:	f7ed fa28 	bl	80002cc <__adddf3>
 8012e7c:	4b60      	ldr	r3, [pc, #384]	; (8013000 <__ieee754_acos+0x2f8>)
 8012e7e:	2200      	movs	r2, #0
 8012e80:	f7ed fbda 	bl	8000638 <__aeabi_dmul>
 8012e84:	a342      	add	r3, pc, #264	; (adr r3, 8012f90 <__ieee754_acos+0x288>)
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	460d      	mov	r5, r1
 8012e8e:	f7ed fbd3 	bl	8000638 <__aeabi_dmul>
 8012e92:	a341      	add	r3, pc, #260	; (adr r3, 8012f98 <__ieee754_acos+0x290>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	f7ed fa18 	bl	80002cc <__adddf3>
 8012e9c:	4622      	mov	r2, r4
 8012e9e:	462b      	mov	r3, r5
 8012ea0:	f7ed fbca 	bl	8000638 <__aeabi_dmul>
 8012ea4:	a33e      	add	r3, pc, #248	; (adr r3, 8012fa0 <__ieee754_acos+0x298>)
 8012ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eaa:	f7ed fa0d 	bl	80002c8 <__aeabi_dsub>
 8012eae:	4622      	mov	r2, r4
 8012eb0:	462b      	mov	r3, r5
 8012eb2:	f7ed fbc1 	bl	8000638 <__aeabi_dmul>
 8012eb6:	a33c      	add	r3, pc, #240	; (adr r3, 8012fa8 <__ieee754_acos+0x2a0>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebc:	f7ed fa06 	bl	80002cc <__adddf3>
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	462b      	mov	r3, r5
 8012ec4:	f7ed fbb8 	bl	8000638 <__aeabi_dmul>
 8012ec8:	a339      	add	r3, pc, #228	; (adr r3, 8012fb0 <__ieee754_acos+0x2a8>)
 8012eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ece:	f7ed f9fb 	bl	80002c8 <__aeabi_dsub>
 8012ed2:	4622      	mov	r2, r4
 8012ed4:	462b      	mov	r3, r5
 8012ed6:	f7ed fbaf 	bl	8000638 <__aeabi_dmul>
 8012eda:	a337      	add	r3, pc, #220	; (adr r3, 8012fb8 <__ieee754_acos+0x2b0>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f7ed f9f4 	bl	80002cc <__adddf3>
 8012ee4:	4622      	mov	r2, r4
 8012ee6:	462b      	mov	r3, r5
 8012ee8:	f7ed fba6 	bl	8000638 <__aeabi_dmul>
 8012eec:	ec45 4b10 	vmov	d0, r4, r5
 8012ef0:	4680      	mov	r8, r0
 8012ef2:	4689      	mov	r9, r1
 8012ef4:	f000 f99e 	bl	8013234 <__ieee754_sqrt>
 8012ef8:	a331      	add	r3, pc, #196	; (adr r3, 8012fc0 <__ieee754_acos+0x2b8>)
 8012efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efe:	4620      	mov	r0, r4
 8012f00:	4629      	mov	r1, r5
 8012f02:	ec57 6b10 	vmov	r6, r7, d0
 8012f06:	f7ed fb97 	bl	8000638 <__aeabi_dmul>
 8012f0a:	a32f      	add	r3, pc, #188	; (adr r3, 8012fc8 <__ieee754_acos+0x2c0>)
 8012f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f10:	f7ed f9da 	bl	80002c8 <__aeabi_dsub>
 8012f14:	4622      	mov	r2, r4
 8012f16:	462b      	mov	r3, r5
 8012f18:	f7ed fb8e 	bl	8000638 <__aeabi_dmul>
 8012f1c:	a32c      	add	r3, pc, #176	; (adr r3, 8012fd0 <__ieee754_acos+0x2c8>)
 8012f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f22:	f7ed f9d3 	bl	80002cc <__adddf3>
 8012f26:	4622      	mov	r2, r4
 8012f28:	462b      	mov	r3, r5
 8012f2a:	f7ed fb85 	bl	8000638 <__aeabi_dmul>
 8012f2e:	a32a      	add	r3, pc, #168	; (adr r3, 8012fd8 <__ieee754_acos+0x2d0>)
 8012f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f34:	f7ed f9c8 	bl	80002c8 <__aeabi_dsub>
 8012f38:	4622      	mov	r2, r4
 8012f3a:	462b      	mov	r3, r5
 8012f3c:	f7ed fb7c 	bl	8000638 <__aeabi_dmul>
 8012f40:	4b2e      	ldr	r3, [pc, #184]	; (8012ffc <__ieee754_acos+0x2f4>)
 8012f42:	2200      	movs	r2, #0
 8012f44:	f7ed f9c2 	bl	80002cc <__adddf3>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	4640      	mov	r0, r8
 8012f4e:	4649      	mov	r1, r9
 8012f50:	f7ed fc9c 	bl	800088c <__aeabi_ddiv>
 8012f54:	4632      	mov	r2, r6
 8012f56:	463b      	mov	r3, r7
 8012f58:	f7ed fb6e 	bl	8000638 <__aeabi_dmul>
 8012f5c:	a320      	add	r3, pc, #128	; (adr r3, 8012fe0 <__ieee754_acos+0x2d8>)
 8012f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f62:	f7ed f9b1 	bl	80002c8 <__aeabi_dsub>
 8012f66:	4632      	mov	r2, r6
 8012f68:	463b      	mov	r3, r7
 8012f6a:	f7ed f9af 	bl	80002cc <__adddf3>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	460b      	mov	r3, r1
 8012f72:	f7ed f9ab 	bl	80002cc <__adddf3>
 8012f76:	4602      	mov	r2, r0
 8012f78:	460b      	mov	r3, r1
 8012f7a:	a103      	add	r1, pc, #12	; (adr r1, 8012f88 <__ieee754_acos+0x280>)
 8012f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f80:	e76f      	b.n	8012e62 <__ieee754_acos+0x15a>
 8012f82:	bf00      	nop
 8012f84:	f3af 8000 	nop.w
 8012f88:	54442d18 	.word	0x54442d18
 8012f8c:	400921fb 	.word	0x400921fb
 8012f90:	0dfdf709 	.word	0x0dfdf709
 8012f94:	3f023de1 	.word	0x3f023de1
 8012f98:	7501b288 	.word	0x7501b288
 8012f9c:	3f49efe0 	.word	0x3f49efe0
 8012fa0:	b5688f3b 	.word	0xb5688f3b
 8012fa4:	3fa48228 	.word	0x3fa48228
 8012fa8:	0e884455 	.word	0x0e884455
 8012fac:	3fc9c155 	.word	0x3fc9c155
 8012fb0:	03eb6f7d 	.word	0x03eb6f7d
 8012fb4:	3fd4d612 	.word	0x3fd4d612
 8012fb8:	55555555 	.word	0x55555555
 8012fbc:	3fc55555 	.word	0x3fc55555
 8012fc0:	b12e9282 	.word	0xb12e9282
 8012fc4:	3fb3b8c5 	.word	0x3fb3b8c5
 8012fc8:	1b8d0159 	.word	0x1b8d0159
 8012fcc:	3fe6066c 	.word	0x3fe6066c
 8012fd0:	9c598ac8 	.word	0x9c598ac8
 8012fd4:	40002ae5 	.word	0x40002ae5
 8012fd8:	1c8a2d4b 	.word	0x1c8a2d4b
 8012fdc:	40033a27 	.word	0x40033a27
 8012fe0:	33145c07 	.word	0x33145c07
 8012fe4:	3c91a626 	.word	0x3c91a626
 8012fe8:	54442d18 	.word	0x54442d18
 8012fec:	3ff921fb 	.word	0x3ff921fb
 8012ff0:	3fefffff 	.word	0x3fefffff
 8012ff4:	3fdfffff 	.word	0x3fdfffff
 8012ff8:	3c600000 	.word	0x3c600000
 8012ffc:	3ff00000 	.word	0x3ff00000
 8013000:	3fe00000 	.word	0x3fe00000
 8013004:	ee10 2a10 	vmov	r2, s0
 8013008:	462b      	mov	r3, r5
 801300a:	496d      	ldr	r1, [pc, #436]	; (80131c0 <__ieee754_acos+0x4b8>)
 801300c:	2000      	movs	r0, #0
 801300e:	f7ed f95b 	bl	80002c8 <__aeabi_dsub>
 8013012:	4b6c      	ldr	r3, [pc, #432]	; (80131c4 <__ieee754_acos+0x4bc>)
 8013014:	2200      	movs	r2, #0
 8013016:	f7ed fb0f 	bl	8000638 <__aeabi_dmul>
 801301a:	4604      	mov	r4, r0
 801301c:	460d      	mov	r5, r1
 801301e:	ec45 4b10 	vmov	d0, r4, r5
 8013022:	f000 f907 	bl	8013234 <__ieee754_sqrt>
 8013026:	a34e      	add	r3, pc, #312	; (adr r3, 8013160 <__ieee754_acos+0x458>)
 8013028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302c:	4620      	mov	r0, r4
 801302e:	4629      	mov	r1, r5
 8013030:	ec59 8b10 	vmov	r8, r9, d0
 8013034:	f7ed fb00 	bl	8000638 <__aeabi_dmul>
 8013038:	a34b      	add	r3, pc, #300	; (adr r3, 8013168 <__ieee754_acos+0x460>)
 801303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303e:	f7ed f945 	bl	80002cc <__adddf3>
 8013042:	4622      	mov	r2, r4
 8013044:	462b      	mov	r3, r5
 8013046:	f7ed faf7 	bl	8000638 <__aeabi_dmul>
 801304a:	a349      	add	r3, pc, #292	; (adr r3, 8013170 <__ieee754_acos+0x468>)
 801304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013050:	f7ed f93a 	bl	80002c8 <__aeabi_dsub>
 8013054:	4622      	mov	r2, r4
 8013056:	462b      	mov	r3, r5
 8013058:	f7ed faee 	bl	8000638 <__aeabi_dmul>
 801305c:	a346      	add	r3, pc, #280	; (adr r3, 8013178 <__ieee754_acos+0x470>)
 801305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013062:	f7ed f933 	bl	80002cc <__adddf3>
 8013066:	4622      	mov	r2, r4
 8013068:	462b      	mov	r3, r5
 801306a:	f7ed fae5 	bl	8000638 <__aeabi_dmul>
 801306e:	a344      	add	r3, pc, #272	; (adr r3, 8013180 <__ieee754_acos+0x478>)
 8013070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013074:	f7ed f928 	bl	80002c8 <__aeabi_dsub>
 8013078:	4622      	mov	r2, r4
 801307a:	462b      	mov	r3, r5
 801307c:	f7ed fadc 	bl	8000638 <__aeabi_dmul>
 8013080:	a341      	add	r3, pc, #260	; (adr r3, 8013188 <__ieee754_acos+0x480>)
 8013082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013086:	f7ed f921 	bl	80002cc <__adddf3>
 801308a:	4622      	mov	r2, r4
 801308c:	462b      	mov	r3, r5
 801308e:	f7ed fad3 	bl	8000638 <__aeabi_dmul>
 8013092:	a33f      	add	r3, pc, #252	; (adr r3, 8013190 <__ieee754_acos+0x488>)
 8013094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013098:	4682      	mov	sl, r0
 801309a:	468b      	mov	fp, r1
 801309c:	4620      	mov	r0, r4
 801309e:	4629      	mov	r1, r5
 80130a0:	f7ed faca 	bl	8000638 <__aeabi_dmul>
 80130a4:	a33c      	add	r3, pc, #240	; (adr r3, 8013198 <__ieee754_acos+0x490>)
 80130a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130aa:	f7ed f90d 	bl	80002c8 <__aeabi_dsub>
 80130ae:	4622      	mov	r2, r4
 80130b0:	462b      	mov	r3, r5
 80130b2:	f7ed fac1 	bl	8000638 <__aeabi_dmul>
 80130b6:	a33a      	add	r3, pc, #232	; (adr r3, 80131a0 <__ieee754_acos+0x498>)
 80130b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130bc:	f7ed f906 	bl	80002cc <__adddf3>
 80130c0:	4622      	mov	r2, r4
 80130c2:	462b      	mov	r3, r5
 80130c4:	f7ed fab8 	bl	8000638 <__aeabi_dmul>
 80130c8:	a337      	add	r3, pc, #220	; (adr r3, 80131a8 <__ieee754_acos+0x4a0>)
 80130ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ce:	f7ed f8fb 	bl	80002c8 <__aeabi_dsub>
 80130d2:	4622      	mov	r2, r4
 80130d4:	462b      	mov	r3, r5
 80130d6:	f7ed faaf 	bl	8000638 <__aeabi_dmul>
 80130da:	4b39      	ldr	r3, [pc, #228]	; (80131c0 <__ieee754_acos+0x4b8>)
 80130dc:	2200      	movs	r2, #0
 80130de:	f7ed f8f5 	bl	80002cc <__adddf3>
 80130e2:	4602      	mov	r2, r0
 80130e4:	460b      	mov	r3, r1
 80130e6:	4650      	mov	r0, sl
 80130e8:	4659      	mov	r1, fp
 80130ea:	f7ed fbcf 	bl	800088c <__aeabi_ddiv>
 80130ee:	4642      	mov	r2, r8
 80130f0:	464b      	mov	r3, r9
 80130f2:	f7ed faa1 	bl	8000638 <__aeabi_dmul>
 80130f6:	2600      	movs	r6, #0
 80130f8:	4682      	mov	sl, r0
 80130fa:	468b      	mov	fp, r1
 80130fc:	4632      	mov	r2, r6
 80130fe:	464b      	mov	r3, r9
 8013100:	4630      	mov	r0, r6
 8013102:	4649      	mov	r1, r9
 8013104:	f7ed fa98 	bl	8000638 <__aeabi_dmul>
 8013108:	4602      	mov	r2, r0
 801310a:	460b      	mov	r3, r1
 801310c:	4620      	mov	r0, r4
 801310e:	4629      	mov	r1, r5
 8013110:	f7ed f8da 	bl	80002c8 <__aeabi_dsub>
 8013114:	4632      	mov	r2, r6
 8013116:	4604      	mov	r4, r0
 8013118:	460d      	mov	r5, r1
 801311a:	464b      	mov	r3, r9
 801311c:	4640      	mov	r0, r8
 801311e:	4649      	mov	r1, r9
 8013120:	f7ed f8d4 	bl	80002cc <__adddf3>
 8013124:	4602      	mov	r2, r0
 8013126:	460b      	mov	r3, r1
 8013128:	4620      	mov	r0, r4
 801312a:	4629      	mov	r1, r5
 801312c:	f7ed fbae 	bl	800088c <__aeabi_ddiv>
 8013130:	4602      	mov	r2, r0
 8013132:	460b      	mov	r3, r1
 8013134:	4650      	mov	r0, sl
 8013136:	4659      	mov	r1, fp
 8013138:	f7ed f8c8 	bl	80002cc <__adddf3>
 801313c:	4632      	mov	r2, r6
 801313e:	464b      	mov	r3, r9
 8013140:	f7ed f8c4 	bl	80002cc <__adddf3>
 8013144:	4602      	mov	r2, r0
 8013146:	460b      	mov	r3, r1
 8013148:	f7ed f8c0 	bl	80002cc <__adddf3>
 801314c:	e5fe      	b.n	8012d4c <__ieee754_acos+0x44>
 801314e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80131b0 <__ieee754_acos+0x4a8>
 8013152:	e5ed      	b.n	8012d30 <__ieee754_acos+0x28>
 8013154:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80131b8 <__ieee754_acos+0x4b0>
 8013158:	e5ea      	b.n	8012d30 <__ieee754_acos+0x28>
 801315a:	bf00      	nop
 801315c:	f3af 8000 	nop.w
 8013160:	0dfdf709 	.word	0x0dfdf709
 8013164:	3f023de1 	.word	0x3f023de1
 8013168:	7501b288 	.word	0x7501b288
 801316c:	3f49efe0 	.word	0x3f49efe0
 8013170:	b5688f3b 	.word	0xb5688f3b
 8013174:	3fa48228 	.word	0x3fa48228
 8013178:	0e884455 	.word	0x0e884455
 801317c:	3fc9c155 	.word	0x3fc9c155
 8013180:	03eb6f7d 	.word	0x03eb6f7d
 8013184:	3fd4d612 	.word	0x3fd4d612
 8013188:	55555555 	.word	0x55555555
 801318c:	3fc55555 	.word	0x3fc55555
 8013190:	b12e9282 	.word	0xb12e9282
 8013194:	3fb3b8c5 	.word	0x3fb3b8c5
 8013198:	1b8d0159 	.word	0x1b8d0159
 801319c:	3fe6066c 	.word	0x3fe6066c
 80131a0:	9c598ac8 	.word	0x9c598ac8
 80131a4:	40002ae5 	.word	0x40002ae5
 80131a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80131ac:	40033a27 	.word	0x40033a27
	...
 80131b8:	54442d18 	.word	0x54442d18
 80131bc:	3ff921fb 	.word	0x3ff921fb
 80131c0:	3ff00000 	.word	0x3ff00000
 80131c4:	3fe00000 	.word	0x3fe00000

080131c8 <sqrt>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	ed2d 8b02 	vpush	{d8}
 80131ce:	ec55 4b10 	vmov	r4, r5, d0
 80131d2:	f000 f82f 	bl	8013234 <__ieee754_sqrt>
 80131d6:	4622      	mov	r2, r4
 80131d8:	462b      	mov	r3, r5
 80131da:	4620      	mov	r0, r4
 80131dc:	4629      	mov	r1, r5
 80131de:	eeb0 8a40 	vmov.f32	s16, s0
 80131e2:	eef0 8a60 	vmov.f32	s17, s1
 80131e6:	f7ed fcc1 	bl	8000b6c <__aeabi_dcmpun>
 80131ea:	b990      	cbnz	r0, 8013212 <sqrt+0x4a>
 80131ec:	2200      	movs	r2, #0
 80131ee:	2300      	movs	r3, #0
 80131f0:	4620      	mov	r0, r4
 80131f2:	4629      	mov	r1, r5
 80131f4:	f7ed fc92 	bl	8000b1c <__aeabi_dcmplt>
 80131f8:	b158      	cbz	r0, 8013212 <sqrt+0x4a>
 80131fa:	f7fd f959 	bl	80104b0 <__errno>
 80131fe:	2321      	movs	r3, #33	; 0x21
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	2200      	movs	r2, #0
 8013204:	2300      	movs	r3, #0
 8013206:	4610      	mov	r0, r2
 8013208:	4619      	mov	r1, r3
 801320a:	f7ed fb3f 	bl	800088c <__aeabi_ddiv>
 801320e:	ec41 0b18 	vmov	d8, r0, r1
 8013212:	eeb0 0a48 	vmov.f32	s0, s16
 8013216:	eef0 0a68 	vmov.f32	s1, s17
 801321a:	ecbd 8b02 	vpop	{d8}
 801321e:	bd38      	pop	{r3, r4, r5, pc}

08013220 <fabs>:
 8013220:	ec51 0b10 	vmov	r0, r1, d0
 8013224:	ee10 2a10 	vmov	r2, s0
 8013228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801322c:	ec43 2b10 	vmov	d0, r2, r3
 8013230:	4770      	bx	lr
	...

08013234 <__ieee754_sqrt>:
 8013234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013238:	ec55 4b10 	vmov	r4, r5, d0
 801323c:	4e67      	ldr	r6, [pc, #412]	; (80133dc <__ieee754_sqrt+0x1a8>)
 801323e:	43ae      	bics	r6, r5
 8013240:	ee10 0a10 	vmov	r0, s0
 8013244:	ee10 2a10 	vmov	r2, s0
 8013248:	4629      	mov	r1, r5
 801324a:	462b      	mov	r3, r5
 801324c:	d10d      	bne.n	801326a <__ieee754_sqrt+0x36>
 801324e:	f7ed f9f3 	bl	8000638 <__aeabi_dmul>
 8013252:	4602      	mov	r2, r0
 8013254:	460b      	mov	r3, r1
 8013256:	4620      	mov	r0, r4
 8013258:	4629      	mov	r1, r5
 801325a:	f7ed f837 	bl	80002cc <__adddf3>
 801325e:	4604      	mov	r4, r0
 8013260:	460d      	mov	r5, r1
 8013262:	ec45 4b10 	vmov	d0, r4, r5
 8013266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326a:	2d00      	cmp	r5, #0
 801326c:	dc0b      	bgt.n	8013286 <__ieee754_sqrt+0x52>
 801326e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013272:	4326      	orrs	r6, r4
 8013274:	d0f5      	beq.n	8013262 <__ieee754_sqrt+0x2e>
 8013276:	b135      	cbz	r5, 8013286 <__ieee754_sqrt+0x52>
 8013278:	f7ed f826 	bl	80002c8 <__aeabi_dsub>
 801327c:	4602      	mov	r2, r0
 801327e:	460b      	mov	r3, r1
 8013280:	f7ed fb04 	bl	800088c <__aeabi_ddiv>
 8013284:	e7eb      	b.n	801325e <__ieee754_sqrt+0x2a>
 8013286:	1509      	asrs	r1, r1, #20
 8013288:	f000 808d 	beq.w	80133a6 <__ieee754_sqrt+0x172>
 801328c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013290:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8013294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013298:	07c9      	lsls	r1, r1, #31
 801329a:	bf5c      	itt	pl
 801329c:	005b      	lslpl	r3, r3, #1
 801329e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80132a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80132a6:	bf58      	it	pl
 80132a8:	0052      	lslpl	r2, r2, #1
 80132aa:	2500      	movs	r5, #0
 80132ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80132b0:	1076      	asrs	r6, r6, #1
 80132b2:	0052      	lsls	r2, r2, #1
 80132b4:	f04f 0e16 	mov.w	lr, #22
 80132b8:	46ac      	mov	ip, r5
 80132ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80132be:	eb0c 0001 	add.w	r0, ip, r1
 80132c2:	4298      	cmp	r0, r3
 80132c4:	bfde      	ittt	le
 80132c6:	1a1b      	suble	r3, r3, r0
 80132c8:	eb00 0c01 	addle.w	ip, r0, r1
 80132cc:	186d      	addle	r5, r5, r1
 80132ce:	005b      	lsls	r3, r3, #1
 80132d0:	f1be 0e01 	subs.w	lr, lr, #1
 80132d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80132d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80132dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80132e0:	d1ed      	bne.n	80132be <__ieee754_sqrt+0x8a>
 80132e2:	4674      	mov	r4, lr
 80132e4:	2720      	movs	r7, #32
 80132e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80132ea:	4563      	cmp	r3, ip
 80132ec:	eb01 000e 	add.w	r0, r1, lr
 80132f0:	dc02      	bgt.n	80132f8 <__ieee754_sqrt+0xc4>
 80132f2:	d113      	bne.n	801331c <__ieee754_sqrt+0xe8>
 80132f4:	4290      	cmp	r0, r2
 80132f6:	d811      	bhi.n	801331c <__ieee754_sqrt+0xe8>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	eb00 0e01 	add.w	lr, r0, r1
 80132fe:	da57      	bge.n	80133b0 <__ieee754_sqrt+0x17c>
 8013300:	f1be 0f00 	cmp.w	lr, #0
 8013304:	db54      	blt.n	80133b0 <__ieee754_sqrt+0x17c>
 8013306:	f10c 0801 	add.w	r8, ip, #1
 801330a:	eba3 030c 	sub.w	r3, r3, ip
 801330e:	4290      	cmp	r0, r2
 8013310:	bf88      	it	hi
 8013312:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8013316:	1a12      	subs	r2, r2, r0
 8013318:	440c      	add	r4, r1
 801331a:	46c4      	mov	ip, r8
 801331c:	005b      	lsls	r3, r3, #1
 801331e:	3f01      	subs	r7, #1
 8013320:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013324:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013328:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801332c:	d1dd      	bne.n	80132ea <__ieee754_sqrt+0xb6>
 801332e:	4313      	orrs	r3, r2
 8013330:	d01b      	beq.n	801336a <__ieee754_sqrt+0x136>
 8013332:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80133e0 <__ieee754_sqrt+0x1ac>
 8013336:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80133e4 <__ieee754_sqrt+0x1b0>
 801333a:	e9da 0100 	ldrd	r0, r1, [sl]
 801333e:	e9db 2300 	ldrd	r2, r3, [fp]
 8013342:	f7ec ffc1 	bl	80002c8 <__aeabi_dsub>
 8013346:	e9da 8900 	ldrd	r8, r9, [sl]
 801334a:	4602      	mov	r2, r0
 801334c:	460b      	mov	r3, r1
 801334e:	4640      	mov	r0, r8
 8013350:	4649      	mov	r1, r9
 8013352:	f7ed fbed 	bl	8000b30 <__aeabi_dcmple>
 8013356:	b140      	cbz	r0, 801336a <__ieee754_sqrt+0x136>
 8013358:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801335c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013360:	e9db 2300 	ldrd	r2, r3, [fp]
 8013364:	d126      	bne.n	80133b4 <__ieee754_sqrt+0x180>
 8013366:	3501      	adds	r5, #1
 8013368:	463c      	mov	r4, r7
 801336a:	106a      	asrs	r2, r5, #1
 801336c:	0863      	lsrs	r3, r4, #1
 801336e:	07e9      	lsls	r1, r5, #31
 8013370:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013374:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013378:	bf48      	it	mi
 801337a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801337e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8013382:	461c      	mov	r4, r3
 8013384:	e76d      	b.n	8013262 <__ieee754_sqrt+0x2e>
 8013386:	0ad3      	lsrs	r3, r2, #11
 8013388:	3815      	subs	r0, #21
 801338a:	0552      	lsls	r2, r2, #21
 801338c:	2b00      	cmp	r3, #0
 801338e:	d0fa      	beq.n	8013386 <__ieee754_sqrt+0x152>
 8013390:	02dc      	lsls	r4, r3, #11
 8013392:	d50a      	bpl.n	80133aa <__ieee754_sqrt+0x176>
 8013394:	f1c1 0420 	rsb	r4, r1, #32
 8013398:	fa22 f404 	lsr.w	r4, r2, r4
 801339c:	1e4d      	subs	r5, r1, #1
 801339e:	408a      	lsls	r2, r1
 80133a0:	4323      	orrs	r3, r4
 80133a2:	1b41      	subs	r1, r0, r5
 80133a4:	e772      	b.n	801328c <__ieee754_sqrt+0x58>
 80133a6:	4608      	mov	r0, r1
 80133a8:	e7f0      	b.n	801338c <__ieee754_sqrt+0x158>
 80133aa:	005b      	lsls	r3, r3, #1
 80133ac:	3101      	adds	r1, #1
 80133ae:	e7ef      	b.n	8013390 <__ieee754_sqrt+0x15c>
 80133b0:	46e0      	mov	r8, ip
 80133b2:	e7aa      	b.n	801330a <__ieee754_sqrt+0xd6>
 80133b4:	f7ec ff8a 	bl	80002cc <__adddf3>
 80133b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80133bc:	4602      	mov	r2, r0
 80133be:	460b      	mov	r3, r1
 80133c0:	4640      	mov	r0, r8
 80133c2:	4649      	mov	r1, r9
 80133c4:	f7ed fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80133c8:	b120      	cbz	r0, 80133d4 <__ieee754_sqrt+0x1a0>
 80133ca:	1ca0      	adds	r0, r4, #2
 80133cc:	bf08      	it	eq
 80133ce:	3501      	addeq	r5, #1
 80133d0:	3402      	adds	r4, #2
 80133d2:	e7ca      	b.n	801336a <__ieee754_sqrt+0x136>
 80133d4:	3401      	adds	r4, #1
 80133d6:	f024 0401 	bic.w	r4, r4, #1
 80133da:	e7c6      	b.n	801336a <__ieee754_sqrt+0x136>
 80133dc:	7ff00000 	.word	0x7ff00000
 80133e0:	20000240 	.word	0x20000240
 80133e4:	20000248 	.word	0x20000248

080133e8 <round>:
 80133e8:	ec53 2b10 	vmov	r2, r3, d0
 80133ec:	b570      	push	{r4, r5, r6, lr}
 80133ee:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80133f2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80133f6:	2813      	cmp	r0, #19
 80133f8:	ee10 5a10 	vmov	r5, s0
 80133fc:	4619      	mov	r1, r3
 80133fe:	dc18      	bgt.n	8013432 <round+0x4a>
 8013400:	2800      	cmp	r0, #0
 8013402:	da09      	bge.n	8013418 <round+0x30>
 8013404:	3001      	adds	r0, #1
 8013406:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801340a:	d103      	bne.n	8013414 <round+0x2c>
 801340c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8013410:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013414:	2300      	movs	r3, #0
 8013416:	e02a      	b.n	801346e <round+0x86>
 8013418:	4c16      	ldr	r4, [pc, #88]	; (8013474 <round+0x8c>)
 801341a:	4104      	asrs	r4, r0
 801341c:	ea03 0604 	and.w	r6, r3, r4
 8013420:	4316      	orrs	r6, r2
 8013422:	d011      	beq.n	8013448 <round+0x60>
 8013424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013428:	4103      	asrs	r3, r0
 801342a:	440b      	add	r3, r1
 801342c:	ea23 0104 	bic.w	r1, r3, r4
 8013430:	e7f0      	b.n	8013414 <round+0x2c>
 8013432:	2833      	cmp	r0, #51	; 0x33
 8013434:	dd0b      	ble.n	801344e <round+0x66>
 8013436:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801343a:	d105      	bne.n	8013448 <round+0x60>
 801343c:	ee10 0a10 	vmov	r0, s0
 8013440:	f7ec ff44 	bl	80002cc <__adddf3>
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	ec43 2b10 	vmov	d0, r2, r3
 801344c:	bd70      	pop	{r4, r5, r6, pc}
 801344e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8013452:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013456:	40f4      	lsrs	r4, r6
 8013458:	4214      	tst	r4, r2
 801345a:	d0f5      	beq.n	8013448 <round+0x60>
 801345c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8013460:	2301      	movs	r3, #1
 8013462:	4083      	lsls	r3, r0
 8013464:	195b      	adds	r3, r3, r5
 8013466:	bf28      	it	cs
 8013468:	3101      	addcs	r1, #1
 801346a:	ea23 0304 	bic.w	r3, r3, r4
 801346e:	461a      	mov	r2, r3
 8013470:	460b      	mov	r3, r1
 8013472:	e7e9      	b.n	8013448 <round+0x60>
 8013474:	000fffff 	.word	0x000fffff

08013478 <trunc>:
 8013478:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 801347c:	ec5c bb10 	vmov	fp, ip, d0
 8013480:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8013484:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8013488:	2913      	cmp	r1, #19
 801348a:	4664      	mov	r4, ip
 801348c:	dc11      	bgt.n	80134b2 <trunc+0x3a>
 801348e:	2900      	cmp	r1, #0
 8013490:	bfa7      	ittee	ge
 8013492:	4b15      	ldrge	r3, [pc, #84]	; (80134e8 <trunc+0x70>)
 8013494:	fa43 f101 	asrge.w	r1, r3, r1
 8013498:	2200      	movlt	r2, #0
 801349a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 801349e:	bfa4      	itt	ge
 80134a0:	2200      	movge	r2, #0
 80134a2:	ea01 030c 	andge.w	r3, r1, ip
 80134a6:	4693      	mov	fp, r2
 80134a8:	469c      	mov	ip, r3
 80134aa:	ec4c bb10 	vmov	d0, fp, ip
 80134ae:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80134b2:	2933      	cmp	r1, #51	; 0x33
 80134b4:	dd0d      	ble.n	80134d2 <trunc+0x5a>
 80134b6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80134ba:	d1f6      	bne.n	80134aa <trunc+0x32>
 80134bc:	4663      	mov	r3, ip
 80134be:	ee10 2a10 	vmov	r2, s0
 80134c2:	ee10 0a10 	vmov	r0, s0
 80134c6:	4621      	mov	r1, r4
 80134c8:	f7ec ff00 	bl	80002cc <__adddf3>
 80134cc:	4683      	mov	fp, r0
 80134ce:	468c      	mov	ip, r1
 80134d0:	e7eb      	b.n	80134aa <trunc+0x32>
 80134d2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80134d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134da:	40c3      	lsrs	r3, r0
 80134dc:	ea2b 0603 	bic.w	r6, fp, r3
 80134e0:	46b3      	mov	fp, r6
 80134e2:	46a4      	mov	ip, r4
 80134e4:	e7e1      	b.n	80134aa <trunc+0x32>
 80134e6:	bf00      	nop
 80134e8:	fff00000 	.word	0xfff00000
 80134ec:	00000000 	.word	0x00000000

080134f0 <nan>:
 80134f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80134f8 <nan+0x8>
 80134f4:	4770      	bx	lr
 80134f6:	bf00      	nop
 80134f8:	00000000 	.word	0x00000000
 80134fc:	7ff80000 	.word	0x7ff80000

08013500 <_init>:
 8013500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013502:	bf00      	nop
 8013504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013506:	bc08      	pop	{r3}
 8013508:	469e      	mov	lr, r3
 801350a:	4770      	bx	lr

0801350c <_fini>:
 801350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801350e:	bf00      	nop
 8013510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013512:	bc08      	pop	{r3}
 8013514:	469e      	mov	lr, r3
 8013516:	4770      	bx	lr
