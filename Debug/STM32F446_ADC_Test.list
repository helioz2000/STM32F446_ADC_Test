
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000215c  0800c018  0800c018  0001c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e174  0800e174  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e174  0800e174  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e17c  0800e17c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e17c  0800e17c  0001e17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e180  0800e180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800e184  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007124  200000a8  0800e22c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200071cc  0800e22c  000271cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159d1  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000356f  00000000  00000000  00035aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00039060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f51  00000000  00000000  0003a438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267b3  00000000  00000000  0003b389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1aa  00000000  00000000  00061b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d0c  00000000  00000000  0007bce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061c8  00000000  00000000  0015e9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00164bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c000 	.word	0x0800c000

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800c000 	.word	0x0800c000

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <calc_process_dma_buffer+0x24>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d002      	beq.n	8000f08 <calc_process_dma_buffer+0x24>
		return -1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f06:	e0bc      	b.n	8001082 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8000f10:	7c7b      	ldrb	r3, [r7, #17]
 8000f12:	3301      	adds	r3, #1
 8000f14:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8000f1c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000f20:	82bb      	strh	r3, [r7, #20]
 8000f22:	e001      	b.n	8000f28 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8000f24:	2300      	movs	r3, #0
 8000f26:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8000f28:	8abb      	ldrh	r3, [r7, #20]
 8000f2a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8000f2e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8000f30:	7c7a      	ldrb	r2, [r7, #17]
 8000f32:	4956      	ldr	r1, [pc, #344]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f42:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8000f44:	7c7a      	ldrb	r2, [r7, #17]
 8000f46:	4951      	ldr	r1, [pc, #324]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	3302      	adds	r3, #2
 8000f54:	2200      	movs	r2, #0
 8000f56:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8000f58:	7c3a      	ldrb	r2, [r7, #16]
 8000f5a:	494c      	ldr	r1, [pc, #304]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f6a:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 8000f6c:	7c3a      	ldrb	r2, [r7, #16]
 8000f6e:	4947      	ldr	r1, [pc, #284]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 8000f80:	7c7a      	ldrb	r2, [r7, #17]
 8000f82:	4942      	ldr	r1, [pc, #264]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f94:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 8000f96:	7c7a      	ldrb	r2, [r7, #17]
 8000f98:	493c      	ldr	r1, [pc, #240]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000faa:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 8000fac:	7c3a      	ldrb	r2, [r7, #16]
 8000fae:	4937      	ldr	r1, [pc, #220]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3304      	adds	r3, #4
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8000fc2:	7c3a      	ldrb	r2, [r7, #16]
 8000fc4:	4931      	ldr	r1, [pc, #196]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd6:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8000fd8:	7c7a      	ldrb	r2, [r7, #17]
 8000fda:	492c      	ldr	r1, [pc, #176]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	330c      	adds	r3, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 8000fec:	7c3a      	ldrb	r2, [r7, #16]
 8000fee:	4927      	ldr	r1, [pc, #156]	; (800108c <calc_process_dma_buffer+0x1a8>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	330c      	adds	r3, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001000:	8abb      	ldrh	r3, [r7, #20]
 8001002:	82fb      	strh	r3, [r7, #22]
 8001004:	e030      	b.n	8001068 <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001006:	8af9      	ldrh	r1, [r7, #22]
 8001008:	7c7a      	ldrb	r2, [r7, #17]
 800100a:	8a7b      	ldrh	r3, [r7, #18]
 800100c:	4c20      	ldr	r4, [pc, #128]	; (8001090 <calc_process_dma_buffer+0x1ac>)
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001014:	fb05 f000 	mul.w	r0, r5, r0
 8001018:	4401      	add	r1, r0
 800101a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800101e:	491d      	ldr	r1, [pc, #116]	; (8001094 <calc_process_dma_buffer+0x1b0>)
 8001020:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001024:	fb00 f202 	mul.w	r2, r0, r2
 8001028:	4413      	add	r3, r2
 800102a:	4622      	mov	r2, r4
 800102c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	1c59      	adds	r1, r3, #1
 8001034:	7c3a      	ldrb	r2, [r7, #16]
 8001036:	8a7b      	ldrh	r3, [r7, #18]
 8001038:	1c58      	adds	r0, r3, #1
 800103a:	8278      	strh	r0, [r7, #18]
 800103c:	461d      	mov	r5, r3
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <calc_process_dma_buffer+0x1ac>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 8001046:	fb04 f303 	mul.w	r3, r4, r3
 800104a:	440b      	add	r3, r1
 800104c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001050:	4910      	ldr	r1, [pc, #64]	; (8001094 <calc_process_dma_buffer+0x1b0>)
 8001052:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	442b      	add	r3, r5
 800105c:	4602      	mov	r2, r0
 800105e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001062:	8afb      	ldrh	r3, [r7, #22]
 8001064:	3302      	adds	r3, #2
 8001066:	82fb      	strh	r3, [r7, #22]
 8001068:	8afa      	ldrh	r2, [r7, #22]
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	429a      	cmp	r2, r3
 800106e:	d9ca      	bls.n	8001006 <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 8001070:	7c7b      	ldrb	r3, [r7, #17]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f93c 	bl	80012f0 <calc_downsample>
	calc_downsample(raw_buf_second);
 8001078:	7c3b      	ldrb	r3, [r7, #16]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f938 	bl	80012f0 <calc_downsample>
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	200000c4 	.word	0x200000c4
 8001090:	20000c08 	.word	0x20000c08
 8001094:	20004088 	.word	0x20004088

08001098 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	f200 8117 	bhi.w	80012dc <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0fda      	lsrs	r2, r3, #31
 80010ba:	4413      	add	r3, r2
 80010bc:	105b      	asrs	r3, r3, #1
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4413      	add	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0fda      	lsrs	r2, r3, #31
 80010ca:	4413      	add	r3, r2
 80010cc:	105b      	asrs	r3, r3, #1
 80010ce:	425b      	negs	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	4413      	add	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e0df      	b.n	800129e <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	4981      	ldr	r1, [pc, #516]	; (80012e8 <calc_zero_detector+0x250>)
 80010e2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80010e6:	fb03 f202 	mul.w	r2, r3, r2
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4413      	add	r3, r2
 80010ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010f2:	461a      	mov	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4293      	cmp	r3, r2
 80010f8:	f300 80ce 	bgt.w	8001298 <calc_zero_detector+0x200>
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	497a      	ldr	r1, [pc, #488]	; (80012e8 <calc_zero_detector+0x250>)
 8001100:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001104:	fb03 f202 	mul.w	r2, r3, r2
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4413      	add	r3, r2
 800110c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4293      	cmp	r3, r2
 8001116:	f2c0 80bf 	blt.w	8001298 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4972      	ldr	r1, [pc, #456]	; (80012e8 <calc_zero_detector+0x250>)
 800111e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001122:	fb03 f202 	mul.w	r2, r3, r2
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4413      	add	r3, r2
 800112a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4293      	cmp	r3, r2
 8001134:	da3d      	bge.n	80011b2 <calc_zero_detector+0x11a>
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	3b01      	subs	r3, #1
 800113c:	496a      	ldr	r1, [pc, #424]	; (80012e8 <calc_zero_detector+0x250>)
 800113e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001142:	fb00 f202 	mul.w	r2, r0, r2
 8001146:	4413      	add	r3, r2
 8001148:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800114c:	461a      	mov	r2, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	4293      	cmp	r3, r2
 8001152:	db2e      	blt.n	80011b2 <calc_zero_detector+0x11a>
				detected++;
 8001154:	7ffb      	ldrb	r3, [r7, #31]
 8001156:	3301      	adds	r3, #1
 8001158:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b01      	cmp	r3, #1
 800115e:	dd11      	ble.n	8001184 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	3b02      	subs	r3, #2
 8001166:	4960      	ldr	r1, [pc, #384]	; (80012e8 <calc_zero_detector+0x250>)
 8001168:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800116c:	fb00 f202 	mul.w	r2, r0, r2
 8001170:	4413      	add	r3, r2
 8001172:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001176:	461a      	mov	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4293      	cmp	r3, r2
 800117c:	dd02      	ble.n	8001184 <calc_zero_detector+0xec>
						detected++;
 800117e:	7ffb      	ldrb	r3, [r7, #31]
 8001180:	3301      	adds	r3, #1
 8001182:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	3302      	adds	r3, #2
 8001188:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800118c:	d211      	bcs.n	80011b2 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	3302      	adds	r3, #2
 8001194:	4954      	ldr	r1, [pc, #336]	; (80012e8 <calc_zero_detector+0x250>)
 8001196:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800119a:	fb00 f202 	mul.w	r2, r0, r2
 800119e:	4413      	add	r3, r2
 80011a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	da02      	bge.n	80011b2 <calc_zero_detector+0x11a>
						detected++;
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	3301      	adds	r3, #1
 80011b0:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d90f      	bls.n	80011d8 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	494c      	ldr	r1, [pc, #304]	; (80012ec <calc_zero_detector+0x254>)
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	3304      	adds	r3, #4
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]
				detected = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 80011d0:	7fbb      	ldrb	r3, [r7, #30]
 80011d2:	3301      	adds	r3, #1
 80011d4:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 80011d6:	e05f      	b.n	8001298 <calc_zero_detector+0x200>
			}
			detected = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4942      	ldr	r1, [pc, #264]	; (80012e8 <calc_zero_detector+0x250>)
 80011e0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80011e4:	fb03 f202 	mul.w	r2, r3, r2
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4413      	add	r3, r2
 80011ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011f0:	461a      	mov	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	dd4f      	ble.n	8001298 <calc_zero_detector+0x200>
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	493a      	ldr	r1, [pc, #232]	; (80012e8 <calc_zero_detector+0x250>)
 8001200:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001204:	fb00 f202 	mul.w	r2, r0, r2
 8001208:	4413      	add	r3, r2
 800120a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4293      	cmp	r3, r2
 8001214:	dc40      	bgt.n	8001298 <calc_zero_detector+0x200>
				detected++;
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	3301      	adds	r3, #1
 800121a:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b01      	cmp	r3, #1
 8001220:	dd11      	ble.n	8001246 <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	3b02      	subs	r3, #2
 8001228:	492f      	ldr	r1, [pc, #188]	; (80012e8 <calc_zero_detector+0x250>)
 800122a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800122e:	fb00 f202 	mul.w	r2, r0, r2
 8001232:	4413      	add	r3, r2
 8001234:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4293      	cmp	r3, r2
 800123e:	dc02      	bgt.n	8001246 <calc_zero_detector+0x1ae>
						detected++;
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	3301      	adds	r3, #1
 8001244:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	3302      	adds	r3, #2
 800124a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800124e:	d211      	bcs.n	8001274 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	3302      	adds	r3, #2
 8001256:	4924      	ldr	r1, [pc, #144]	; (80012e8 <calc_zero_detector+0x250>)
 8001258:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800125c:	fb00 f202 	mul.w	r2, r0, r2
 8001260:	4413      	add	r3, r2
 8001262:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4293      	cmp	r3, r2
 800126c:	dd02      	ble.n	8001274 <calc_zero_detector+0x1dc>
						detected++;
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	3301      	adds	r3, #1
 8001272:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d90c      	bls.n	8001294 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	491b      	ldr	r1, [pc, #108]	; (80012ec <calc_zero_detector+0x254>)
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3308      	adds	r3, #8
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	601a      	str	r2, [r3, #0]
					detect_count++;
 800128e:	7fbb      	ldrb	r3, [r7, #30]
 8001290:	3301      	adds	r3, #1
 8001292:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	3301      	adds	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012a4:	f4ff af1b 	bcc.w	80010de <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80012a8:	7fbb      	ldrb	r3, [r7, #30]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d917      	bls.n	80012de <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	490e      	ldr	r1, [pc, #56]	; (80012ec <calc_zero_detector+0x254>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3308      	adds	r3, #8
 80012be:	f06f 0208 	mvn.w	r2, #8
 80012c2:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <calc_zero_detector+0x254>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	3304      	adds	r3, #4
 80012d4:	f06f 0208 	mvn.w	r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e000      	b.n	80012de <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80012dc:	bf00      	nop
	}
}
 80012de:	3724      	adds	r7, #36	; 0x24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20005ac8 	.word	0x20005ac8
 80012ec:	200000c4 	.word	0x200000c4

080012f0 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b03      	cmp	r3, #3
 8001302:	f200 80f1 	bhi.w	80014e8 <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001306:	2301      	movs	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	e083      	b.n	8001414 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4978      	ldr	r1, [pc, #480]	; (80014f0 <calc_downsample+0x200>)
 8001310:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001314:	fb03 f202 	mul.w	r2, r3, r2
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001320:	461c      	mov	r4, r3
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3b01      	subs	r3, #1
 8001328:	4971      	ldr	r1, [pc, #452]	; (80014f0 <calc_downsample+0x200>)
 800132a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800132e:	fb00 f202 	mul.w	r2, r0, r2
 8001332:	4413      	add	r3, r2
 8001334:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001338:	4423      	add	r3, r4
 800133a:	79f9      	ldrb	r1, [r7, #7]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	3201      	adds	r2, #1
 8001340:	486b      	ldr	r0, [pc, #428]	; (80014f0 <calc_downsample+0x200>)
 8001342:	f44f 7452 	mov.w	r4, #840	; 0x348
 8001346:	fb04 f101 	mul.w	r1, r4, r1
 800134a:	440a      	add	r2, r1
 800134c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001350:	4413      	add	r3, r2
 8001352:	4a68      	ldr	r2, [pc, #416]	; (80014f4 <calc_downsample+0x204>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	17db      	asrs	r3, r3, #31
 800135a:	1ad1      	subs	r1, r2, r3
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	b28c      	uxth	r4, r1
 8001362:	4965      	ldr	r1, [pc, #404]	; (80014f8 <calc_downsample+0x208>)
 8001364:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001368:	fb00 f202 	mul.w	r2, r0, r2
 800136c:	4413      	add	r3, r2
 800136e:	4622      	mov	r2, r4
 8001370:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	4961      	ldr	r1, [pc, #388]	; (80014fc <calc_downsample+0x20c>)
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	82bb      	strh	r3, [r7, #20]
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	8bfb      	ldrh	r3, [r7, #30]
 800138a:	495b      	ldr	r1, [pc, #364]	; (80014f8 <calc_downsample+0x208>)
 800138c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001390:	fb00 f202 	mul.w	r2, r0, r2
 8001394:	4413      	add	r3, r2
 8001396:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800139a:	827b      	strh	r3, [r7, #18]
 800139c:	8a7a      	ldrh	r2, [r7, #18]
 800139e:	8abb      	ldrh	r3, [r7, #20]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	bf28      	it	cs
 80013a4:	4613      	movcs	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	b298      	uxth	r0, r3
 80013ac:	4953      	ldr	r1, [pc, #332]	; (80014fc <calc_downsample+0x20c>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	4602      	mov	r2, r0
 80013ba:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	494f      	ldr	r1, [pc, #316]	; (80014fc <calc_downsample+0x20c>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3302      	adds	r3, #2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	823b      	strh	r3, [r7, #16]
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	8bfb      	ldrh	r3, [r7, #30]
 80013d4:	4948      	ldr	r1, [pc, #288]	; (80014f8 <calc_downsample+0x208>)
 80013d6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013da:	fb00 f202 	mul.w	r2, r0, r2
 80013de:	4413      	add	r3, r2
 80013e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013e4:	81fb      	strh	r3, [r7, #14]
 80013e6:	89fa      	ldrh	r2, [r7, #14]
 80013e8:	8a3b      	ldrh	r3, [r7, #16]
 80013ea:	4293      	cmp	r3, r2
 80013ec:	bf38      	it	cc
 80013ee:	4613      	movcc	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	b298      	uxth	r0, r3
 80013f6:	4941      	ldr	r1, [pc, #260]	; (80014fc <calc_downsample+0x20c>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3302      	adds	r3, #2
 8001404:	4602      	mov	r2, r0
 8001406:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001408:	8bfb      	ldrh	r3, [r7, #30]
 800140a:	3301      	adds	r3, #1
 800140c:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	3302      	adds	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f240 3245 	movw	r2, #837	; 0x345
 800141a:	4293      	cmp	r3, r2
 800141c:	f67f af76 	bls.w	800130c <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <calc_downsample+0x200>)
 8001424:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4413      	add	r3, r2
 800142e:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <calc_downsample+0x200>)
 800143a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4403      	add	r3, r0
 800144c:	0fda      	lsrs	r2, r3, #31
 800144e:	4413      	add	r3, r2
 8001450:	105b      	asrs	r3, r3, #1
 8001452:	4618      	mov	r0, r3
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	8bfb      	ldrh	r3, [r7, #30]
 8001458:	1c59      	adds	r1, r3, #1
 800145a:	83f9      	strh	r1, [r7, #30]
 800145c:	461c      	mov	r4, r3
 800145e:	b280      	uxth	r0, r0
 8001460:	4925      	ldr	r1, [pc, #148]	; (80014f8 <calc_downsample+0x208>)
 8001462:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4423      	add	r3, r4
 800146c:	4602      	mov	r2, r0
 800146e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 8001472:	8bfb      	ldrh	r3, [r7, #30]
 8001474:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001478:	d20a      	bcs.n	8001490 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	8bfb      	ldrh	r3, [r7, #30]
 800147e:	491e      	ldr	r1, [pc, #120]	; (80014f8 <calc_downsample+0x208>)
 8001480:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001484:	fb00 f202 	mul.w	r2, r0, r2
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	491a      	ldr	r1, [pc, #104]	; (80014fc <calc_downsample+0x20c>)
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3302      	adds	r3, #2
 80014a0:	8819      	ldrh	r1, [r3, #0]
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	4815      	ldr	r0, [pc, #84]	; (80014fc <calc_downsample+0x20c>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 80014b6:	8afb      	ldrh	r3, [r7, #22]
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <calc_downsample+0x20c>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	18c1      	adds	r1, r0, r3
 80014d0:	8afb      	ldrh	r3, [r7, #22]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <calc_downsample+0x210>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fdd9 	bl	8001098 <calc_zero_detector>
 80014e6:	e000      	b.n	80014ea <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80014e8:	bf00      	nop
}
 80014ea:	3724      	adds	r7, #36	; 0x24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	20004088 	.word	0x20004088
 80014f4:	55555556 	.word	0x55555556
 80014f8:	20005ac8 	.word	0x20005ac8
 80014fc:	200000c4 	.word	0x200000c4
 8001500:	cccccccd 	.word	0xcccccccd

08001504 <calc_measurements>:
 * The RMS value is calculated from readings between the positive and negative zero crossing
 * that is, the positive half of the sine wave.
 * The RMS value is calculate by adding the square of each reading to an accumulator and then
 * diving the accumulator by the number of readings.
 */
int calc_measurements(uint8_t bufnum) {
 8001504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001508:	b090      	sub	sp, #64	; 0x40
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i;
	uint64_t squared_acc = 0;		// accumulating the squared values
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint16_t num_readings = 0;		// number of squared readings
 800151e:	2300      	movs	r3, #0
 8001520:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t reading = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
 8001526:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800152a:	4994      	ldr	r1, [pc, #592]	; (800177c <calc_measurements+0x278>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3302      	adds	r3, #2
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001540:	498e      	ldr	r1, [pc, #568]	; (800177c <calc_measurements+0x278>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	1ac2      	subs	r2, r0, r3
 8001550:	0fd3      	lsrs	r3, r2, #31
 8001552:	4413      	add	r3, r2
 8001554:	105b      	asrs	r3, r3, #1
 8001556:	857b      	strh	r3, [r7, #42]	; 0x2a

	if (bufnum >= ADC_NUM_BUFFERS) { return -1; }		// check valid buffer number
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800155c:	2b03      	cmp	r3, #3
 800155e:	d902      	bls.n	8001566 <calc_measurements+0x62>
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001564:	e104      	b.n	8001770 <calc_measurements+0x26c>

	// Calculate the RMS value using the positive half of the sinewave

	if (sample_buf_meta[bufnum].zero_cross_pos < 0) { return -1; }	// do we have zero crossing?
 8001566:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800156a:	4984      	ldr	r1, [pc, #528]	; (800177c <calc_measurements+0x278>)
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3304      	adds	r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da02      	bge.n	8001584 <calc_measurements+0x80>
 800157e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001582:	e0f5      	b.n	8001770 <calc_measurements+0x26c>
	if (sample_buf_meta[bufnum].zero_cross_pos < sample_buf_meta[bufnum].zero_cross_neg) {
 8001584:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001588:	497c      	ldr	r1, [pc, #496]	; (800177c <calc_measurements+0x278>)
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	3304      	adds	r3, #4
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800159c:	4977      	ldr	r1, [pc, #476]	; (800177c <calc_measurements+0x278>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3308      	adds	r3, #8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4298      	cmp	r0, r3
 80015ae:	da40      	bge.n	8001632 <calc_measurements+0x12e>
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 80015b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015b4:	4971      	ldr	r1, [pc, #452]	; (800177c <calc_measurements+0x278>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3304      	adds	r3, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c6:	e026      	b.n	8001616 <calc_measurements+0x112>
			reading = sample_buf[bufnum][i] - zero_value;
 80015c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015cc:	496c      	ldr	r1, [pc, #432]	; (8001780 <calc_measurements+0x27c>)
 80015ce:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80015d2:	fb03 f202 	mul.w	r2, r3, r2
 80015d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015d8:	4413      	add	r3, r2
 80015da:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80015de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 80015e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015e6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	469a      	mov	sl, r3
 80015f0:	4693      	mov	fp, r2
 80015f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015f6:	eb12 010a 	adds.w	r1, r2, sl
 80015fa:	6139      	str	r1, [r7, #16]
 80015fc:	eb43 030b 	adc.w	r3, r3, fp
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001606:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			num_readings++;
 800160a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800160c:	3301      	adds	r3, #1
 800160e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001612:	3301      	adds	r3, #1
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001616:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800161a:	4958      	ldr	r1, [pc, #352]	; (800177c <calc_measurements+0x278>)
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3308      	adds	r3, #8
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800162c:	429a      	cmp	r2, r3
 800162e:	dbcb      	blt.n	80015c8 <calc_measurements+0xc4>
 8001630:	e06b      	b.n	800170a <calc_measurements+0x206>
		}
	} else {
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001632:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001636:	4951      	ldr	r1, [pc, #324]	; (800177c <calc_measurements+0x278>)
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3304      	adds	r3, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001648:	e026      	b.n	8001698 <calc_measurements+0x194>
			reading = sample_buf[bufnum][i] - zero_value;
 800164a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164e:	494c      	ldr	r1, [pc, #304]	; (8001780 <calc_measurements+0x27c>)
 8001650:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001654:	fb03 f202 	mul.w	r2, r3, r2
 8001658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165a:	4413      	add	r3, r2
 800165c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001666:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001668:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	17da      	asrs	r2, r3, #31
 8001670:	4698      	mov	r8, r3
 8001672:	4691      	mov	r9, r2
 8001674:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001678:	eb12 0108 	adds.w	r1, r2, r8
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	eb43 0309 	adc.w	r3, r3, r9
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001688:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			num_readings++;
 800168c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800168e:	3301      	adds	r3, #1
 8001690:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001694:	3301      	adds	r3, #1
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800169e:	d3d4      	bcc.n	800164a <calc_measurements+0x146>
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 80016a0:	2314      	movs	r3, #20
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a4:	e024      	b.n	80016f0 <calc_measurements+0x1ec>
			reading = sample_buf[bufnum][i] - zero_value;
 80016a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016aa:	4935      	ldr	r1, [pc, #212]	; (8001780 <calc_measurements+0x27c>)
 80016ac:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80016b0:	fb03 f202 	mul.w	r2, r3, r2
 80016b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b6:	4413      	add	r3, r2
 80016b8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80016bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 80016c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	17da      	asrs	r2, r3, #31
 80016cc:	461c      	mov	r4, r3
 80016ce:	4615      	mov	r5, r2
 80016d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016d4:	1911      	adds	r1, r2, r4
 80016d6:	6039      	str	r1, [r7, #0]
 80016d8:	416b      	adcs	r3, r5
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			num_readings++;
 80016e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016e6:	3301      	adds	r3, #1
 80016e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 80016ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ec:	3301      	adds	r3, #1
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016f4:	4921      	ldr	r1, [pc, #132]	; (800177c <calc_measurements+0x278>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001706:	429a      	cmp	r2, r3
 8001708:	dbcd      	blt.n	80016a6 <calc_measurements+0x1a2>
		}
	}
	sample_buf_meta[bufnum].rms_value = sqrt((squared_acc / num_readings));
 800170a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800170c:	2200      	movs	r2, #0
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	61fa      	str	r2, [r7, #28]
 8001712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001716:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800171a:	f7ff fa65 	bl	8000be8 <__aeabi_uldivmod>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7fe ff51 	bl	80005cc <__aeabi_ul2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	ec43 2b10 	vmov	d0, r2, r3
 8001732:	f00a fadd 	bl	800bcf0 <sqrt>
 8001736:	ec53 2b10 	vmov	r2, r3, d0
 800173a:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fa29 	bl	8000b98 <__aeabi_d2iz>
 8001746:	4602      	mov	r2, r0
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <calc_measurements+0x278>)
 800174a:	4623      	mov	r3, r4
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4423      	add	r3, r4
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3310      	adds	r3, #16
 8001756:	601a      	str	r2, [r3, #0]
	sample_buf_meta[bufnum].measurements_valid = 1;
 8001758:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <calc_measurements+0x278>)
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	330c      	adds	r3, #12
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
	return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3740      	adds	r7, #64	; 0x40
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	200000c4 	.word	0x200000c4
 8001780:	20005ac8 	.word	0x20005ac8

08001784 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(uint16_t adc_raw) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f817 	bl	80017c4 <calc_adc_raw_to_mv_float>
 8001796:	ee10 3a10 	vmov	r3, s0
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fef4 	bl	8000588 <__aeabi_f2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	ec43 2b10 	vmov	d0, r2, r3
 80017a8:	f00a fba8 	bl	800befc <round>
 80017ac:	ec53 2b10 	vmov	r2, r3, d0
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f9f0 	bl	8000b98 <__aeabi_d2iz>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(uint16_t adc_raw) {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80017f8 <calc_adc_raw_to_mv_float+0x34>
 80017dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017fc <calc_adc_raw_to_mv_float+0x38>
 80017e4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80017e8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	457ff000 	.word	0x457ff000
 80017fc:	454e4000 	.word	0x454e4000

08001800 <cmd_error>:
extern uint8_t tft_display;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4803      	ldr	r0, [pc, #12]	; (8001818 <cmd_error+0x18>)
 800180c:	f001 fe4e 	bl	80034ac <term_print>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	0800c018 	.word	0x0800c018

0800181c <cmd_t>:


int cmd_t(uint8_t* cmd_str) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b74      	cmp	r3, #116	; 0x74
 800182c:	d014      	beq.n	8001858 <cmd_t+0x3c>
 800182e:	2b74      	cmp	r3, #116	; 0x74
 8001830:	dc17      	bgt.n	8001862 <cmd_t+0x46>
 8001832:	2b54      	cmp	r3, #84	; 0x54
 8001834:	d010      	beq.n	8001858 <cmd_t+0x3c>
 8001836:	2b54      	cmp	r3, #84	; 0x54
 8001838:	dc13      	bgt.n	8001862 <cmd_t+0x46>
 800183a:	2b30      	cmp	r3, #48	; 0x30
 800183c:	d002      	beq.n	8001844 <cmd_t+0x28>
 800183e:	2b31      	cmp	r3, #49	; 0x31
 8001840:	d005      	beq.n	800184e <cmd_t+0x32>
 8001842:	e00e      	b.n	8001862 <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <cmd_t+0x58>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
		return 0;
 800184a:	2300      	movs	r3, #0
 800184c:	e00b      	b.n	8001866 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <cmd_t+0x58>)
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
		return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e006      	b.n	8001866 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <cmd_t+0x58>)
 800185a:	2209      	movs	r2, #9
 800185c:	701a      	strb	r2, [r3, #0]
		return 0;
 800185e:	2300      	movs	r3, #0
 8001860:	e001      	b.n	8001866 <cmd_t+0x4a>
	}
	return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000bf2 	.word	0x20000bf2

08001878 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	f107 0208 	add.w	r2, r7, #8
 8001888:	4909      	ldr	r1, [pc, #36]	; (80018b0 <cmd_p+0x38>)
 800188a:	4618      	mov	r0, r3
 800188c:	f008 fc4c 	bl	800a128 <siscanf>
 8001890:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d002      	beq.n	800189e <cmd_p+0x26>
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	e004      	b.n	80018a8 <cmd_p+0x30>
	new_time_period = value;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <cmd_p+0x3c>)
 80018a4:	801a      	strh	r2, [r3, #0]
	return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800c030 	.word	0x0800c030
 80018b4:	20000bf4 	.word	0x20000bf4

080018b8 <cmd_help>:


int cmd_help(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <cmd_help+0x40>)
 80018be:	f001 fdf5 	bl	80034ac <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <cmd_help+0x44>)
 80018c4:	f001 fdf2 	bl	80034ac <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <cmd_help+0x48>)
 80018ca:	f001 fdef 	bl	80034ac <term_print>
#endif
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <cmd_help+0x4c>)
 80018d0:	f001 fdec 	bl	80034ac <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <cmd_help+0x50>)
 80018d6:	f001 fde9 	bl	80034ac <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 80018da:	480c      	ldr	r0, [pc, #48]	; (800190c <cmd_help+0x54>)
 80018dc:	f001 fde6 	bl	80034ac <term_print>
	term_print("R: Restart ADC conversion\r\n");
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <cmd_help+0x58>)
 80018e2:	f001 fde3 	bl	80034ac <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <cmd_help+0x5c>)
 80018e8:	f001 fde0 	bl	80034ac <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 80018ec:	480a      	ldr	r0, [pc, #40]	; (8001918 <cmd_help+0x60>)
 80018ee:	f001 fddd 	bl	80034ac <term_print>
	return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0800c034 	.word	0x0800c034
 80018fc:	0800c048 	.word	0x0800c048
 8001900:	0800c080 	.word	0x0800c080
 8001904:	0800c0b4 	.word	0x0800c0b4
 8001908:	0800c0d0 	.word	0x0800c0d0
 800190c:	0800c118 	.word	0x0800c118
 8001910:	0800c14c 	.word	0x0800c14c
 8001914:	0800c168 	.word	0x0800c168
 8001918:	0800c1a8 	.word	0x0800c1a8

0800191c <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001928:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	3b3f      	subs	r3, #63	; 0x3f
 8001930:	2b35      	cmp	r3, #53	; 0x35
 8001932:	f200 80b5 	bhi.w	8001aa0 <cmd_process+0x184>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <cmd_process+0x20>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	08001a9b 	.word	0x08001a9b
 8001940:	08001aa1 	.word	0x08001aa1
 8001944:	08001aa1 	.word	0x08001aa1
 8001948:	08001aa1 	.word	0x08001aa1
 800194c:	08001a15 	.word	0x08001a15
 8001950:	08001a29 	.word	0x08001a29
 8001954:	08001aa1 	.word	0x08001aa1
 8001958:	08001aa1 	.word	0x08001aa1
 800195c:	08001aa1 	.word	0x08001aa1
 8001960:	08001a9b 	.word	0x08001a9b
 8001964:	08001aa1 	.word	0x08001aa1
 8001968:	08001aa1 	.word	0x08001aa1
 800196c:	08001aa1 	.word	0x08001aa1
 8001970:	08001a3d 	.word	0x08001a3d
 8001974:	08001a51 	.word	0x08001a51
 8001978:	08001aa1 	.word	0x08001aa1
 800197c:	08001aa1 	.word	0x08001aa1
 8001980:	08001a67 	.word	0x08001a67
 8001984:	08001aa1 	.word	0x08001aa1
 8001988:	08001a71 	.word	0x08001a71
 800198c:	08001a7d 	.word	0x08001a7d
 8001990:	08001a91 	.word	0x08001a91
 8001994:	08001aa1 	.word	0x08001aa1
 8001998:	08001aa1 	.word	0x08001aa1
 800199c:	08001aa1 	.word	0x08001aa1
 80019a0:	08001aa1 	.word	0x08001aa1
 80019a4:	08001aa1 	.word	0x08001aa1
 80019a8:	08001aa1 	.word	0x08001aa1
 80019ac:	08001aa1 	.word	0x08001aa1
 80019b0:	08001aa1 	.word	0x08001aa1
 80019b4:	08001aa1 	.word	0x08001aa1
 80019b8:	08001aa1 	.word	0x08001aa1
 80019bc:	08001aa1 	.word	0x08001aa1
 80019c0:	08001aa1 	.word	0x08001aa1
 80019c4:	08001aa1 	.word	0x08001aa1
 80019c8:	08001aa1 	.word	0x08001aa1
 80019cc:	08001a15 	.word	0x08001a15
 80019d0:	08001a29 	.word	0x08001a29
 80019d4:	08001aa1 	.word	0x08001aa1
 80019d8:	08001aa1 	.word	0x08001aa1
 80019dc:	08001aa1 	.word	0x08001aa1
 80019e0:	08001a9b 	.word	0x08001a9b
 80019e4:	08001aa1 	.word	0x08001aa1
 80019e8:	08001aa1 	.word	0x08001aa1
 80019ec:	08001aa1 	.word	0x08001aa1
 80019f0:	08001a3d 	.word	0x08001a3d
 80019f4:	08001a51 	.word	0x08001a51
 80019f8:	08001aa1 	.word	0x08001aa1
 80019fc:	08001aa1 	.word	0x08001aa1
 8001a00:	08001a67 	.word	0x08001a67
 8001a04:	08001aa1 	.word	0x08001aa1
 8001a08:	08001a71 	.word	0x08001a71
 8001a0c:	08001a7d 	.word	0x08001a7d
 8001a10:	08001a91 	.word	0x08001a91
	case 'C':
	case 'c':
		csv_buffer = cmd_str[1] - 0x30;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3b30      	subs	r3, #48	; 0x30
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <cmd_process+0x190>)
 8001a20:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
		break;
 8001a26:	e03b      	b.n	8001aa0 <cmd_process+0x184>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		cmd_display_buffer = cmd_str[1] - 0x30;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3b30      	subs	r3, #48	; 0x30
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <cmd_process+0x194>)
 8001a34:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
		break;
 8001a3a:	e031      	b.n	8001aa0 <cmd_process+0x184>
#endif
	case 'L':
	case 'l':
		led_cmd = cmd_str[1] - 0x30 + 1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	3b2f      	subs	r3, #47	; 0x2f
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <cmd_process+0x198>)
 8001a48:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
		break;
 8001a4e:	e027      	b.n	8001aa0 <cmd_process+0x184>
	case 'M':
	case 'm':
		term_show_measurements(cmd_str[1] - 0x31);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	3b31      	subs	r3, #49	; 0x31
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fda0 	bl	80035a0 <term_show_measurements>
		retval = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
		break;
 8001a64:	e01c      	b.n	8001aa0 <cmd_process+0x184>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff06 	bl	8001878 <cmd_p>
 8001a6c:	60f8      	str	r0, [r7, #12]
		break;
 8001a6e:	e017      	b.n	8001aa0 <cmd_process+0x184>
	case 'R':
	case 'r':
		adc_restart = 1;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <cmd_process+0x19c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
		break;
 8001a7a:	e011      	b.n	8001aa0 <cmd_process+0x184>
	case 'S':
	case 's':
		show_buffer = cmd_str[1] - 0x30;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3b30      	subs	r3, #48	; 0x30
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <cmd_process+0x1a0>)
 8001a88:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
		break;
 8001a8e:	e007      	b.n	8001aa0 <cmd_process+0x184>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fec3 	bl	800181c <cmd_t>
 8001a96:	60f8      	str	r0, [r7, #12]
		break;
 8001a98:	e002      	b.n	8001aa0 <cmd_process+0x184>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8001a9a:	f7ff ff0d 	bl	80018b8 <cmd_help>
 8001a9e:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000bf0 	.word	0x20000bf0
 8001ab0:	20000bef 	.word	0x20000bef
 8001ab4:	20000bf1 	.word	0x20000bf1
 8001ab8:	20000bed 	.word	0x20000bed
 8001abc:	20000bee 	.word	0x20000bee

08001ac0 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fba1 	bl	8000210 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <CMD_Handler+0x3c>)
 8001ad4:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <CMD_Handler+0x3c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fe8e 	bl	8001800 <cmd_error>
		return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae8:	e003      	b.n	8001af2 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff16 	bl	800191c <cmd_process>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000114 	.word	0x20000114

08001b00 <draw_curve>:
uint16_t aligned_curve[DISPLAY_X];	// raw samples reduced to one full cycle (around 400 samples)
uint16_t curve_len = 0;
char str[32];
uint8_t lastbuf = 9;

void draw_curve(uint16_t colour) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
	for (int x=1; x<curve_len; x++) {
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e019      	b.n	8001b44 <draw_curve+0x44>
		Displ_Line(x-1, curve_y[x-1], x, curve_y[x], colour);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b218      	sxth	r0, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <draw_curve+0x5c>)
 8001b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b24:	b219      	sxth	r1, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	4c0c      	ldr	r4, [pc, #48]	; (8001b5c <draw_curve+0x5c>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001b32:	b21c      	sxth	r4, r3
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4623      	mov	r3, r4
 8001b3a:	f002 fbc0 	bl	80042be <Displ_Line>
	for (int x=1; x<curve_len; x++) {
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3301      	adds	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <draw_curve+0x60>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	dbdf      	blt.n	8001b10 <draw_curve+0x10>
	}
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000118 	.word	0x20000118
 8001b60:	20000898 	.word	0x20000898

08001b64 <display_align_curve>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curve(uint8_t bufnum) {
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
	int dest_idx = -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b72:	617b      	str	r3, [r7, #20]
	//int distance = 0;
	//int last_distance = ADC_FS_RAW;
	int i, continue_at = -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b78:	60fb      	str	r3, [r7, #12]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[bufnum].zero_cross_pos < 0) {
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	493e      	ldr	r1, [pc, #248]	; (8001c78 <display_align_curve+0x114>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3304      	adds	r3, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da1a      	bge.n	8001bc6 <display_align_curve+0x62>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	e010      	b.n	8001bb8 <display_align_curve+0x54>
			aligned_curve[i] = sample_buf[bufnum][i];
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4938      	ldr	r1, [pc, #224]	; (8001c7c <display_align_curve+0x118>)
 8001b9a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001b9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8001baa:	4a35      	ldr	r2, [pc, #212]	; (8001c80 <display_align_curve+0x11c>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001bbe:	d3ea      	bcc.n	8001b96 <display_align_curve+0x32>
		}
		return SAMPLE_BUF_SIZE;
 8001bc0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001bc4:	e051      	b.n	8001c6a <display_align_curve+0x106>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	492b      	ldr	r1, [pc, #172]	; (8001c78 <display_align_curve+0x114>)
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e013      	b.n	8001c04 <display_align_curve+0xa0>
		dest_idx++;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
		aligned_curve[dest_idx] = sample_buf[bufnum][i];
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4925      	ldr	r1, [pc, #148]	; (8001c7c <display_align_curve+0x118>)
 8001be6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001bea:	fb03 f202 	mul.w	r2, r3, r2
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <display_align_curve+0x11c>)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001c0a:	d3e7      	bcc.n	8001bdc <display_align_curve+0x78>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8001c0c:	2314      	movs	r3, #20
 8001c0e:	60fb      	str	r3, [r7, #12]

	if (continue_at < 0) return -1;	// abort if continuation hasn't bee found
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da02      	bge.n	8001c1c <display_align_curve+0xb8>
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1a:	e026      	b.n	8001c6a <display_align_curve+0x106>
	for (i=continue_at; i<sample_buf_meta[bufnum].zero_cross_pos; i++) {
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e013      	b.n	8001c4a <display_align_curve+0xe6>
		dest_idx++;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
		aligned_curve[dest_idx] = sample_buf[bufnum][i];
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4914      	ldr	r1, [pc, #80]	; (8001c7c <display_align_curve+0x118>)
 8001c2c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001c30:	fb03 f202 	mul.w	r2, r3, r2
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8001c3c:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <display_align_curve+0x11c>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[bufnum].zero_cross_pos; i++) {
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	3301      	adds	r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	490a      	ldr	r1, [pc, #40]	; (8001c78 <display_align_curve+0x114>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3304      	adds	r3, #4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbdf      	blt.n	8001c22 <display_align_curve+0xbe>
	}
	return ++dest_idx;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200000c4 	.word	0x200000c4
 8001c7c:	20005ac8 	.word	0x20005ac8
 8001c80:	200004d8 	.word	0x200004d8

08001c84 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b095      	sub	sp, #84	; 0x54
 8001c88:	af06      	add	r7, sp, #24
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	f200 8204 	bhi.w	800209e <display_show_curve+0x41a>

	int y_offset = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
	int y_max = DISPLAY_Y -1;		// max Y pixel position
 8001c9a:	f240 133f 	movw	r3, #319	; 0x13f
 8001c9e:	623b      	str	r3, [r7, #32]
	int x_max = ADC_NUM_DATA / 2;	// we have twice as many readings as pixels on the display
 8001ca0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001ca4:	61fb      	str	r3, [r7, #28]
	int value = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
	//int buf_index = 1;
	int y_grid_100 = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
	int y_grid_50 = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
	int y_grid_25 = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]

	int scale_factor = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
	float fScale = (float)DISPLAY_Y / (float)sample_buf_meta[bufnum].max;
 8001cba:	79fa      	ldrb	r2, [r7, #7]
 8001cbc:	4924      	ldr	r1, [pc, #144]	; (8001d50 <display_show_curve+0xcc>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3302      	adds	r3, #2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cd4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001d54 <display_show_curve+0xd0>
 8001cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cdc:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fScale < 1) {
 8001ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	d534      	bpl.n	8001d5c <display_show_curve+0xd8>
		scale_factor = trunc(1/fScale)+1; // divisor
 8001cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cfe:	ee16 0a90 	vmov	r0, s13
 8001d02:	f7fe fc41 	bl	8000588 <__aeabi_f2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	ec43 2b10 	vmov	d0, r2, r3
 8001d0e:	f00a f93d 	bl	800bf8c <trunc>
 8001d12:	ec51 0b10 	vmov	r0, r1, d0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <display_show_curve+0xd4>)
 8001d1c:	f7fe fad6 	bl	80002cc <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff36 	bl	8000b98 <__aeabi_d2iz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
		value = sample_buf_meta[bufnum].max / scale_factor;
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	4907      	ldr	r1, [pc, #28]	; (8001d50 <display_show_curve+0xcc>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3302      	adds	r3, #2
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4c:	e025      	b.n	8001d9a <display_show_curve+0x116>
 8001d4e:	bf00      	nop
 8001d50:	200000c4 	.word	0x200000c4
 8001d54:	43a00000 	.word	0x43a00000
 8001d58:	3ff00000 	.word	0x3ff00000
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe fc13 	bl	8000588 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ec43 2b10 	vmov	d0, r2, r3
 8001d6a:	f00a f90f 	bl	800bf8c <trunc>
 8001d6e:	ec53 2b10 	vmov	r2, r3, d0
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe ff0f 	bl	8000b98 <__aeabi_d2iz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
		value = sample_buf_meta[bufnum].max * scale_factor;
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	49a8      	ldr	r1, [pc, #672]	; (8002024 <display_show_curve+0x3a0>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
	}
	y_grid_100 = y_max - value + y_offset;
 8001d9a:	6a3a      	ldr	r2, [r7, #32]
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da2:	4413      	add	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
	y_grid_50 = y_max - value/2 + y_offset;
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	0fda      	lsrs	r2, r3, #31
 8001daa:	4413      	add	r3, r2
 8001dac:	105b      	asrs	r3, r3, #1
 8001dae:	425b      	negs	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	4413      	add	r3, r2
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
	y_grid_25 = y_max - value/4 + y_offset;
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da00      	bge.n	8001dc4 <display_show_curve+0x140>
 8001dc2:	3303      	adds	r3, #3
 8001dc4:	109b      	asrs	r3, r3, #2
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	4413      	add	r3, r2
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	4413      	add	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

	Displ_CLS(BLACK);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f002 f889 	bl	8003eec <Displ_CLS>

	// Draw grid lines
	Displ_Line(0, y_grid_100, x_max, y_grid_100, WHITE);	// 100%
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	b219      	sxth	r1, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dea:	9000      	str	r0, [sp, #0]
 8001dec:	2000      	movs	r0, #0
 8001dee:	f002 fa66 	bl	80042be <Displ_Line>
	Displ_Line(0, y_grid_50, x_max, y_grid_50, WHITE);	// 50%
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	b219      	sxth	r1, r3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e02:	9000      	str	r0, [sp, #0]
 8001e04:	2000      	movs	r0, #0
 8001e06:	f002 fa5a 	bl	80042be <Displ_Line>
	Displ_Line(0, DISPLAY_Y-1, x_max, DISPLAY_Y-1, WHITE);	// Zero
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f240 133f 	movw	r3, #319	; 0x13f
 8001e18:	f240 113f 	movw	r1, #319	; 0x13f
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f002 fa4e 	bl	80042be <Displ_Line>

	// Display grid values
	snprintf(str,32,"%d",calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max));
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	497f      	ldr	r1, [pc, #508]	; (8002024 <display_show_curve+0x3a0>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3302      	adds	r3, #2
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fca5 	bl	8001784 <calc_adc_raw_to_mv_int>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a7a      	ldr	r2, [pc, #488]	; (8002028 <display_show_curve+0x3a4>)
 8001e3e:	2120      	movs	r1, #32
 8001e40:	487a      	ldr	r0, [pc, #488]	; (800202c <display_show_curve+0x3a8>)
 8001e42:	f008 f91d 	bl	800a080 <sniprintf>
	value = Font16.Width * strlen(str);
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <display_show_curve+0x3ac>)
 8001e48:	889b      	ldrh	r3, [r3, #4]
 8001e4a:	461c      	mov	r4, r3
 8001e4c:	4877      	ldr	r0, [pc, #476]	; (800202c <display_show_curve+0x3a8>)
 8001e4e:	f7fe f9df 	bl	8000210 <strlen>
 8001e52:	4603      	mov	r3, r0
 8001e54:	fb04 f303 	mul.w	r3, r4, r3
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
	Displ_WString(x_max, y_grid_100, str , Font16, 1, BLACK, WHITE);
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	b29c      	uxth	r4, r3
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	b29d      	uxth	r5, r3
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <display_show_curve+0x3ac>)
 8001e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e68:	9204      	str	r2, [sp, #16]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	9203      	str	r2, [sp, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	9202      	str	r2, [sp, #8]
 8001e72:	466e      	mov	r6, sp
 8001e74:	1d1a      	adds	r2, r3, #4
 8001e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	; (800202c <display_show_curve+0x3a8>)
 8001e82:	4629      	mov	r1, r5
 8001e84:	4620      	mov	r0, r4
 8001e86:	f002 ffd3 	bl	8004e30 <Displ_WString>
	snprintf(str,32,"%d",calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max/2));
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	4965      	ldr	r1, [pc, #404]	; (8002024 <display_show_curve+0x3a0>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3302      	adds	r3, #2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fc6f 	bl	8001784 <calc_adc_raw_to_mv_int>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <display_show_curve+0x3a4>)
 8001eaa:	2120      	movs	r1, #32
 8001eac:	485f      	ldr	r0, [pc, #380]	; (800202c <display_show_curve+0x3a8>)
 8001eae:	f008 f8e7 	bl	800a080 <sniprintf>
	value = Font16.Width * strlen(str);
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <display_show_curve+0x3ac>)
 8001eb4:	889b      	ldrh	r3, [r3, #4]
 8001eb6:	461c      	mov	r4, r3
 8001eb8:	485c      	ldr	r0, [pc, #368]	; (800202c <display_show_curve+0x3a8>)
 8001eba:	f7fe f9a9 	bl	8000210 <strlen>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	fb04 f303 	mul.w	r3, r4, r3
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
	Displ_WString(x_max, y_grid_50-Font16.Height/2, str , Font16, 1, BLACK, WHITE);
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	b29c      	uxth	r4, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <display_show_curve+0x3ac>)
 8001ed0:	88db      	ldrh	r3, [r3, #6]
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	b29d      	uxth	r5, r3
 8001eda:	4b55      	ldr	r3, [pc, #340]	; (8002030 <display_show_curve+0x3ac>)
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	9204      	str	r2, [sp, #16]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	9203      	str	r2, [sp, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	9202      	str	r2, [sp, #8]
 8001eea:	466e      	mov	r6, sp
 8001eec:	1d1a      	adds	r2, r3, #4
 8001eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef2:	e886 0003 	stmia.w	r6, {r0, r1}
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	; (800202c <display_show_curve+0x3a8>)
 8001efa:	4629      	mov	r1, r5
 8001efc:	4620      	mov	r0, r4
 8001efe:	f002 ff97 	bl	8004e30 <Displ_WString>
	Displ_WString(x_max, DISPLAY_Y-Font16.Height, "0" , Font16, 1, BLACK, WHITE);
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	b29c      	uxth	r4, r3
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <display_show_curve+0x3ac>)
 8001f08:	88db      	ldrh	r3, [r3, #6]
 8001f0a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001f0e:	b29d      	uxth	r5, r3
 8001f10:	4b47      	ldr	r3, [pc, #284]	; (8002030 <display_show_curve+0x3ac>)
 8001f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f16:	9204      	str	r2, [sp, #16]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	9203      	str	r2, [sp, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	9202      	str	r2, [sp, #8]
 8001f20:	466e      	mov	r6, sp
 8001f22:	1d1a      	adds	r2, r3, #4
 8001f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f28:	e886 0003 	stmia.w	r6, {r0, r1}
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a41      	ldr	r2, [pc, #260]	; (8002034 <display_show_curve+0x3b0>)
 8001f30:	4629      	mov	r1, r5
 8001f32:	4620      	mov	r0, r4
 8001f34:	f002 ff7c 	bl	8004e30 <Displ_WString>

	Displ_WString(x_max, y_grid_25 - Font20.Height/2, "mV" , Font20, 1, WHITE, BLACK);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	b29c      	uxth	r4, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <display_show_curve+0x3b4>)
 8001f42:	88db      	ldrh	r3, [r3, #6]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	b29d      	uxth	r5, r3
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <display_show_curve+0x3b4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	9204      	str	r2, [sp, #16]
 8001f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f56:	9203      	str	r2, [sp, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	9202      	str	r2, [sp, #8]
 8001f5c:	466e      	mov	r6, sp
 8001f5e:	1d1a      	adds	r2, r3, #4
 8001f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f64:	e886 0003 	stmia.w	r6, {r0, r1}
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a34      	ldr	r2, [pc, #208]	; (800203c <display_show_curve+0x3b8>)
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f002 ff5e 	bl	8004e30 <Displ_WString>

	curve_len = display_align_curve(bufnum);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fdf4 	bl	8001b64 <display_align_curve>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <display_show_curve+0x3bc>)
 8001f82:	801a      	strh	r2, [r3, #0]

	// calculate the new curve
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8001f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	d532      	bpl.n	8001ffc <display_show_curve+0x378>
		// calculate start of first line
		curve_y[0] = y_max - (aligned_curve[0] / scale_factor + y_offset) ;
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <display_show_curve+0x3c0>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa2:	fb91 f3f3 	sdiv	r3, r1, r3
 8001fa6:	b299      	uxth	r1, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	440b      	add	r3, r1
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b24      	ldr	r3, [pc, #144]	; (8002048 <display_show_curve+0x3c4>)
 8001fb6:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8001fb8:	2301      	movs	r3, #1
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fbc:	e017      	b.n	8001fee <display_show_curve+0x36a>
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = y_max - (aligned_curve[pos_x] / scale_factor + y_offset);
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4920      	ldr	r1, [pc, #128]	; (8002044 <display_show_curve+0x3c0>)
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	fb91 f3f3 	sdiv	r3, r1, r3
 8001fd2:	b299      	uxth	r1, r3
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	440b      	add	r3, r1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <display_show_curve+0x3c4>)
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	3301      	adds	r3, #1
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <display_show_curve+0x3bc>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	dbe1      	blt.n	8001fbe <display_show_curve+0x33a>
 8001ffa:	e045      	b.n	8002088 <display_show_curve+0x404>
		}
	} else {
		// calculate start of first line
		curve_y[0] = y_max - (aligned_curve[0] * scale_factor + y_offset) ;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <display_show_curve+0x3c0>)
 8002002:	8819      	ldrh	r1, [r3, #0]
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	b29b      	uxth	r3, r3
 8002008:	fb11 f303 	smulbb	r3, r1, r3
 800200c:	b299      	uxth	r1, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	b29b      	uxth	r3, r3
 8002012:	440b      	add	r3, r1
 8002014:	b29b      	uxth	r3, r3
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <display_show_curve+0x3c4>)
 800201c:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 800201e:	2301      	movs	r3, #1
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
 8002022:	e02b      	b.n	800207c <display_show_curve+0x3f8>
 8002024:	200000c4 	.word	0x200000c4
 8002028:	0800c1dc 	.word	0x0800c1dc
 800202c:	2000089c 	.word	0x2000089c
 8002030:	2000000c 	.word	0x2000000c
 8002034:	0800c1e0 	.word	0x0800c1e0
 8002038:	20000018 	.word	0x20000018
 800203c:	0800c1e4 	.word	0x0800c1e4
 8002040:	20000898 	.word	0x20000898
 8002044:	200004d8 	.word	0x200004d8
 8002048:	20000118 	.word	0x20000118
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = y_max - aligned_curve[pos_x] * scale_factor + y_offset;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	b29a      	uxth	r2, r3
 8002050:	4915      	ldr	r1, [pc, #84]	; (80020a8 <display_show_curve+0x424>)
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8002058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205a:	b29b      	uxth	r3, r3
 800205c:	fb11 f303 	smulbb	r3, r1, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29a      	uxth	r2, r3
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	b29b      	uxth	r3, r3
 800206a:	4413      	add	r3, r2
 800206c:	b299      	uxth	r1, r3
 800206e:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <display_show_curve+0x428>)
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	3301      	adds	r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <display_show_curve+0x42c>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	4293      	cmp	r3, r2
 8002086:	dbe1      	blt.n	800204c <display_show_curve+0x3c8>
		}
	}

	draw_curve(channel_colour[bufnum]);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <display_show_curve+0x430>)
 800208c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fd35 	bl	8001b00 <draw_curve>

	lastbuf = bufnum;
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <display_show_curve+0x434>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	7013      	strb	r3, [r2, #0]
 800209c:	e000      	b.n	80020a0 <display_show_curve+0x41c>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 800209e:	bf00      	nop
}
 80020a0:	373c      	adds	r7, #60	; 0x3c
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004d8 	.word	0x200004d8
 80020ac:	20000118 	.word	0x20000118
 80020b0:	20000898 	.word	0x20000898
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000008 	.word	0x20000008

080020bc <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80020c0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80020c4:	490d      	ldr	r1, [pc, #52]	; (80020fc <start_adcs+0x40>)
 80020c6:	480e      	ldr	r0, [pc, #56]	; (8002100 <start_adcs+0x44>)
 80020c8:	f003 fcec 	bl	8005aa4 <HAL_ADC_Start_DMA>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <start_adcs+0x48>)
 80020d4:	f001 f9ea 	bl	80034ac <term_print>
  	  Error_Handler();
 80020d8:	f000 fe2a 	bl	8002d30 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80020dc:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80020e0:	4909      	ldr	r1, [pc, #36]	; (8002108 <start_adcs+0x4c>)
 80020e2:	480a      	ldr	r0, [pc, #40]	; (800210c <start_adcs+0x50>)
 80020e4:	f003 fcde 	bl	8005aa4 <HAL_ADC_Start_DMA>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 80020ee:	4808      	ldr	r0, [pc, #32]	; (8002110 <start_adcs+0x54>)
 80020f0:	f001 f9dc 	bl	80034ac <term_print>
 	  Error_Handler();
 80020f4:	f000 fe1c 	bl	8002d30 <Error_Handler>
	}
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000c08 	.word	0x20000c08
 8002100:	200008bc 	.word	0x200008bc
 8002104:	0800c1e8 	.word	0x0800c1e8
 8002108:	20002648 	.word	0x20002648
 800210c:	20000904 	.word	0x20000904
 8002110:	0800c204 	.word	0x0800c204

08002114 <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	460a      	mov	r2, r1
 800211e:	80fb      	strh	r3, [r7, #6]
 8002120:	4613      	mov	r3, r2
 8002122:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800212a:	4293      	cmp	r3, r2
 800212c:	d803      	bhi.n	8002136 <adjust_TIM2_period+0x22>
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002134:	d205      	bcs.n	8002142 <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4619      	mov	r1, r3
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <adjust_TIM2_period+0x48>)
 800213c:	f001 f9b6 	bl	80034ac <term_print>
		return;
 8002140:	e008      	b.n	8002154 <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 8002142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4619      	mov	r1, r3
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <adjust_TIM2_period+0x4c>)
 8002150:	f001 f9ac 	bl	80034ac <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	0800c220 	.word	0x0800c220
 8002160:	0800c240 	.word	0x0800c240

08002164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b087      	sub	sp, #28
 8002168:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216a:	f003 fbc1 	bl	80058f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800216e:	f000 f9f9 	bl	8002564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002172:	f000 fc3d 	bl	80029f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002176:	f000 fbfd 	bl	8002974 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800217a:	f000 fba7 	bl	80028cc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800217e:	f000 fb59 	bl	8002834 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002182:	f000 fa61 	bl	8002648 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002186:	f000 fabf 	bl	8002708 <MX_ADC2_Init>
  MX_SPI2_Init();
 800218a:	f000 fb1d 	bl	80027c8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800218e:	f000 fbc7 	bl	8002920 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  Displ_Init(Displ_Orientat_90); // initialize the display and set the initial display orientation (90°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002192:	2001      	movs	r0, #1
 8002194:	f001 fc3c 	bl	8003a10 <Displ_Init>
#endif

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8002198:	2201      	movs	r2, #1
 800219a:	4986      	ldr	r1, [pc, #536]	; (80023b4 <main+0x250>)
 800219c:	4886      	ldr	r0, [pc, #536]	; (80023b8 <main+0x254>)
 800219e:	f006 ffd6 	bl	800914e <HAL_UART_Receive_IT>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <main+0x48>
    Error_Handler();
 80021a8:	f000 fdc2 	bl	8002d30 <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80021ac:	4883      	ldr	r0, [pc, #524]	; (80023bc <main+0x258>)
 80021ae:	f006 fab3 	bl	8008718 <HAL_TIM_Base_Start_IT>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <main+0x58>
     Error_Handler();
 80021b8:	f000 fdba 	bl	8002d30 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 80021bc:	f7ff ff7e 	bl	80020bc <start_adcs>

#ifdef USE_DISPLAY
  // Draw initial TFT Display
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance.
 80021c0:	2000      	movs	r0, #0
 80021c2:	f001 fe93 	bl	8003eec <Displ_CLS>
  Displ_Line(0, 160, 479, 160, BLUE);
 80021c6:	231f      	movs	r3, #31
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	23a0      	movs	r3, #160	; 0xa0
 80021cc:	f240 12df 	movw	r2, #479	; 0x1df
 80021d0:	21a0      	movs	r1, #160	; 0xa0
 80021d2:	2000      	movs	r0, #0
 80021d4:	f002 f873 	bl	80042be <Displ_Line>
  Displ_Line(0, 140, 240, 140, RED);
 80021d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	238c      	movs	r3, #140	; 0x8c
 80021e0:	22f0      	movs	r2, #240	; 0xf0
 80021e2:	218c      	movs	r1, #140	; 0x8c
 80021e4:	2000      	movs	r0, #0
 80021e6:	f002 f86a 	bl	80042be <Displ_Line>
  Displ_WString(10, 10, "10,10" , Font20, 1, RED, WHITE);
 80021ea:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <main+0x25c>)
 80021ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f0:	9204      	str	r2, [sp, #16]
 80021f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021f6:	9203      	str	r2, [sp, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	9202      	str	r2, [sp, #8]
 80021fc:	466c      	mov	r4, sp
 80021fe:	1d1a      	adds	r2, r3, #4
 8002200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002204:	e884 0003 	stmia.w	r4, {r0, r1}
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <main+0x260>)
 800220c:	210a      	movs	r1, #10
 800220e:	200a      	movs	r0, #10
 8002210:	f002 fe0e 	bl	8004e30 <Displ_WString>
  Displ_WString(380, 10, "380,10" , Font20, 1, RED, WHITE);
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <main+0x25c>)
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	9204      	str	r2, [sp, #16]
 800221c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002220:	9203      	str	r2, [sp, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	9202      	str	r2, [sp, #8]
 8002226:	466c      	mov	r4, sp
 8002228:	1d1a      	adds	r2, r3, #4
 800222a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800222e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a64      	ldr	r2, [pc, #400]	; (80023c8 <main+0x264>)
 8002236:	210a      	movs	r1, #10
 8002238:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800223c:	f002 fdf8 	bl	8004e30 <Displ_WString>
  Displ_WString(10, 300, "10,300" , Font20, 1, RED, WHITE);
 8002240:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <main+0x25c>)
 8002242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002246:	9204      	str	r2, [sp, #16]
 8002248:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800224c:	9203      	str	r2, [sp, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	9202      	str	r2, [sp, #8]
 8002252:	466c      	mov	r4, sp
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800225a:	e884 0003 	stmia.w	r4, {r0, r1}
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a5a      	ldr	r2, [pc, #360]	; (80023cc <main+0x268>)
 8002262:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002266:	200a      	movs	r0, #10
 8002268:	f002 fde2 	bl	8004e30 <Displ_WString>
  Displ_BackLight('1');
 800226c:	2031      	movs	r0, #49	; 0x31
 800226e:	f002 fe1f 	bl	8004eb0 <Displ_BackLight>
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8002272:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <main+0x26c>)
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	2301      	movs	r3, #1
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	4a55      	ldr	r2, [pc, #340]	; (80023d4 <main+0x270>)
 800227e:	4956      	ldr	r1, [pc, #344]	; (80023d8 <main+0x274>)
 8002280:	4856      	ldr	r0, [pc, #344]	; (80023dc <main+0x278>)
 8002282:	f007 ff31 	bl	800a0e8 <siprintf>
  if (HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8002286:	4855      	ldr	r0, [pc, #340]	; (80023dc <main+0x278>)
 8002288:	f7fd ffc2 	bl	8000210 <strlen>
 800228c:	4603      	mov	r3, r0
 800228e:	b29a      	uxth	r2, r3
 8002290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002294:	4951      	ldr	r1, [pc, #324]	; (80023dc <main+0x278>)
 8002296:	4848      	ldr	r0, [pc, #288]	; (80023b8 <main+0x254>)
 8002298:	f006 fec7 	bl	800902a <HAL_UART_Transmit>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <main+0x142>
    Error_Handler();
 80022a2:	f000 fd45 	bl	8002d30 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 80022a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	4619      	mov	r1, r3
 80022ae:	484c      	ldr	r0, [pc, #304]	; (80023e0 <main+0x27c>)
 80022b0:	f001 f8fc 	bl	80034ac <term_print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle UART communication
	  if (rx_cmd_ready) {
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <main+0x280>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <main+0x16a>
		  CMD_Handler((uint8_t*)rx_buff);
 80022bc:	484a      	ldr	r0, [pc, #296]	; (80023e8 <main+0x284>)
 80022be:	f7ff fbff 	bl	8001ac0 <CMD_Handler>
		  rx_count = 0;
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <main+0x288>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <main+0x280>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <main+0x28c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <main+0x17c>
		  adc_restart = 0;
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <main+0x28c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 80022dc:	f7ff feee 	bl	80020bc <start_adcs>
	  }

	  if (show_buffer) {
 80022e0:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <main+0x290>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <main+0x198>
		  term_show_buffer(show_buffer-1);
 80022e8:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <main+0x290>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f8ff 	bl	80034f4 <term_show_buffer>
		  show_buffer = 0;
 80022f6:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <main+0x290>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
	  }
	  if (csv_buffer) {
 80022fc:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <main+0x294>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <main+0x1b4>
  	  	  term_csv_buffer(csv_buffer-1);
 8002304:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <main+0x294>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	3b01      	subs	r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f001 f9e9 	bl	80036e4 <term_csv_buffer>
	  	  csv_buffer = 0;
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <main+0x294>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
	  }

	  if (new_time_period) {
 8002318:	4b38      	ldr	r3, [pc, #224]	; (80023fc <main+0x298>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <main+0x1ce>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <main+0x298>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fef4 	bl	8002114 <adjust_TIM2_period>
		  new_time_period = 0;
 800232c:	4b33      	ldr	r3, [pc, #204]	; (80023fc <main+0x298>)
 800232e:	2200      	movs	r2, #0
 8002330:	801a      	strh	r2, [r3, #0]
	  }

#ifdef USE_DISPLAY
	  if (cmd_display_buffer) {
 8002332:	4b33      	ldr	r3, [pc, #204]	; (8002400 <main+0x29c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <main+0x1ea>
		  display_show_curve(cmd_display_buffer-1);
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <main+0x29c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc9e 	bl	8001c84 <display_show_curve>
	  	  cmd_display_buffer = 0;
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <main+0x29c>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
	  }

	  if (tft_display) {
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <main+0x2a0>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <main+0x234>
		  if (tft_display == 9) {
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <main+0x2a0>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b09      	cmp	r3, #9
 800235c:	d10e      	bne.n	800237c <main+0x218>
			  term_print("Running TFT performance test ...\r\n");
 800235e:	482a      	ldr	r0, [pc, #168]	; (8002408 <main+0x2a4>)
 8002360:	f001 f8a4 	bl	80034ac <term_print>
			  Displ_BackLight('1');
 8002364:	2031      	movs	r0, #49	; 0x31
 8002366:	f002 fda3 	bl	8004eb0 <Displ_BackLight>
			  //Displ_PerfTest();
			  Displ_TestAll();
 800236a:	f003 fa6b 	bl	8005844 <Displ_TestAll>
			  Displ_BackLight('0');
 800236e:	2030      	movs	r0, #48	; 0x30
 8002370:	f002 fd9e 	bl	8004eb0 <Displ_BackLight>
			  term_print("....completed\r\n");
 8002374:	4825      	ldr	r0, [pc, #148]	; (800240c <main+0x2a8>)
 8002376:	f001 f899 	bl	80034ac <term_print>
 800237a:	e00a      	b.n	8002392 <main+0x22e>
		  } else {
			  if (tft_display == 1) {
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <main+0x2a0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d103      	bne.n	800238c <main+0x228>
				  Displ_BackLight('0');
 8002384:	2030      	movs	r0, #48	; 0x30
 8002386:	f002 fd93 	bl	8004eb0 <Displ_BackLight>
 800238a:	e002      	b.n	8002392 <main+0x22e>
			  } else {
				  Displ_BackLight('1');
 800238c:	2031      	movs	r0, #49	; 0x31
 800238e:	f002 fd8f 	bl	8004eb0 <Displ_BackLight>
			  }
		  }
		  tft_display = 0;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <main+0x2a0>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
	  }
#endif

	  if (led_cmd) {
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <main+0x2ac>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d043      	beq.n	8002428 <main+0x2c4>
		  if (led_cmd > 1) {
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <main+0x2ac>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d937      	bls.n	8002418 <main+0x2b4>
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2120      	movs	r1, #32
 80023ac:	4819      	ldr	r0, [pc, #100]	; (8002414 <main+0x2b0>)
 80023ae:	f004 fdf9 	bl	8006fa4 <HAL_GPIO_WritePin>
 80023b2:	e036      	b.n	8002422 <main+0x2be>
 80023b4:	20000bd6 	.word	0x20000bd6
 80023b8:	20000b0c 	.word	0x20000b0c
 80023bc:	20000ac4 	.word	0x20000ac4
 80023c0:	20000018 	.word	0x20000018
 80023c4:	0800c250 	.word	0x0800c250
 80023c8:	0800c258 	.word	0x0800c258
 80023cc:	0800c260 	.word	0x0800c260
 80023d0:	0800dfe0 	.word	0x0800dfe0
 80023d4:	0800dfdc 	.word	0x0800dfdc
 80023d8:	0800c268 	.word	0x0800c268
 80023dc:	20000b94 	.word	0x20000b94
 80023e0:	0800c27c 	.word	0x0800c27c
 80023e4:	20000bec 	.word	0x20000bec
 80023e8:	20000bd8 	.word	0x20000bd8
 80023ec:	20000bd4 	.word	0x20000bd4
 80023f0:	20000bed 	.word	0x20000bed
 80023f4:	20000bee 	.word	0x20000bee
 80023f8:	20000bf0 	.word	0x20000bf0
 80023fc:	20000bf4 	.word	0x20000bf4
 8002400:	20000bef 	.word	0x20000bef
 8002404:	20000bf2 	.word	0x20000bf2
 8002408:	0800c28c 	.word	0x0800c28c
 800240c:	0800c2b0 	.word	0x0800c2b0
 8002410:	20000bf1 	.word	0x20000bf1
 8002414:	40020000 	.word	0x40020000
		  } else {
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	2120      	movs	r1, #32
 800241c:	4846      	ldr	r0, [pc, #280]	; (8002538 <main+0x3d4>)
 800241e:	f004 fdc1 	bl	8006fa4 <HAL_GPIO_WritePin>
		  }
		  led_cmd = 0;
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <main+0x3d8>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <main+0x3dc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	dc0b      	bgt.n	8002448 <main+0x2e4>
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <main+0x3e0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	dc07      	bgt.n	8002448 <main+0x2e4>
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <main+0x3e4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	dc03      	bgt.n	8002448 <main+0x2e4>
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <main+0x3e8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	dd28      	ble.n	800249a <main+0x336>
		  term_print("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 8002448:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <main+0x3dc>)
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <main+0x3e0>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <main+0x3e4>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <main+0x3e8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4603      	mov	r3, r0
 800245c:	483c      	ldr	r0, [pc, #240]	; (8002550 <main+0x3ec>)
 800245e:	f001 f825 	bl	80034ac <term_print>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <main+0x3dc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	dd02      	ble.n	8002470 <main+0x30c>
 800246a:	4b35      	ldr	r3, [pc, #212]	; (8002540 <main+0x3dc>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8002470:	4b34      	ldr	r3, [pc, #208]	; (8002544 <main+0x3e0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	dd02      	ble.n	800247e <main+0x31a>
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <main+0x3e0>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <main+0x3e4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	dd02      	ble.n	800248c <main+0x328>
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <main+0x3e4>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <main+0x3e8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	dd02      	ble.n	800249a <main+0x336>
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <main+0x3e8>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <main+0x3dc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dd0e      	ble.n	80024c0 <main+0x35c>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80024a2:	2100      	movs	r1, #0
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fd1d 	bl	8000ee4 <calc_process_dma_buffer>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <main+0x352>
			  term_print("Processing ADC1 DMA 1st half failed\r\n");
 80024b0:	4828      	ldr	r0, [pc, #160]	; (8002554 <main+0x3f0>)
 80024b2:	f000 fffb 	bl	80034ac <term_print>
		  }
		  adc1_dma_l_count--;
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <main+0x3dc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	4a20      	ldr	r2, [pc, #128]	; (8002540 <main+0x3dc>)
 80024be:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <main+0x3e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dd0e      	ble.n	80024e6 <main+0x382>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 80024c8:	2100      	movs	r1, #0
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fd0a 	bl	8000ee4 <calc_process_dma_buffer>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <main+0x378>
	  		term_print("Processing ADC1 DMA 2nd half failed\r\n");
 80024d6:	4820      	ldr	r0, [pc, #128]	; (8002558 <main+0x3f4>)
 80024d8:	f000 ffe8 	bl	80034ac <term_print>
	  	  }
	  	  adc1_dma_h_count--;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <main+0x3e0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	4a18      	ldr	r2, [pc, #96]	; (8002544 <main+0x3e0>)
 80024e4:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <main+0x3e4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dd0e      	ble.n	800250c <main+0x3a8>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 80024ee:	2101      	movs	r1, #1
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fcf7 	bl	8000ee4 <calc_process_dma_buffer>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <main+0x39e>
	  		term_print("Processing ADC2 DMA 1st half failed\r\n");
 80024fc:	4817      	ldr	r0, [pc, #92]	; (800255c <main+0x3f8>)
 80024fe:	f000 ffd5 	bl	80034ac <term_print>
	  	  }
	  	  adc2_dma_l_count--;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <main+0x3e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3b01      	subs	r3, #1
 8002508:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <main+0x3e4>)
 800250a:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <main+0x3e8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f77f aecf 	ble.w	80022b4 <main+0x150>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8002516:	2101      	movs	r1, #1
 8002518:	2001      	movs	r0, #1
 800251a:	f7fe fce3 	bl	8000ee4 <calc_process_dma_buffer>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <main+0x3c6>
	  		term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8002524:	480e      	ldr	r0, [pc, #56]	; (8002560 <main+0x3fc>)
 8002526:	f000 ffc1 	bl	80034ac <term_print>
	  	  }
	   	  adc2_dma_h_count--;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <main+0x3e8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <main+0x3e8>)
 8002532:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 8002534:	e6be      	b.n	80022b4 <main+0x150>
 8002536:	bf00      	nop
 8002538:	40020000 	.word	0x40020000
 800253c:	20000bf1 	.word	0x20000bf1
 8002540:	20000bf8 	.word	0x20000bf8
 8002544:	20000bfc 	.word	0x20000bfc
 8002548:	20000c00 	.word	0x20000c00
 800254c:	20000c04 	.word	0x20000c04
 8002550:	0800c2c0 	.word	0x0800c2c0
 8002554:	0800c2ec 	.word	0x0800c2ec
 8002558:	0800c314 	.word	0x0800c314
 800255c:	0800c33c 	.word	0x0800c33c
 8002560:	0800c364 	.word	0x0800c364

08002564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b094      	sub	sp, #80	; 0x50
 8002568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	2234      	movs	r2, #52	; 0x34
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f007 ff58 	bl	800a428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <SystemClock_Config+0xdc>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <SystemClock_Config+0xdc>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002596:	6413      	str	r3, [r2, #64]	; 0x40
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <SystemClock_Config+0xdc>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a4:	2300      	movs	r3, #0
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <SystemClock_Config+0xe0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <SystemClock_Config+0xe0>)
 80025ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <SystemClock_Config+0xe0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c4:	2301      	movs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c8:	2310      	movs	r3, #16
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025cc:	2302      	movs	r3, #2
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025d4:	2308      	movs	r3, #8
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80025d8:	23b4      	movs	r3, #180	; 0xb4
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025dc:	2302      	movs	r3, #2
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025e0:	2302      	movs	r3, #2
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 f8cb 	bl	8007788 <HAL_RCC_OscConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80025f8:	f000 fb9a 	bl	8002d30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025fc:	f004 fd2a 	bl	8007054 <HAL_PWREx_EnableOverDrive>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002606:	f000 fb93 	bl	8002d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260a:	230f      	movs	r3, #15
 800260c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	2302      	movs	r3, #2
 8002610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800261a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2105      	movs	r1, #5
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fd63 	bl	80070f4 <HAL_RCC_ClockConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002634:	f000 fb7c 	bl	8002d30 <Error_Handler>
  }
}
 8002638:	bf00      	nop
 800263a:	3750      	adds	r7, #80	; 0x50
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000

08002648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800264e:	463b      	mov	r3, r7
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <MX_ADC1_Init+0xb8>)
 800265c:	4a29      	ldr	r2, [pc, #164]	; (8002704 <MX_ADC1_Init+0xbc>)
 800265e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <MX_ADC1_Init+0xb8>)
 8002662:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002666:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <MX_ADC1_Init+0xb8>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <MX_ADC1_Init+0xb8>)
 8002670:	2201      	movs	r2, #1
 8002672:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <MX_ADC1_Init+0xb8>)
 8002676:	2200      	movs	r2, #0
 8002678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <MX_ADC1_Init+0xb8>)
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_ADC1_Init+0xb8>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <MX_ADC1_Init+0xb8>)
 800268c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <MX_ADC1_Init+0xb8>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <MX_ADC1_Init+0xb8>)
 800269a:	2202      	movs	r2, #2
 800269c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <MX_ADC1_Init+0xb8>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <MX_ADC1_Init+0xb8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026ac:	4814      	ldr	r0, [pc, #80]	; (8002700 <MX_ADC1_Init+0xb8>)
 80026ae:	f003 f9b5 	bl	8005a1c <HAL_ADC_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80026b8:	f000 fb3a 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026bc:	2300      	movs	r3, #0
 80026be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80026c0:	2301      	movs	r3, #1
 80026c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80026c4:	2303      	movs	r3, #3
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <MX_ADC1_Init+0xb8>)
 80026ce:	f003 faf9 	bl	8005cc4 <HAL_ADC_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80026d8:	f000 fb2a 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80026dc:	230a      	movs	r3, #10
 80026de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80026e0:	2302      	movs	r3, #2
 80026e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e4:	463b      	mov	r3, r7
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_ADC1_Init+0xb8>)
 80026ea:	f003 faeb 	bl	8005cc4 <HAL_ADC_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80026f4:	f000 fb1c 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200008bc 	.word	0x200008bc
 8002704:	40012000 	.word	0x40012000

08002708 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800271c:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <MX_ADC2_Init+0xbc>)
 800271e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002722:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002726:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002730:	2201      	movs	r2, #1
 8002732:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002736:	2200      	movs	r2, #0
 8002738:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800274c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800275a:	2202      	movs	r2, #2
 800275c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_ADC2_Init+0xb8>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800276c:	4814      	ldr	r0, [pc, #80]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800276e:	f003 f955 	bl	8005a1c <HAL_ADC_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8002778:	f000 fada 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800277c:	2301      	movs	r3, #1
 800277e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002780:	2301      	movs	r3, #1
 8002782:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002784:	2303      	movs	r3, #3
 8002786:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	480c      	ldr	r0, [pc, #48]	; (80027c0 <MX_ADC2_Init+0xb8>)
 800278e:	f003 fa99 	bl	8005cc4 <HAL_ADC_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8002798:	f000 faca 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800279c:	230b      	movs	r3, #11
 800279e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80027a0:	2302      	movs	r3, #2
 80027a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_ADC2_Init+0xb8>)
 80027aa:	f003 fa8b 	bl	8005cc4 <HAL_ADC_ConfigChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80027b4:	f000 fabc 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000904 	.word	0x20000904
 80027c4:	40012100 	.word	0x40012100

080027c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_SPI2_Init+0x64>)
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <MX_SPI2_Init+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <MX_SPI2_Init+0x64>)
 80027d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_SPI2_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <MX_SPI2_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_SPI2_Init+0x64>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_SPI2_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_SPI2_Init+0x64>)
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_SPI2_Init+0x64>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <MX_SPI2_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_SPI2_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <MX_SPI2_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_SPI2_Init+0x64>)
 8002814:	220a      	movs	r2, #10
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_SPI2_Init+0x64>)
 800281a:	f005 fa53 	bl	8007cc4 <HAL_SPI_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002824:	f000 fa84 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000a0c 	.word	0x20000a0c
 8002830:	40003800 	.word	0x40003800

08002834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002848:	463b      	mov	r3, r7
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <MX_TIM2_Init+0x94>)
 8002852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <MX_TIM2_Init+0x94>)
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <MX_TIM2_Init+0x94>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <MX_TIM2_Init+0x94>)
 8002866:	f640 02ee 	movw	r2, #2286	; 0x8ee
 800286a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <MX_TIM2_Init+0x94>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <MX_TIM2_Init+0x94>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002878:	4813      	ldr	r0, [pc, #76]	; (80028c8 <MX_TIM2_Init+0x94>)
 800287a:	f005 fefd 	bl	8008678 <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002884:	f000 fa54 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	4619      	mov	r1, r3
 8002894:	480c      	ldr	r0, [pc, #48]	; (80028c8 <MX_TIM2_Init+0x94>)
 8002896:	f006 f8b7 	bl	8008a08 <HAL_TIM_ConfigClockSource>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028a0:	f000 fa46 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028a4:	2320      	movs	r3, #32
 80028a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ac:	463b      	mov	r3, r7
 80028ae:	4619      	mov	r1, r3
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_TIM2_Init+0x94>)
 80028b2:	f006 fadd 	bl	8008e70 <HAL_TIMEx_MasterConfigSynchronization>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028bc:	f000 fa38 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000ac4 	.word	0x20000ac4

080028cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <MX_USART2_UART_Init+0x50>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 8002904:	f006 fb44 	bl	8008f90 <HAL_UART_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290e:	f000 fa0f 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000b0c 	.word	0x20000b0c
 800291c:	40004400 	.word	0x40004400

08002920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_USART3_UART_Init+0x4c>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <MX_USART3_UART_Init+0x50>)
 8002928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_USART3_UART_Init+0x4c>)
 800292c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_USART3_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_USART3_UART_Init+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_USART3_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_USART3_UART_Init+0x4c>)
 8002946:	220c      	movs	r2, #12
 8002948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_USART3_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_USART3_UART_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_USART3_UART_Init+0x4c>)
 8002958:	f006 fb1a 	bl	8008f90 <HAL_UART_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002962:	f000 f9e5 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000b50 	.word	0x20000b50
 8002970:	40004800 	.word	0x40004800

08002974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_DMA_Init+0x78>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <MX_DMA_Init+0x78>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <MX_DMA_Init+0x78>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_DMA_Init+0x78>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <MX_DMA_Init+0x78>)
 80029a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_DMA_Init+0x78>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2100      	movs	r1, #0
 80029b6:	200f      	movs	r0, #15
 80029b8:	f003 fd0f 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80029bc:	200f      	movs	r0, #15
 80029be:	f003 fd28 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2038      	movs	r0, #56	; 0x38
 80029c8:	f003 fd07 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029cc:	2038      	movs	r0, #56	; 0x38
 80029ce:	f003 fd20 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	203a      	movs	r0, #58	; 0x3a
 80029d8:	f003 fcff 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80029dc:	203a      	movs	r0, #58	; 0x3a
 80029de:	f003 fd18 	bl	8006412 <HAL_NVIC_EnableIRQ>

}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a41      	ldr	r2, [pc, #260]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <MX_GPIO_Init+0x178>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8002a76:	2200      	movs	r2, #0
 8002a78:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8002a7c:	483b      	ldr	r0, [pc, #236]	; (8002b6c <MX_GPIO_Init+0x17c>)
 8002a7e:	f004 fa91 	bl	8006fa4 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8002a82:	2201      	movs	r2, #1
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	483a      	ldr	r0, [pc, #232]	; (8002b70 <MX_GPIO_Init+0x180>)
 8002a88:	f004 fa8c 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a92:	4836      	ldr	r0, [pc, #216]	; (8002b6c <MX_GPIO_Init+0x17c>)
 8002a94:	f004 fa86 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	21c0      	movs	r1, #192	; 0xc0
 8002a9c:	4835      	ldr	r0, [pc, #212]	; (8002b74 <MX_GPIO_Init+0x184>)
 8002a9e:	f004 fa81 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482d      	ldr	r0, [pc, #180]	; (8002b70 <MX_GPIO_Init+0x180>)
 8002aba:	f004 f8c7 	bl	8006c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8002abe:	f248 4360 	movw	r3, #33888	; 0x8460
 8002ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4825      	ldr	r0, [pc, #148]	; (8002b6c <MX_GPIO_Init+0x17c>)
 8002ad8:	f004 f8b8 	bl	8006c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	4619      	mov	r1, r3
 8002af2:	481e      	ldr	r0, [pc, #120]	; (8002b6c <MX_GPIO_Init+0x17c>)
 8002af4:	f004 f8aa 	bl	8006c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4818      	ldr	r0, [pc, #96]	; (8002b70 <MX_GPIO_Init+0x180>)
 8002b10:	f004 f89c 	bl	8006c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480f      	ldr	r0, [pc, #60]	; (8002b6c <MX_GPIO_Init+0x17c>)
 8002b2e:	f004 f88d 	bl	8006c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <MX_GPIO_Init+0x184>)
 8002b4a:	f004 f87f 	bl	8006c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2028      	movs	r0, #40	; 0x28
 8002b54:	f003 fc41 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b58:	2028      	movs	r0, #40	; 0x28
 8002b5a:	f003 fc5a 	bl	8006412 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020400 	.word	0x40020400

08002b78 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_ADC_ConvCpltCallback+0x34>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d105      	bne.n	8002b94 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_ADC_ConvCpltCallback+0x38>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_ADC_ConvCpltCallback+0x38>)
 8002b90:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8002b92:	e004      	b.n	8002b9e <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002b9c:	6013      	str	r3, [r2, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200008bc 	.word	0x200008bc
 8002bb0:	20000bfc 	.word	0x20000bfc
 8002bb4:	20000c04 	.word	0x20000c04

08002bb8 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002bd0:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8002bd2:	e004      	b.n	8002bde <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8002bd4:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	200008bc 	.word	0x200008bc
 8002bf0:	20000bf8 	.word	0x20000bf8
 8002bf4:	20000c00 	.word	0x20000c00

08002bf8 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <HAL_ADC_ErrorCallback+0x94>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e001      	b.n	8002c12 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d82c      	bhi.n	8002c74 <HAL_ADC_ErrorCallback+0x7c>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_ADC_ErrorCallback+0x28>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c45 	.word	0x08002c45
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c75 	.word	0x08002c75
 8002c30:	08002c65 	.word	0x08002c65
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68f9      	ldr	r1, [r7, #12]
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <HAL_ADC_ErrorCallback+0x98>)
 8002c3e:	f000 fc35 	bl	80034ac <term_print>
		break;
 8002c42:	e01e      	b.n	8002c82 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	4811      	ldr	r0, [pc, #68]	; (8002c94 <HAL_ADC_ErrorCallback+0x9c>)
 8002c4e:	f000 fc2d 	bl	80034ac <term_print>
		break;
 8002c52:	e016      	b.n	8002c82 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	480e      	ldr	r0, [pc, #56]	; (8002c98 <HAL_ADC_ErrorCallback+0xa0>)
 8002c5e:	f000 fc25 	bl	80034ac <term_print>
		break;
 8002c62:	e00e      	b.n	8002c82 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	480b      	ldr	r0, [pc, #44]	; (8002c9c <HAL_ADC_ErrorCallback+0xa4>)
 8002c6e:	f000 fc1d 	bl	80034ac <term_print>
		break;
 8002c72:	e006      	b.n	8002c82 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <HAL_ADC_ErrorCallback+0xa8>)
 8002c7c:	f000 fc16 	bl	80034ac <term_print>
	}
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200008bc 	.word	0x200008bc
 8002c90:	0800c38c 	.word	0x0800c38c
 8002c94:	0800c3a8 	.word	0x0800c3a8
 8002c98:	0800c3cc 	.word	0x0800c3cc
 8002c9c:	0800c3ec 	.word	0x0800c3ec
 8002ca0:	0800c408 	.word	0x0800c408

08002ca4 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	2b13      	cmp	r3, #19
 8002cb2:	d902      	bls.n	8002cba <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4918      	ldr	r1, [pc, #96]	; (8002d20 <HAL_UART_RxCpltCallback+0x7c>)
 8002cbe:	4819      	ldr	r0, [pc, #100]	; (8002d24 <HAL_UART_RxCpltCallback+0x80>)
 8002cc0:	f006 fa45 	bl	800914e <HAL_UART_Receive_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d124      	bne.n	8002d14 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_UART_RxCpltCallback+0x7c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d00f      	beq.n	8002cf2 <HAL_UART_RxCpltCallback+0x4e>
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_UART_RxCpltCallback+0x7c>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b0d      	cmp	r3, #13
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	b291      	uxth	r1, r2
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002ce4:	8011      	strh	r1, [r2, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_UART_RxCpltCallback+0x7c>)
 8002cea:	7819      	ldrb	r1, [r3, #0]
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_UART_RxCpltCallback+0x84>)
 8002cee:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 8002cf0:	e010      	b.n	8002d14 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_UART_RxCpltCallback+0x88>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	b291      	uxth	r1, r2
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_UART_RxCpltCallback+0x78>)
 8002d0a:	8011      	strh	r1, [r2, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_UART_RxCpltCallback+0x84>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000bd4 	.word	0x20000bd4
 8002d20:	20000bd6 	.word	0x20000bd6
 8002d24:	20000b0c 	.word	0x20000b0c
 8002d28:	20000bd8 	.word	0x20000bd8
 8002d2c:	20000bec 	.word	0x20000bec

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <Error_Handler+0x10>)
 8002d36:	f007 fb65 	bl	800a404 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3a:	b672      	cpsid	i
}
 8002d3c:	bf00      	nop
    __disable_irq();
    while (1)
 8002d3e:	e7fe      	b.n	8002d3e <Error_Handler+0xe>
 8002d40:	0800c428 	.word	0x0800c428

08002d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d82:	2007      	movs	r0, #7
 8002d84:	f003 fb1e 	bl	80063c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <HAL_ADC_MspInit+0x204>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d173      	bne.n	8002e9e <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	4b78      	ldr	r3, [pc, #480]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a77      	ldr	r2, [pc, #476]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b75      	ldr	r3, [pc, #468]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	4b71      	ldr	r3, [pc, #452]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a70      	ldr	r2, [pc, #448]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4860      	ldr	r0, [pc, #384]	; (8002fa0 <HAL_ADC_MspInit+0x20c>)
 8002e1e:	f003 ff15 	bl	8006c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e22:	2301      	movs	r3, #1
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e26:	2303      	movs	r3, #3
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e32:	4619      	mov	r1, r3
 8002e34:	485b      	ldr	r0, [pc, #364]	; (8002fa4 <HAL_ADC_MspInit+0x210>)
 8002e36:	f003 ff09 	bl	8006c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e3c:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <HAL_ADC_MspInit+0x218>)
 8002e3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e40:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e46:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4c:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e52:	4b55      	ldr	r3, [pc, #340]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e5a:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e72:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e78:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e80:	4849      	ldr	r0, [pc, #292]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e82:	f003 fae1 	bl	8006448 <HAL_DMA_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002e8c:	f7ff ff50 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a45      	ldr	r2, [pc, #276]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
 8002e96:	4a44      	ldr	r2, [pc, #272]	; (8002fa8 <HAL_ADC_MspInit+0x214>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e9c:	e078      	b.n	8002f90 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <HAL_ADC_MspInit+0x21c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d173      	bne.n	8002f90 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_ADC_MspInit+0x208>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002efc:	2302      	movs	r3, #2
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f00:	2303      	movs	r3, #3
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4824      	ldr	r0, [pc, #144]	; (8002fa0 <HAL_ADC_MspInit+0x20c>)
 8002f10:	f003 fe9c 	bl	8006c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f14:	2302      	movs	r3, #2
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	481f      	ldr	r0, [pc, #124]	; (8002fa4 <HAL_ADC_MspInit+0x210>)
 8002f28:	f003 fe90 	bl	8006c4c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f2e:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_ADC_MspInit+0x224>)
 8002f30:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f38:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f54:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f64:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f6c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002f74:	480f      	ldr	r0, [pc, #60]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f76:	f003 fa67 	bl	8006448 <HAL_DMA_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8002f80:	f7ff fed6 	bl	8002d30 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_ADC_MspInit+0x220>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f90:	bf00      	nop
 8002f92:	3738      	adds	r7, #56	; 0x38
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	2000094c 	.word	0x2000094c
 8002fac:	40026410 	.word	0x40026410
 8002fb0:	40012100 	.word	0x40012100
 8002fb4:	200009ac 	.word	0x200009ac
 8002fb8:	40026440 	.word	0x40026440

08002fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a43      	ldr	r2, [pc, #268]	; (80030e8 <HAL_SPI_MspInit+0x12c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d17f      	bne.n	80030de <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a41      	ldr	r2, [pc, #260]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <HAL_SPI_MspInit+0x130>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_SPI_MspInit+0x130>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_SPI_MspInit+0x130>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8003032:	230c      	movs	r3, #12
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003042:	2305      	movs	r3, #5
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4828      	ldr	r0, [pc, #160]	; (80030f0 <HAL_SPI_MspInit+0x134>)
 800304e:	f003 fdfd 	bl	8006c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8003052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003064:	2305      	movs	r3, #5
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4821      	ldr	r0, [pc, #132]	; (80030f4 <HAL_SPI_MspInit+0x138>)
 8003070:	f003 fdec 	bl	8006c4c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 8003076:	4a21      	ldr	r2, [pc, #132]	; (80030fc <HAL_SPI_MspInit+0x140>)
 8003078:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 800307c:	2200      	movs	r2, #0
 800307e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 800308e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003092:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80030b2:	4811      	ldr	r0, [pc, #68]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 80030b4:	f003 f9c8 	bl	8006448 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80030be:	f7ff fe37 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 80030c6:	649a      	str	r2, [r3, #72]	; 0x48
 80030c8:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <HAL_SPI_MspInit+0x13c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2024      	movs	r0, #36	; 0x24
 80030d4:	f003 f981 	bl	80063da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030d8:	2024      	movs	r0, #36	; 0x24
 80030da:	f003 f99a 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40003800 	.word	0x40003800
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020400 	.word	0x40020400
 80030f8:	20000a64 	.word	0x20000a64
 80030fc:	40026070 	.word	0x40026070

08003100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d115      	bne.n	800313e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	201c      	movs	r0, #28
 8003134:	f003 f951 	bl	80063da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003138:	201c      	movs	r0, #28
 800313a:	f003 f96a 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	; 0x30
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a36      	ldr	r2, [pc, #216]	; (8003244 <HAL_UART_MspInit+0xf8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d134      	bne.n	80031d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a34      	ldr	r2, [pc, #208]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a2d      	ldr	r2, [pc, #180]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_UART_MspInit+0xfc>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031a6:	230c      	movs	r3, #12
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031b6:	2307      	movs	r3, #7
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	4822      	ldr	r0, [pc, #136]	; (800324c <HAL_UART_MspInit+0x100>)
 80031c2:	f003 fd43 	bl	8006c4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	2026      	movs	r0, #38	; 0x26
 80031cc:	f003 f905 	bl	80063da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031d0:	2026      	movs	r0, #38	; 0x26
 80031d2:	f003 f91e 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031d6:	e031      	b.n	800323c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_UART_MspInit+0x104>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d12c      	bne.n	800323c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_UART_MspInit+0xfc>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_UART_MspInit+0xfc>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_UART_MspInit+0xfc>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_UART_MspInit+0xfc>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800321a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800321e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003228:	2303      	movs	r3, #3
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800322c:	2307      	movs	r3, #7
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003230:	f107 031c 	add.w	r3, r7, #28
 8003234:	4619      	mov	r1, r3
 8003236:	4807      	ldr	r0, [pc, #28]	; (8003254 <HAL_UART_MspInit+0x108>)
 8003238:	f003 fd08 	bl	8006c4c <HAL_GPIO_Init>
}
 800323c:	bf00      	nop
 800323e:	3730      	adds	r7, #48	; 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40004400 	.word	0x40004400
 8003248:	40023800 	.word	0x40023800
 800324c:	40020000 	.word	0x40020000
 8003250:	40004800 	.word	0x40004800
 8003254:	40020800 	.word	0x40020800

08003258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800325c:	e7fe      	b.n	800325c <NMI_Handler+0x4>

0800325e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <HardFault_Handler+0x4>

08003264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <MemManage_Handler+0x4>

0800326a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <BusFault_Handler+0x4>

08003270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <UsageFault_Handler+0x4>

08003276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a4:	f002 fb76 	bl	8005994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}

080032ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <DMA1_Stream4_IRQHandler+0x10>)
 80032b2:	f003 fa61 	bl	8006778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000a64 	.word	0x20000a64

080032c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <TIM2_IRQHandler+0x18>)
 80032c6:	f005 fa97 	bl	80087f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 80032ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032ce:	4803      	ldr	r0, [pc, #12]	; (80032dc <TIM2_IRQHandler+0x1c>)
 80032d0:	f003 fe81 	bl	8006fd6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000ac4 	.word	0x20000ac4
 80032dc:	40020000 	.word	0x40020000

080032e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <SPI2_IRQHandler+0x10>)
 80032e6:	f004 ff69 	bl	80081bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000a0c 	.word	0x20000a0c

080032f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <USART2_IRQHandler+0x10>)
 80032fa:	f005 ff59 	bl	80091b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000b0c 	.word	0x20000b0c

08003308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800330c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003310:	f003 fe7c 	bl	800700c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <DMA2_Stream0_IRQHandler+0x10>)
 800331e:	f003 fa2b 	bl	8006778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000094c 	.word	0x2000094c

0800332c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <DMA2_Stream2_IRQHandler+0x10>)
 8003332:	f003 fa21 	bl	8006778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200009ac 	.word	0x200009ac

08003340 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e00a      	b.n	8003368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003352:	f3af 8000 	nop.w
 8003356:	4601      	mov	r1, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	60ba      	str	r2, [r7, #8]
 800335e:	b2ca      	uxtb	r2, r1
 8003360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	dbf0      	blt.n	8003352 <_read+0x12>
  }

  return len;
 8003370:	687b      	ldr	r3, [r7, #4]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e009      	b.n	80033a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	60ba      	str	r2, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dbf1      	blt.n	800338c <_write+0x12>
  }
  return len;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_close>:

int _close(int file)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033da:	605a      	str	r2, [r3, #4]
  return 0;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_isatty>:

int _isatty(int file)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <_sbrk+0x5c>)
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <_sbrk+0x60>)
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <_sbrk+0x64>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <_sbrk+0x64>)
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <_sbrk+0x68>)
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	429a      	cmp	r2, r3
 800344a:	d207      	bcs.n	800345c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800344c:	f007 f83a 	bl	800a4c4 <__errno>
 8003450:	4603      	mov	r3, r0
 8003452:	220c      	movs	r2, #12
 8003454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800345a:	e009      	b.n	8003470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <_sbrk+0x64>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <_sbrk+0x64>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	4a05      	ldr	r2, [pc, #20]	; (8003480 <_sbrk+0x64>)
 800346c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20020000 	.word	0x20020000
 800347c:	00000400 	.word	0x00000400
 8003480:	200067e8 	.word	0x200067e8
 8003484:	200071d0 	.word	0x200071d0

08003488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <SystemInit+0x20>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <SystemInit+0x20>)
 8003494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 80034ac:	b40f      	push	{r0, r1, r2, r3}
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	480a      	ldr	r0, [pc, #40]	; (80034ec <term_print+0x40>)
 80034c2:	f006 ff91 	bl	800a3e8 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 80034c6:	4809      	ldr	r0, [pc, #36]	; (80034ec <term_print+0x40>)
 80034c8:	f7fc fea2 	bl	8000210 <strlen>
 80034cc:	4603      	mov	r3, r0
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d4:	4905      	ldr	r1, [pc, #20]	; (80034ec <term_print+0x40>)
 80034d6:	4806      	ldr	r0, [pc, #24]	; (80034f0 <term_print+0x44>)
 80034d8:	f005 fda7 	bl	800902a <HAL_UART_Transmit>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e8:	b004      	add	sp, #16
 80034ea:	4770      	bx	lr
 80034ec:	200067ec 	.word	0x200067ec
 80034f0:	20000b0c 	.word	0x20000b0c

080034f4 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d838      	bhi.n	800357e <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4619      	mov	r1, r3
 8003510:	481d      	ldr	r0, [pc, #116]	; (8003588 <term_show_buffer+0x94>)
 8003512:	f7ff ffcb 	bl	80034ac <term_print>
	term_print("%3d: ", 0);
 8003516:	2100      	movs	r1, #0
 8003518:	481c      	ldr	r0, [pc, #112]	; (800358c <term_show_buffer+0x98>)
 800351a:	f7ff ffc7 	bl	80034ac <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e020      	b.n	8003566 <term_show_buffer+0x72>
		if (count >= 20) {
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b13      	cmp	r3, #19
 8003528:	dd06      	ble.n	8003538 <term_show_buffer+0x44>
			count =0;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 800352e:	8a7b      	ldrh	r3, [r7, #18]
 8003530:	4619      	mov	r1, r3
 8003532:	4817      	ldr	r0, [pc, #92]	; (8003590 <term_show_buffer+0x9c>)
 8003534:	f7ff ffba 	bl	80034ac <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	4916      	ldr	r1, [pc, #88]	; (8003594 <term_show_buffer+0xa0>)
 800353c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003540:	fb03 f202 	mul.w	r2, r3, r2
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800354c:	4619      	mov	r1, r3
 800354e:	4812      	ldr	r0, [pc, #72]	; (8003598 <term_show_buffer+0xa4>)
 8003550:	f7ff ffac 	bl	80034ac <term_print>
		count++; address++;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	8a7b      	ldrh	r3, [r7, #18]
 800355c:	3301      	adds	r3, #1
 800355e:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800356c:	d3da      	bcc.n	8003524 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 800356e:	480b      	ldr	r0, [pc, #44]	; (800359c <term_show_buffer+0xa8>)
 8003570:	f7ff ff9c 	bl	80034ac <term_print>
	term_show_measurements(bufnum);
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f812 	bl	80035a0 <term_show_measurements>
 800357c:	e000      	b.n	8003580 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800357e:	bf00      	nop
}
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	0800c45c 	.word	0x0800c45c
 800358c:	0800c468 	.word	0x0800c468
 8003590:	0800c470 	.word	0x0800c470
 8003594:	20005ac8 	.word	0x20005ac8
 8003598:	0800c478 	.word	0x0800c478
 800359c:	0800c480 	.word	0x0800c480

080035a0 <term_show_measurements>:

void term_show_measurements(uint8_t bufnum) {
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	f200 8088 	bhi.w	80036c2 <term_show_measurements+0x122>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 80035b2:	79fa      	ldrb	r2, [r7, #7]
 80035b4:	4945      	ldr	r1, [pc, #276]	; (80036cc <term_show_measurements+0x12c>)
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	330c      	adds	r3, #12
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d00c      	beq.n	80035e2 <term_show_measurements+0x42>
		if (calc_measurements(bufnum) != 0) {
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd ff9a 	bl	8001504 <calc_measurements>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <term_show_measurements+0x42>
			term_print("Buffer %d - invalid readings\r\n", bufnum);
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	4619      	mov	r1, r3
 80035da:	483d      	ldr	r0, [pc, #244]	; (80036d0 <term_show_measurements+0x130>)
 80035dc:	f7ff ff66 	bl	80034ac <term_print>
			return; } ;
 80035e0:	e070      	b.n	80036c4 <term_show_measurements+0x124>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80035e2:	79fa      	ldrb	r2, [r7, #7]
 80035e4:	4939      	ldr	r1, [pc, #228]	; (80036cc <term_show_measurements+0x12c>)
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3302      	adds	r3, #2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	4934      	ldr	r1, [pc, #208]	; (80036cc <term_show_measurements+0x12c>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	1ac3      	subs	r3, r0, r3
 8003608:	60fb      	str	r3, [r7, #12]
	term_print("Buffer %d\r\n", bufnum);
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4619      	mov	r1, r3
 800360e:	4831      	ldr	r0, [pc, #196]	; (80036d4 <term_show_measurements+0x134>)
 8003610:	f7ff ff4c 	bl	80034ac <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8003614:	79fa      	ldrb	r2, [r7, #7]
 8003616:	492d      	ldr	r1, [pc, #180]	; (80036cc <term_show_measurements+0x12c>)
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3310      	adds	r3, #16
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe f8ab 	bl	8001784 <calc_adc_raw_to_mv_int>
 800362e:	4604      	mov	r4, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe f8a5 	bl	8001784 <calc_adc_raw_to_mv_int>
 800363a:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	0fda      	lsrs	r2, r3, #31
 8003640:	4413      	add	r3, r2
 8003642:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8003644:	b29b      	uxth	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe f89c 	bl	8001784 <calc_adc_raw_to_mv_int>
 800364c:	4603      	mov	r3, r0
 800364e:	462a      	mov	r2, r5
 8003650:	4621      	mov	r1, r4
 8003652:	4821      	ldr	r0, [pc, #132]	; (80036d8 <term_show_measurements+0x138>)
 8003654:	f7ff ff2a 	bl	80034ac <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8003658:	79fa      	ldrb	r2, [r7, #7]
 800365a:	491c      	ldr	r1, [pc, #112]	; (80036cc <term_show_measurements+0x12c>)
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe f88b 	bl	8001784 <calc_adc_raw_to_mv_int>
 800366e:	4604      	mov	r4, r0
 8003670:	79fa      	ldrb	r2, [r7, #7]
 8003672:	4916      	ldr	r1, [pc, #88]	; (80036cc <term_show_measurements+0x12c>)
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3302      	adds	r3, #2
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe f87e 	bl	8001784 <calc_adc_raw_to_mv_int>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	4621      	mov	r1, r4
 800368e:	4813      	ldr	r0, [pc, #76]	; (80036dc <term_show_measurements+0x13c>)
 8003690:	f7ff ff0c 	bl	80034ac <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8003694:	79fa      	ldrb	r2, [r7, #7]
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <term_show_measurements+0x12c>)
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3304      	adds	r3, #4
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	79fa      	ldrb	r2, [r7, #7]
 80036a8:	4808      	ldr	r0, [pc, #32]	; (80036cc <term_show_measurements+0x12c>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4403      	add	r3, r0
 80036b4:	3308      	adds	r3, #8
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4809      	ldr	r0, [pc, #36]	; (80036e0 <term_show_measurements+0x140>)
 80036bc:	f7ff fef6 	bl	80034ac <term_print>
 80036c0:	e000      	b.n	80036c4 <term_show_measurements+0x124>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80036c2:	bf00      	nop
}
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200000c4 	.word	0x200000c4
 80036d0:	0800c484 	.word	0x0800c484
 80036d4:	0800c45c 	.word	0x0800c45c
 80036d8:	0800c4a4 	.word	0x0800c4a4
 80036dc:	0800c4c8 	.word	0x0800c4c8
 80036e0:	0800c4e0 	.word	0x0800c4e0

080036e4 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d821      	bhi.n	8003738 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	4619      	mov	r1, r3
 80036f8:	4811      	ldr	r0, [pc, #68]	; (8003740 <term_csv_buffer+0x5c>)
 80036fa:	f7ff fed7 	bl	80034ac <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e011      	b.n	8003728 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	490f      	ldr	r1, [pc, #60]	; (8003744 <term_csv_buffer+0x60>)
 8003708:	f44f 7252 	mov.w	r2, #840	; 0x348
 800370c:	fb03 f202 	mul.w	r2, r3, r2
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003718:	461a      	mov	r2, r3
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	480a      	ldr	r0, [pc, #40]	; (8003748 <term_csv_buffer+0x64>)
 800371e:	f7ff fec5 	bl	80034ac <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800372e:	d3e9      	bcc.n	8003704 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8003730:	4806      	ldr	r0, [pc, #24]	; (800374c <term_csv_buffer+0x68>)
 8003732:	f7ff febb 	bl	80034ac <term_print>
 8003736:	e000      	b.n	800373a <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8003738:	bf00      	nop
}
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	0800c45c 	.word	0x0800c45c
 8003744:	20004088 	.word	0x20004088
 8003748:	0800c500 	.word	0x0800c500
 800374c:	0800c508 	.word	0x0800c508

08003750 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	480f      	ldr	r0, [pc, #60]	; (8003794 <Displ_Select+0x44>)
 8003758:	f003 fc0c 	bl	8006f74 <HAL_GPIO_ReadPin>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d015      	beq.n	800378e <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8003762:	2201      	movs	r2, #1
 8003764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <Displ_Select+0x48>)
 800376a:	f003 fc1b 	bl	8006fa4 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <Displ_Select+0x4c>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <Displ_Select+0x4c>)
 8003774:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8003778:	4013      	ands	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <Displ_Select+0x4c>)
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <Displ_Select+0x4c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <Displ_Select+0x44>)
 800378a:	f003 fc0b 	bl	8006fa4 <HAL_GPIO_WritePin>
		}
	}
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40020800 	.word	0x40020800
 8003798:	40020000 	.word	0x40020000
 800379c:	40003800 	.word	0x40003800

080037a0 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6039      	str	r1, [r7, #0]
 80037a8:	4611      	mov	r1, r2
 80037aa:	461a      	mov	r2, r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	460b      	mov	r3, r1
 80037b2:	80bb      	strh	r3, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 80037b8:	bf00      	nop
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <Displ_Transmit+0x100>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0fa      	beq.n	80037ba <Displ_Transmit+0x1a>

	Displ_Select();
 80037c4:	f7ff ffc4 	bl	8003750 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	461a      	mov	r2, r3
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	4835      	ldr	r0, [pc, #212]	; (80038a4 <Displ_Transmit+0x104>)
 80037d0:	f003 fbe8 	bl	8006fa4 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80037d4:	79bb      	ldrb	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d043      	beq.n	8003862 <Displ_Transmit+0xc2>
			*data32=__REV16(*data32);
		}
#else
//if display color format is RGB666: convert RGB565 received by TouchGFX and swap bytes

		uint8_t *buf8Pos=dispBuffer1; 							//using a local pointer
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <Displ_Transmit+0x108>)
 80037dc:	617b      	str	r3, [r7, #20]

		uint16_t *limit=(uint16_t*)(data+dataSize);
 80037de:	88bb      	ldrh	r3, [r7, #4]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e020      	b.n	800382e <Displ_Transmit+0x8e>

			*(buf8Pos++)=((*data16 & 0xF800)>>8);  // R color
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	121b      	asrs	r3, r3, #8
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	6179      	str	r1, [r7, #20]
 80037fa:	f022 0207 	bic.w	r2, r2, #7
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x07E0)>>3);  // G color
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	10db      	asrs	r3, r3, #3
 8003808:	b2da      	uxtb	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1c59      	adds	r1, r3, #1
 800380e:	6179      	str	r1, [r7, #20]
 8003810:	f022 0203 	bic.w	r2, r2, #3
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x001F)<<3);  // B color
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	00d9      	lsls	r1, r3, #3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	617a      	str	r2, [r7, #20]
 8003824:	b2ca      	uxtb	r2, r1
 8003826:	701a      	strb	r2, [r3, #0]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3302      	adds	r3, #2
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	429a      	cmp	r2, r3
 8003834:	bf34      	ite	cc
 8003836:	2301      	movcc	r3, #1
 8003838:	2300      	movcs	r3, #0
 800383a:	b2da      	uxtb	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	491a      	ldr	r1, [pc, #104]	; (80038a8 <Displ_Transmit+0x108>)
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003846:	bfd4      	ite	le
 8003848:	2301      	movle	r3, #1
 800384a:	2300      	movgt	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	4013      	ands	r3, r2
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ca      	bne.n	80037ec <Displ_Transmit+0x4c>
		}

		data=dispBuffer1; 				//data (pointer to data to transfer via SPI) has to point to converted buffer
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <Displ_Transmit+0x108>)
 8003858:	603b      	str	r3, [r7, #0]
		dataSize=(buf8Pos-dispBuffer1);	//and dataSize has to contain the converted buffer size
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <Displ_Transmit+0x108>)
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	80bb      	strh	r3, [r7, #4]
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8003862:	88bb      	ldrh	r3, [r7, #4]
 8003864:	2b13      	cmp	r3, #19
 8003866:	d80d      	bhi.n	8003884 <Displ_Transmit+0xe4>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <Displ_Transmit+0x100>)
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800386e:	88ba      	ldrh	r2, [r7, #4]
 8003870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	480d      	ldr	r0, [pc, #52]	; (80038ac <Displ_Transmit+0x10c>)
 8003878:	f004 faad 	bl	8007dd6 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <Displ_Transmit+0x100>)
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8003882:	e008      	b.n	8003896 <Displ_Transmit+0xf6>
			Displ_SpiAvailable=0;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <Displ_Transmit+0x100>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 800388a:	88bb      	ldrh	r3, [r7, #4]
 800388c:	461a      	mov	r2, r3
 800388e:	6839      	ldr	r1, [r7, #0]
 8003890:	4806      	ldr	r0, [pc, #24]	; (80038ac <Displ_Transmit+0x10c>)
 8003892:	f004 fbdd 	bl	8008050 <HAL_SPI_Transmit_DMA>
	}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000028 	.word	0x20000028
 80038a4:	40020000 	.word	0x40020000
 80038a8:	20006874 	.word	0x20006874
 80038ac:	20000a0c 	.word	0x20000a0c

080038b0 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80038ba:	1df9      	adds	r1, r7, #7
 80038bc:	2300      	movs	r3, #0
 80038be:	2201      	movs	r2, #1
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7ff ff6d 	bl	80037a0 <Displ_Transmit>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	2001      	movs	r0, #1
 80038ec:	f7ff ff58 	bl	80037a0 <Displ_Transmit>
 80038f0:	e000      	b.n	80038f4 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80038f2:	bf00      	nop
}
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	Displ_Select();
 8003900:	f7ff ff26 	bl	8003750 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8003904:	2200      	movs	r2, #0
 8003906:	2140      	movs	r1, #64	; 0x40
 8003908:	4819      	ldr	r0, [pc, #100]	; (8003970 <ILI9XXX_Init+0x74>)
 800390a:	f003 fb4b 	bl	8006fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f002 f860 	bl	80059d4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8003914:	2201      	movs	r2, #1
 8003916:	2140      	movs	r1, #64	; 0x40
 8003918:	4815      	ldr	r0, [pc, #84]	; (8003970 <ILI9XXX_Init+0x74>)
 800391a:	f003 fb43 	bl	8006fa4 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 800391e:	20a5      	movs	r0, #165	; 0xa5
 8003920:	f002 f858 	bl	80059d4 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8003924:	203a      	movs	r0, #58	; 0x3a
 8003926:	f7ff ffc3 	bl	80038b0 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
 800392a:	2200      	movs	r2, #0
 800392c:	2101      	movs	r1, #1
 800392e:	4811      	ldr	r0, [pc, #68]	; (8003974 <ILI9XXX_Init+0x78>)
 8003930:	f7ff ffcd 	bl	80038ce <Displ_WriteData>
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8003934:	20b0      	movs	r0, #176	; 0xb0
 8003936:	f7ff ffbb 	bl	80038b0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800393a:	2200      	movs	r2, #0
 800393c:	2101      	movs	r1, #1
 800393e:	480e      	ldr	r0, [pc, #56]	; (8003978 <ILI9XXX_Init+0x7c>)
 8003940:	f7ff ffc5 	bl	80038ce <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8003944:	20b0      	movs	r0, #176	; 0xb0
 8003946:	f7ff ffb3 	bl	80038b0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800394a:	2200      	movs	r2, #0
 800394c:	2101      	movs	r1, #1
 800394e:	480a      	ldr	r0, [pc, #40]	; (8003978 <ILI9XXX_Init+0x7c>)
 8003950:	f7ff ffbd 	bl	80038ce <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8003954:	2011      	movs	r0, #17
 8003956:	f7ff ffab 	bl	80038b0 <Displ_WriteCommand>
	HAL_Delay(120);
 800395a:	2078      	movs	r0, #120	; 0x78
 800395c:	f002 f83a 	bl	80059d4 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8003960:	2029      	movs	r0, #41	; 0x29
 8003962:	f7ff ffa5 	bl	80038b0 <Displ_WriteCommand>
	HAL_Delay(5);
 8003966:	2005      	movs	r0, #5
 8003968:	f002 f834 	bl	80059d4 <HAL_Delay>

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40020400 	.word	0x40020400
 8003974:	0800c510 	.word	0x0800c510
 8003978:	0800c514 	.word	0x0800c514

0800397c <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4623      	mov	r3, r4
 800398c:	80fb      	strh	r3, [r7, #6]
 800398e:	4603      	mov	r3, r0
 8003990:	80bb      	strh	r3, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	807b      	strh	r3, [r7, #2]
 8003996:	4613      	mov	r3, r2
 8003998:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	061a      	lsls	r2, r3, #24
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039a6:	431a      	orrs	r2, r3
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4313      	orrs	r3, r2
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	0a12      	lsrs	r2, r2, #8
 80039b4:	b292      	uxth	r2, r2
 80039b6:	431a      	orrs	r2, r3
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <Displ_SetAddressWindow+0x90>)
 80039ba:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80039bc:	202a      	movs	r0, #42	; 0x2a
 80039be:	f7ff ff77 	bl	80038b0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2104      	movs	r1, #4
 80039c6:	4811      	ldr	r0, [pc, #68]	; (8003a0c <Displ_SetAddressWindow+0x90>)
 80039c8:	f7ff ff81 	bl	80038ce <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80039cc:	883b      	ldrh	r3, [r7, #0]
 80039ce:	061a      	lsls	r2, r3, #24
 80039d0:	883b      	ldrh	r3, [r7, #0]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039d8:	431a      	orrs	r2, r3
 80039da:	88bb      	ldrh	r3, [r7, #4]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4313      	orrs	r3, r2
 80039e2:	88ba      	ldrh	r2, [r7, #4]
 80039e4:	0a12      	lsrs	r2, r2, #8
 80039e6:	b292      	uxth	r2, r2
 80039e8:	431a      	orrs	r2, r3
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <Displ_SetAddressWindow+0x90>)
 80039ec:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80039ee:	202b      	movs	r0, #43	; 0x2b
 80039f0:	f7ff ff5e 	bl	80038b0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2104      	movs	r1, #4
 80039f8:	4804      	ldr	r0, [pc, #16]	; (8003a0c <Displ_SetAddressWindow+0x90>)
 80039fa:	f7ff ff68 	bl	80038ce <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 80039fe:	202c      	movs	r0, #44	; 0x2c
 8003a00:	f7ff ff56 	bl	80038b0 <Displ_WriteCommand>
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	20007074 	.word	0x20007074

08003a10 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	4809      	ldr	r0, [pc, #36]	; (8003a44 <Displ_Init+0x34>)
 8003a20:	f003 fac0 	bl	8006fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a2a:	4807      	ldr	r0, [pc, #28]	; (8003a48 <Displ_Init+0x38>)
 8003a2c:	f003 faba 	bl	8006fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8003a30:	f7ff ff64 	bl	80038fc <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f808 	bl	8003a4c <Displ_Orientation>
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40020800 	.word	0x40020800
 8003a48:	40020000 	.word	0x40020000

08003a4c <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d83b      	bhi.n	8003ad4 <Displ_Orientation+0x88>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <Displ_Orientation+0x18>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003aa5 	.word	0x08003aa5
 8003a70:	08003abd 	.word	0x08003abd
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <Displ_Orientation+0xa8>)
 8003a76:	2288      	movs	r2, #136	; 0x88
 8003a78:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <Displ_Orientation+0xac>)
 8003a7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003a80:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <Displ_Orientation+0xb0>)
 8003a84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a88:	801a      	strh	r2, [r3, #0]
			break;
 8003a8a:	e023      	b.n	8003ad4 <Displ_Orientation+0x88>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <Displ_Orientation+0xa8>)
 8003a8e:	22e8      	movs	r2, #232	; 0xe8
 8003a90:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <Displ_Orientation+0xac>)
 8003a94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a98:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <Displ_Orientation+0xb0>)
 8003a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003aa0:	801a      	strh	r2, [r3, #0]
			break;
 8003aa2:	e017      	b.n	8003ad4 <Displ_Orientation+0x88>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <Displ_Orientation+0xa8>)
 8003aa6:	2248      	movs	r2, #72	; 0x48
 8003aa8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <Displ_Orientation+0xac>)
 8003aac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ab0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <Displ_Orientation+0xb0>)
 8003ab4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ab8:	801a      	strh	r2, [r3, #0]
			break;
 8003aba:	e00b      	b.n	8003ad4 <Displ_Orientation+0x88>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <Displ_Orientation+0xa8>)
 8003abe:	2228      	movs	r2, #40	; 0x28
 8003ac0:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <Displ_Orientation+0xac>)
 8003ac4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ac8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <Displ_Orientation+0xb0>)
 8003acc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ad0:	801a      	strh	r2, [r3, #0]
			break;
 8003ad2:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8003ad4:	2036      	movs	r0, #54	; 0x36
 8003ad6:	f7ff feeb 	bl	80038b0 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2101      	movs	r1, #1
 8003ade:	4805      	ldr	r0, [pc, #20]	; (8003af4 <Displ_Orientation+0xa8>)
 8003ae0:	f7ff fef5 	bl	80038ce <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8003ae4:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <Displ_Orientation+0xb4>)
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	7013      	strb	r3, [r2, #0]
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20007078 	.word	0x20007078
 8003af8:	20006870 	.word	0x20006870
 8003afc:	2000686e 	.word	0x2000686e
 8003b00:	2000686c 	.word	0x2000686c

08003b04 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <HAL_SPI_ErrorCallback+0x24>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d102      	bne.n	8003b1c <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_SPI_ErrorCallback+0x28>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
	}
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40003800 	.word	0x40003800
 8003b2c:	20000028 	.word	0x20000028

08003b30 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <HAL_SPI_TxCpltCallback+0x24>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_SPI_TxCpltCallback+0x28>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40003800 	.word	0x40003800
 8003b58:	20000028 	.word	0x20000028

08003b5c <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b08b      	sub	sp, #44	; 0x2c
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	80fb      	strh	r3, [r7, #6]
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80bb      	strh	r3, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]
 8003b76:	4613      	mov	r3, r2
 8003b78:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	4a59      	ldr	r2, [pc, #356]	; (8003ce4 <Displ_FillArea+0x188>)
 8003b7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	f280 80aa 	bge.w	8003cdc <Displ_FillArea+0x180>
 8003b88:	88bb      	ldrh	r3, [r7, #4]
 8003b8a:	4a57      	ldr	r2, [pc, #348]	; (8003ce8 <Displ_FillArea+0x18c>)
 8003b8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	f280 80a3 	bge.w	8003cdc <Displ_FillArea+0x180>
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 809f 	beq.w	8003cdc <Displ_FillArea+0x180>
 8003b9e:	883b      	ldrh	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 809b 	beq.w	8003cdc <Displ_FillArea+0x180>

	x1=x + w - 1;
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	4413      	add	r3, r2
 8003bac:	3b01      	subs	r3, #1
 8003bae:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <Displ_FillArea+0x188>)
 8003bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d903      	bls.n	8003bc6 <Displ_FillArea+0x6a>
		x1=_width;
 8003bbe:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <Displ_FillArea+0x188>)
 8003bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc4:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8003bc6:	88ba      	ldrh	r2, [r7, #4]
 8003bc8:	883b      	ldrh	r3, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8003bd0:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <Displ_FillArea+0x18c>)
 8003bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d903      	bls.n	8003be6 <Displ_FillArea+0x8a>
		y1=_height;
 8003bde:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <Displ_FillArea+0x18c>)
 8003be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be4:	61fb      	str	r3, [r7, #28]

#endif
#ifdef Z_RGB666 // setting up dispBuffer in RGB666 format
	uint32_t datasize;

	uint8_t Rbyte=(color & 0xF800)>>8;
 8003be6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003be8:	121b      	asrs	r3, r3, #8
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f023 0307 	bic.w	r3, r3, #7
 8003bf0:	75fb      	strb	r3, [r7, #23]
	uint8_t Gbyte=(color & 0x07E0)>>3;
 8003bf2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bf4:	10db      	asrs	r3, r3, #3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f023 0303 	bic.w	r3, r3, #3
 8003bfc:	75bb      	strb	r3, [r7, #22]
	uint8_t Bbyte=(color & 0x001F)<<3;
 8003bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	757b      	strb	r3, [r7, #21]

	area=(((y1-y+1)*(x1-x+1))*3); 		// area to fill in bytes (3 bytes per pixel)
 8003c04:	88bb      	ldrh	r3, [r7, #4]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	6a39      	ldr	r1, [r7, #32]
 8003c10:	1a8a      	subs	r2, r1, r2
 8003c12:	3201      	adds	r2, #1
 8003c14:	fb03 f202 	mul.w	r2, r3, r2
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
	uint8_t *buf8Pos=dispBuffer; 		//using a local pointer: changing values next
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <Displ_FillArea+0x190>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	61bb      	str	r3, [r7, #24]

	datasize = (area<(SIZEBUF-3) ? area : (SIZEBUF-3));  //as buf8Pos receives 3 bytes each cycle we must be sure that SIZEBUF will be not overridden in the next loop
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf28      	it	cs
 8003c30:	4613      	movcs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

	k=0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
	while ((buf8Pos-dispBuffer)<=datasize){
 8003c38:	e00e      	b.n	8003c58 <Displ_FillArea+0xfc>
		*(buf8Pos++)=Rbyte;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	61ba      	str	r2, [r7, #24]
 8003c40:	7dfa      	ldrb	r2, [r7, #23]
 8003c42:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Gbyte;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	61ba      	str	r2, [r7, #24]
 8003c4a:	7dba      	ldrb	r2, [r7, #22]
 8003c4c:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Bbyte;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	61ba      	str	r2, [r7, #24]
 8003c54:	7d7a      	ldrb	r2, [r7, #21]
 8003c56:	701a      	strb	r2, [r3, #0]
	while ((buf8Pos-dispBuffer)<=datasize){
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <Displ_FillArea+0x190>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d2e8      	bcs.n	8003c3a <Displ_FillArea+0xde>
	}
	datasize=(buf8Pos-dispBuffer);
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <Displ_FillArea+0x190>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	88b9      	ldrh	r1, [r7, #4]
 8003c7c:	88f8      	ldrh	r0, [r7, #6]
 8003c7e:	f7ff fe7d 	bl	800397c <Displ_SetAddressWindow>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
#endif
#ifdef Z_RGB666 // transferring RGB666 format dispBuffer
	times=(area/datasize);  					//how many times buffer must be sent via SPI.
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	60bb      	str	r3, [r7, #8]
	for  (k=0;k<times;k++) {
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e009      	b.n	8003ca6 <Displ_FillArea+0x14a>
		Displ_WriteData(dispBuffer,datasize,0);
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <Displ_FillArea+0x190>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fe17 	bl	80038ce <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3f1      	bcc.n	8003c92 <Displ_FillArea+0x136>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <Displ_FillArea+0x190>)
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7ff fe04 	bl	80038ce <Displ_WriteData>
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <Displ_FillArea+0x190>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <Displ_FillArea+0x194>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d101      	bne.n	8003cd4 <Displ_FillArea+0x178>
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <Displ_FillArea+0x198>)
 8003cd2:	e000      	b.n	8003cd6 <Displ_FillArea+0x17a>
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <Displ_FillArea+0x194>)
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <Displ_FillArea+0x190>)
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e000      	b.n	8003cde <Displ_FillArea+0x182>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8003cdc:	bf00      	nop

}
 8003cde:	372c      	adds	r7, #44	; 0x2c
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}
 8003ce4:	2000686e 	.word	0x2000686e
 8003ce8:	20006870 	.word	0x20006870
 8003cec:	2000002c 	.word	0x2000002c
 8003cf0:	20006874 	.word	0x20006874
 8003cf4:	20006c74 	.word	0x20006c74

08003cf8 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80fb      	strh	r3, [r7, #6]
 8003d02:	460b      	mov	r3, r1
 8003d04:	80bb      	strh	r3, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	4a0b      	ldr	r2, [pc, #44]	; (8003d3c <Displ_Pixel+0x44>)
 8003d0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003d12:	4293      	cmp	r3, r2
 8003d14:	da0e      	bge.n	8003d34 <Displ_Pixel+0x3c>
 8003d16:	88bb      	ldrh	r3, [r7, #4]
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <Displ_Pixel+0x48>)
 8003d1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	da08      	bge.n	8003d34 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8003d22:	88b9      	ldrh	r1, [r7, #4]
 8003d24:	88f8      	ldrh	r0, [r7, #6]
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f7ff ff15 	bl	8003b5c <Displ_FillArea>
 8003d32:	e000      	b.n	8003d36 <Displ_Pixel+0x3e>
        return;
 8003d34:	bf00      	nop

}
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2000686e 	.word	0x2000686e
 8003d40:	20006870 	.word	0x20006870

08003d44 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	4623      	mov	r3, r4
 8003d54:	80fb      	strh	r3, [r7, #6]
 8003d56:	4603      	mov	r3, r0
 8003d58:	80bb      	strh	r3, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	807b      	strh	r3, [r7, #2]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	f1c3 0301 	rsb	r3, r3, #1
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	461a      	mov	r2, r3
 8003d74:	03d2      	lsls	r2, r2, #15
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8003d86:	88f8      	ldrh	r0, [r7, #6]
 8003d88:	88ba      	ldrh	r2, [r7, #4]
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	883a      	ldrh	r2, [r7, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7ff ffb0 	bl	8003cf8 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8003d98:	88f8      	ldrh	r0, [r7, #6]
 8003d9a:	88ba      	ldrh	r2, [r7, #4]
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	883a      	ldrh	r2, [r7, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7ff ffa7 	bl	8003cf8 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	4413      	add	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	88b9      	ldrh	r1, [r7, #4]
 8003db4:	883a      	ldrh	r2, [r7, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff9e 	bl	8003cf8 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	88b9      	ldrh	r1, [r7, #4]
 8003dc6:	883a      	ldrh	r2, [r7, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff95 	bl	8003cf8 <Displ_Pixel>

    while (x<y) {
 8003dce:	e081      	b.n	8003ed4 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8003dd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	db0e      	blt.n	8003df6 <Displ_drawCircle+0xb2>
            y--;
 8003dd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003de4:	8a7b      	ldrh	r3, [r7, #18]
 8003de6:	3302      	adds	r3, #2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003dec:	8afa      	ldrh	r2, [r7, #22]
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	4413      	add	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003df6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003e02:	8abb      	ldrh	r3, [r7, #20]
 8003e04:	3302      	adds	r3, #2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003e0a:	8afa      	ldrh	r2, [r7, #22]
 8003e0c:	8abb      	ldrh	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	8a3b      	ldrh	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b298      	uxth	r0, r3
 8003e1c:	88ba      	ldrh	r2, [r7, #4]
 8003e1e:	89fb      	ldrh	r3, [r7, #14]
 8003e20:	4413      	add	r3, r2
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	883a      	ldrh	r2, [r7, #0]
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7ff ff66 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8003e2c:	88fa      	ldrh	r2, [r7, #6]
 8003e2e:	8a3b      	ldrh	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	b298      	uxth	r0, r3
 8003e34:	88ba      	ldrh	r2, [r7, #4]
 8003e36:	89fb      	ldrh	r3, [r7, #14]
 8003e38:	4413      	add	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	883a      	ldrh	r2, [r7, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f7ff ff5a 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	8a3b      	ldrh	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	b298      	uxth	r0, r3
 8003e4c:	88ba      	ldrh	r2, [r7, #4]
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	883a      	ldrh	r2, [r7, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7ff ff4e 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	8a3b      	ldrh	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	b298      	uxth	r0, r3
 8003e64:	88ba      	ldrh	r2, [r7, #4]
 8003e66:	89fb      	ldrh	r3, [r7, #14]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	883a      	ldrh	r2, [r7, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f7ff ff42 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	89fb      	ldrh	r3, [r7, #14]
 8003e78:	4413      	add	r3, r2
 8003e7a:	b298      	uxth	r0, r3
 8003e7c:	88ba      	ldrh	r2, [r7, #4]
 8003e7e:	8a3b      	ldrh	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	883a      	ldrh	r2, [r7, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	f7ff ff36 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b298      	uxth	r0, r3
 8003e94:	88ba      	ldrh	r2, [r7, #4]
 8003e96:	8a3b      	ldrh	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	883a      	ldrh	r2, [r7, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f7ff ff2a 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8003ea4:	88fa      	ldrh	r2, [r7, #6]
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b298      	uxth	r0, r3
 8003eac:	88ba      	ldrh	r2, [r7, #4]
 8003eae:	8a3b      	ldrh	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	883a      	ldrh	r2, [r7, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f7ff ff1e 	bl	8003cf8 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	b298      	uxth	r0, r3
 8003ec4:	88ba      	ldrh	r2, [r7, #4]
 8003ec6:	8a3b      	ldrh	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	883a      	ldrh	r2, [r7, #0]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f7ff ff12 	bl	8003cf8 <Displ_Pixel>
    while (x<y) {
 8003ed4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	f6ff af77 	blt.w	8003dd0 <Displ_drawCircle+0x8c>
    }
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}

08003eec <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <Displ_CLS+0x30>)
 8003ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <Displ_CLS+0x34>)
 8003f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f04:	b299      	uxth	r1, r3
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7ff fe24 	bl	8003b5c <Displ_FillArea>
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000686e 	.word	0x2000686e
 8003f20:	20006870 	.word	0x20006870

08003f24 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	80fb      	strh	r3, [r7, #6]
 8003f36:	4603      	mov	r3, r0
 8003f38:	80bb      	strh	r3, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	f1c3 0301 	rsb	r3, r3, #1
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	461a      	mov	r2, r3
 8003f54:	03d2      	lsls	r2, r2, #15
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8003f66:	e095      	b.n	8004094 <drawCircleHelper+0x170>
        if (f >= 0) {
 8003f68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0e      	blt.n	8003f8e <drawCircleHelper+0x6a>
            y--;
 8003f70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003f7c:	8a7b      	ldrh	r3, [r7, #18]
 8003f7e:	3302      	adds	r3, #2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8003f84:	8afa      	ldrh	r2, [r7, #22]
 8003f86:	8a7b      	ldrh	r3, [r7, #18]
 8003f88:	4413      	add	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003f8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003f9a:	8abb      	ldrh	r3, [r7, #20]
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8003fa2:	8afa      	ldrh	r2, [r7, #22]
 8003fa4:	8abb      	ldrh	r3, [r7, #20]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d017      	beq.n	8003fe6 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	8a3b      	ldrh	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	b298      	uxth	r0, r3
 8003fbe:	88ba      	ldrh	r2, [r7, #4]
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f7ff fe95 	bl	8003cf8 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	b298      	uxth	r0, r3
 8003fd6:	88ba      	ldrh	r2, [r7, #4]
 8003fd8:	8a3b      	ldrh	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f7ff fe89 	bl	8003cf8 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8003fe6:	787b      	ldrb	r3, [r7, #1]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d017      	beq.n	8004020 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	8a3b      	ldrh	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b298      	uxth	r0, r3
 8003ff8:	88ba      	ldrh	r2, [r7, #4]
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004002:	4619      	mov	r1, r3
 8004004:	f7ff fe78 	bl	8003cf8 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	4413      	add	r3, r2
 800400e:	b298      	uxth	r0, r3
 8004010:	88ba      	ldrh	r2, [r7, #4]
 8004012:	8a3b      	ldrh	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	b29b      	uxth	r3, r3
 8004018:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800401a:	4619      	mov	r1, r3
 800401c:	f7ff fe6c 	bl	8003cf8 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8004020:	787b      	ldrb	r3, [r7, #1]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	b298      	uxth	r0, r3
 8004032:	88ba      	ldrh	r2, [r7, #4]
 8004034:	8a3b      	ldrh	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800403c:	4619      	mov	r1, r3
 800403e:	f7ff fe5b 	bl	8003cf8 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	8a3b      	ldrh	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	b298      	uxth	r0, r3
 800404a:	88ba      	ldrh	r2, [r7, #4]
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	4413      	add	r3, r2
 8004050:	b29b      	uxth	r3, r3
 8004052:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004054:	4619      	mov	r1, r3
 8004056:	f7ff fe4f 	bl	8003cf8 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 800405a:	787b      	ldrb	r3, [r7, #1]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d017      	beq.n	8004094 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	89fb      	ldrh	r3, [r7, #14]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	b298      	uxth	r0, r3
 800406c:	88ba      	ldrh	r2, [r7, #4]
 800406e:	8a3b      	ldrh	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	b29b      	uxth	r3, r3
 8004074:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004076:	4619      	mov	r1, r3
 8004078:	f7ff fe3e 	bl	8003cf8 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	8a3b      	ldrh	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b298      	uxth	r0, r3
 8004084:	88ba      	ldrh	r2, [r7, #4]
 8004086:	89fb      	ldrh	r3, [r7, #14]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800408e:	4619      	mov	r1, r3
 8004090:	f7ff fe32 	bl	8003cf8 <Displ_Pixel>
    while (x<y) {
 8004094:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004098:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800409c:	429a      	cmp	r2, r3
 800409e:	f6ff af63 	blt.w	8003f68 <drawCircleHelper+0x44>
        }
    }
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd90      	pop	{r4, r7, pc}

080040ac <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	4604      	mov	r4, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	80fb      	strh	r3, [r7, #6]
 80040be:	4603      	mov	r3, r0
 80040c0:	80bb      	strh	r3, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	807b      	strh	r3, [r7, #2]
 80040c6:	4613      	mov	r3, r2
 80040c8:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	f1c3 0301 	rsb	r3, r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80040d4:	2301      	movs	r3, #1
 80040d6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	461a      	mov	r2, r3
 80040dc:	03d2      	lsls	r2, r2, #15
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80040ee:	e0a7      	b.n	8004240 <fillCircleHelper+0x194>
    if (f >= 0) {
 80040f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0e      	blt.n	8004116 <fillCircleHelper+0x6a>
      y--;
 80040f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8004104:	8a7b      	ldrh	r3, [r7, #18]
 8004106:	3302      	adds	r3, #2
 8004108:	b29b      	uxth	r3, r3
 800410a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 800410c:	8afa      	ldrh	r2, [r7, #22]
 800410e:	8a7b      	ldrh	r3, [r7, #18]
 8004110:	4413      	add	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8004116:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800411a:	b29b      	uxth	r3, r3
 800411c:	3301      	adds	r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8004122:	8abb      	ldrh	r3, [r7, #20]
 8004124:	3302      	adds	r3, #2
 8004126:	b29b      	uxth	r3, r3
 8004128:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800412a:	8afa      	ldrh	r2, [r7, #22]
 800412c:	8abb      	ldrh	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	b29b      	uxth	r3, r3
 8004132:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8004134:	787b      	ldrb	r3, [r7, #1]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03d      	beq.n	80041ba <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	8a3b      	ldrh	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	b218      	sxth	r0, r3
 8004148:	88ba      	ldrh	r2, [r7, #4]
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	b219      	sxth	r1, r3
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	8a3b      	ldrh	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	b21c      	sxth	r4, r3
 800415c:	88ba      	ldrh	r2, [r7, #4]
 800415e:	89fb      	ldrh	r3, [r7, #14]
 8004160:	4413      	add	r3, r2
 8004162:	b29a      	uxth	r2, r3
 8004164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004166:	4413      	add	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	3301      	adds	r3, #1
 800416c:	b29b      	uxth	r3, r3
 800416e:	b21a      	sxth	r2, r3
 8004170:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	4622      	mov	r2, r4
 8004178:	f000 f8a1 	bl	80042be <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	89fb      	ldrh	r3, [r7, #14]
 8004180:	4413      	add	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	b218      	sxth	r0, r3
 8004186:	88ba      	ldrh	r2, [r7, #4]
 8004188:	8a3b      	ldrh	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	b219      	sxth	r1, r3
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	4413      	add	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	b21c      	sxth	r4, r3
 800419a:	88ba      	ldrh	r2, [r7, #4]
 800419c:	8a3b      	ldrh	r3, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041a4:	4413      	add	r3, r2
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	b21a      	sxth	r2, r3
 80041ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	4622      	mov	r2, r4
 80041b6:	f000 f882 	bl	80042be <Displ_Line>
    }
    if (cornername & 0x2) {
 80041ba:	787b      	ldrb	r3, [r7, #1]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03d      	beq.n	8004240 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	8a3b      	ldrh	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b218      	sxth	r0, r3
 80041ce:	88ba      	ldrh	r2, [r7, #4]
 80041d0:	89fb      	ldrh	r3, [r7, #14]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b219      	sxth	r1, r3
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	8a3b      	ldrh	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	b29b      	uxth	r3, r3
 80041e0:	b21c      	sxth	r4, r3
 80041e2:	88ba      	ldrh	r2, [r7, #4]
 80041e4:	89fb      	ldrh	r3, [r7, #14]
 80041e6:	4413      	add	r3, r2
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041ec:	4413      	add	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	b21a      	sxth	r2, r3
 80041f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	4622      	mov	r2, r4
 80041fe:	f000 f85e 	bl	80042be <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	89fb      	ldrh	r3, [r7, #14]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	b29b      	uxth	r3, r3
 800420a:	b218      	sxth	r0, r3
 800420c:	88ba      	ldrh	r2, [r7, #4]
 800420e:	8a3b      	ldrh	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	b219      	sxth	r1, r3
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	b21c      	sxth	r4, r3
 8004220:	88ba      	ldrh	r2, [r7, #4]
 8004222:	8a3b      	ldrh	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	b29a      	uxth	r2, r3
 8004228:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800422a:	4413      	add	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	3301      	adds	r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	b21a      	sxth	r2, r3
 8004234:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	4622      	mov	r2, r4
 800423c:	f000 f83f 	bl	80042be <Displ_Line>
  while (x<y) {
 8004240:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004248:	429a      	cmp	r2, r3
 800424a:	f6ff af51 	blt.w	80040f0 <fillCircleHelper+0x44>
    }
  }
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}

08004258 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b085      	sub	sp, #20
 800425c:	af02      	add	r7, sp, #8
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4623      	mov	r3, r4
 8004268:	80fb      	strh	r3, [r7, #6]
 800426a:	4603      	mov	r3, r0
 800426c:	80bb      	strh	r3, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	807b      	strh	r3, [r7, #2]
 8004272:	4613      	mov	r3, r2
 8004274:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8004276:	88ba      	ldrh	r2, [r7, #4]
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b29b      	uxth	r3, r3
 800427e:	b219      	sxth	r1, r3
 8004280:	88ba      	ldrh	r2, [r7, #4]
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	4413      	add	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	b21c      	sxth	r4, r3
 800428a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800428e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004292:	883b      	ldrh	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4623      	mov	r3, r4
 8004298:	f000 f811 	bl	80042be <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800429c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80042a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80042a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80042a8:	883b      	ldrh	r3, [r7, #0]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2303      	movs	r3, #3
 80042b2:	f7ff fefb 	bl	80040ac <fillCircleHelper>
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd90      	pop	{r4, r7, pc}

080042be <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80042be:	b590      	push	{r4, r7, lr}
 80042c0:	b08b      	sub	sp, #44	; 0x2c
 80042c2:	af02      	add	r7, sp, #8
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	4623      	mov	r3, r4
 80042ce:	80fb      	strh	r3, [r7, #6]
 80042d0:	4603      	mov	r3, r0
 80042d2:	80bb      	strh	r3, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80042dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d123      	bne.n	8004330 <Displ_Line+0x72>
    	if (y1>y0){
 80042e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80042ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dd0e      	ble.n	8004312 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80042f4:	88f8      	ldrh	r0, [r7, #6]
 80042f6:	88b9      	ldrh	r1, [r7, #4]
 80042f8:	883a      	ldrh	r2, [r7, #0]
 80042fa:	88bb      	ldrh	r3, [r7, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	2201      	movs	r2, #1
 800430c:	f7ff fc26 	bl	8003b5c <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8004310:	e103      	b.n	800451a <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8004312:	88f8      	ldrh	r0, [r7, #6]
 8004314:	8839      	ldrh	r1, [r7, #0]
 8004316:	88ba      	ldrh	r2, [r7, #4]
 8004318:	883b      	ldrh	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	3301      	adds	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	2201      	movs	r2, #1
 800432a:	f7ff fc17 	bl	8003b5c <Displ_FillArea>
    	return;
 800432e:	e0f4      	b.n	800451a <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8004330:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004334:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004338:	429a      	cmp	r2, r3
 800433a:	d121      	bne.n	8004380 <Displ_Line+0xc2>
    	if (x1>x0)
 800433c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004344:	429a      	cmp	r2, r3
 8004346:	dd0d      	ble.n	8004364 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8004348:	88f8      	ldrh	r0, [r7, #6]
 800434a:	88b9      	ldrh	r1, [r7, #4]
 800434c:	887a      	ldrh	r2, [r7, #2]
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	b29b      	uxth	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2301      	movs	r3, #1
 800435e:	f7ff fbfd 	bl	8003b5c <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8004362:	e0da      	b.n	800451a <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8004364:	8878      	ldrh	r0, [r7, #2]
 8004366:	8839      	ldrh	r1, [r7, #0]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	3301      	adds	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2301      	movs	r3, #1
 800437a:	f7ff fbef 	bl	8003b5c <Displ_FillArea>
    	return;
 800437e:	e0cc      	b.n	800451a <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8004380:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004384:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	dd05      	ble.n	8004398 <Displ_Line+0xda>
 800438c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004390:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004394:	1ad2      	subs	r2, r2, r3
 8004396:	e004      	b.n	80043a2 <Displ_Line+0xe4>
 8004398:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800439c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80043a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043aa:	4299      	cmp	r1, r3
 80043ac:	dd05      	ble.n	80043ba <Displ_Line+0xfc>
 80043ae:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80043b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043b6:	1acb      	subs	r3, r1, r3
 80043b8:	e004      	b.n	80043c4 <Displ_Line+0x106>
 80043ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80043be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	429a      	cmp	r2, r3
 80043c6:	bfcc      	ite	gt
 80043c8:	2301      	movgt	r3, #1
 80043ca:	2300      	movle	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80043d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	827b      	strh	r3, [r7, #18]
 80043dc:	88bb      	ldrh	r3, [r7, #4]
 80043de:	80fb      	strh	r3, [r7, #6]
 80043e0:	8a7b      	ldrh	r3, [r7, #18]
 80043e2:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80043e4:	887b      	ldrh	r3, [r7, #2]
 80043e6:	823b      	strh	r3, [r7, #16]
 80043e8:	883b      	ldrh	r3, [r7, #0]
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	8a3b      	ldrh	r3, [r7, #16]
 80043ee:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80043f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	dd0b      	ble.n	8004414 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	81fb      	strh	r3, [r7, #14]
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	80fb      	strh	r3, [r7, #6]
 8004404:	89fb      	ldrh	r3, [r7, #14]
 8004406:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8004408:	88bb      	ldrh	r3, [r7, #4]
 800440a:	81bb      	strh	r3, [r7, #12]
 800440c:	883b      	ldrh	r3, [r7, #0]
 800440e:	80bb      	strh	r3, [r7, #4]
 8004410:	89bb      	ldrh	r3, [r7, #12]
 8004412:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8004414:	887a      	ldrh	r2, [r7, #2]
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	b29b      	uxth	r3, r3
 800441c:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800441e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004422:	105b      	asrs	r3, r3, #1
 8004424:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8004426:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800442a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800442e:	429a      	cmp	r2, r3
 8004430:	da07      	bge.n	8004442 <Displ_Line+0x184>
        dy = y1-y0;
 8004432:	883a      	ldrh	r2, [r7, #0]
 8004434:	88bb      	ldrh	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	b29b      	uxth	r3, r3
 800443a:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 800443c:	2301      	movs	r3, #1
 800443e:	837b      	strh	r3, [r7, #26]
 8004440:	e007      	b.n	8004452 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8004442:	88ba      	ldrh	r2, [r7, #4]
 8004444:	883b      	ldrh	r3, [r7, #0]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	b29b      	uxth	r3, r3
 800444a:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 800444c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004450:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8004452:	2300      	movs	r3, #0
 8004454:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	83bb      	strh	r3, [r7, #28]
 800445a:	e03a      	b.n	80044d2 <Displ_Line+0x214>
    	l++;
 800445c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004460:	b29b      	uxth	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8004468:	8b3a      	ldrh	r2, [r7, #24]
 800446a:	8afb      	ldrh	r3, [r7, #22]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8004472:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da25      	bge.n	80044c6 <Displ_Line+0x208>
        	if (steep) {
 800447a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8004482:	88b8      	ldrh	r0, [r7, #4]
 8004484:	88f9      	ldrh	r1, [r7, #6]
 8004486:	8bfa      	ldrh	r2, [r7, #30]
 8004488:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	2201      	movs	r2, #1
 8004490:	f7ff fb64 	bl	8003b5c <Displ_FillArea>
 8004494:	e007      	b.n	80044a6 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8004496:	88f8      	ldrh	r0, [r7, #6]
 8004498:	88b9      	ldrh	r1, [r7, #4]
 800449a:	8bfa      	ldrh	r2, [r7, #30]
 800449c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2301      	movs	r3, #1
 80044a2:	f7ff fb5b 	bl	8003b5c <Displ_FillArea>
            }
            y0 += ystep;
 80044a6:	88ba      	ldrh	r2, [r7, #4]
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	4413      	add	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	80bb      	strh	r3, [r7, #4]
            l=0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80044b4:	8bbb      	ldrh	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80044bc:	8b3a      	ldrh	r2, [r7, #24]
 80044be:	897b      	ldrh	r3, [r7, #10]
 80044c0:	4413      	add	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80044c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	83bb      	strh	r3, [r7, #28]
 80044d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80044d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044da:	429a      	cmp	r2, r3
 80044dc:	ddbe      	ble.n	800445c <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80044de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d019      	beq.n	800451a <Displ_Line+0x25c>
    	if (steep) {
 80044e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80044ee:	88b8      	ldrh	r0, [r7, #4]
 80044f0:	88f9      	ldrh	r1, [r7, #6]
 80044f2:	8bfb      	ldrh	r3, [r7, #30]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	2201      	movs	r2, #1
 8004500:	f7ff fb2c 	bl	8003b5c <Displ_FillArea>
 8004504:	e009      	b.n	800451a <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8004506:	88f8      	ldrh	r0, [r7, #6]
 8004508:	88b9      	ldrh	r1, [r7, #4]
 800450a:	8bfb      	ldrh	r3, [r7, #30]
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2301      	movs	r3, #1
 8004516:	f7ff fb21 	bl	8003b5c <Displ_FillArea>
    	}
    }
}
 800451a:	3724      	adds	r7, #36	; 0x24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}

08004520 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b085      	sub	sp, #20
 8004524:	af02      	add	r7, sp, #8
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4623      	mov	r3, r4
 8004530:	80fb      	strh	r3, [r7, #6]
 8004532:	4603      	mov	r3, r0
 8004534:	80bb      	strh	r3, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	807b      	strh	r3, [r7, #2]
 800453a:	4613      	mov	r3, r2
 800453c:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 800453e:	88f8      	ldrh	r0, [r7, #6]
 8004540:	88b9      	ldrh	r1, [r7, #4]
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	8b3c      	ldrh	r4, [r7, #24]
 8004546:	8bbb      	ldrh	r3, [r7, #28]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4623      	mov	r3, r4
 800454c:	f7ff fb06 	bl	8003b5c <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8004550:	88f8      	ldrh	r0, [r7, #6]
 8004552:	88ba      	ldrh	r2, [r7, #4]
 8004554:	883b      	ldrh	r3, [r7, #0]
 8004556:	4413      	add	r3, r2
 8004558:	b29a      	uxth	r2, r3
 800455a:	8b3b      	ldrh	r3, [r7, #24]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	b299      	uxth	r1, r3
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	8b3c      	ldrh	r4, [r7, #24]
 8004564:	8bbb      	ldrh	r3, [r7, #28]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	4623      	mov	r3, r4
 800456a:	f7ff faf7 	bl	8003b5c <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 800456e:	88f8      	ldrh	r0, [r7, #6]
 8004570:	88b9      	ldrh	r1, [r7, #4]
 8004572:	8b3a      	ldrh	r2, [r7, #24]
 8004574:	883c      	ldrh	r4, [r7, #0]
 8004576:	8bbb      	ldrh	r3, [r7, #28]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	4623      	mov	r3, r4
 800457c:	f7ff faee 	bl	8003b5c <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	887b      	ldrh	r3, [r7, #2]
 8004584:	4413      	add	r3, r2
 8004586:	b29a      	uxth	r2, r3
 8004588:	8b3b      	ldrh	r3, [r7, #24]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	b298      	uxth	r0, r3
 800458e:	88b9      	ldrh	r1, [r7, #4]
 8004590:	8b3a      	ldrh	r2, [r7, #24]
 8004592:	883c      	ldrh	r4, [r7, #0]
 8004594:	8bbb      	ldrh	r3, [r7, #28]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4623      	mov	r3, r4
 800459a:	f7ff fadf 	bl	8003b5c <Displ_FillArea>
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}

080045a6 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80045a6:	b590      	push	{r4, r7, lr}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af02      	add	r7, sp, #8
 80045ac:	4604      	mov	r4, r0
 80045ae:	4608      	mov	r0, r1
 80045b0:	4611      	mov	r1, r2
 80045b2:	461a      	mov	r2, r3
 80045b4:	4623      	mov	r3, r4
 80045b6:	80fb      	strh	r3, [r7, #6]
 80045b8:	4603      	mov	r3, r0
 80045ba:	80bb      	strh	r3, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	807b      	strh	r3, [r7, #2]
 80045c0:	4613      	mov	r3, r2
 80045c2:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 80045c4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80045c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80045cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80045d4:	8c3b      	ldrh	r3, [r7, #32]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4623      	mov	r3, r4
 80045da:	f7ff fe70 	bl	80042be <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80045de:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80045e2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045e6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80045ea:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80045ee:	8c3b      	ldrh	r3, [r7, #32]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4623      	mov	r3, r4
 80045f4:	f7ff fe63 	bl	80042be <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 80045f8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80045fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004600:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8004604:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004608:	8c3b      	ldrh	r3, [r7, #32]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4623      	mov	r3, r4
 800460e:	f7ff fe56 	bl	80042be <Displ_Line>
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bd90      	pop	{r4, r7, pc}

0800461a <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800461a:	b590      	push	{r4, r7, lr}
 800461c:	b091      	sub	sp, #68	; 0x44
 800461e:	af02      	add	r7, sp, #8
 8004620:	4604      	mov	r4, r0
 8004622:	4608      	mov	r0, r1
 8004624:	4611      	mov	r1, r2
 8004626:	461a      	mov	r2, r3
 8004628:	4623      	mov	r3, r4
 800462a:	80fb      	strh	r3, [r7, #6]
 800462c:	4603      	mov	r3, r0
 800462e:	80bb      	strh	r3, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8004638:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800463c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004640:	429a      	cmp	r2, r3
 8004642:	dd0b      	ble.n	800465c <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004644:	88bb      	ldrh	r3, [r7, #4]
 8004646:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004648:	883b      	ldrh	r3, [r7, #0]
 800464a:	80bb      	strh	r3, [r7, #4]
 800464c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800464e:	803b      	strh	r3, [r7, #0]
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	80fb      	strh	r3, [r7, #6]
 8004658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800465a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800465c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004660:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004664:	429a      	cmp	r2, r3
 8004666:	dd0f      	ble.n	8004688 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8004668:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800466c:	847b      	strh	r3, [r7, #34]	; 0x22
 800466e:	883b      	ldrh	r3, [r7, #0]
 8004670:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004676:	803b      	strh	r3, [r7, #0]
 8004678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800467c:	843b      	strh	r3, [r7, #32]
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004684:	8c3b      	ldrh	r3, [r7, #32]
 8004686:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8004688:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800468c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004690:	429a      	cmp	r2, r3
 8004692:	dd0b      	ble.n	80046ac <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	83fb      	strh	r3, [r7, #30]
 8004698:	883b      	ldrh	r3, [r7, #0]
 800469a:	80bb      	strh	r3, [r7, #4]
 800469c:	8bfb      	ldrh	r3, [r7, #30]
 800469e:	803b      	strh	r3, [r7, #0]
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	83bb      	strh	r3, [r7, #28]
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	80fb      	strh	r3, [r7, #6]
 80046a8:	8bbb      	ldrh	r3, [r7, #28]
 80046aa:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80046ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80046b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d136      	bne.n	8004726 <Displ_fillTriangle+0x10c>
        a = b = x0;
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046be:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80046c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80046c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80046c8:	429a      	cmp	r2, r3
 80046ca:	da02      	bge.n	80046d2 <Displ_fillTriangle+0xb8>
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046d0:	e007      	b.n	80046e2 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80046d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80046d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80046da:	429a      	cmp	r2, r3
 80046dc:	dd01      	ble.n	80046e2 <Displ_fillTriangle+0xc8>
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80046e2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80046e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80046ea:	429a      	cmp	r2, r3
 80046ec:	da03      	bge.n	80046f6 <Displ_fillTriangle+0xdc>
 80046ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046f4:	e008      	b.n	8004708 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80046f6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80046fa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80046fe:	429a      	cmp	r2, r3
 8004700:	dd02      	ble.n	8004708 <Displ_fillTriangle+0xee>
 8004702:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004706:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8004708:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800470c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8004710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004714:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004718:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4623      	mov	r3, r4
 8004720:	f7ff fdcd 	bl	80042be <Displ_Line>
        return;
 8004724:	e0d2      	b.n	80048cc <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	b29b      	uxth	r3, r3
 800472e:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8004730:	883a      	ldrh	r2, [r7, #0]
 8004732:	88bb      	ldrh	r3, [r7, #4]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800473a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8004746:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800474a:	88bb      	ldrh	r3, [r7, #4]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	b29b      	uxth	r3, r3
 8004750:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8004752:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	b29b      	uxth	r3, r3
 800475c:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800475e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004762:	883b      	ldrh	r3, [r7, #0]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800476a:	2300      	movs	r3, #0
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8004772:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004776:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800477a:	429a      	cmp	r2, r3
 800477c:	d102      	bne.n	8004784 <Displ_fillTriangle+0x16a>
 800477e:	883b      	ldrh	r3, [r7, #0]
 8004780:	863b      	strh	r3, [r7, #48]	; 0x30
 8004782:	e003      	b.n	800478c <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8004784:	883b      	ldrh	r3, [r7, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 800478c:	88bb      	ldrh	r3, [r7, #4]
 800478e:	867b      	strh	r3, [r7, #50]	; 0x32
 8004790:	e03d      	b.n	800480e <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8004792:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004798:	fb92 f3f3 	sdiv	r3, r2, r3
 800479c:	b29a      	uxth	r2, r3
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	4413      	add	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80047a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	4413      	add	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80047ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80047be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c0:	4413      	add	r3, r2
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80047c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80047c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ca:	4413      	add	r3, r2
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80047ce:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047d2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80047d6:	429a      	cmp	r2, r3
 80047d8:	dd05      	ble.n	80047e6 <Displ_fillTriangle+0x1cc>
 80047da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047dc:	81bb      	strh	r3, [r7, #12]
 80047de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80047e2:	89bb      	ldrh	r3, [r7, #12]
 80047e4:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80047e6:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80047ea:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80047ee:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80047f2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80047f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4623      	mov	r3, r4
 80047fe:	f7ff fd5e 	bl	80042be <Displ_Line>
    for(y=y0; y<=last; y++) {
 8004802:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004806:	b29b      	uxth	r3, r3
 8004808:	3301      	adds	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	867b      	strh	r3, [r7, #50]	; 0x32
 800480e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004812:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004816:	429a      	cmp	r2, r3
 8004818:	ddbb      	ble.n	8004792 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800481a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800481e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004822:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004826:	1a8a      	subs	r2, r1, r2
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800482e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004832:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004836:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800483a:	1a8a      	subs	r2, r1, r2
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8004842:	e03d      	b.n	80048c0 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8004844:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484a:	fb92 f3f3 	sdiv	r3, r2, r3
 800484e:	b29a      	uxth	r2, r3
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4413      	add	r3, r2
 8004854:	b29b      	uxth	r3, r3
 8004856:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8004858:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800485c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004862:	b29a      	uxth	r2, r3
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	4413      	add	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 800486c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004872:	4413      	add	r3, r2
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8004876:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800487a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487c:	4413      	add	r3, r2
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8004880:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004884:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004888:	429a      	cmp	r2, r3
 800488a:	dd05      	ble.n	8004898 <Displ_fillTriangle+0x27e>
 800488c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800488e:	81fb      	strh	r3, [r7, #14]
 8004890:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004892:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004894:	89fb      	ldrh	r3, [r7, #14]
 8004896:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8004898:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800489c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80048a0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80048a4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80048a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4623      	mov	r3, r4
 80048b0:	f7ff fd05 	bl	80042be <Displ_Line>
    for(; y<=y2; y++) {
 80048b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	b29b      	uxth	r3, r3
 80048be:	867b      	strh	r3, [r7, #50]	; 0x32
 80048c0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80048c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	ddbb      	ble.n	8004844 <Displ_fillTriangle+0x22a>
    }
}
 80048cc:	373c      	adds	r7, #60	; 0x3c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
	...

080048d4 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80048d4:	b082      	sub	sp, #8
 80048d6:	b590      	push	{r4, r7, lr}
 80048d8:	b08d      	sub	sp, #52	; 0x34
 80048da:	af00      	add	r7, sp, #0
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
 80048de:	4603      	mov	r3, r0
 80048e0:	80fb      	strh	r3, [r7, #6]
 80048e2:	460b      	mov	r3, r1
 80048e4:	80bb      	strh	r3, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80048ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048ee:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80048f0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d102      	bne.n	80048fe <Displ_WChar+0x2a>
		wsize<<= 1;
 80048f8:	7efb      	ldrb	r3, [r7, #27]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8004902:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004906:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8004910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	3b20      	subs	r3, #32
 8004916:	4619      	mov	r1, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8004922:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004926:	2b02      	cmp	r3, #2
 8004928:	d005      	beq.n	8004936 <Displ_WChar+0x62>
 800492a:	2b03      	cmp	r3, #3
 800492c:	d107      	bne.n	800493e <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 800492e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004932:	61fb      	str	r3, [r7, #28]
			break;
 8004934:	e005      	b.n	8004942 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8004936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493a:	61fb      	str	r3, [r7, #28]
			break;
 800493c:	e001      	b.n	8004942 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	61fb      	str	r3, [r7, #28]
#endif

#ifdef Z_RGB666
//  setting up char image in RGB666 format

	uint8_t Rcol=(color & 0xF800)>>8;
 8004942:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004946:	121b      	asrs	r3, r3, #8
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f023 0307 	bic.w	r3, r3, #7
 800494e:	73fb      	strb	r3, [r7, #15]
	uint8_t Gcol=(color & 0x07E0)>>3;
 8004950:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004954:	10db      	asrs	r3, r3, #3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f023 0303 	bic.w	r3, r3, #3
 800495c:	73bb      	strb	r3, [r7, #14]
	uint8_t Bcol=(color & 0x001F)<<3;
 800495e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	737b      	strb	r3, [r7, #13]
	uint8_t Rbak=(bgcolor & 0xF800)>>8;
 8004966:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800496a:	121b      	asrs	r3, r3, #8
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	733b      	strb	r3, [r7, #12]
	uint8_t Gbak=(bgcolor & 0x07E0)>>3;
 8004974:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004978:	10db      	asrs	r3, r3, #3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f023 0303 	bic.w	r3, r3, #3
 8004980:	72fb      	strb	r3, [r7, #11]
	uint8_t Bbak=(bgcolor & 0x001F)<<3;
 8004982:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	72bb      	strb	r3, [r7, #10]

	for(i = 0; i < (bytes); i+=font.Size){
 800498a:	2300      	movs	r3, #0
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498e:	e0af      	b.n	8004af0 <Displ_WChar+0x21c>
		b=0;
 8004990:	2300      	movs	r3, #0
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8004994:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004998:	2b02      	cmp	r3, #2
 800499a:	d015      	beq.n	80049c8 <Displ_WChar+0xf4>
 800499c:	2b03      	cmp	r3, #3
 800499e:	d120      	bne.n	80049e2 <Displ_WChar+0x10e>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	4413      	add	r3, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	041a      	lsls	r2, r3, #16
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	3301      	adds	r3, #1
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	440b      	add	r3, r1
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	4313      	orrs	r3, r2
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	3202      	adds	r2, #2
 80049bc:	6939      	ldr	r1, [r7, #16]
 80049be:	440a      	add	r2, r1
 80049c0:	7812      	ldrb	r2, [r2, #0]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80049c6:	e011      	b.n	80049ec <Displ_WChar+0x118>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	4413      	add	r3, r2
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d4:	3201      	adds	r2, #1
 80049d6:	6939      	ldr	r1, [r7, #16]
 80049d8:	440a      	add	r2, r1
 80049da:	7812      	ldrb	r2, [r2, #0]
 80049dc:	4313      	orrs	r3, r2
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80049e0:	e004      	b.n	80049ec <Displ_WChar+0x118>
			default:
				b=pos[i];
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	4413      	add	r3, r2
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	e072      	b.n	8004ad8 <Displ_WChar+0x204>
			if((b << j) & mask)  {
 80049f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	409a      	lsls	r2, r3
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d034      	beq.n	8004a6a <Displ_WChar+0x196>
				dispBuffer[bufSize++] = Rcol;
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <Displ_WChar+0x27c>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	1c59      	adds	r1, r3, #1
 8004a08:	6239      	str	r1, [r7, #32]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	7bfa      	ldrb	r2, [r7, #15]
 8004a0e:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gcol;
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <Displ_WChar+0x27c>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	1c59      	adds	r1, r3, #1
 8004a18:	6239      	str	r1, [r7, #32]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	7bba      	ldrb	r2, [r7, #14]
 8004a1e:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bcol;
 8004a20:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <Displ_WChar+0x27c>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	6239      	str	r1, [r7, #32]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	7b7a      	ldrb	r2, [r7, #13]
 8004a2e:	701a      	strb	r2, [r3, #0]

				if (size==2){
 8004a30:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d14c      	bne.n	8004ad2 <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rcol;
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <Displ_WChar+0x27c>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	6239      	str	r1, [r7, #32]
 8004a42:	4413      	add	r3, r2
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gcol;
 8004a48:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <Displ_WChar+0x27c>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	6239      	str	r1, [r7, #32]
 8004a52:	4413      	add	r3, r2
 8004a54:	7bba      	ldrb	r2, [r7, #14]
 8004a56:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bcol;
 8004a58:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <Displ_WChar+0x27c>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	6239      	str	r1, [r7, #32]
 8004a62:	4413      	add	r3, r2
 8004a64:	7b7a      	ldrb	r2, [r7, #13]
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e033      	b.n	8004ad2 <Displ_WChar+0x1fe>
				}
			} else {
				dispBuffer[bufSize++] = Rbak;
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <Displ_WChar+0x27c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	1c59      	adds	r1, r3, #1
 8004a72:	6239      	str	r1, [r7, #32]
 8004a74:	4413      	add	r3, r2
 8004a76:	7b3a      	ldrb	r2, [r7, #12]
 8004a78:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gbak;
 8004a7a:	4b35      	ldr	r3, [pc, #212]	; (8004b50 <Displ_WChar+0x27c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	1c59      	adds	r1, r3, #1
 8004a82:	6239      	str	r1, [r7, #32]
 8004a84:	4413      	add	r3, r2
 8004a86:	7afa      	ldrb	r2, [r7, #11]
 8004a88:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bbak;
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <Displ_WChar+0x27c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	6239      	str	r1, [r7, #32]
 8004a94:	4413      	add	r3, r2
 8004a96:	7aba      	ldrb	r2, [r7, #10]
 8004a98:	701a      	strb	r2, [r3, #0]
				if (size==2) {
 8004a9a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d117      	bne.n	8004ad2 <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rbak;
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <Displ_WChar+0x27c>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	1c59      	adds	r1, r3, #1
 8004aaa:	6239      	str	r1, [r7, #32]
 8004aac:	4413      	add	r3, r2
 8004aae:	7b3a      	ldrb	r2, [r7, #12]
 8004ab0:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gbak;
 8004ab2:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <Displ_WChar+0x27c>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	1c59      	adds	r1, r3, #1
 8004aba:	6239      	str	r1, [r7, #32]
 8004abc:	4413      	add	r3, r2
 8004abe:	7afa      	ldrb	r2, [r7, #11]
 8004ac0:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bbak;
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <Displ_WChar+0x27c>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	6239      	str	r1, [r7, #32]
 8004acc:	4413      	add	r3, r2
 8004ace:	7aba      	ldrb	r2, [r7, #10]
 8004ad0:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004adc:	461a      	mov	r2, r3
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d386      	bcc.n	80049f2 <Displ_WChar+0x11e>
	for(i = 0; i < (bytes); i+=font.Size){
 8004ae4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	4413      	add	r3, r2
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	f4ff af4b 	bcc.w	8004990 <Displ_WChar+0xbc>
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8004afa:	7efb      	ldrb	r3, [r7, #27]
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	4413      	add	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29c      	uxth	r4, r3
 8004b08:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004b0c:	88bb      	ldrh	r3, [r7, #4]
 8004b0e:	4413      	add	r3, r2
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	88b9      	ldrh	r1, [r7, #4]
 8004b18:	88f8      	ldrh	r0, [r7, #6]
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	f7fe ff2e 	bl	800397c <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer,bufSize,0);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <Displ_WChar+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2200      	movs	r2, #0
 8004b26:	6a39      	ldr	r1, [r7, #32]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fed0 	bl	80038ce <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <Displ_WChar+0x27c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <Displ_WChar+0x280>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <Displ_WChar+0x268>
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <Displ_WChar+0x284>)
 8004b3a:	e000      	b.n	8004b3e <Displ_WChar+0x26a>
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <Displ_WChar+0x280>)
 8004b3e:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <Displ_WChar+0x27c>)
 8004b40:	6013      	str	r3, [r2, #0]

}
 8004b42:	bf00      	nop
 8004b44:	3734      	adds	r7, #52	; 0x34
 8004b46:	46bd      	mov	sp, r7
 8004b48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004b4c:	b002      	add	sp, #8
 8004b4e:	4770      	bx	lr
 8004b50:	2000002c 	.word	0x2000002c
 8004b54:	20006874 	.word	0x20006874
 8004b58:	20006c74 	.word	0x20006c74

08004b5c <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	80fb      	strh	r3, [r7, #6]
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80bb      	strh	r3, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	807b      	strh	r3, [r7, #2]
 8004b76:	4613      	mov	r3, r2
 8004b78:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8004b7a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b82:	4293      	cmp	r3, r2
 8004b84:	bfa8      	it	ge
 8004b86:	4613      	movge	r3, r2
 8004b88:	b21b      	sxth	r3, r3
 8004b8a:	0fda      	lsrs	r2, r3, #31
 8004b8c:	4413      	add	r3, r2
 8004b8e:	105b      	asrs	r3, r3, #1
 8004b90:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8004b92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	dd01      	ble.n	8004ba2 <Displ_drawRoundRect+0x46>
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	8c3b      	ldrh	r3, [r7, #32]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	b218      	sxth	r0, r3
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	8c3b      	ldrh	r3, [r7, #32]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b21a      	sxth	r2, r3
 8004bc0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004bc4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4623      	mov	r3, r4
 8004bce:	f7ff fb76 	bl	80042be <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	8c3b      	ldrh	r3, [r7, #32]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	b218      	sxth	r0, r3
 8004bdc:	88ba      	ldrh	r2, [r7, #4]
 8004bde:	883b      	ldrh	r3, [r7, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	b219      	sxth	r1, r3
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	4413      	add	r3, r2
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	8c3b      	ldrh	r3, [r7, #32]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	b21c      	sxth	r4, r3
 8004bfe:	88ba      	ldrh	r2, [r7, #4]
 8004c00:	883b      	ldrh	r3, [r7, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b21a      	sxth	r2, r3
 8004c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	4622      	mov	r2, r4
 8004c14:	f7ff fb53 	bl	80042be <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8004c18:	88ba      	ldrh	r2, [r7, #4]
 8004c1a:	8c3b      	ldrh	r3, [r7, #32]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	b219      	sxth	r1, r3
 8004c22:	88ba      	ldrh	r2, [r7, #4]
 8004c24:	883b      	ldrh	r3, [r7, #0]
 8004c26:	4413      	add	r3, r2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	8c3b      	ldrh	r3, [r7, #32]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	b21c      	sxth	r4, r3
 8004c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	4623      	mov	r3, r4
 8004c44:	f7ff fb3b 	bl	80042be <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	b218      	sxth	r0, r3
 8004c56:	88ba      	ldrh	r2, [r7, #4]
 8004c58:	8c3b      	ldrh	r3, [r7, #32]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	b219      	sxth	r1, r3
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	4413      	add	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b21c      	sxth	r4, r3
 8004c6e:	88ba      	ldrh	r2, [r7, #4]
 8004c70:	883b      	ldrh	r3, [r7, #0]
 8004c72:	4413      	add	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	8c3b      	ldrh	r3, [r7, #32]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	b21a      	sxth	r2, r3
 8004c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	4622      	mov	r2, r4
 8004c8a:	f7ff fb18 	bl	80042be <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	8c3b      	ldrh	r3, [r7, #32]
 8004c92:	4413      	add	r3, r2
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b218      	sxth	r0, r3
 8004c98:	88ba      	ldrh	r2, [r7, #4]
 8004c9a:	8c3b      	ldrh	r3, [r7, #32]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	b219      	sxth	r1, r3
 8004ca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2301      	movs	r3, #1
 8004cac:	f7ff f93a 	bl	8003f24 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	8c3b      	ldrh	r3, [r7, #32]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	b218      	sxth	r0, r3
 8004cc4:	88ba      	ldrh	r2, [r7, #4]
 8004cc6:	8c3b      	ldrh	r3, [r7, #32]
 8004cc8:	4413      	add	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	b219      	sxth	r1, r3
 8004cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	f7ff f924 	bl	8003f24 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	887b      	ldrh	r3, [r7, #2]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	8c3b      	ldrh	r3, [r7, #32]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	b218      	sxth	r0, r3
 8004cf0:	88ba      	ldrh	r2, [r7, #4]
 8004cf2:	883b      	ldrh	r3, [r7, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	8c3b      	ldrh	r3, [r7, #32]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b219      	sxth	r1, r3
 8004d04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f7ff f909 	bl	8003f24 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	8c3b      	ldrh	r3, [r7, #32]
 8004d16:	4413      	add	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	b218      	sxth	r0, r3
 8004d1c:	88ba      	ldrh	r2, [r7, #4]
 8004d1e:	883b      	ldrh	r3, [r7, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	8c3b      	ldrh	r3, [r7, #32]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b219      	sxth	r1, r3
 8004d30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2308      	movs	r3, #8
 8004d3a:	f7ff f8f3 	bl	8003f24 <drawCircleHelper>
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}

08004d46 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004d46:	b590      	push	{r4, r7, lr}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af02      	add	r7, sp, #8
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	4608      	mov	r0, r1
 8004d50:	4611      	mov	r1, r2
 8004d52:	461a      	mov	r2, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	80fb      	strh	r3, [r7, #6]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	80bb      	strh	r3, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
 8004d60:	4613      	mov	r3, r2
 8004d62:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8004d64:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004d68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	bfa8      	it	ge
 8004d70:	4613      	movge	r3, r2
 8004d72:	b21b      	sxth	r3, r3
 8004d74:	0fda      	lsrs	r2, r3, #31
 8004d76:	4413      	add	r3, r2
 8004d78:	105b      	asrs	r3, r3, #1
 8004d7a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8004d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	dd01      	ble.n	8004d8c <Displ_fillRoundRect+0x46>
 8004d88:	89fb      	ldrh	r3, [r7, #14]
 8004d8a:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	8c3b      	ldrh	r3, [r7, #32]
 8004d90:	4413      	add	r3, r2
 8004d92:	b298      	uxth	r0, r3
 8004d94:	88b9      	ldrh	r1, [r7, #4]
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	8c3b      	ldrh	r3, [r7, #32]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	883c      	ldrh	r4, [r7, #0]
 8004da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4623      	mov	r3, r4
 8004daa:	f7fe fed7 	bl	8003b5c <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	4413      	add	r3, r2
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	8c3b      	ldrh	r3, [r7, #32]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	b218      	sxth	r0, r3
 8004dc2:	88ba      	ldrh	r2, [r7, #4]
 8004dc4:	8c3b      	ldrh	r3, [r7, #32]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b219      	sxth	r1, r3
 8004dcc:	883a      	ldrh	r2, [r7, #0]
 8004dce:	8c3b      	ldrh	r3, [r7, #32]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	b21b      	sxth	r3, r3
 8004dde:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004de4:	9201      	str	r2, [sp, #4]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2301      	movs	r3, #1
 8004dea:	4622      	mov	r2, r4
 8004dec:	f7ff f95e 	bl	80040ac <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	8c3b      	ldrh	r3, [r7, #32]
 8004df4:	4413      	add	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	b218      	sxth	r0, r3
 8004dfa:	88ba      	ldrh	r2, [r7, #4]
 8004dfc:	8c3b      	ldrh	r3, [r7, #32]
 8004dfe:	4413      	add	r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b219      	sxth	r1, r3
 8004e04:	883a      	ldrh	r2, [r7, #0]
 8004e06:	8c3b      	ldrh	r3, [r7, #32]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e1c:	9201      	str	r2, [sp, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2302      	movs	r3, #2
 8004e22:	4622      	mov	r2, r4
 8004e24:	f7ff f942 	bl	80040ac <fillCircleHelper>
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd90      	pop	{r4, r7, pc}

08004e30 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8004e30:	b082      	sub	sp, #8
 8004e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e34:	b08b      	sub	sp, #44	; 0x2c
 8004e36:	af06      	add	r7, sp, #24
 8004e38:	603a      	str	r2, [r7, #0]
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	80fb      	strh	r3, [r7, #6]
 8004e40:	460b      	mov	r3, r1
 8004e42:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8004e44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e46:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8004e48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d922      	bls.n	8004e96 <Displ_WString+0x66>
		delta<<=1;
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8004e56:	e01e      	b.n	8004e96 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	88bd      	ldrh	r5, [r7, #4]
 8004e5e:	88fc      	ldrh	r4, [r7, #6]
 8004e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004e6e:	9302      	str	r3, [sp, #8]
 8004e70:	466e      	mov	r6, sp
 8004e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	4629      	mov	r1, r5
 8004e82:	4620      	mov	r0, r4
 8004e84:	f7ff fd26 	bl	80048d4 <Displ_WChar>
        x += delta;
 8004e88:	88fa      	ldrh	r2, [r7, #6]
 8004e8a:	89fb      	ldrh	r3, [r7, #14]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	80fb      	strh	r3, [r7, #6]
        str++;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1dc      	bne.n	8004e58 <Displ_WString+0x28>
    }
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004eaa:	b002      	add	sp, #8
 8004eac:	4770      	bx	lr
	...

08004eb0 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	2b51      	cmp	r3, #81	; 0x51
 8004ebe:	d00a      	beq.n	8004ed6 <Displ_BackLight+0x26>
 8004ec0:	2b51      	cmp	r3, #81	; 0x51
 8004ec2:	dc16      	bgt.n	8004ef2 <Displ_BackLight+0x42>
 8004ec4:	2b46      	cmp	r3, #70	; 0x46
 8004ec6:	d008      	beq.n	8004eda <Displ_BackLight+0x2a>
 8004ec8:	2b46      	cmp	r3, #70	; 0x46
 8004eca:	dc12      	bgt.n	8004ef2 <Displ_BackLight+0x42>
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d00a      	beq.n	8004ee6 <Displ_BackLight+0x36>
 8004ed0:	2b31      	cmp	r3, #49	; 0x31
 8004ed2:	d002      	beq.n	8004eda <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8004ed4:	e00d      	b.n	8004ef2 <Displ_BackLight+0x42>
		__NOP();
 8004ed6:	bf00      	nop
		break;
 8004ed8:	e00c      	b.n	8004ef4 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8004eda:	2201      	movs	r2, #1
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	480a      	ldr	r0, [pc, #40]	; (8004f08 <Displ_BackLight+0x58>)
 8004ee0:	f002 f860 	bl	8006fa4 <HAL_GPIO_WritePin>
		break;
 8004ee4:	e006      	b.n	8004ef4 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	4807      	ldr	r0, [pc, #28]	; (8004f08 <Displ_BackLight+0x58>)
 8004eec:	f002 f85a 	bl	8006fa4 <HAL_GPIO_WritePin>
		break;
 8004ef0:	e000      	b.n	8004ef4 <Displ_BackLight+0x44>
		break;
 8004ef2:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8004ef4:	2140      	movs	r1, #64	; 0x40
 8004ef6:	4804      	ldr	r0, [pc, #16]	; (8004f08 <Displ_BackLight+0x58>)
 8004ef8:	f002 f83c 	bl	8006f74 <HAL_GPIO_ReadPin>
 8004efc:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40020000 	.word	0x40020000

08004f0c <testLines>:




void testLines(uint16_t color)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b08b      	sub	sp, #44	; 0x2c
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	4603      	mov	r3, r0
 8004f14:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8004f16:	4b7c      	ldr	r3, [pc, #496]	; (8005108 <testLines+0x1fc>)
 8004f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f1c:	617b      	str	r3, [r7, #20]
                  h = _height;
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	; (800510c <testLines+0x200>)
 8004f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f24:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7fe ffe0 	bl	8003eec <Displ_CLS>

    x1 = y1 = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e00f      	b.n	8004f60 <testLines+0x54>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	b218      	sxth	r0, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	b219      	sxth	r1, r3
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	b21a      	sxth	r2, r3
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	b21c      	sxth	r4, r3
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	4623      	mov	r3, r4
 8004f56:	f7ff f9b2 	bl	80042be <Displ_Line>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3306      	adds	r3, #6
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	dbeb      	blt.n	8004f40 <testLines+0x34>
    x2    = w - 1;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	e00f      	b.n	8004f94 <testLines+0x88>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	b218      	sxth	r0, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	b219      	sxth	r1, r3
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	b21a      	sxth	r2, r3
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	b21c      	sxth	r4, r3
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4623      	mov	r3, r4
 8004f8a:	f7ff f998 	bl	80042be <Displ_Line>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	3306      	adds	r3, #6
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	dbeb      	blt.n	8004f74 <testLines+0x68>

    Displ_CLS(BLACK);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fe ffa5 	bl	8003eec <Displ_CLS>

    x1    = w - 1;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e00f      	b.n	8004fd8 <testLines+0xcc>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	b218      	sxth	r0, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	b219      	sxth	r1, r3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	b21a      	sxth	r2, r3
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	b21c      	sxth	r4, r3
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4623      	mov	r3, r4
 8004fce:	f7ff f976 	bl	80042be <Displ_Line>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3306      	adds	r3, #6
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	dbeb      	blt.n	8004fb8 <testLines+0xac>
    x2    = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e00f      	b.n	800500a <testLines+0xfe>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	b218      	sxth	r0, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	b219      	sxth	r1, r3
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	b21a      	sxth	r2, r3
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	b21c      	sxth	r4, r3
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4623      	mov	r3, r4
 8005000:	f7ff f95d 	bl	80042be <Displ_Line>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	3306      	adds	r3, #6
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	429a      	cmp	r2, r3
 8005010:	dbeb      	blt.n	8004fea <testLines+0xde>

    Displ_CLS(BLACK);
 8005012:	2000      	movs	r0, #0
 8005014:	f7fe ff6a 	bl	8003eec <Displ_CLS>

    x1    = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3b01      	subs	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	e00f      	b.n	800504c <testLines+0x140>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	b218      	sxth	r0, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	b219      	sxth	r1, r3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	b21a      	sxth	r2, r3
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	b21c      	sxth	r4, r3
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4623      	mov	r3, r4
 8005042:	f7ff f93c 	bl	80042be <Displ_Line>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3306      	adds	r3, #6
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	dbeb      	blt.n	800502c <testLines+0x120>
    x2    = w - 1;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3b01      	subs	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	e00f      	b.n	8005080 <testLines+0x174>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	b218      	sxth	r0, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	b219      	sxth	r1, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	b21a      	sxth	r2, r3
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	b21c      	sxth	r4, r3
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4623      	mov	r3, r4
 8005076:	f7ff f922 	bl	80042be <Displ_Line>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	3306      	adds	r3, #6
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	dbeb      	blt.n	8005060 <testLines+0x154>

    Displ_CLS(BLACK);
 8005088:	2000      	movs	r0, #0
 800508a:	f7fe ff2f 	bl	8003eec <Displ_CLS>

    x1    = w - 1;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3b01      	subs	r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	3b01      	subs	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	e00f      	b.n	80050c4 <testLines+0x1b8>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	b218      	sxth	r0, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	b219      	sxth	r1, r3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	b21a      	sxth	r2, r3
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	b21c      	sxth	r4, r3
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4623      	mov	r3, r4
 80050ba:	f7ff f900 	bl	80042be <Displ_Line>
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3306      	adds	r3, #6
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dbeb      	blt.n	80050a4 <testLines+0x198>
    x2    = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80050d0:	2300      	movs	r3, #0
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	e00f      	b.n	80050f6 <testLines+0x1ea>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	b218      	sxth	r0, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	b219      	sxth	r1, r3
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	b21a      	sxth	r2, r3
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	b21c      	sxth	r4, r3
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	4623      	mov	r3, r4
 80050ec:	f7ff f8e7 	bl	80042be <Displ_Line>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3306      	adds	r3, #6
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	dbeb      	blt.n	80050d6 <testLines+0x1ca>

}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	3724      	adds	r7, #36	; 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	2000686e 	.word	0x2000686e
 800510c:	20006870 	.word	0x20006870

08005110 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af02      	add	r7, sp, #8
 8005116:	4603      	mov	r3, r0
 8005118:	460a      	mov	r2, r1
 800511a:	80fb      	strh	r3, [r7, #6]
 800511c:	4613      	mov	r3, r2
 800511e:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8005120:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <testFastLines+0x94>)
 8005122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	4b1f      	ldr	r3, [pc, #124]	; (80051a8 <testFastLines+0x98>)
 800512a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800512e:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8005130:	2000      	movs	r0, #0
 8005132:	f7fe fedb 	bl	8003eec <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e011      	b.n	8005160 <testFastLines+0x50>
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	b219      	sxth	r1, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29b      	uxth	r3, r3
 8005148:	b21a      	sxth	r2, r3
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	b218      	sxth	r0, r3
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	4603      	mov	r3, r0
 8005154:	2000      	movs	r0, #0
 8005156:	f7ff f8b2 	bl	80042be <Displ_Line>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3305      	adds	r3, #5
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	dbe9      	blt.n	800513c <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e011      	b.n	8005192 <testFastLines+0x82>
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	b218      	sxth	r0, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	b21a      	sxth	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	b219      	sxth	r1, r3
 8005180:	88bb      	ldrh	r3, [r7, #4]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	460b      	mov	r3, r1
 8005186:	2100      	movs	r1, #0
 8005188:	f7ff f899 	bl	80042be <Displ_Line>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3305      	adds	r3, #5
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	429a      	cmp	r2, r3
 8005198:	dbe9      	blt.n	800516e <testFastLines+0x5e>
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	2000686e 	.word	0x2000686e
 80051a8:	20006870 	.word	0x20006870

080051ac <testRects>:




void testRects(uint16_t color)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b08b      	sub	sp, #44	; 0x2c
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	4603      	mov	r3, r0
 80051b4:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 80051b6:	4b25      	ldr	r3, [pc, #148]	; (800524c <testRects+0xa0>)
 80051b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051bc:	0fda      	lsrs	r2, r3, #31
 80051be:	4413      	add	r3, r2
 80051c0:	105b      	asrs	r3, r3, #1
 80051c2:	b21b      	sxth	r3, r3
 80051c4:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <testRects+0xa4>)
 80051c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051cc:	0fda      	lsrs	r2, r3, #31
 80051ce:	4413      	add	r3, r2
 80051d0:	105b      	asrs	r3, r3, #1
 80051d2:	b21b      	sxth	r3, r3
 80051d4:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fe fe88 	bl	8003eec <Displ_CLS>
	n     = min(_width, _height);
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <testRects+0xa4>)
 80051de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <testRects+0xa0>)
 80051e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	bfa8      	it	ge
 80051ec:	4613      	movge	r3, r2
 80051ee:	b21b      	sxth	r3, r3
 80051f0:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80051f2:	2302      	movs	r3, #2
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e020      	b.n	800523a <testRects+0x8e>
		i2 = i / 2;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	0fda      	lsrs	r2, r3, #31
 80051fc:	4413      	add	r3, r2
 80051fe:	105b      	asrs	r3, r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	b29b      	uxth	r3, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	b29b      	uxth	r3, r3
 800520e:	b218      	sxth	r0, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	b29b      	uxth	r3, r3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	b219      	sxth	r1, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	b21a      	sxth	r2, r3
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	b21c      	sxth	r4, r3
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2301      	movs	r3, #1
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	4623      	mov	r3, r4
 8005230:	f7ff f976 	bl	8004520 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3306      	adds	r3, #6
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	dbda      	blt.n	80051f8 <testRects+0x4c>
	}
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	3724      	adds	r7, #36	; 0x24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}
 800524c:	2000686e 	.word	0x2000686e
 8005250:	20006870 	.word	0x20006870

08005254 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b08b      	sub	sp, #44	; 0x2c
 8005258:	af02      	add	r7, sp, #8
 800525a:	4603      	mov	r3, r0
 800525c:	460a      	mov	r2, r1
 800525e:	80fb      	strh	r3, [r7, #6]
 8005260:	4613      	mov	r3, r2
 8005262:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8005264:	4b30      	ldr	r3, [pc, #192]	; (8005328 <testFilledRects+0xd4>)
 8005266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800526a:	0fda      	lsrs	r2, r3, #31
 800526c:	4413      	add	r3, r2
 800526e:	105b      	asrs	r3, r3, #1
 8005270:	b21b      	sxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <testFilledRects+0xd8>)
 8005278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800527c:	0fda      	lsrs	r2, r3, #31
 800527e:	4413      	add	r3, r2
 8005280:	105b      	asrs	r3, r3, #1
 8005282:	b21b      	sxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8005288:	2000      	movs	r0, #0
 800528a:	f7fe fe2f 	bl	8003eec <Displ_CLS>
	n = min(_width, _height);
 800528e:	4b27      	ldr	r3, [pc, #156]	; (800532c <testFilledRects+0xd8>)
 8005290:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <testFilledRects+0xd4>)
 8005296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800529a:	4293      	cmp	r3, r2
 800529c:	bfa8      	it	ge
 800529e:	4613      	movge	r3, r2
 80052a0:	b21b      	sxth	r3, r3
 80052a2:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	e035      	b.n	8005316 <testFilledRects+0xc2>
		i2    = i / 2;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	0fda      	lsrs	r2, r3, #31
 80052ae:	4413      	add	r3, r2
 80052b0:	105b      	asrs	r3, r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b298      	uxth	r0, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	b299      	uxth	r1, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	b29c      	uxth	r4, r3
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4623      	mov	r3, r4
 80052da:	f7fe fc3f 	bl	8003b5c <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b218      	sxth	r0, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b219      	sxth	r1, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	b21a      	sxth	r2, r3
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	b21c      	sxth	r4, r3
 8005302:	88bb      	ldrh	r3, [r7, #4]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	2301      	movs	r3, #1
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4623      	mov	r3, r4
 800530c:	f7ff f908 	bl	8004520 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3b06      	subs	r3, #6
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	dcc6      	bgt.n	80052aa <testFilledRects+0x56>
	}
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}
 8005326:	bf00      	nop
 8005328:	2000686e 	.word	0x2000686e
 800532c:	20006870 	.word	0x20006870

08005330 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	460a      	mov	r2, r1
 800533a:	71fb      	strb	r3, [r7, #7]
 800533c:	4613      	mov	r3, r2
 800533e:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8005340:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <testFilledCircles+0x74>)
 8005342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <testFilledCircles+0x78>)
 800534a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8005356:	2000      	movs	r0, #0
 8005358:	f7fe fdc8 	bl	8003eec <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e017      	b.n	8005392 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e00c      	b.n	8005382 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	b218      	sxth	r0, r3
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	b219      	sxth	r1, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	b21a      	sxth	r2, r3
 8005374:	88bb      	ldrh	r3, [r7, #4]
 8005376:	f7fe ff6f 	bl	8004258 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	dbee      	blt.n	8005368 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	429a      	cmp	r2, r3
 8005398:	dbe3      	blt.n	8005362 <testFilledCircles+0x32>
        }
    }
}
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	2000686e 	.word	0x2000686e
 80053a8:	20006870 	.word	0x20006870

080053ac <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	460a      	mov	r2, r1
 80053b6:	71fb      	strb	r3, [r7, #7]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <testCircles+0x7c>)
 80053c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	4413      	add	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <testCircles+0x80>)
 80053d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053d6:	461a      	mov	r2, r3
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4413      	add	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	e017      	b.n	8005414 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e00c      	b.n	8005404 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	b218      	sxth	r0, r3
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	b219      	sxth	r1, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	b21a      	sxth	r2, r3
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	f7fe fca4 	bl	8003d44 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4413      	add	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	dbee      	blt.n	80053ea <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	dbe3      	blt.n	80053e4 <testCircles+0x38>
        }
    }
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	2000686e 	.word	0x2000686e
 800542c:	20006870 	.word	0x20006870

08005430 <testTriangles>:




void testTriangles()
{
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8005436:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <testTriangles+0xc0>)
 8005438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800543c:	0fda      	lsrs	r2, r3, #31
 800543e:	4413      	add	r3, r2
 8005440:	105b      	asrs	r3, r3, #1
 8005442:	b21b      	sxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8005448:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <testTriangles+0xc4>)
 800544a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800544e:	0fda      	lsrs	r2, r3, #31
 8005450:	4413      	add	r3, r2
 8005452:	105b      	asrs	r3, r3, #1
 8005454:	b21b      	sxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800545a:	2000      	movs	r0, #0
 800545c:	f7fe fd46 	bl	8003eec <Displ_CLS>
    n     = min(cx, cy);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4293      	cmp	r3, r2
 8005466:	bfa8      	it	ge
 8005468:	4613      	movge	r3, r2
 800546a:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e035      	b.n	80054de <testTriangles+0xae>
    	Displ_drawTriangle(
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	b29b      	uxth	r3, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8005482:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	b29b      	uxth	r3, r3
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8005490:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	b29b      	uxth	r3, r3
 800549a:	4413      	add	r3, r2
 800549c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800549e:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80054ac:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	b291      	uxth	r1, r2
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	b292      	uxth	r2, r2
 80054b6:	440a      	add	r2, r1
 80054b8:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 80054ba:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	10c9      	asrs	r1, r1, #3
 80054c0:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 80054c2:	f001 011f 	and.w	r1, r1, #31
 80054c6:	b289      	uxth	r1, r1
 80054c8:	9102      	str	r1, [sp, #8]
 80054ca:	9201      	str	r2, [sp, #4]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4633      	mov	r3, r6
 80054d0:	462a      	mov	r2, r5
 80054d2:	4621      	mov	r1, r4
 80054d4:	f7ff f867 	bl	80045a6 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3305      	adds	r3, #5
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	dbc5      	blt.n	8005472 <testTriangles+0x42>
    }
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f0:	2000686e 	.word	0x2000686e
 80054f4:	20006870 	.word	0x20006870

080054f8 <testFilledTriangles>:





void testFilledTriangles() {
 80054f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fa:	b089      	sub	sp, #36	; 0x24
 80054fc:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80054fe:	4b53      	ldr	r3, [pc, #332]	; (800564c <testFilledTriangles+0x154>)
 8005500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005504:	0fda      	lsrs	r2, r3, #31
 8005506:	4413      	add	r3, r2
 8005508:	105b      	asrs	r3, r3, #1
 800550a:	b21b      	sxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <testFilledTriangles+0x158>)
 8005512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005516:	0fda      	lsrs	r2, r3, #31
 8005518:	4413      	add	r3, r2
 800551a:	105b      	asrs	r3, r3, #1
 800551c:	b21b      	sxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8005522:	2000      	movs	r0, #0
 8005524:	f7fe fce2 	bl	8003eec <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4293      	cmp	r3, r2
 800552e:	bfa8      	it	ge
 8005530:	4613      	movge	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e080      	b.n	8005638 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	b21c      	sxth	r4, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	b29b      	uxth	r3, r3
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b29b      	uxth	r3, r3
 8005546:	b21d      	sxth	r5, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	b29b      	uxth	r3, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	b21e      	sxth	r6, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	b29b      	uxth	r3, r3
 800555e:	4413      	add	r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	fa0f fc83 	sxth.w	ip, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	b29b      	uxth	r3, r3
 800556e:	4413      	add	r3, r2
 8005570:	b29b      	uxth	r3, r3
 8005572:	b21b      	sxth	r3, r3
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	b291      	uxth	r1, r2
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	b292      	uxth	r2, r2
 800557c:	440a      	add	r2, r1
 800557e:	b292      	uxth	r2, r2
 8005580:	b212      	sxth	r2, r2
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	00c9      	lsls	r1, r1, #3
 8005586:	b209      	sxth	r1, r1
 8005588:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 800558c:	b208      	sxth	r0, r1
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	10c9      	asrs	r1, r1, #3
 8005592:	b209      	sxth	r1, r1
 8005594:	f001 011f 	and.w	r1, r1, #31
 8005598:	b209      	sxth	r1, r1
 800559a:	4301      	orrs	r1, r0
 800559c:	b209      	sxth	r1, r1
 800559e:	b289      	uxth	r1, r1
 80055a0:	9102      	str	r1, [sp, #8]
 80055a2:	9201      	str	r2, [sp, #4]
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4663      	mov	r3, ip
 80055a8:	4632      	mov	r2, r6
 80055aa:	4629      	mov	r1, r5
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff f834 	bl	800461a <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	b21c      	sxth	r4, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	b21d      	sxth	r5, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	b21e      	sxth	r6, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4413      	add	r3, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	fa0f fc83 	sxth.w	ip, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	b21a      	sxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	b299      	uxth	r1, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	440b      	add	r3, r1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b219      	sxth	r1, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	b21b      	sxth	r3, r3
 8005604:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	b218      	sxth	r0, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	b21b      	sxth	r3, r3
 8005614:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005618:	b21b      	sxth	r3, r3
 800561a:	4303      	orrs	r3, r0
 800561c:	b21b      	sxth	r3, r3
 800561e:	b29b      	uxth	r3, r3
 8005620:	9302      	str	r3, [sp, #8]
 8005622:	9101      	str	r1, [sp, #4]
 8005624:	9200      	str	r2, [sp, #0]
 8005626:	4663      	mov	r3, ip
 8005628:	4632      	mov	r2, r6
 800562a:	4629      	mov	r1, r5
 800562c:	4620      	mov	r0, r4
 800562e:	f7fe ffba 	bl	80045a6 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3b05      	subs	r3, #5
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b0a      	cmp	r3, #10
 800563c:	f73f af7b 	bgt.w	8005536 <testFilledTriangles+0x3e>
    }
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564a:	bf00      	nop
 800564c:	2000686e 	.word	0x2000686e
 8005650:	20006870 	.word	0x20006870

08005654 <testRoundRects>:





void testRoundRects() {
 8005654:	b5b0      	push	{r4, r5, r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800565a:	4b33      	ldr	r3, [pc, #204]	; (8005728 <testRoundRects+0xd4>)
 800565c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005660:	0fda      	lsrs	r2, r3, #31
 8005662:	4413      	add	r3, r2
 8005664:	105b      	asrs	r3, r3, #1
 8005666:	b21b      	sxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 800566c:	4b2f      	ldr	r3, [pc, #188]	; (800572c <testRoundRects+0xd8>)
 800566e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005672:	0fda      	lsrs	r2, r3, #31
 8005674:	4413      	add	r3, r2
 8005676:	105b      	asrs	r3, r3, #1
 8005678:	b21b      	sxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 800567e:	2000      	movs	r0, #0
 8005680:	f7fe fc34 	bl	8003eec <Displ_CLS>
    w     = min(_width, _height);
 8005684:	4b29      	ldr	r3, [pc, #164]	; (800572c <testRoundRects+0xd8>)
 8005686:	f9b3 2000 	ldrsh.w	r2, [r3]
 800568a:	4b27      	ldr	r3, [pc, #156]	; (8005728 <testRoundRects+0xd4>)
 800568c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005690:	4293      	cmp	r3, r2
 8005692:	bfa8      	it	ge
 8005694:	4613      	movge	r3, r2
 8005696:	b21b      	sxth	r3, r3
 8005698:	60fb      	str	r3, [r7, #12]
    red = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 800569e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80056a8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	e031      	b.n	8005714 <testRoundRects+0xc0>
        i2 = i / 2;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	0fda      	lsrs	r2, r3, #31
 80056b4:	4413      	add	r3, r2
 80056b6:	105b      	asrs	r3, r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
        red += step;
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4413      	add	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	b218      	sxth	r0, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	b29b      	uxth	r3, r3
 80056dc:	b219      	sxth	r1, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	b21c      	sxth	r4, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	b21d      	sxth	r5, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da00      	bge.n	80056ee <testRoundRects+0x9a>
 80056ec:	3307      	adds	r3, #7
 80056ee:	10db      	asrs	r3, r3, #3
 80056f0:	b21a      	sxth	r2, r3
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056fc:	f023 0307 	bic.w	r3, r3, #7
 8005700:	b29b      	uxth	r3, r3
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	9200      	str	r2, [sp, #0]
 8005706:	462b      	mov	r3, r5
 8005708:	4622      	mov	r2, r4
 800570a:	f7ff fa27 	bl	8004b5c <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3306      	adds	r3, #6
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	dbc9      	blt.n	80056b0 <testRoundRects+0x5c>
    }
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bdb0      	pop	{r4, r5, r7, pc}
 8005726:	bf00      	nop
 8005728:	2000686e 	.word	0x2000686e
 800572c:	20006870 	.word	0x20006870

08005730 <testFilledRoundRects>:





void testFilledRoundRects() {
 8005730:	b5b0      	push	{r4, r5, r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <testFilledRoundRects+0xe0>)
 8005738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800573c:	0fda      	lsrs	r2, r3, #31
 800573e:	4413      	add	r3, r2
 8005740:	105b      	asrs	r3, r3, #1
 8005742:	b21b      	sxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8005748:	4b32      	ldr	r3, [pc, #200]	; (8005814 <testFilledRoundRects+0xe4>)
 800574a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800574e:	0fda      	lsrs	r2, r3, #31
 8005750:	4413      	add	r3, r2
 8005752:	105b      	asrs	r3, r3, #1
 8005754:	b21b      	sxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800575a:	2000      	movs	r0, #0
 800575c:	f7fe fbc6 	bl	8003eec <Displ_CLS>
    green = 256;
 8005760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005764:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8005766:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <testFilledRoundRects+0xe4>)
 8005768:	f9b3 2000 	ldrsh.w	r2, [r3]
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <testFilledRoundRects+0xe0>)
 800576e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005772:	4293      	cmp	r3, r2
 8005774:	bfa8      	it	ge
 8005776:	4613      	movge	r3, r2
 8005778:	b21b      	sxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005780:	fb93 f3f2 	sdiv	r3, r3, r2
 8005784:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8005786:	4b23      	ldr	r3, [pc, #140]	; (8005814 <testFilledRoundRects+0xe4>)
 8005788:	f9b3 2000 	ldrsh.w	r2, [r3]
 800578c:	4b20      	ldr	r3, [pc, #128]	; (8005810 <testFilledRoundRects+0xe0>)
 800578e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005792:	4293      	cmp	r3, r2
 8005794:	bfa8      	it	ge
 8005796:	4613      	movge	r3, r2
 8005798:	b21b      	sxth	r3, r3
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e02f      	b.n	80057fe <testFilledRoundRects+0xce>
        i2 = i / 2;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	0fda      	lsrs	r2, r3, #31
 80057a2:	4413      	add	r3, r2
 80057a4:	105b      	asrs	r3, r3, #1
 80057a6:	603b      	str	r3, [r7, #0]
        green -= step;
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	b218      	sxth	r0, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	b219      	sxth	r1, r3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	b21c      	sxth	r4, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	b21d      	sxth	r5, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da00      	bge.n	80057dc <testFilledRoundRects+0xac>
 80057da:	3307      	adds	r3, #7
 80057dc:	10db      	asrs	r3, r3, #3
 80057de:	b21b      	sxth	r3, r3
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	00d2      	lsls	r2, r2, #3
 80057e4:	b292      	uxth	r2, r2
 80057e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80057ea:	b292      	uxth	r2, r2
 80057ec:	9201      	str	r2, [sp, #4]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	462b      	mov	r3, r5
 80057f2:	4622      	mov	r2, r4
 80057f4:	f7ff faa7 	bl	8004d46 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	3b06      	subs	r3, #6
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b14      	cmp	r3, #20
 8005802:	dccc      	bgt.n	800579e <testFilledRoundRects+0x6e>
    }
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bdb0      	pop	{r4, r5, r7, pc}
 800580e:	bf00      	nop
 8005810:	2000686e 	.word	0x2000686e
 8005814:	20006870 	.word	0x20006870

08005818 <testFillScreen>:




void testFillScreen()
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 800581c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005820:	f7fe fb64 	bl	8003eec <Displ_CLS>
	Displ_CLS(GREEN);
 8005824:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005828:	f7fe fb60 	bl	8003eec <Displ_CLS>
	Displ_CLS(BLUE);
 800582c:	201f      	movs	r0, #31
 800582e:	f7fe fb5d 	bl	8003eec <Displ_CLS>
	Displ_CLS(YELLOW);
 8005832:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8005836:	f7fe fb59 	bl	8003eec <Displ_CLS>
	Displ_CLS(BLACK);
 800583a:	2000      	movs	r0, #0
 800583c:	f7fe fb56 	bl	8003eec <Displ_CLS>
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}

08005844 <Displ_TestAll>:





void Displ_TestAll (){
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
	testFillScreen();
 8005848:	f7ff ffe6 	bl	8005818 <testFillScreen>
	testLines(CYAN);
 800584c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8005850:	f7ff fb5c 	bl	8004f0c <testLines>
	testFastLines(RED, BLUE);
 8005854:	211f      	movs	r1, #31
 8005856:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800585a:	f7ff fc59 	bl	8005110 <testFastLines>
	testRects(GREEN);
 800585e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005862:	f7ff fca3 	bl	80051ac <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8005866:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800586a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800586e:	f7ff fcf1 	bl	8005254 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8005872:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8005876:	200a      	movs	r0, #10
 8005878:	f7ff fd5a 	bl	8005330 <testFilledCircles>
	testCircles(10, WHITE);
 800587c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005880:	200a      	movs	r0, #10
 8005882:	f7ff fd93 	bl	80053ac <testCircles>
	testTriangles();
 8005886:	f7ff fdd3 	bl	8005430 <testTriangles>
	testFilledTriangles();
 800588a:	f7ff fe35 	bl	80054f8 <testFilledTriangles>
	testRoundRects();
 800588e:	f7ff fee1 	bl	8005654 <testRoundRects>
	testFilledRoundRects();
 8005892:	f7ff ff4d 	bl	8005730 <testFilledRoundRects>
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800589c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80058a0:	480d      	ldr	r0, [pc, #52]	; (80058d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80058a2:	490e      	ldr	r1, [pc, #56]	; (80058dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80058a4:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80058a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058a8:	e002      	b.n	80058b0 <LoopCopyDataInit>

080058aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ae:	3304      	adds	r3, #4

080058b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058b4:	d3f9      	bcc.n	80058aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058b6:	4a0b      	ldr	r2, [pc, #44]	; (80058e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80058b8:	4c0b      	ldr	r4, [pc, #44]	; (80058e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80058ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058bc:	e001      	b.n	80058c2 <LoopFillZerobss>

080058be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058c0:	3204      	adds	r2, #4

080058c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058c4:	d3fb      	bcc.n	80058be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80058c6:	f7fd fddf 	bl	8003488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058ca:	f004 fe01 	bl	800a4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058ce:	f7fc fc49 	bl	8002164 <main>
  bx  lr    
 80058d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80058d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058dc:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80058e0:	0800e184 	.word	0x0800e184
  ldr r2, =_sbss
 80058e4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80058e8:	200071cc 	.word	0x200071cc

080058ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058ec:	e7fe      	b.n	80058ec <ADC_IRQHandler>
	...

080058f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_Init+0x40>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <HAL_Init+0x40>)
 80058fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_Init+0x40>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_Init+0x40>)
 8005906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800590a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <HAL_Init+0x40>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a07      	ldr	r2, [pc, #28]	; (8005930 <HAL_Init+0x40>)
 8005912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005918:	2003      	movs	r0, #3
 800591a:	f000 fd53 	bl	80063c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800591e:	2000      	movs	r0, #0
 8005920:	f000 f808 	bl	8005934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005924:	f7fd fa0e 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023c00 	.word	0x40023c00

08005934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_InitTick+0x54>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_InitTick+0x58>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4619      	mov	r1, r3
 8005946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800594a:	fbb3 f3f1 	udiv	r3, r3, r1
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fd6b 	bl	800642e <HAL_SYSTICK_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e00e      	b.n	8005980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d80a      	bhi.n	800597e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005968:	2200      	movs	r2, #0
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005970:	f000 fd33 	bl	80063da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005974:	4a06      	ldr	r2, [pc, #24]	; (8005990 <HAL_InitTick+0x5c>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000024 	.word	0x20000024
 800598c:	20000034 	.word	0x20000034
 8005990:	20000030 	.word	0x20000030

08005994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_IncTick+0x20>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_IncTick+0x24>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <HAL_IncTick+0x24>)
 80059a6:	6013      	str	r3, [r2, #0]
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000034 	.word	0x20000034
 80059b8:	2000707c 	.word	0x2000707c

080059bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return uwTick;
 80059c0:	4b03      	ldr	r3, [pc, #12]	; (80059d0 <HAL_GetTick+0x14>)
 80059c2:	681b      	ldr	r3, [r3, #0]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	2000707c 	.word	0x2000707c

080059d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059dc:	f7ff ffee 	bl	80059bc <HAL_GetTick>
 80059e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ec:	d005      	beq.n	80059fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_Delay+0x44>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059fa:	bf00      	nop
 80059fc:	f7ff ffde 	bl	80059bc <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d8f7      	bhi.n	80059fc <HAL_Delay+0x28>
  {
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000034 	.word	0x20000034

08005a1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e033      	b.n	8005a9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fd f9aa 	bl	8002d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d118      	bne.n	8005a8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a62:	f023 0302 	bic.w	r3, r3, #2
 8005a66:	f043 0202 	orr.w	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa5a 	bl	8005f28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
 8005a8a:	e001      	b.n	8005a90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_ADC_Start_DMA+0x1e>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0e9      	b.n	8005c96 <HAL_ADC_Start_DMA+0x1f2>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d018      	beq.n	8005b0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ae8:	4b6d      	ldr	r3, [pc, #436]	; (8005ca0 <HAL_ADC_Start_DMA+0x1fc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a6d      	ldr	r2, [pc, #436]	; (8005ca4 <HAL_ADC_Start_DMA+0x200>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	0c9a      	lsrs	r2, r3, #18
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005afc:	e002      	b.n	8005b04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f9      	bne.n	8005afe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b18:	d107      	bne.n	8005b2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f040 80a1 	bne.w	8005c7c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b78:	d106      	bne.n	8005b88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	f023 0206 	bic.w	r2, r3, #6
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
 8005b86:	e002      	b.n	8005b8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b96:	4b44      	ldr	r3, [pc, #272]	; (8005ca8 <HAL_ADC_Start_DMA+0x204>)
 8005b98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	4a43      	ldr	r2, [pc, #268]	; (8005cac <HAL_ADC_Start_DMA+0x208>)
 8005ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	4a42      	ldr	r2, [pc, #264]	; (8005cb0 <HAL_ADC_Start_DMA+0x20c>)
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	4a41      	ldr	r2, [pc, #260]	; (8005cb4 <HAL_ADC_Start_DMA+0x210>)
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005bba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005bca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	334c      	adds	r3, #76	; 0x4c
 8005be6:	4619      	mov	r1, r3
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f000 fcda 	bl	80065a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d12a      	bne.n	8005c52 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2d      	ldr	r2, [pc, #180]	; (8005cb8 <HAL_ADC_Start_DMA+0x214>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d015      	beq.n	8005c32 <HAL_ADC_Start_DMA+0x18e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <HAL_ADC_Start_DMA+0x218>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d105      	bne.n	8005c1c <HAL_ADC_Start_DMA+0x178>
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_ADC_Start_DMA+0x204>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <HAL_ADC_Start_DMA+0x21c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d136      	bne.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_ADC_Start_DMA+0x204>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d130      	bne.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d129      	bne.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	e020      	b.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_ADC_Start_DMA+0x214>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d11b      	bne.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d114      	bne.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	e00b      	b.n	8005c94 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f043 0210 	orr.w	r2, r3, #16
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000024 	.word	0x20000024
 8005ca4:	431bde83 	.word	0x431bde83
 8005ca8:	40012300 	.word	0x40012300
 8005cac:	08006121 	.word	0x08006121
 8005cb0:	080061db 	.word	0x080061db
 8005cb4:	080061f7 	.word	0x080061f7
 8005cb8:	40012000 	.word	0x40012000
 8005cbc:	40012100 	.word	0x40012100
 8005cc0:	40012200 	.word	0x40012200

08005cc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x1c>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e113      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x244>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b09      	cmp	r3, #9
 8005cee:	d925      	bls.n	8005d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68d9      	ldr	r1, [r3, #12]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	3b1e      	subs	r3, #30
 8005d06:	2207      	movs	r2, #7
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43da      	mvns	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	400a      	ands	r2, r1
 8005d14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68d9      	ldr	r1, [r3, #12]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4618      	mov	r0, r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4403      	add	r3, r0
 8005d2e:	3b1e      	subs	r3, #30
 8005d30:	409a      	lsls	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	e022      	b.n	8005d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6919      	ldr	r1, [r3, #16]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	2207      	movs	r2, #7
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	43da      	mvns	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6919      	ldr	r1, [r3, #16]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4618      	mov	r0, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4403      	add	r3, r0
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b06      	cmp	r3, #6
 8005d88:	d824      	bhi.n	8005dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	3b05      	subs	r3, #5
 8005d9c:	221f      	movs	r2, #31
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	400a      	ands	r2, r1
 8005daa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4618      	mov	r0, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3b05      	subs	r3, #5
 8005dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8005dd2:	e04c      	b.n	8005e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d824      	bhi.n	8005e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	3b23      	subs	r3, #35	; 0x23
 8005dee:	221f      	movs	r2, #31
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43da      	mvns	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	3b23      	subs	r3, #35	; 0x23
 8005e18:	fa00 f203 	lsl.w	r2, r0, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
 8005e24:	e023      	b.n	8005e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	3b41      	subs	r3, #65	; 0x41
 8005e38:	221f      	movs	r2, #31
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	400a      	ands	r2, r1
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4618      	mov	r0, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	3b41      	subs	r3, #65	; 0x41
 8005e62:	fa00 f203 	lsl.w	r2, r0, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <HAL_ADC_ConfigChannel+0x250>)
 8005e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a28      	ldr	r2, [pc, #160]	; (8005f18 <HAL_ADC_ConfigChannel+0x254>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d10f      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x1d8>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b12      	cmp	r3, #18
 8005e82:	d10b      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <HAL_ADC_ConfigChannel+0x254>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d12b      	bne.n	8005efe <HAL_ADC_ConfigChannel+0x23a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_ADC_ConfigChannel+0x258>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <HAL_ADC_ConfigChannel+0x1f4>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b11      	cmp	r3, #17
 8005eb6:	d122      	bne.n	8005efe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a11      	ldr	r2, [pc, #68]	; (8005f1c <HAL_ADC_ConfigChannel+0x258>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d111      	bne.n	8005efe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <HAL_ADC_ConfigChannel+0x25c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <HAL_ADC_ConfigChannel+0x260>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	0c9a      	lsrs	r2, r3, #18
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ef0:	e002      	b.n	8005ef8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f9      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40012300 	.word	0x40012300
 8005f18:	40012000 	.word	0x40012000
 8005f1c:	10000012 	.word	0x10000012
 8005f20:	20000024 	.word	0x20000024
 8005f24:	431bde83 	.word	0x431bde83

08005f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f30:	4b79      	ldr	r3, [pc, #484]	; (8006118 <ADC_Init+0x1f0>)
 8005f32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	021a      	lsls	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6899      	ldr	r1, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	4a58      	ldr	r2, [pc, #352]	; (800611c <ADC_Init+0x1f4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d022      	beq.n	8006006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6899      	ldr	r1, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	e00f      	b.n	8006026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006024:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0202 	bic.w	r2, r2, #2
 8006034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6899      	ldr	r1, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	7e1b      	ldrb	r3, [r3, #24]
 8006040:	005a      	lsls	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006062:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	3b01      	subs	r3, #1
 8006080:	035a      	lsls	r2, r3, #13
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	e007      	b.n	800609c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800609a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	051a      	lsls	r2, r3, #20
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6899      	ldr	r1, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060de:	025a      	lsls	r2, r3, #9
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6899      	ldr	r1, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	029a      	lsls	r2, r3, #10
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40012300 	.word	0x40012300
 800611c:	0f000001 	.word	0x0f000001

08006120 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006136:	2b00      	cmp	r3, #0
 8006138:	d13c      	bne.n	80061b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d12b      	bne.n	80061ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006158:	2b00      	cmp	r3, #0
 800615a:	d127      	bne.n	80061ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006174:	2b00      	cmp	r3, #0
 8006176:	d119      	bne.n	80061ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0220 	bic.w	r2, r2, #32
 8006186:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f043 0201 	orr.w	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7fc fce3 	bl	8002b78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80061b2:	e00e      	b.n	80061d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7fc fd19 	bl	8002bf8 <HAL_ADC_ErrorCallback>
}
 80061c6:	e004      	b.n	80061d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7fc fce5 	bl	8002bb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2240      	movs	r2, #64	; 0x40
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f043 0204 	orr.w	r2, r3, #4
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7fc fcee 	bl	8002bf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <__NVIC_SetPriorityGrouping+0x44>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006240:	4013      	ands	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800624c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006256:	4a04      	ldr	r2, [pc, #16]	; (8006268 <__NVIC_SetPriorityGrouping+0x44>)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	60d3      	str	r3, [r2, #12]
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <__NVIC_GetPriorityGrouping+0x18>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	f003 0307 	and.w	r3, r3, #7
}
 800627a:	4618      	mov	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	e000ed00 	.word	0xe000ed00

08006288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	2b00      	cmp	r3, #0
 8006298:	db0b      	blt.n	80062b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <__NVIC_EnableIRQ+0x38>)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2001      	movs	r0, #1
 80062aa:	fa00 f202 	lsl.w	r2, r0, r2
 80062ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e100 	.word	0xe000e100

080062c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db0a      	blt.n	80062ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	490c      	ldr	r1, [pc, #48]	; (8006310 <__NVIC_SetPriority+0x4c>)
 80062de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	440b      	add	r3, r1
 80062e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062ec:	e00a      	b.n	8006304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4908      	ldr	r1, [pc, #32]	; (8006314 <__NVIC_SetPriority+0x50>)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3b04      	subs	r3, #4
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	440b      	add	r3, r1
 8006302:	761a      	strb	r2, [r3, #24]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	e000e100 	.word	0xe000e100
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f1c3 0307 	rsb	r3, r3, #7
 8006332:	2b04      	cmp	r3, #4
 8006334:	bf28      	it	cs
 8006336:	2304      	movcs	r3, #4
 8006338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	3304      	adds	r3, #4
 800633e:	2b06      	cmp	r3, #6
 8006340:	d902      	bls.n	8006348 <NVIC_EncodePriority+0x30>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3b03      	subs	r3, #3
 8006346:	e000      	b.n	800634a <NVIC_EncodePriority+0x32>
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800634c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43da      	mvns	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	401a      	ands	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	43d9      	mvns	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006370:	4313      	orrs	r3, r2
         );
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3b01      	subs	r3, #1
 800638c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006390:	d301      	bcc.n	8006396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006392:	2301      	movs	r3, #1
 8006394:	e00f      	b.n	80063b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006396:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <SysTick_Config+0x40>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3b01      	subs	r3, #1
 800639c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800639e:	210f      	movs	r1, #15
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a4:	f7ff ff8e 	bl	80062c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <SysTick_Config+0x40>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <SysTick_Config+0x40>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010

080063c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ff29 	bl	8006224 <__NVIC_SetPriorityGrouping>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	4603      	mov	r3, r0
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063ec:	f7ff ff3e 	bl	800626c <__NVIC_GetPriorityGrouping>
 80063f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7ff ff8e 	bl	8006318 <NVIC_EncodePriority>
 80063fc:	4602      	mov	r2, r0
 80063fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff5d 	bl	80062c4 <__NVIC_SetPriority>
}
 800640a:	bf00      	nop
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	4603      	mov	r3, r0
 800641a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800641c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff ff31 	bl	8006288 <__NVIC_EnableIRQ>
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff ffa2 	bl	8006380 <SysTick_Config>
 800643c:	4603      	mov	r3, r0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006454:	f7ff fab2 	bl	80059bc <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e099      	b.n	8006598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006484:	e00f      	b.n	80064a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006486:	f7ff fa99 	bl	80059bc <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b05      	cmp	r3, #5
 8006492:	d908      	bls.n	80064a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2203      	movs	r2, #3
 800649e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e078      	b.n	8006598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e8      	bne.n	8006486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4b38      	ldr	r3, [pc, #224]	; (80065a0 <HAL_DMA_Init+0x158>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	4313      	orrs	r3, r2
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0307 	bic.w	r3, r3, #7
 8006526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b04      	cmp	r3, #4
 8006538:	d117      	bne.n	800656a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fb01 	bl	8006b54 <DMA_CheckFifoParam>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006566:	2301      	movs	r3, #1
 8006568:	e016      	b.n	8006598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fab8 	bl	8006ae8 <DMA_CalcBaseAndBitshift>
 8006578:	4603      	mov	r3, r0
 800657a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006580:	223f      	movs	r2, #63	; 0x3f
 8006582:	409a      	lsls	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	f010803f 	.word	0xf010803f

080065a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_DMA_Start_IT+0x26>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e040      	b.n	800664c <HAL_DMA_Start_IT+0xa8>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d12f      	bne.n	800663e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fa4a 	bl	8006a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	223f      	movs	r2, #63	; 0x3f
 80065fe:	409a      	lsls	r2, r3
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0216 	orr.w	r2, r2, #22
 8006612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0208 	orr.w	r2, r2, #8
 800662a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e005      	b.n	800664a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006662:	f7ff f9ab 	bl	80059bc <HAL_GetTick>
 8006666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d008      	beq.n	8006686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e052      	b.n	800672c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0216 	bic.w	r2, r2, #22
 8006694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_DMA_Abort+0x62>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0208 	bic.w	r2, r2, #8
 80066c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066d6:	e013      	b.n	8006700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066d8:	f7ff f970 	bl	80059bc <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d90c      	bls.n	8006700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2203      	movs	r2, #3
 80066f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e015      	b.n	800672c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e4      	bne.n	80066d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006712:	223f      	movs	r2, #63	; 0x3f
 8006714:	409a      	lsls	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d004      	beq.n	8006752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e00c      	b.n	800676c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2205      	movs	r2, #5
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0201 	bic.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006784:	4b8e      	ldr	r3, [pc, #568]	; (80069c0 <HAL_DMA_IRQHandler+0x248>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a8e      	ldr	r2, [pc, #568]	; (80069c4 <HAL_DMA_IRQHandler+0x24c>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	0a9b      	lsrs	r3, r3, #10
 8006790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	2208      	movs	r2, #8
 80067a4:	409a      	lsls	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4013      	ands	r3, r2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01a      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d013      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	2208      	movs	r2, #8
 80067d2:	409a      	lsls	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f043 0201 	orr.w	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	2201      	movs	r2, #1
 80067ea:	409a      	lsls	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d012      	beq.n	800681a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006806:	2201      	movs	r2, #1
 8006808:	409a      	lsls	r2, r3
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006812:	f043 0202 	orr.w	r2, r3, #2
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681e:	2204      	movs	r2, #4
 8006820:	409a      	lsls	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4013      	ands	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d012      	beq.n	8006850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	2204      	movs	r2, #4
 800683e:	409a      	lsls	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	f043 0204 	orr.w	r2, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006854:	2210      	movs	r2, #16
 8006856:	409a      	lsls	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d043      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d03c      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	2210      	movs	r2, #16
 8006874:	409a      	lsls	r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d018      	beq.n	80068ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d108      	bne.n	80068a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d024      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
 80068a6:	e01f      	b.n	80068e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01b      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
 80068b8:	e016      	b.n	80068e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0208 	bic.w	r2, r2, #8
 80068d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ec:	2220      	movs	r2, #32
 80068ee:	409a      	lsls	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 808f 	beq.w	8006a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8087 	beq.w	8006a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	2220      	movs	r2, #32
 8006910:	409a      	lsls	r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b05      	cmp	r3, #5
 8006920:	d136      	bne.n	8006990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0216 	bic.w	r2, r2, #22
 8006930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695a      	ldr	r2, [r3, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <HAL_DMA_IRQHandler+0x1da>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0208 	bic.w	r2, r2, #8
 8006960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	223f      	movs	r2, #63	; 0x3f
 8006968:	409a      	lsls	r2, r3
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d07e      	beq.n	8006a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
        }
        return;
 800698e:	e079      	b.n	8006a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01d      	beq.n	80069da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10d      	bne.n	80069c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d031      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
 80069bc:	e02c      	b.n	8006a18 <HAL_DMA_IRQHandler+0x2a0>
 80069be:	bf00      	nop
 80069c0:	20000024 	.word	0x20000024
 80069c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d023      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
 80069d8:	e01e      	b.n	8006a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10f      	bne.n	8006a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0210 	bic.w	r2, r2, #16
 80069f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d032      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d022      	beq.n	8006a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2205      	movs	r2, #5
 8006a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d307      	bcc.n	8006a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f2      	bne.n	8006a44 <HAL_DMA_IRQHandler+0x2cc>
 8006a5e:	e000      	b.n	8006a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	e000      	b.n	8006a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a84:	bf00      	nop
    }
  }
}
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d108      	bne.n	8006acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006aca:	e007      	b.n	8006adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	60da      	str	r2, [r3, #12]
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	3b10      	subs	r3, #16
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <DMA_CalcBaseAndBitshift+0x64>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b02:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <DMA_CalcBaseAndBitshift+0x68>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d909      	bls.n	8006b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	1d1a      	adds	r2, r3, #4
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	659a      	str	r2, [r3, #88]	; 0x58
 8006b28:	e007      	b.n	8006b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	aaaaaaab 	.word	0xaaaaaaab
 8006b50:	0800e01c 	.word	0x0800e01c

08006b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d11f      	bne.n	8006bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d856      	bhi.n	8006c22 <DMA_CheckFifoParam+0xce>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <DMA_CheckFifoParam+0x28>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006b8d 	.word	0x08006b8d
 8006b80:	08006b9f 	.word	0x08006b9f
 8006b84:	08006b8d 	.word	0x08006b8d
 8006b88:	08006c23 	.word	0x08006c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d046      	beq.n	8006c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b9c:	e043      	b.n	8006c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ba6:	d140      	bne.n	8006c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bac:	e03d      	b.n	8006c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb6:	d121      	bne.n	8006bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d837      	bhi.n	8006c2e <DMA_CheckFifoParam+0xda>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <DMA_CheckFifoParam+0x70>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bd5 	.word	0x08006bd5
 8006bc8:	08006bdb 	.word	0x08006bdb
 8006bcc:	08006bd5 	.word	0x08006bd5
 8006bd0:	08006bed 	.word	0x08006bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd8:	e030      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d025      	beq.n	8006c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bea:	e022      	b.n	8006c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bf4:	d11f      	bne.n	8006c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006bfa:	e01c      	b.n	8006c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d903      	bls.n	8006c0a <DMA_CheckFifoParam+0xb6>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d003      	beq.n	8006c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c08:	e018      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0e:	e015      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00e      	beq.n	8006c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c20:	e00b      	b.n	8006c3a <DMA_CheckFifoParam+0xe6>
      break;
 8006c22:	bf00      	nop
 8006c24:	e00a      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      break;
 8006c26:	bf00      	nop
 8006c28:	e008      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e006      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e004      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <DMA_CheckFifoParam+0xe8>
      break;
 8006c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop

08006c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b089      	sub	sp, #36	; 0x24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	e165      	b.n	8006f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c68:	2201      	movs	r2, #1
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	f040 8154 	bne.w	8006f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d005      	beq.n	8006c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d130      	bne.n	8006d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	2203      	movs	r2, #3
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	43db      	mvns	r3, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	091b      	lsrs	r3, r3, #4
 8006cea:	f003 0201 	and.w	r2, r3, #1
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d017      	beq.n	8006d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	2203      	movs	r2, #3
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d123      	bne.n	8006d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	08da      	lsrs	r2, r3, #3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3208      	adds	r2, #8
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	220f      	movs	r2, #15
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	08da      	lsrs	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3208      	adds	r2, #8
 8006d8a:	69b9      	ldr	r1, [r7, #24]
 8006d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	4013      	ands	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 0203 	and.w	r2, r3, #3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80ae 	beq.w	8006f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	4b5d      	ldr	r3, [pc, #372]	; (8006f4c <HAL_GPIO_Init+0x300>)
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	4a5c      	ldr	r2, [pc, #368]	; (8006f4c <HAL_GPIO_Init+0x300>)
 8006ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de0:	6453      	str	r3, [r2, #68]	; 0x44
 8006de2:	4b5a      	ldr	r3, [pc, #360]	; (8006f4c <HAL_GPIO_Init+0x300>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dee:	4a58      	ldr	r2, [pc, #352]	; (8006f50 <HAL_GPIO_Init+0x304>)
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	3302      	adds	r3, #2
 8006df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	220f      	movs	r2, #15
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a4f      	ldr	r2, [pc, #316]	; (8006f54 <HAL_GPIO_Init+0x308>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d025      	beq.n	8006e66 <HAL_GPIO_Init+0x21a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a4e      	ldr	r2, [pc, #312]	; (8006f58 <HAL_GPIO_Init+0x30c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01f      	beq.n	8006e62 <HAL_GPIO_Init+0x216>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a4d      	ldr	r2, [pc, #308]	; (8006f5c <HAL_GPIO_Init+0x310>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d019      	beq.n	8006e5e <HAL_GPIO_Init+0x212>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a4c      	ldr	r2, [pc, #304]	; (8006f60 <HAL_GPIO_Init+0x314>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_GPIO_Init+0x20e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a4b      	ldr	r2, [pc, #300]	; (8006f64 <HAL_GPIO_Init+0x318>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00d      	beq.n	8006e56 <HAL_GPIO_Init+0x20a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a4a      	ldr	r2, [pc, #296]	; (8006f68 <HAL_GPIO_Init+0x31c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d007      	beq.n	8006e52 <HAL_GPIO_Init+0x206>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a49      	ldr	r2, [pc, #292]	; (8006f6c <HAL_GPIO_Init+0x320>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <HAL_GPIO_Init+0x202>
 8006e4a:	2306      	movs	r3, #6
 8006e4c:	e00c      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e4e:	2307      	movs	r3, #7
 8006e50:	e00a      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e52:	2305      	movs	r3, #5
 8006e54:	e008      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e56:	2304      	movs	r3, #4
 8006e58:	e006      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e004      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e002      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <HAL_GPIO_Init+0x21c>
 8006e66:	2300      	movs	r3, #0
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	f002 0203 	and.w	r2, r2, #3
 8006e6e:	0092      	lsls	r2, r2, #2
 8006e70:	4093      	lsls	r3, r2
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e78:	4935      	ldr	r1, [pc, #212]	; (8006f50 <HAL_GPIO_Init+0x304>)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	089b      	lsrs	r3, r3, #2
 8006e7e:	3302      	adds	r3, #2
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e86:	4b3a      	ldr	r3, [pc, #232]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	4013      	ands	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eaa:	4a31      	ldr	r2, [pc, #196]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006eb0:	4b2f      	ldr	r3, [pc, #188]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ed4:	4a26      	ldr	r2, [pc, #152]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006eda:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006efe:	4a1c      	ldr	r2, [pc, #112]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f28:	4a11      	ldr	r2, [pc, #68]	; (8006f70 <HAL_GPIO_Init+0x324>)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3301      	adds	r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	f67f ae96 	bls.w	8006c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3724      	adds	r7, #36	; 0x24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40013800 	.word	0x40013800
 8006f54:	40020000 	.word	0x40020000
 8006f58:	40020400 	.word	0x40020400
 8006f5c:	40020800 	.word	0x40020800
 8006f60:	40020c00 	.word	0x40020c00
 8006f64:	40021000 	.word	0x40021000
 8006f68:	40021400 	.word	0x40021400
 8006f6c:	40021800 	.word	0x40021800
 8006f70:	40013c00 	.word	0x40013c00

08006f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e001      	b.n	8006f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fb4:	787b      	ldrb	r3, [r7, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fba:	887a      	ldrh	r2, [r7, #2]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fc0:	e003      	b.n	8006fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	041a      	lsls	r2, r3, #16
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	619a      	str	r2, [r3, #24]
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fe8:	887a      	ldrh	r2, [r7, #2]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4013      	ands	r3, r2
 8006fee:	041a      	lsls	r2, r3, #16
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	43d9      	mvns	r1, r3
 8006ff4:	887b      	ldrh	r3, [r7, #2]
 8006ff6:	400b      	ands	r3, r1
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	619a      	str	r2, [r3, #24]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007016:	4b08      	ldr	r3, [pc, #32]	; (8007038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	4013      	ands	r3, r2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007022:	4a05      	ldr	r2, [pc, #20]	; (8007038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f806 	bl	800703c <HAL_GPIO_EXTI_Callback>
  }
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40013c00 	.word	0x40013c00

0800703c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800705e:	2300      	movs	r3, #0
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	4b20      	ldr	r3, [pc, #128]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706c:	6413      	str	r3, [r2, #64]	; 0x40
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007080:	f7fe fc9c 	bl	80059bc <HAL_GetTick>
 8007084:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007086:	e009      	b.n	800709c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007088:	f7fe fc98 	bl	80059bc <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007096:	d901      	bls.n	800709c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e01f      	b.n	80070dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800709c:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_PWREx_EnableOverDrive+0x98>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d1ee      	bne.n	8007088 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070aa:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070b0:	f7fe fc84 	bl	80059bc <HAL_GetTick>
 80070b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070b6:	e009      	b.n	80070cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070b8:	f7fe fc80 	bl	80059bc <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c6:	d901      	bls.n	80070cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e007      	b.n	80070dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <HAL_PWREx_EnableOverDrive+0x98>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d8:	d1ee      	bne.n	80070b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40023800 	.word	0x40023800
 80070e8:	420e0040 	.word	0x420e0040
 80070ec:	40007000 	.word	0x40007000
 80070f0:	420e0044 	.word	0x420e0044

080070f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e0cc      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007108:	4b68      	ldr	r3, [pc, #416]	; (80072ac <HAL_RCC_ClockConfig+0x1b8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d90c      	bls.n	8007130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007116:	4b65      	ldr	r3, [pc, #404]	; (80072ac <HAL_RCC_ClockConfig+0x1b8>)
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800711e:	4b63      	ldr	r3, [pc, #396]	; (80072ac <HAL_RCC_ClockConfig+0x1b8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d001      	beq.n	8007130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e0b8      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d020      	beq.n	800717e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007148:	4b59      	ldr	r3, [pc, #356]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4a58      	ldr	r2, [pc, #352]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007160:	4b53      	ldr	r3, [pc, #332]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4a52      	ldr	r2, [pc, #328]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800716a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800716c:	4b50      	ldr	r3, [pc, #320]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	494d      	ldr	r1, [pc, #308]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d044      	beq.n	8007214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d107      	bne.n	80071a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007192:	4b47      	ldr	r3, [pc, #284]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d119      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e07f      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d003      	beq.n	80071b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b2:	4b3f      	ldr	r3, [pc, #252]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e06f      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c2:	4b3b      	ldr	r3, [pc, #236]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e067      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071d2:	4b37      	ldr	r3, [pc, #220]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f023 0203 	bic.w	r2, r3, #3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	4934      	ldr	r1, [pc, #208]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071e4:	f7fe fbea 	bl	80059bc <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ea:	e00a      	b.n	8007202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ec:	f7fe fbe6 	bl	80059bc <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e04f      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007202:	4b2b      	ldr	r3, [pc, #172]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 020c 	and.w	r2, r3, #12
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	429a      	cmp	r2, r3
 8007212:	d1eb      	bne.n	80071ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <HAL_RCC_ClockConfig+0x1b8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d20c      	bcs.n	800723c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RCC_ClockConfig+0x1b8>)
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800722a:	4b20      	ldr	r3, [pc, #128]	; (80072ac <HAL_RCC_ClockConfig+0x1b8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d001      	beq.n	800723c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e032      	b.n	80072a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007248:	4b19      	ldr	r3, [pc, #100]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4916      	ldr	r1, [pc, #88]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	4313      	orrs	r3, r2
 8007258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	490e      	ldr	r1, [pc, #56]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	4313      	orrs	r3, r2
 8007278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800727a:	f000 f855 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 800727e:	4602      	mov	r2, r0
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	490a      	ldr	r1, [pc, #40]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 800728c:	5ccb      	ldrb	r3, [r1, r3]
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <HAL_RCC_ClockConfig+0x1c8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe fb4a 	bl	8005934 <HAL_InitTick>

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40023c00 	.word	0x40023c00
 80072b0:	40023800 	.word	0x40023800
 80072b4:	0800e004 	.word	0x0800e004
 80072b8:	20000024 	.word	0x20000024
 80072bc:	20000030 	.word	0x20000030

080072c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c4:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000024 	.word	0x20000024

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072dc:	f7ff fff0 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0a9b      	lsrs	r3, r3, #10
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4903      	ldr	r1, [pc, #12]	; (80072fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	0800e014 	.word	0x0800e014

08007300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007304:	f7ff ffdc 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 8007308:	4602      	mov	r2, r0
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0b5b      	lsrs	r3, r3, #13
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	4903      	ldr	r1, [pc, #12]	; (8007324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007316:	5ccb      	ldrb	r3, [r1, r3]
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	0800e014 	.word	0x0800e014

08007328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800732c:	b0ae      	sub	sp, #184	; 0xb8
 800732e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800734e:	4bcb      	ldr	r3, [pc, #812]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b0c      	cmp	r3, #12
 8007358:	f200 8206 	bhi.w	8007768 <HAL_RCC_GetSysClockFreq+0x440>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <HAL_RCC_GetSysClockFreq+0x3c>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007399 	.word	0x08007399
 8007368:	08007769 	.word	0x08007769
 800736c:	08007769 	.word	0x08007769
 8007370:	08007769 	.word	0x08007769
 8007374:	080073a1 	.word	0x080073a1
 8007378:	08007769 	.word	0x08007769
 800737c:	08007769 	.word	0x08007769
 8007380:	08007769 	.word	0x08007769
 8007384:	080073a9 	.word	0x080073a9
 8007388:	08007769 	.word	0x08007769
 800738c:	08007769 	.word	0x08007769
 8007390:	08007769 	.word	0x08007769
 8007394:	08007599 	.word	0x08007599
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007398:	4bb9      	ldr	r3, [pc, #740]	; (8007680 <HAL_RCC_GetSysClockFreq+0x358>)
 800739a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800739e:	e1e7      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073a0:	4bb8      	ldr	r3, [pc, #736]	; (8007684 <HAL_RCC_GetSysClockFreq+0x35c>)
 80073a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80073a6:	e1e3      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073a8:	4bb4      	ldr	r3, [pc, #720]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073b4:	4bb1      	ldr	r3, [pc, #708]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d071      	beq.n	80074a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073c0:	4bae      	ldr	r3, [pc, #696]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	099b      	lsrs	r3, r3, #6
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80073d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073e6:	4622      	mov	r2, r4
 80073e8:	462b      	mov	r3, r5
 80073ea:	f04f 0000 	mov.w	r0, #0
 80073ee:	f04f 0100 	mov.w	r1, #0
 80073f2:	0159      	lsls	r1, r3, #5
 80073f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073f8:	0150      	lsls	r0, r2, #5
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4621      	mov	r1, r4
 8007400:	1a51      	subs	r1, r2, r1
 8007402:	6439      	str	r1, [r7, #64]	; 0x40
 8007404:	4629      	mov	r1, r5
 8007406:	eb63 0301 	sbc.w	r3, r3, r1
 800740a:	647b      	str	r3, [r7, #68]	; 0x44
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007418:	4649      	mov	r1, r9
 800741a:	018b      	lsls	r3, r1, #6
 800741c:	4641      	mov	r1, r8
 800741e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007422:	4641      	mov	r1, r8
 8007424:	018a      	lsls	r2, r1, #6
 8007426:	4641      	mov	r1, r8
 8007428:	1a51      	subs	r1, r2, r1
 800742a:	63b9      	str	r1, [r7, #56]	; 0x38
 800742c:	4649      	mov	r1, r9
 800742e:	eb63 0301 	sbc.w	r3, r3, r1
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007440:	4649      	mov	r1, r9
 8007442:	00cb      	lsls	r3, r1, #3
 8007444:	4641      	mov	r1, r8
 8007446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744a:	4641      	mov	r1, r8
 800744c:	00ca      	lsls	r2, r1, #3
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	4603      	mov	r3, r0
 8007454:	4622      	mov	r2, r4
 8007456:	189b      	adds	r3, r3, r2
 8007458:	633b      	str	r3, [r7, #48]	; 0x30
 800745a:	462b      	mov	r3, r5
 800745c:	460a      	mov	r2, r1
 800745e:	eb42 0303 	adc.w	r3, r2, r3
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007470:	4629      	mov	r1, r5
 8007472:	024b      	lsls	r3, r1, #9
 8007474:	4621      	mov	r1, r4
 8007476:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800747a:	4621      	mov	r1, r4
 800747c:	024a      	lsls	r2, r1, #9
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800748c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007490:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007494:	f7f9 fba8 	bl	8000be8 <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4613      	mov	r3, r2
 800749e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074a2:	e067      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a4:	4b75      	ldr	r3, [pc, #468]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	099b      	lsrs	r3, r3, #6
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80074b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80074be:	2300      	movs	r3, #0
 80074c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80074c6:	4622      	mov	r2, r4
 80074c8:	462b      	mov	r3, r5
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	0159      	lsls	r1, r3, #5
 80074d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074d8:	0150      	lsls	r0, r2, #5
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4621      	mov	r1, r4
 80074e0:	1a51      	subs	r1, r2, r1
 80074e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80074e4:	4629      	mov	r1, r5
 80074e6:	eb63 0301 	sbc.w	r3, r3, r1
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80074f8:	4649      	mov	r1, r9
 80074fa:	018b      	lsls	r3, r1, #6
 80074fc:	4641      	mov	r1, r8
 80074fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007502:	4641      	mov	r1, r8
 8007504:	018a      	lsls	r2, r1, #6
 8007506:	4641      	mov	r1, r8
 8007508:	ebb2 0a01 	subs.w	sl, r2, r1
 800750c:	4649      	mov	r1, r9
 800750e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800751e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007526:	4692      	mov	sl, r2
 8007528:	469b      	mov	fp, r3
 800752a:	4623      	mov	r3, r4
 800752c:	eb1a 0303 	adds.w	r3, sl, r3
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	462b      	mov	r3, r5
 8007534:	eb4b 0303 	adc.w	r3, fp, r3
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007546:	4629      	mov	r1, r5
 8007548:	028b      	lsls	r3, r1, #10
 800754a:	4621      	mov	r1, r4
 800754c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007550:	4621      	mov	r1, r4
 8007552:	028a      	lsls	r2, r1, #10
 8007554:	4610      	mov	r0, r2
 8007556:	4619      	mov	r1, r3
 8007558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800755c:	2200      	movs	r2, #0
 800755e:	673b      	str	r3, [r7, #112]	; 0x70
 8007560:	677a      	str	r2, [r7, #116]	; 0x74
 8007562:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007566:	f7f9 fb3f 	bl	8000be8 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4613      	mov	r3, r2
 8007570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007574:	4b41      	ldr	r3, [pc, #260]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	3301      	adds	r3, #1
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800758a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007596:	e0eb      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007598:	4b38      	ldr	r3, [pc, #224]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075a4:	4b35      	ldr	r3, [pc, #212]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06b      	beq.n	8007688 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b0:	4b32      	ldr	r3, [pc, #200]	; (800767c <HAL_RCC_GetSysClockFreq+0x354>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	099b      	lsrs	r3, r3, #6
 80075b6:	2200      	movs	r2, #0
 80075b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c2:	663b      	str	r3, [r7, #96]	; 0x60
 80075c4:	2300      	movs	r3, #0
 80075c6:	667b      	str	r3, [r7, #100]	; 0x64
 80075c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80075cc:	4622      	mov	r2, r4
 80075ce:	462b      	mov	r3, r5
 80075d0:	f04f 0000 	mov.w	r0, #0
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	0159      	lsls	r1, r3, #5
 80075da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075de:	0150      	lsls	r0, r2, #5
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4621      	mov	r1, r4
 80075e6:	1a51      	subs	r1, r2, r1
 80075e8:	61b9      	str	r1, [r7, #24]
 80075ea:	4629      	mov	r1, r5
 80075ec:	eb63 0301 	sbc.w	r3, r3, r1
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80075fe:	4659      	mov	r1, fp
 8007600:	018b      	lsls	r3, r1, #6
 8007602:	4651      	mov	r1, sl
 8007604:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007608:	4651      	mov	r1, sl
 800760a:	018a      	lsls	r2, r1, #6
 800760c:	4651      	mov	r1, sl
 800760e:	ebb2 0801 	subs.w	r8, r2, r1
 8007612:	4659      	mov	r1, fp
 8007614:	eb63 0901 	sbc.w	r9, r3, r1
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007624:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007628:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800762c:	4690      	mov	r8, r2
 800762e:	4699      	mov	r9, r3
 8007630:	4623      	mov	r3, r4
 8007632:	eb18 0303 	adds.w	r3, r8, r3
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	462b      	mov	r3, r5
 800763a:	eb49 0303 	adc.w	r3, r9, r3
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	f04f 0300 	mov.w	r3, #0
 8007648:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800764c:	4629      	mov	r1, r5
 800764e:	024b      	lsls	r3, r1, #9
 8007650:	4621      	mov	r1, r4
 8007652:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007656:	4621      	mov	r1, r4
 8007658:	024a      	lsls	r2, r1, #9
 800765a:	4610      	mov	r0, r2
 800765c:	4619      	mov	r1, r3
 800765e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007662:	2200      	movs	r2, #0
 8007664:	65bb      	str	r3, [r7, #88]	; 0x58
 8007666:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007668:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800766c:	f7f9 fabc 	bl	8000be8 <__aeabi_uldivmod>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4613      	mov	r3, r2
 8007676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800767a:	e065      	b.n	8007748 <HAL_RCC_GetSysClockFreq+0x420>
 800767c:	40023800 	.word	0x40023800
 8007680:	00f42400 	.word	0x00f42400
 8007684:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007688:	4b3d      	ldr	r3, [pc, #244]	; (8007780 <HAL_RCC_GetSysClockFreq+0x458>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	099b      	lsrs	r3, r3, #6
 800768e:	2200      	movs	r2, #0
 8007690:	4618      	mov	r0, r3
 8007692:	4611      	mov	r1, r2
 8007694:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007698:	653b      	str	r3, [r7, #80]	; 0x50
 800769a:	2300      	movs	r3, #0
 800769c:	657b      	str	r3, [r7, #84]	; 0x54
 800769e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80076a2:	4642      	mov	r2, r8
 80076a4:	464b      	mov	r3, r9
 80076a6:	f04f 0000 	mov.w	r0, #0
 80076aa:	f04f 0100 	mov.w	r1, #0
 80076ae:	0159      	lsls	r1, r3, #5
 80076b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076b4:	0150      	lsls	r0, r2, #5
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4641      	mov	r1, r8
 80076bc:	1a51      	subs	r1, r2, r1
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	4649      	mov	r1, r9
 80076c2:	eb63 0301 	sbc.w	r3, r3, r1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80076d4:	4659      	mov	r1, fp
 80076d6:	018b      	lsls	r3, r1, #6
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076de:	4651      	mov	r1, sl
 80076e0:	018a      	lsls	r2, r1, #6
 80076e2:	4651      	mov	r1, sl
 80076e4:	1a54      	subs	r4, r2, r1
 80076e6:	4659      	mov	r1, fp
 80076e8:	eb63 0501 	sbc.w	r5, r3, r1
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	f04f 0300 	mov.w	r3, #0
 80076f4:	00eb      	lsls	r3, r5, #3
 80076f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076fa:	00e2      	lsls	r2, r4, #3
 80076fc:	4614      	mov	r4, r2
 80076fe:	461d      	mov	r5, r3
 8007700:	4643      	mov	r3, r8
 8007702:	18e3      	adds	r3, r4, r3
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	464b      	mov	r3, r9
 8007708:	eb45 0303 	adc.w	r3, r5, r3
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	f04f 0200 	mov.w	r2, #0
 8007712:	f04f 0300 	mov.w	r3, #0
 8007716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800771a:	4629      	mov	r1, r5
 800771c:	028b      	lsls	r3, r1, #10
 800771e:	4621      	mov	r1, r4
 8007720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007724:	4621      	mov	r1, r4
 8007726:	028a      	lsls	r2, r1, #10
 8007728:	4610      	mov	r0, r2
 800772a:	4619      	mov	r1, r3
 800772c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007730:	2200      	movs	r2, #0
 8007732:	64bb      	str	r3, [r7, #72]	; 0x48
 8007734:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007736:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800773a:	f7f9 fa55 	bl	8000be8 <__aeabi_uldivmod>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4613      	mov	r3, r2
 8007744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007748:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <HAL_RCC_GetSysClockFreq+0x458>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	0f1b      	lsrs	r3, r3, #28
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800775a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007766:	e003      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <HAL_RCC_GetSysClockFreq+0x45c>)
 800776a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800776e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007774:	4618      	mov	r0, r3
 8007776:	37b8      	adds	r7, #184	; 0xb8
 8007778:	46bd      	mov	sp, r7
 800777a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800777e:	bf00      	nop
 8007780:	40023800 	.word	0x40023800
 8007784:	00f42400 	.word	0x00f42400

08007788 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e28d      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 8083 	beq.w	80078ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80077a8:	4b94      	ldr	r3, [pc, #592]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 030c 	and.w	r3, r3, #12
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d019      	beq.n	80077e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80077b4:	4b91      	ldr	r3, [pc, #580]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d106      	bne.n	80077ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80077c0:	4b8e      	ldr	r3, [pc, #568]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077cc:	d00c      	beq.n	80077e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ce:	4b8b      	ldr	r3, [pc, #556]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80077d6:	2b0c      	cmp	r3, #12
 80077d8:	d112      	bne.n	8007800 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077da:	4b88      	ldr	r3, [pc, #544]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077e6:	d10b      	bne.n	8007800 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e8:	4b84      	ldr	r3, [pc, #528]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d05b      	beq.n	80078ac <HAL_RCC_OscConfig+0x124>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d157      	bne.n	80078ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e25a      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	d106      	bne.n	8007818 <HAL_RCC_OscConfig+0x90>
 800780a:	4b7c      	ldr	r3, [pc, #496]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a7b      	ldr	r2, [pc, #492]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	e01d      	b.n	8007854 <HAL_RCC_OscConfig+0xcc>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007820:	d10c      	bne.n	800783c <HAL_RCC_OscConfig+0xb4>
 8007822:	4b76      	ldr	r3, [pc, #472]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a75      	ldr	r2, [pc, #468]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	4b73      	ldr	r3, [pc, #460]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a72      	ldr	r2, [pc, #456]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	e00b      	b.n	8007854 <HAL_RCC_OscConfig+0xcc>
 800783c:	4b6f      	ldr	r3, [pc, #444]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a6e      	ldr	r2, [pc, #440]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	4b6c      	ldr	r3, [pc, #432]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a6b      	ldr	r2, [pc, #428]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800784e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d013      	beq.n	8007884 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785c:	f7fe f8ae 	bl	80059bc <HAL_GetTick>
 8007860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007862:	e008      	b.n	8007876 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007864:	f7fe f8aa 	bl	80059bc <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b64      	cmp	r3, #100	; 0x64
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e21f      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007876:	4b61      	ldr	r3, [pc, #388]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0f0      	beq.n	8007864 <HAL_RCC_OscConfig+0xdc>
 8007882:	e014      	b.n	80078ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007884:	f7fe f89a 	bl	80059bc <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800788a:	e008      	b.n	800789e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800788c:	f7fe f896 	bl	80059bc <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b64      	cmp	r3, #100	; 0x64
 8007898:	d901      	bls.n	800789e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e20b      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800789e:	4b57      	ldr	r3, [pc, #348]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1f0      	bne.n	800788c <HAL_RCC_OscConfig+0x104>
 80078aa:	e000      	b.n	80078ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d06f      	beq.n	800799a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80078ba:	4b50      	ldr	r3, [pc, #320]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d017      	beq.n	80078f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078c6:	4b4d      	ldr	r3, [pc, #308]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d105      	bne.n	80078de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078d2:	4b4a      	ldr	r3, [pc, #296]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078de:	4b47      	ldr	r3, [pc, #284]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078e6:	2b0c      	cmp	r3, #12
 80078e8:	d11c      	bne.n	8007924 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ea:	4b44      	ldr	r3, [pc, #272]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d116      	bne.n	8007924 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078f6:	4b41      	ldr	r3, [pc, #260]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_RCC_OscConfig+0x186>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d001      	beq.n	800790e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e1d3      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800790e:	4b3b      	ldr	r3, [pc, #236]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4937      	ldr	r1, [pc, #220]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800791e:	4313      	orrs	r3, r2
 8007920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007922:	e03a      	b.n	800799a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d020      	beq.n	800796e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800792c:	4b34      	ldr	r3, [pc, #208]	; (8007a00 <HAL_RCC_OscConfig+0x278>)
 800792e:	2201      	movs	r2, #1
 8007930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007932:	f7fe f843 	bl	80059bc <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007938:	e008      	b.n	800794c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800793a:	f7fe f83f 	bl	80059bc <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e1b4      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800794c:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0f0      	beq.n	800793a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007958:	4b28      	ldr	r3, [pc, #160]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	4925      	ldr	r1, [pc, #148]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007968:	4313      	orrs	r3, r2
 800796a:	600b      	str	r3, [r1, #0]
 800796c:	e015      	b.n	800799a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800796e:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <HAL_RCC_OscConfig+0x278>)
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007974:	f7fe f822 	bl	80059bc <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800797a:	e008      	b.n	800798e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800797c:	f7fe f81e 	bl	80059bc <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d901      	bls.n	800798e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e193      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800798e:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1f0      	bne.n	800797c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d036      	beq.n	8007a14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d016      	beq.n	80079dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <HAL_RCC_OscConfig+0x27c>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b4:	f7fe f802 	bl	80059bc <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079bc:	f7fd fffe 	bl	80059bc <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e173      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ce:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <HAL_RCC_OscConfig+0x274>)
 80079d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0x234>
 80079da:	e01b      	b.n	8007a14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <HAL_RCC_OscConfig+0x27c>)
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e2:	f7fd ffeb 	bl	80059bc <HAL_GetTick>
 80079e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e8:	e00e      	b.n	8007a08 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ea:	f7fd ffe7 	bl	80059bc <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d907      	bls.n	8007a08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e15c      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
 80079fc:	40023800 	.word	0x40023800
 8007a00:	42470000 	.word	0x42470000
 8007a04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a08:	4b8a      	ldr	r3, [pc, #552]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1ea      	bne.n	80079ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8097 	beq.w	8007b50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a26:	4b83      	ldr	r3, [pc, #524]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10f      	bne.n	8007a52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a32:	2300      	movs	r3, #0
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	4b7f      	ldr	r3, [pc, #508]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	4a7e      	ldr	r2, [pc, #504]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a40:	6413      	str	r3, [r2, #64]	; 0x40
 8007a42:	4b7c      	ldr	r3, [pc, #496]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a4a:	60bb      	str	r3, [r7, #8]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a52:	4b79      	ldr	r3, [pc, #484]	; (8007c38 <HAL_RCC_OscConfig+0x4b0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d118      	bne.n	8007a90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a5e:	4b76      	ldr	r3, [pc, #472]	; (8007c38 <HAL_RCC_OscConfig+0x4b0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a75      	ldr	r2, [pc, #468]	; (8007c38 <HAL_RCC_OscConfig+0x4b0>)
 8007a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a6a:	f7fd ffa7 	bl	80059bc <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a72:	f7fd ffa3 	bl	80059bc <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e118      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a84:	4b6c      	ldr	r3, [pc, #432]	; (8007c38 <HAL_RCC_OscConfig+0x4b0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d106      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x31e>
 8007a98:	4b66      	ldr	r3, [pc, #408]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9c:	4a65      	ldr	r2, [pc, #404]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa4:	e01c      	b.n	8007ae0 <HAL_RCC_OscConfig+0x358>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b05      	cmp	r3, #5
 8007aac:	d10c      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x340>
 8007aae:	4b61      	ldr	r3, [pc, #388]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	4a60      	ldr	r2, [pc, #384]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007ab4:	f043 0304 	orr.w	r3, r3, #4
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aba:	4b5e      	ldr	r3, [pc, #376]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	4a5d      	ldr	r2, [pc, #372]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac6:	e00b      	b.n	8007ae0 <HAL_RCC_OscConfig+0x358>
 8007ac8:	4b5a      	ldr	r3, [pc, #360]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	4a59      	ldr	r2, [pc, #356]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007ace:	f023 0301 	bic.w	r3, r3, #1
 8007ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad4:	4b57      	ldr	r3, [pc, #348]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	4a56      	ldr	r2, [pc, #344]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007ada:	f023 0304 	bic.w	r3, r3, #4
 8007ade:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d015      	beq.n	8007b14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae8:	f7fd ff68 	bl	80059bc <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aee:	e00a      	b.n	8007b06 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af0:	f7fd ff64 	bl	80059bc <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e0d7      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b06:	4b4b      	ldr	r3, [pc, #300]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0ee      	beq.n	8007af0 <HAL_RCC_OscConfig+0x368>
 8007b12:	e014      	b.n	8007b3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b14:	f7fd ff52 	bl	80059bc <HAL_GetTick>
 8007b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b1a:	e00a      	b.n	8007b32 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b1c:	f7fd ff4e 	bl	80059bc <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e0c1      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b32:	4b40      	ldr	r3, [pc, #256]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1ee      	bne.n	8007b1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d105      	bne.n	8007b50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b44:	4b3b      	ldr	r3, [pc, #236]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	4a3a      	ldr	r2, [pc, #232]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80ad 	beq.w	8007cb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b5a:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 030c 	and.w	r3, r3, #12
 8007b62:	2b08      	cmp	r3, #8
 8007b64:	d060      	beq.n	8007c28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d145      	bne.n	8007bfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b6e:	4b33      	ldr	r3, [pc, #204]	; (8007c3c <HAL_RCC_OscConfig+0x4b4>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fd ff22 	bl	80059bc <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b7c:	f7fd ff1e 	bl	80059bc <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e093      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8e:	4b29      	ldr	r3, [pc, #164]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f0      	bne.n	8007b7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69da      	ldr	r2, [r3, #28]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	019b      	lsls	r3, r3, #6
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	071b      	lsls	r3, r3, #28
 8007bc6:	491b      	ldr	r1, [pc, #108]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bcc:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <HAL_RCC_OscConfig+0x4b4>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd2:	f7fd fef3 	bl	80059bc <HAL_GetTick>
 8007bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bda:	f7fd feef 	bl	80059bc <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e064      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bec:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0f0      	beq.n	8007bda <HAL_RCC_OscConfig+0x452>
 8007bf8:	e05c      	b.n	8007cb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <HAL_RCC_OscConfig+0x4b4>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c00:	f7fd fedc 	bl	80059bc <HAL_GetTick>
 8007c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c06:	e008      	b.n	8007c1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c08:	f7fd fed8 	bl	80059bc <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d901      	bls.n	8007c1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e04d      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c1a:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <HAL_RCC_OscConfig+0x4ac>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f0      	bne.n	8007c08 <HAL_RCC_OscConfig+0x480>
 8007c26:	e045      	b.n	8007cb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e040      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
 8007c34:	40023800 	.word	0x40023800
 8007c38:	40007000 	.word	0x40007000
 8007c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c40:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <HAL_RCC_OscConfig+0x538>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d030      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d129      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d122      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c70:	4013      	ands	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d119      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d10f      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d107      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800

08007cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e07b      	b.n	8007dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d108      	bne.n	8007cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ce6:	d009      	beq.n	8007cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	61da      	str	r2, [r3, #28]
 8007cee:	e005      	b.n	8007cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fb f950 	bl	8002fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d80:	ea42 0103 	orr.w	r1, r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	f003 0104 	and.w	r1, r3, #4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	f003 0210 	and.w	r2, r3, #16
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b088      	sub	sp, #32
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_SPI_Transmit+0x22>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e126      	b.n	8008046 <HAL_SPI_Transmit+0x270>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e00:	f7fd fddc 	bl	80059bc <HAL_GetTick>
 8007e04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d002      	beq.n	8007e1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007e16:	2302      	movs	r3, #2
 8007e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e1a:	e10b      	b.n	8008034 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <HAL_SPI_Transmit+0x52>
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d102      	bne.n	8007e2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e2c:	e102      	b.n	8008034 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2203      	movs	r2, #3
 8007e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	88fa      	ldrh	r2, [r7, #6]
 8007e4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e74:	d10f      	bne.n	8007e96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	d007      	beq.n	8007eb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ebc:	d14b      	bne.n	8007f56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_Transmit+0xf6>
 8007ec6:	8afb      	ldrh	r3, [r7, #22]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d13e      	bne.n	8007f4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	881a      	ldrh	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007edc:	1c9a      	adds	r2, r3, #2
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ef0:	e02b      	b.n	8007f4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d112      	bne.n	8007f26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	1c9a      	adds	r2, r3, #2
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f24:	e011      	b.n	8007f4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f26:	f7fd fd49 	bl	80059bc <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d803      	bhi.n	8007f3e <HAL_SPI_Transmit+0x168>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3c:	d102      	bne.n	8007f44 <HAL_SPI_Transmit+0x16e>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d102      	bne.n	8007f4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f48:	e074      	b.n	8008034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1ce      	bne.n	8007ef2 <HAL_SPI_Transmit+0x11c>
 8007f54:	e04c      	b.n	8007ff0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <HAL_SPI_Transmit+0x18e>
 8007f5e:	8afb      	ldrh	r3, [r7, #22]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d140      	bne.n	8007fe6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	7812      	ldrb	r2, [r2, #0]
 8007f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f8a:	e02c      	b.n	8007fe6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d113      	bne.n	8007fc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007fc0:	e011      	b.n	8007fe6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fc2:	f7fd fcfb 	bl	80059bc <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d803      	bhi.n	8007fda <HAL_SPI_Transmit+0x204>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd8:	d102      	bne.n	8007fe0 <HAL_SPI_Transmit+0x20a>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fe4:	e026      	b.n	8008034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1cd      	bne.n	8007f8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fafd 	bl	80085f4 <SPI_EndRxTxTransaction>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800800e:	2300      	movs	r3, #0
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	77fb      	strb	r3, [r7, #31]
 8008030:	e000      	b.n	8008034 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008044:	7ffb      	ldrb	r3, [r7, #31]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_SPI_Transmit_DMA+0x20>
 800806c:	2302      	movs	r3, #2
 800806e:	e09b      	b.n	80081a8 <HAL_SPI_Transmit_DMA+0x158>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b01      	cmp	r3, #1
 8008082:	d002      	beq.n	800808a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008084:	2302      	movs	r3, #2
 8008086:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008088:	e089      	b.n	800819e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_SPI_Transmit_DMA+0x46>
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
    goto error;
 800809a:	e080      	b.n	800819e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2203      	movs	r2, #3
 80080a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	88fa      	ldrh	r2, [r7, #6]
 80080ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e2:	d10f      	bne.n	8008104 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008108:	4a29      	ldr	r2, [pc, #164]	; (80081b0 <HAL_SPI_Transmit_DMA+0x160>)
 800810a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008110:	4a28      	ldr	r2, [pc, #160]	; (80081b4 <HAL_SPI_Transmit_DMA+0x164>)
 8008112:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008118:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <HAL_SPI_Transmit_DMA+0x168>)
 800811a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008120:	2200      	movs	r2, #0
 8008122:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	4619      	mov	r1, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800813a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800813c:	f7fe fa32 	bl	80065a4 <HAL_DMA_Start_IT>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00c      	beq.n	8008160 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814a:	f043 0210 	orr.w	r2, r3, #16
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800815e:	e01e      	b.n	800819e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d007      	beq.n	800817e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800817c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0220 	orr.w	r2, r2, #32
 800818c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0202 	orr.w	r2, r2, #2
 800819c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	08008461 	.word	0x08008461
 80081b4:	080083b9 	.word	0x080083b9
 80081b8:	0800847d 	.word	0x0800847d

080081bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10e      	bne.n	80081fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
    return;
 80081fa:	e0ce      	b.n	800839a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <HAL_SPI_IRQHandler+0x5e>
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
    return;
 8008218:	e0bf      	b.n	800839a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <HAL_SPI_IRQHandler+0x7e>
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80b0 	beq.w	800839a <HAL_SPI_IRQHandler+0x1de>
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80aa 	beq.w	800839a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d023      	beq.n	8008298 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b03      	cmp	r3, #3
 800825a:	d011      	beq.n	8008280 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008260:	f043 0204 	orr.w	r2, r3, #4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	e00b      	b.n	8008298 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008280:	2300      	movs	r3, #0
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	693b      	ldr	r3, [r7, #16]
        return;
 8008296:	e080      	b.n	800839a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d014      	beq.n	80082cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	f043 0201 	orr.w	r2, r3, #1
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082da:	f043 0208 	orr.w	r2, r3, #8
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082e2:	2300      	movs	r3, #0
 80082e4:	60bb      	str	r3, [r7, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	60bb      	str	r3, [r7, #8]
 80082ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d04f      	beq.n	8008398 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008306:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d104      	bne.n	8008324 <HAL_SPI_IRQHandler+0x168>
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d034      	beq.n	800838e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0203 	bic.w	r2, r2, #3
 8008332:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d011      	beq.n	8008360 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008340:	4a17      	ldr	r2, [pc, #92]	; (80083a0 <HAL_SPI_IRQHandler+0x1e4>)
 8008342:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe f9f3 	bl	8006734 <HAL_DMA_Abort_IT>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008358:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008364:	2b00      	cmp	r3, #0
 8008366:	d016      	beq.n	8008396 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800836c:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <HAL_SPI_IRQHandler+0x1e4>)
 800836e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe f9dd 	bl	8006734 <HAL_DMA_Abort_IT>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800838c:	e003      	b.n	8008396 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7fb fbb8 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008394:	e000      	b.n	8008398 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008396:	bf00      	nop
    return;
 8008398:	bf00      	nop
  }
}
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	080084bd 	.word	0x080084bd

080083a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083c6:	f7fd faf9 	bl	80059bc <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083da:	d03b      	beq.n	8008454 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0220 	bic.w	r2, r2, #32
 80083ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0202 	bic.w	r2, r2, #2
 80083fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	2164      	movs	r1, #100	; 0x64
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f000 f8f7 	bl	80085f4 <SPI_EndRxTxTransaction>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	f043 0220 	orr.w	r2, r3, #32
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800844c:	6978      	ldr	r0, [r7, #20]
 800844e:	f7fb fb59 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008452:	e002      	b.n	800845a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f7fb fb6b 	bl	8003b30 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f7ff ff98 	bl	80083a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008474:	bf00      	nop
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0203 	bic.w	r2, r2, #3
 8008498:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849e:	f043 0210 	orr.w	r2, r3, #16
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7fb fb28 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7fb fb14 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	4613      	mov	r3, r2
 80084f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084f4:	f7fd fa62 	bl	80059bc <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4413      	add	r3, r2
 8008502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008504:	f7fd fa5a 	bl	80059bc <HAL_GetTick>
 8008508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800850a:	4b39      	ldr	r3, [pc, #228]	; (80085f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	015b      	lsls	r3, r3, #5
 8008510:	0d1b      	lsrs	r3, r3, #20
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800851a:	e054      	b.n	80085c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008522:	d050      	beq.n	80085c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008524:	f7fd fa4a 	bl	80059bc <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	429a      	cmp	r2, r3
 8008532:	d902      	bls.n	800853a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d13d      	bne.n	80085b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008552:	d111      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855c:	d004      	beq.n	8008568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008566:	d107      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008580:	d10f      	bne.n	80085a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e017      	b.n	80085e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4013      	ands	r3, r2
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	bf0c      	ite	eq
 80085d6:	2301      	moveq	r3, #1
 80085d8:	2300      	movne	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d19b      	bne.n	800851c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000024 	.word	0x20000024

080085f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008600:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <SPI_EndRxTxTransaction+0x7c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a1b      	ldr	r2, [pc, #108]	; (8008674 <SPI_EndRxTxTransaction+0x80>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	0d5b      	lsrs	r3, r3, #21
 800860c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008610:	fb02 f303 	mul.w	r3, r2, r3
 8008614:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800861e:	d112      	bne.n	8008646 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	2180      	movs	r1, #128	; 0x80
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff ff5a 	bl	80084e4 <SPI_WaitFlagStateUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d016      	beq.n	8008664 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	f043 0220 	orr.w	r2, r3, #32
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e00f      	b.n	8008666 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	3b01      	subs	r3, #1
 8008650:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d0f2      	beq.n	8008646 <SPI_EndRxTxTransaction+0x52>
 8008660:	e000      	b.n	8008664 <SPI_EndRxTxTransaction+0x70>
        break;
 8008662:	bf00      	nop
  }

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000024 	.word	0x20000024
 8008674:	165e9f81 	.word	0x165e9f81

08008678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e041      	b.n	800870e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fa fd2e 	bl	8003100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f000 faa0 	bl	8008bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b01      	cmp	r3, #1
 800872a:	d001      	beq.n	8008730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e04e      	b.n	80087ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a23      	ldr	r2, [pc, #140]	; (80087dc <HAL_TIM_Base_Start_IT+0xc4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d022      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875a:	d01d      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d018      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1e      	ldr	r2, [pc, #120]	; (80087e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d013      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1c      	ldr	r2, [pc, #112]	; (80087e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00e      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1b      	ldr	r2, [pc, #108]	; (80087ec <HAL_TIM_Base_Start_IT+0xd4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a19      	ldr	r2, [pc, #100]	; (80087f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_TIM_Base_Start_IT+0x80>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a18      	ldr	r2, [pc, #96]	; (80087f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d111      	bne.n	80087bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b06      	cmp	r3, #6
 80087a8:	d010      	beq.n	80087cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0201 	orr.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ba:	e007      	b.n	80087cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0201 	orr.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	40010000 	.word	0x40010000
 80087e0:	40000400 	.word	0x40000400
 80087e4:	40000800 	.word	0x40000800
 80087e8:	40000c00 	.word	0x40000c00
 80087ec:	40010400 	.word	0x40010400
 80087f0:	40014000 	.word	0x40014000
 80087f4:	40001800 	.word	0x40001800

080087f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b02      	cmp	r3, #2
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b02      	cmp	r3, #2
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0202 	mvn.w	r2, #2
 8008824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9bf 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f9b1 	bl	8008baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9c2 	bl	8008bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b04      	cmp	r3, #4
 8008860:	d122      	bne.n	80088a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b04      	cmp	r3, #4
 800886e:	d11b      	bne.n	80088a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0204 	mvn.w	r2, #4
 8008878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2202      	movs	r2, #2
 800887e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f995 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 8008894:	e005      	b.n	80088a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f987 	bl	8008baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f998 	bl	8008bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	d122      	bne.n	80088fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d11b      	bne.n	80088fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0208 	mvn.w	r2, #8
 80088cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2204      	movs	r2, #4
 80088d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f96b 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 80088e8:	e005      	b.n	80088f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f95d 	bl	8008baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f96e 	bl	8008bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 0310 	and.w	r3, r3, #16
 8008906:	2b10      	cmp	r3, #16
 8008908:	d122      	bne.n	8008950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b10      	cmp	r3, #16
 8008916:	d11b      	bne.n	8008950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0210 	mvn.w	r2, #16
 8008920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2208      	movs	r2, #8
 8008926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f941 	bl	8008bbe <HAL_TIM_IC_CaptureCallback>
 800893c:	e005      	b.n	800894a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f933 	bl	8008baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f944 	bl	8008bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b01      	cmp	r3, #1
 800895c:	d10e      	bne.n	800897c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b01      	cmp	r3, #1
 800896a:	d107      	bne.n	800897c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0201 	mvn.w	r2, #1
 8008974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f90d 	bl	8008b96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008986:	2b80      	cmp	r3, #128	; 0x80
 8008988:	d10e      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008994:	2b80      	cmp	r3, #128	; 0x80
 8008996:	d107      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 faea 	bl	8008f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b2:	2b40      	cmp	r3, #64	; 0x40
 80089b4:	d10e      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d107      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f909 	bl	8008be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b20      	cmp	r3, #32
 80089e0:	d10e      	bne.n	8008a00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d107      	bne.n	8008a00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0220 	mvn.w	r2, #32
 80089f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fab4 	bl	8008f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_TIM_ConfigClockSource+0x1c>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e0b4      	b.n	8008b8e <HAL_TIM_ConfigClockSource+0x186>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5c:	d03e      	beq.n	8008adc <HAL_TIM_ConfigClockSource+0xd4>
 8008a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a62:	f200 8087 	bhi.w	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6a:	f000 8086 	beq.w	8008b7a <HAL_TIM_ConfigClockSource+0x172>
 8008a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a72:	d87f      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a74:	2b70      	cmp	r3, #112	; 0x70
 8008a76:	d01a      	beq.n	8008aae <HAL_TIM_ConfigClockSource+0xa6>
 8008a78:	2b70      	cmp	r3, #112	; 0x70
 8008a7a:	d87b      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a7c:	2b60      	cmp	r3, #96	; 0x60
 8008a7e:	d050      	beq.n	8008b22 <HAL_TIM_ConfigClockSource+0x11a>
 8008a80:	2b60      	cmp	r3, #96	; 0x60
 8008a82:	d877      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a84:	2b50      	cmp	r3, #80	; 0x50
 8008a86:	d03c      	beq.n	8008b02 <HAL_TIM_ConfigClockSource+0xfa>
 8008a88:	2b50      	cmp	r3, #80	; 0x50
 8008a8a:	d873      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d058      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x13a>
 8008a90:	2b40      	cmp	r3, #64	; 0x40
 8008a92:	d86f      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a94:	2b30      	cmp	r3, #48	; 0x30
 8008a96:	d064      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x15a>
 8008a98:	2b30      	cmp	r3, #48	; 0x30
 8008a9a:	d86b      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d060      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x15a>
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d867      	bhi.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d05c      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x15a>
 8008aa8:	2b10      	cmp	r3, #16
 8008aaa:	d05a      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x15a>
 8008aac:	e062      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	6899      	ldr	r1, [r3, #8]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f000 f9b7 	bl	8008e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	609a      	str	r2, [r3, #8]
      break;
 8008ada:	e04f      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6899      	ldr	r1, [r3, #8]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f000 f9a0 	bl	8008e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008afe:	609a      	str	r2, [r3, #8]
      break;
 8008b00:	e03c      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	6859      	ldr	r1, [r3, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f000 f914 	bl	8008d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2150      	movs	r1, #80	; 0x50
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 f96d 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 8008b20:	e02c      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6859      	ldr	r1, [r3, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f000 f933 	bl	8008d9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2160      	movs	r1, #96	; 0x60
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f95d 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 8008b40:	e01c      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f000 f8f4 	bl	8008d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2140      	movs	r1, #64	; 0x40
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f94d 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 8008b60:	e00c      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f000 f944 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 8008b72:	e003      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
      break;
 8008b78:	e000      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
	...

08008bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a40      	ldr	r2, [pc, #256]	; (8008d10 <TIM_Base_SetConfig+0x114>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d013      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c1a:	d00f      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a3d      	ldr	r2, [pc, #244]	; (8008d14 <TIM_Base_SetConfig+0x118>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00b      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a3c      	ldr	r2, [pc, #240]	; (8008d18 <TIM_Base_SetConfig+0x11c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d007      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a3b      	ldr	r2, [pc, #236]	; (8008d1c <TIM_Base_SetConfig+0x120>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a3a      	ldr	r2, [pc, #232]	; (8008d20 <TIM_Base_SetConfig+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d108      	bne.n	8008c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a2f      	ldr	r2, [pc, #188]	; (8008d10 <TIM_Base_SetConfig+0x114>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d02b      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5c:	d027      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a2c      	ldr	r2, [pc, #176]	; (8008d14 <TIM_Base_SetConfig+0x118>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d023      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a2b      	ldr	r2, [pc, #172]	; (8008d18 <TIM_Base_SetConfig+0x11c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d01f      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a2a      	ldr	r2, [pc, #168]	; (8008d1c <TIM_Base_SetConfig+0x120>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d01b      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a29      	ldr	r2, [pc, #164]	; (8008d20 <TIM_Base_SetConfig+0x124>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d017      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a28      	ldr	r2, [pc, #160]	; (8008d24 <TIM_Base_SetConfig+0x128>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a27      	ldr	r2, [pc, #156]	; (8008d28 <TIM_Base_SetConfig+0x12c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a26      	ldr	r2, [pc, #152]	; (8008d2c <TIM_Base_SetConfig+0x130>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00b      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a25      	ldr	r2, [pc, #148]	; (8008d30 <TIM_Base_SetConfig+0x134>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a24      	ldr	r2, [pc, #144]	; (8008d34 <TIM_Base_SetConfig+0x138>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a23      	ldr	r2, [pc, #140]	; (8008d38 <TIM_Base_SetConfig+0x13c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d108      	bne.n	8008cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a0a      	ldr	r2, [pc, #40]	; (8008d10 <TIM_Base_SetConfig+0x114>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0xf8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a0c      	ldr	r2, [pc, #48]	; (8008d20 <TIM_Base_SetConfig+0x124>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d103      	bne.n	8008cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	615a      	str	r2, [r3, #20]
}
 8008d02:	bf00      	nop
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40000400 	.word	0x40000400
 8008d18:	40000800 	.word	0x40000800
 8008d1c:	40000c00 	.word	0x40000c00
 8008d20:	40010400 	.word	0x40010400
 8008d24:	40014000 	.word	0x40014000
 8008d28:	40014400 	.word	0x40014400
 8008d2c:	40014800 	.word	0x40014800
 8008d30:	40001800 	.word	0x40001800
 8008d34:	40001c00 	.word	0x40001c00
 8008d38:	40002000 	.word	0x40002000

08008d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f023 030a 	bic.w	r3, r3, #10
 8008d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0210 	bic.w	r2, r3, #16
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	031b      	lsls	r3, r3, #12
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b085      	sub	sp, #20
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f043 0307 	orr.w	r3, r3, #7
 8008e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	609a      	str	r2, [r3, #8]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	021a      	lsls	r2, r3, #8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e84:	2302      	movs	r3, #2
 8008e86:	e05a      	b.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a21      	ldr	r2, [pc, #132]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d022      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed4:	d01d      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a1d      	ldr	r2, [pc, #116]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d018      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a1b      	ldr	r2, [pc, #108]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d013      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1a      	ldr	r2, [pc, #104]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00e      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d009      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a17      	ldr	r2, [pc, #92]	; (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d004      	beq.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d10c      	bne.n	8008f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	40010000 	.word	0x40010000
 8008f50:	40000400 	.word	0x40000400
 8008f54:	40000800 	.word	0x40000800
 8008f58:	40000c00 	.word	0x40000c00
 8008f5c:	40010400 	.word	0x40010400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40001800 	.word	0x40001800

08008f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e03f      	b.n	8009022 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fa f8c8 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2224      	movs	r2, #36	; 0x24
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fddf 	bl	8009b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	695a      	ldr	r2, [r3, #20]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08a      	sub	sp, #40	; 0x28
 800902e:	af02      	add	r7, sp, #8
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	603b      	str	r3, [r7, #0]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b20      	cmp	r3, #32
 8009048:	d17c      	bne.n	8009144 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <HAL_UART_Transmit+0x2c>
 8009050:	88fb      	ldrh	r3, [r7, #6]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e075      	b.n	8009146 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_UART_Transmit+0x3e>
 8009064:	2302      	movs	r3, #2
 8009066:	e06e      	b.n	8009146 <HAL_UART_Transmit+0x11c>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2221      	movs	r2, #33	; 0x21
 800907a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800907e:	f7fc fc9d 	bl	80059bc <HAL_GetTick>
 8009082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	88fa      	ldrh	r2, [r7, #6]
 8009088:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	88fa      	ldrh	r2, [r7, #6]
 800908e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009098:	d108      	bne.n	80090ac <HAL_UART_Transmit+0x82>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	e003      	b.n	80090b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090bc:	e02a      	b.n	8009114 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2200      	movs	r2, #0
 80090c6:	2180      	movs	r1, #128	; 0x80
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fb1f 	bl	800970c <UART_WaitOnFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e036      	b.n	8009146 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10b      	bne.n	80090f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	3302      	adds	r3, #2
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	e007      	b.n	8009106 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	3301      	adds	r3, #1
 8009104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009118:	b29b      	uxth	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1cf      	bne.n	80090be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2200      	movs	r2, #0
 8009126:	2140      	movs	r1, #64	; 0x40
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 faef 	bl	800970c <UART_WaitOnFlagUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e006      	b.n	8009146 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	4613      	mov	r3, r2
 800915a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b20      	cmp	r3, #32
 8009166:	d11d      	bne.n	80091a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_UART_Receive_IT+0x26>
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e016      	b.n	80091a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_UART_Receive_IT+0x38>
 8009182:	2302      	movs	r3, #2
 8009184:	e00f      	b.n	80091a6 <HAL_UART_Receive_IT+0x58>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	461a      	mov	r2, r3
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fb24 	bl	80097e8 <UART_Start_Receive_IT>
 80091a0:	4603      	mov	r3, r0
 80091a2:	e000      	b.n	80091a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80091a4:	2302      	movs	r3, #2
  }
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b0ba      	sub	sp, #232	; 0xe8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80091dc:	2300      	movs	r3, #0
 80091de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80091ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10f      	bne.n	8009216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <HAL_UART_IRQHandler+0x66>
 8009202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fc07 	bl	8009a22 <UART_Receive_IT>
      return;
 8009214:	e256      	b.n	80096c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 80de 	beq.w	80093dc <HAL_UART_IRQHandler+0x22c>
 8009220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d106      	bne.n	800923a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800922c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009230:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 80d1 	beq.w	80093dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800923a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00b      	beq.n	800925e <HAL_UART_IRQHandler+0xae>
 8009246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800924a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	f043 0201 	orr.w	r2, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800925e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00b      	beq.n	8009282 <HAL_UART_IRQHandler+0xd2>
 800926a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	f043 0202 	orr.w	r2, r3, #2
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <HAL_UART_IRQHandler+0xf6>
 800928e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	f043 0204 	orr.w	r2, r3, #4
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80092a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092aa:	f003 0308 	and.w	r3, r3, #8
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d011      	beq.n	80092d6 <HAL_UART_IRQHandler+0x126>
 80092b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d105      	bne.n	80092ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	f043 0208 	orr.w	r2, r3, #8
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 81ed 	beq.w	80096ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <HAL_UART_IRQHandler+0x14e>
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fb92 	bl	8009a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b40      	cmp	r3, #64	; 0x40
 800930a:	bf0c      	ite	eq
 800930c:	2301      	moveq	r3, #1
 800930e:	2300      	movne	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d103      	bne.n	800932a <HAL_UART_IRQHandler+0x17a>
 8009322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009326:	2b00      	cmp	r3, #0
 8009328:	d04f      	beq.n	80093ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa9a 	bl	8009864 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933a:	2b40      	cmp	r3, #64	; 0x40
 800933c:	d141      	bne.n	80093c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3314      	adds	r3, #20
 8009344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800935c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3314      	adds	r3, #20
 8009366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800936a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800936e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1d9      	bne.n	800933e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	2b00      	cmp	r3, #0
 8009390:	d013      	beq.n	80093ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	4a7d      	ldr	r2, [pc, #500]	; (800958c <HAL_UART_IRQHandler+0x3dc>)
 8009398:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fd f9c8 	bl	8006734 <HAL_DMA_Abort_IT>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d016      	beq.n	80093d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b8:	e00e      	b.n	80093d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f990 	bl	80096e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c0:	e00a      	b.n	80093d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f98c 	bl	80096e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c8:	e006      	b.n	80093d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f988 	bl	80096e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80093d6:	e170      	b.n	80096ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d8:	bf00      	nop
    return;
 80093da:	e16e      	b.n	80096ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	f040 814a 	bne.w	800967a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 8143 	beq.w	800967a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 813c 	beq.w	800967a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60bb      	str	r3, [r7, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	60bb      	str	r3, [r7, #8]
 8009416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	f040 80b4 	bne.w	8009590 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 8140 	beq.w	80096be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009446:	429a      	cmp	r2, r3
 8009448:	f080 8139 	bcs.w	80096be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009452:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945e:	f000 8088 	beq.w	8009572 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800947c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	330c      	adds	r3, #12
 800948a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800948e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800949a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1d9      	bne.n	8009462 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3314      	adds	r3, #20
 80094b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094c0:	f023 0301 	bic.w	r3, r3, #1
 80094c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3314      	adds	r3, #20
 80094ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e1      	bne.n	80094ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3314      	adds	r3, #20
 80094f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3314      	adds	r3, #20
 800950a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800950e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800951c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e3      	bne.n	80094ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	330c      	adds	r3, #12
 8009536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009542:	f023 0310 	bic.w	r3, r3, #16
 8009546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009554:	65ba      	str	r2, [r7, #88]	; 0x58
 8009556:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800955a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e3      	bne.n	8009530 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd f871 	bl	8006654 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800957a:	b29b      	uxth	r3, r3
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	b29b      	uxth	r3, r3
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f8b6 	bl	80096f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009588:	e099      	b.n	80096be <HAL_UART_IRQHandler+0x50e>
 800958a:	bf00      	nop
 800958c:	0800992b 	.word	0x0800992b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009598:	b29b      	uxth	r3, r3
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 808b 	beq.w	80096c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80095ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8086 	beq.w	80096c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	330c      	adds	r3, #12
 80095d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80095da:	647a      	str	r2, [r7, #68]	; 0x44
 80095dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e3      	bne.n	80095b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3314      	adds	r3, #20
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3314      	adds	r3, #20
 800960e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009612:	633a      	str	r2, [r7, #48]	; 0x30
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e3      	bne.n	80095ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	330c      	adds	r3, #12
 800963a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	60fb      	str	r3, [r7, #12]
   return(result);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0310 	bic.w	r3, r3, #16
 800964a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009658:	61fa      	str	r2, [r7, #28]
 800965a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	69b9      	ldr	r1, [r7, #24]
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	617b      	str	r3, [r7, #20]
   return(result);
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e3      	bne.n	8009634 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800966c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f83e 	bl	80096f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009678:	e023      	b.n	80096c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800967a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009682:	2b00      	cmp	r3, #0
 8009684:	d009      	beq.n	800969a <HAL_UART_IRQHandler+0x4ea>
 8009686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f95d 	bl	8009952 <UART_Transmit_IT>
    return;
 8009698:	e014      	b.n	80096c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800969a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00e      	beq.n	80096c4 <HAL_UART_IRQHandler+0x514>
 80096a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d008      	beq.n	80096c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f99d 	bl	80099f2 <UART_EndTransmit_IT>
    return;
 80096b8:	e004      	b.n	80096c4 <HAL_UART_IRQHandler+0x514>
    return;
 80096ba:	bf00      	nop
 80096bc:	e002      	b.n	80096c4 <HAL_UART_IRQHandler+0x514>
      return;
 80096be:	bf00      	nop
 80096c0:	e000      	b.n	80096c4 <HAL_UART_IRQHandler+0x514>
      return;
 80096c2:	bf00      	nop
  }
}
 80096c4:	37e8      	adds	r7, #232	; 0xe8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop

080096cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b090      	sub	sp, #64	; 0x40
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	4613      	mov	r3, r2
 800971a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971c:	e050      	b.n	80097c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800971e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009724:	d04c      	beq.n	80097c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009728:	2b00      	cmp	r3, #0
 800972a:	d007      	beq.n	800973c <UART_WaitOnFlagUntilTimeout+0x30>
 800972c:	f7fc f946 	bl	80059bc <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009738:	429a      	cmp	r2, r3
 800973a:	d241      	bcs.n	80097c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	330c      	adds	r3, #12
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	330c      	adds	r3, #12
 800975a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800975c:	637a      	str	r2, [r7, #52]	; 0x34
 800975e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e5      	bne.n	800973c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3314      	adds	r3, #20
 8009776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	613b      	str	r3, [r7, #16]
   return(result);
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	63bb      	str	r3, [r7, #56]	; 0x38
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3314      	adds	r3, #20
 800978e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009790:	623a      	str	r2, [r7, #32]
 8009792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	69f9      	ldr	r1, [r7, #28]
 8009796:	6a3a      	ldr	r2, [r7, #32]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	61bb      	str	r3, [r7, #24]
   return(result);
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e5      	bne.n	8009770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2220      	movs	r2, #32
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e00f      	b.n	80097e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4013      	ands	r3, r2
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	bf0c      	ite	eq
 80097d0:	2301      	moveq	r3, #1
 80097d2:	2300      	movne	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	461a      	mov	r2, r3
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d09f      	beq.n	800971e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3740      	adds	r7, #64	; 0x40
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	88fa      	ldrh	r2, [r7, #6]
 8009800:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	88fa      	ldrh	r2, [r7, #6]
 8009806:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2222      	movs	r2, #34	; 0x22
 8009812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009834:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	695a      	ldr	r2, [r3, #20]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f042 0201 	orr.w	r2, r2, #1
 8009844:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0220 	orr.w	r2, r2, #32
 8009854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009864:	b480      	push	{r7}
 8009866:	b095      	sub	sp, #84	; 0x54
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	330c      	adds	r3, #12
 8009872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	330c      	adds	r3, #12
 800988a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800988c:	643a      	str	r2, [r7, #64]	; 0x40
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3314      	adds	r3, #20
 80098a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	f023 0301 	bic.w	r3, r3, #1
 80098b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3314      	adds	r3, #20
 80098be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c8:	e841 2300 	strex	r3, r2, [r1]
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e5      	bne.n	80098a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d119      	bne.n	8009910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	330c      	adds	r3, #12
 80098e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f023 0310 	bic.w	r3, r3, #16
 80098f2:	647b      	str	r3, [r7, #68]	; 0x44
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	330c      	adds	r3, #12
 80098fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098fc:	61ba      	str	r2, [r7, #24]
 80098fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	6979      	ldr	r1, [r7, #20]
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	613b      	str	r3, [r7, #16]
   return(result);
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e5      	bne.n	80098dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2220      	movs	r2, #32
 8009914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800991e:	bf00      	nop
 8009920:	3754      	adds	r7, #84	; 0x54
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff fecb 	bl	80096e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009952:	b480      	push	{r7}
 8009954:	b085      	sub	sp, #20
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b21      	cmp	r3, #33	; 0x21
 8009964:	d13e      	bne.n	80099e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996e:	d114      	bne.n	800999a <UART_Transmit_IT+0x48>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d110      	bne.n	800999a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800998c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	1c9a      	adds	r2, r3, #2
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	621a      	str	r2, [r3, #32]
 8009998:	e008      	b.n	80099ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	1c59      	adds	r1, r3, #1
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6211      	str	r1, [r2, #32]
 80099a4:	781a      	ldrb	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	4619      	mov	r1, r3
 80099ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10f      	bne.n	80099e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e000      	b.n	80099e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099e4:	2302      	movs	r3, #2
  }
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff fe5a 	bl	80096cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b08c      	sub	sp, #48	; 0x30
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b22      	cmp	r3, #34	; 0x22
 8009a34:	f040 80ab 	bne.w	8009b8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a40:	d117      	bne.n	8009a72 <UART_Receive_IT+0x50>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d113      	bne.n	8009a72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6a:	1c9a      	adds	r2, r3, #2
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8009a70:	e026      	b.n	8009ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a84:	d007      	beq.n	8009a96 <UART_Receive_IT+0x74>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <UART_Receive_IT+0x82>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d106      	bne.n	8009aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	e008      	b.n	8009ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	4619      	mov	r1, r3
 8009ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d15a      	bne.n	8009b8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0220 	bic.w	r2, r2, #32
 8009ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	695a      	ldr	r2, [r3, #20]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0201 	bic.w	r2, r2, #1
 8009b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2220      	movs	r2, #32
 8009b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d135      	bne.n	8009b80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	330c      	adds	r3, #12
 8009b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	613b      	str	r3, [r7, #16]
   return(result);
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f023 0310 	bic.w	r3, r3, #16
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	330c      	adds	r3, #12
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	623a      	str	r2, [r7, #32]
 8009b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	69f9      	ldr	r1, [r7, #28]
 8009b40:	6a3a      	ldr	r2, [r7, #32]
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e5      	bne.n	8009b1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0310 	and.w	r3, r3, #16
 8009b58:	2b10      	cmp	r3, #16
 8009b5a:	d10a      	bne.n	8009b72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff fdbb 	bl	80096f4 <HAL_UARTEx_RxEventCallback>
 8009b7e:	e002      	b.n	8009b86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7f9 f88f 	bl	8002ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e002      	b.n	8009b90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e000      	b.n	8009b90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009b8e:	2302      	movs	r3, #2
  }
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3730      	adds	r7, #48	; 0x30
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b9c:	b0c0      	sub	sp, #256	; 0x100
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb4:	68d9      	ldr	r1, [r3, #12]
 8009bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	ea40 0301 	orr.w	r3, r0, r1
 8009bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009bf0:	f021 010c 	bic.w	r1, r1, #12
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bfe:	430b      	orrs	r3, r1
 8009c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c12:	6999      	ldr	r1, [r3, #24]
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	ea40 0301 	orr.w	r3, r0, r1
 8009c1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b8f      	ldr	r3, [pc, #572]	; (8009e64 <UART_SetConfig+0x2cc>)
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d005      	beq.n	8009c38 <UART_SetConfig+0xa0>
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b8d      	ldr	r3, [pc, #564]	; (8009e68 <UART_SetConfig+0x2d0>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d104      	bne.n	8009c42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c38:	f7fd fb62 	bl	8007300 <HAL_RCC_GetPCLK2Freq>
 8009c3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c40:	e003      	b.n	8009c4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c42:	f7fd fb49 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8009c46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c54:	f040 810c 	bne.w	8009e70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	462b      	mov	r3, r5
 8009c6e:	1891      	adds	r1, r2, r2
 8009c70:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c72:	415b      	adcs	r3, r3
 8009c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	eb12 0801 	adds.w	r8, r2, r1
 8009c80:	4629      	mov	r1, r5
 8009c82:	eb43 0901 	adc.w	r9, r3, r1
 8009c86:	f04f 0200 	mov.w	r2, #0
 8009c8a:	f04f 0300 	mov.w	r3, #0
 8009c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c9a:	4690      	mov	r8, r2
 8009c9c:	4699      	mov	r9, r3
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	eb18 0303 	adds.w	r3, r8, r3
 8009ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ca8:	462b      	mov	r3, r5
 8009caa:	eb49 0303 	adc.w	r3, r9, r3
 8009cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	18db      	adds	r3, r3, r3
 8009cca:	653b      	str	r3, [r7, #80]	; 0x50
 8009ccc:	4613      	mov	r3, r2
 8009cce:	eb42 0303 	adc.w	r3, r2, r3
 8009cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8009cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009cd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009cdc:	f7f6 ff84 	bl	8000be8 <__aeabi_uldivmod>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4b61      	ldr	r3, [pc, #388]	; (8009e6c <UART_SetConfig+0x2d4>)
 8009ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8009cea:	095b      	lsrs	r3, r3, #5
 8009cec:	011c      	lsls	r4, r3, #4
 8009cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d00:	4642      	mov	r2, r8
 8009d02:	464b      	mov	r3, r9
 8009d04:	1891      	adds	r1, r2, r2
 8009d06:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d08:	415b      	adcs	r3, r3
 8009d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d10:	4641      	mov	r1, r8
 8009d12:	eb12 0a01 	adds.w	sl, r2, r1
 8009d16:	4649      	mov	r1, r9
 8009d18:	eb43 0b01 	adc.w	fp, r3, r1
 8009d1c:	f04f 0200 	mov.w	r2, #0
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d30:	4692      	mov	sl, r2
 8009d32:	469b      	mov	fp, r3
 8009d34:	4643      	mov	r3, r8
 8009d36:	eb1a 0303 	adds.w	r3, sl, r3
 8009d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d3e:	464b      	mov	r3, r9
 8009d40:	eb4b 0303 	adc.w	r3, fp, r3
 8009d44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	18db      	adds	r3, r3, r3
 8009d60:	643b      	str	r3, [r7, #64]	; 0x40
 8009d62:	4613      	mov	r3, r2
 8009d64:	eb42 0303 	adc.w	r3, r2, r3
 8009d68:	647b      	str	r3, [r7, #68]	; 0x44
 8009d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009d72:	f7f6 ff39 	bl	8000be8 <__aeabi_uldivmod>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4b3b      	ldr	r3, [pc, #236]	; (8009e6c <UART_SetConfig+0x2d4>)
 8009d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	2264      	movs	r2, #100	; 0x64
 8009d86:	fb02 f303 	mul.w	r3, r2, r3
 8009d8a:	1acb      	subs	r3, r1, r3
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d92:	4b36      	ldr	r3, [pc, #216]	; (8009e6c <UART_SetConfig+0x2d4>)
 8009d94:	fba3 2302 	umull	r2, r3, r3, r2
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009da0:	441c      	add	r4, r3
 8009da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009db0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009db4:	4642      	mov	r2, r8
 8009db6:	464b      	mov	r3, r9
 8009db8:	1891      	adds	r1, r2, r2
 8009dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8009dbc:	415b      	adcs	r3, r3
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dc4:	4641      	mov	r1, r8
 8009dc6:	1851      	adds	r1, r2, r1
 8009dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8009dca:	4649      	mov	r1, r9
 8009dcc:	414b      	adcs	r3, r1
 8009dce:	637b      	str	r3, [r7, #52]	; 0x34
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ddc:	4659      	mov	r1, fp
 8009dde:	00cb      	lsls	r3, r1, #3
 8009de0:	4651      	mov	r1, sl
 8009de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009de6:	4651      	mov	r1, sl
 8009de8:	00ca      	lsls	r2, r1, #3
 8009dea:	4610      	mov	r0, r2
 8009dec:	4619      	mov	r1, r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	4642      	mov	r2, r8
 8009df2:	189b      	adds	r3, r3, r2
 8009df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009df8:	464b      	mov	r3, r9
 8009dfa:	460a      	mov	r2, r1
 8009dfc:	eb42 0303 	adc.w	r3, r2, r3
 8009e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e18:	460b      	mov	r3, r1
 8009e1a:	18db      	adds	r3, r3, r3
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e1e:	4613      	mov	r3, r2
 8009e20:	eb42 0303 	adc.w	r3, r2, r3
 8009e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e2e:	f7f6 fedb 	bl	8000be8 <__aeabi_uldivmod>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <UART_SetConfig+0x2d4>)
 8009e38:	fba3 1302 	umull	r1, r3, r3, r2
 8009e3c:	095b      	lsrs	r3, r3, #5
 8009e3e:	2164      	movs	r1, #100	; 0x64
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	3332      	adds	r3, #50	; 0x32
 8009e4a:	4a08      	ldr	r2, [pc, #32]	; (8009e6c <UART_SetConfig+0x2d4>)
 8009e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e50:	095b      	lsrs	r3, r3, #5
 8009e52:	f003 0207 	and.w	r2, r3, #7
 8009e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4422      	add	r2, r4
 8009e5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e60:	e106      	b.n	800a070 <UART_SetConfig+0x4d8>
 8009e62:	bf00      	nop
 8009e64:	40011000 	.word	0x40011000
 8009e68:	40011400 	.word	0x40011400
 8009e6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009e82:	4642      	mov	r2, r8
 8009e84:	464b      	mov	r3, r9
 8009e86:	1891      	adds	r1, r2, r2
 8009e88:	6239      	str	r1, [r7, #32]
 8009e8a:	415b      	adcs	r3, r3
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e92:	4641      	mov	r1, r8
 8009e94:	1854      	adds	r4, r2, r1
 8009e96:	4649      	mov	r1, r9
 8009e98:	eb43 0501 	adc.w	r5, r3, r1
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	f04f 0300 	mov.w	r3, #0
 8009ea4:	00eb      	lsls	r3, r5, #3
 8009ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eaa:	00e2      	lsls	r2, r4, #3
 8009eac:	4614      	mov	r4, r2
 8009eae:	461d      	mov	r5, r3
 8009eb0:	4643      	mov	r3, r8
 8009eb2:	18e3      	adds	r3, r4, r3
 8009eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009eb8:	464b      	mov	r3, r9
 8009eba:	eb45 0303 	adc.w	r3, r5, r3
 8009ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ece:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ed2:	f04f 0200 	mov.w	r2, #0
 8009ed6:	f04f 0300 	mov.w	r3, #0
 8009eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009ede:	4629      	mov	r1, r5
 8009ee0:	008b      	lsls	r3, r1, #2
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ee8:	4621      	mov	r1, r4
 8009eea:	008a      	lsls	r2, r1, #2
 8009eec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ef0:	f7f6 fe7a 	bl	8000be8 <__aeabi_uldivmod>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4b60      	ldr	r3, [pc, #384]	; (800a07c <UART_SetConfig+0x4e4>)
 8009efa:	fba3 2302 	umull	r2, r3, r3, r2
 8009efe:	095b      	lsrs	r3, r3, #5
 8009f00:	011c      	lsls	r4, r3, #4
 8009f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f14:	4642      	mov	r2, r8
 8009f16:	464b      	mov	r3, r9
 8009f18:	1891      	adds	r1, r2, r2
 8009f1a:	61b9      	str	r1, [r7, #24]
 8009f1c:	415b      	adcs	r3, r3
 8009f1e:	61fb      	str	r3, [r7, #28]
 8009f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f24:	4641      	mov	r1, r8
 8009f26:	1851      	adds	r1, r2, r1
 8009f28:	6139      	str	r1, [r7, #16]
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	414b      	adcs	r3, r1
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	00cb      	lsls	r3, r1, #3
 8009f40:	4651      	mov	r1, sl
 8009f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f46:	4651      	mov	r1, sl
 8009f48:	00ca      	lsls	r2, r1, #3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4642      	mov	r2, r8
 8009f52:	189b      	adds	r3, r3, r2
 8009f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f58:	464b      	mov	r3, r9
 8009f5a:	460a      	mov	r2, r1
 8009f5c:	eb42 0303 	adc.w	r3, r2, r3
 8009f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	f04f 0300 	mov.w	r3, #0
 8009f78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	008b      	lsls	r3, r1, #2
 8009f80:	4641      	mov	r1, r8
 8009f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f86:	4641      	mov	r1, r8
 8009f88:	008a      	lsls	r2, r1, #2
 8009f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f8e:	f7f6 fe2b 	bl	8000be8 <__aeabi_uldivmod>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	4b38      	ldr	r3, [pc, #224]	; (800a07c <UART_SetConfig+0x4e4>)
 8009f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8009f9e:	095b      	lsrs	r3, r3, #5
 8009fa0:	2264      	movs	r2, #100	; 0x64
 8009fa2:	fb02 f303 	mul.w	r3, r2, r3
 8009fa6:	1acb      	subs	r3, r1, r3
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	3332      	adds	r3, #50	; 0x32
 8009fac:	4a33      	ldr	r2, [pc, #204]	; (800a07c <UART_SetConfig+0x4e4>)
 8009fae:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb2:	095b      	lsrs	r3, r3, #5
 8009fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fb8:	441c      	add	r4, r3
 8009fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	673b      	str	r3, [r7, #112]	; 0x70
 8009fc2:	677a      	str	r2, [r7, #116]	; 0x74
 8009fc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009fc8:	4642      	mov	r2, r8
 8009fca:	464b      	mov	r3, r9
 8009fcc:	1891      	adds	r1, r2, r2
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	415b      	adcs	r3, r3
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fd8:	4641      	mov	r1, r8
 8009fda:	1851      	adds	r1, r2, r1
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	4649      	mov	r1, r9
 8009fe0:	414b      	adcs	r3, r1
 8009fe2:	607b      	str	r3, [r7, #4]
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	00cb      	lsls	r3, r1, #3
 8009ff4:	4651      	mov	r1, sl
 8009ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ffa:	4651      	mov	r1, sl
 8009ffc:	00ca      	lsls	r2, r1, #3
 8009ffe:	4610      	mov	r0, r2
 800a000:	4619      	mov	r1, r3
 800a002:	4603      	mov	r3, r0
 800a004:	4642      	mov	r2, r8
 800a006:	189b      	adds	r3, r3, r2
 800a008:	66bb      	str	r3, [r7, #104]	; 0x68
 800a00a:	464b      	mov	r3, r9
 800a00c:	460a      	mov	r2, r1
 800a00e:	eb42 0303 	adc.w	r3, r2, r3
 800a012:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	663b      	str	r3, [r7, #96]	; 0x60
 800a01e:	667a      	str	r2, [r7, #100]	; 0x64
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a02c:	4649      	mov	r1, r9
 800a02e:	008b      	lsls	r3, r1, #2
 800a030:	4641      	mov	r1, r8
 800a032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a036:	4641      	mov	r1, r8
 800a038:	008a      	lsls	r2, r1, #2
 800a03a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a03e:	f7f6 fdd3 	bl	8000be8 <__aeabi_uldivmod>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <UART_SetConfig+0x4e4>)
 800a048:	fba3 1302 	umull	r1, r3, r3, r2
 800a04c:	095b      	lsrs	r3, r3, #5
 800a04e:	2164      	movs	r1, #100	; 0x64
 800a050:	fb01 f303 	mul.w	r3, r1, r3
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	3332      	adds	r3, #50	; 0x32
 800a05a:	4a08      	ldr	r2, [pc, #32]	; (800a07c <UART_SetConfig+0x4e4>)
 800a05c:	fba2 2303 	umull	r2, r3, r2, r3
 800a060:	095b      	lsrs	r3, r3, #5
 800a062:	f003 020f 	and.w	r2, r3, #15
 800a066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4422      	add	r2, r4
 800a06e:	609a      	str	r2, [r3, #8]
}
 800a070:	bf00      	nop
 800a072:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a076:	46bd      	mov	sp, r7
 800a078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a07c:	51eb851f 	.word	0x51eb851f

0800a080 <sniprintf>:
 800a080:	b40c      	push	{r2, r3}
 800a082:	b530      	push	{r4, r5, lr}
 800a084:	4b17      	ldr	r3, [pc, #92]	; (800a0e4 <sniprintf+0x64>)
 800a086:	1e0c      	subs	r4, r1, #0
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	b09d      	sub	sp, #116	; 0x74
 800a08c:	da08      	bge.n	800a0a0 <sniprintf+0x20>
 800a08e:	238b      	movs	r3, #139	; 0x8b
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a096:	b01d      	add	sp, #116	; 0x74
 800a098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a09c:	b002      	add	sp, #8
 800a09e:	4770      	bx	lr
 800a0a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a0a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a0a8:	bf14      	ite	ne
 800a0aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a0ae:	4623      	moveq	r3, r4
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0b8:	9002      	str	r0, [sp, #8]
 800a0ba:	9006      	str	r0, [sp, #24]
 800a0bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a0c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a0c2:	ab21      	add	r3, sp, #132	; 0x84
 800a0c4:	a902      	add	r1, sp, #8
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	f000 facf 	bl	800a66c <_svfiprintf_r>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	bfbc      	itt	lt
 800a0d2:	238b      	movlt	r3, #139	; 0x8b
 800a0d4:	602b      	strlt	r3, [r5, #0]
 800a0d6:	2c00      	cmp	r4, #0
 800a0d8:	d0dd      	beq.n	800a096 <sniprintf+0x16>
 800a0da:	9b02      	ldr	r3, [sp, #8]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
 800a0e0:	e7d9      	b.n	800a096 <sniprintf+0x16>
 800a0e2:	bf00      	nop
 800a0e4:	20000090 	.word	0x20000090

0800a0e8 <siprintf>:
 800a0e8:	b40e      	push	{r1, r2, r3}
 800a0ea:	b500      	push	{lr}
 800a0ec:	b09c      	sub	sp, #112	; 0x70
 800a0ee:	ab1d      	add	r3, sp, #116	; 0x74
 800a0f0:	9002      	str	r0, [sp, #8]
 800a0f2:	9006      	str	r0, [sp, #24]
 800a0f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0f8:	4809      	ldr	r0, [pc, #36]	; (800a120 <siprintf+0x38>)
 800a0fa:	9107      	str	r1, [sp, #28]
 800a0fc:	9104      	str	r1, [sp, #16]
 800a0fe:	4909      	ldr	r1, [pc, #36]	; (800a124 <siprintf+0x3c>)
 800a100:	f853 2b04 	ldr.w	r2, [r3], #4
 800a104:	9105      	str	r1, [sp, #20]
 800a106:	6800      	ldr	r0, [r0, #0]
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	a902      	add	r1, sp, #8
 800a10c:	f000 faae 	bl	800a66c <_svfiprintf_r>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	b01c      	add	sp, #112	; 0x70
 800a118:	f85d eb04 	ldr.w	lr, [sp], #4
 800a11c:	b003      	add	sp, #12
 800a11e:	4770      	bx	lr
 800a120:	20000090 	.word	0x20000090
 800a124:	ffff0208 	.word	0xffff0208

0800a128 <siscanf>:
 800a128:	b40e      	push	{r1, r2, r3}
 800a12a:	b510      	push	{r4, lr}
 800a12c:	b09f      	sub	sp, #124	; 0x7c
 800a12e:	ac21      	add	r4, sp, #132	; 0x84
 800a130:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a134:	f854 2b04 	ldr.w	r2, [r4], #4
 800a138:	9201      	str	r2, [sp, #4]
 800a13a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a13e:	9004      	str	r0, [sp, #16]
 800a140:	9008      	str	r0, [sp, #32]
 800a142:	f7f6 f865 	bl	8000210 <strlen>
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <siscanf+0x50>)
 800a148:	9005      	str	r0, [sp, #20]
 800a14a:	9009      	str	r0, [sp, #36]	; 0x24
 800a14c:	930d      	str	r3, [sp, #52]	; 0x34
 800a14e:	480b      	ldr	r0, [pc, #44]	; (800a17c <siscanf+0x54>)
 800a150:	9a01      	ldr	r2, [sp, #4]
 800a152:	6800      	ldr	r0, [r0, #0]
 800a154:	9403      	str	r4, [sp, #12]
 800a156:	2300      	movs	r3, #0
 800a158:	9311      	str	r3, [sp, #68]	; 0x44
 800a15a:	9316      	str	r3, [sp, #88]	; 0x58
 800a15c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a160:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a164:	a904      	add	r1, sp, #16
 800a166:	4623      	mov	r3, r4
 800a168:	f000 fbd8 	bl	800a91c <__ssvfiscanf_r>
 800a16c:	b01f      	add	sp, #124	; 0x7c
 800a16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a172:	b003      	add	sp, #12
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	0800a1a3 	.word	0x0800a1a3
 800a17c:	20000090 	.word	0x20000090

0800a180 <__sread>:
 800a180:	b510      	push	{r4, lr}
 800a182:	460c      	mov	r4, r1
 800a184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a188:	f000 f978 	bl	800a47c <_read_r>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	bfab      	itete	ge
 800a190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a192:	89a3      	ldrhlt	r3, [r4, #12]
 800a194:	181b      	addge	r3, r3, r0
 800a196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a19a:	bfac      	ite	ge
 800a19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a19e:	81a3      	strhlt	r3, [r4, #12]
 800a1a0:	bd10      	pop	{r4, pc}

0800a1a2 <__seofread>:
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	4770      	bx	lr

0800a1a6 <__swrite>:
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	898b      	ldrh	r3, [r1, #12]
 800a1ae:	05db      	lsls	r3, r3, #23
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	d505      	bpl.n	800a1c4 <__swrite+0x1e>
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2302      	movs	r3, #2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f000 f94a 	bl	800a458 <_lseek_r>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	f000 b961 	b.w	800a4a0 <_write_r>

0800a1de <__sseek>:
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e6:	f000 f937 	bl	800a458 <_lseek_r>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	bf15      	itete	ne
 800a1f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1fa:	81a3      	strheq	r3, [r4, #12]
 800a1fc:	bf18      	it	ne
 800a1fe:	81a3      	strhne	r3, [r4, #12]
 800a200:	bd10      	pop	{r4, pc}

0800a202 <__sclose>:
 800a202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a206:	f000 b917 	b.w	800a438 <_close_r>
	...

0800a20c <std>:
 800a20c:	2300      	movs	r3, #0
 800a20e:	b510      	push	{r4, lr}
 800a210:	4604      	mov	r4, r0
 800a212:	e9c0 3300 	strd	r3, r3, [r0]
 800a216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a21a:	6083      	str	r3, [r0, #8]
 800a21c:	8181      	strh	r1, [r0, #12]
 800a21e:	6643      	str	r3, [r0, #100]	; 0x64
 800a220:	81c2      	strh	r2, [r0, #14]
 800a222:	6183      	str	r3, [r0, #24]
 800a224:	4619      	mov	r1, r3
 800a226:	2208      	movs	r2, #8
 800a228:	305c      	adds	r0, #92	; 0x5c
 800a22a:	f000 f8fd 	bl	800a428 <memset>
 800a22e:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <std+0x58>)
 800a230:	6263      	str	r3, [r4, #36]	; 0x24
 800a232:	4b0d      	ldr	r3, [pc, #52]	; (800a268 <std+0x5c>)
 800a234:	62a3      	str	r3, [r4, #40]	; 0x28
 800a236:	4b0d      	ldr	r3, [pc, #52]	; (800a26c <std+0x60>)
 800a238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a23a:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <std+0x64>)
 800a23c:	6323      	str	r3, [r4, #48]	; 0x30
 800a23e:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <std+0x68>)
 800a240:	6224      	str	r4, [r4, #32]
 800a242:	429c      	cmp	r4, r3
 800a244:	d006      	beq.n	800a254 <std+0x48>
 800a246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a24a:	4294      	cmp	r4, r2
 800a24c:	d002      	beq.n	800a254 <std+0x48>
 800a24e:	33d0      	adds	r3, #208	; 0xd0
 800a250:	429c      	cmp	r4, r3
 800a252:	d105      	bne.n	800a260 <std+0x54>
 800a254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a25c:	f000 b95c 	b.w	800a518 <__retarget_lock_init_recursive>
 800a260:	bd10      	pop	{r4, pc}
 800a262:	bf00      	nop
 800a264:	0800a181 	.word	0x0800a181
 800a268:	0800a1a7 	.word	0x0800a1a7
 800a26c:	0800a1df 	.word	0x0800a1df
 800a270:	0800a203 	.word	0x0800a203
 800a274:	20007080 	.word	0x20007080

0800a278 <stdio_exit_handler>:
 800a278:	4a02      	ldr	r2, [pc, #8]	; (800a284 <stdio_exit_handler+0xc>)
 800a27a:	4903      	ldr	r1, [pc, #12]	; (800a288 <stdio_exit_handler+0x10>)
 800a27c:	4803      	ldr	r0, [pc, #12]	; (800a28c <stdio_exit_handler+0x14>)
 800a27e:	f000 b869 	b.w	800a354 <_fwalk_sglue>
 800a282:	bf00      	nop
 800a284:	20000038 	.word	0x20000038
 800a288:	0800b711 	.word	0x0800b711
 800a28c:	20000044 	.word	0x20000044

0800a290 <cleanup_stdio>:
 800a290:	6841      	ldr	r1, [r0, #4]
 800a292:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <cleanup_stdio+0x34>)
 800a294:	4299      	cmp	r1, r3
 800a296:	b510      	push	{r4, lr}
 800a298:	4604      	mov	r4, r0
 800a29a:	d001      	beq.n	800a2a0 <cleanup_stdio+0x10>
 800a29c:	f001 fa38 	bl	800b710 <_fflush_r>
 800a2a0:	68a1      	ldr	r1, [r4, #8]
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <cleanup_stdio+0x38>)
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	d002      	beq.n	800a2ae <cleanup_stdio+0x1e>
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f001 fa31 	bl	800b710 <_fflush_r>
 800a2ae:	68e1      	ldr	r1, [r4, #12]
 800a2b0:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <cleanup_stdio+0x3c>)
 800a2b2:	4299      	cmp	r1, r3
 800a2b4:	d004      	beq.n	800a2c0 <cleanup_stdio+0x30>
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	f001 ba28 	b.w	800b710 <_fflush_r>
 800a2c0:	bd10      	pop	{r4, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20007080 	.word	0x20007080
 800a2c8:	200070e8 	.word	0x200070e8
 800a2cc:	20007150 	.word	0x20007150

0800a2d0 <global_stdio_init.part.0>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <global_stdio_init.part.0+0x30>)
 800a2d4:	4c0b      	ldr	r4, [pc, #44]	; (800a304 <global_stdio_init.part.0+0x34>)
 800a2d6:	4a0c      	ldr	r2, [pc, #48]	; (800a308 <global_stdio_init.part.0+0x38>)
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	4620      	mov	r0, r4
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2104      	movs	r1, #4
 800a2e0:	f7ff ff94 	bl	800a20c <std>
 800a2e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	2109      	movs	r1, #9
 800a2ec:	f7ff ff8e 	bl	800a20c <std>
 800a2f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2fa:	2112      	movs	r1, #18
 800a2fc:	f7ff bf86 	b.w	800a20c <std>
 800a300:	200071b8 	.word	0x200071b8
 800a304:	20007080 	.word	0x20007080
 800a308:	0800a279 	.word	0x0800a279

0800a30c <__sfp_lock_acquire>:
 800a30c:	4801      	ldr	r0, [pc, #4]	; (800a314 <__sfp_lock_acquire+0x8>)
 800a30e:	f000 b904 	b.w	800a51a <__retarget_lock_acquire_recursive>
 800a312:	bf00      	nop
 800a314:	200071c1 	.word	0x200071c1

0800a318 <__sfp_lock_release>:
 800a318:	4801      	ldr	r0, [pc, #4]	; (800a320 <__sfp_lock_release+0x8>)
 800a31a:	f000 b8ff 	b.w	800a51c <__retarget_lock_release_recursive>
 800a31e:	bf00      	nop
 800a320:	200071c1 	.word	0x200071c1

0800a324 <__sinit>:
 800a324:	b510      	push	{r4, lr}
 800a326:	4604      	mov	r4, r0
 800a328:	f7ff fff0 	bl	800a30c <__sfp_lock_acquire>
 800a32c:	6a23      	ldr	r3, [r4, #32]
 800a32e:	b11b      	cbz	r3, 800a338 <__sinit+0x14>
 800a330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a334:	f7ff bff0 	b.w	800a318 <__sfp_lock_release>
 800a338:	4b04      	ldr	r3, [pc, #16]	; (800a34c <__sinit+0x28>)
 800a33a:	6223      	str	r3, [r4, #32]
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <__sinit+0x2c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1f5      	bne.n	800a330 <__sinit+0xc>
 800a344:	f7ff ffc4 	bl	800a2d0 <global_stdio_init.part.0>
 800a348:	e7f2      	b.n	800a330 <__sinit+0xc>
 800a34a:	bf00      	nop
 800a34c:	0800a291 	.word	0x0800a291
 800a350:	200071b8 	.word	0x200071b8

0800a354 <_fwalk_sglue>:
 800a354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a358:	4607      	mov	r7, r0
 800a35a:	4688      	mov	r8, r1
 800a35c:	4614      	mov	r4, r2
 800a35e:	2600      	movs	r6, #0
 800a360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a364:	f1b9 0901 	subs.w	r9, r9, #1
 800a368:	d505      	bpl.n	800a376 <_fwalk_sglue+0x22>
 800a36a:	6824      	ldr	r4, [r4, #0]
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	d1f7      	bne.n	800a360 <_fwalk_sglue+0xc>
 800a370:	4630      	mov	r0, r6
 800a372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d907      	bls.n	800a38c <_fwalk_sglue+0x38>
 800a37c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a380:	3301      	adds	r3, #1
 800a382:	d003      	beq.n	800a38c <_fwalk_sglue+0x38>
 800a384:	4629      	mov	r1, r5
 800a386:	4638      	mov	r0, r7
 800a388:	47c0      	blx	r8
 800a38a:	4306      	orrs	r6, r0
 800a38c:	3568      	adds	r5, #104	; 0x68
 800a38e:	e7e9      	b.n	800a364 <_fwalk_sglue+0x10>

0800a390 <_vsniprintf_r>:
 800a390:	b530      	push	{r4, r5, lr}
 800a392:	4614      	mov	r4, r2
 800a394:	2c00      	cmp	r4, #0
 800a396:	b09b      	sub	sp, #108	; 0x6c
 800a398:	4605      	mov	r5, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	da05      	bge.n	800a3aa <_vsniprintf_r+0x1a>
 800a39e:	238b      	movs	r3, #139	; 0x8b
 800a3a0:	6003      	str	r3, [r0, #0]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3a6:	b01b      	add	sp, #108	; 0x6c
 800a3a8:	bd30      	pop	{r4, r5, pc}
 800a3aa:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a3ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a3b2:	bf14      	ite	ne
 800a3b4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a3b8:	4623      	moveq	r3, r4
 800a3ba:	9302      	str	r3, [sp, #8]
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3c2:	9100      	str	r1, [sp, #0]
 800a3c4:	9104      	str	r1, [sp, #16]
 800a3c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a3ca:	4669      	mov	r1, sp
 800a3cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3ce:	f000 f94d 	bl	800a66c <_svfiprintf_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	bfbc      	itt	lt
 800a3d6:	238b      	movlt	r3, #139	; 0x8b
 800a3d8:	602b      	strlt	r3, [r5, #0]
 800a3da:	2c00      	cmp	r4, #0
 800a3dc:	d0e3      	beq.n	800a3a6 <_vsniprintf_r+0x16>
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	e7df      	b.n	800a3a6 <_vsniprintf_r+0x16>
	...

0800a3e8 <vsniprintf>:
 800a3e8:	b507      	push	{r0, r1, r2, lr}
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	460a      	mov	r2, r1
 800a3f0:	4601      	mov	r1, r0
 800a3f2:	4803      	ldr	r0, [pc, #12]	; (800a400 <vsniprintf+0x18>)
 800a3f4:	6800      	ldr	r0, [r0, #0]
 800a3f6:	f7ff ffcb 	bl	800a390 <_vsniprintf_r>
 800a3fa:	b003      	add	sp, #12
 800a3fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a400:	20000090 	.word	0x20000090

0800a404 <iprintf>:
 800a404:	b40f      	push	{r0, r1, r2, r3}
 800a406:	b507      	push	{r0, r1, r2, lr}
 800a408:	4906      	ldr	r1, [pc, #24]	; (800a424 <iprintf+0x20>)
 800a40a:	ab04      	add	r3, sp, #16
 800a40c:	6808      	ldr	r0, [r1, #0]
 800a40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a412:	6881      	ldr	r1, [r0, #8]
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	f000 fc23 	bl	800ac60 <_vfiprintf_r>
 800a41a:	b003      	add	sp, #12
 800a41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a420:	b004      	add	sp, #16
 800a422:	4770      	bx	lr
 800a424:	20000090 	.word	0x20000090

0800a428 <memset>:
 800a428:	4402      	add	r2, r0
 800a42a:	4603      	mov	r3, r0
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d100      	bne.n	800a432 <memset+0xa>
 800a430:	4770      	bx	lr
 800a432:	f803 1b01 	strb.w	r1, [r3], #1
 800a436:	e7f9      	b.n	800a42c <memset+0x4>

0800a438 <_close_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d06      	ldr	r5, [pc, #24]	; (800a454 <_close_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f8 ffb5 	bl	80033b2 <_close>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_close_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_close_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	200071bc 	.word	0x200071bc

0800a458 <_lseek_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d07      	ldr	r5, [pc, #28]	; (800a478 <_lseek_r+0x20>)
 800a45c:	4604      	mov	r4, r0
 800a45e:	4608      	mov	r0, r1
 800a460:	4611      	mov	r1, r2
 800a462:	2200      	movs	r2, #0
 800a464:	602a      	str	r2, [r5, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f7f8 ffca 	bl	8003400 <_lseek>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_lseek_r+0x1e>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_lseek_r+0x1e>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200071bc 	.word	0x200071bc

0800a47c <_read_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	; (800a49c <_read_r+0x20>)
 800a480:	4604      	mov	r4, r0
 800a482:	4608      	mov	r0, r1
 800a484:	4611      	mov	r1, r2
 800a486:	2200      	movs	r2, #0
 800a488:	602a      	str	r2, [r5, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f7f8 ff58 	bl	8003340 <_read>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_read_r+0x1e>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_read_r+0x1e>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200071bc 	.word	0x200071bc

0800a4a0 <_write_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_write_r+0x20>)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f8 ff63 	bl	800337a <_write>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_write_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_write_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	200071bc 	.word	0x200071bc

0800a4c4 <__errno>:
 800a4c4:	4b01      	ldr	r3, [pc, #4]	; (800a4cc <__errno+0x8>)
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000090 	.word	0x20000090

0800a4d0 <__libc_init_array>:
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	4d0d      	ldr	r5, [pc, #52]	; (800a508 <__libc_init_array+0x38>)
 800a4d4:	4c0d      	ldr	r4, [pc, #52]	; (800a50c <__libc_init_array+0x3c>)
 800a4d6:	1b64      	subs	r4, r4, r5
 800a4d8:	10a4      	asrs	r4, r4, #2
 800a4da:	2600      	movs	r6, #0
 800a4dc:	42a6      	cmp	r6, r4
 800a4de:	d109      	bne.n	800a4f4 <__libc_init_array+0x24>
 800a4e0:	4d0b      	ldr	r5, [pc, #44]	; (800a510 <__libc_init_array+0x40>)
 800a4e2:	4c0c      	ldr	r4, [pc, #48]	; (800a514 <__libc_init_array+0x44>)
 800a4e4:	f001 fd8c 	bl	800c000 <_init>
 800a4e8:	1b64      	subs	r4, r4, r5
 800a4ea:	10a4      	asrs	r4, r4, #2
 800a4ec:	2600      	movs	r6, #0
 800a4ee:	42a6      	cmp	r6, r4
 800a4f0:	d105      	bne.n	800a4fe <__libc_init_array+0x2e>
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f8:	4798      	blx	r3
 800a4fa:	3601      	adds	r6, #1
 800a4fc:	e7ee      	b.n	800a4dc <__libc_init_array+0xc>
 800a4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a502:	4798      	blx	r3
 800a504:	3601      	adds	r6, #1
 800a506:	e7f2      	b.n	800a4ee <__libc_init_array+0x1e>
 800a508:	0800e17c 	.word	0x0800e17c
 800a50c:	0800e17c 	.word	0x0800e17c
 800a510:	0800e17c 	.word	0x0800e17c
 800a514:	0800e180 	.word	0x0800e180

0800a518 <__retarget_lock_init_recursive>:
 800a518:	4770      	bx	lr

0800a51a <__retarget_lock_acquire_recursive>:
 800a51a:	4770      	bx	lr

0800a51c <__retarget_lock_release_recursive>:
 800a51c:	4770      	bx	lr
	...

0800a520 <_free_r>:
 800a520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a522:	2900      	cmp	r1, #0
 800a524:	d044      	beq.n	800a5b0 <_free_r+0x90>
 800a526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a52a:	9001      	str	r0, [sp, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f1a1 0404 	sub.w	r4, r1, #4
 800a532:	bfb8      	it	lt
 800a534:	18e4      	addlt	r4, r4, r3
 800a536:	f001 f913 	bl	800b760 <__malloc_lock>
 800a53a:	4a1e      	ldr	r2, [pc, #120]	; (800a5b4 <_free_r+0x94>)
 800a53c:	9801      	ldr	r0, [sp, #4]
 800a53e:	6813      	ldr	r3, [r2, #0]
 800a540:	b933      	cbnz	r3, 800a550 <_free_r+0x30>
 800a542:	6063      	str	r3, [r4, #4]
 800a544:	6014      	str	r4, [r2, #0]
 800a546:	b003      	add	sp, #12
 800a548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a54c:	f001 b90e 	b.w	800b76c <__malloc_unlock>
 800a550:	42a3      	cmp	r3, r4
 800a552:	d908      	bls.n	800a566 <_free_r+0x46>
 800a554:	6825      	ldr	r5, [r4, #0]
 800a556:	1961      	adds	r1, r4, r5
 800a558:	428b      	cmp	r3, r1
 800a55a:	bf01      	itttt	eq
 800a55c:	6819      	ldreq	r1, [r3, #0]
 800a55e:	685b      	ldreq	r3, [r3, #4]
 800a560:	1949      	addeq	r1, r1, r5
 800a562:	6021      	streq	r1, [r4, #0]
 800a564:	e7ed      	b.n	800a542 <_free_r+0x22>
 800a566:	461a      	mov	r2, r3
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	b10b      	cbz	r3, 800a570 <_free_r+0x50>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d9fa      	bls.n	800a566 <_free_r+0x46>
 800a570:	6811      	ldr	r1, [r2, #0]
 800a572:	1855      	adds	r5, r2, r1
 800a574:	42a5      	cmp	r5, r4
 800a576:	d10b      	bne.n	800a590 <_free_r+0x70>
 800a578:	6824      	ldr	r4, [r4, #0]
 800a57a:	4421      	add	r1, r4
 800a57c:	1854      	adds	r4, r2, r1
 800a57e:	42a3      	cmp	r3, r4
 800a580:	6011      	str	r1, [r2, #0]
 800a582:	d1e0      	bne.n	800a546 <_free_r+0x26>
 800a584:	681c      	ldr	r4, [r3, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	6053      	str	r3, [r2, #4]
 800a58a:	440c      	add	r4, r1
 800a58c:	6014      	str	r4, [r2, #0]
 800a58e:	e7da      	b.n	800a546 <_free_r+0x26>
 800a590:	d902      	bls.n	800a598 <_free_r+0x78>
 800a592:	230c      	movs	r3, #12
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	e7d6      	b.n	800a546 <_free_r+0x26>
 800a598:	6825      	ldr	r5, [r4, #0]
 800a59a:	1961      	adds	r1, r4, r5
 800a59c:	428b      	cmp	r3, r1
 800a59e:	bf04      	itt	eq
 800a5a0:	6819      	ldreq	r1, [r3, #0]
 800a5a2:	685b      	ldreq	r3, [r3, #4]
 800a5a4:	6063      	str	r3, [r4, #4]
 800a5a6:	bf04      	itt	eq
 800a5a8:	1949      	addeq	r1, r1, r5
 800a5aa:	6021      	streq	r1, [r4, #0]
 800a5ac:	6054      	str	r4, [r2, #4]
 800a5ae:	e7ca      	b.n	800a546 <_free_r+0x26>
 800a5b0:	b003      	add	sp, #12
 800a5b2:	bd30      	pop	{r4, r5, pc}
 800a5b4:	200071c4 	.word	0x200071c4

0800a5b8 <__ssputs_r>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	688e      	ldr	r6, [r1, #8]
 800a5be:	461f      	mov	r7, r3
 800a5c0:	42be      	cmp	r6, r7
 800a5c2:	680b      	ldr	r3, [r1, #0]
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	d82c      	bhi.n	800a626 <__ssputs_r+0x6e>
 800a5cc:	898a      	ldrh	r2, [r1, #12]
 800a5ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d2:	d026      	beq.n	800a622 <__ssputs_r+0x6a>
 800a5d4:	6965      	ldr	r5, [r4, #20]
 800a5d6:	6909      	ldr	r1, [r1, #16]
 800a5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5dc:	eba3 0901 	sub.w	r9, r3, r1
 800a5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e4:	1c7b      	adds	r3, r7, #1
 800a5e6:	444b      	add	r3, r9
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	bf38      	it	cc
 800a5ee:	461d      	movcc	r5, r3
 800a5f0:	0553      	lsls	r3, r2, #21
 800a5f2:	d527      	bpl.n	800a644 <__ssputs_r+0x8c>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f000 fc6d 	bl	800aed4 <_malloc_r>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b360      	cbz	r0, 800a658 <__ssputs_r+0xa0>
 800a5fe:	6921      	ldr	r1, [r4, #16]
 800a600:	464a      	mov	r2, r9
 800a602:	f001 fb5f 	bl	800bcc4 <memcpy>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	6126      	str	r6, [r4, #16]
 800a614:	6165      	str	r5, [r4, #20]
 800a616:	444e      	add	r6, r9
 800a618:	eba5 0509 	sub.w	r5, r5, r9
 800a61c:	6026      	str	r6, [r4, #0]
 800a61e:	60a5      	str	r5, [r4, #8]
 800a620:	463e      	mov	r6, r7
 800a622:	42be      	cmp	r6, r7
 800a624:	d900      	bls.n	800a628 <__ssputs_r+0x70>
 800a626:	463e      	mov	r6, r7
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	4632      	mov	r2, r6
 800a62c:	4641      	mov	r1, r8
 800a62e:	f001 fafd 	bl	800bc2c <memmove>
 800a632:	68a3      	ldr	r3, [r4, #8]
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	60a3      	str	r3, [r4, #8]
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	4433      	add	r3, r6
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	2000      	movs	r0, #0
 800a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a644:	462a      	mov	r2, r5
 800a646:	f001 f8d1 	bl	800b7ec <_realloc_r>
 800a64a:	4606      	mov	r6, r0
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d1e0      	bne.n	800a612 <__ssputs_r+0x5a>
 800a650:	6921      	ldr	r1, [r4, #16]
 800a652:	4650      	mov	r0, sl
 800a654:	f7ff ff64 	bl	800a520 <_free_r>
 800a658:	230c      	movs	r3, #12
 800a65a:	f8ca 3000 	str.w	r3, [sl]
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a66a:	e7e9      	b.n	800a640 <__ssputs_r+0x88>

0800a66c <_svfiprintf_r>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	4698      	mov	r8, r3
 800a672:	898b      	ldrh	r3, [r1, #12]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	b09d      	sub	sp, #116	; 0x74
 800a678:	4607      	mov	r7, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	d50e      	bpl.n	800a69e <_svfiprintf_r+0x32>
 800a680:	690b      	ldr	r3, [r1, #16]
 800a682:	b963      	cbnz	r3, 800a69e <_svfiprintf_r+0x32>
 800a684:	2140      	movs	r1, #64	; 0x40
 800a686:	f000 fc25 	bl	800aed4 <_malloc_r>
 800a68a:	6028      	str	r0, [r5, #0]
 800a68c:	6128      	str	r0, [r5, #16]
 800a68e:	b920      	cbnz	r0, 800a69a <_svfiprintf_r+0x2e>
 800a690:	230c      	movs	r3, #12
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a698:	e0d0      	b.n	800a83c <_svfiprintf_r+0x1d0>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	616b      	str	r3, [r5, #20]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a2:	2320      	movs	r3, #32
 800a6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ac:	2330      	movs	r3, #48	; 0x30
 800a6ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a854 <_svfiprintf_r+0x1e8>
 800a6b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b6:	f04f 0901 	mov.w	r9, #1
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	469a      	mov	sl, r3
 800a6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c2:	b10a      	cbz	r2, 800a6c8 <_svfiprintf_r+0x5c>
 800a6c4:	2a25      	cmp	r2, #37	; 0x25
 800a6c6:	d1f9      	bne.n	800a6bc <_svfiprintf_r+0x50>
 800a6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a6cc:	d00b      	beq.n	800a6e6 <_svfiprintf_r+0x7a>
 800a6ce:	465b      	mov	r3, fp
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f7ff ff6f 	bl	800a5b8 <__ssputs_r>
 800a6da:	3001      	adds	r0, #1
 800a6dc:	f000 80a9 	beq.w	800a832 <_svfiprintf_r+0x1c6>
 800a6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e2:	445a      	add	r2, fp
 800a6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 80a1 	beq.w	800a832 <_svfiprintf_r+0x1c6>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fa:	f10a 0a01 	add.w	sl, sl, #1
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	9307      	str	r3, [sp, #28]
 800a702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a706:	931a      	str	r3, [sp, #104]	; 0x68
 800a708:	4654      	mov	r4, sl
 800a70a:	2205      	movs	r2, #5
 800a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a710:	4850      	ldr	r0, [pc, #320]	; (800a854 <_svfiprintf_r+0x1e8>)
 800a712:	f7f5 fd85 	bl	8000220 <memchr>
 800a716:	9a04      	ldr	r2, [sp, #16]
 800a718:	b9d8      	cbnz	r0, 800a752 <_svfiprintf_r+0xe6>
 800a71a:	06d0      	lsls	r0, r2, #27
 800a71c:	bf44      	itt	mi
 800a71e:	2320      	movmi	r3, #32
 800a720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a724:	0711      	lsls	r1, r2, #28
 800a726:	bf44      	itt	mi
 800a728:	232b      	movmi	r3, #43	; 0x2b
 800a72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72e:	f89a 3000 	ldrb.w	r3, [sl]
 800a732:	2b2a      	cmp	r3, #42	; 0x2a
 800a734:	d015      	beq.n	800a762 <_svfiprintf_r+0xf6>
 800a736:	9a07      	ldr	r2, [sp, #28]
 800a738:	4654      	mov	r4, sl
 800a73a:	2000      	movs	r0, #0
 800a73c:	f04f 0c0a 	mov.w	ip, #10
 800a740:	4621      	mov	r1, r4
 800a742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a746:	3b30      	subs	r3, #48	; 0x30
 800a748:	2b09      	cmp	r3, #9
 800a74a:	d94d      	bls.n	800a7e8 <_svfiprintf_r+0x17c>
 800a74c:	b1b0      	cbz	r0, 800a77c <_svfiprintf_r+0x110>
 800a74e:	9207      	str	r2, [sp, #28]
 800a750:	e014      	b.n	800a77c <_svfiprintf_r+0x110>
 800a752:	eba0 0308 	sub.w	r3, r0, r8
 800a756:	fa09 f303 	lsl.w	r3, r9, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	46a2      	mov	sl, r4
 800a760:	e7d2      	b.n	800a708 <_svfiprintf_r+0x9c>
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	1d19      	adds	r1, r3, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	9103      	str	r1, [sp, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bfbb      	ittet	lt
 800a76e:	425b      	neglt	r3, r3
 800a770:	f042 0202 	orrlt.w	r2, r2, #2
 800a774:	9307      	strge	r3, [sp, #28]
 800a776:	9307      	strlt	r3, [sp, #28]
 800a778:	bfb8      	it	lt
 800a77a:	9204      	strlt	r2, [sp, #16]
 800a77c:	7823      	ldrb	r3, [r4, #0]
 800a77e:	2b2e      	cmp	r3, #46	; 0x2e
 800a780:	d10c      	bne.n	800a79c <_svfiprintf_r+0x130>
 800a782:	7863      	ldrb	r3, [r4, #1]
 800a784:	2b2a      	cmp	r3, #42	; 0x2a
 800a786:	d134      	bne.n	800a7f2 <_svfiprintf_r+0x186>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	1d1a      	adds	r2, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9203      	str	r2, [sp, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfb8      	it	lt
 800a794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a798:	3402      	adds	r4, #2
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a864 <_svfiprintf_r+0x1f8>
 800a7a0:	7821      	ldrb	r1, [r4, #0]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	f7f5 fd3b 	bl	8000220 <memchr>
 800a7aa:	b138      	cbz	r0, 800a7bc <_svfiprintf_r+0x150>
 800a7ac:	9b04      	ldr	r3, [sp, #16]
 800a7ae:	eba0 000a 	sub.w	r0, r0, sl
 800a7b2:	2240      	movs	r2, #64	; 0x40
 800a7b4:	4082      	lsls	r2, r0
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	3401      	adds	r4, #1
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c0:	4825      	ldr	r0, [pc, #148]	; (800a858 <_svfiprintf_r+0x1ec>)
 800a7c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7c6:	2206      	movs	r2, #6
 800a7c8:	f7f5 fd2a 	bl	8000220 <memchr>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d038      	beq.n	800a842 <_svfiprintf_r+0x1d6>
 800a7d0:	4b22      	ldr	r3, [pc, #136]	; (800a85c <_svfiprintf_r+0x1f0>)
 800a7d2:	bb1b      	cbnz	r3, 800a81c <_svfiprintf_r+0x1b0>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	3307      	adds	r3, #7
 800a7d8:	f023 0307 	bic.w	r3, r3, #7
 800a7dc:	3308      	adds	r3, #8
 800a7de:	9303      	str	r3, [sp, #12]
 800a7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e2:	4433      	add	r3, r6
 800a7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e6:	e768      	b.n	800a6ba <_svfiprintf_r+0x4e>
 800a7e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	e7a6      	b.n	800a740 <_svfiprintf_r+0xd4>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	3401      	adds	r4, #1
 800a7f6:	9305      	str	r3, [sp, #20]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f04f 0c0a 	mov.w	ip, #10
 800a7fe:	4620      	mov	r0, r4
 800a800:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a804:	3a30      	subs	r2, #48	; 0x30
 800a806:	2a09      	cmp	r2, #9
 800a808:	d903      	bls.n	800a812 <_svfiprintf_r+0x1a6>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c6      	beq.n	800a79c <_svfiprintf_r+0x130>
 800a80e:	9105      	str	r1, [sp, #20]
 800a810:	e7c4      	b.n	800a79c <_svfiprintf_r+0x130>
 800a812:	fb0c 2101 	mla	r1, ip, r1, r2
 800a816:	4604      	mov	r4, r0
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f0      	b.n	800a7fe <_svfiprintf_r+0x192>
 800a81c:	ab03      	add	r3, sp, #12
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	462a      	mov	r2, r5
 800a822:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <_svfiprintf_r+0x1f4>)
 800a824:	a904      	add	r1, sp, #16
 800a826:	4638      	mov	r0, r7
 800a828:	f3af 8000 	nop.w
 800a82c:	1c42      	adds	r2, r0, #1
 800a82e:	4606      	mov	r6, r0
 800a830:	d1d6      	bne.n	800a7e0 <_svfiprintf_r+0x174>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	065b      	lsls	r3, r3, #25
 800a836:	f53f af2d 	bmi.w	800a694 <_svfiprintf_r+0x28>
 800a83a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83c:	b01d      	add	sp, #116	; 0x74
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	ab03      	add	r3, sp, #12
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462a      	mov	r2, r5
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <_svfiprintf_r+0x1f4>)
 800a84a:	a904      	add	r1, sp, #16
 800a84c:	4638      	mov	r0, r7
 800a84e:	f000 fc2f 	bl	800b0b0 <_printf_i>
 800a852:	e7eb      	b.n	800a82c <_svfiprintf_r+0x1c0>
 800a854:	0800e024 	.word	0x0800e024
 800a858:	0800e02e 	.word	0x0800e02e
 800a85c:	00000000 	.word	0x00000000
 800a860:	0800a5b9 	.word	0x0800a5b9
 800a864:	0800e02a 	.word	0x0800e02a

0800a868 <_sungetc_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	1c4b      	adds	r3, r1, #1
 800a86c:	4614      	mov	r4, r2
 800a86e:	d103      	bne.n	800a878 <_sungetc_r+0x10>
 800a870:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a874:	4628      	mov	r0, r5
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	8993      	ldrh	r3, [r2, #12]
 800a87a:	f023 0320 	bic.w	r3, r3, #32
 800a87e:	8193      	strh	r3, [r2, #12]
 800a880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a882:	6852      	ldr	r2, [r2, #4]
 800a884:	b2cd      	uxtb	r5, r1
 800a886:	b18b      	cbz	r3, 800a8ac <_sungetc_r+0x44>
 800a888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a88a:	4293      	cmp	r3, r2
 800a88c:	dd08      	ble.n	800a8a0 <_sungetc_r+0x38>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	1e5a      	subs	r2, r3, #1
 800a892:	6022      	str	r2, [r4, #0]
 800a894:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a898:	6863      	ldr	r3, [r4, #4]
 800a89a:	3301      	adds	r3, #1
 800a89c:	6063      	str	r3, [r4, #4]
 800a89e:	e7e9      	b.n	800a874 <_sungetc_r+0xc>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f000 ff69 	bl	800b778 <__submore>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d0f1      	beq.n	800a88e <_sungetc_r+0x26>
 800a8aa:	e7e1      	b.n	800a870 <_sungetc_r+0x8>
 800a8ac:	6921      	ldr	r1, [r4, #16]
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	b151      	cbz	r1, 800a8c8 <_sungetc_r+0x60>
 800a8b2:	4299      	cmp	r1, r3
 800a8b4:	d208      	bcs.n	800a8c8 <_sungetc_r+0x60>
 800a8b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a8ba:	42a9      	cmp	r1, r5
 800a8bc:	d104      	bne.n	800a8c8 <_sungetc_r+0x60>
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	3201      	adds	r2, #1
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	6062      	str	r2, [r4, #4]
 800a8c6:	e7d5      	b.n	800a874 <_sungetc_r+0xc>
 800a8c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d0:	6363      	str	r3, [r4, #52]	; 0x34
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e7dc      	b.n	800a89c <_sungetc_r+0x34>

0800a8e2 <__ssrefill_r>:
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8e8:	b169      	cbz	r1, 800a906 <__ssrefill_r+0x24>
 800a8ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	d001      	beq.n	800a8f6 <__ssrefill_r+0x14>
 800a8f2:	f7ff fe15 	bl	800a520 <_free_r>
 800a8f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8f8:	6063      	str	r3, [r4, #4]
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a8fe:	b113      	cbz	r3, 800a906 <__ssrefill_r+0x24>
 800a900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a902:	6023      	str	r3, [r4, #0]
 800a904:	bd10      	pop	{r4, pc}
 800a906:	6923      	ldr	r3, [r4, #16]
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	2300      	movs	r3, #0
 800a90c:	6063      	str	r3, [r4, #4]
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f043 0320 	orr.w	r3, r3, #32
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a91a:	e7f3      	b.n	800a904 <__ssrefill_r+0x22>

0800a91c <__ssvfiscanf_r>:
 800a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a926:	2100      	movs	r1, #0
 800a928:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a92c:	49a6      	ldr	r1, [pc, #664]	; (800abc8 <__ssvfiscanf_r+0x2ac>)
 800a92e:	91a0      	str	r1, [sp, #640]	; 0x280
 800a930:	f10d 0804 	add.w	r8, sp, #4
 800a934:	49a5      	ldr	r1, [pc, #660]	; (800abcc <__ssvfiscanf_r+0x2b0>)
 800a936:	4fa6      	ldr	r7, [pc, #664]	; (800abd0 <__ssvfiscanf_r+0x2b4>)
 800a938:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800abd4 <__ssvfiscanf_r+0x2b8>
 800a93c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a940:	4606      	mov	r6, r0
 800a942:	91a1      	str	r1, [sp, #644]	; 0x284
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	7813      	ldrb	r3, [r2, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 815a 	beq.w	800ac02 <__ssvfiscanf_r+0x2e6>
 800a94e:	5cf9      	ldrb	r1, [r7, r3]
 800a950:	f011 0108 	ands.w	r1, r1, #8
 800a954:	f102 0501 	add.w	r5, r2, #1
 800a958:	d019      	beq.n	800a98e <__ssvfiscanf_r+0x72>
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd0f      	ble.n	800a980 <__ssvfiscanf_r+0x64>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	781a      	ldrb	r2, [r3, #0]
 800a964:	5cba      	ldrb	r2, [r7, r2]
 800a966:	0712      	lsls	r2, r2, #28
 800a968:	d401      	bmi.n	800a96e <__ssvfiscanf_r+0x52>
 800a96a:	462a      	mov	r2, r5
 800a96c:	e7eb      	b.n	800a946 <__ssvfiscanf_r+0x2a>
 800a96e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a970:	3201      	adds	r2, #1
 800a972:	9245      	str	r2, [sp, #276]	; 0x114
 800a974:	6862      	ldr	r2, [r4, #4]
 800a976:	3301      	adds	r3, #1
 800a978:	3a01      	subs	r2, #1
 800a97a:	6062      	str	r2, [r4, #4]
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	e7ec      	b.n	800a95a <__ssvfiscanf_r+0x3e>
 800a980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a982:	4621      	mov	r1, r4
 800a984:	4630      	mov	r0, r6
 800a986:	4798      	blx	r3
 800a988:	2800      	cmp	r0, #0
 800a98a:	d0e9      	beq.n	800a960 <__ssvfiscanf_r+0x44>
 800a98c:	e7ed      	b.n	800a96a <__ssvfiscanf_r+0x4e>
 800a98e:	2b25      	cmp	r3, #37	; 0x25
 800a990:	d012      	beq.n	800a9b8 <__ssvfiscanf_r+0x9c>
 800a992:	469a      	mov	sl, r3
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	f340 8091 	ble.w	800aabe <__ssvfiscanf_r+0x1a2>
 800a99c:	6822      	ldr	r2, [r4, #0]
 800a99e:	7813      	ldrb	r3, [r2, #0]
 800a9a0:	4553      	cmp	r3, sl
 800a9a2:	f040 812e 	bne.w	800ac02 <__ssvfiscanf_r+0x2e6>
 800a9a6:	6863      	ldr	r3, [r4, #4]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	6063      	str	r3, [r4, #4]
 800a9ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a9ae:	3201      	adds	r2, #1
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	6022      	str	r2, [r4, #0]
 800a9b4:	9345      	str	r3, [sp, #276]	; 0x114
 800a9b6:	e7d8      	b.n	800a96a <__ssvfiscanf_r+0x4e>
 800a9b8:	9141      	str	r1, [sp, #260]	; 0x104
 800a9ba:	9143      	str	r1, [sp, #268]	; 0x10c
 800a9bc:	7853      	ldrb	r3, [r2, #1]
 800a9be:	2b2a      	cmp	r3, #42	; 0x2a
 800a9c0:	bf02      	ittt	eq
 800a9c2:	2310      	moveq	r3, #16
 800a9c4:	1c95      	addeq	r5, r2, #2
 800a9c6:	9341      	streq	r3, [sp, #260]	; 0x104
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	46aa      	mov	sl, r5
 800a9cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a9d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a9d4:	2b09      	cmp	r3, #9
 800a9d6:	d91c      	bls.n	800aa12 <__ssvfiscanf_r+0xf6>
 800a9d8:	487e      	ldr	r0, [pc, #504]	; (800abd4 <__ssvfiscanf_r+0x2b8>)
 800a9da:	2203      	movs	r2, #3
 800a9dc:	f7f5 fc20 	bl	8000220 <memchr>
 800a9e0:	b138      	cbz	r0, 800a9f2 <__ssvfiscanf_r+0xd6>
 800a9e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a9e4:	eba0 0009 	sub.w	r0, r0, r9
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	4083      	lsls	r3, r0
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	9341      	str	r3, [sp, #260]	; 0x104
 800a9f0:	4655      	mov	r5, sl
 800a9f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a9f6:	2b78      	cmp	r3, #120	; 0x78
 800a9f8:	d806      	bhi.n	800aa08 <__ssvfiscanf_r+0xec>
 800a9fa:	2b57      	cmp	r3, #87	; 0x57
 800a9fc:	d810      	bhi.n	800aa20 <__ssvfiscanf_r+0x104>
 800a9fe:	2b25      	cmp	r3, #37	; 0x25
 800aa00:	d0c7      	beq.n	800a992 <__ssvfiscanf_r+0x76>
 800aa02:	d857      	bhi.n	800aab4 <__ssvfiscanf_r+0x198>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d065      	beq.n	800aad4 <__ssvfiscanf_r+0x1b8>
 800aa08:	2303      	movs	r3, #3
 800aa0a:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa0c:	230a      	movs	r3, #10
 800aa0e:	9342      	str	r3, [sp, #264]	; 0x108
 800aa10:	e076      	b.n	800ab00 <__ssvfiscanf_r+0x1e4>
 800aa12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa14:	fb02 1103 	mla	r1, r2, r3, r1
 800aa18:	3930      	subs	r1, #48	; 0x30
 800aa1a:	9143      	str	r1, [sp, #268]	; 0x10c
 800aa1c:	4655      	mov	r5, sl
 800aa1e:	e7d4      	b.n	800a9ca <__ssvfiscanf_r+0xae>
 800aa20:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800aa24:	2a20      	cmp	r2, #32
 800aa26:	d8ef      	bhi.n	800aa08 <__ssvfiscanf_r+0xec>
 800aa28:	a101      	add	r1, pc, #4	; (adr r1, 800aa30 <__ssvfiscanf_r+0x114>)
 800aa2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800aae3 	.word	0x0800aae3
 800aa34:	0800aa09 	.word	0x0800aa09
 800aa38:	0800aa09 	.word	0x0800aa09
 800aa3c:	0800ab41 	.word	0x0800ab41
 800aa40:	0800aa09 	.word	0x0800aa09
 800aa44:	0800aa09 	.word	0x0800aa09
 800aa48:	0800aa09 	.word	0x0800aa09
 800aa4c:	0800aa09 	.word	0x0800aa09
 800aa50:	0800aa09 	.word	0x0800aa09
 800aa54:	0800aa09 	.word	0x0800aa09
 800aa58:	0800aa09 	.word	0x0800aa09
 800aa5c:	0800ab57 	.word	0x0800ab57
 800aa60:	0800ab3d 	.word	0x0800ab3d
 800aa64:	0800aabb 	.word	0x0800aabb
 800aa68:	0800aabb 	.word	0x0800aabb
 800aa6c:	0800aabb 	.word	0x0800aabb
 800aa70:	0800aa09 	.word	0x0800aa09
 800aa74:	0800aaf9 	.word	0x0800aaf9
 800aa78:	0800aa09 	.word	0x0800aa09
 800aa7c:	0800aa09 	.word	0x0800aa09
 800aa80:	0800aa09 	.word	0x0800aa09
 800aa84:	0800aa09 	.word	0x0800aa09
 800aa88:	0800ab67 	.word	0x0800ab67
 800aa8c:	0800ab35 	.word	0x0800ab35
 800aa90:	0800aadb 	.word	0x0800aadb
 800aa94:	0800aa09 	.word	0x0800aa09
 800aa98:	0800aa09 	.word	0x0800aa09
 800aa9c:	0800ab63 	.word	0x0800ab63
 800aaa0:	0800aa09 	.word	0x0800aa09
 800aaa4:	0800ab3d 	.word	0x0800ab3d
 800aaa8:	0800aa09 	.word	0x0800aa09
 800aaac:	0800aa09 	.word	0x0800aa09
 800aab0:	0800aae3 	.word	0x0800aae3
 800aab4:	3b45      	subs	r3, #69	; 0x45
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d8a6      	bhi.n	800aa08 <__ssvfiscanf_r+0xec>
 800aaba:	2305      	movs	r3, #5
 800aabc:	e01f      	b.n	800aafe <__ssvfiscanf_r+0x1e2>
 800aabe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aac0:	4621      	mov	r1, r4
 800aac2:	4630      	mov	r0, r6
 800aac4:	4798      	blx	r3
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f af68 	beq.w	800a99c <__ssvfiscanf_r+0x80>
 800aacc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aace:	2800      	cmp	r0, #0
 800aad0:	f040 808d 	bne.w	800abee <__ssvfiscanf_r+0x2d2>
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad8:	e08f      	b.n	800abfa <__ssvfiscanf_r+0x2de>
 800aada:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aadc:	f042 0220 	orr.w	r2, r2, #32
 800aae0:	9241      	str	r2, [sp, #260]	; 0x104
 800aae2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aae8:	9241      	str	r2, [sp, #260]	; 0x104
 800aaea:	2210      	movs	r2, #16
 800aaec:	2b6f      	cmp	r3, #111	; 0x6f
 800aaee:	9242      	str	r2, [sp, #264]	; 0x108
 800aaf0:	bf34      	ite	cc
 800aaf2:	2303      	movcc	r3, #3
 800aaf4:	2304      	movcs	r3, #4
 800aaf6:	e002      	b.n	800aafe <__ssvfiscanf_r+0x1e2>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9342      	str	r3, [sp, #264]	; 0x108
 800aafc:	2303      	movs	r3, #3
 800aafe:	9347      	str	r3, [sp, #284]	; 0x11c
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	dd3d      	ble.n	800ab82 <__ssvfiscanf_r+0x266>
 800ab06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab08:	0659      	lsls	r1, r3, #25
 800ab0a:	d404      	bmi.n	800ab16 <__ssvfiscanf_r+0x1fa>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	781a      	ldrb	r2, [r3, #0]
 800ab10:	5cba      	ldrb	r2, [r7, r2]
 800ab12:	0712      	lsls	r2, r2, #28
 800ab14:	d43c      	bmi.n	800ab90 <__ssvfiscanf_r+0x274>
 800ab16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	dc4b      	bgt.n	800abb4 <__ssvfiscanf_r+0x298>
 800ab1c:	466b      	mov	r3, sp
 800ab1e:	4622      	mov	r2, r4
 800ab20:	a941      	add	r1, sp, #260	; 0x104
 800ab22:	4630      	mov	r0, r6
 800ab24:	f000 fbe6 	bl	800b2f4 <_scanf_chars>
 800ab28:	2801      	cmp	r0, #1
 800ab2a:	d06a      	beq.n	800ac02 <__ssvfiscanf_r+0x2e6>
 800ab2c:	2802      	cmp	r0, #2
 800ab2e:	f47f af1c 	bne.w	800a96a <__ssvfiscanf_r+0x4e>
 800ab32:	e7cb      	b.n	800aacc <__ssvfiscanf_r+0x1b0>
 800ab34:	2308      	movs	r3, #8
 800ab36:	9342      	str	r3, [sp, #264]	; 0x108
 800ab38:	2304      	movs	r3, #4
 800ab3a:	e7e0      	b.n	800aafe <__ssvfiscanf_r+0x1e2>
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	e7d5      	b.n	800aaec <__ssvfiscanf_r+0x1d0>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4640      	mov	r0, r8
 800ab44:	f000 fd24 	bl	800b590 <__sccl>
 800ab48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab4e:	9341      	str	r3, [sp, #260]	; 0x104
 800ab50:	4605      	mov	r5, r0
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7d3      	b.n	800aafe <__ssvfiscanf_r+0x1e2>
 800ab56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5c:	9341      	str	r3, [sp, #260]	; 0x104
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e7cd      	b.n	800aafe <__ssvfiscanf_r+0x1e2>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e7cb      	b.n	800aafe <__ssvfiscanf_r+0x1e2>
 800ab66:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ab68:	06c3      	lsls	r3, r0, #27
 800ab6a:	f53f aefe 	bmi.w	800a96a <__ssvfiscanf_r+0x4e>
 800ab6e:	9b00      	ldr	r3, [sp, #0]
 800ab70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab72:	1d19      	adds	r1, r3, #4
 800ab74:	9100      	str	r1, [sp, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	07c0      	lsls	r0, r0, #31
 800ab7a:	bf4c      	ite	mi
 800ab7c:	801a      	strhmi	r2, [r3, #0]
 800ab7e:	601a      	strpl	r2, [r3, #0]
 800ab80:	e6f3      	b.n	800a96a <__ssvfiscanf_r+0x4e>
 800ab82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab84:	4621      	mov	r1, r4
 800ab86:	4630      	mov	r0, r6
 800ab88:	4798      	blx	r3
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d0bb      	beq.n	800ab06 <__ssvfiscanf_r+0x1ea>
 800ab8e:	e79d      	b.n	800aacc <__ssvfiscanf_r+0x1b0>
 800ab90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab92:	3201      	adds	r2, #1
 800ab94:	9245      	str	r2, [sp, #276]	; 0x114
 800ab96:	6862      	ldr	r2, [r4, #4]
 800ab98:	3a01      	subs	r2, #1
 800ab9a:	2a00      	cmp	r2, #0
 800ab9c:	6062      	str	r2, [r4, #4]
 800ab9e:	dd02      	ble.n	800aba6 <__ssvfiscanf_r+0x28a>
 800aba0:	3301      	adds	r3, #1
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	e7b2      	b.n	800ab0c <__ssvfiscanf_r+0x1f0>
 800aba6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aba8:	4621      	mov	r1, r4
 800abaa:	4630      	mov	r0, r6
 800abac:	4798      	blx	r3
 800abae:	2800      	cmp	r0, #0
 800abb0:	d0ac      	beq.n	800ab0c <__ssvfiscanf_r+0x1f0>
 800abb2:	e78b      	b.n	800aacc <__ssvfiscanf_r+0x1b0>
 800abb4:	2b04      	cmp	r3, #4
 800abb6:	dc0f      	bgt.n	800abd8 <__ssvfiscanf_r+0x2bc>
 800abb8:	466b      	mov	r3, sp
 800abba:	4622      	mov	r2, r4
 800abbc:	a941      	add	r1, sp, #260	; 0x104
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 fbf2 	bl	800b3a8 <_scanf_i>
 800abc4:	e7b0      	b.n	800ab28 <__ssvfiscanf_r+0x20c>
 800abc6:	bf00      	nop
 800abc8:	0800a869 	.word	0x0800a869
 800abcc:	0800a8e3 	.word	0x0800a8e3
 800abd0:	0800e073 	.word	0x0800e073
 800abd4:	0800e02a 	.word	0x0800e02a
 800abd8:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <__ssvfiscanf_r+0x2ec>)
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f43f aec5 	beq.w	800a96a <__ssvfiscanf_r+0x4e>
 800abe0:	466b      	mov	r3, sp
 800abe2:	4622      	mov	r2, r4
 800abe4:	a941      	add	r1, sp, #260	; 0x104
 800abe6:	4630      	mov	r0, r6
 800abe8:	f3af 8000 	nop.w
 800abec:	e79c      	b.n	800ab28 <__ssvfiscanf_r+0x20c>
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abf4:	bf18      	it	ne
 800abf6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800abfa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800abfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac02:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ac04:	e7f9      	b.n	800abfa <__ssvfiscanf_r+0x2de>
 800ac06:	bf00      	nop
 800ac08:	00000000 	.word	0x00000000

0800ac0c <__sfputc_r>:
 800ac0c:	6893      	ldr	r3, [r2, #8]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	b410      	push	{r4}
 800ac14:	6093      	str	r3, [r2, #8]
 800ac16:	da08      	bge.n	800ac2a <__sfputc_r+0x1e>
 800ac18:	6994      	ldr	r4, [r2, #24]
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	db01      	blt.n	800ac22 <__sfputc_r+0x16>
 800ac1e:	290a      	cmp	r1, #10
 800ac20:	d103      	bne.n	800ac2a <__sfputc_r+0x1e>
 800ac22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac26:	f000 bf09 	b.w	800ba3c <__swbuf_r>
 800ac2a:	6813      	ldr	r3, [r2, #0]
 800ac2c:	1c58      	adds	r0, r3, #1
 800ac2e:	6010      	str	r0, [r2, #0]
 800ac30:	7019      	strb	r1, [r3, #0]
 800ac32:	4608      	mov	r0, r1
 800ac34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <__sfputs_r>:
 800ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	4614      	mov	r4, r2
 800ac42:	18d5      	adds	r5, r2, r3
 800ac44:	42ac      	cmp	r4, r5
 800ac46:	d101      	bne.n	800ac4c <__sfputs_r+0x12>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e007      	b.n	800ac5c <__sfputs_r+0x22>
 800ac4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac50:	463a      	mov	r2, r7
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff ffda 	bl	800ac0c <__sfputc_r>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d1f3      	bne.n	800ac44 <__sfputs_r+0xa>
 800ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac60 <_vfiprintf_r>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	460d      	mov	r5, r1
 800ac66:	b09d      	sub	sp, #116	; 0x74
 800ac68:	4614      	mov	r4, r2
 800ac6a:	4698      	mov	r8, r3
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	b118      	cbz	r0, 800ac78 <_vfiprintf_r+0x18>
 800ac70:	6a03      	ldr	r3, [r0, #32]
 800ac72:	b90b      	cbnz	r3, 800ac78 <_vfiprintf_r+0x18>
 800ac74:	f7ff fb56 	bl	800a324 <__sinit>
 800ac78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac7a:	07d9      	lsls	r1, r3, #31
 800ac7c:	d405      	bmi.n	800ac8a <_vfiprintf_r+0x2a>
 800ac7e:	89ab      	ldrh	r3, [r5, #12]
 800ac80:	059a      	lsls	r2, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_vfiprintf_r+0x2a>
 800ac84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac86:	f7ff fc48 	bl	800a51a <__retarget_lock_acquire_recursive>
 800ac8a:	89ab      	ldrh	r3, [r5, #12]
 800ac8c:	071b      	lsls	r3, r3, #28
 800ac8e:	d501      	bpl.n	800ac94 <_vfiprintf_r+0x34>
 800ac90:	692b      	ldr	r3, [r5, #16]
 800ac92:	b99b      	cbnz	r3, 800acbc <_vfiprintf_r+0x5c>
 800ac94:	4629      	mov	r1, r5
 800ac96:	4630      	mov	r0, r6
 800ac98:	f000 ff0e 	bl	800bab8 <__swsetup_r>
 800ac9c:	b170      	cbz	r0, 800acbc <_vfiprintf_r+0x5c>
 800ac9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca0:	07dc      	lsls	r4, r3, #31
 800aca2:	d504      	bpl.n	800acae <_vfiprintf_r+0x4e>
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aca8:	b01d      	add	sp, #116	; 0x74
 800acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acae:	89ab      	ldrh	r3, [r5, #12]
 800acb0:	0598      	lsls	r0, r3, #22
 800acb2:	d4f7      	bmi.n	800aca4 <_vfiprintf_r+0x44>
 800acb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acb6:	f7ff fc31 	bl	800a51c <__retarget_lock_release_recursive>
 800acba:	e7f3      	b.n	800aca4 <_vfiprintf_r+0x44>
 800acbc:	2300      	movs	r3, #0
 800acbe:	9309      	str	r3, [sp, #36]	; 0x24
 800acc0:	2320      	movs	r3, #32
 800acc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800acca:	2330      	movs	r3, #48	; 0x30
 800accc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae80 <_vfiprintf_r+0x220>
 800acd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acd4:	f04f 0901 	mov.w	r9, #1
 800acd8:	4623      	mov	r3, r4
 800acda:	469a      	mov	sl, r3
 800acdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace0:	b10a      	cbz	r2, 800ace6 <_vfiprintf_r+0x86>
 800ace2:	2a25      	cmp	r2, #37	; 0x25
 800ace4:	d1f9      	bne.n	800acda <_vfiprintf_r+0x7a>
 800ace6:	ebba 0b04 	subs.w	fp, sl, r4
 800acea:	d00b      	beq.n	800ad04 <_vfiprintf_r+0xa4>
 800acec:	465b      	mov	r3, fp
 800acee:	4622      	mov	r2, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff ffa1 	bl	800ac3a <__sfputs_r>
 800acf8:	3001      	adds	r0, #1
 800acfa:	f000 80a9 	beq.w	800ae50 <_vfiprintf_r+0x1f0>
 800acfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad00:	445a      	add	r2, fp
 800ad02:	9209      	str	r2, [sp, #36]	; 0x24
 800ad04:	f89a 3000 	ldrb.w	r3, [sl]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f000 80a1 	beq.w	800ae50 <_vfiprintf_r+0x1f0>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad18:	f10a 0a01 	add.w	sl, sl, #1
 800ad1c:	9304      	str	r3, [sp, #16]
 800ad1e:	9307      	str	r3, [sp, #28]
 800ad20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad24:	931a      	str	r3, [sp, #104]	; 0x68
 800ad26:	4654      	mov	r4, sl
 800ad28:	2205      	movs	r2, #5
 800ad2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad2e:	4854      	ldr	r0, [pc, #336]	; (800ae80 <_vfiprintf_r+0x220>)
 800ad30:	f7f5 fa76 	bl	8000220 <memchr>
 800ad34:	9a04      	ldr	r2, [sp, #16]
 800ad36:	b9d8      	cbnz	r0, 800ad70 <_vfiprintf_r+0x110>
 800ad38:	06d1      	lsls	r1, r2, #27
 800ad3a:	bf44      	itt	mi
 800ad3c:	2320      	movmi	r3, #32
 800ad3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad42:	0713      	lsls	r3, r2, #28
 800ad44:	bf44      	itt	mi
 800ad46:	232b      	movmi	r3, #43	; 0x2b
 800ad48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad50:	2b2a      	cmp	r3, #42	; 0x2a
 800ad52:	d015      	beq.n	800ad80 <_vfiprintf_r+0x120>
 800ad54:	9a07      	ldr	r2, [sp, #28]
 800ad56:	4654      	mov	r4, sl
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f04f 0c0a 	mov.w	ip, #10
 800ad5e:	4621      	mov	r1, r4
 800ad60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad64:	3b30      	subs	r3, #48	; 0x30
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d94d      	bls.n	800ae06 <_vfiprintf_r+0x1a6>
 800ad6a:	b1b0      	cbz	r0, 800ad9a <_vfiprintf_r+0x13a>
 800ad6c:	9207      	str	r2, [sp, #28]
 800ad6e:	e014      	b.n	800ad9a <_vfiprintf_r+0x13a>
 800ad70:	eba0 0308 	sub.w	r3, r0, r8
 800ad74:	fa09 f303 	lsl.w	r3, r9, r3
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	9304      	str	r3, [sp, #16]
 800ad7c:	46a2      	mov	sl, r4
 800ad7e:	e7d2      	b.n	800ad26 <_vfiprintf_r+0xc6>
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	1d19      	adds	r1, r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	9103      	str	r1, [sp, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bfbb      	ittet	lt
 800ad8c:	425b      	neglt	r3, r3
 800ad8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad92:	9307      	strge	r3, [sp, #28]
 800ad94:	9307      	strlt	r3, [sp, #28]
 800ad96:	bfb8      	it	lt
 800ad98:	9204      	strlt	r2, [sp, #16]
 800ad9a:	7823      	ldrb	r3, [r4, #0]
 800ad9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad9e:	d10c      	bne.n	800adba <_vfiprintf_r+0x15a>
 800ada0:	7863      	ldrb	r3, [r4, #1]
 800ada2:	2b2a      	cmp	r3, #42	; 0x2a
 800ada4:	d134      	bne.n	800ae10 <_vfiprintf_r+0x1b0>
 800ada6:	9b03      	ldr	r3, [sp, #12]
 800ada8:	1d1a      	adds	r2, r3, #4
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	9203      	str	r2, [sp, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bfb8      	it	lt
 800adb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800adb6:	3402      	adds	r4, #2
 800adb8:	9305      	str	r3, [sp, #20]
 800adba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae90 <_vfiprintf_r+0x230>
 800adbe:	7821      	ldrb	r1, [r4, #0]
 800adc0:	2203      	movs	r2, #3
 800adc2:	4650      	mov	r0, sl
 800adc4:	f7f5 fa2c 	bl	8000220 <memchr>
 800adc8:	b138      	cbz	r0, 800adda <_vfiprintf_r+0x17a>
 800adca:	9b04      	ldr	r3, [sp, #16]
 800adcc:	eba0 000a 	sub.w	r0, r0, sl
 800add0:	2240      	movs	r2, #64	; 0x40
 800add2:	4082      	lsls	r2, r0
 800add4:	4313      	orrs	r3, r2
 800add6:	3401      	adds	r4, #1
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adde:	4829      	ldr	r0, [pc, #164]	; (800ae84 <_vfiprintf_r+0x224>)
 800ade0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ade4:	2206      	movs	r2, #6
 800ade6:	f7f5 fa1b 	bl	8000220 <memchr>
 800adea:	2800      	cmp	r0, #0
 800adec:	d03f      	beq.n	800ae6e <_vfiprintf_r+0x20e>
 800adee:	4b26      	ldr	r3, [pc, #152]	; (800ae88 <_vfiprintf_r+0x228>)
 800adf0:	bb1b      	cbnz	r3, 800ae3a <_vfiprintf_r+0x1da>
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	3307      	adds	r3, #7
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	3308      	adds	r3, #8
 800adfc:	9303      	str	r3, [sp, #12]
 800adfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae00:	443b      	add	r3, r7
 800ae02:	9309      	str	r3, [sp, #36]	; 0x24
 800ae04:	e768      	b.n	800acd8 <_vfiprintf_r+0x78>
 800ae06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	e7a6      	b.n	800ad5e <_vfiprintf_r+0xfe>
 800ae10:	2300      	movs	r3, #0
 800ae12:	3401      	adds	r4, #1
 800ae14:	9305      	str	r3, [sp, #20]
 800ae16:	4619      	mov	r1, r3
 800ae18:	f04f 0c0a 	mov.w	ip, #10
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae22:	3a30      	subs	r2, #48	; 0x30
 800ae24:	2a09      	cmp	r2, #9
 800ae26:	d903      	bls.n	800ae30 <_vfiprintf_r+0x1d0>
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0c6      	beq.n	800adba <_vfiprintf_r+0x15a>
 800ae2c:	9105      	str	r1, [sp, #20]
 800ae2e:	e7c4      	b.n	800adba <_vfiprintf_r+0x15a>
 800ae30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae34:	4604      	mov	r4, r0
 800ae36:	2301      	movs	r3, #1
 800ae38:	e7f0      	b.n	800ae1c <_vfiprintf_r+0x1bc>
 800ae3a:	ab03      	add	r3, sp, #12
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	462a      	mov	r2, r5
 800ae40:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <_vfiprintf_r+0x22c>)
 800ae42:	a904      	add	r1, sp, #16
 800ae44:	4630      	mov	r0, r6
 800ae46:	f3af 8000 	nop.w
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	1c78      	adds	r0, r7, #1
 800ae4e:	d1d6      	bne.n	800adfe <_vfiprintf_r+0x19e>
 800ae50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae52:	07d9      	lsls	r1, r3, #31
 800ae54:	d405      	bmi.n	800ae62 <_vfiprintf_r+0x202>
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	059a      	lsls	r2, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_vfiprintf_r+0x202>
 800ae5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae5e:	f7ff fb5d 	bl	800a51c <__retarget_lock_release_recursive>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	065b      	lsls	r3, r3, #25
 800ae66:	f53f af1d 	bmi.w	800aca4 <_vfiprintf_r+0x44>
 800ae6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae6c:	e71c      	b.n	800aca8 <_vfiprintf_r+0x48>
 800ae6e:	ab03      	add	r3, sp, #12
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	462a      	mov	r2, r5
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <_vfiprintf_r+0x22c>)
 800ae76:	a904      	add	r1, sp, #16
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f919 	bl	800b0b0 <_printf_i>
 800ae7e:	e7e4      	b.n	800ae4a <_vfiprintf_r+0x1ea>
 800ae80:	0800e024 	.word	0x0800e024
 800ae84:	0800e02e 	.word	0x0800e02e
 800ae88:	00000000 	.word	0x00000000
 800ae8c:	0800ac3b 	.word	0x0800ac3b
 800ae90:	0800e02a 	.word	0x0800e02a

0800ae94 <sbrk_aligned>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4e0e      	ldr	r6, [pc, #56]	; (800aed0 <sbrk_aligned+0x3c>)
 800ae98:	460c      	mov	r4, r1
 800ae9a:	6831      	ldr	r1, [r6, #0]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	b911      	cbnz	r1, 800aea6 <sbrk_aligned+0x12>
 800aea0:	f000 ff00 	bl	800bca4 <_sbrk_r>
 800aea4:	6030      	str	r0, [r6, #0]
 800aea6:	4621      	mov	r1, r4
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 fefb 	bl	800bca4 <_sbrk_r>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	d00a      	beq.n	800aec8 <sbrk_aligned+0x34>
 800aeb2:	1cc4      	adds	r4, r0, #3
 800aeb4:	f024 0403 	bic.w	r4, r4, #3
 800aeb8:	42a0      	cmp	r0, r4
 800aeba:	d007      	beq.n	800aecc <sbrk_aligned+0x38>
 800aebc:	1a21      	subs	r1, r4, r0
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 fef0 	bl	800bca4 <_sbrk_r>
 800aec4:	3001      	adds	r0, #1
 800aec6:	d101      	bne.n	800aecc <sbrk_aligned+0x38>
 800aec8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aecc:	4620      	mov	r0, r4
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	200071c8 	.word	0x200071c8

0800aed4 <_malloc_r>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	1ccd      	adds	r5, r1, #3
 800aeda:	f025 0503 	bic.w	r5, r5, #3
 800aede:	3508      	adds	r5, #8
 800aee0:	2d0c      	cmp	r5, #12
 800aee2:	bf38      	it	cc
 800aee4:	250c      	movcc	r5, #12
 800aee6:	2d00      	cmp	r5, #0
 800aee8:	4607      	mov	r7, r0
 800aeea:	db01      	blt.n	800aef0 <_malloc_r+0x1c>
 800aeec:	42a9      	cmp	r1, r5
 800aeee:	d905      	bls.n	800aefc <_malloc_r+0x28>
 800aef0:	230c      	movs	r3, #12
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	2600      	movs	r6, #0
 800aef6:	4630      	mov	r0, r6
 800aef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800afd0 <_malloc_r+0xfc>
 800af00:	f000 fc2e 	bl	800b760 <__malloc_lock>
 800af04:	f8d8 3000 	ldr.w	r3, [r8]
 800af08:	461c      	mov	r4, r3
 800af0a:	bb5c      	cbnz	r4, 800af64 <_malloc_r+0x90>
 800af0c:	4629      	mov	r1, r5
 800af0e:	4638      	mov	r0, r7
 800af10:	f7ff ffc0 	bl	800ae94 <sbrk_aligned>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	4604      	mov	r4, r0
 800af18:	d155      	bne.n	800afc6 <_malloc_r+0xf2>
 800af1a:	f8d8 4000 	ldr.w	r4, [r8]
 800af1e:	4626      	mov	r6, r4
 800af20:	2e00      	cmp	r6, #0
 800af22:	d145      	bne.n	800afb0 <_malloc_r+0xdc>
 800af24:	2c00      	cmp	r4, #0
 800af26:	d048      	beq.n	800afba <_malloc_r+0xe6>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	4631      	mov	r1, r6
 800af2c:	4638      	mov	r0, r7
 800af2e:	eb04 0903 	add.w	r9, r4, r3
 800af32:	f000 feb7 	bl	800bca4 <_sbrk_r>
 800af36:	4581      	cmp	r9, r0
 800af38:	d13f      	bne.n	800afba <_malloc_r+0xe6>
 800af3a:	6821      	ldr	r1, [r4, #0]
 800af3c:	1a6d      	subs	r5, r5, r1
 800af3e:	4629      	mov	r1, r5
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff ffa7 	bl	800ae94 <sbrk_aligned>
 800af46:	3001      	adds	r0, #1
 800af48:	d037      	beq.n	800afba <_malloc_r+0xe6>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	442b      	add	r3, r5
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	f8d8 3000 	ldr.w	r3, [r8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d038      	beq.n	800afca <_malloc_r+0xf6>
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	42a2      	cmp	r2, r4
 800af5c:	d12b      	bne.n	800afb6 <_malloc_r+0xe2>
 800af5e:	2200      	movs	r2, #0
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	e00f      	b.n	800af84 <_malloc_r+0xb0>
 800af64:	6822      	ldr	r2, [r4, #0]
 800af66:	1b52      	subs	r2, r2, r5
 800af68:	d41f      	bmi.n	800afaa <_malloc_r+0xd6>
 800af6a:	2a0b      	cmp	r2, #11
 800af6c:	d917      	bls.n	800af9e <_malloc_r+0xca>
 800af6e:	1961      	adds	r1, r4, r5
 800af70:	42a3      	cmp	r3, r4
 800af72:	6025      	str	r5, [r4, #0]
 800af74:	bf18      	it	ne
 800af76:	6059      	strne	r1, [r3, #4]
 800af78:	6863      	ldr	r3, [r4, #4]
 800af7a:	bf08      	it	eq
 800af7c:	f8c8 1000 	streq.w	r1, [r8]
 800af80:	5162      	str	r2, [r4, r5]
 800af82:	604b      	str	r3, [r1, #4]
 800af84:	4638      	mov	r0, r7
 800af86:	f104 060b 	add.w	r6, r4, #11
 800af8a:	f000 fbef 	bl	800b76c <__malloc_unlock>
 800af8e:	f026 0607 	bic.w	r6, r6, #7
 800af92:	1d23      	adds	r3, r4, #4
 800af94:	1af2      	subs	r2, r6, r3
 800af96:	d0ae      	beq.n	800aef6 <_malloc_r+0x22>
 800af98:	1b9b      	subs	r3, r3, r6
 800af9a:	50a3      	str	r3, [r4, r2]
 800af9c:	e7ab      	b.n	800aef6 <_malloc_r+0x22>
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	6862      	ldr	r2, [r4, #4]
 800afa2:	d1dd      	bne.n	800af60 <_malloc_r+0x8c>
 800afa4:	f8c8 2000 	str.w	r2, [r8]
 800afa8:	e7ec      	b.n	800af84 <_malloc_r+0xb0>
 800afaa:	4623      	mov	r3, r4
 800afac:	6864      	ldr	r4, [r4, #4]
 800afae:	e7ac      	b.n	800af0a <_malloc_r+0x36>
 800afb0:	4634      	mov	r4, r6
 800afb2:	6876      	ldr	r6, [r6, #4]
 800afb4:	e7b4      	b.n	800af20 <_malloc_r+0x4c>
 800afb6:	4613      	mov	r3, r2
 800afb8:	e7cc      	b.n	800af54 <_malloc_r+0x80>
 800afba:	230c      	movs	r3, #12
 800afbc:	603b      	str	r3, [r7, #0]
 800afbe:	4638      	mov	r0, r7
 800afc0:	f000 fbd4 	bl	800b76c <__malloc_unlock>
 800afc4:	e797      	b.n	800aef6 <_malloc_r+0x22>
 800afc6:	6025      	str	r5, [r4, #0]
 800afc8:	e7dc      	b.n	800af84 <_malloc_r+0xb0>
 800afca:	605b      	str	r3, [r3, #4]
 800afcc:	deff      	udf	#255	; 0xff
 800afce:	bf00      	nop
 800afd0:	200071c4 	.word	0x200071c4

0800afd4 <_printf_common>:
 800afd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd8:	4616      	mov	r6, r2
 800afda:	4699      	mov	r9, r3
 800afdc:	688a      	ldr	r2, [r1, #8]
 800afde:	690b      	ldr	r3, [r1, #16]
 800afe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afe4:	4293      	cmp	r3, r2
 800afe6:	bfb8      	it	lt
 800afe8:	4613      	movlt	r3, r2
 800afea:	6033      	str	r3, [r6, #0]
 800afec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aff0:	4607      	mov	r7, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b10a      	cbz	r2, 800affa <_printf_common+0x26>
 800aff6:	3301      	adds	r3, #1
 800aff8:	6033      	str	r3, [r6, #0]
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	0699      	lsls	r1, r3, #26
 800affe:	bf42      	ittt	mi
 800b000:	6833      	ldrmi	r3, [r6, #0]
 800b002:	3302      	addmi	r3, #2
 800b004:	6033      	strmi	r3, [r6, #0]
 800b006:	6825      	ldr	r5, [r4, #0]
 800b008:	f015 0506 	ands.w	r5, r5, #6
 800b00c:	d106      	bne.n	800b01c <_printf_common+0x48>
 800b00e:	f104 0a19 	add.w	sl, r4, #25
 800b012:	68e3      	ldr	r3, [r4, #12]
 800b014:	6832      	ldr	r2, [r6, #0]
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	42ab      	cmp	r3, r5
 800b01a:	dc26      	bgt.n	800b06a <_printf_common+0x96>
 800b01c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b020:	1e13      	subs	r3, r2, #0
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	bf18      	it	ne
 800b026:	2301      	movne	r3, #1
 800b028:	0692      	lsls	r2, r2, #26
 800b02a:	d42b      	bmi.n	800b084 <_printf_common+0xb0>
 800b02c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b030:	4649      	mov	r1, r9
 800b032:	4638      	mov	r0, r7
 800b034:	47c0      	blx	r8
 800b036:	3001      	adds	r0, #1
 800b038:	d01e      	beq.n	800b078 <_printf_common+0xa4>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	6922      	ldr	r2, [r4, #16]
 800b03e:	f003 0306 	and.w	r3, r3, #6
 800b042:	2b04      	cmp	r3, #4
 800b044:	bf02      	ittt	eq
 800b046:	68e5      	ldreq	r5, [r4, #12]
 800b048:	6833      	ldreq	r3, [r6, #0]
 800b04a:	1aed      	subeq	r5, r5, r3
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	bf0c      	ite	eq
 800b050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b054:	2500      	movne	r5, #0
 800b056:	4293      	cmp	r3, r2
 800b058:	bfc4      	itt	gt
 800b05a:	1a9b      	subgt	r3, r3, r2
 800b05c:	18ed      	addgt	r5, r5, r3
 800b05e:	2600      	movs	r6, #0
 800b060:	341a      	adds	r4, #26
 800b062:	42b5      	cmp	r5, r6
 800b064:	d11a      	bne.n	800b09c <_printf_common+0xc8>
 800b066:	2000      	movs	r0, #0
 800b068:	e008      	b.n	800b07c <_printf_common+0xa8>
 800b06a:	2301      	movs	r3, #1
 800b06c:	4652      	mov	r2, sl
 800b06e:	4649      	mov	r1, r9
 800b070:	4638      	mov	r0, r7
 800b072:	47c0      	blx	r8
 800b074:	3001      	adds	r0, #1
 800b076:	d103      	bne.n	800b080 <_printf_common+0xac>
 800b078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b080:	3501      	adds	r5, #1
 800b082:	e7c6      	b.n	800b012 <_printf_common+0x3e>
 800b084:	18e1      	adds	r1, r4, r3
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	2030      	movs	r0, #48	; 0x30
 800b08a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b08e:	4422      	add	r2, r4
 800b090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b098:	3302      	adds	r3, #2
 800b09a:	e7c7      	b.n	800b02c <_printf_common+0x58>
 800b09c:	2301      	movs	r3, #1
 800b09e:	4622      	mov	r2, r4
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	47c0      	blx	r8
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d0e6      	beq.n	800b078 <_printf_common+0xa4>
 800b0aa:	3601      	adds	r6, #1
 800b0ac:	e7d9      	b.n	800b062 <_printf_common+0x8e>
	...

0800b0b0 <_printf_i>:
 800b0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	7e0f      	ldrb	r7, [r1, #24]
 800b0b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0b8:	2f78      	cmp	r7, #120	; 0x78
 800b0ba:	4691      	mov	r9, r2
 800b0bc:	4680      	mov	r8, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	469a      	mov	sl, r3
 800b0c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0c6:	d807      	bhi.n	800b0d8 <_printf_i+0x28>
 800b0c8:	2f62      	cmp	r7, #98	; 0x62
 800b0ca:	d80a      	bhi.n	800b0e2 <_printf_i+0x32>
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	f000 80d4 	beq.w	800b27a <_printf_i+0x1ca>
 800b0d2:	2f58      	cmp	r7, #88	; 0x58
 800b0d4:	f000 80c0 	beq.w	800b258 <_printf_i+0x1a8>
 800b0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0e0:	e03a      	b.n	800b158 <_printf_i+0xa8>
 800b0e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0e6:	2b15      	cmp	r3, #21
 800b0e8:	d8f6      	bhi.n	800b0d8 <_printf_i+0x28>
 800b0ea:	a101      	add	r1, pc, #4	; (adr r1, 800b0f0 <_printf_i+0x40>)
 800b0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0f0:	0800b149 	.word	0x0800b149
 800b0f4:	0800b15d 	.word	0x0800b15d
 800b0f8:	0800b0d9 	.word	0x0800b0d9
 800b0fc:	0800b0d9 	.word	0x0800b0d9
 800b100:	0800b0d9 	.word	0x0800b0d9
 800b104:	0800b0d9 	.word	0x0800b0d9
 800b108:	0800b15d 	.word	0x0800b15d
 800b10c:	0800b0d9 	.word	0x0800b0d9
 800b110:	0800b0d9 	.word	0x0800b0d9
 800b114:	0800b0d9 	.word	0x0800b0d9
 800b118:	0800b0d9 	.word	0x0800b0d9
 800b11c:	0800b261 	.word	0x0800b261
 800b120:	0800b189 	.word	0x0800b189
 800b124:	0800b21b 	.word	0x0800b21b
 800b128:	0800b0d9 	.word	0x0800b0d9
 800b12c:	0800b0d9 	.word	0x0800b0d9
 800b130:	0800b283 	.word	0x0800b283
 800b134:	0800b0d9 	.word	0x0800b0d9
 800b138:	0800b189 	.word	0x0800b189
 800b13c:	0800b0d9 	.word	0x0800b0d9
 800b140:	0800b0d9 	.word	0x0800b0d9
 800b144:	0800b223 	.word	0x0800b223
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	1d1a      	adds	r2, r3, #4
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	602a      	str	r2, [r5, #0]
 800b150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b158:	2301      	movs	r3, #1
 800b15a:	e09f      	b.n	800b29c <_printf_i+0x1ec>
 800b15c:	6820      	ldr	r0, [r4, #0]
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	0607      	lsls	r7, r0, #24
 800b162:	f103 0104 	add.w	r1, r3, #4
 800b166:	6029      	str	r1, [r5, #0]
 800b168:	d501      	bpl.n	800b16e <_printf_i+0xbe>
 800b16a:	681e      	ldr	r6, [r3, #0]
 800b16c:	e003      	b.n	800b176 <_printf_i+0xc6>
 800b16e:	0646      	lsls	r6, r0, #25
 800b170:	d5fb      	bpl.n	800b16a <_printf_i+0xba>
 800b172:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b176:	2e00      	cmp	r6, #0
 800b178:	da03      	bge.n	800b182 <_printf_i+0xd2>
 800b17a:	232d      	movs	r3, #45	; 0x2d
 800b17c:	4276      	negs	r6, r6
 800b17e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b182:	485a      	ldr	r0, [pc, #360]	; (800b2ec <_printf_i+0x23c>)
 800b184:	230a      	movs	r3, #10
 800b186:	e012      	b.n	800b1ae <_printf_i+0xfe>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	6820      	ldr	r0, [r4, #0]
 800b18c:	1d19      	adds	r1, r3, #4
 800b18e:	6029      	str	r1, [r5, #0]
 800b190:	0605      	lsls	r5, r0, #24
 800b192:	d501      	bpl.n	800b198 <_printf_i+0xe8>
 800b194:	681e      	ldr	r6, [r3, #0]
 800b196:	e002      	b.n	800b19e <_printf_i+0xee>
 800b198:	0641      	lsls	r1, r0, #25
 800b19a:	d5fb      	bpl.n	800b194 <_printf_i+0xe4>
 800b19c:	881e      	ldrh	r6, [r3, #0]
 800b19e:	4853      	ldr	r0, [pc, #332]	; (800b2ec <_printf_i+0x23c>)
 800b1a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b1a2:	bf0c      	ite	eq
 800b1a4:	2308      	moveq	r3, #8
 800b1a6:	230a      	movne	r3, #10
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1ae:	6865      	ldr	r5, [r4, #4]
 800b1b0:	60a5      	str	r5, [r4, #8]
 800b1b2:	2d00      	cmp	r5, #0
 800b1b4:	bfa2      	ittt	ge
 800b1b6:	6821      	ldrge	r1, [r4, #0]
 800b1b8:	f021 0104 	bicge.w	r1, r1, #4
 800b1bc:	6021      	strge	r1, [r4, #0]
 800b1be:	b90e      	cbnz	r6, 800b1c4 <_printf_i+0x114>
 800b1c0:	2d00      	cmp	r5, #0
 800b1c2:	d04b      	beq.n	800b25c <_printf_i+0x1ac>
 800b1c4:	4615      	mov	r5, r2
 800b1c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b1ce:	5dc7      	ldrb	r7, [r0, r7]
 800b1d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1d4:	4637      	mov	r7, r6
 800b1d6:	42bb      	cmp	r3, r7
 800b1d8:	460e      	mov	r6, r1
 800b1da:	d9f4      	bls.n	800b1c6 <_printf_i+0x116>
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d10b      	bne.n	800b1f8 <_printf_i+0x148>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	07de      	lsls	r6, r3, #31
 800b1e4:	d508      	bpl.n	800b1f8 <_printf_i+0x148>
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	6861      	ldr	r1, [r4, #4]
 800b1ea:	4299      	cmp	r1, r3
 800b1ec:	bfde      	ittt	le
 800b1ee:	2330      	movle	r3, #48	; 0x30
 800b1f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b1f8:	1b52      	subs	r2, r2, r5
 800b1fa:	6122      	str	r2, [r4, #16]
 800b1fc:	f8cd a000 	str.w	sl, [sp]
 800b200:	464b      	mov	r3, r9
 800b202:	aa03      	add	r2, sp, #12
 800b204:	4621      	mov	r1, r4
 800b206:	4640      	mov	r0, r8
 800b208:	f7ff fee4 	bl	800afd4 <_printf_common>
 800b20c:	3001      	adds	r0, #1
 800b20e:	d14a      	bne.n	800b2a6 <_printf_i+0x1f6>
 800b210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b214:	b004      	add	sp, #16
 800b216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	f043 0320 	orr.w	r3, r3, #32
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	4833      	ldr	r0, [pc, #204]	; (800b2f0 <_printf_i+0x240>)
 800b224:	2778      	movs	r7, #120	; 0x78
 800b226:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	6829      	ldr	r1, [r5, #0]
 800b22e:	061f      	lsls	r7, r3, #24
 800b230:	f851 6b04 	ldr.w	r6, [r1], #4
 800b234:	d402      	bmi.n	800b23c <_printf_i+0x18c>
 800b236:	065f      	lsls	r7, r3, #25
 800b238:	bf48      	it	mi
 800b23a:	b2b6      	uxthmi	r6, r6
 800b23c:	07df      	lsls	r7, r3, #31
 800b23e:	bf48      	it	mi
 800b240:	f043 0320 	orrmi.w	r3, r3, #32
 800b244:	6029      	str	r1, [r5, #0]
 800b246:	bf48      	it	mi
 800b248:	6023      	strmi	r3, [r4, #0]
 800b24a:	b91e      	cbnz	r6, 800b254 <_printf_i+0x1a4>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	f023 0320 	bic.w	r3, r3, #32
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	2310      	movs	r3, #16
 800b256:	e7a7      	b.n	800b1a8 <_printf_i+0xf8>
 800b258:	4824      	ldr	r0, [pc, #144]	; (800b2ec <_printf_i+0x23c>)
 800b25a:	e7e4      	b.n	800b226 <_printf_i+0x176>
 800b25c:	4615      	mov	r5, r2
 800b25e:	e7bd      	b.n	800b1dc <_printf_i+0x12c>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	6826      	ldr	r6, [r4, #0]
 800b264:	6961      	ldr	r1, [r4, #20]
 800b266:	1d18      	adds	r0, r3, #4
 800b268:	6028      	str	r0, [r5, #0]
 800b26a:	0635      	lsls	r5, r6, #24
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	d501      	bpl.n	800b274 <_printf_i+0x1c4>
 800b270:	6019      	str	r1, [r3, #0]
 800b272:	e002      	b.n	800b27a <_printf_i+0x1ca>
 800b274:	0670      	lsls	r0, r6, #25
 800b276:	d5fb      	bpl.n	800b270 <_printf_i+0x1c0>
 800b278:	8019      	strh	r1, [r3, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	4615      	mov	r5, r2
 800b280:	e7bc      	b.n	800b1fc <_printf_i+0x14c>
 800b282:	682b      	ldr	r3, [r5, #0]
 800b284:	1d1a      	adds	r2, r3, #4
 800b286:	602a      	str	r2, [r5, #0]
 800b288:	681d      	ldr	r5, [r3, #0]
 800b28a:	6862      	ldr	r2, [r4, #4]
 800b28c:	2100      	movs	r1, #0
 800b28e:	4628      	mov	r0, r5
 800b290:	f7f4 ffc6 	bl	8000220 <memchr>
 800b294:	b108      	cbz	r0, 800b29a <_printf_i+0x1ea>
 800b296:	1b40      	subs	r0, r0, r5
 800b298:	6060      	str	r0, [r4, #4]
 800b29a:	6863      	ldr	r3, [r4, #4]
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a4:	e7aa      	b.n	800b1fc <_printf_i+0x14c>
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	47d0      	blx	sl
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d0ad      	beq.n	800b210 <_printf_i+0x160>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	079b      	lsls	r3, r3, #30
 800b2b8:	d413      	bmi.n	800b2e2 <_printf_i+0x232>
 800b2ba:	68e0      	ldr	r0, [r4, #12]
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	bfb8      	it	lt
 800b2c2:	4618      	movlt	r0, r3
 800b2c4:	e7a6      	b.n	800b214 <_printf_i+0x164>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	47d0      	blx	sl
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d09d      	beq.n	800b210 <_printf_i+0x160>
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	9903      	ldr	r1, [sp, #12]
 800b2da:	1a5b      	subs	r3, r3, r1
 800b2dc:	42ab      	cmp	r3, r5
 800b2de:	dcf2      	bgt.n	800b2c6 <_printf_i+0x216>
 800b2e0:	e7eb      	b.n	800b2ba <_printf_i+0x20a>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	f104 0619 	add.w	r6, r4, #25
 800b2e8:	e7f5      	b.n	800b2d6 <_printf_i+0x226>
 800b2ea:	bf00      	nop
 800b2ec:	0800e035 	.word	0x0800e035
 800b2f0:	0800e046 	.word	0x0800e046

0800b2f4 <_scanf_chars>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	688a      	ldr	r2, [r1, #8]
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	b932      	cbnz	r2, 800b310 <_scanf_chars+0x1c>
 800b302:	698a      	ldr	r2, [r1, #24]
 800b304:	2a00      	cmp	r2, #0
 800b306:	bf0c      	ite	eq
 800b308:	2201      	moveq	r2, #1
 800b30a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800b30e:	608a      	str	r2, [r1, #8]
 800b310:	6822      	ldr	r2, [r4, #0]
 800b312:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b3a4 <_scanf_chars+0xb0>
 800b316:	06d1      	lsls	r1, r2, #27
 800b318:	bf5f      	itttt	pl
 800b31a:	681a      	ldrpl	r2, [r3, #0]
 800b31c:	1d11      	addpl	r1, r2, #4
 800b31e:	6019      	strpl	r1, [r3, #0]
 800b320:	6816      	ldrpl	r6, [r2, #0]
 800b322:	2700      	movs	r7, #0
 800b324:	69a0      	ldr	r0, [r4, #24]
 800b326:	b188      	cbz	r0, 800b34c <_scanf_chars+0x58>
 800b328:	2801      	cmp	r0, #1
 800b32a:	d107      	bne.n	800b33c <_scanf_chars+0x48>
 800b32c:	682a      	ldr	r2, [r5, #0]
 800b32e:	7811      	ldrb	r1, [r2, #0]
 800b330:	6962      	ldr	r2, [r4, #20]
 800b332:	5c52      	ldrb	r2, [r2, r1]
 800b334:	b952      	cbnz	r2, 800b34c <_scanf_chars+0x58>
 800b336:	2f00      	cmp	r7, #0
 800b338:	d031      	beq.n	800b39e <_scanf_chars+0xaa>
 800b33a:	e022      	b.n	800b382 <_scanf_chars+0x8e>
 800b33c:	2802      	cmp	r0, #2
 800b33e:	d120      	bne.n	800b382 <_scanf_chars+0x8e>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b348:	071b      	lsls	r3, r3, #28
 800b34a:	d41a      	bmi.n	800b382 <_scanf_chars+0x8e>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	06da      	lsls	r2, r3, #27
 800b350:	bf5e      	ittt	pl
 800b352:	682b      	ldrpl	r3, [r5, #0]
 800b354:	781b      	ldrbpl	r3, [r3, #0]
 800b356:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b35a:	682a      	ldr	r2, [r5, #0]
 800b35c:	686b      	ldr	r3, [r5, #4]
 800b35e:	3201      	adds	r2, #1
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	68a2      	ldr	r2, [r4, #8]
 800b364:	3b01      	subs	r3, #1
 800b366:	3a01      	subs	r2, #1
 800b368:	606b      	str	r3, [r5, #4]
 800b36a:	3701      	adds	r7, #1
 800b36c:	60a2      	str	r2, [r4, #8]
 800b36e:	b142      	cbz	r2, 800b382 <_scanf_chars+0x8e>
 800b370:	2b00      	cmp	r3, #0
 800b372:	dcd7      	bgt.n	800b324 <_scanf_chars+0x30>
 800b374:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b378:	4629      	mov	r1, r5
 800b37a:	4640      	mov	r0, r8
 800b37c:	4798      	blx	r3
 800b37e:	2800      	cmp	r0, #0
 800b380:	d0d0      	beq.n	800b324 <_scanf_chars+0x30>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f013 0310 	ands.w	r3, r3, #16
 800b388:	d105      	bne.n	800b396 <_scanf_chars+0xa2>
 800b38a:	68e2      	ldr	r2, [r4, #12]
 800b38c:	3201      	adds	r2, #1
 800b38e:	60e2      	str	r2, [r4, #12]
 800b390:	69a2      	ldr	r2, [r4, #24]
 800b392:	b102      	cbz	r2, 800b396 <_scanf_chars+0xa2>
 800b394:	7033      	strb	r3, [r6, #0]
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	443b      	add	r3, r7
 800b39a:	6123      	str	r3, [r4, #16]
 800b39c:	2000      	movs	r0, #0
 800b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	bf00      	nop
 800b3a4:	0800e073 	.word	0x0800e073

0800b3a8 <_scanf_i>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	4698      	mov	r8, r3
 800b3ae:	4b74      	ldr	r3, [pc, #464]	; (800b580 <_scanf_i+0x1d8>)
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	ab03      	add	r3, sp, #12
 800b3be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b3c2:	4b70      	ldr	r3, [pc, #448]	; (800b584 <_scanf_i+0x1dc>)
 800b3c4:	69a1      	ldr	r1, [r4, #24]
 800b3c6:	4a70      	ldr	r2, [pc, #448]	; (800b588 <_scanf_i+0x1e0>)
 800b3c8:	2903      	cmp	r1, #3
 800b3ca:	bf18      	it	ne
 800b3cc:	461a      	movne	r2, r3
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	9201      	str	r2, [sp, #4]
 800b3d2:	1e5a      	subs	r2, r3, #1
 800b3d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b3d8:	bf88      	it	hi
 800b3da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b3de:	4627      	mov	r7, r4
 800b3e0:	bf82      	ittt	hi
 800b3e2:	eb03 0905 	addhi.w	r9, r3, r5
 800b3e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b3ea:	60a3      	strhi	r3, [r4, #8]
 800b3ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b3f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b3f4:	bf98      	it	ls
 800b3f6:	f04f 0900 	movls.w	r9, #0
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	463d      	mov	r5, r7
 800b3fe:	f04f 0b00 	mov.w	fp, #0
 800b402:	6831      	ldr	r1, [r6, #0]
 800b404:	ab03      	add	r3, sp, #12
 800b406:	7809      	ldrb	r1, [r1, #0]
 800b408:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b40c:	2202      	movs	r2, #2
 800b40e:	f7f4 ff07 	bl	8000220 <memchr>
 800b412:	b328      	cbz	r0, 800b460 <_scanf_i+0xb8>
 800b414:	f1bb 0f01 	cmp.w	fp, #1
 800b418:	d159      	bne.n	800b4ce <_scanf_i+0x126>
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	b92a      	cbnz	r2, 800b42a <_scanf_i+0x82>
 800b41e:	6822      	ldr	r2, [r4, #0]
 800b420:	2308      	movs	r3, #8
 800b422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b426:	6063      	str	r3, [r4, #4]
 800b428:	6022      	str	r2, [r4, #0]
 800b42a:	6822      	ldr	r2, [r4, #0]
 800b42c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	68a2      	ldr	r2, [r4, #8]
 800b434:	1e51      	subs	r1, r2, #1
 800b436:	60a1      	str	r1, [r4, #8]
 800b438:	b192      	cbz	r2, 800b460 <_scanf_i+0xb8>
 800b43a:	6832      	ldr	r2, [r6, #0]
 800b43c:	1c51      	adds	r1, r2, #1
 800b43e:	6031      	str	r1, [r6, #0]
 800b440:	7812      	ldrb	r2, [r2, #0]
 800b442:	f805 2b01 	strb.w	r2, [r5], #1
 800b446:	6872      	ldr	r2, [r6, #4]
 800b448:	3a01      	subs	r2, #1
 800b44a:	2a00      	cmp	r2, #0
 800b44c:	6072      	str	r2, [r6, #4]
 800b44e:	dc07      	bgt.n	800b460 <_scanf_i+0xb8>
 800b450:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b454:	4631      	mov	r1, r6
 800b456:	4650      	mov	r0, sl
 800b458:	4790      	blx	r2
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f040 8085 	bne.w	800b56a <_scanf_i+0x1c2>
 800b460:	f10b 0b01 	add.w	fp, fp, #1
 800b464:	f1bb 0f03 	cmp.w	fp, #3
 800b468:	d1cb      	bne.n	800b402 <_scanf_i+0x5a>
 800b46a:	6863      	ldr	r3, [r4, #4]
 800b46c:	b90b      	cbnz	r3, 800b472 <_scanf_i+0xca>
 800b46e:	230a      	movs	r3, #10
 800b470:	6063      	str	r3, [r4, #4]
 800b472:	6863      	ldr	r3, [r4, #4]
 800b474:	4945      	ldr	r1, [pc, #276]	; (800b58c <_scanf_i+0x1e4>)
 800b476:	6960      	ldr	r0, [r4, #20]
 800b478:	1ac9      	subs	r1, r1, r3
 800b47a:	f000 f889 	bl	800b590 <__sccl>
 800b47e:	f04f 0b00 	mov.w	fp, #0
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	6822      	ldr	r2, [r4, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d03d      	beq.n	800b506 <_scanf_i+0x15e>
 800b48a:	6831      	ldr	r1, [r6, #0]
 800b48c:	6960      	ldr	r0, [r4, #20]
 800b48e:	f891 c000 	ldrb.w	ip, [r1]
 800b492:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b496:	2800      	cmp	r0, #0
 800b498:	d035      	beq.n	800b506 <_scanf_i+0x15e>
 800b49a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b49e:	d124      	bne.n	800b4ea <_scanf_i+0x142>
 800b4a0:	0510      	lsls	r0, r2, #20
 800b4a2:	d522      	bpl.n	800b4ea <_scanf_i+0x142>
 800b4a4:	f10b 0b01 	add.w	fp, fp, #1
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	d003      	beq.n	800b4b6 <_scanf_i+0x10e>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b4b4:	60a3      	str	r3, [r4, #8]
 800b4b6:	6873      	ldr	r3, [r6, #4]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	6073      	str	r3, [r6, #4]
 800b4be:	dd1b      	ble.n	800b4f8 <_scanf_i+0x150>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	6033      	str	r3, [r6, #0]
 800b4c6:	68a3      	ldr	r3, [r4, #8]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	60a3      	str	r3, [r4, #8]
 800b4cc:	e7d9      	b.n	800b482 <_scanf_i+0xda>
 800b4ce:	f1bb 0f02 	cmp.w	fp, #2
 800b4d2:	d1ae      	bne.n	800b432 <_scanf_i+0x8a>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b4da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b4de:	d1bf      	bne.n	800b460 <_scanf_i+0xb8>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	6063      	str	r3, [r4, #4]
 800b4e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4e8:	e7a2      	b.n	800b430 <_scanf_i+0x88>
 800b4ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b4ee:	6022      	str	r2, [r4, #0]
 800b4f0:	780b      	ldrb	r3, [r1, #0]
 800b4f2:	f805 3b01 	strb.w	r3, [r5], #1
 800b4f6:	e7de      	b.n	800b4b6 <_scanf_i+0x10e>
 800b4f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4650      	mov	r0, sl
 800b500:	4798      	blx	r3
 800b502:	2800      	cmp	r0, #0
 800b504:	d0df      	beq.n	800b4c6 <_scanf_i+0x11e>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	05d9      	lsls	r1, r3, #23
 800b50a:	d50d      	bpl.n	800b528 <_scanf_i+0x180>
 800b50c:	42bd      	cmp	r5, r7
 800b50e:	d909      	bls.n	800b524 <_scanf_i+0x17c>
 800b510:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b518:	4632      	mov	r2, r6
 800b51a:	4650      	mov	r0, sl
 800b51c:	4798      	blx	r3
 800b51e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b522:	464d      	mov	r5, r9
 800b524:	42bd      	cmp	r5, r7
 800b526:	d028      	beq.n	800b57a <_scanf_i+0x1d2>
 800b528:	6822      	ldr	r2, [r4, #0]
 800b52a:	f012 0210 	ands.w	r2, r2, #16
 800b52e:	d113      	bne.n	800b558 <_scanf_i+0x1b0>
 800b530:	702a      	strb	r2, [r5, #0]
 800b532:	6863      	ldr	r3, [r4, #4]
 800b534:	9e01      	ldr	r6, [sp, #4]
 800b536:	4639      	mov	r1, r7
 800b538:	4650      	mov	r0, sl
 800b53a:	47b0      	blx	r6
 800b53c:	f8d8 3000 	ldr.w	r3, [r8]
 800b540:	6821      	ldr	r1, [r4, #0]
 800b542:	1d1a      	adds	r2, r3, #4
 800b544:	f8c8 2000 	str.w	r2, [r8]
 800b548:	f011 0f20 	tst.w	r1, #32
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	d00f      	beq.n	800b570 <_scanf_i+0x1c8>
 800b550:	6018      	str	r0, [r3, #0]
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	60e3      	str	r3, [r4, #12]
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	1bed      	subs	r5, r5, r7
 800b55c:	445d      	add	r5, fp
 800b55e:	442b      	add	r3, r5
 800b560:	6123      	str	r3, [r4, #16]
 800b562:	2000      	movs	r0, #0
 800b564:	b007      	add	sp, #28
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	f04f 0b00 	mov.w	fp, #0
 800b56e:	e7ca      	b.n	800b506 <_scanf_i+0x15e>
 800b570:	07ca      	lsls	r2, r1, #31
 800b572:	bf4c      	ite	mi
 800b574:	8018      	strhmi	r0, [r3, #0]
 800b576:	6018      	strpl	r0, [r3, #0]
 800b578:	e7eb      	b.n	800b552 <_scanf_i+0x1aa>
 800b57a:	2001      	movs	r0, #1
 800b57c:	e7f2      	b.n	800b564 <_scanf_i+0x1bc>
 800b57e:	bf00      	nop
 800b580:	0800c518 	.word	0x0800c518
 800b584:	0800ba39 	.word	0x0800ba39
 800b588:	0800b951 	.word	0x0800b951
 800b58c:	0800e067 	.word	0x0800e067

0800b590 <__sccl>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	780b      	ldrb	r3, [r1, #0]
 800b594:	4604      	mov	r4, r0
 800b596:	2b5e      	cmp	r3, #94	; 0x5e
 800b598:	bf0b      	itete	eq
 800b59a:	784b      	ldrbeq	r3, [r1, #1]
 800b59c:	1c4a      	addne	r2, r1, #1
 800b59e:	1c8a      	addeq	r2, r1, #2
 800b5a0:	2100      	movne	r1, #0
 800b5a2:	bf08      	it	eq
 800b5a4:	2101      	moveq	r1, #1
 800b5a6:	3801      	subs	r0, #1
 800b5a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b5ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b5b0:	42a8      	cmp	r0, r5
 800b5b2:	d1fb      	bne.n	800b5ac <__sccl+0x1c>
 800b5b4:	b90b      	cbnz	r3, 800b5ba <__sccl+0x2a>
 800b5b6:	1e50      	subs	r0, r2, #1
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ba:	f081 0101 	eor.w	r1, r1, #1
 800b5be:	54e1      	strb	r1, [r4, r3]
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b5c8:	2d2d      	cmp	r5, #45	; 0x2d
 800b5ca:	d005      	beq.n	800b5d8 <__sccl+0x48>
 800b5cc:	2d5d      	cmp	r5, #93	; 0x5d
 800b5ce:	d016      	beq.n	800b5fe <__sccl+0x6e>
 800b5d0:	2d00      	cmp	r5, #0
 800b5d2:	d0f1      	beq.n	800b5b8 <__sccl+0x28>
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	e7f2      	b.n	800b5be <__sccl+0x2e>
 800b5d8:	7846      	ldrb	r6, [r0, #1]
 800b5da:	2e5d      	cmp	r6, #93	; 0x5d
 800b5dc:	d0fa      	beq.n	800b5d4 <__sccl+0x44>
 800b5de:	42b3      	cmp	r3, r6
 800b5e0:	dcf8      	bgt.n	800b5d4 <__sccl+0x44>
 800b5e2:	3002      	adds	r0, #2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	3201      	adds	r2, #1
 800b5e8:	4296      	cmp	r6, r2
 800b5ea:	54a1      	strb	r1, [r4, r2]
 800b5ec:	dcfb      	bgt.n	800b5e6 <__sccl+0x56>
 800b5ee:	1af2      	subs	r2, r6, r3
 800b5f0:	3a01      	subs	r2, #1
 800b5f2:	1c5d      	adds	r5, r3, #1
 800b5f4:	42b3      	cmp	r3, r6
 800b5f6:	bfa8      	it	ge
 800b5f8:	2200      	movge	r2, #0
 800b5fa:	18ab      	adds	r3, r5, r2
 800b5fc:	e7e1      	b.n	800b5c2 <__sccl+0x32>
 800b5fe:	4610      	mov	r0, r2
 800b600:	e7da      	b.n	800b5b8 <__sccl+0x28>
	...

0800b604 <__sflush_r>:
 800b604:	898a      	ldrh	r2, [r1, #12]
 800b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	4605      	mov	r5, r0
 800b60c:	0710      	lsls	r0, r2, #28
 800b60e:	460c      	mov	r4, r1
 800b610:	d458      	bmi.n	800b6c4 <__sflush_r+0xc0>
 800b612:	684b      	ldr	r3, [r1, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	dc05      	bgt.n	800b624 <__sflush_r+0x20>
 800b618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dc02      	bgt.n	800b624 <__sflush_r+0x20>
 800b61e:	2000      	movs	r0, #0
 800b620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b626:	2e00      	cmp	r6, #0
 800b628:	d0f9      	beq.n	800b61e <__sflush_r+0x1a>
 800b62a:	2300      	movs	r3, #0
 800b62c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b630:	682f      	ldr	r7, [r5, #0]
 800b632:	6a21      	ldr	r1, [r4, #32]
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	d032      	beq.n	800b69e <__sflush_r+0x9a>
 800b638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	075a      	lsls	r2, r3, #29
 800b63e:	d505      	bpl.n	800b64c <__sflush_r+0x48>
 800b640:	6863      	ldr	r3, [r4, #4]
 800b642:	1ac0      	subs	r0, r0, r3
 800b644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b646:	b10b      	cbz	r3, 800b64c <__sflush_r+0x48>
 800b648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b64a:	1ac0      	subs	r0, r0, r3
 800b64c:	2300      	movs	r3, #0
 800b64e:	4602      	mov	r2, r0
 800b650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b652:	6a21      	ldr	r1, [r4, #32]
 800b654:	4628      	mov	r0, r5
 800b656:	47b0      	blx	r6
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	d106      	bne.n	800b66c <__sflush_r+0x68>
 800b65e:	6829      	ldr	r1, [r5, #0]
 800b660:	291d      	cmp	r1, #29
 800b662:	d82b      	bhi.n	800b6bc <__sflush_r+0xb8>
 800b664:	4a29      	ldr	r2, [pc, #164]	; (800b70c <__sflush_r+0x108>)
 800b666:	410a      	asrs	r2, r1
 800b668:	07d6      	lsls	r6, r2, #31
 800b66a:	d427      	bmi.n	800b6bc <__sflush_r+0xb8>
 800b66c:	2200      	movs	r2, #0
 800b66e:	6062      	str	r2, [r4, #4]
 800b670:	04d9      	lsls	r1, r3, #19
 800b672:	6922      	ldr	r2, [r4, #16]
 800b674:	6022      	str	r2, [r4, #0]
 800b676:	d504      	bpl.n	800b682 <__sflush_r+0x7e>
 800b678:	1c42      	adds	r2, r0, #1
 800b67a:	d101      	bne.n	800b680 <__sflush_r+0x7c>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	b903      	cbnz	r3, 800b682 <__sflush_r+0x7e>
 800b680:	6560      	str	r0, [r4, #84]	; 0x54
 800b682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b684:	602f      	str	r7, [r5, #0]
 800b686:	2900      	cmp	r1, #0
 800b688:	d0c9      	beq.n	800b61e <__sflush_r+0x1a>
 800b68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b68e:	4299      	cmp	r1, r3
 800b690:	d002      	beq.n	800b698 <__sflush_r+0x94>
 800b692:	4628      	mov	r0, r5
 800b694:	f7fe ff44 	bl	800a520 <_free_r>
 800b698:	2000      	movs	r0, #0
 800b69a:	6360      	str	r0, [r4, #52]	; 0x34
 800b69c:	e7c0      	b.n	800b620 <__sflush_r+0x1c>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b0      	blx	r6
 800b6a4:	1c41      	adds	r1, r0, #1
 800b6a6:	d1c8      	bne.n	800b63a <__sflush_r+0x36>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d0c5      	beq.n	800b63a <__sflush_r+0x36>
 800b6ae:	2b1d      	cmp	r3, #29
 800b6b0:	d001      	beq.n	800b6b6 <__sflush_r+0xb2>
 800b6b2:	2b16      	cmp	r3, #22
 800b6b4:	d101      	bne.n	800b6ba <__sflush_r+0xb6>
 800b6b6:	602f      	str	r7, [r5, #0]
 800b6b8:	e7b1      	b.n	800b61e <__sflush_r+0x1a>
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	e7ad      	b.n	800b620 <__sflush_r+0x1c>
 800b6c4:	690f      	ldr	r7, [r1, #16]
 800b6c6:	2f00      	cmp	r7, #0
 800b6c8:	d0a9      	beq.n	800b61e <__sflush_r+0x1a>
 800b6ca:	0793      	lsls	r3, r2, #30
 800b6cc:	680e      	ldr	r6, [r1, #0]
 800b6ce:	bf08      	it	eq
 800b6d0:	694b      	ldreq	r3, [r1, #20]
 800b6d2:	600f      	str	r7, [r1, #0]
 800b6d4:	bf18      	it	ne
 800b6d6:	2300      	movne	r3, #0
 800b6d8:	eba6 0807 	sub.w	r8, r6, r7
 800b6dc:	608b      	str	r3, [r1, #8]
 800b6de:	f1b8 0f00 	cmp.w	r8, #0
 800b6e2:	dd9c      	ble.n	800b61e <__sflush_r+0x1a>
 800b6e4:	6a21      	ldr	r1, [r4, #32]
 800b6e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6e8:	4643      	mov	r3, r8
 800b6ea:	463a      	mov	r2, r7
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	47b0      	blx	r6
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	dc06      	bgt.n	800b702 <__sflush_r+0xfe>
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6fa:	81a3      	strh	r3, [r4, #12]
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b700:	e78e      	b.n	800b620 <__sflush_r+0x1c>
 800b702:	4407      	add	r7, r0
 800b704:	eba8 0800 	sub.w	r8, r8, r0
 800b708:	e7e9      	b.n	800b6de <__sflush_r+0xda>
 800b70a:	bf00      	nop
 800b70c:	dfbffffe 	.word	0xdfbffffe

0800b710 <_fflush_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	690b      	ldr	r3, [r1, #16]
 800b714:	4605      	mov	r5, r0
 800b716:	460c      	mov	r4, r1
 800b718:	b913      	cbnz	r3, 800b720 <_fflush_r+0x10>
 800b71a:	2500      	movs	r5, #0
 800b71c:	4628      	mov	r0, r5
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	b118      	cbz	r0, 800b72a <_fflush_r+0x1a>
 800b722:	6a03      	ldr	r3, [r0, #32]
 800b724:	b90b      	cbnz	r3, 800b72a <_fflush_r+0x1a>
 800b726:	f7fe fdfd 	bl	800a324 <__sinit>
 800b72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0f3      	beq.n	800b71a <_fflush_r+0xa>
 800b732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b734:	07d0      	lsls	r0, r2, #31
 800b736:	d404      	bmi.n	800b742 <_fflush_r+0x32>
 800b738:	0599      	lsls	r1, r3, #22
 800b73a:	d402      	bmi.n	800b742 <_fflush_r+0x32>
 800b73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b73e:	f7fe feec 	bl	800a51a <__retarget_lock_acquire_recursive>
 800b742:	4628      	mov	r0, r5
 800b744:	4621      	mov	r1, r4
 800b746:	f7ff ff5d 	bl	800b604 <__sflush_r>
 800b74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b74c:	07da      	lsls	r2, r3, #31
 800b74e:	4605      	mov	r5, r0
 800b750:	d4e4      	bmi.n	800b71c <_fflush_r+0xc>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	059b      	lsls	r3, r3, #22
 800b756:	d4e1      	bmi.n	800b71c <_fflush_r+0xc>
 800b758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b75a:	f7fe fedf 	bl	800a51c <__retarget_lock_release_recursive>
 800b75e:	e7dd      	b.n	800b71c <_fflush_r+0xc>

0800b760 <__malloc_lock>:
 800b760:	4801      	ldr	r0, [pc, #4]	; (800b768 <__malloc_lock+0x8>)
 800b762:	f7fe beda 	b.w	800a51a <__retarget_lock_acquire_recursive>
 800b766:	bf00      	nop
 800b768:	200071c0 	.word	0x200071c0

0800b76c <__malloc_unlock>:
 800b76c:	4801      	ldr	r0, [pc, #4]	; (800b774 <__malloc_unlock+0x8>)
 800b76e:	f7fe bed5 	b.w	800a51c <__retarget_lock_release_recursive>
 800b772:	bf00      	nop
 800b774:	200071c0 	.word	0x200071c0

0800b778 <__submore>:
 800b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77c:	460c      	mov	r4, r1
 800b77e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d11d      	bne.n	800b7c4 <__submore+0x4c>
 800b788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b78c:	f7ff fba2 	bl	800aed4 <_malloc_r>
 800b790:	b918      	cbnz	r0, 800b79a <__submore+0x22>
 800b792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b79e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800b7a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b7aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b7ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b7b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b7b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b7ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b7be:	6020      	str	r0, [r4, #0]
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e7e8      	b.n	800b796 <__submore+0x1e>
 800b7c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b7c6:	0077      	lsls	r7, r6, #1
 800b7c8:	463a      	mov	r2, r7
 800b7ca:	f000 f80f 	bl	800b7ec <_realloc_r>
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d0de      	beq.n	800b792 <__submore+0x1a>
 800b7d4:	eb00 0806 	add.w	r8, r0, r6
 800b7d8:	4601      	mov	r1, r0
 800b7da:	4632      	mov	r2, r6
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f000 fa71 	bl	800bcc4 <memcpy>
 800b7e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b7e6:	f8c4 8000 	str.w	r8, [r4]
 800b7ea:	e7e9      	b.n	800b7c0 <__submore+0x48>

0800b7ec <_realloc_r>:
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4614      	mov	r4, r2
 800b7f4:	460e      	mov	r6, r1
 800b7f6:	b921      	cbnz	r1, 800b802 <_realloc_r+0x16>
 800b7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	f7ff bb69 	b.w	800aed4 <_malloc_r>
 800b802:	b92a      	cbnz	r2, 800b810 <_realloc_r+0x24>
 800b804:	f7fe fe8c 	bl	800a520 <_free_r>
 800b808:	4625      	mov	r5, r4
 800b80a:	4628      	mov	r0, r5
 800b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b810:	f000 fa66 	bl	800bce0 <_malloc_usable_size_r>
 800b814:	4284      	cmp	r4, r0
 800b816:	4607      	mov	r7, r0
 800b818:	d802      	bhi.n	800b820 <_realloc_r+0x34>
 800b81a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b81e:	d812      	bhi.n	800b846 <_realloc_r+0x5a>
 800b820:	4621      	mov	r1, r4
 800b822:	4640      	mov	r0, r8
 800b824:	f7ff fb56 	bl	800aed4 <_malloc_r>
 800b828:	4605      	mov	r5, r0
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d0ed      	beq.n	800b80a <_realloc_r+0x1e>
 800b82e:	42bc      	cmp	r4, r7
 800b830:	4622      	mov	r2, r4
 800b832:	4631      	mov	r1, r6
 800b834:	bf28      	it	cs
 800b836:	463a      	movcs	r2, r7
 800b838:	f000 fa44 	bl	800bcc4 <memcpy>
 800b83c:	4631      	mov	r1, r6
 800b83e:	4640      	mov	r0, r8
 800b840:	f7fe fe6e 	bl	800a520 <_free_r>
 800b844:	e7e1      	b.n	800b80a <_realloc_r+0x1e>
 800b846:	4635      	mov	r5, r6
 800b848:	e7df      	b.n	800b80a <_realloc_r+0x1e>
	...

0800b84c <_strtol_l.constprop.0>:
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b852:	d001      	beq.n	800b858 <_strtol_l.constprop.0+0xc>
 800b854:	2b24      	cmp	r3, #36	; 0x24
 800b856:	d906      	bls.n	800b866 <_strtol_l.constprop.0+0x1a>
 800b858:	f7fe fe34 	bl	800a4c4 <__errno>
 800b85c:	2316      	movs	r3, #22
 800b85e:	6003      	str	r3, [r0, #0]
 800b860:	2000      	movs	r0, #0
 800b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b866:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b94c <_strtol_l.constprop.0+0x100>
 800b86a:	460d      	mov	r5, r1
 800b86c:	462e      	mov	r6, r5
 800b86e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b872:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b876:	f017 0708 	ands.w	r7, r7, #8
 800b87a:	d1f7      	bne.n	800b86c <_strtol_l.constprop.0+0x20>
 800b87c:	2c2d      	cmp	r4, #45	; 0x2d
 800b87e:	d132      	bne.n	800b8e6 <_strtol_l.constprop.0+0x9a>
 800b880:	782c      	ldrb	r4, [r5, #0]
 800b882:	2701      	movs	r7, #1
 800b884:	1cb5      	adds	r5, r6, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d05b      	beq.n	800b942 <_strtol_l.constprop.0+0xf6>
 800b88a:	2b10      	cmp	r3, #16
 800b88c:	d109      	bne.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b88e:	2c30      	cmp	r4, #48	; 0x30
 800b890:	d107      	bne.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b892:	782c      	ldrb	r4, [r5, #0]
 800b894:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b898:	2c58      	cmp	r4, #88	; 0x58
 800b89a:	d14d      	bne.n	800b938 <_strtol_l.constprop.0+0xec>
 800b89c:	786c      	ldrb	r4, [r5, #1]
 800b89e:	2310      	movs	r3, #16
 800b8a0:	3502      	adds	r5, #2
 800b8a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b8a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b8aa:	f04f 0e00 	mov.w	lr, #0
 800b8ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800b8b2:	4676      	mov	r6, lr
 800b8b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b8b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b8bc:	f1bc 0f09 	cmp.w	ip, #9
 800b8c0:	d816      	bhi.n	800b8f0 <_strtol_l.constprop.0+0xa4>
 800b8c2:	4664      	mov	r4, ip
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	dd24      	ble.n	800b912 <_strtol_l.constprop.0+0xc6>
 800b8c8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b8cc:	d008      	beq.n	800b8e0 <_strtol_l.constprop.0+0x94>
 800b8ce:	45b1      	cmp	r9, r6
 800b8d0:	d31c      	bcc.n	800b90c <_strtol_l.constprop.0+0xc0>
 800b8d2:	d101      	bne.n	800b8d8 <_strtol_l.constprop.0+0x8c>
 800b8d4:	45a2      	cmp	sl, r4
 800b8d6:	db19      	blt.n	800b90c <_strtol_l.constprop.0+0xc0>
 800b8d8:	fb06 4603 	mla	r6, r6, r3, r4
 800b8dc:	f04f 0e01 	mov.w	lr, #1
 800b8e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8e4:	e7e8      	b.n	800b8b8 <_strtol_l.constprop.0+0x6c>
 800b8e6:	2c2b      	cmp	r4, #43	; 0x2b
 800b8e8:	bf04      	itt	eq
 800b8ea:	782c      	ldrbeq	r4, [r5, #0]
 800b8ec:	1cb5      	addeq	r5, r6, #2
 800b8ee:	e7ca      	b.n	800b886 <_strtol_l.constprop.0+0x3a>
 800b8f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b8f4:	f1bc 0f19 	cmp.w	ip, #25
 800b8f8:	d801      	bhi.n	800b8fe <_strtol_l.constprop.0+0xb2>
 800b8fa:	3c37      	subs	r4, #55	; 0x37
 800b8fc:	e7e2      	b.n	800b8c4 <_strtol_l.constprop.0+0x78>
 800b8fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b902:	f1bc 0f19 	cmp.w	ip, #25
 800b906:	d804      	bhi.n	800b912 <_strtol_l.constprop.0+0xc6>
 800b908:	3c57      	subs	r4, #87	; 0x57
 800b90a:	e7db      	b.n	800b8c4 <_strtol_l.constprop.0+0x78>
 800b90c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b910:	e7e6      	b.n	800b8e0 <_strtol_l.constprop.0+0x94>
 800b912:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b916:	d105      	bne.n	800b924 <_strtol_l.constprop.0+0xd8>
 800b918:	2322      	movs	r3, #34	; 0x22
 800b91a:	6003      	str	r3, [r0, #0]
 800b91c:	4646      	mov	r6, r8
 800b91e:	b942      	cbnz	r2, 800b932 <_strtol_l.constprop.0+0xe6>
 800b920:	4630      	mov	r0, r6
 800b922:	e79e      	b.n	800b862 <_strtol_l.constprop.0+0x16>
 800b924:	b107      	cbz	r7, 800b928 <_strtol_l.constprop.0+0xdc>
 800b926:	4276      	negs	r6, r6
 800b928:	2a00      	cmp	r2, #0
 800b92a:	d0f9      	beq.n	800b920 <_strtol_l.constprop.0+0xd4>
 800b92c:	f1be 0f00 	cmp.w	lr, #0
 800b930:	d000      	beq.n	800b934 <_strtol_l.constprop.0+0xe8>
 800b932:	1e69      	subs	r1, r5, #1
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	e7f3      	b.n	800b920 <_strtol_l.constprop.0+0xd4>
 800b938:	2430      	movs	r4, #48	; 0x30
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1b1      	bne.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b93e:	2308      	movs	r3, #8
 800b940:	e7af      	b.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b942:	2c30      	cmp	r4, #48	; 0x30
 800b944:	d0a5      	beq.n	800b892 <_strtol_l.constprop.0+0x46>
 800b946:	230a      	movs	r3, #10
 800b948:	e7ab      	b.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b94a:	bf00      	nop
 800b94c:	0800e073 	.word	0x0800e073

0800b950 <_strtol_r>:
 800b950:	f7ff bf7c 	b.w	800b84c <_strtol_l.constprop.0>

0800b954 <_strtoul_l.constprop.0>:
 800b954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b958:	4f36      	ldr	r7, [pc, #216]	; (800ba34 <_strtoul_l.constprop.0+0xe0>)
 800b95a:	4686      	mov	lr, r0
 800b95c:	460d      	mov	r5, r1
 800b95e:	4628      	mov	r0, r5
 800b960:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b964:	5d3e      	ldrb	r6, [r7, r4]
 800b966:	f016 0608 	ands.w	r6, r6, #8
 800b96a:	d1f8      	bne.n	800b95e <_strtoul_l.constprop.0+0xa>
 800b96c:	2c2d      	cmp	r4, #45	; 0x2d
 800b96e:	d130      	bne.n	800b9d2 <_strtoul_l.constprop.0+0x7e>
 800b970:	782c      	ldrb	r4, [r5, #0]
 800b972:	2601      	movs	r6, #1
 800b974:	1c85      	adds	r5, r0, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d057      	beq.n	800ba2a <_strtoul_l.constprop.0+0xd6>
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d109      	bne.n	800b992 <_strtoul_l.constprop.0+0x3e>
 800b97e:	2c30      	cmp	r4, #48	; 0x30
 800b980:	d107      	bne.n	800b992 <_strtoul_l.constprop.0+0x3e>
 800b982:	7828      	ldrb	r0, [r5, #0]
 800b984:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b988:	2858      	cmp	r0, #88	; 0x58
 800b98a:	d149      	bne.n	800ba20 <_strtoul_l.constprop.0+0xcc>
 800b98c:	786c      	ldrb	r4, [r5, #1]
 800b98e:	2310      	movs	r3, #16
 800b990:	3502      	adds	r5, #2
 800b992:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b996:	2700      	movs	r7, #0
 800b998:	fbb8 f8f3 	udiv	r8, r8, r3
 800b99c:	fb03 f908 	mul.w	r9, r3, r8
 800b9a0:	ea6f 0909 	mvn.w	r9, r9
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b9aa:	f1bc 0f09 	cmp.w	ip, #9
 800b9ae:	d815      	bhi.n	800b9dc <_strtoul_l.constprop.0+0x88>
 800b9b0:	4664      	mov	r4, ip
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	dd23      	ble.n	800b9fe <_strtoul_l.constprop.0+0xaa>
 800b9b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800b9ba:	d007      	beq.n	800b9cc <_strtoul_l.constprop.0+0x78>
 800b9bc:	4580      	cmp	r8, r0
 800b9be:	d31b      	bcc.n	800b9f8 <_strtoul_l.constprop.0+0xa4>
 800b9c0:	d101      	bne.n	800b9c6 <_strtoul_l.constprop.0+0x72>
 800b9c2:	45a1      	cmp	r9, r4
 800b9c4:	db18      	blt.n	800b9f8 <_strtoul_l.constprop.0+0xa4>
 800b9c6:	fb00 4003 	mla	r0, r0, r3, r4
 800b9ca:	2701      	movs	r7, #1
 800b9cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9d0:	e7e9      	b.n	800b9a6 <_strtoul_l.constprop.0+0x52>
 800b9d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b9d4:	bf04      	itt	eq
 800b9d6:	782c      	ldrbeq	r4, [r5, #0]
 800b9d8:	1c85      	addeq	r5, r0, #2
 800b9da:	e7cc      	b.n	800b976 <_strtoul_l.constprop.0+0x22>
 800b9dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b9e0:	f1bc 0f19 	cmp.w	ip, #25
 800b9e4:	d801      	bhi.n	800b9ea <_strtoul_l.constprop.0+0x96>
 800b9e6:	3c37      	subs	r4, #55	; 0x37
 800b9e8:	e7e3      	b.n	800b9b2 <_strtoul_l.constprop.0+0x5e>
 800b9ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b9ee:	f1bc 0f19 	cmp.w	ip, #25
 800b9f2:	d804      	bhi.n	800b9fe <_strtoul_l.constprop.0+0xaa>
 800b9f4:	3c57      	subs	r4, #87	; 0x57
 800b9f6:	e7dc      	b.n	800b9b2 <_strtoul_l.constprop.0+0x5e>
 800b9f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9fc:	e7e6      	b.n	800b9cc <_strtoul_l.constprop.0+0x78>
 800b9fe:	1c7b      	adds	r3, r7, #1
 800ba00:	d106      	bne.n	800ba10 <_strtoul_l.constprop.0+0xbc>
 800ba02:	2322      	movs	r3, #34	; 0x22
 800ba04:	f8ce 3000 	str.w	r3, [lr]
 800ba08:	4638      	mov	r0, r7
 800ba0a:	b932      	cbnz	r2, 800ba1a <_strtoul_l.constprop.0+0xc6>
 800ba0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba10:	b106      	cbz	r6, 800ba14 <_strtoul_l.constprop.0+0xc0>
 800ba12:	4240      	negs	r0, r0
 800ba14:	2a00      	cmp	r2, #0
 800ba16:	d0f9      	beq.n	800ba0c <_strtoul_l.constprop.0+0xb8>
 800ba18:	b107      	cbz	r7, 800ba1c <_strtoul_l.constprop.0+0xc8>
 800ba1a:	1e69      	subs	r1, r5, #1
 800ba1c:	6011      	str	r1, [r2, #0]
 800ba1e:	e7f5      	b.n	800ba0c <_strtoul_l.constprop.0+0xb8>
 800ba20:	2430      	movs	r4, #48	; 0x30
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1b5      	bne.n	800b992 <_strtoul_l.constprop.0+0x3e>
 800ba26:	2308      	movs	r3, #8
 800ba28:	e7b3      	b.n	800b992 <_strtoul_l.constprop.0+0x3e>
 800ba2a:	2c30      	cmp	r4, #48	; 0x30
 800ba2c:	d0a9      	beq.n	800b982 <_strtoul_l.constprop.0+0x2e>
 800ba2e:	230a      	movs	r3, #10
 800ba30:	e7af      	b.n	800b992 <_strtoul_l.constprop.0+0x3e>
 800ba32:	bf00      	nop
 800ba34:	0800e073 	.word	0x0800e073

0800ba38 <_strtoul_r>:
 800ba38:	f7ff bf8c 	b.w	800b954 <_strtoul_l.constprop.0>

0800ba3c <__swbuf_r>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	460e      	mov	r6, r1
 800ba40:	4614      	mov	r4, r2
 800ba42:	4605      	mov	r5, r0
 800ba44:	b118      	cbz	r0, 800ba4e <__swbuf_r+0x12>
 800ba46:	6a03      	ldr	r3, [r0, #32]
 800ba48:	b90b      	cbnz	r3, 800ba4e <__swbuf_r+0x12>
 800ba4a:	f7fe fc6b 	bl	800a324 <__sinit>
 800ba4e:	69a3      	ldr	r3, [r4, #24]
 800ba50:	60a3      	str	r3, [r4, #8]
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	071a      	lsls	r2, r3, #28
 800ba56:	d525      	bpl.n	800baa4 <__swbuf_r+0x68>
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	b31b      	cbz	r3, 800baa4 <__swbuf_r+0x68>
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	6922      	ldr	r2, [r4, #16]
 800ba60:	1a98      	subs	r0, r3, r2
 800ba62:	6963      	ldr	r3, [r4, #20]
 800ba64:	b2f6      	uxtb	r6, r6
 800ba66:	4283      	cmp	r3, r0
 800ba68:	4637      	mov	r7, r6
 800ba6a:	dc04      	bgt.n	800ba76 <__swbuf_r+0x3a>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f7ff fe4e 	bl	800b710 <_fflush_r>
 800ba74:	b9e0      	cbnz	r0, 800bab0 <__swbuf_r+0x74>
 800ba76:	68a3      	ldr	r3, [r4, #8]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	60a3      	str	r3, [r4, #8]
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	6022      	str	r2, [r4, #0]
 800ba82:	701e      	strb	r6, [r3, #0]
 800ba84:	6962      	ldr	r2, [r4, #20]
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d004      	beq.n	800ba96 <__swbuf_r+0x5a>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	07db      	lsls	r3, r3, #31
 800ba90:	d506      	bpl.n	800baa0 <__swbuf_r+0x64>
 800ba92:	2e0a      	cmp	r6, #10
 800ba94:	d104      	bne.n	800baa0 <__swbuf_r+0x64>
 800ba96:	4621      	mov	r1, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f7ff fe39 	bl	800b710 <_fflush_r>
 800ba9e:	b938      	cbnz	r0, 800bab0 <__swbuf_r+0x74>
 800baa0:	4638      	mov	r0, r7
 800baa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 f806 	bl	800bab8 <__swsetup_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	d0d5      	beq.n	800ba5c <__swbuf_r+0x20>
 800bab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bab4:	e7f4      	b.n	800baa0 <__swbuf_r+0x64>
	...

0800bab8 <__swsetup_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4b2a      	ldr	r3, [pc, #168]	; (800bb64 <__swsetup_r+0xac>)
 800babc:	4605      	mov	r5, r0
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	460c      	mov	r4, r1
 800bac2:	b118      	cbz	r0, 800bacc <__swsetup_r+0x14>
 800bac4:	6a03      	ldr	r3, [r0, #32]
 800bac6:	b90b      	cbnz	r3, 800bacc <__swsetup_r+0x14>
 800bac8:	f7fe fc2c 	bl	800a324 <__sinit>
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bad2:	0718      	lsls	r0, r3, #28
 800bad4:	d422      	bmi.n	800bb1c <__swsetup_r+0x64>
 800bad6:	06d9      	lsls	r1, r3, #27
 800bad8:	d407      	bmi.n	800baea <__swsetup_r+0x32>
 800bada:	2309      	movs	r3, #9
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bae8:	e034      	b.n	800bb54 <__swsetup_r+0x9c>
 800baea:	0758      	lsls	r0, r3, #29
 800baec:	d512      	bpl.n	800bb14 <__swsetup_r+0x5c>
 800baee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baf0:	b141      	cbz	r1, 800bb04 <__swsetup_r+0x4c>
 800baf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baf6:	4299      	cmp	r1, r3
 800baf8:	d002      	beq.n	800bb00 <__swsetup_r+0x48>
 800bafa:	4628      	mov	r0, r5
 800bafc:	f7fe fd10 	bl	800a520 <_free_r>
 800bb00:	2300      	movs	r3, #0
 800bb02:	6363      	str	r3, [r4, #52]	; 0x34
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	6063      	str	r3, [r4, #4]
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	f043 0308 	orr.w	r3, r3, #8
 800bb1a:	81a3      	strh	r3, [r4, #12]
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	b94b      	cbnz	r3, 800bb34 <__swsetup_r+0x7c>
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb2a:	d003      	beq.n	800bb34 <__swsetup_r+0x7c>
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f840 	bl	800bbb4 <__smakebuf_r>
 800bb34:	89a0      	ldrh	r0, [r4, #12]
 800bb36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb3a:	f010 0301 	ands.w	r3, r0, #1
 800bb3e:	d00a      	beq.n	800bb56 <__swsetup_r+0x9e>
 800bb40:	2300      	movs	r3, #0
 800bb42:	60a3      	str	r3, [r4, #8]
 800bb44:	6963      	ldr	r3, [r4, #20]
 800bb46:	425b      	negs	r3, r3
 800bb48:	61a3      	str	r3, [r4, #24]
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	b943      	cbnz	r3, 800bb60 <__swsetup_r+0xa8>
 800bb4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb52:	d1c4      	bne.n	800bade <__swsetup_r+0x26>
 800bb54:	bd38      	pop	{r3, r4, r5, pc}
 800bb56:	0781      	lsls	r1, r0, #30
 800bb58:	bf58      	it	pl
 800bb5a:	6963      	ldrpl	r3, [r4, #20]
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	e7f4      	b.n	800bb4a <__swsetup_r+0x92>
 800bb60:	2000      	movs	r0, #0
 800bb62:	e7f7      	b.n	800bb54 <__swsetup_r+0x9c>
 800bb64:	20000090 	.word	0x20000090

0800bb68 <__swhatbuf_r>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb70:	2900      	cmp	r1, #0
 800bb72:	b096      	sub	sp, #88	; 0x58
 800bb74:	4615      	mov	r5, r2
 800bb76:	461e      	mov	r6, r3
 800bb78:	da0d      	bge.n	800bb96 <__swhatbuf_r+0x2e>
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb80:	f04f 0100 	mov.w	r1, #0
 800bb84:	bf0c      	ite	eq
 800bb86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb8a:	2340      	movne	r3, #64	; 0x40
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	6031      	str	r1, [r6, #0]
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	b016      	add	sp, #88	; 0x58
 800bb94:	bd70      	pop	{r4, r5, r6, pc}
 800bb96:	466a      	mov	r2, sp
 800bb98:	f000 f862 	bl	800bc60 <_fstat_r>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	dbec      	blt.n	800bb7a <__swhatbuf_r+0x12>
 800bba0:	9901      	ldr	r1, [sp, #4]
 800bba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bbaa:	4259      	negs	r1, r3
 800bbac:	4159      	adcs	r1, r3
 800bbae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb2:	e7eb      	b.n	800bb8c <__swhatbuf_r+0x24>

0800bbb4 <__smakebuf_r>:
 800bbb4:	898b      	ldrh	r3, [r1, #12]
 800bbb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbb8:	079d      	lsls	r5, r3, #30
 800bbba:	4606      	mov	r6, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	d507      	bpl.n	800bbd0 <__smakebuf_r+0x1c>
 800bbc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	6123      	str	r3, [r4, #16]
 800bbc8:	2301      	movs	r3, #1
 800bbca:	6163      	str	r3, [r4, #20]
 800bbcc:	b002      	add	sp, #8
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	ab01      	add	r3, sp, #4
 800bbd2:	466a      	mov	r2, sp
 800bbd4:	f7ff ffc8 	bl	800bb68 <__swhatbuf_r>
 800bbd8:	9900      	ldr	r1, [sp, #0]
 800bbda:	4605      	mov	r5, r0
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f7ff f979 	bl	800aed4 <_malloc_r>
 800bbe2:	b948      	cbnz	r0, 800bbf8 <__smakebuf_r+0x44>
 800bbe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbe8:	059a      	lsls	r2, r3, #22
 800bbea:	d4ef      	bmi.n	800bbcc <__smakebuf_r+0x18>
 800bbec:	f023 0303 	bic.w	r3, r3, #3
 800bbf0:	f043 0302 	orr.w	r3, r3, #2
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	e7e3      	b.n	800bbc0 <__smakebuf_r+0xc>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	6020      	str	r0, [r4, #0]
 800bbfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	9b00      	ldr	r3, [sp, #0]
 800bc04:	6163      	str	r3, [r4, #20]
 800bc06:	9b01      	ldr	r3, [sp, #4]
 800bc08:	6120      	str	r0, [r4, #16]
 800bc0a:	b15b      	cbz	r3, 800bc24 <__smakebuf_r+0x70>
 800bc0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc10:	4630      	mov	r0, r6
 800bc12:	f000 f837 	bl	800bc84 <_isatty_r>
 800bc16:	b128      	cbz	r0, 800bc24 <__smakebuf_r+0x70>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	f023 0303 	bic.w	r3, r3, #3
 800bc1e:	f043 0301 	orr.w	r3, r3, #1
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	431d      	orrs	r5, r3
 800bc28:	81a5      	strh	r5, [r4, #12]
 800bc2a:	e7cf      	b.n	800bbcc <__smakebuf_r+0x18>

0800bc2c <memmove>:
 800bc2c:	4288      	cmp	r0, r1
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	eb01 0402 	add.w	r4, r1, r2
 800bc34:	d902      	bls.n	800bc3c <memmove+0x10>
 800bc36:	4284      	cmp	r4, r0
 800bc38:	4623      	mov	r3, r4
 800bc3a:	d807      	bhi.n	800bc4c <memmove+0x20>
 800bc3c:	1e43      	subs	r3, r0, #1
 800bc3e:	42a1      	cmp	r1, r4
 800bc40:	d008      	beq.n	800bc54 <memmove+0x28>
 800bc42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc4a:	e7f8      	b.n	800bc3e <memmove+0x12>
 800bc4c:	4402      	add	r2, r0
 800bc4e:	4601      	mov	r1, r0
 800bc50:	428a      	cmp	r2, r1
 800bc52:	d100      	bne.n	800bc56 <memmove+0x2a>
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc5e:	e7f7      	b.n	800bc50 <memmove+0x24>

0800bc60 <_fstat_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_fstat_r+0x20>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f7f7 fbac 	bl	80033ca <_fstat>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d102      	bne.n	800bc7c <_fstat_r+0x1c>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	b103      	cbz	r3, 800bc7c <_fstat_r+0x1c>
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	bf00      	nop
 800bc80:	200071bc 	.word	0x200071bc

0800bc84 <_isatty_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d06      	ldr	r5, [pc, #24]	; (800bca0 <_isatty_r+0x1c>)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	602b      	str	r3, [r5, #0]
 800bc90:	f7f7 fbab 	bl	80033ea <_isatty>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_isatty_r+0x1a>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_isatty_r+0x1a>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	200071bc 	.word	0x200071bc

0800bca4 <_sbrk_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d06      	ldr	r5, [pc, #24]	; (800bcc0 <_sbrk_r+0x1c>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	f7f7 fbb4 	bl	800341c <_sbrk>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_sbrk_r+0x1a>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_sbrk_r+0x1a>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	200071bc 	.word	0x200071bc

0800bcc4 <memcpy>:
 800bcc4:	440a      	add	r2, r1
 800bcc6:	4291      	cmp	r1, r2
 800bcc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bccc:	d100      	bne.n	800bcd0 <memcpy+0xc>
 800bcce:	4770      	bx	lr
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcda:	4291      	cmp	r1, r2
 800bcdc:	d1f9      	bne.n	800bcd2 <memcpy+0xe>
 800bcde:	bd10      	pop	{r4, pc}

0800bce0 <_malloc_usable_size_r>:
 800bce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce4:	1f18      	subs	r0, r3, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfbc      	itt	lt
 800bcea:	580b      	ldrlt	r3, [r1, r0]
 800bcec:	18c0      	addlt	r0, r0, r3
 800bcee:	4770      	bx	lr

0800bcf0 <sqrt>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	ed2d 8b02 	vpush	{d8}
 800bcf6:	ec55 4b10 	vmov	r4, r5, d0
 800bcfa:	f000 f825 	bl	800bd48 <__ieee754_sqrt>
 800bcfe:	4622      	mov	r2, r4
 800bd00:	462b      	mov	r3, r5
 800bd02:	4620      	mov	r0, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	eeb0 8a40 	vmov.f32	s16, s0
 800bd0a:	eef0 8a60 	vmov.f32	s17, s1
 800bd0e:	f7f4 ff2d 	bl	8000b6c <__aeabi_dcmpun>
 800bd12:	b990      	cbnz	r0, 800bd3a <sqrt+0x4a>
 800bd14:	2200      	movs	r2, #0
 800bd16:	2300      	movs	r3, #0
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	f7f4 fefe 	bl	8000b1c <__aeabi_dcmplt>
 800bd20:	b158      	cbz	r0, 800bd3a <sqrt+0x4a>
 800bd22:	f7fe fbcf 	bl	800a4c4 <__errno>
 800bd26:	2321      	movs	r3, #33	; 0x21
 800bd28:	6003      	str	r3, [r0, #0]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4610      	mov	r0, r2
 800bd30:	4619      	mov	r1, r3
 800bd32:	f7f4 fdab 	bl	800088c <__aeabi_ddiv>
 800bd36:	ec41 0b18 	vmov	d8, r0, r1
 800bd3a:	eeb0 0a48 	vmov.f32	s0, s16
 800bd3e:	eef0 0a68 	vmov.f32	s1, s17
 800bd42:	ecbd 8b02 	vpop	{d8}
 800bd46:	bd38      	pop	{r3, r4, r5, pc}

0800bd48 <__ieee754_sqrt>:
 800bd48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	ec55 4b10 	vmov	r4, r5, d0
 800bd50:	4e67      	ldr	r6, [pc, #412]	; (800bef0 <__ieee754_sqrt+0x1a8>)
 800bd52:	43ae      	bics	r6, r5
 800bd54:	ee10 0a10 	vmov	r0, s0
 800bd58:	ee10 2a10 	vmov	r2, s0
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	462b      	mov	r3, r5
 800bd60:	d10d      	bne.n	800bd7e <__ieee754_sqrt+0x36>
 800bd62:	f7f4 fc69 	bl	8000638 <__aeabi_dmul>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	f7f4 faad 	bl	80002cc <__adddf3>
 800bd72:	4604      	mov	r4, r0
 800bd74:	460d      	mov	r5, r1
 800bd76:	ec45 4b10 	vmov	d0, r4, r5
 800bd7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	dc0b      	bgt.n	800bd9a <__ieee754_sqrt+0x52>
 800bd82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd86:	4326      	orrs	r6, r4
 800bd88:	d0f5      	beq.n	800bd76 <__ieee754_sqrt+0x2e>
 800bd8a:	b135      	cbz	r5, 800bd9a <__ieee754_sqrt+0x52>
 800bd8c:	f7f4 fa9c 	bl	80002c8 <__aeabi_dsub>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	f7f4 fd7a 	bl	800088c <__aeabi_ddiv>
 800bd98:	e7eb      	b.n	800bd72 <__ieee754_sqrt+0x2a>
 800bd9a:	1509      	asrs	r1, r1, #20
 800bd9c:	f000 808d 	beq.w	800beba <__ieee754_sqrt+0x172>
 800bda0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bda8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdac:	07c9      	lsls	r1, r1, #31
 800bdae:	bf5c      	itt	pl
 800bdb0:	005b      	lslpl	r3, r3, #1
 800bdb2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bdb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdba:	bf58      	it	pl
 800bdbc:	0052      	lslpl	r2, r2, #1
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bdc4:	1076      	asrs	r6, r6, #1
 800bdc6:	0052      	lsls	r2, r2, #1
 800bdc8:	f04f 0e16 	mov.w	lr, #22
 800bdcc:	46ac      	mov	ip, r5
 800bdce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdd2:	eb0c 0001 	add.w	r0, ip, r1
 800bdd6:	4298      	cmp	r0, r3
 800bdd8:	bfde      	ittt	le
 800bdda:	1a1b      	suble	r3, r3, r0
 800bddc:	eb00 0c01 	addle.w	ip, r0, r1
 800bde0:	186d      	addle	r5, r5, r1
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	f1be 0e01 	subs.w	lr, lr, #1
 800bde8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bdec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bdf0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bdf4:	d1ed      	bne.n	800bdd2 <__ieee754_sqrt+0x8a>
 800bdf6:	4674      	mov	r4, lr
 800bdf8:	2720      	movs	r7, #32
 800bdfa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bdfe:	4563      	cmp	r3, ip
 800be00:	eb01 000e 	add.w	r0, r1, lr
 800be04:	dc02      	bgt.n	800be0c <__ieee754_sqrt+0xc4>
 800be06:	d113      	bne.n	800be30 <__ieee754_sqrt+0xe8>
 800be08:	4290      	cmp	r0, r2
 800be0a:	d811      	bhi.n	800be30 <__ieee754_sqrt+0xe8>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	eb00 0e01 	add.w	lr, r0, r1
 800be12:	da57      	bge.n	800bec4 <__ieee754_sqrt+0x17c>
 800be14:	f1be 0f00 	cmp.w	lr, #0
 800be18:	db54      	blt.n	800bec4 <__ieee754_sqrt+0x17c>
 800be1a:	f10c 0801 	add.w	r8, ip, #1
 800be1e:	eba3 030c 	sub.w	r3, r3, ip
 800be22:	4290      	cmp	r0, r2
 800be24:	bf88      	it	hi
 800be26:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800be2a:	1a12      	subs	r2, r2, r0
 800be2c:	440c      	add	r4, r1
 800be2e:	46c4      	mov	ip, r8
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	3f01      	subs	r7, #1
 800be34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800be38:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be3c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800be40:	d1dd      	bne.n	800bdfe <__ieee754_sqrt+0xb6>
 800be42:	4313      	orrs	r3, r2
 800be44:	d01b      	beq.n	800be7e <__ieee754_sqrt+0x136>
 800be46:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bef4 <__ieee754_sqrt+0x1ac>
 800be4a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bef8 <__ieee754_sqrt+0x1b0>
 800be4e:	e9da 0100 	ldrd	r0, r1, [sl]
 800be52:	e9db 2300 	ldrd	r2, r3, [fp]
 800be56:	f7f4 fa37 	bl	80002c8 <__aeabi_dsub>
 800be5a:	e9da 8900 	ldrd	r8, r9, [sl]
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4640      	mov	r0, r8
 800be64:	4649      	mov	r1, r9
 800be66:	f7f4 fe63 	bl	8000b30 <__aeabi_dcmple>
 800be6a:	b140      	cbz	r0, 800be7e <__ieee754_sqrt+0x136>
 800be6c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800be70:	e9da 0100 	ldrd	r0, r1, [sl]
 800be74:	e9db 2300 	ldrd	r2, r3, [fp]
 800be78:	d126      	bne.n	800bec8 <__ieee754_sqrt+0x180>
 800be7a:	3501      	adds	r5, #1
 800be7c:	463c      	mov	r4, r7
 800be7e:	106a      	asrs	r2, r5, #1
 800be80:	0863      	lsrs	r3, r4, #1
 800be82:	07e9      	lsls	r1, r5, #31
 800be84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800be88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800be8c:	bf48      	it	mi
 800be8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800be92:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800be96:	461c      	mov	r4, r3
 800be98:	e76d      	b.n	800bd76 <__ieee754_sqrt+0x2e>
 800be9a:	0ad3      	lsrs	r3, r2, #11
 800be9c:	3815      	subs	r0, #21
 800be9e:	0552      	lsls	r2, r2, #21
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0fa      	beq.n	800be9a <__ieee754_sqrt+0x152>
 800bea4:	02dc      	lsls	r4, r3, #11
 800bea6:	d50a      	bpl.n	800bebe <__ieee754_sqrt+0x176>
 800bea8:	f1c1 0420 	rsb	r4, r1, #32
 800beac:	fa22 f404 	lsr.w	r4, r2, r4
 800beb0:	1e4d      	subs	r5, r1, #1
 800beb2:	408a      	lsls	r2, r1
 800beb4:	4323      	orrs	r3, r4
 800beb6:	1b41      	subs	r1, r0, r5
 800beb8:	e772      	b.n	800bda0 <__ieee754_sqrt+0x58>
 800beba:	4608      	mov	r0, r1
 800bebc:	e7f0      	b.n	800bea0 <__ieee754_sqrt+0x158>
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	3101      	adds	r1, #1
 800bec2:	e7ef      	b.n	800bea4 <__ieee754_sqrt+0x15c>
 800bec4:	46e0      	mov	r8, ip
 800bec6:	e7aa      	b.n	800be1e <__ieee754_sqrt+0xd6>
 800bec8:	f7f4 fa00 	bl	80002cc <__adddf3>
 800becc:	e9da 8900 	ldrd	r8, r9, [sl]
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4640      	mov	r0, r8
 800bed6:	4649      	mov	r1, r9
 800bed8:	f7f4 fe20 	bl	8000b1c <__aeabi_dcmplt>
 800bedc:	b120      	cbz	r0, 800bee8 <__ieee754_sqrt+0x1a0>
 800bede:	1ca0      	adds	r0, r4, #2
 800bee0:	bf08      	it	eq
 800bee2:	3501      	addeq	r5, #1
 800bee4:	3402      	adds	r4, #2
 800bee6:	e7ca      	b.n	800be7e <__ieee754_sqrt+0x136>
 800bee8:	3401      	adds	r4, #1
 800beea:	f024 0401 	bic.w	r4, r4, #1
 800beee:	e7c6      	b.n	800be7e <__ieee754_sqrt+0x136>
 800bef0:	7ff00000 	.word	0x7ff00000
 800bef4:	20000098 	.word	0x20000098
 800bef8:	200000a0 	.word	0x200000a0

0800befc <round>:
 800befc:	ec53 2b10 	vmov	r2, r3, d0
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bf06:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bf0a:	2813      	cmp	r0, #19
 800bf0c:	ee10 5a10 	vmov	r5, s0
 800bf10:	4619      	mov	r1, r3
 800bf12:	dc18      	bgt.n	800bf46 <round+0x4a>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	da09      	bge.n	800bf2c <round+0x30>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bf1e:	d103      	bne.n	800bf28 <round+0x2c>
 800bf20:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bf24:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e02a      	b.n	800bf82 <round+0x86>
 800bf2c:	4c16      	ldr	r4, [pc, #88]	; (800bf88 <round+0x8c>)
 800bf2e:	4104      	asrs	r4, r0
 800bf30:	ea03 0604 	and.w	r6, r3, r4
 800bf34:	4316      	orrs	r6, r2
 800bf36:	d011      	beq.n	800bf5c <round+0x60>
 800bf38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf3c:	4103      	asrs	r3, r0
 800bf3e:	440b      	add	r3, r1
 800bf40:	ea23 0104 	bic.w	r1, r3, r4
 800bf44:	e7f0      	b.n	800bf28 <round+0x2c>
 800bf46:	2833      	cmp	r0, #51	; 0x33
 800bf48:	dd0b      	ble.n	800bf62 <round+0x66>
 800bf4a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bf4e:	d105      	bne.n	800bf5c <round+0x60>
 800bf50:	ee10 0a10 	vmov	r0, s0
 800bf54:	f7f4 f9ba 	bl	80002cc <__adddf3>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	ec43 2b10 	vmov	d0, r2, r3
 800bf60:	bd70      	pop	{r4, r5, r6, pc}
 800bf62:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bf66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf6a:	40f4      	lsrs	r4, r6
 800bf6c:	4214      	tst	r4, r2
 800bf6e:	d0f5      	beq.n	800bf5c <round+0x60>
 800bf70:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800bf74:	2301      	movs	r3, #1
 800bf76:	4083      	lsls	r3, r0
 800bf78:	195b      	adds	r3, r3, r5
 800bf7a:	bf28      	it	cs
 800bf7c:	3101      	addcs	r1, #1
 800bf7e:	ea23 0304 	bic.w	r3, r3, r4
 800bf82:	461a      	mov	r2, r3
 800bf84:	460b      	mov	r3, r1
 800bf86:	e7e9      	b.n	800bf5c <round+0x60>
 800bf88:	000fffff 	.word	0x000fffff

0800bf8c <trunc>:
 800bf8c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800bf90:	ec5c bb10 	vmov	fp, ip, d0
 800bf94:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800bf98:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800bf9c:	2913      	cmp	r1, #19
 800bf9e:	4664      	mov	r4, ip
 800bfa0:	dc11      	bgt.n	800bfc6 <trunc+0x3a>
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	bfa7      	ittee	ge
 800bfa6:	4b15      	ldrge	r3, [pc, #84]	; (800bffc <trunc+0x70>)
 800bfa8:	fa43 f101 	asrge.w	r1, r3, r1
 800bfac:	2200      	movlt	r2, #0
 800bfae:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800bfb2:	bfa4      	itt	ge
 800bfb4:	2200      	movge	r2, #0
 800bfb6:	ea01 030c 	andge.w	r3, r1, ip
 800bfba:	4693      	mov	fp, r2
 800bfbc:	469c      	mov	ip, r3
 800bfbe:	ec4c bb10 	vmov	d0, fp, ip
 800bfc2:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800bfc6:	2933      	cmp	r1, #51	; 0x33
 800bfc8:	dd0d      	ble.n	800bfe6 <trunc+0x5a>
 800bfca:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bfce:	d1f6      	bne.n	800bfbe <trunc+0x32>
 800bfd0:	4663      	mov	r3, ip
 800bfd2:	ee10 2a10 	vmov	r2, s0
 800bfd6:	ee10 0a10 	vmov	r0, s0
 800bfda:	4621      	mov	r1, r4
 800bfdc:	f7f4 f976 	bl	80002cc <__adddf3>
 800bfe0:	4683      	mov	fp, r0
 800bfe2:	468c      	mov	ip, r1
 800bfe4:	e7eb      	b.n	800bfbe <trunc+0x32>
 800bfe6:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800bfea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfee:	40c3      	lsrs	r3, r0
 800bff0:	ea2b 0603 	bic.w	r6, fp, r3
 800bff4:	46b3      	mov	fp, r6
 800bff6:	46a4      	mov	ip, r4
 800bff8:	e7e1      	b.n	800bfbe <trunc+0x32>
 800bffa:	bf00      	nop
 800bffc:	fff00000 	.word	0xfff00000

0800c000 <_init>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	bf00      	nop
 800c004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c006:	bc08      	pop	{r3}
 800c008:	469e      	mov	lr, r3
 800c00a:	4770      	bx	lr

0800c00c <_fini>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	bf00      	nop
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr
