
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007800  08007800  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007808  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000526c  20000090  08007898  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052fc  08007898  000252fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001052b  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c5  00000000  00000000  0003062e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00032df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c04  00000000  00000000  00033d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b20  00000000  00000000  0003496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013006  00000000  00000000  0005948c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dff32  00000000  00000000  0006c492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ab0  00000000  00000000  0014c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00150e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007478 	.word	0x08007478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08007478 	.word	0x08007478

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <calc_process_dma_buffer>:
 * Process the DMA buffer
 * parameter second_half: > 0 to process 2nd half of buffer, 0 = 1st half of buffer
 * parameter adc_num: 0 = ADC1, 1 = ADC2 (use ADC1_IDX or ADC2_IDX)
 * returns: -1 on failure, 0 if OK
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8000f24:	b4b0      	push	{r4, r5, r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
		return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	e16c      	b.n	8001222 <calc_process_dma_buffer+0x2fe>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first entry in DMA buffer
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	raw_buf_second = raw_buf_first + 1; // destination index for second entry in DMA buffer
 8000f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f56:	3301      	adds	r3, #1
 8000f58:	f887 3020 	strb.w	r3, [r7, #32]
	// first or second half of DMA buffer?
	if (second_half) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <calc_process_dma_buffer+0x46>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8000f62:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000f66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f68:	e001      	b.n	8000f6e <calc_process_dma_buffer+0x4a>
	} else {
		dma_buf_start = 0;	// first half
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8000f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f70:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8000f74:	83fb      	strh	r3, [r7, #30]

	adc_raw_meta[raw_buf_first].min = adc_dma_buf[adc_num][0];
 8000f76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f7a:	49ac      	ldr	r1, [pc, #688]	; (800122c <calc_process_dma_buffer+0x308>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000f82:	fb00 f303 	mul.w	r3, r0, r3
 8000f86:	440b      	add	r3, r1
 8000f88:	8818      	ldrh	r0, [r3, #0]
 8000f8a:	49a9      	ldr	r1, [pc, #676]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	4602      	mov	r2, r0
 8000f98:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].max = adc_dma_buf[adc_num][0];
 8000f9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f9e:	49a3      	ldr	r1, [pc, #652]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fa6:	fb00 f303 	mul.w	r3, r0, r3
 8000faa:	440b      	add	r3, r1
 8000fac:	8818      	ldrh	r0, [r3, #0]
 8000fae:	49a0      	ldr	r1, [pc, #640]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3302      	adds	r3, #2
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].min = adc_dma_buf[adc_num][1];
 8000fc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fc4:	4999      	ldr	r1, [pc, #612]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fcc:	fb00 f303 	mul.w	r3, r0, r3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	8818      	ldrh	r0, [r3, #0]
 8000fd6:	4996      	ldr	r1, [pc, #600]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].max = adc_dma_buf[adc_num][1];
 8000fe6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000ff2:	fb00 f303 	mul.w	r3, r0, r3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	8818      	ldrh	r0, [r3, #0]
 8000ffc:	498c      	ldr	r1, [pc, #560]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3302      	adds	r3, #2
 800100a:	4602      	mov	r2, r0
 800100c:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross1 = -1;
 800100e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001012:	4987      	ldr	r1, [pc, #540]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3304      	adds	r3, #4
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross2 = -1;
 8001026:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800102a:	4981      	ldr	r1, [pc, #516]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3308      	adds	r3, #8
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross1 = -1;
 800103e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001042:	497b      	ldr	r1, [pc, #492]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3304      	adds	r3, #4
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross2 = -1;
 8001056:	f897 2020 	ldrb.w	r2, [r7, #32]
 800105a:	4975      	ldr	r1, [pc, #468]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3308      	adds	r3, #8
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	601a      	str	r2, [r3, #0]
	// split DMA buffer and copy into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001072:	e0d0      	b.n	8001216 <calc_process_dma_buffer+0x2f2>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001074:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001076:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800107a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800107c:	4c6b      	ldr	r4, [pc, #428]	; (800122c <calc_process_dma_buffer+0x308>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001084:	fb05 f000 	mul.w	r0, r5, r0
 8001088:	4401      	add	r1, r0
 800108a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <calc_process_dma_buffer+0x310>)
 8001090:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001094:	fb00 f202 	mul.w	r2, r0, r2
 8001098:	4413      	add	r3, r2
 800109a:	4622      	mov	r2, r4
 800109c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 80010a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010aa:	1c58      	adds	r0, r3, #1
 80010ac:	8478      	strh	r0, [r7, #34]	; 0x22
 80010ae:	461d      	mov	r5, r3
 80010b0:	485e      	ldr	r0, [pc, #376]	; (800122c <calc_process_dma_buffer+0x308>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80010b8:	fb04 f303 	mul.w	r3, r4, r3
 80010bc:	440b      	add	r3, r1
 80010be:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80010c2:	495c      	ldr	r1, [pc, #368]	; (8001234 <calc_process_dma_buffer+0x310>)
 80010c4:	f44f 7352 	mov.w	r3, #840	; 0x348
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	442b      	add	r3, r5
 80010ce:	4602      	mov	r2, r0
 80010d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_meta[raw_buf_first].min = MIN(adc_raw_meta[raw_buf_first].min, adc_dma_buf[adc_num][i]);
 80010d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010d8:	4955      	ldr	r1, [pc, #340]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	83bb      	strh	r3, [r7, #28]
 80010e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ea:	4950      	ldr	r1, [pc, #320]	; (800122c <calc_process_dma_buffer+0x308>)
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80010f2:	fb00 f202 	mul.w	r2, r0, r2
 80010f6:	4413      	add	r3, r2
 80010f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010fc:	837b      	strh	r3, [r7, #26]
 80010fe:	8b7a      	ldrh	r2, [r7, #26]
 8001100:	8bbb      	ldrh	r3, [r7, #28]
 8001102:	4293      	cmp	r3, r2
 8001104:	bf28      	it	cs
 8001106:	4613      	movcs	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800110e:	b298      	uxth	r0, r3
 8001110:	4947      	ldr	r1, [pc, #284]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	4602      	mov	r2, r0
 800111e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_first].max = MAX(adc_raw_meta[raw_buf_first].max, adc_dma_buf[adc_num][i]);
 8001120:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001124:	4942      	ldr	r1, [pc, #264]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3302      	adds	r3, #2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	833b      	strh	r3, [r7, #24]
 8001136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001138:	493c      	ldr	r1, [pc, #240]	; (800122c <calc_process_dma_buffer+0x308>)
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001140:	fb00 f202 	mul.w	r2, r0, r2
 8001144:	4413      	add	r3, r2
 8001146:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800114a:	82fb      	strh	r3, [r7, #22]
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	8b3b      	ldrh	r3, [r7, #24]
 8001150:	4293      	cmp	r3, r2
 8001152:	bf38      	it	cc
 8001154:	4613      	movcc	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800115c:	b298      	uxth	r0, r3
 800115e:	4934      	ldr	r1, [pc, #208]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	3302      	adds	r3, #2
 800116c:	4602      	mov	r2, r0
 800116e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].min = MIN(adc_raw_meta[raw_buf_second].min, adc_dma_buf[adc_num][i+1]);
 8001170:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001174:	492e      	ldr	r1, [pc, #184]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	82bb      	strh	r3, [r7, #20]
 8001184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001186:	3301      	adds	r3, #1
 8001188:	4928      	ldr	r1, [pc, #160]	; (800122c <calc_process_dma_buffer+0x308>)
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001190:	fb00 f202 	mul.w	r2, r0, r2
 8001194:	4413      	add	r3, r2
 8001196:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800119a:	827b      	strh	r3, [r7, #18]
 800119c:	8a7a      	ldrh	r2, [r7, #18]
 800119e:	8abb      	ldrh	r3, [r7, #20]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf28      	it	cs
 80011a4:	4613      	movcs	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ac:	b298      	uxth	r0, r3
 80011ae:	4920      	ldr	r1, [pc, #128]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	4602      	mov	r2, r0
 80011bc:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].max = MAX(adc_raw_meta[raw_buf_second].max, adc_dma_buf[adc_num][i+1]);
 80011be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3302      	adds	r3, #2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	823b      	strh	r3, [r7, #16]
 80011d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011d6:	3301      	adds	r3, #1
 80011d8:	4914      	ldr	r1, [pc, #80]	; (800122c <calc_process_dma_buffer+0x308>)
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80011e0:	fb00 f202 	mul.w	r2, r0, r2
 80011e4:	4413      	add	r3, r2
 80011e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	89fa      	ldrh	r2, [r7, #14]
 80011ee:	8a3b      	ldrh	r3, [r7, #16]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bf38      	it	cc
 80011f4:	4613      	movcc	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3302      	adds	r3, #2
 800120c:	4602      	mov	r2, r0
 800120e:	801a      	strh	r2, [r3, #0]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001212:	3302      	adds	r3, #2
 8001214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001216:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001218:	8bfb      	ldrh	r3, [r7, #30]
 800121a:	429a      	cmp	r2, r3
 800121c:	f67f af2a 	bls.w	8001074 <calc_process_dma_buffer+0x150>
	}
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	372c      	adds	r7, #44	; 0x2c
 8001226:	46bd      	mov	sp, r7
 8001228:	bcb0      	pop	{r4, r5, r7}
 800122a:	4770      	bx	lr
 800122c:	20001d28 	.word	0x20001d28
 8001230:	20001aec 	.word	0x20001aec
 8001234:	200000ac 	.word	0x200000ac

08001238 <calc_display_buffer>:

void calc_display_buffer(uint8_t buf_num) {
 8001238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800123c:	b08a      	sub	sp, #40	; 0x28
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t address = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint64_t squared_acc = 0;
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t rms_value, adc_raw;
	uint8_t gt_zero_count = 0, lt_zero_count = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	74fb      	strb	r3, [r7, #19]
 800125c:	2300      	movs	r3, #0
 800125e:	74bb      	strb	r3, [r7, #18]
	//uint16_t adc_raw_min = adc_raw_buf[buf_num][0];
	//uint16_t adc_raw_max = adc_raw_min;
	if (buf_num > 3) { return; }
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	f200 809a 	bhi.w	800139c <calc_display_buffer+0x164>
	printf("Buffer %d\r\n", buf_num);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4619      	mov	r1, r3
 800126c:	484e      	ldr	r0, [pc, #312]	; (80013a8 <calc_display_buffer+0x170>)
 800126e:	f005 f8e7 	bl	8006440 <iprintf>
	printf("%3d: ", 0);
 8001272:	2100      	movs	r1, #0
 8001274:	484d      	ldr	r0, [pc, #308]	; (80013ac <calc_display_buffer+0x174>)
 8001276:	f005 f8e3 	bl	8006440 <iprintf>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e044      	b.n	800130a <calc_display_buffer+0xd2>
		if (count >= 20) {
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b13      	cmp	r3, #19
 8001284:	dd06      	ble.n	8001294 <calc_display_buffer+0x5c>
			count =0;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
			printf("\r\n%3d: ", address);
 800128a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800128c:	4619      	mov	r1, r3
 800128e:	4848      	ldr	r0, [pc, #288]	; (80013b0 <calc_display_buffer+0x178>)
 8001290:	f005 f8d6 	bl	8006440 <iprintf>
		}
		adc_raw = adc_raw_buf[buf_num][i];
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4947      	ldr	r1, [pc, #284]	; (80013b4 <calc_display_buffer+0x17c>)
 8001298:	f44f 7252 	mov.w	r2, #840	; 0x348
 800129c:	fb03 f202 	mul.w	r2, r3, r2
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a8:	81fb      	strh	r3, [r7, #14]
		printf("%04u ", adc_raw);
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <calc_display_buffer+0x180>)
 80012b0:	f005 f8c6 	bl	8006440 <iprintf>

		squared_acc += adc_raw_buf[buf_num][i] * adc_raw_buf[buf_num][i];
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	493f      	ldr	r1, [pc, #252]	; (80013b4 <calc_display_buffer+0x17c>)
 80012b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012bc:	fb03 f202 	mul.w	r2, r3, r2
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c8:	4618      	mov	r0, r3
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <calc_display_buffer+0x17c>)
 80012ce:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	fb00 f303 	mul.w	r3, r0, r3
 80012e2:	17da      	asrs	r2, r3, #31
 80012e4:	461c      	mov	r4, r3
 80012e6:	4615      	mov	r5, r2
 80012e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ec:	eb12 0804 	adds.w	r8, r2, r4
 80012f0:	eb43 0905 	adc.w	r9, r3, r5
 80012f4:	e9c7 8906 	strd	r8, r9, [r7, #24]
		count++; address++;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3301      	adds	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001300:	3301      	adds	r3, #1
 8001302:	847b      	strh	r3, [r7, #34]	; 0x22
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001310:	d3b6      	bcc.n	8001280 <calc_display_buffer+0x48>
	}
	rms_value = (uint16_t) sqrt((squared_acc / ADC_NUM_DATA));
 8001312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001316:	f44f 7252 	mov.w	r2, #840	; 0x348
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f7ff fc83 	bl	8000c28 <__aeabi_uldivmod>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff f94f 	bl	80005cc <__aeabi_ul2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b10 	vmov	d0, r2, r3
 8001336:	f005 ff51 	bl	80071dc <sqrt>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc51 	bl	8000be8 <__aeabi_d2uiz>
 8001346:	4603      	mov	r3, r0
 8001348:	823b      	strh	r3, [r7, #16]
	printf("\r\nMin: %dmV Max: %dmV ", calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].min), calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].max) );
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	491b      	ldr	r1, [pc, #108]	; (80013bc <calc_display_buffer+0x184>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f86a 	bl	8001434 <calc_adc_raw_to_mv_int>
 8001360:	4604      	mov	r4, r0
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4915      	ldr	r1, [pc, #84]	; (80013bc <calc_display_buffer+0x184>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3302      	adds	r3, #2
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f85d 	bl	8001434 <calc_adc_raw_to_mv_int>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4621      	mov	r1, r4
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <calc_display_buffer+0x188>)
 8001382:	f005 f85d 	bl	8006440 <iprintf>
	printf("RMS: %dmV [%u]\r\n", calc_adc_raw_to_mv_int(rms_value), rms_value);
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f853 	bl	8001434 <calc_adc_raw_to_mv_int>
 800138e:	4601      	mov	r1, r0
 8001390:	8a3b      	ldrh	r3, [r7, #16]
 8001392:	461a      	mov	r2, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <calc_display_buffer+0x18c>)
 8001396:	f005 f853 	bl	8006440 <iprintf>
 800139a:	e000      	b.n	800139e <calc_display_buffer+0x166>
	if (buf_num > 3) { return; }
 800139c:	bf00      	nop

}
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a6:	bf00      	nop
 80013a8:	08007490 	.word	0x08007490
 80013ac:	0800749c 	.word	0x0800749c
 80013b0:	080074a4 	.word	0x080074a4
 80013b4:	200000ac 	.word	0x200000ac
 80013b8:	080074ac 	.word	0x080074ac
 80013bc:	20001aec 	.word	0x20001aec
 80013c0:	080074b4 	.word	0x080074b4
 80013c4:	080074cc 	.word	0x080074cc

080013c8 <calc_csv_buffer>:

void calc_csv_buffer(uint8_t buf_num) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (buf_num > 3) { return; }
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d821      	bhi.n	800141c <calc_csv_buffer+0x54>
	printf("Buffer %d\r\n", buf_num);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4619      	mov	r1, r3
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <calc_csv_buffer+0x5c>)
 80013de:	f005 f82f 	bl	8006440 <iprintf>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e011      	b.n	800140c <calc_csv_buffer+0x44>
		printf("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <calc_csv_buffer+0x60>)
 80013ec:	f44f 7252 	mov.w	r2, #840	; 0x348
 80013f0:	fb03 f202 	mul.w	r2, r3, r2
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <calc_csv_buffer+0x64>)
 8001402:	f005 f81d 	bl	8006440 <iprintf>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001412:	d3e9      	bcc.n	80013e8 <calc_csv_buffer+0x20>
	}
	printf("\r\n\r\n");
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <calc_csv_buffer+0x68>)
 8001416:	f005 f879 	bl	800650c <puts>
 800141a:	e000      	b.n	800141e <calc_csv_buffer+0x56>
	if (buf_num > 3) { return; }
 800141c:	bf00      	nop
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08007490 	.word	0x08007490
 8001428:	200000ac 	.word	0x200000ac
 800142c:	080074e0 	.word	0x080074e0
 8001430:	080074e8 	.word	0x080074e8

08001434 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(uint16_t adc_raw) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f817 	bl	8001474 <calc_adc_raw_to_mv_float>
 8001446:	ee10 3a10 	vmov	r3, s0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b10 	vmov	d0, r2, r3
 8001458:	f005 ffc6 	bl	80073e8 <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb98 	bl	8000b98 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <calc_adc_raw_to_mv_float>:

float calc_adc_raw_to_mv_float(uint16_t adc_raw) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001488:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014a8 <calc_adc_raw_to_mv_float+0x34>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014ac <calc_adc_raw_to_mv_float+0x38>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	457ff000 	.word	0x457ff000
 80014ac:	454e4000 	.word	0x454e4000

080014b0 <cmd_error>:
extern uint8_t display_buffer;
extern uint8_t csv_buffer;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	printf("Error in command <%s>\r\n", cmd_str);
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <cmd_error+0x18>)
 80014bc:	f004 ffc0 	bl	8006440 <iprintf>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	080074ec 	.word	0x080074ec

080014cc <cmd_L>:

int cmd_L(uint8_t* cmd_str) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b30      	cmp	r3, #48	; 0x30
 80014dc:	d002      	beq.n	80014e4 <cmd_L+0x18>
 80014de:	2b31      	cmp	r3, #49	; 0x31
 80014e0:	d005      	beq.n	80014ee <cmd_L+0x22>
 80014e2:	e009      	b.n	80014f8 <cmd_L+0x2c>
	case '0':
		printf("-LED OFF-\r\n");
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <cmd_L+0x38>)
 80014e6:	f005 f811 	bl	800650c <puts>
		return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e006      	b.n	80014fc <cmd_L+0x30>
		break;
	case '1':
		printf("-LED ON-\r\n");
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <cmd_L+0x3c>)
 80014f0:	f005 f80c 	bl	800650c <puts>
		return 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e001      	b.n	80014fc <cmd_L+0x30>
		break;
	}
	return -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	08007504 	.word	0x08007504
 8001508:	08007510 	.word	0x08007510

0800150c <cmd_help>:

int cmd_help(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	printf("\r\nCommand Help:\r\n");
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <cmd_help+0x28>)
 8001512:	f004 fffb 	bl	800650c <puts>
	printf("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <cmd_help+0x2c>)
 8001518:	f004 fff8 	bl	800650c <puts>
	printf("D[1..4]: Display ADC channel 1 - 4 buffer content\r\n");
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <cmd_help+0x30>)
 800151e:	f004 fff5 	bl	800650c <puts>
	printf("R: Restart ADC conversion\r\n");
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <cmd_help+0x34>)
 8001524:	f004 fff2 	bl	800650c <puts>
	printf("L[0,1]: LED on / off\r\n");
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <cmd_help+0x38>)
 800152a:	f004 ffef 	bl	800650c <puts>
	return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0800751c 	.word	0x0800751c
 8001538:	08007530 	.word	0x08007530
 800153c:	08007568 	.word	0x08007568
 8001540:	0800759c 	.word	0x0800759c
 8001544:	080075b8 	.word	0x080075b8

08001548 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001554:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3b3f      	subs	r3, #63	; 0x3f
 800155c:	2b33      	cmp	r3, #51	; 0x33
 800155e:	f200 808d 	bhi.w	800167c <cmd_process+0x134>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <cmd_process+0x20>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	08001677 	.word	0x08001677
 800156c:	0800167d 	.word	0x0800167d
 8001570:	0800167d 	.word	0x0800167d
 8001574:	0800167d 	.word	0x0800167d
 8001578:	08001639 	.word	0x08001639
 800157c:	0800164d 	.word	0x0800164d
 8001580:	0800167d 	.word	0x0800167d
 8001584:	0800167d 	.word	0x0800167d
 8001588:	0800167d 	.word	0x0800167d
 800158c:	08001677 	.word	0x08001677
 8001590:	0800167d 	.word	0x0800167d
 8001594:	0800167d 	.word	0x0800167d
 8001598:	0800167d 	.word	0x0800167d
 800159c:	08001661 	.word	0x08001661
 80015a0:	0800167d 	.word	0x0800167d
 80015a4:	0800167d 	.word	0x0800167d
 80015a8:	0800167d 	.word	0x0800167d
 80015ac:	0800167d 	.word	0x0800167d
 80015b0:	0800167d 	.word	0x0800167d
 80015b4:	0800166b 	.word	0x0800166b
 80015b8:	0800167d 	.word	0x0800167d
 80015bc:	0800167d 	.word	0x0800167d
 80015c0:	0800167d 	.word	0x0800167d
 80015c4:	0800167d 	.word	0x0800167d
 80015c8:	0800167d 	.word	0x0800167d
 80015cc:	0800167d 	.word	0x0800167d
 80015d0:	0800167d 	.word	0x0800167d
 80015d4:	0800167d 	.word	0x0800167d
 80015d8:	0800167d 	.word	0x0800167d
 80015dc:	0800167d 	.word	0x0800167d
 80015e0:	0800167d 	.word	0x0800167d
 80015e4:	0800167d 	.word	0x0800167d
 80015e8:	0800167d 	.word	0x0800167d
 80015ec:	0800167d 	.word	0x0800167d
 80015f0:	0800167d 	.word	0x0800167d
 80015f4:	0800167d 	.word	0x0800167d
 80015f8:	08001639 	.word	0x08001639
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	0800167d 	.word	0x0800167d
 8001604:	0800167d 	.word	0x0800167d
 8001608:	0800167d 	.word	0x0800167d
 800160c:	08001677 	.word	0x08001677
 8001610:	0800167d 	.word	0x0800167d
 8001614:	0800167d 	.word	0x0800167d
 8001618:	0800167d 	.word	0x0800167d
 800161c:	08001661 	.word	0x08001661
 8001620:	0800167d 	.word	0x0800167d
 8001624:	0800167d 	.word	0x0800167d
 8001628:	0800167d 	.word	0x0800167d
 800162c:	0800167d 	.word	0x0800167d
 8001630:	0800167d 	.word	0x0800167d
 8001634:	0800166b 	.word	0x0800166b
	case 'C':
	case 'c':
		csv_buffer = cmd_str[1] - 0x30;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3301      	adds	r3, #1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3b30      	subs	r3, #48	; 0x30
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <cmd_process+0x140>)
 8001644:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
		break;
 800164a:	e017      	b.n	800167c <cmd_process+0x134>
	case 'D':
	case 'd':
		display_buffer = cmd_str[1] - 0x30;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b30      	subs	r3, #48	; 0x30
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <cmd_process+0x144>)
 8001658:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
		break;
 800165e:	e00d      	b.n	800167c <cmd_process+0x134>
	case 'L':
	case 'l':
		retval = cmd_L(cmd_str);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff33 	bl	80014cc <cmd_L>
 8001666:	60f8      	str	r0, [r7, #12]
		break;
 8001668:	e008      	b.n	800167c <cmd_process+0x134>
	case 'R':
	case 'r':
		adc_restart = 1;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <cmd_process+0x148>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
		break;
 8001674:	e002      	b.n	800167c <cmd_process+0x134>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8001676:	f7ff ff49 	bl	800150c <cmd_help>
 800167a:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 800167c:	68fb      	ldr	r3, [r7, #12]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20001d17 	.word	0x20001d17
 800168c:	20001d16 	.word	0x20001d16
 8001690:	20001d15 	.word	0x20001d15

08001694 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7fe fdb7 	bl	8000210 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <CMD_Handler+0x3c>)
 80016a8:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <CMD_Handler+0x3c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d105      	bne.n	80016be <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fefc 	bl	80014b0 <cmd_error>
		return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016bc:	e003      	b.n	80016c6 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff42 	bl	8001548 <cmd_process>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20001b1c 	.word	0x20001b1c

080016d4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80016dc:	1d39      	adds	r1, r7, #4
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e2:	2201      	movs	r2, #1
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <__io_putchar+0x20>)
 80016e6:	f003 fdbe 	bl	8005266 <HAL_UART_Transmit>
  return ch;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20001cb8 	.word	0x20001cb8

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fe:	f000 ff9d 	bl	800263c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001702:	f000 f921 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001706:	f000 faef 	bl	8001ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 800170a:	f000 fac5 	bl	8001c98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800170e:	f000 fa99 	bl	8001c44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001712:	f000 fa4b 	bl	8001bac <MX_TIM2_Init>
  MX_ADC1_Init();
 8001716:	f000 f989 	bl	8001a2c <MX_ADC1_Init>
  MX_ADC2_Init();
 800171a:	f000 f9e7 	bl	8001aec <MX_ADC2_Init>
  Displ_Init(Displ_Orientat_0);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
  Displ_CLS(BLUE);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
  Displ_BackLight('I');
*/
  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 800171e:	2201      	movs	r2, #1
 8001720:	4971      	ldr	r1, [pc, #452]	; (80018e8 <main+0x1f0>)
 8001722:	4872      	ldr	r0, [pc, #456]	; (80018ec <main+0x1f4>)
 8001724:	f003 fe31 	bl	800538a <HAL_UART_Receive_IT>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <main+0x3a>
    Error_Handler();
 800172e:	f000 fc81 	bl	8002034 <Error_Handler>
   	Error_Handler();
  }
*/

  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	2212      	movs	r2, #18
 8001738:	496d      	ldr	r1, [pc, #436]	; (80018f0 <main+0x1f8>)
 800173a:	486c      	ldr	r0, [pc, #432]	; (80018ec <main+0x1f4>)
 800173c:	f003 fd93 	bl	8005266 <HAL_UART_Transmit>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <main+0x52>
    Error_Handler();
 8001746:	f000 fc75 	bl	8002034 <Error_Handler>
    /* USER CODE BEGIN 3 */

	  //HAL_GPIO_TogglePin (LED2_PORT, LED2_PIN);

	  // Handle UART communication
	  if (rx_cmd_ready) {
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <main+0x1fc>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <main+0x6c>
		  CMD_Handler((uint8_t*)rx_buff);
 8001752:	4869      	ldr	r0, [pc, #420]	; (80018f8 <main+0x200>)
 8001754:	f7ff ff9e 	bl	8001694 <CMD_Handler>
		  rx_count = 0;
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <main+0x204>)
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <main+0x1fc>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 8001764:	4b66      	ldr	r3, [pc, #408]	; (8001900 <main+0x208>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01a      	beq.n	80017a2 <main+0xaa>
		  adc_restart = 0;
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <main+0x208>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		  //HAL_ADC_Start_IT (&hadc1);
		  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001772:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001776:	4963      	ldr	r1, [pc, #396]	; (8001904 <main+0x20c>)
 8001778:	4863      	ldr	r0, [pc, #396]	; (8001908 <main+0x210>)
 800177a:	f001 f815 	bl	80027a8 <HAL_ADC_Start_DMA>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <main+0x92>
			printf("Error re-starting ADC1 DMA\r\n");
 8001784:	4861      	ldr	r0, [pc, #388]	; (800190c <main+0x214>)
 8001786:	f004 fec1 	bl	800650c <puts>
		  }
		  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 800178a:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800178e:	4960      	ldr	r1, [pc, #384]	; (8001910 <main+0x218>)
 8001790:	4860      	ldr	r0, [pc, #384]	; (8001914 <main+0x21c>)
 8001792:	f001 f809 	bl	80027a8 <HAL_ADC_Start_DMA>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <main+0xaa>
		  	printf("Error re-starting ADC2 DMA\r\n");
 800179c:	485e      	ldr	r0, [pc, #376]	; (8001918 <main+0x220>)
 800179e:	f004 feb5 	bl	800650c <puts>
		  }
	  }

	  if (display_buffer) {
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <main+0x224>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <main+0xc6>
		  calc_display_buffer(display_buffer-1);
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <main+0x224>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd40 	bl	8001238 <calc_display_buffer>
		  display_buffer = 0;
 80017b8:	4b58      	ldr	r3, [pc, #352]	; (800191c <main+0x224>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	  }

	  if (csv_buffer) {
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <main+0x228>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <main+0xe2>
	  		  calc_csv_buffer(csv_buffer-1);
 80017c6:	4b56      	ldr	r3, [pc, #344]	; (8001920 <main+0x228>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fdfa 	bl	80013c8 <calc_csv_buffer>
	  		  csv_buffer = 0;
 80017d4:	4b52      	ldr	r3, [pc, #328]	; (8001920 <main+0x228>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 80017da:	4b52      	ldr	r3, [pc, #328]	; (8001924 <main+0x22c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	dc0b      	bgt.n	80017fa <main+0x102>
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <main+0x230>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	dc07      	bgt.n	80017fa <main+0x102>
 80017ea:	4b50      	ldr	r3, [pc, #320]	; (800192c <main+0x234>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	dc03      	bgt.n	80017fa <main+0x102>
 80017f2:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <main+0x238>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	dd28      	ble.n	800184c <main+0x154>
		  printf("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <main+0x22c>)
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <main+0x230>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <main+0x234>)
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <main+0x238>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4603      	mov	r3, r0
 800180e:	4849      	ldr	r0, [pc, #292]	; (8001934 <main+0x23c>)
 8001810:	f004 fe16 	bl	8006440 <iprintf>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <main+0x22c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	dd02      	ble.n	8001822 <main+0x12a>
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <main+0x22c>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <main+0x230>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	dd02      	ble.n	8001830 <main+0x138>
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <main+0x230>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <main+0x234>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	dd02      	ble.n	800183e <main+0x146>
 8001838:	4b3c      	ldr	r3, [pc, #240]	; (800192c <main+0x234>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <main+0x238>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	dd02      	ble.n	800184c <main+0x154>
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <main+0x238>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <main+0x22c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dd0e      	ble.n	8001872 <main+0x17a>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fb64 	bl	8000f24 <calc_process_dma_buffer>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <main+0x170>
			  printf("Processing ADC1 DMA 1st half failed\r\n");
 8001862:	4835      	ldr	r0, [pc, #212]	; (8001938 <main+0x240>)
 8001864:	f004 fe52 	bl	800650c <puts>
		  }
		  adc1_dma_l_count--;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <main+0x22c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <main+0x22c>)
 8001870:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <main+0x230>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	dd0e      	ble.n	8001898 <main+0x1a0>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 800187a:	2100      	movs	r1, #0
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff fb51 	bl	8000f24 <calc_process_dma_buffer>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <main+0x196>
	  		printf("Processing ADC1 DMA 2nd half failed\r\n");
 8001888:	482c      	ldr	r0, [pc, #176]	; (800193c <main+0x244>)
 800188a:	f004 fe3f 	bl	800650c <puts>
	  	  }
	  	  adc1_dma_h_count--;
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <main+0x230>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3b01      	subs	r3, #1
 8001894:	4a24      	ldr	r2, [pc, #144]	; (8001928 <main+0x230>)
 8001896:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <main+0x234>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	dd0e      	ble.n	80018be <main+0x1c6>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 80018a0:	2101      	movs	r1, #1
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fb3e 	bl	8000f24 <calc_process_dma_buffer>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <main+0x1bc>
	  		printf("Processing ADC2 DMA 1st half failed\r\n");
 80018ae:	4824      	ldr	r0, [pc, #144]	; (8001940 <main+0x248>)
 80018b0:	f004 fe2c 	bl	800650c <puts>
	  	  }
	  	  adc2_dma_l_count--;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <main+0x234>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <main+0x234>)
 80018bc:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <main+0x238>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f77f af41 	ble.w	800174a <main+0x52>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 80018c8:	2101      	movs	r1, #1
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff fb2a 	bl	8000f24 <calc_process_dma_buffer>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <main+0x1e4>
	  		printf("Processing ADC2 DMA 2nd half failed\r\n");
 80018d6:	481b      	ldr	r0, [pc, #108]	; (8001944 <main+0x24c>)
 80018d8:	f004 fe18 	bl	800650c <puts>
	  	  }
	   	  adc2_dma_h_count--;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <main+0x238>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <main+0x238>)
 80018e4:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 80018e6:	e730      	b.n	800174a <main+0x52>
 80018e8:	20001cfe 	.word	0x20001cfe
 80018ec:	20001cb8 	.word	0x20001cb8
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20001d14 	.word	0x20001d14
 80018f8:	20001d00 	.word	0x20001d00
 80018fc:	20001cfc 	.word	0x20001cfc
 8001900:	20001d15 	.word	0x20001d15
 8001904:	20001d28 	.word	0x20001d28
 8001908:	20001b20 	.word	0x20001b20
 800190c:	080075d0 	.word	0x080075d0
 8001910:	20003768 	.word	0x20003768
 8001914:	20001b68 	.word	0x20001b68
 8001918:	080075ec 	.word	0x080075ec
 800191c:	20001d16 	.word	0x20001d16
 8001920:	20001d17 	.word	0x20001d17
 8001924:	20001d18 	.word	0x20001d18
 8001928:	20001d1c 	.word	0x20001d1c
 800192c:	20001d20 	.word	0x20001d20
 8001930:	20001d24 	.word	0x20001d24
 8001934:	08007608 	.word	0x08007608
 8001938:	08007634 	.word	0x08007634
 800193c:	0800765c 	.word	0x0800765c
 8001940:	08007684 	.word	0x08007684
 8001944:	080076ac 	.word	0x080076ac

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	; 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	2234      	movs	r2, #52	; 0x34
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f004 fde0 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <SystemClock_Config+0xdc>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <SystemClock_Config+0xdc>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <SystemClock_Config+0xdc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001988:	2300      	movs	r3, #0
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <SystemClock_Config+0xe0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <SystemClock_Config+0xe0>)
 8001992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <SystemClock_Config+0xe0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ac:	2310      	movs	r3, #16
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b0:	2302      	movs	r3, #2
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019b8:	2308      	movs	r3, #8
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80019bc:	23b4      	movs	r3, #180	; 0xb4
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fd43 	bl	800445c <HAL_RCC_OscConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019dc:	f000 fb2a 	bl	8002034 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019e0:	f002 f9a2 	bl	8003d28 <HAL_PWREx_EnableOverDrive>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019ea:	f000 fb23 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ee:	230f      	movs	r3, #15
 80019f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f2:	2302      	movs	r3, #2
 80019f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	2105      	movs	r1, #5
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 f9db 	bl	8003dc8 <HAL_RCC_ClockConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001a18:	f000 fb0c 	bl	8002034 <Error_Handler>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3750      	adds	r7, #80	; 0x50
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000

08001a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <MX_ADC1_Init+0xbc>)
 8001a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a70:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a90:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001a92:	f000 fe45 	bl	8002720 <HAL_ADC_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001a9c:	f000 faca 	bl	8002034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001ab2:	f000 ff89 	bl	80029c8 <HAL_ADC_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001abc:	f000 faba 	bl	8002034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_ADC1_Init+0xb8>)
 8001ace:	f000 ff7b 	bl	80029c8 <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ad8:	f000 faac 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20001b20 	.word	0x20001b20
 8001ae8:	40012000 	.word	0x40012000

08001aec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b00:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <MX_ADC2_Init+0xbc>)
 8001b02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b06:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b30:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b3e:	2202      	movs	r2, #2
 8001b40:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b50:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b52:	f000 fde5 	bl	8002720 <HAL_ADC_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001b5c:	f000 fa6a 	bl	8002034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b72:	f000 ff29 	bl	80029c8 <HAL_ADC_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001b7c:	f000 fa5a 	bl	8002034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b80:	230b      	movs	r3, #11
 8001b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_ADC2_Init+0xb8>)
 8001b8e:	f000 ff1b 	bl	80029c8 <HAL_ADC_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001b98:	f000 fa4c 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20001b68 	.word	0x20001b68
 8001ba8:	40012100 	.word	0x40012100

08001bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001bde:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8001be2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf0:	4813      	ldr	r0, [pc, #76]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001bf2:	f002 fed1 	bl	8004998 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bfc:	f000 fa1a 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001c0e:	f003 f81a 	bl	8004c46 <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c18:	f000 fa0c 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_TIM2_Init+0x94>)
 8001c2a:	f003 fa3f 	bl	80050ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f000 f9fe 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20001c70 	.word	0x20001c70

08001c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART2_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	f003 faa6 	bl	80051cc <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f000 f9d5 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20001cb8 	.word	0x20001cb8
 8001c94:	40004400 	.word	0x40004400

08001c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_DMA_Init+0x4c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <MX_DMA_Init+0x4c>)
 8001ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MX_DMA_Init+0x4c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2038      	movs	r0, #56	; 0x38
 8001cc0:	f001 fa0d 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cc4:	2038      	movs	r0, #56	; 0x38
 8001cc6:	f001 fa26 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	203a      	movs	r0, #58	; 0x3a
 8001cd0:	f001 fa05 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cd4:	203a      	movs	r0, #58	; 0x3a
 8001cd6:	f001 fa1e 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <MX_GPIO_Init+0x184>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001d74:	483e      	ldr	r0, [pc, #248]	; (8001e70 <MX_GPIO_Init+0x188>)
 8001d76:	f001 ff7f 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	483d      	ldr	r0, [pc, #244]	; (8001e74 <MX_GPIO_Init+0x18c>)
 8001d80:	f001 ff7a 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8a:	4839      	ldr	r0, [pc, #228]	; (8001e70 <MX_GPIO_Init+0x188>)
 8001d8c:	f001 ff74 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	4838      	ldr	r0, [pc, #224]	; (8001e78 <MX_GPIO_Init+0x190>)
 8001d96:	f001 ff6f 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4830      	ldr	r0, [pc, #192]	; (8001e74 <MX_GPIO_Init+0x18c>)
 8001db2:	f001 fdcd 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin;
 8001db6:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4828      	ldr	r0, [pc, #160]	; (8001e70 <MX_GPIO_Init+0x188>)
 8001dd0:	f001 fdbe 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_DC_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin|TOUCH_CS_Pin;
 8001dd4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4820      	ldr	r0, [pc, #128]	; (8001e70 <MX_GPIO_Init+0x188>)
 8001dee:	f001 fdaf 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	481a      	ldr	r0, [pc, #104]	; (8001e74 <MX_GPIO_Init+0x18c>)
 8001e0a:	f001 fda1 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4815      	ldr	r0, [pc, #84]	; (8001e78 <MX_GPIO_Init+0x190>)
 8001e24:	f001 fd94 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8001e28:	2340      	movs	r3, #64	; 0x40
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <MX_GPIO_Init+0x190>)
 8001e40:	f001 fd86 	bl	8003950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f001 f948 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f001 f961 	bl	8003116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2028      	movs	r0, #40	; 0x28
 8001e5a:	f001 f940 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e5e:	2028      	movs	r0, #40	; 0x28
 8001e60:	f001 f959 	bl	8003116 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020400 	.word	0x40020400

08001e7c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x34>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_ADC_ConvCpltCallback+0x38>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <HAL_ADC_ConvCpltCallback+0x38>)
 8001e94:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8001e96:	e004      	b.n	8001ea2 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20001b20 	.word	0x20001b20
 8001eb4:	20001d1c 	.word	0x20001d1c
 8001eb8:	20001d24 	.word	0x20001d24

08001ebc <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001ed4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001ee0:	6013      	str	r3, [r2, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20001b20 	.word	0x20001b20
 8001ef4:	20001d18 	.word	0x20001d18
 8001ef8:	20001d20 	.word	0x20001d20

08001efc <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_ADC_ErrorCallback+0x94>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d102      	bne.n	8001f12 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e001      	b.n	8001f16 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d82c      	bhi.n	8001f78 <HAL_ADC_ErrorCallback+0x7c>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_ADC_ErrorCallback+0x28>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f49 	.word	0x08001f49
 8001f2c:	08001f59 	.word	0x08001f59
 8001f30:	08001f79 	.word	0x08001f79
 8001f34:	08001f69 	.word	0x08001f69
	case HAL_ADC_ERROR_NONE:
		printf("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4814      	ldr	r0, [pc, #80]	; (8001f94 <HAL_ADC_ErrorCallback+0x98>)
 8001f42:	f004 fa7d 	bl	8006440 <iprintf>
		break;
 8001f46:	e01e      	b.n	8001f86 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		printf("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	4811      	ldr	r0, [pc, #68]	; (8001f98 <HAL_ADC_ErrorCallback+0x9c>)
 8001f52:	f004 fa75 	bl	8006440 <iprintf>
		break;
 8001f56:	e016      	b.n	8001f86 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		printf("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <HAL_ADC_ErrorCallback+0xa0>)
 8001f62:	f004 fa6d 	bl	8006440 <iprintf>
		break;
 8001f66:	e00e      	b.n	8001f86 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		printf("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <HAL_ADC_ErrorCallback+0xa4>)
 8001f72:	f004 fa65 	bl	8006440 <iprintf>
		break;
 8001f76:	e006      	b.n	8001f86 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		printf("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		printf("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <HAL_ADC_ErrorCallback+0xa8>)
 8001f80:	f004 fa5e 	bl	8006440 <iprintf>
	}
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20001b20 	.word	0x20001b20
 8001f94:	080076d4 	.word	0x080076d4
 8001f98:	080076f0 	.word	0x080076f0
 8001f9c:	08007714 	.word	0x08007714
 8001fa0:	08007734 	.word	0x08007734
 8001fa4:	08007750 	.word	0x08007750

08001fa8 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	2b13      	cmp	r3, #19
 8001fb6:	d902      	bls.n	8001fbe <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4918      	ldr	r1, [pc, #96]	; (8002024 <HAL_UART_RxCpltCallback+0x7c>)
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <HAL_UART_RxCpltCallback+0x80>)
 8001fc4:	f003 f9e1 	bl	800538a <HAL_UART_Receive_IT>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d124      	bne.n	8002018 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_UART_RxCpltCallback+0x7c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d00f      	beq.n	8001ff6 <HAL_UART_RxCpltCallback+0x4e>
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_UART_RxCpltCallback+0x7c>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b0d      	cmp	r3, #13
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	b291      	uxth	r1, r2
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 8001fe8:	8011      	strh	r1, [r2, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_UART_RxCpltCallback+0x7c>)
 8001fee:	7819      	ldrb	r1, [r3, #0]
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_UART_RxCpltCallback+0x84>)
 8001ff2:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 8001ff4:	e010      	b.n	8002018 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_UART_RxCpltCallback+0x88>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	b291      	uxth	r1, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_UART_RxCpltCallback+0x78>)
 800200e:	8011      	strh	r1, [r2, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_UART_RxCpltCallback+0x84>)
 8002014:	2100      	movs	r1, #0
 8002016:	5499      	strb	r1, [r3, r2]
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20001cfc 	.word	0x20001cfc
 8002024:	20001cfe 	.word	0x20001cfe
 8002028:	20001cb8 	.word	0x20001cb8
 800202c:	20001d00 	.word	0x20001d00
 8002030:	20001d14 	.word	0x20001d14

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <Error_Handler+0x10>)
 800203a:	f004 fa01 	bl	8006440 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203e:	b672      	cpsid	i
}
 8002040:	bf00      	nop
    __disable_irq();
    while (1)
 8002042:	e7fe      	b.n	8002042 <Error_Handler+0xe>
 8002044:	08007770 	.word	0x08007770

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_MspInit+0x4c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_MspInit+0x4c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_MspInit+0x4c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_MspInit+0x4c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_MspInit+0x4c>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_MspInit+0x4c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002086:	2007      	movs	r0, #7
 8002088:	f001 f81e 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a79      	ldr	r2, [pc, #484]	; (800229c <HAL_ADC_MspInit+0x204>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d173      	bne.n	80021a2 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a77      	ldr	r2, [pc, #476]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a70      	ldr	r2, [pc, #448]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800210e:	2301      	movs	r3, #1
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	2303      	movs	r3, #3
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	4860      	ldr	r0, [pc, #384]	; (80022a4 <HAL_ADC_MspInit+0x20c>)
 8002122:	f001 fc15 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002126:	2301      	movs	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	485b      	ldr	r0, [pc, #364]	; (80022a8 <HAL_ADC_MspInit+0x210>)
 800213a:	f001 fc09 	bl	8003950 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002140:	4a5b      	ldr	r2, [pc, #364]	; (80022b0 <HAL_ADC_MspInit+0x218>)
 8002142:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800214a:	4b58      	ldr	r3, [pc, #352]	; (80022ac <HAL_ADC_MspInit+0x214>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002150:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002156:	4b55      	ldr	r3, [pc, #340]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800215e:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002164:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002166:	4b51      	ldr	r3, [pc, #324]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002168:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800216e:	4b4f      	ldr	r3, [pc, #316]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002176:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002178:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800217c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217e:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002184:	4849      	ldr	r0, [pc, #292]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002186:	f000 ffe1 	bl	800314c <HAL_DMA_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002190:	f7ff ff50 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a45      	ldr	r2, [pc, #276]	; (80022ac <HAL_ADC_MspInit+0x214>)
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
 800219a:	4a44      	ldr	r2, [pc, #272]	; (80022ac <HAL_ADC_MspInit+0x214>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021a0:	e078      	b.n	8002294 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a43      	ldr	r2, [pc, #268]	; (80022b4 <HAL_ADC_MspInit+0x21c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d173      	bne.n	8002294 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ba:	6453      	str	r3, [r2, #68]	; 0x44
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a2c      	ldr	r2, [pc, #176]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_ADC_MspInit+0x208>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002200:	2302      	movs	r3, #2
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002204:	2303      	movs	r3, #3
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	4824      	ldr	r0, [pc, #144]	; (80022a4 <HAL_ADC_MspInit+0x20c>)
 8002214:	f001 fb9c 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002218:	2302      	movs	r3, #2
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221c:	2303      	movs	r3, #3
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	481f      	ldr	r0, [pc, #124]	; (80022a8 <HAL_ADC_MspInit+0x210>)
 800222c:	f001 fb90 	bl	8003950 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002232:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_ADC_MspInit+0x224>)
 8002234:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002238:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 800224c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002250:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002258:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 800225c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002260:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002268:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 800226c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002270:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002278:	480f      	ldr	r0, [pc, #60]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 800227a:	f000 ff67 	bl	800314c <HAL_DMA_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8002284:	f7ff fed6 	bl	8002034 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_ADC_MspInit+0x220>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002294:	bf00      	nop
 8002296:	3738      	adds	r7, #56	; 0x38
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40012000 	.word	0x40012000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	20001bb0 	.word	0x20001bb0
 80022b0:	40026410 	.word	0x40026410
 80022b4:	40012100 	.word	0x40012100
 80022b8:	20001c10 	.word	0x20001c10
 80022bc:	40026440 	.word	0x40026440

080022c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d115      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_TIM_Base_MspInit+0x48>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_TIM_Base_MspInit+0x48>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_TIM_Base_MspInit+0x48>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	201c      	movs	r0, #28
 80022f4:	f000 fef3 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f8:	201c      	movs	r0, #28
 80022fa:	f000 ff0c 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_UART_MspInit+0x94>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d133      	bne.n	8002396 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_UART_MspInit+0x98>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_UART_MspInit+0x98>)
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_UART_MspInit+0x98>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_UART_MspInit+0x98>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <HAL_UART_MspInit+0x98>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_UART_MspInit+0x98>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002366:	230c      	movs	r3, #12
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002376:	2307      	movs	r3, #7
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <HAL_UART_MspInit+0x9c>)
 8002382:	f001 fae5 	bl	8003950 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	2026      	movs	r0, #38	; 0x26
 800238c:	f000 fea7 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002390:	2026      	movs	r0, #38	; 0x26
 8002392:	f000 fec0 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40004400 	.word	0x40004400
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 f972 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8002404:	2010      	movs	r0, #16
 8002406:	f001 fc6b 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <TIM2_IRQHandler+0x18>)
 8002416:	f002 fb0e 	bl	8004a36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 800241a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <TIM2_IRQHandler+0x1c>)
 8002420:	f001 fc43 	bl	8003caa <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20001c70 	.word	0x20001c70
 800242c:	40020000 	.word	0x40020000

08002430 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <USART2_IRQHandler+0x10>)
 8002436:	f002 ffd9 	bl	80053ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20001cb8 	.word	0x20001cb8

08002444 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002448:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800244c:	f001 fc48 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA2_Stream0_IRQHandler+0x10>)
 800245a:	f001 f80f 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20001bb0 	.word	0x20001bb0

08002468 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA2_Stream2_IRQHandler+0x10>)
 800246e:	f001 f805 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20001c10 	.word	0x20001c10

0800247c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00a      	b.n	80024a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248e:	f3af 8000 	nop.w
 8002492:	4601      	mov	r1, r0
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dbf0      	blt.n	800248e <_read+0x12>
  }

  return len;
 80024ac:	687b      	ldr	r3, [r7, #4]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e009      	b.n	80024dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f8ff 	bl	80016d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dbf1      	blt.n	80024c8 <_write+0x12>
  }
  return len;
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_close>:

int _close(int file)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002516:	605a      	str	r2, [r3, #4]
  return 0;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_isatty>:

int _isatty(int file)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f003 ffd0 	bl	800652c <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	200051a8 	.word	0x200051a8
 80025c0:	20005300 	.word	0x20005300

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ec:	480d      	ldr	r0, [pc, #52]	; (8002624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ee:	490e      	ldr	r1, [pc, #56]	; (8002628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002604:	4c0b      	ldr	r4, [pc, #44]	; (8002634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002612:	f7ff ffd7 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002616:	f003 ff8f 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261a:	f7ff f86d 	bl	80016f8 <main>
  bx  lr    
 800261e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800262c:	08007808 	.word	0x08007808
  ldr r2, =_sbss
 8002630:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002634:	200052fc 	.word	0x200052fc

08002638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC_IRQHandler>
	...

0800263c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <HAL_Init+0x40>)
 8002646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_Init+0x40>)
 8002652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <HAL_Init+0x40>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 fd2f 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f808 	bl	8002680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002670:	f7ff fcea 	bl	8002048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_InitTick+0x54>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x58>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fd47 	bl	8003132 <HAL_SYSTICK_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00e      	b.n	80026cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d80a      	bhi.n	80026ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026bc:	f000 fd0f 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <HAL_InitTick+0x5c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000014 	.word	0x20000014
 80026d8:	2000001c 	.word	0x2000001c
 80026dc:	20000018 	.word	0x20000018

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000001c 	.word	0x2000001c
 8002704:	200051ac 	.word	0x200051ac

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	200051ac 	.word	0x200051ac

08002720 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e033      	b.n	800279e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fcaa 	bl	8002098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002766:	f023 0302 	bic.w	r3, r3, #2
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa5a 	bl	8002c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
 800278e:	e001      	b.n	8002794 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x1e>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e0e9      	b.n	800299a <HAL_ADC_Start_DMA+0x1f2>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d018      	beq.n	800280e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ec:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_ADC_Start_DMA+0x1fc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a6d      	ldr	r2, [pc, #436]	; (80029a8 <HAL_ADC_Start_DMA+0x200>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0c9a      	lsrs	r2, r3, #18
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002800:	e002      	b.n	8002808 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3b01      	subs	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f9      	bne.n	8002802 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281c:	d107      	bne.n	800282e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800282c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	f040 80a1 	bne.w	8002980 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002868:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287c:	d106      	bne.n	800288c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f023 0206 	bic.w	r2, r3, #6
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
 800288a:	e002      	b.n	8002892 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_ADC_Start_DMA+0x204>)
 800289c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	4a43      	ldr	r2, [pc, #268]	; (80029b0 <HAL_ADC_Start_DMA+0x208>)
 80028a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	4a42      	ldr	r2, [pc, #264]	; (80029b4 <HAL_ADC_Start_DMA+0x20c>)
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	4a41      	ldr	r2, [pc, #260]	; (80029b8 <HAL_ADC_Start_DMA+0x210>)
 80028b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	334c      	adds	r3, #76	; 0x4c
 80028ea:	4619      	mov	r1, r3
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f000 fcda 	bl	80032a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d12a      	bne.n	8002956 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <HAL_ADC_Start_DMA+0x214>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d015      	beq.n	8002936 <HAL_ADC_Start_DMA+0x18e>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2c      	ldr	r2, [pc, #176]	; (80029c0 <HAL_ADC_Start_DMA+0x218>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d105      	bne.n	8002920 <HAL_ADC_Start_DMA+0x178>
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_ADC_Start_DMA+0x204>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_ADC_Start_DMA+0x21c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d136      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_ADC_Start_DMA+0x204>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d130      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d129      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e020      	b.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_ADC_Start_DMA+0x214>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d11b      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d114      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	e00b      	b.n	8002998 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f043 0210 	orr.w	r2, r3, #16
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000014 	.word	0x20000014
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	40012300 	.word	0x40012300
 80029b0:	08002e25 	.word	0x08002e25
 80029b4:	08002edf 	.word	0x08002edf
 80029b8:	08002efb 	.word	0x08002efb
 80029bc:	40012000 	.word	0x40012000
 80029c0:	40012100 	.word	0x40012100
 80029c4:	40012200 	.word	0x40012200

080029c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1c>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e113      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x244>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d925      	bls.n	8002a40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3b1e      	subs	r3, #30
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43da      	mvns	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	400a      	ands	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68d9      	ldr	r1, [r3, #12]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4403      	add	r3, r0
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	409a      	lsls	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	e022      	b.n	8002a86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	2207      	movs	r2, #7
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4403      	add	r3, r0
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d824      	bhi.n	8002ad8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b05      	subs	r3, #5
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	400a      	ands	r2, r1
 8002aae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad6:	e04c      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d824      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3b23      	subs	r3, #35	; 0x23
 8002af2:	221f      	movs	r2, #31
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43da      	mvns	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	400a      	ands	r2, r1
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b23      	subs	r3, #35	; 0x23
 8002b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
 8002b28:	e023      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b41      	subs	r3, #65	; 0x41
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	400a      	ands	r2, r1
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	3b41      	subs	r3, #65	; 0x41
 8002b66:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_ADC_ConfigChannel+0x250>)
 8002b74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_ADC_ConfigChannel+0x254>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1d8>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b12      	cmp	r3, #18
 8002b86:	d10b      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_ADC_ConfigChannel+0x254>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d12b      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_ADC_ConfigChannel+0x258>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <HAL_ADC_ConfigChannel+0x1f4>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b11      	cmp	r3, #17
 8002bba:	d122      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x258>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d111      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_ADC_ConfigChannel+0x260>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9a      	lsrs	r2, r3, #18
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf4:	e002      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	40012000 	.word	0x40012000
 8002c20:	10000012 	.word	0x10000012
 8002c24:	20000014 	.word	0x20000014
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c34:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <ADC_Init+0x1f0>)
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <ADC_Init+0x1f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e00f      	b.n	8002d2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0202 	bic.w	r2, r2, #2
 8002d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	3b01      	subs	r3, #1
 8002d84:	035a      	lsls	r2, r3, #13
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	e007      	b.n	8002da0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	051a      	lsls	r2, r3, #20
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de2:	025a      	lsls	r2, r3, #9
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	029a      	lsls	r2, r3, #10
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012300 	.word	0x40012300
 8002e20:	0f000001 	.word	0x0f000001

08002e24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d13c      	bne.n	8002eb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d12b      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d127      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d119      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0220 	bic.w	r2, r2, #32
 8002e8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7fe ffe3 	bl	8001e7c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eb6:	e00e      	b.n	8002ed6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff f819 	bl	8001efc <HAL_ADC_ErrorCallback>
}
 8002eca:	e004      	b.n	8002ed6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7fe ffe5 	bl	8001ebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7fe ffee 	bl	8001efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fad6 	bl	8002708 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff fabd 	bl	8002708 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb01 	bl	8003858 <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fab8 	bl	80037ec <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	223f      	movs	r2, #63	; 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e040      	b.n	8003350 <HAL_DMA_Start_IT+0xa8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12f      	bne.n	8003342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa4a 	bl	8003790 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e005      	b.n	800334e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003366:	f7ff f9cf 	bl	8002708 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d008      	beq.n	800338a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e052      	b.n	8003430 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0216 	bic.w	r2, r2, #22
 8003398:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_DMA_Abort+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033da:	e013      	b.n	8003404 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033dc:	f7ff f994 	bl	8002708 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d90c      	bls.n	8003404 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e015      	b.n	8003430 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e4      	bne.n	80033dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	223f      	movs	r2, #63	; 0x3f
 8003418:	409a      	lsls	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e00c      	b.n	8003470 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2205      	movs	r2, #5
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003488:	4b8e      	ldr	r3, [pc, #568]	; (80036c4 <HAL_DMA_IRQHandler+0x248>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a8e      	ldr	r2, [pc, #568]	; (80036c8 <HAL_DMA_IRQHandler+0x24c>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0a9b      	lsrs	r3, r3, #10
 8003494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	2208      	movs	r2, #8
 80034a8:	409a      	lsls	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01a      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2208      	movs	r2, #8
 80034d6:	409a      	lsls	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	2201      	movs	r2, #1
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	2204      	movs	r2, #4
 8003524:	409a      	lsls	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2204      	movs	r2, #4
 8003542:	409a      	lsls	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	2210      	movs	r2, #16
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d043      	beq.n	80035ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d03c      	beq.n	80035ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2210      	movs	r2, #16
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d024      	beq.n	80035ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
 80035aa:	e01f      	b.n	80035ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01b      	beq.n	80035ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e016      	b.n	80035ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0208 	bic.w	r2, r2, #8
 80035da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	2220      	movs	r2, #32
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 808f 	beq.w	800371c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8087 	beq.w	800371c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	2220      	movs	r2, #32
 8003614:	409a      	lsls	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b05      	cmp	r3, #5
 8003624:	d136      	bne.n	8003694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0216 	bic.w	r2, r2, #22
 8003634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <HAL_DMA_IRQHandler+0x1da>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0208 	bic.w	r2, r2, #8
 8003664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	223f      	movs	r2, #63	; 0x3f
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003686:	2b00      	cmp	r3, #0
 8003688:	d07e      	beq.n	8003788 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
        }
        return;
 8003692:	e079      	b.n	8003788 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10d      	bne.n	80036cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d031      	beq.n	800371c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e02c      	b.n	800371c <HAL_DMA_IRQHandler+0x2a0>
 80036c2:	bf00      	nop
 80036c4:	20000014 	.word	0x20000014
 80036c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d023      	beq.n	800371c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
 80036dc:	e01e      	b.n	800371c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10f      	bne.n	800370c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0210 	bic.w	r2, r2, #16
 80036fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	2b00      	cmp	r3, #0
 8003722:	d032      	beq.n	800378a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2205      	movs	r2, #5
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3301      	adds	r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	429a      	cmp	r2, r3
 8003752:	d307      	bcc.n	8003764 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f2      	bne.n	8003748 <HAL_DMA_IRQHandler+0x2cc>
 8003762:	e000      	b.n	8003766 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003764:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
 8003786:	e000      	b.n	800378a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003788:	bf00      	nop
    }
  }
}
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d108      	bne.n	80037d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ce:	e007      	b.n	80037e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3b10      	subs	r3, #16
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <DMA_CalcBaseAndBitshift+0x64>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003806:	4a13      	ldr	r2, [pc, #76]	; (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d909      	bls.n	800382e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	659a      	str	r2, [r3, #88]	; 0x58
 800382c:	e007      	b.n	800383e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	aaaaaaab 	.word	0xaaaaaaab
 8003854:	080077bc 	.word	0x080077bc

08003858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11f      	bne.n	80038b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d856      	bhi.n	8003926 <DMA_CheckFifoParam+0xce>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <DMA_CheckFifoParam+0x28>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a3 	.word	0x080038a3
 8003888:	08003891 	.word	0x08003891
 800388c:	08003927 	.word	0x08003927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d046      	beq.n	800392a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e043      	b.n	800392a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038aa:	d140      	bne.n	800392e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e03d      	b.n	800392e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ba:	d121      	bne.n	8003900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d837      	bhi.n	8003932 <DMA_CheckFifoParam+0xda>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x70>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038df 	.word	0x080038df
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	080038f1 	.word	0x080038f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e030      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d025      	beq.n	8003936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e022      	b.n	8003936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f8:	d11f      	bne.n	800393a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038fe:	e01c      	b.n	800393a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d903      	bls.n	800390e <DMA_CheckFifoParam+0xb6>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d003      	beq.n	8003914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800390c:	e018      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      break;
 8003912:	e015      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e00b      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 8003926:	bf00      	nop
 8003928:	e00a      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e008      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
 8003930:	e006      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;   
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
    }
  } 
  
  return status; 
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e165      	b.n	8003c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	f040 8154 	bne.w	8003c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d005      	beq.n	80039a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d130      	bne.n	8003a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ae 	beq.w	8003c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a5c      	ldr	r2, [pc, #368]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003af2:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_GPIO_Init+0x304>)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4f      	ldr	r2, [pc, #316]	; (8003c58 <HAL_GPIO_Init+0x308>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d025      	beq.n	8003b6a <HAL_GPIO_Init+0x21a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4e      	ldr	r2, [pc, #312]	; (8003c5c <HAL_GPIO_Init+0x30c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01f      	beq.n	8003b66 <HAL_GPIO_Init+0x216>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4d      	ldr	r2, [pc, #308]	; (8003c60 <HAL_GPIO_Init+0x310>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d019      	beq.n	8003b62 <HAL_GPIO_Init+0x212>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4c      	ldr	r2, [pc, #304]	; (8003c64 <HAL_GPIO_Init+0x314>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_GPIO_Init+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <HAL_GPIO_Init+0x318>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <HAL_GPIO_Init+0x20a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <HAL_GPIO_Init+0x31c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <HAL_GPIO_Init+0x206>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a49      	ldr	r2, [pc, #292]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_GPIO_Init+0x202>
 8003b4e:	2306      	movs	r3, #6
 8003b50:	e00c      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b52:	2307      	movs	r3, #7
 8003b54:	e00a      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b56:	2305      	movs	r3, #5
 8003b58:	e008      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e006      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e004      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f002 0203 	and.w	r2, r2, #3
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	4093      	lsls	r3, r2
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7c:	4935      	ldr	r1, [pc, #212]	; (8003c54 <HAL_GPIO_Init+0x304>)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bae:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c02:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3301      	adds	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	f67f ae96 	bls.w	800396c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3724      	adds	r7, #36	; 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40013800 	.word	0x40013800
 8003c58:	40020000 	.word	0x40020000
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	40020800 	.word	0x40020800
 8003c64:	40020c00 	.word	0x40020c00
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40021400 	.word	0x40021400
 8003c70:	40021800 	.word	0x40021800
 8003c74:	40013c00 	.word	0x40013c00

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cbc:	887a      	ldrh	r2, [r7, #2]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	041a      	lsls	r2, r3, #16
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	400b      	ands	r3, r1
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	619a      	str	r2, [r3, #24]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cea:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf6:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f806 	bl	8003d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40013c00 	.word	0x40013c00

08003d10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <HAL_PWREx_EnableOverDrive+0x94>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d54:	f7fe fcd8 	bl	8002708 <HAL_GetTick>
 8003d58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d5a:	e009      	b.n	8003d70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d5c:	f7fe fcd4 	bl	8002708 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6a:	d901      	bls.n	8003d70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e01f      	b.n	8003db0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d70:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d7e:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7fe fcc0 	bl	8002708 <HAL_GetTick>
 8003d88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d8a:	e009      	b.n	8003da0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d8c:	f7fe fcbc 	bl	8002708 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d9a:	d901      	bls.n	8003da0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e007      	b.n	8003db0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dac:	d1ee      	bne.n	8003d8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	420e0040 	.word	0x420e0040
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	420e0044 	.word	0x420e0044

08003dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0cc      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_RCC_ClockConfig+0x1b8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d90c      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b65      	ldr	r3, [pc, #404]	; (8003f80 <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b63      	ldr	r3, [pc, #396]	; (8003f80 <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0b8      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d020      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a58      	ldr	r2, [pc, #352]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e40:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	494d      	ldr	r1, [pc, #308]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d044      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d107      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d119      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07f      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e86:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06f      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e067      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea6:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4934      	ldr	r1, [pc, #208]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb8:	f7fe fc26 	bl	8002708 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec0:	f7fe fc22 	bl	8002708 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e04f      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 020c 	and.w	r2, r3, #12
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1eb      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d20c      	bcs.n	8003f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e032      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4916      	ldr	r1, [pc, #88]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	490e      	ldr	r1, [pc, #56]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f4e:	f000 f855 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8003f52:	4602      	mov	r2, r0
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	490a      	ldr	r1, [pc, #40]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	5ccb      	ldrb	r3, [r1, r3]
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fb86 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023c00 	.word	0x40023c00
 8003f84:	40023800 	.word	0x40023800
 8003f88:	080077a4 	.word	0x080077a4
 8003f8c:	20000014 	.word	0x20000014
 8003f90:	20000018 	.word	0x20000018

08003f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000014 	.word	0x20000014

08003fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fb0:	f7ff fff0 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0a9b      	lsrs	r3, r3, #10
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	080077b4 	.word	0x080077b4

08003fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fd8:	f7ff ffdc 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0b5b      	lsrs	r3, r3, #13
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	080077b4 	.word	0x080077b4

08003ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004000:	b0ae      	sub	sp, #184	; 0xb8
 8004002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004022:	4bcb      	ldr	r3, [pc, #812]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b0c      	cmp	r3, #12
 800402c:	f200 8206 	bhi.w	800443c <HAL_RCC_GetSysClockFreq+0x440>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800443d 	.word	0x0800443d
 8004040:	0800443d 	.word	0x0800443d
 8004044:	0800443d 	.word	0x0800443d
 8004048:	08004075 	.word	0x08004075
 800404c:	0800443d 	.word	0x0800443d
 8004050:	0800443d 	.word	0x0800443d
 8004054:	0800443d 	.word	0x0800443d
 8004058:	0800407d 	.word	0x0800407d
 800405c:	0800443d 	.word	0x0800443d
 8004060:	0800443d 	.word	0x0800443d
 8004064:	0800443d 	.word	0x0800443d
 8004068:	0800426d 	.word	0x0800426d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4bb9      	ldr	r3, [pc, #740]	; (8004354 <HAL_RCC_GetSysClockFreq+0x358>)
 800406e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004072:	e1e7      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004074:	4bb8      	ldr	r3, [pc, #736]	; (8004358 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800407a:	e1e3      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4bb4      	ldr	r3, [pc, #720]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004088:	4bb1      	ldr	r3, [pc, #708]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d071      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004094:	4bae      	ldr	r3, [pc, #696]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	099b      	lsrs	r3, r3, #6
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80040a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ba:	4622      	mov	r2, r4
 80040bc:	462b      	mov	r3, r5
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	0159      	lsls	r1, r3, #5
 80040c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040cc:	0150      	lsls	r0, r2, #5
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4621      	mov	r1, r4
 80040d4:	1a51      	subs	r1, r2, r1
 80040d6:	6439      	str	r1, [r7, #64]	; 0x40
 80040d8:	4629      	mov	r1, r5
 80040da:	eb63 0301 	sbc.w	r3, r3, r1
 80040de:	647b      	str	r3, [r7, #68]	; 0x44
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80040ec:	4649      	mov	r1, r9
 80040ee:	018b      	lsls	r3, r1, #6
 80040f0:	4641      	mov	r1, r8
 80040f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040f6:	4641      	mov	r1, r8
 80040f8:	018a      	lsls	r2, r1, #6
 80040fa:	4641      	mov	r1, r8
 80040fc:	1a51      	subs	r1, r2, r1
 80040fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004100:	4649      	mov	r1, r9
 8004102:	eb63 0301 	sbc.w	r3, r3, r1
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004114:	4649      	mov	r1, r9
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4641      	mov	r1, r8
 800411a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411e:	4641      	mov	r1, r8
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4622      	mov	r2, r4
 800412a:	189b      	adds	r3, r3, r2
 800412c:	633b      	str	r3, [r7, #48]	; 0x30
 800412e:	462b      	mov	r3, r5
 8004130:	460a      	mov	r2, r1
 8004132:	eb42 0303 	adc.w	r3, r2, r3
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004144:	4629      	mov	r1, r5
 8004146:	024b      	lsls	r3, r1, #9
 8004148:	4621      	mov	r1, r4
 800414a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800414e:	4621      	mov	r1, r4
 8004150:	024a      	lsls	r2, r1, #9
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004160:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004164:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004168:	f7fc fd5e 	bl	8000c28 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004176:	e067      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004178:	4b75      	ldr	r3, [pc, #468]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004184:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	67bb      	str	r3, [r7, #120]	; 0x78
 8004192:	2300      	movs	r3, #0
 8004194:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004196:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ac:	0150      	lsls	r0, r2, #5
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4621      	mov	r1, r4
 80041b4:	1a51      	subs	r1, r2, r1
 80041b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80041b8:	4629      	mov	r1, r5
 80041ba:	eb63 0301 	sbc.w	r3, r3, r1
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80041cc:	4649      	mov	r1, r9
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	4641      	mov	r1, r8
 80041d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d6:	4641      	mov	r1, r8
 80041d8:	018a      	lsls	r2, r1, #6
 80041da:	4641      	mov	r1, r8
 80041dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80041e0:	4649      	mov	r1, r9
 80041e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041fa:	4692      	mov	sl, r2
 80041fc:	469b      	mov	fp, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb1a 0303 	adds.w	r3, sl, r3
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	462b      	mov	r3, r5
 8004208:	eb4b 0303 	adc.w	r3, fp, r3
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800421a:	4629      	mov	r1, r5
 800421c:	028b      	lsls	r3, r1, #10
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004224:	4621      	mov	r1, r4
 8004226:	028a      	lsls	r2, r1, #10
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004230:	2200      	movs	r2, #0
 8004232:	673b      	str	r3, [r7, #112]	; 0x70
 8004234:	677a      	str	r2, [r7, #116]	; 0x74
 8004236:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800423a:	f7fc fcf5 	bl	8000c28 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4613      	mov	r3, r2
 8004244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800425a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800425e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004262:	fbb2 f3f3 	udiv	r3, r2, r3
 8004266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800426a:	e0eb      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d06b      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	4b32      	ldr	r3, [pc, #200]	; (8004350 <HAL_RCC_GetSysClockFreq+0x354>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	2200      	movs	r2, #0
 800428c:	66bb      	str	r3, [r7, #104]	; 0x68
 800428e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004296:	663b      	str	r3, [r7, #96]	; 0x60
 8004298:	2300      	movs	r3, #0
 800429a:	667b      	str	r3, [r7, #100]	; 0x64
 800429c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80042a0:	4622      	mov	r2, r4
 80042a2:	462b      	mov	r3, r5
 80042a4:	f04f 0000 	mov.w	r0, #0
 80042a8:	f04f 0100 	mov.w	r1, #0
 80042ac:	0159      	lsls	r1, r3, #5
 80042ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b2:	0150      	lsls	r0, r2, #5
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4621      	mov	r1, r4
 80042ba:	1a51      	subs	r1, r2, r1
 80042bc:	61b9      	str	r1, [r7, #24]
 80042be:	4629      	mov	r1, r5
 80042c0:	eb63 0301 	sbc.w	r3, r3, r1
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80042d2:	4659      	mov	r1, fp
 80042d4:	018b      	lsls	r3, r1, #6
 80042d6:	4651      	mov	r1, sl
 80042d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042dc:	4651      	mov	r1, sl
 80042de:	018a      	lsls	r2, r1, #6
 80042e0:	4651      	mov	r1, sl
 80042e2:	ebb2 0801 	subs.w	r8, r2, r1
 80042e6:	4659      	mov	r1, fp
 80042e8:	eb63 0901 	sbc.w	r9, r3, r1
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004300:	4690      	mov	r8, r2
 8004302:	4699      	mov	r9, r3
 8004304:	4623      	mov	r3, r4
 8004306:	eb18 0303 	adds.w	r3, r8, r3
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	462b      	mov	r3, r5
 800430e:	eb49 0303 	adc.w	r3, r9, r3
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004320:	4629      	mov	r1, r5
 8004322:	024b      	lsls	r3, r1, #9
 8004324:	4621      	mov	r1, r4
 8004326:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800432a:	4621      	mov	r1, r4
 800432c:	024a      	lsls	r2, r1, #9
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004336:	2200      	movs	r2, #0
 8004338:	65bb      	str	r3, [r7, #88]	; 0x58
 800433a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800433c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004340:	f7fc fc72 	bl	8000c28 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800434e:	e065      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x420>
 8004350:	40023800 	.word	0x40023800
 8004354:	00f42400 	.word	0x00f42400
 8004358:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435c:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCC_GetSysClockFreq+0x458>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	2200      	movs	r2, #0
 8004364:	4618      	mov	r0, r3
 8004366:	4611      	mov	r1, r2
 8004368:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
 800436e:	2300      	movs	r3, #0
 8004370:	657b      	str	r3, [r7, #84]	; 0x54
 8004372:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004376:	4642      	mov	r2, r8
 8004378:	464b      	mov	r3, r9
 800437a:	f04f 0000 	mov.w	r0, #0
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	0159      	lsls	r1, r3, #5
 8004384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004388:	0150      	lsls	r0, r2, #5
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4641      	mov	r1, r8
 8004390:	1a51      	subs	r1, r2, r1
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	4649      	mov	r1, r9
 8004396:	eb63 0301 	sbc.w	r3, r3, r1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80043a8:	4659      	mov	r1, fp
 80043aa:	018b      	lsls	r3, r1, #6
 80043ac:	4651      	mov	r1, sl
 80043ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043b2:	4651      	mov	r1, sl
 80043b4:	018a      	lsls	r2, r1, #6
 80043b6:	4651      	mov	r1, sl
 80043b8:	1a54      	subs	r4, r2, r1
 80043ba:	4659      	mov	r1, fp
 80043bc:	eb63 0501 	sbc.w	r5, r3, r1
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	00eb      	lsls	r3, r5, #3
 80043ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ce:	00e2      	lsls	r2, r4, #3
 80043d0:	4614      	mov	r4, r2
 80043d2:	461d      	mov	r5, r3
 80043d4:	4643      	mov	r3, r8
 80043d6:	18e3      	adds	r3, r4, r3
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	464b      	mov	r3, r9
 80043dc:	eb45 0303 	adc.w	r3, r5, r3
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ee:	4629      	mov	r1, r5
 80043f0:	028b      	lsls	r3, r1, #10
 80043f2:	4621      	mov	r1, r4
 80043f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f8:	4621      	mov	r1, r4
 80043fa:	028a      	lsls	r2, r1, #10
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004404:	2200      	movs	r2, #0
 8004406:	64bb      	str	r3, [r7, #72]	; 0x48
 8004408:	64fa      	str	r2, [r7, #76]	; 0x4c
 800440a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800440e:	f7fc fc0b 	bl	8000c28 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4613      	mov	r3, r2
 8004418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCC_GetSysClockFreq+0x458>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	0f1b      	lsrs	r3, r3, #28
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800442a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800442e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800443a:	e003      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCC_GetSysClockFreq+0x45c>)
 800443e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004448:	4618      	mov	r0, r3
 800444a:	37b8      	adds	r7, #184	; 0xb8
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400

0800445c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e28d      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8083 	beq.w	8004582 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800447c:	4b94      	ldr	r3, [pc, #592]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b04      	cmp	r3, #4
 8004486:	d019      	beq.n	80044bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004488:	4b91      	ldr	r3, [pc, #580]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004490:	2b08      	cmp	r3, #8
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004494:	4b8e      	ldr	r3, [pc, #568]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a0:	d00c      	beq.n	80044bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a2:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d112      	bne.n	80044d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ae:	4b88      	ldr	r3, [pc, #544]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ba:	d10b      	bne.n	80044d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	4b84      	ldr	r3, [pc, #528]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05b      	beq.n	8004580 <HAL_RCC_OscConfig+0x124>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d157      	bne.n	8004580 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e25a      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x90>
 80044de:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7b      	ldr	r2, [pc, #492]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e01d      	b.n	8004528 <HAL_RCC_OscConfig+0xcc>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0xb4>
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a75      	ldr	r2, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b73      	ldr	r3, [pc, #460]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a72      	ldr	r2, [pc, #456]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_OscConfig+0xcc>
 8004510:	4b6f      	ldr	r3, [pc, #444]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a6e      	ldr	r2, [pc, #440]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b6c      	ldr	r3, [pc, #432]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a6b      	ldr	r2, [pc, #428]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe f8ea 	bl	8002708 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004538:	f7fe f8e6 	bl	8002708 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e21f      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0xdc>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fe f8d6 	bl	8002708 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004560:	f7fe f8d2 	bl	8002708 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e20b      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	4b57      	ldr	r3, [pc, #348]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x104>
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d06f      	beq.n	800466e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800458e:	4b50      	ldr	r3, [pc, #320]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b00      	cmp	r3, #0
 8004598:	d017      	beq.n	80045ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800459a:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045a6:	4b4a      	ldr	r3, [pc, #296]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b2:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x186>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1d3      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4937      	ldr	r1, [pc, #220]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b34      	ldr	r3, [pc, #208]	; (80046d4 <HAL_RCC_OscConfig+0x278>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fe f87f 	bl	8002708 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460e:	f7fe f87b 	bl	8002708 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1b4      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4925      	ldr	r1, [pc, #148]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <HAL_RCC_OscConfig+0x278>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe f85e 	bl	8002708 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe f85a 	bl	8002708 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e193      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d036      	beq.n	80046e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fe f83e 	bl	8002708 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004690:	f7fe f83a 	bl	8002708 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e173      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCC_OscConfig+0x274>)
 80046a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x234>
 80046ae:	e01b      	b.n	80046e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fe f827 	bl	8002708 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046bc:	e00e      	b.n	80046dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046be:	f7fe f823 	bl	8002708 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d907      	bls.n	80046dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e15c      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	42470000 	.word	0x42470000
 80046d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	4b8a      	ldr	r3, [pc, #552]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80046de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ea      	bne.n	80046be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8097 	beq.w	8004824 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b83      	ldr	r3, [pc, #524]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	4b7f      	ldr	r3, [pc, #508]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a7e      	ldr	r2, [pc, #504]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b7c      	ldr	r3, [pc, #496]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b79      	ldr	r3, [pc, #484]	; (800490c <HAL_RCC_OscConfig+0x4b0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b76      	ldr	r3, [pc, #472]	; (800490c <HAL_RCC_OscConfig+0x4b0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a75      	ldr	r2, [pc, #468]	; (800490c <HAL_RCC_OscConfig+0x4b0>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fd ffe3 	bl	8002708 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fd ffdf 	bl	8002708 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e118      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b6c      	ldr	r3, [pc, #432]	; (800490c <HAL_RCC_OscConfig+0x4b0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x31e>
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a65      	ldr	r2, [pc, #404]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e01c      	b.n	80047b4 <HAL_RCC_OscConfig+0x358>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b05      	cmp	r3, #5
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x340>
 8004782:	4b61      	ldr	r3, [pc, #388]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a60      	ldr	r2, [pc, #384]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	4b5e      	ldr	r3, [pc, #376]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0x358>
 800479c:	4b5a      	ldr	r3, [pc, #360]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a59      	ldr	r2, [pc, #356]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	4b57      	ldr	r3, [pc, #348]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a56      	ldr	r2, [pc, #344]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80047ae:	f023 0304 	bic.w	r3, r3, #4
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d015      	beq.n	80047e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd ffa4 	bl	8002708 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd ffa0 	bl	8002708 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0d7      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	4b4b      	ldr	r3, [pc, #300]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ee      	beq.n	80047c4 <HAL_RCC_OscConfig+0x368>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fd ff8e 	bl	8002708 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fd ff8a 	bl	8002708 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e0c1      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004806:	4b40      	ldr	r3, [pc, #256]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ee      	bne.n	80047f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004812:	7dfb      	ldrb	r3, [r7, #23]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80ad 	beq.w	8004988 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482e:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b08      	cmp	r3, #8
 8004838:	d060      	beq.n	80048fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d145      	bne.n	80048ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_RCC_OscConfig+0x4b4>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd ff5e 	bl	8002708 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd ff5a 	bl	8002708 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e093      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	019b      	lsls	r3, r3, #6
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	3b01      	subs	r3, #1
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	071b      	lsls	r3, r3, #28
 800489a:	491b      	ldr	r1, [pc, #108]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <HAL_RCC_OscConfig+0x4b4>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fd ff2f 	bl	8002708 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fd ff2b 	bl	8002708 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e064      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x452>
 80048cc:	e05c      	b.n	8004988 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_RCC_OscConfig+0x4b4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd ff18 	bl	8002708 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd ff14 	bl	8002708 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e04d      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_RCC_OscConfig+0x4ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x480>
 80048fa:	e045      	b.n	8004988 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e040      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
 8004908:	40023800 	.word	0x40023800
 800490c:	40007000 	.word	0x40007000
 8004910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004914:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <HAL_RCC_OscConfig+0x538>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d030      	beq.n	8004984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d129      	bne.n	8004984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d122      	bne.n	8004984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800494a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494c:	4293      	cmp	r3, r2
 800494e:	d119      	bne.n	8004984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d10f      	bne.n	8004984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800

08004998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e041      	b.n	8004a2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fd fc7e 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fa2e 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d122      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d11b      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f06f 0202 	mvn.w	r2, #2
 8004a62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f9bf 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004a7e:	e005      	b.n	8004a8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f9b1 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9c2 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d122      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d11b      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0204 	mvn.w	r2, #4
 8004ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f995 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004ad2:	e005      	b.n	8004ae0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f987 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f998 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d122      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d11b      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f06f 0208 	mvn.w	r2, #8
 8004b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f96b 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004b26:	e005      	b.n	8004b34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f95d 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f96e 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d122      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d11b      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0210 	mvn.w	r2, #16
 8004b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2208      	movs	r2, #8
 8004b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f941 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004b7a:	e005      	b.n	8004b88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f933 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f944 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10e      	bne.n	8004bba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0201 	mvn.w	r2, #1
 8004bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f90d 	bl	8004dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d10e      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d107      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fae9 	bl	80051b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d10e      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f909 	bl	8004e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d10e      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f06f 0220 	mvn.w	r2, #32
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fab3 	bl	80051a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_ConfigClockSource+0x1c>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e0b4      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x186>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	d03e      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0xd4>
 8004c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca0:	f200 8087 	bhi.w	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	f000 8086 	beq.w	8004db8 <HAL_TIM_ConfigClockSource+0x172>
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d87f      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	2b70      	cmp	r3, #112	; 0x70
 8004cb4:	d01a      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0xa6>
 8004cb6:	2b70      	cmp	r3, #112	; 0x70
 8004cb8:	d87b      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cba:	2b60      	cmp	r3, #96	; 0x60
 8004cbc:	d050      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0x11a>
 8004cbe:	2b60      	cmp	r3, #96	; 0x60
 8004cc0:	d877      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc2:	2b50      	cmp	r3, #80	; 0x50
 8004cc4:	d03c      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xfa>
 8004cc6:	2b50      	cmp	r3, #80	; 0x50
 8004cc8:	d873      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d058      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0x13a>
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d86f      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd2:	2b30      	cmp	r3, #48	; 0x30
 8004cd4:	d064      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd6:	2b30      	cmp	r3, #48	; 0x30
 8004cd8:	d86b      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d060      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x15a>
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d867      	bhi.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d05c      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d05a      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x15a>
 8004cea:	e062      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f000 f9b6 	bl	800506c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	609a      	str	r2, [r3, #8]
      break;
 8004d18:	e04f      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6899      	ldr	r1, [r3, #8]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f000 f99f 	bl	800506c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3c:	609a      	str	r2, [r3, #8]
      break;
 8004d3e:	e03c      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f000 f913 	bl	8004f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2150      	movs	r1, #80	; 0x50
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f96c 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e02c      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f000 f932 	bl	8004fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2160      	movs	r1, #96	; 0x60
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f95c 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e01c      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 f8f3 	bl	8004f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f94c 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e00c      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 f943 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 8004db0:	e003      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      break;
 8004db6:	e000      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004db8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a40      	ldr	r2, [pc, #256]	; (8004f4c <TIM_Base_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e56:	d00f      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <TIM_Base_SetConfig+0x118>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3c      	ldr	r2, [pc, #240]	; (8004f54 <TIM_Base_SetConfig+0x11c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <TIM_Base_SetConfig+0x120>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3a      	ldr	r2, [pc, #232]	; (8004f5c <TIM_Base_SetConfig+0x124>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d108      	bne.n	8004e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <TIM_Base_SetConfig+0x114>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d02b      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d027      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2c      	ldr	r2, [pc, #176]	; (8004f50 <TIM_Base_SetConfig+0x118>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d023      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	; (8004f54 <TIM_Base_SetConfig+0x11c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2a      	ldr	r2, [pc, #168]	; (8004f58 <TIM_Base_SetConfig+0x120>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01b      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <TIM_Base_SetConfig+0x124>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d017      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a28      	ldr	r2, [pc, #160]	; (8004f60 <TIM_Base_SetConfig+0x128>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a27      	ldr	r2, [pc, #156]	; (8004f64 <TIM_Base_SetConfig+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <TIM_Base_SetConfig+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <TIM_Base_SetConfig+0x134>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <TIM_Base_SetConfig+0x138>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <TIM_Base_SetConfig+0x13c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <TIM_Base_SetConfig+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0xf8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <TIM_Base_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d103      	bne.n	8004f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800
 8004f6c:	40001800 	.word	0x40001800
 8004f70:	40001c00 	.word	0x40001c00
 8004f74:	40002000 	.word	0x40002000

08004f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0210 	bic.w	r2, r3, #16
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	031b      	lsls	r3, r3, #12
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	f043 0307 	orr.w	r3, r3, #7
 8005058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	021a      	lsls	r2, r3, #8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	431a      	orrs	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	609a      	str	r2, [r3, #8]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e05a      	b.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a21      	ldr	r2, [pc, #132]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005110:	d01d      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1d      	ldr	r2, [pc, #116]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1a      	ldr	r2, [pc, #104]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a18      	ldr	r2, [pc, #96]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10c      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4313      	orrs	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40001800 	.word	0x40001800

080051a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e03f      	b.n	800525e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fd f88a 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	; 0x24
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800520e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fddf 	bl	8005dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b08a      	sub	sp, #40	; 0x28
 800526a:	af02      	add	r7, sp, #8
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	d17c      	bne.n	8005380 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_UART_Transmit+0x2c>
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e075      	b.n	8005382 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UART_Transmit+0x3e>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e06e      	b.n	8005382 <HAL_UART_Transmit+0x11c>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2221      	movs	r2, #33	; 0x21
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ba:	f7fd fa25 	bl	8002708 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d4:	d108      	bne.n	80052e8 <HAL_UART_Transmit+0x82>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e003      	b.n	80052f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052f8:	e02a      	b.n	8005350 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fb1f 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e036      	b.n	8005382 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005328:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	3302      	adds	r3, #2
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	e007      	b.n	8005342 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	3301      	adds	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1cf      	bne.n	80052fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2200      	movs	r2, #0
 8005362:	2140      	movs	r1, #64	; 0x40
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 faef 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e006      	b.n	8005382 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	4613      	mov	r3, r2
 8005396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d11d      	bne.n	80053e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_UART_Receive_IT+0x26>
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e016      	b.n	80053e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Receive_IT+0x38>
 80053be:	2302      	movs	r3, #2
 80053c0:	e00f      	b.n	80053e2 <HAL_UART_Receive_IT+0x58>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	461a      	mov	r2, r3
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fb24 	bl	8005a24 <UART_Start_Receive_IT>
 80053dc:	4603      	mov	r3, r0
 80053de:	e000      	b.n	80053e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b0ba      	sub	sp, #232	; 0xe8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005418:	2300      	movs	r3, #0
 800541a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800542a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_UART_IRQHandler+0x66>
 800543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fc07 	bl	8005c5e <UART_Receive_IT>
      return;
 8005450:	e256      	b.n	8005900 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80de 	beq.w	8005618 <HAL_UART_IRQHandler+0x22c>
 800545c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80d1 	beq.w	8005618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xae>
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_UART_IRQHandler+0xd2>
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0202 	orr.w	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_UART_IRQHandler+0xf6>
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d011      	beq.n	8005512 <HAL_UART_IRQHandler+0x126>
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d105      	bne.n	8005506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0208 	orr.w	r2, r3, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 81ed 	beq.w	80058f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_UART_IRQHandler+0x14e>
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fb92 	bl	8005c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	bf0c      	ite	eq
 8005548:	2301      	moveq	r3, #1
 800554a:	2300      	movne	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <HAL_UART_IRQHandler+0x17a>
 800555e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04f      	beq.n	8005606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa9a 	bl	8005aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d141      	bne.n	80055fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3314      	adds	r3, #20
 80055a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1d9      	bne.n	800557a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d013      	beq.n	80055f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	4a7d      	ldr	r2, [pc, #500]	; (80057c8 <HAL_UART_IRQHandler+0x3dc>)
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd ff2c 	bl	8003438 <HAL_DMA_Abort_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	e00e      	b.n	8005614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f990 	bl	800591c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	e00a      	b.n	8005614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f98c 	bl	800591c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	e006      	b.n	8005614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f988 	bl	800591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005612:	e170      	b.n	80058f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	bf00      	nop
    return;
 8005616:	e16e      	b.n	80058f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 814a 	bne.w	80058b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8143 	beq.w	80058b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 813c 	beq.w	80058b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	f040 80b4 	bne.w	80057cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8140 	beq.w	80058fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005682:	429a      	cmp	r2, r3
 8005684:	f080 8139 	bcs.w	80058fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800568e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569a:	f000 8088 	beq.w	80057ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800570e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005712:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e1      	bne.n	80056ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800574a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800574c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e3      	bne.n	8005726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800577c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577e:	f023 0310 	bic.w	r3, r3, #16
 8005782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005790:	65ba      	str	r2, [r7, #88]	; 0x58
 8005792:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e3      	bne.n	800576c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fd fdd5 	bl	8003358 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8b6 	bl	8005930 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057c4:	e099      	b.n	80058fa <HAL_UART_IRQHandler+0x50e>
 80057c6:	bf00      	nop
 80057c8:	08005b67 	.word	0x08005b67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 808b 	beq.w	80058fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8086 	beq.w	80058fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005816:	647a      	str	r2, [r7, #68]	; 0x44
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800581c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e3      	bne.n	80057f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	623b      	str	r3, [r7, #32]
   return(result);
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3314      	adds	r3, #20
 800584a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800584e:	633a      	str	r2, [r7, #48]	; 0x30
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e3      	bne.n	800582a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0310 	bic.w	r3, r3, #16
 8005886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005894:	61fa      	str	r2, [r7, #28]
 8005896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	69b9      	ldr	r1, [r7, #24]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	617b      	str	r3, [r7, #20]
   return(result);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e3      	bne.n	8005870 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f83e 	bl	8005930 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b4:	e023      	b.n	80058fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <HAL_UART_IRQHandler+0x4ea>
 80058c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f95d 	bl	8005b8e <UART_Transmit_IT>
    return;
 80058d4:	e014      	b.n	8005900 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <HAL_UART_IRQHandler+0x514>
 80058e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f99d 	bl	8005c2e <UART_EndTransmit_IT>
    return;
 80058f4:	e004      	b.n	8005900 <HAL_UART_IRQHandler+0x514>
    return;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <HAL_UART_IRQHandler+0x514>
      return;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <HAL_UART_IRQHandler+0x514>
      return;
 80058fe:	bf00      	nop
  }
}
 8005900:	37e8      	adds	r7, #232	; 0xe8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop

08005908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b090      	sub	sp, #64	; 0x40
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	e050      	b.n	80059fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005960:	d04c      	beq.n	80059fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x30>
 8005968:	f7fc fece 	bl	8002708 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005974:	429a      	cmp	r2, r3
 8005976:	d241      	bcs.n	80059fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005998:	637a      	str	r2, [r7, #52]	; 0x34
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800599e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	613b      	str	r3, [r7, #16]
   return(result);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3314      	adds	r3, #20
 80059ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059cc:	623a      	str	r2, [r7, #32]
 80059ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	69f9      	ldr	r1, [r7, #28]
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e5      	bne.n	80059ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e00f      	b.n	8005a1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d09f      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3740      	adds	r7, #64	; 0x40
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2222      	movs	r2, #34	; 0x22
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0201 	orr.w	r2, r2, #1
 8005a80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0220 	orr.w	r2, r2, #32
 8005a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b095      	sub	sp, #84	; 0x54
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3314      	adds	r3, #20
 8005afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d119      	bne.n	8005b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b38:	61ba      	str	r2, [r7, #24]
 8005b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	613b      	str	r3, [r7, #16]
   return(result);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e5      	bne.n	8005b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b5a:	bf00      	nop
 8005b5c:	3754      	adds	r7, #84	; 0x54
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fecb 	bl	800591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b21      	cmp	r3, #33	; 0x21
 8005ba0:	d13e      	bne.n	8005c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d114      	bne.n	8005bd6 <UART_Transmit_IT+0x48>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]
 8005bd4:	e008      	b.n	8005be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6211      	str	r1, [r2, #32]
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10f      	bne.n	8005c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff fe5a 	bl	8005908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b08c      	sub	sp, #48	; 0x30
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	f040 80ab 	bne.w	8005dca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d117      	bne.n	8005cae <UART_Receive_IT+0x50>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d113      	bne.n	8005cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
 8005cac:	e026      	b.n	8005cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d007      	beq.n	8005cd2 <UART_Receive_IT+0x74>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <UART_Receive_IT+0x82>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e008      	b.n	8005cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d15a      	bne.n	8005dc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0220 	bic.w	r2, r2, #32
 8005d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d135      	bne.n	8005dbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	613b      	str	r3, [r7, #16]
   return(result);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f023 0310 	bic.w	r3, r3, #16
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	623a      	str	r2, [r7, #32]
 8005d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	69f9      	ldr	r1, [r7, #28]
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d10a      	bne.n	8005dae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fdbb 	bl	8005930 <HAL_UARTEx_RxEventCallback>
 8005dba:	e002      	b.n	8005dc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fc f8f3 	bl	8001fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e002      	b.n	8005dcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3730      	adds	r7, #48	; 0x30
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd8:	b0c0      	sub	sp, #256	; 0x100
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	68d9      	ldr	r1, [r3, #12]
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	ea40 0301 	orr.w	r3, r0, r1
 8005dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e2c:	f021 010c 	bic.w	r1, r1, #12
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	6999      	ldr	r1, [r3, #24]
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	ea40 0301 	orr.w	r3, r0, r1
 8005e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b8f      	ldr	r3, [pc, #572]	; (80060a0 <UART_SetConfig+0x2cc>)
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d005      	beq.n	8005e74 <UART_SetConfig+0xa0>
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b8d      	ldr	r3, [pc, #564]	; (80060a4 <UART_SetConfig+0x2d0>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d104      	bne.n	8005e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7fe f8ae 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 8005e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e7c:	e003      	b.n	8005e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e7e:	f7fe f895 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8005e82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e90:	f040 810c 	bne.w	80060ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	1891      	adds	r1, r2, r2
 8005eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8005eae:	415b      	adcs	r3, r3
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	eb12 0801 	adds.w	r8, r2, r1
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	eb43 0901 	adc.w	r9, r3, r1
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	4699      	mov	r9, r3
 8005eda:	4623      	mov	r3, r4
 8005edc:	eb18 0303 	adds.w	r3, r8, r3
 8005ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	eb49 0303 	adc.w	r3, r9, r3
 8005eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005efa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f02:	460b      	mov	r3, r1
 8005f04:	18db      	adds	r3, r3, r3
 8005f06:	653b      	str	r3, [r7, #80]	; 0x50
 8005f08:	4613      	mov	r3, r2
 8005f0a:	eb42 0303 	adc.w	r3, r2, r3
 8005f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f18:	f7fa fe86 	bl	8000c28 <__aeabi_uldivmod>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4b61      	ldr	r3, [pc, #388]	; (80060a8 <UART_SetConfig+0x2d4>)
 8005f22:	fba3 2302 	umull	r2, r3, r3, r2
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	011c      	lsls	r4, r3, #4
 8005f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	1891      	adds	r1, r2, r2
 8005f42:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f44:	415b      	adcs	r3, r3
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f52:	4649      	mov	r1, r9
 8005f54:	eb43 0b01 	adc.w	fp, r3, r1
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f6c:	4692      	mov	sl, r2
 8005f6e:	469b      	mov	fp, r3
 8005f70:	4643      	mov	r3, r8
 8005f72:	eb1a 0303 	adds.w	r3, sl, r3
 8005f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	18db      	adds	r3, r3, r3
 8005f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fae:	f7fa fe3b 	bl	8000c28 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <UART_SetConfig+0x2d4>)
 8005fba:	fba3 2301 	umull	r2, r3, r3, r1
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	2264      	movs	r2, #100	; 0x64
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	1acb      	subs	r3, r1, r3
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fce:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <UART_SetConfig+0x2d4>)
 8005fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fdc:	441c      	add	r4, r3
 8005fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	1891      	adds	r1, r2, r2
 8005ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ff8:	415b      	adcs	r3, r3
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006000:	4641      	mov	r1, r8
 8006002:	1851      	adds	r1, r2, r1
 8006004:	6339      	str	r1, [r7, #48]	; 0x30
 8006006:	4649      	mov	r1, r9
 8006008:	414b      	adcs	r3, r1
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006018:	4659      	mov	r1, fp
 800601a:	00cb      	lsls	r3, r1, #3
 800601c:	4651      	mov	r1, sl
 800601e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006022:	4651      	mov	r1, sl
 8006024:	00ca      	lsls	r2, r1, #3
 8006026:	4610      	mov	r0, r2
 8006028:	4619      	mov	r1, r3
 800602a:	4603      	mov	r3, r0
 800602c:	4642      	mov	r2, r8
 800602e:	189b      	adds	r3, r3, r2
 8006030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006034:	464b      	mov	r3, r9
 8006036:	460a      	mov	r2, r1
 8006038:	eb42 0303 	adc.w	r3, r2, r3
 800603c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800604c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006054:	460b      	mov	r3, r1
 8006056:	18db      	adds	r3, r3, r3
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
 800605a:	4613      	mov	r3, r2
 800605c:	eb42 0303 	adc.w	r3, r2, r3
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800606a:	f7fa fddd 	bl	8000c28 <__aeabi_uldivmod>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <UART_SetConfig+0x2d4>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	; 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	3332      	adds	r3, #50	; 0x32
 8006086:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <UART_SetConfig+0x2d4>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 0207 	and.w	r2, r3, #7
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4422      	add	r2, r4
 800609a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800609c:	e106      	b.n	80062ac <UART_SetConfig+0x4d8>
 800609e:	bf00      	nop
 80060a0:	40011000 	.word	0x40011000
 80060a4:	40011400 	.word	0x40011400
 80060a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060be:	4642      	mov	r2, r8
 80060c0:	464b      	mov	r3, r9
 80060c2:	1891      	adds	r1, r2, r2
 80060c4:	6239      	str	r1, [r7, #32]
 80060c6:	415b      	adcs	r3, r3
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ce:	4641      	mov	r1, r8
 80060d0:	1854      	adds	r4, r2, r1
 80060d2:	4649      	mov	r1, r9
 80060d4:	eb43 0501 	adc.w	r5, r3, r1
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	00eb      	lsls	r3, r5, #3
 80060e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060e6:	00e2      	lsls	r2, r4, #3
 80060e8:	4614      	mov	r4, r2
 80060ea:	461d      	mov	r5, r3
 80060ec:	4643      	mov	r3, r8
 80060ee:	18e3      	adds	r3, r4, r3
 80060f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060f4:	464b      	mov	r3, r9
 80060f6:	eb45 0303 	adc.w	r3, r5, r3
 80060fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800610a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800611a:	4629      	mov	r1, r5
 800611c:	008b      	lsls	r3, r1, #2
 800611e:	4621      	mov	r1, r4
 8006120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006124:	4621      	mov	r1, r4
 8006126:	008a      	lsls	r2, r1, #2
 8006128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800612c:	f7fa fd7c 	bl	8000c28 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4b60      	ldr	r3, [pc, #384]	; (80062b8 <UART_SetConfig+0x4e4>)
 8006136:	fba3 2302 	umull	r2, r3, r3, r2
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	011c      	lsls	r4, r3, #4
 800613e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800614c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	1891      	adds	r1, r2, r2
 8006156:	61b9      	str	r1, [r7, #24]
 8006158:	415b      	adcs	r3, r3
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006160:	4641      	mov	r1, r8
 8006162:	1851      	adds	r1, r2, r1
 8006164:	6139      	str	r1, [r7, #16]
 8006166:	4649      	mov	r1, r9
 8006168:	414b      	adcs	r3, r1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006178:	4659      	mov	r1, fp
 800617a:	00cb      	lsls	r3, r1, #3
 800617c:	4651      	mov	r1, sl
 800617e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006182:	4651      	mov	r1, sl
 8006184:	00ca      	lsls	r2, r1, #3
 8006186:	4610      	mov	r0, r2
 8006188:	4619      	mov	r1, r3
 800618a:	4603      	mov	r3, r0
 800618c:	4642      	mov	r2, r8
 800618e:	189b      	adds	r3, r3, r2
 8006190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006194:	464b      	mov	r3, r9
 8006196:	460a      	mov	r2, r1
 8006198:	eb42 0303 	adc.w	r3, r2, r3
 800619c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80061aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061b8:	4649      	mov	r1, r9
 80061ba:	008b      	lsls	r3, r1, #2
 80061bc:	4641      	mov	r1, r8
 80061be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c2:	4641      	mov	r1, r8
 80061c4:	008a      	lsls	r2, r1, #2
 80061c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061ca:	f7fa fd2d 	bl	8000c28 <__aeabi_uldivmod>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	4b38      	ldr	r3, [pc, #224]	; (80062b8 <UART_SetConfig+0x4e4>)
 80061d6:	fba3 2301 	umull	r2, r3, r3, r1
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	2264      	movs	r2, #100	; 0x64
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	1acb      	subs	r3, r1, r3
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	3332      	adds	r3, #50	; 0x32
 80061e8:	4a33      	ldr	r2, [pc, #204]	; (80062b8 <UART_SetConfig+0x4e4>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f4:	441c      	add	r4, r3
 80061f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fa:	2200      	movs	r2, #0
 80061fc:	673b      	str	r3, [r7, #112]	; 0x70
 80061fe:	677a      	str	r2, [r7, #116]	; 0x74
 8006200:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	1891      	adds	r1, r2, r2
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	415b      	adcs	r3, r3
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006214:	4641      	mov	r1, r8
 8006216:	1851      	adds	r1, r2, r1
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	4649      	mov	r1, r9
 800621c:	414b      	adcs	r3, r1
 800621e:	607b      	str	r3, [r7, #4]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800622c:	4659      	mov	r1, fp
 800622e:	00cb      	lsls	r3, r1, #3
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006236:	4651      	mov	r1, sl
 8006238:	00ca      	lsls	r2, r1, #3
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	4603      	mov	r3, r0
 8006240:	4642      	mov	r2, r8
 8006242:	189b      	adds	r3, r3, r2
 8006244:	66bb      	str	r3, [r7, #104]	; 0x68
 8006246:	464b      	mov	r3, r9
 8006248:	460a      	mov	r2, r1
 800624a:	eb42 0303 	adc.w	r3, r2, r3
 800624e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	663b      	str	r3, [r7, #96]	; 0x60
 800625a:	667a      	str	r2, [r7, #100]	; 0x64
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006268:	4649      	mov	r1, r9
 800626a:	008b      	lsls	r3, r1, #2
 800626c:	4641      	mov	r1, r8
 800626e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006272:	4641      	mov	r1, r8
 8006274:	008a      	lsls	r2, r1, #2
 8006276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800627a:	f7fa fcd5 	bl	8000c28 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <UART_SetConfig+0x4e4>)
 8006284:	fba3 1302 	umull	r1, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	3332      	adds	r3, #50	; 0x32
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <UART_SetConfig+0x4e4>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f003 020f 	and.w	r2, r3, #15
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4422      	add	r2, r4
 80062aa:	609a      	str	r2, [r3, #8]
}
 80062ac:	bf00      	nop
 80062ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062b2:	46bd      	mov	sp, r7
 80062b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b8:	51eb851f 	.word	0x51eb851f

080062bc <std>:
 80062bc:	2300      	movs	r3, #0
 80062be:	b510      	push	{r4, lr}
 80062c0:	4604      	mov	r4, r0
 80062c2:	e9c0 3300 	strd	r3, r3, [r0]
 80062c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062ca:	6083      	str	r3, [r0, #8]
 80062cc:	8181      	strh	r1, [r0, #12]
 80062ce:	6643      	str	r3, [r0, #100]	; 0x64
 80062d0:	81c2      	strh	r2, [r0, #14]
 80062d2:	6183      	str	r3, [r0, #24]
 80062d4:	4619      	mov	r1, r3
 80062d6:	2208      	movs	r2, #8
 80062d8:	305c      	adds	r0, #92	; 0x5c
 80062da:	f000 f91f 	bl	800651c <memset>
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <std+0x58>)
 80062e0:	6263      	str	r3, [r4, #36]	; 0x24
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <std+0x5c>)
 80062e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <std+0x60>)
 80062e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <std+0x64>)
 80062ec:	6323      	str	r3, [r4, #48]	; 0x30
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <std+0x68>)
 80062f0:	6224      	str	r4, [r4, #32]
 80062f2:	429c      	cmp	r4, r3
 80062f4:	d006      	beq.n	8006304 <std+0x48>
 80062f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80062fa:	4294      	cmp	r4, r2
 80062fc:	d002      	beq.n	8006304 <std+0x48>
 80062fe:	33d0      	adds	r3, #208	; 0xd0
 8006300:	429c      	cmp	r4, r3
 8006302:	d105      	bne.n	8006310 <std+0x54>
 8006304:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800630c:	f000 b938 	b.w	8006580 <__retarget_lock_init_recursive>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	bf00      	nop
 8006314:	08006de1 	.word	0x08006de1
 8006318:	08006e03 	.word	0x08006e03
 800631c:	08006e3b 	.word	0x08006e3b
 8006320:	08006e5f 	.word	0x08006e5f
 8006324:	200051b0 	.word	0x200051b0

08006328 <stdio_exit_handler>:
 8006328:	4a02      	ldr	r2, [pc, #8]	; (8006334 <stdio_exit_handler+0xc>)
 800632a:	4903      	ldr	r1, [pc, #12]	; (8006338 <stdio_exit_handler+0x10>)
 800632c:	4803      	ldr	r0, [pc, #12]	; (800633c <stdio_exit_handler+0x14>)
 800632e:	f000 b869 	b.w	8006404 <_fwalk_sglue>
 8006332:	bf00      	nop
 8006334:	20000020 	.word	0x20000020
 8006338:	08006d79 	.word	0x08006d79
 800633c:	2000002c 	.word	0x2000002c

08006340 <cleanup_stdio>:
 8006340:	6841      	ldr	r1, [r0, #4]
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <cleanup_stdio+0x34>)
 8006344:	4299      	cmp	r1, r3
 8006346:	b510      	push	{r4, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	d001      	beq.n	8006350 <cleanup_stdio+0x10>
 800634c:	f000 fd14 	bl	8006d78 <_fflush_r>
 8006350:	68a1      	ldr	r1, [r4, #8]
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <cleanup_stdio+0x38>)
 8006354:	4299      	cmp	r1, r3
 8006356:	d002      	beq.n	800635e <cleanup_stdio+0x1e>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fd0d 	bl	8006d78 <_fflush_r>
 800635e:	68e1      	ldr	r1, [r4, #12]
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <cleanup_stdio+0x3c>)
 8006362:	4299      	cmp	r1, r3
 8006364:	d004      	beq.n	8006370 <cleanup_stdio+0x30>
 8006366:	4620      	mov	r0, r4
 8006368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636c:	f000 bd04 	b.w	8006d78 <_fflush_r>
 8006370:	bd10      	pop	{r4, pc}
 8006372:	bf00      	nop
 8006374:	200051b0 	.word	0x200051b0
 8006378:	20005218 	.word	0x20005218
 800637c:	20005280 	.word	0x20005280

08006380 <global_stdio_init.part.0>:
 8006380:	b510      	push	{r4, lr}
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <global_stdio_init.part.0+0x30>)
 8006384:	4c0b      	ldr	r4, [pc, #44]	; (80063b4 <global_stdio_init.part.0+0x34>)
 8006386:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <global_stdio_init.part.0+0x38>)
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	4620      	mov	r0, r4
 800638c:	2200      	movs	r2, #0
 800638e:	2104      	movs	r1, #4
 8006390:	f7ff ff94 	bl	80062bc <std>
 8006394:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006398:	2201      	movs	r2, #1
 800639a:	2109      	movs	r1, #9
 800639c:	f7ff ff8e 	bl	80062bc <std>
 80063a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063a4:	2202      	movs	r2, #2
 80063a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063aa:	2112      	movs	r1, #18
 80063ac:	f7ff bf86 	b.w	80062bc <std>
 80063b0:	200052e8 	.word	0x200052e8
 80063b4:	200051b0 	.word	0x200051b0
 80063b8:	08006329 	.word	0x08006329

080063bc <__sfp_lock_acquire>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__sfp_lock_acquire+0x8>)
 80063be:	f000 b8e0 	b.w	8006582 <__retarget_lock_acquire_recursive>
 80063c2:	bf00      	nop
 80063c4:	200052ed 	.word	0x200052ed

080063c8 <__sfp_lock_release>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__sfp_lock_release+0x8>)
 80063ca:	f000 b8db 	b.w	8006584 <__retarget_lock_release_recursive>
 80063ce:	bf00      	nop
 80063d0:	200052ed 	.word	0x200052ed

080063d4 <__sinit>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	4604      	mov	r4, r0
 80063d8:	f7ff fff0 	bl	80063bc <__sfp_lock_acquire>
 80063dc:	6a23      	ldr	r3, [r4, #32]
 80063de:	b11b      	cbz	r3, 80063e8 <__sinit+0x14>
 80063e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e4:	f7ff bff0 	b.w	80063c8 <__sfp_lock_release>
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <__sinit+0x28>)
 80063ea:	6223      	str	r3, [r4, #32]
 80063ec:	4b04      	ldr	r3, [pc, #16]	; (8006400 <__sinit+0x2c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f5      	bne.n	80063e0 <__sinit+0xc>
 80063f4:	f7ff ffc4 	bl	8006380 <global_stdio_init.part.0>
 80063f8:	e7f2      	b.n	80063e0 <__sinit+0xc>
 80063fa:	bf00      	nop
 80063fc:	08006341 	.word	0x08006341
 8006400:	200052e8 	.word	0x200052e8

08006404 <_fwalk_sglue>:
 8006404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006408:	4607      	mov	r7, r0
 800640a:	4688      	mov	r8, r1
 800640c:	4614      	mov	r4, r2
 800640e:	2600      	movs	r6, #0
 8006410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006414:	f1b9 0901 	subs.w	r9, r9, #1
 8006418:	d505      	bpl.n	8006426 <_fwalk_sglue+0x22>
 800641a:	6824      	ldr	r4, [r4, #0]
 800641c:	2c00      	cmp	r4, #0
 800641e:	d1f7      	bne.n	8006410 <_fwalk_sglue+0xc>
 8006420:	4630      	mov	r0, r6
 8006422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d907      	bls.n	800643c <_fwalk_sglue+0x38>
 800642c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006430:	3301      	adds	r3, #1
 8006432:	d003      	beq.n	800643c <_fwalk_sglue+0x38>
 8006434:	4629      	mov	r1, r5
 8006436:	4638      	mov	r0, r7
 8006438:	47c0      	blx	r8
 800643a:	4306      	orrs	r6, r0
 800643c:	3568      	adds	r5, #104	; 0x68
 800643e:	e7e9      	b.n	8006414 <_fwalk_sglue+0x10>

08006440 <iprintf>:
 8006440:	b40f      	push	{r0, r1, r2, r3}
 8006442:	b507      	push	{r0, r1, r2, lr}
 8006444:	4906      	ldr	r1, [pc, #24]	; (8006460 <iprintf+0x20>)
 8006446:	ab04      	add	r3, sp, #16
 8006448:	6808      	ldr	r0, [r1, #0]
 800644a:	f853 2b04 	ldr.w	r2, [r3], #4
 800644e:	6881      	ldr	r1, [r0, #8]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	f000 f8c1 	bl	80065d8 <_vfiprintf_r>
 8006456:	b003      	add	sp, #12
 8006458:	f85d eb04 	ldr.w	lr, [sp], #4
 800645c:	b004      	add	sp, #16
 800645e:	4770      	bx	lr
 8006460:	20000078 	.word	0x20000078

08006464 <_puts_r>:
 8006464:	6a03      	ldr	r3, [r0, #32]
 8006466:	b570      	push	{r4, r5, r6, lr}
 8006468:	6884      	ldr	r4, [r0, #8]
 800646a:	4605      	mov	r5, r0
 800646c:	460e      	mov	r6, r1
 800646e:	b90b      	cbnz	r3, 8006474 <_puts_r+0x10>
 8006470:	f7ff ffb0 	bl	80063d4 <__sinit>
 8006474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006476:	07db      	lsls	r3, r3, #31
 8006478:	d405      	bmi.n	8006486 <_puts_r+0x22>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	0598      	lsls	r0, r3, #22
 800647e:	d402      	bmi.n	8006486 <_puts_r+0x22>
 8006480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006482:	f000 f87e 	bl	8006582 <__retarget_lock_acquire_recursive>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	0719      	lsls	r1, r3, #28
 800648a:	d513      	bpl.n	80064b4 <_puts_r+0x50>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	b18b      	cbz	r3, 80064b4 <_puts_r+0x50>
 8006490:	3e01      	subs	r6, #1
 8006492:	68a3      	ldr	r3, [r4, #8]
 8006494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006498:	3b01      	subs	r3, #1
 800649a:	60a3      	str	r3, [r4, #8]
 800649c:	b9e9      	cbnz	r1, 80064da <_puts_r+0x76>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da2e      	bge.n	8006500 <_puts_r+0x9c>
 80064a2:	4622      	mov	r2, r4
 80064a4:	210a      	movs	r1, #10
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 fcdd 	bl	8006e66 <__swbuf_r>
 80064ac:	3001      	adds	r0, #1
 80064ae:	d007      	beq.n	80064c0 <_puts_r+0x5c>
 80064b0:	250a      	movs	r5, #10
 80064b2:	e007      	b.n	80064c4 <_puts_r+0x60>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 fd12 	bl	8006ee0 <__swsetup_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d0e7      	beq.n	8006490 <_puts_r+0x2c>
 80064c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80064c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064c6:	07da      	lsls	r2, r3, #31
 80064c8:	d405      	bmi.n	80064d6 <_puts_r+0x72>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	059b      	lsls	r3, r3, #22
 80064ce:	d402      	bmi.n	80064d6 <_puts_r+0x72>
 80064d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064d2:	f000 f857 	bl	8006584 <__retarget_lock_release_recursive>
 80064d6:	4628      	mov	r0, r5
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da04      	bge.n	80064e8 <_puts_r+0x84>
 80064de:	69a2      	ldr	r2, [r4, #24]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	dc06      	bgt.n	80064f2 <_puts_r+0x8e>
 80064e4:	290a      	cmp	r1, #10
 80064e6:	d004      	beq.n	80064f2 <_puts_r+0x8e>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	6022      	str	r2, [r4, #0]
 80064ee:	7019      	strb	r1, [r3, #0]
 80064f0:	e7cf      	b.n	8006492 <_puts_r+0x2e>
 80064f2:	4622      	mov	r2, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 fcb6 	bl	8006e66 <__swbuf_r>
 80064fa:	3001      	adds	r0, #1
 80064fc:	d1c9      	bne.n	8006492 <_puts_r+0x2e>
 80064fe:	e7df      	b.n	80064c0 <_puts_r+0x5c>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	250a      	movs	r5, #10
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	6022      	str	r2, [r4, #0]
 8006508:	701d      	strb	r5, [r3, #0]
 800650a:	e7db      	b.n	80064c4 <_puts_r+0x60>

0800650c <puts>:
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <puts+0xc>)
 800650e:	4601      	mov	r1, r0
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f7ff bfa7 	b.w	8006464 <_puts_r>
 8006516:	bf00      	nop
 8006518:	20000078 	.word	0x20000078

0800651c <memset>:
 800651c:	4402      	add	r2, r0
 800651e:	4603      	mov	r3, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	; (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000078 	.word	0x20000078

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4d0d      	ldr	r5, [pc, #52]	; (8006570 <__libc_init_array+0x38>)
 800653c:	4c0d      	ldr	r4, [pc, #52]	; (8006574 <__libc_init_array+0x3c>)
 800653e:	1b64      	subs	r4, r4, r5
 8006540:	10a4      	asrs	r4, r4, #2
 8006542:	2600      	movs	r6, #0
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	4d0b      	ldr	r5, [pc, #44]	; (8006578 <__libc_init_array+0x40>)
 800654a:	4c0c      	ldr	r4, [pc, #48]	; (800657c <__libc_init_array+0x44>)
 800654c:	f000 ff94 	bl	8007478 <_init>
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	2600      	movs	r6, #0
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	08007800 	.word	0x08007800
 8006574:	08007800 	.word	0x08007800
 8006578:	08007800 	.word	0x08007800
 800657c:	08007804 	.word	0x08007804

08006580 <__retarget_lock_init_recursive>:
 8006580:	4770      	bx	lr

08006582 <__retarget_lock_acquire_recursive>:
 8006582:	4770      	bx	lr

08006584 <__retarget_lock_release_recursive>:
 8006584:	4770      	bx	lr

08006586 <__sfputc_r>:
 8006586:	6893      	ldr	r3, [r2, #8]
 8006588:	3b01      	subs	r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	b410      	push	{r4}
 800658e:	6093      	str	r3, [r2, #8]
 8006590:	da08      	bge.n	80065a4 <__sfputc_r+0x1e>
 8006592:	6994      	ldr	r4, [r2, #24]
 8006594:	42a3      	cmp	r3, r4
 8006596:	db01      	blt.n	800659c <__sfputc_r+0x16>
 8006598:	290a      	cmp	r1, #10
 800659a:	d103      	bne.n	80065a4 <__sfputc_r+0x1e>
 800659c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065a0:	f000 bc61 	b.w	8006e66 <__swbuf_r>
 80065a4:	6813      	ldr	r3, [r2, #0]
 80065a6:	1c58      	adds	r0, r3, #1
 80065a8:	6010      	str	r0, [r2, #0]
 80065aa:	7019      	strb	r1, [r3, #0]
 80065ac:	4608      	mov	r0, r1
 80065ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <__sfputs_r>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	4614      	mov	r4, r2
 80065bc:	18d5      	adds	r5, r2, r3
 80065be:	42ac      	cmp	r4, r5
 80065c0:	d101      	bne.n	80065c6 <__sfputs_r+0x12>
 80065c2:	2000      	movs	r0, #0
 80065c4:	e007      	b.n	80065d6 <__sfputs_r+0x22>
 80065c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ca:	463a      	mov	r2, r7
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffda 	bl	8006586 <__sfputc_r>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d1f3      	bne.n	80065be <__sfputs_r+0xa>
 80065d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065d8 <_vfiprintf_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	460d      	mov	r5, r1
 80065de:	b09d      	sub	sp, #116	; 0x74
 80065e0:	4614      	mov	r4, r2
 80065e2:	4698      	mov	r8, r3
 80065e4:	4606      	mov	r6, r0
 80065e6:	b118      	cbz	r0, 80065f0 <_vfiprintf_r+0x18>
 80065e8:	6a03      	ldr	r3, [r0, #32]
 80065ea:	b90b      	cbnz	r3, 80065f0 <_vfiprintf_r+0x18>
 80065ec:	f7ff fef2 	bl	80063d4 <__sinit>
 80065f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_vfiprintf_r+0x2a>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	059a      	lsls	r2, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_vfiprintf_r+0x2a>
 80065fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065fe:	f7ff ffc0 	bl	8006582 <__retarget_lock_acquire_recursive>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	071b      	lsls	r3, r3, #28
 8006606:	d501      	bpl.n	800660c <_vfiprintf_r+0x34>
 8006608:	692b      	ldr	r3, [r5, #16]
 800660a:	b99b      	cbnz	r3, 8006634 <_vfiprintf_r+0x5c>
 800660c:	4629      	mov	r1, r5
 800660e:	4630      	mov	r0, r6
 8006610:	f000 fc66 	bl	8006ee0 <__swsetup_r>
 8006614:	b170      	cbz	r0, 8006634 <_vfiprintf_r+0x5c>
 8006616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006618:	07dc      	lsls	r4, r3, #31
 800661a:	d504      	bpl.n	8006626 <_vfiprintf_r+0x4e>
 800661c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006620:	b01d      	add	sp, #116	; 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	0598      	lsls	r0, r3, #22
 800662a:	d4f7      	bmi.n	800661c <_vfiprintf_r+0x44>
 800662c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800662e:	f7ff ffa9 	bl	8006584 <__retarget_lock_release_recursive>
 8006632:	e7f3      	b.n	800661c <_vfiprintf_r+0x44>
 8006634:	2300      	movs	r3, #0
 8006636:	9309      	str	r3, [sp, #36]	; 0x24
 8006638:	2320      	movs	r3, #32
 800663a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800663e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006642:	2330      	movs	r3, #48	; 0x30
 8006644:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80067f8 <_vfiprintf_r+0x220>
 8006648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800664c:	f04f 0901 	mov.w	r9, #1
 8006650:	4623      	mov	r3, r4
 8006652:	469a      	mov	sl, r3
 8006654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006658:	b10a      	cbz	r2, 800665e <_vfiprintf_r+0x86>
 800665a:	2a25      	cmp	r2, #37	; 0x25
 800665c:	d1f9      	bne.n	8006652 <_vfiprintf_r+0x7a>
 800665e:	ebba 0b04 	subs.w	fp, sl, r4
 8006662:	d00b      	beq.n	800667c <_vfiprintf_r+0xa4>
 8006664:	465b      	mov	r3, fp
 8006666:	4622      	mov	r2, r4
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff ffa2 	bl	80065b4 <__sfputs_r>
 8006670:	3001      	adds	r0, #1
 8006672:	f000 80a9 	beq.w	80067c8 <_vfiprintf_r+0x1f0>
 8006676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006678:	445a      	add	r2, fp
 800667a:	9209      	str	r2, [sp, #36]	; 0x24
 800667c:	f89a 3000 	ldrb.w	r3, [sl]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80a1 	beq.w	80067c8 <_vfiprintf_r+0x1f0>
 8006686:	2300      	movs	r3, #0
 8006688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800668c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006690:	f10a 0a01 	add.w	sl, sl, #1
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800669c:	931a      	str	r3, [sp, #104]	; 0x68
 800669e:	4654      	mov	r4, sl
 80066a0:	2205      	movs	r2, #5
 80066a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a6:	4854      	ldr	r0, [pc, #336]	; (80067f8 <_vfiprintf_r+0x220>)
 80066a8:	f7f9 fdba 	bl	8000220 <memchr>
 80066ac:	9a04      	ldr	r2, [sp, #16]
 80066ae:	b9d8      	cbnz	r0, 80066e8 <_vfiprintf_r+0x110>
 80066b0:	06d1      	lsls	r1, r2, #27
 80066b2:	bf44      	itt	mi
 80066b4:	2320      	movmi	r3, #32
 80066b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ba:	0713      	lsls	r3, r2, #28
 80066bc:	bf44      	itt	mi
 80066be:	232b      	movmi	r3, #43	; 0x2b
 80066c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c4:	f89a 3000 	ldrb.w	r3, [sl]
 80066c8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ca:	d015      	beq.n	80066f8 <_vfiprintf_r+0x120>
 80066cc:	9a07      	ldr	r2, [sp, #28]
 80066ce:	4654      	mov	r4, sl
 80066d0:	2000      	movs	r0, #0
 80066d2:	f04f 0c0a 	mov.w	ip, #10
 80066d6:	4621      	mov	r1, r4
 80066d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066dc:	3b30      	subs	r3, #48	; 0x30
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d94d      	bls.n	800677e <_vfiprintf_r+0x1a6>
 80066e2:	b1b0      	cbz	r0, 8006712 <_vfiprintf_r+0x13a>
 80066e4:	9207      	str	r2, [sp, #28]
 80066e6:	e014      	b.n	8006712 <_vfiprintf_r+0x13a>
 80066e8:	eba0 0308 	sub.w	r3, r0, r8
 80066ec:	fa09 f303 	lsl.w	r3, r9, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	9304      	str	r3, [sp, #16]
 80066f4:	46a2      	mov	sl, r4
 80066f6:	e7d2      	b.n	800669e <_vfiprintf_r+0xc6>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	1d19      	adds	r1, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	9103      	str	r1, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfbb      	ittet	lt
 8006704:	425b      	neglt	r3, r3
 8006706:	f042 0202 	orrlt.w	r2, r2, #2
 800670a:	9307      	strge	r3, [sp, #28]
 800670c:	9307      	strlt	r3, [sp, #28]
 800670e:	bfb8      	it	lt
 8006710:	9204      	strlt	r2, [sp, #16]
 8006712:	7823      	ldrb	r3, [r4, #0]
 8006714:	2b2e      	cmp	r3, #46	; 0x2e
 8006716:	d10c      	bne.n	8006732 <_vfiprintf_r+0x15a>
 8006718:	7863      	ldrb	r3, [r4, #1]
 800671a:	2b2a      	cmp	r3, #42	; 0x2a
 800671c:	d134      	bne.n	8006788 <_vfiprintf_r+0x1b0>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	1d1a      	adds	r2, r3, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	9203      	str	r2, [sp, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfb8      	it	lt
 800672a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800672e:	3402      	adds	r4, #2
 8006730:	9305      	str	r3, [sp, #20]
 8006732:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006808 <_vfiprintf_r+0x230>
 8006736:	7821      	ldrb	r1, [r4, #0]
 8006738:	2203      	movs	r2, #3
 800673a:	4650      	mov	r0, sl
 800673c:	f7f9 fd70 	bl	8000220 <memchr>
 8006740:	b138      	cbz	r0, 8006752 <_vfiprintf_r+0x17a>
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	eba0 000a 	sub.w	r0, r0, sl
 8006748:	2240      	movs	r2, #64	; 0x40
 800674a:	4082      	lsls	r2, r0
 800674c:	4313      	orrs	r3, r2
 800674e:	3401      	adds	r4, #1
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006756:	4829      	ldr	r0, [pc, #164]	; (80067fc <_vfiprintf_r+0x224>)
 8006758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800675c:	2206      	movs	r2, #6
 800675e:	f7f9 fd5f 	bl	8000220 <memchr>
 8006762:	2800      	cmp	r0, #0
 8006764:	d03f      	beq.n	80067e6 <_vfiprintf_r+0x20e>
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <_vfiprintf_r+0x228>)
 8006768:	bb1b      	cbnz	r3, 80067b2 <_vfiprintf_r+0x1da>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	3307      	adds	r3, #7
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	3308      	adds	r3, #8
 8006774:	9303      	str	r3, [sp, #12]
 8006776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006778:	443b      	add	r3, r7
 800677a:	9309      	str	r3, [sp, #36]	; 0x24
 800677c:	e768      	b.n	8006650 <_vfiprintf_r+0x78>
 800677e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006782:	460c      	mov	r4, r1
 8006784:	2001      	movs	r0, #1
 8006786:	e7a6      	b.n	80066d6 <_vfiprintf_r+0xfe>
 8006788:	2300      	movs	r3, #0
 800678a:	3401      	adds	r4, #1
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	4619      	mov	r1, r3
 8006790:	f04f 0c0a 	mov.w	ip, #10
 8006794:	4620      	mov	r0, r4
 8006796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800679a:	3a30      	subs	r2, #48	; 0x30
 800679c:	2a09      	cmp	r2, #9
 800679e:	d903      	bls.n	80067a8 <_vfiprintf_r+0x1d0>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0c6      	beq.n	8006732 <_vfiprintf_r+0x15a>
 80067a4:	9105      	str	r1, [sp, #20]
 80067a6:	e7c4      	b.n	8006732 <_vfiprintf_r+0x15a>
 80067a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ac:	4604      	mov	r4, r0
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7f0      	b.n	8006794 <_vfiprintf_r+0x1bc>
 80067b2:	ab03      	add	r3, sp, #12
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	462a      	mov	r2, r5
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <_vfiprintf_r+0x22c>)
 80067ba:	a904      	add	r1, sp, #16
 80067bc:	4630      	mov	r0, r6
 80067be:	f3af 8000 	nop.w
 80067c2:	4607      	mov	r7, r0
 80067c4:	1c78      	adds	r0, r7, #1
 80067c6:	d1d6      	bne.n	8006776 <_vfiprintf_r+0x19e>
 80067c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ca:	07d9      	lsls	r1, r3, #31
 80067cc:	d405      	bmi.n	80067da <_vfiprintf_r+0x202>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	059a      	lsls	r2, r3, #22
 80067d2:	d402      	bmi.n	80067da <_vfiprintf_r+0x202>
 80067d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067d6:	f7ff fed5 	bl	8006584 <__retarget_lock_release_recursive>
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	065b      	lsls	r3, r3, #25
 80067de:	f53f af1d 	bmi.w	800661c <_vfiprintf_r+0x44>
 80067e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067e4:	e71c      	b.n	8006620 <_vfiprintf_r+0x48>
 80067e6:	ab03      	add	r3, sp, #12
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	462a      	mov	r2, r5
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_vfiprintf_r+0x22c>)
 80067ee:	a904      	add	r1, sp, #16
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 f919 	bl	8006a28 <_printf_i>
 80067f6:	e7e4      	b.n	80067c2 <_vfiprintf_r+0x1ea>
 80067f8:	080077c4 	.word	0x080077c4
 80067fc:	080077ce 	.word	0x080077ce
 8006800:	00000000 	.word	0x00000000
 8006804:	080065b5 	.word	0x080065b5
 8006808:	080077ca 	.word	0x080077ca

0800680c <sbrk_aligned>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4e0e      	ldr	r6, [pc, #56]	; (8006848 <sbrk_aligned+0x3c>)
 8006810:	460c      	mov	r4, r1
 8006812:	6831      	ldr	r1, [r6, #0]
 8006814:	4605      	mov	r5, r0
 8006816:	b911      	cbnz	r1, 800681e <sbrk_aligned+0x12>
 8006818:	f000 fc72 	bl	8007100 <_sbrk_r>
 800681c:	6030      	str	r0, [r6, #0]
 800681e:	4621      	mov	r1, r4
 8006820:	4628      	mov	r0, r5
 8006822:	f000 fc6d 	bl	8007100 <_sbrk_r>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	d00a      	beq.n	8006840 <sbrk_aligned+0x34>
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d007      	beq.n	8006844 <sbrk_aligned+0x38>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fc62 	bl	8007100 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d101      	bne.n	8006844 <sbrk_aligned+0x38>
 8006840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006844:	4620      	mov	r0, r4
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	200052f4 	.word	0x200052f4

0800684c <_malloc_r>:
 800684c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006850:	1ccd      	adds	r5, r1, #3
 8006852:	f025 0503 	bic.w	r5, r5, #3
 8006856:	3508      	adds	r5, #8
 8006858:	2d0c      	cmp	r5, #12
 800685a:	bf38      	it	cc
 800685c:	250c      	movcc	r5, #12
 800685e:	2d00      	cmp	r5, #0
 8006860:	4607      	mov	r7, r0
 8006862:	db01      	blt.n	8006868 <_malloc_r+0x1c>
 8006864:	42a9      	cmp	r1, r5
 8006866:	d905      	bls.n	8006874 <_malloc_r+0x28>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	2600      	movs	r6, #0
 800686e:	4630      	mov	r0, r6
 8006870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006948 <_malloc_r+0xfc>
 8006878:	f000 faa6 	bl	8006dc8 <__malloc_lock>
 800687c:	f8d8 3000 	ldr.w	r3, [r8]
 8006880:	461c      	mov	r4, r3
 8006882:	bb5c      	cbnz	r4, 80068dc <_malloc_r+0x90>
 8006884:	4629      	mov	r1, r5
 8006886:	4638      	mov	r0, r7
 8006888:	f7ff ffc0 	bl	800680c <sbrk_aligned>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	4604      	mov	r4, r0
 8006890:	d155      	bne.n	800693e <_malloc_r+0xf2>
 8006892:	f8d8 4000 	ldr.w	r4, [r8]
 8006896:	4626      	mov	r6, r4
 8006898:	2e00      	cmp	r6, #0
 800689a:	d145      	bne.n	8006928 <_malloc_r+0xdc>
 800689c:	2c00      	cmp	r4, #0
 800689e:	d048      	beq.n	8006932 <_malloc_r+0xe6>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	4631      	mov	r1, r6
 80068a4:	4638      	mov	r0, r7
 80068a6:	eb04 0903 	add.w	r9, r4, r3
 80068aa:	f000 fc29 	bl	8007100 <_sbrk_r>
 80068ae:	4581      	cmp	r9, r0
 80068b0:	d13f      	bne.n	8006932 <_malloc_r+0xe6>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	1a6d      	subs	r5, r5, r1
 80068b6:	4629      	mov	r1, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff ffa7 	bl	800680c <sbrk_aligned>
 80068be:	3001      	adds	r0, #1
 80068c0:	d037      	beq.n	8006932 <_malloc_r+0xe6>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	442b      	add	r3, r5
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	f8d8 3000 	ldr.w	r3, [r8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d038      	beq.n	8006942 <_malloc_r+0xf6>
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	42a2      	cmp	r2, r4
 80068d4:	d12b      	bne.n	800692e <_malloc_r+0xe2>
 80068d6:	2200      	movs	r2, #0
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	e00f      	b.n	80068fc <_malloc_r+0xb0>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	1b52      	subs	r2, r2, r5
 80068e0:	d41f      	bmi.n	8006922 <_malloc_r+0xd6>
 80068e2:	2a0b      	cmp	r2, #11
 80068e4:	d917      	bls.n	8006916 <_malloc_r+0xca>
 80068e6:	1961      	adds	r1, r4, r5
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	bf18      	it	ne
 80068ee:	6059      	strne	r1, [r3, #4]
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	bf08      	it	eq
 80068f4:	f8c8 1000 	streq.w	r1, [r8]
 80068f8:	5162      	str	r2, [r4, r5]
 80068fa:	604b      	str	r3, [r1, #4]
 80068fc:	4638      	mov	r0, r7
 80068fe:	f104 060b 	add.w	r6, r4, #11
 8006902:	f000 fa67 	bl	8006dd4 <__malloc_unlock>
 8006906:	f026 0607 	bic.w	r6, r6, #7
 800690a:	1d23      	adds	r3, r4, #4
 800690c:	1af2      	subs	r2, r6, r3
 800690e:	d0ae      	beq.n	800686e <_malloc_r+0x22>
 8006910:	1b9b      	subs	r3, r3, r6
 8006912:	50a3      	str	r3, [r4, r2]
 8006914:	e7ab      	b.n	800686e <_malloc_r+0x22>
 8006916:	42a3      	cmp	r3, r4
 8006918:	6862      	ldr	r2, [r4, #4]
 800691a:	d1dd      	bne.n	80068d8 <_malloc_r+0x8c>
 800691c:	f8c8 2000 	str.w	r2, [r8]
 8006920:	e7ec      	b.n	80068fc <_malloc_r+0xb0>
 8006922:	4623      	mov	r3, r4
 8006924:	6864      	ldr	r4, [r4, #4]
 8006926:	e7ac      	b.n	8006882 <_malloc_r+0x36>
 8006928:	4634      	mov	r4, r6
 800692a:	6876      	ldr	r6, [r6, #4]
 800692c:	e7b4      	b.n	8006898 <_malloc_r+0x4c>
 800692e:	4613      	mov	r3, r2
 8006930:	e7cc      	b.n	80068cc <_malloc_r+0x80>
 8006932:	230c      	movs	r3, #12
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4638      	mov	r0, r7
 8006938:	f000 fa4c 	bl	8006dd4 <__malloc_unlock>
 800693c:	e797      	b.n	800686e <_malloc_r+0x22>
 800693e:	6025      	str	r5, [r4, #0]
 8006940:	e7dc      	b.n	80068fc <_malloc_r+0xb0>
 8006942:	605b      	str	r3, [r3, #4]
 8006944:	deff      	udf	#255	; 0xff
 8006946:	bf00      	nop
 8006948:	200052f0 	.word	0x200052f0

0800694c <_printf_common>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4616      	mov	r6, r2
 8006952:	4699      	mov	r9, r3
 8006954:	688a      	ldr	r2, [r1, #8]
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800695c:	4293      	cmp	r3, r2
 800695e:	bfb8      	it	lt
 8006960:	4613      	movlt	r3, r2
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006968:	4607      	mov	r7, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b10a      	cbz	r2, 8006972 <_printf_common+0x26>
 800696e:	3301      	adds	r3, #1
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	0699      	lsls	r1, r3, #26
 8006976:	bf42      	ittt	mi
 8006978:	6833      	ldrmi	r3, [r6, #0]
 800697a:	3302      	addmi	r3, #2
 800697c:	6033      	strmi	r3, [r6, #0]
 800697e:	6825      	ldr	r5, [r4, #0]
 8006980:	f015 0506 	ands.w	r5, r5, #6
 8006984:	d106      	bne.n	8006994 <_printf_common+0x48>
 8006986:	f104 0a19 	add.w	sl, r4, #25
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dc26      	bgt.n	80069e2 <_printf_common+0x96>
 8006994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006998:	1e13      	subs	r3, r2, #0
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	bf18      	it	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	0692      	lsls	r2, r2, #26
 80069a2:	d42b      	bmi.n	80069fc <_printf_common+0xb0>
 80069a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a8:	4649      	mov	r1, r9
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d01e      	beq.n	80069f0 <_printf_common+0xa4>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	6922      	ldr	r2, [r4, #16]
 80069b6:	f003 0306 	and.w	r3, r3, #6
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	bf02      	ittt	eq
 80069be:	68e5      	ldreq	r5, [r4, #12]
 80069c0:	6833      	ldreq	r3, [r6, #0]
 80069c2:	1aed      	subeq	r5, r5, r3
 80069c4:	68a3      	ldr	r3, [r4, #8]
 80069c6:	bf0c      	ite	eq
 80069c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069cc:	2500      	movne	r5, #0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bfc4      	itt	gt
 80069d2:	1a9b      	subgt	r3, r3, r2
 80069d4:	18ed      	addgt	r5, r5, r3
 80069d6:	2600      	movs	r6, #0
 80069d8:	341a      	adds	r4, #26
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d11a      	bne.n	8006a14 <_printf_common+0xc8>
 80069de:	2000      	movs	r0, #0
 80069e0:	e008      	b.n	80069f4 <_printf_common+0xa8>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4649      	mov	r1, r9
 80069e8:	4638      	mov	r0, r7
 80069ea:	47c0      	blx	r8
 80069ec:	3001      	adds	r0, #1
 80069ee:	d103      	bne.n	80069f8 <_printf_common+0xac>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	3501      	adds	r5, #1
 80069fa:	e7c6      	b.n	800698a <_printf_common+0x3e>
 80069fc:	18e1      	adds	r1, r4, r3
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	2030      	movs	r0, #48	; 0x30
 8006a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a06:	4422      	add	r2, r4
 8006a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a10:	3302      	adds	r3, #2
 8006a12:	e7c7      	b.n	80069a4 <_printf_common+0x58>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4622      	mov	r2, r4
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa4>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d9      	b.n	80069da <_printf_common+0x8e>
	...

08006a28 <_printf_i>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	7e0f      	ldrb	r7, [r1, #24]
 8006a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a30:	2f78      	cmp	r7, #120	; 0x78
 8006a32:	4691      	mov	r9, r2
 8006a34:	4680      	mov	r8, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a3e:	d807      	bhi.n	8006a50 <_printf_i+0x28>
 8006a40:	2f62      	cmp	r7, #98	; 0x62
 8006a42:	d80a      	bhi.n	8006a5a <_printf_i+0x32>
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	f000 80d4 	beq.w	8006bf2 <_printf_i+0x1ca>
 8006a4a:	2f58      	cmp	r7, #88	; 0x58
 8006a4c:	f000 80c0 	beq.w	8006bd0 <_printf_i+0x1a8>
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a58:	e03a      	b.n	8006ad0 <_printf_i+0xa8>
 8006a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a5e:	2b15      	cmp	r3, #21
 8006a60:	d8f6      	bhi.n	8006a50 <_printf_i+0x28>
 8006a62:	a101      	add	r1, pc, #4	; (adr r1, 8006a68 <_printf_i+0x40>)
 8006a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006a51 	.word	0x08006a51
 8006a74:	08006a51 	.word	0x08006a51
 8006a78:	08006a51 	.word	0x08006a51
 8006a7c:	08006a51 	.word	0x08006a51
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a51 	.word	0x08006a51
 8006a88:	08006a51 	.word	0x08006a51
 8006a8c:	08006a51 	.word	0x08006a51
 8006a90:	08006a51 	.word	0x08006a51
 8006a94:	08006bd9 	.word	0x08006bd9
 8006a98:	08006b01 	.word	0x08006b01
 8006a9c:	08006b93 	.word	0x08006b93
 8006aa0:	08006a51 	.word	0x08006a51
 8006aa4:	08006a51 	.word	0x08006a51
 8006aa8:	08006bfb 	.word	0x08006bfb
 8006aac:	08006a51 	.word	0x08006a51
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	08006a51 	.word	0x08006a51
 8006ab8:	08006a51 	.word	0x08006a51
 8006abc:	08006b9b 	.word	0x08006b9b
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e09f      	b.n	8006c14 <_printf_i+0x1ec>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	0607      	lsls	r7, r0, #24
 8006ada:	f103 0104 	add.w	r1, r3, #4
 8006ade:	6029      	str	r1, [r5, #0]
 8006ae0:	d501      	bpl.n	8006ae6 <_printf_i+0xbe>
 8006ae2:	681e      	ldr	r6, [r3, #0]
 8006ae4:	e003      	b.n	8006aee <_printf_i+0xc6>
 8006ae6:	0646      	lsls	r6, r0, #25
 8006ae8:	d5fb      	bpl.n	8006ae2 <_printf_i+0xba>
 8006aea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006aee:	2e00      	cmp	r6, #0
 8006af0:	da03      	bge.n	8006afa <_printf_i+0xd2>
 8006af2:	232d      	movs	r3, #45	; 0x2d
 8006af4:	4276      	negs	r6, r6
 8006af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006afa:	485a      	ldr	r0, [pc, #360]	; (8006c64 <_printf_i+0x23c>)
 8006afc:	230a      	movs	r3, #10
 8006afe:	e012      	b.n	8006b26 <_printf_i+0xfe>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	6820      	ldr	r0, [r4, #0]
 8006b04:	1d19      	adds	r1, r3, #4
 8006b06:	6029      	str	r1, [r5, #0]
 8006b08:	0605      	lsls	r5, r0, #24
 8006b0a:	d501      	bpl.n	8006b10 <_printf_i+0xe8>
 8006b0c:	681e      	ldr	r6, [r3, #0]
 8006b0e:	e002      	b.n	8006b16 <_printf_i+0xee>
 8006b10:	0641      	lsls	r1, r0, #25
 8006b12:	d5fb      	bpl.n	8006b0c <_printf_i+0xe4>
 8006b14:	881e      	ldrh	r6, [r3, #0]
 8006b16:	4853      	ldr	r0, [pc, #332]	; (8006c64 <_printf_i+0x23c>)
 8006b18:	2f6f      	cmp	r7, #111	; 0x6f
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2308      	moveq	r3, #8
 8006b1e:	230a      	movne	r3, #10
 8006b20:	2100      	movs	r1, #0
 8006b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b26:	6865      	ldr	r5, [r4, #4]
 8006b28:	60a5      	str	r5, [r4, #8]
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	bfa2      	ittt	ge
 8006b2e:	6821      	ldrge	r1, [r4, #0]
 8006b30:	f021 0104 	bicge.w	r1, r1, #4
 8006b34:	6021      	strge	r1, [r4, #0]
 8006b36:	b90e      	cbnz	r6, 8006b3c <_printf_i+0x114>
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	d04b      	beq.n	8006bd4 <_printf_i+0x1ac>
 8006b3c:	4615      	mov	r5, r2
 8006b3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b42:	fb03 6711 	mls	r7, r3, r1, r6
 8006b46:	5dc7      	ldrb	r7, [r0, r7]
 8006b48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b4c:	4637      	mov	r7, r6
 8006b4e:	42bb      	cmp	r3, r7
 8006b50:	460e      	mov	r6, r1
 8006b52:	d9f4      	bls.n	8006b3e <_printf_i+0x116>
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d10b      	bne.n	8006b70 <_printf_i+0x148>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	07de      	lsls	r6, r3, #31
 8006b5c:	d508      	bpl.n	8006b70 <_printf_i+0x148>
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	6861      	ldr	r1, [r4, #4]
 8006b62:	4299      	cmp	r1, r3
 8006b64:	bfde      	ittt	le
 8006b66:	2330      	movle	r3, #48	; 0x30
 8006b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b70:	1b52      	subs	r2, r2, r5
 8006b72:	6122      	str	r2, [r4, #16]
 8006b74:	f8cd a000 	str.w	sl, [sp]
 8006b78:	464b      	mov	r3, r9
 8006b7a:	aa03      	add	r2, sp, #12
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7ff fee4 	bl	800694c <_printf_common>
 8006b84:	3001      	adds	r0, #1
 8006b86:	d14a      	bne.n	8006c1e <_printf_i+0x1f6>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b8c:	b004      	add	sp, #16
 8006b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f043 0320 	orr.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	4833      	ldr	r0, [pc, #204]	; (8006c68 <_printf_i+0x240>)
 8006b9c:	2778      	movs	r7, #120	; 0x78
 8006b9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	6829      	ldr	r1, [r5, #0]
 8006ba6:	061f      	lsls	r7, r3, #24
 8006ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bac:	d402      	bmi.n	8006bb4 <_printf_i+0x18c>
 8006bae:	065f      	lsls	r7, r3, #25
 8006bb0:	bf48      	it	mi
 8006bb2:	b2b6      	uxthmi	r6, r6
 8006bb4:	07df      	lsls	r7, r3, #31
 8006bb6:	bf48      	it	mi
 8006bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8006bbc:	6029      	str	r1, [r5, #0]
 8006bbe:	bf48      	it	mi
 8006bc0:	6023      	strmi	r3, [r4, #0]
 8006bc2:	b91e      	cbnz	r6, 8006bcc <_printf_i+0x1a4>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	f023 0320 	bic.w	r3, r3, #32
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	2310      	movs	r3, #16
 8006bce:	e7a7      	b.n	8006b20 <_printf_i+0xf8>
 8006bd0:	4824      	ldr	r0, [pc, #144]	; (8006c64 <_printf_i+0x23c>)
 8006bd2:	e7e4      	b.n	8006b9e <_printf_i+0x176>
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	e7bd      	b.n	8006b54 <_printf_i+0x12c>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	6826      	ldr	r6, [r4, #0]
 8006bdc:	6961      	ldr	r1, [r4, #20]
 8006bde:	1d18      	adds	r0, r3, #4
 8006be0:	6028      	str	r0, [r5, #0]
 8006be2:	0635      	lsls	r5, r6, #24
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0x1c4>
 8006be8:	6019      	str	r1, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <_printf_i+0x1ca>
 8006bec:	0670      	lsls	r0, r6, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0x1c0>
 8006bf0:	8019      	strh	r1, [r3, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	4615      	mov	r5, r2
 8006bf8:	e7bc      	b.n	8006b74 <_printf_i+0x14c>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	602a      	str	r2, [r5, #0]
 8006c00:	681d      	ldr	r5, [r3, #0]
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	2100      	movs	r1, #0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7f9 fb0a 	bl	8000220 <memchr>
 8006c0c:	b108      	cbz	r0, 8006c12 <_printf_i+0x1ea>
 8006c0e:	1b40      	subs	r0, r0, r5
 8006c10:	6060      	str	r0, [r4, #4]
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	2300      	movs	r3, #0
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	e7aa      	b.n	8006b74 <_printf_i+0x14c>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4649      	mov	r1, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	47d0      	blx	sl
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d0ad      	beq.n	8006b88 <_printf_i+0x160>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	d413      	bmi.n	8006c5a <_printf_i+0x232>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	4298      	cmp	r0, r3
 8006c38:	bfb8      	it	lt
 8006c3a:	4618      	movlt	r0, r3
 8006c3c:	e7a6      	b.n	8006b8c <_printf_i+0x164>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4632      	mov	r2, r6
 8006c42:	4649      	mov	r1, r9
 8006c44:	4640      	mov	r0, r8
 8006c46:	47d0      	blx	sl
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d09d      	beq.n	8006b88 <_printf_i+0x160>
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	9903      	ldr	r1, [sp, #12]
 8006c52:	1a5b      	subs	r3, r3, r1
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dcf2      	bgt.n	8006c3e <_printf_i+0x216>
 8006c58:	e7eb      	b.n	8006c32 <_printf_i+0x20a>
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	f104 0619 	add.w	r6, r4, #25
 8006c60:	e7f5      	b.n	8006c4e <_printf_i+0x226>
 8006c62:	bf00      	nop
 8006c64:	080077d5 	.word	0x080077d5
 8006c68:	080077e6 	.word	0x080077e6

08006c6c <__sflush_r>:
 8006c6c:	898a      	ldrh	r2, [r1, #12]
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	4605      	mov	r5, r0
 8006c74:	0710      	lsls	r0, r2, #28
 8006c76:	460c      	mov	r4, r1
 8006c78:	d458      	bmi.n	8006d2c <__sflush_r+0xc0>
 8006c7a:	684b      	ldr	r3, [r1, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dc05      	bgt.n	8006c8c <__sflush_r+0x20>
 8006c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dc02      	bgt.n	8006c8c <__sflush_r+0x20>
 8006c86:	2000      	movs	r0, #0
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d0f9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c98:	682f      	ldr	r7, [r5, #0]
 8006c9a:	6a21      	ldr	r1, [r4, #32]
 8006c9c:	602b      	str	r3, [r5, #0]
 8006c9e:	d032      	beq.n	8006d06 <__sflush_r+0x9a>
 8006ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	075a      	lsls	r2, r3, #29
 8006ca6:	d505      	bpl.n	8006cb4 <__sflush_r+0x48>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	1ac0      	subs	r0, r0, r3
 8006cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cae:	b10b      	cbz	r3, 8006cb4 <__sflush_r+0x48>
 8006cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb2:	1ac0      	subs	r0, r0, r3
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cba:	6a21      	ldr	r1, [r4, #32]
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b0      	blx	r6
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	d106      	bne.n	8006cd4 <__sflush_r+0x68>
 8006cc6:	6829      	ldr	r1, [r5, #0]
 8006cc8:	291d      	cmp	r1, #29
 8006cca:	d82b      	bhi.n	8006d24 <__sflush_r+0xb8>
 8006ccc:	4a29      	ldr	r2, [pc, #164]	; (8006d74 <__sflush_r+0x108>)
 8006cce:	410a      	asrs	r2, r1
 8006cd0:	07d6      	lsls	r6, r2, #31
 8006cd2:	d427      	bmi.n	8006d24 <__sflush_r+0xb8>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6062      	str	r2, [r4, #4]
 8006cd8:	04d9      	lsls	r1, r3, #19
 8006cda:	6922      	ldr	r2, [r4, #16]
 8006cdc:	6022      	str	r2, [r4, #0]
 8006cde:	d504      	bpl.n	8006cea <__sflush_r+0x7e>
 8006ce0:	1c42      	adds	r2, r0, #1
 8006ce2:	d101      	bne.n	8006ce8 <__sflush_r+0x7c>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b903      	cbnz	r3, 8006cea <__sflush_r+0x7e>
 8006ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8006cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cec:	602f      	str	r7, [r5, #0]
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d0c9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	d002      	beq.n	8006d00 <__sflush_r+0x94>
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 fa22 	bl	8007144 <_free_r>
 8006d00:	2000      	movs	r0, #0
 8006d02:	6360      	str	r0, [r4, #52]	; 0x34
 8006d04:	e7c0      	b.n	8006c88 <__sflush_r+0x1c>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b0      	blx	r6
 8006d0c:	1c41      	adds	r1, r0, #1
 8006d0e:	d1c8      	bne.n	8006ca2 <__sflush_r+0x36>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0c5      	beq.n	8006ca2 <__sflush_r+0x36>
 8006d16:	2b1d      	cmp	r3, #29
 8006d18:	d001      	beq.n	8006d1e <__sflush_r+0xb2>
 8006d1a:	2b16      	cmp	r3, #22
 8006d1c:	d101      	bne.n	8006d22 <__sflush_r+0xb6>
 8006d1e:	602f      	str	r7, [r5, #0]
 8006d20:	e7b1      	b.n	8006c86 <__sflush_r+0x1a>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	e7ad      	b.n	8006c88 <__sflush_r+0x1c>
 8006d2c:	690f      	ldr	r7, [r1, #16]
 8006d2e:	2f00      	cmp	r7, #0
 8006d30:	d0a9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006d32:	0793      	lsls	r3, r2, #30
 8006d34:	680e      	ldr	r6, [r1, #0]
 8006d36:	bf08      	it	eq
 8006d38:	694b      	ldreq	r3, [r1, #20]
 8006d3a:	600f      	str	r7, [r1, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	2300      	movne	r3, #0
 8006d40:	eba6 0807 	sub.w	r8, r6, r7
 8006d44:	608b      	str	r3, [r1, #8]
 8006d46:	f1b8 0f00 	cmp.w	r8, #0
 8006d4a:	dd9c      	ble.n	8006c86 <__sflush_r+0x1a>
 8006d4c:	6a21      	ldr	r1, [r4, #32]
 8006d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d50:	4643      	mov	r3, r8
 8006d52:	463a      	mov	r2, r7
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b0      	blx	r6
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	dc06      	bgt.n	8006d6a <__sflush_r+0xfe>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d68:	e78e      	b.n	8006c88 <__sflush_r+0x1c>
 8006d6a:	4407      	add	r7, r0
 8006d6c:	eba8 0800 	sub.w	r8, r8, r0
 8006d70:	e7e9      	b.n	8006d46 <__sflush_r+0xda>
 8006d72:	bf00      	nop
 8006d74:	dfbffffe 	.word	0xdfbffffe

08006d78 <_fflush_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	690b      	ldr	r3, [r1, #16]
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	b913      	cbnz	r3, 8006d88 <_fflush_r+0x10>
 8006d82:	2500      	movs	r5, #0
 8006d84:	4628      	mov	r0, r5
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	b118      	cbz	r0, 8006d92 <_fflush_r+0x1a>
 8006d8a:	6a03      	ldr	r3, [r0, #32]
 8006d8c:	b90b      	cbnz	r3, 8006d92 <_fflush_r+0x1a>
 8006d8e:	f7ff fb21 	bl	80063d4 <__sinit>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f3      	beq.n	8006d82 <_fflush_r+0xa>
 8006d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d9c:	07d0      	lsls	r0, r2, #31
 8006d9e:	d404      	bmi.n	8006daa <_fflush_r+0x32>
 8006da0:	0599      	lsls	r1, r3, #22
 8006da2:	d402      	bmi.n	8006daa <_fflush_r+0x32>
 8006da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006da6:	f7ff fbec 	bl	8006582 <__retarget_lock_acquire_recursive>
 8006daa:	4628      	mov	r0, r5
 8006dac:	4621      	mov	r1, r4
 8006dae:	f7ff ff5d 	bl	8006c6c <__sflush_r>
 8006db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db4:	07da      	lsls	r2, r3, #31
 8006db6:	4605      	mov	r5, r0
 8006db8:	d4e4      	bmi.n	8006d84 <_fflush_r+0xc>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	059b      	lsls	r3, r3, #22
 8006dbe:	d4e1      	bmi.n	8006d84 <_fflush_r+0xc>
 8006dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc2:	f7ff fbdf 	bl	8006584 <__retarget_lock_release_recursive>
 8006dc6:	e7dd      	b.n	8006d84 <_fflush_r+0xc>

08006dc8 <__malloc_lock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__malloc_lock+0x8>)
 8006dca:	f7ff bbda 	b.w	8006582 <__retarget_lock_acquire_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200052ec 	.word	0x200052ec

08006dd4 <__malloc_unlock>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__malloc_unlock+0x8>)
 8006dd6:	f7ff bbd5 	b.w	8006584 <__retarget_lock_release_recursive>
 8006dda:	bf00      	nop
 8006ddc:	200052ec 	.word	0x200052ec

08006de0 <__sread>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	f000 f978 	bl	80070dc <_read_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	bfab      	itete	ge
 8006df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006df2:	89a3      	ldrhlt	r3, [r4, #12]
 8006df4:	181b      	addge	r3, r3, r0
 8006df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dfa:	bfac      	ite	ge
 8006dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dfe:	81a3      	strhlt	r3, [r4, #12]
 8006e00:	bd10      	pop	{r4, pc}

08006e02 <__swrite>:
 8006e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	461f      	mov	r7, r3
 8006e08:	898b      	ldrh	r3, [r1, #12]
 8006e0a:	05db      	lsls	r3, r3, #23
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	4616      	mov	r6, r2
 8006e12:	d505      	bpl.n	8006e20 <__swrite+0x1e>
 8006e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e18:	2302      	movs	r3, #2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f000 f94c 	bl	80070b8 <_lseek_r>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	463b      	mov	r3, r7
 8006e30:	4628      	mov	r0, r5
 8006e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	f000 b973 	b.w	8007120 <_write_r>

08006e3a <__sseek>:
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e42:	f000 f939 	bl	80070b8 <_lseek_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	bf15      	itete	ne
 8006e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e56:	81a3      	strheq	r3, [r4, #12]
 8006e58:	bf18      	it	ne
 8006e5a:	81a3      	strhne	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__sclose>:
 8006e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e62:	f000 b8f7 	b.w	8007054 <_close_r>

08006e66 <__swbuf_r>:
 8006e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e68:	460e      	mov	r6, r1
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	b118      	cbz	r0, 8006e78 <__swbuf_r+0x12>
 8006e70:	6a03      	ldr	r3, [r0, #32]
 8006e72:	b90b      	cbnz	r3, 8006e78 <__swbuf_r+0x12>
 8006e74:	f7ff faae 	bl	80063d4 <__sinit>
 8006e78:	69a3      	ldr	r3, [r4, #24]
 8006e7a:	60a3      	str	r3, [r4, #8]
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	071a      	lsls	r2, r3, #28
 8006e80:	d525      	bpl.n	8006ece <__swbuf_r+0x68>
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b31b      	cbz	r3, 8006ece <__swbuf_r+0x68>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	6922      	ldr	r2, [r4, #16]
 8006e8a:	1a98      	subs	r0, r3, r2
 8006e8c:	6963      	ldr	r3, [r4, #20]
 8006e8e:	b2f6      	uxtb	r6, r6
 8006e90:	4283      	cmp	r3, r0
 8006e92:	4637      	mov	r7, r6
 8006e94:	dc04      	bgt.n	8006ea0 <__swbuf_r+0x3a>
 8006e96:	4621      	mov	r1, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f7ff ff6d 	bl	8006d78 <_fflush_r>
 8006e9e:	b9e0      	cbnz	r0, 8006eda <__swbuf_r+0x74>
 8006ea0:	68a3      	ldr	r3, [r4, #8]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	60a3      	str	r3, [r4, #8]
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	6022      	str	r2, [r4, #0]
 8006eac:	701e      	strb	r6, [r3, #0]
 8006eae:	6962      	ldr	r2, [r4, #20]
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d004      	beq.n	8006ec0 <__swbuf_r+0x5a>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	07db      	lsls	r3, r3, #31
 8006eba:	d506      	bpl.n	8006eca <__swbuf_r+0x64>
 8006ebc:	2e0a      	cmp	r6, #10
 8006ebe:	d104      	bne.n	8006eca <__swbuf_r+0x64>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f7ff ff58 	bl	8006d78 <_fflush_r>
 8006ec8:	b938      	cbnz	r0, 8006eda <__swbuf_r+0x74>
 8006eca:	4638      	mov	r0, r7
 8006ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f805 	bl	8006ee0 <__swsetup_r>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0d5      	beq.n	8006e86 <__swbuf_r+0x20>
 8006eda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ede:	e7f4      	b.n	8006eca <__swbuf_r+0x64>

08006ee0 <__swsetup_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <__swsetup_r+0xac>)
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	460c      	mov	r4, r1
 8006eea:	b118      	cbz	r0, 8006ef4 <__swsetup_r+0x14>
 8006eec:	6a03      	ldr	r3, [r0, #32]
 8006eee:	b90b      	cbnz	r3, 8006ef4 <__swsetup_r+0x14>
 8006ef0:	f7ff fa70 	bl	80063d4 <__sinit>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006efa:	0718      	lsls	r0, r3, #28
 8006efc:	d422      	bmi.n	8006f44 <__swsetup_r+0x64>
 8006efe:	06d9      	lsls	r1, r3, #27
 8006f00:	d407      	bmi.n	8006f12 <__swsetup_r+0x32>
 8006f02:	2309      	movs	r3, #9
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f10:	e034      	b.n	8006f7c <__swsetup_r+0x9c>
 8006f12:	0758      	lsls	r0, r3, #29
 8006f14:	d512      	bpl.n	8006f3c <__swsetup_r+0x5c>
 8006f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f18:	b141      	cbz	r1, 8006f2c <__swsetup_r+0x4c>
 8006f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d002      	beq.n	8006f28 <__swsetup_r+0x48>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f90e 	bl	8007144 <_free_r>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	2300      	movs	r3, #0
 8006f36:	6063      	str	r3, [r4, #4]
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f043 0308 	orr.w	r3, r3, #8
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b94b      	cbnz	r3, 8006f5c <__swsetup_r+0x7c>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f52:	d003      	beq.n	8006f5c <__swsetup_r+0x7c>
 8006f54:	4621      	mov	r1, r4
 8006f56:	4628      	mov	r0, r5
 8006f58:	f000 f840 	bl	8006fdc <__smakebuf_r>
 8006f5c:	89a0      	ldrh	r0, [r4, #12]
 8006f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f62:	f010 0301 	ands.w	r3, r0, #1
 8006f66:	d00a      	beq.n	8006f7e <__swsetup_r+0x9e>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	6963      	ldr	r3, [r4, #20]
 8006f6e:	425b      	negs	r3, r3
 8006f70:	61a3      	str	r3, [r4, #24]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	b943      	cbnz	r3, 8006f88 <__swsetup_r+0xa8>
 8006f76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f7a:	d1c4      	bne.n	8006f06 <__swsetup_r+0x26>
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	0781      	lsls	r1, r0, #30
 8006f80:	bf58      	it	pl
 8006f82:	6963      	ldrpl	r3, [r4, #20]
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	e7f4      	b.n	8006f72 <__swsetup_r+0x92>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e7f7      	b.n	8006f7c <__swsetup_r+0x9c>
 8006f8c:	20000078 	.word	0x20000078

08006f90 <__swhatbuf_r>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	460c      	mov	r4, r1
 8006f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	b096      	sub	sp, #88	; 0x58
 8006f9c:	4615      	mov	r5, r2
 8006f9e:	461e      	mov	r6, r3
 8006fa0:	da0d      	bge.n	8006fbe <__swhatbuf_r+0x2e>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	bf0c      	ite	eq
 8006fae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006fb2:	2340      	movne	r3, #64	; 0x40
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	6031      	str	r1, [r6, #0]
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	b016      	add	sp, #88	; 0x58
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
 8006fbe:	466a      	mov	r2, sp
 8006fc0:	f000 f858 	bl	8007074 <_fstat_r>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	dbec      	blt.n	8006fa2 <__swhatbuf_r+0x12>
 8006fc8:	9901      	ldr	r1, [sp, #4]
 8006fca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006fce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006fd2:	4259      	negs	r1, r3
 8006fd4:	4159      	adcs	r1, r3
 8006fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fda:	e7eb      	b.n	8006fb4 <__swhatbuf_r+0x24>

08006fdc <__smakebuf_r>:
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fe0:	079d      	lsls	r5, r3, #30
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	d507      	bpl.n	8006ff8 <__smakebuf_r+0x1c>
 8006fe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	6163      	str	r3, [r4, #20]
 8006ff4:	b002      	add	sp, #8
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	ab01      	add	r3, sp, #4
 8006ffa:	466a      	mov	r2, sp
 8006ffc:	f7ff ffc8 	bl	8006f90 <__swhatbuf_r>
 8007000:	9900      	ldr	r1, [sp, #0]
 8007002:	4605      	mov	r5, r0
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff fc21 	bl	800684c <_malloc_r>
 800700a:	b948      	cbnz	r0, 8007020 <__smakebuf_r+0x44>
 800700c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007010:	059a      	lsls	r2, r3, #22
 8007012:	d4ef      	bmi.n	8006ff4 <__smakebuf_r+0x18>
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	e7e3      	b.n	8006fe8 <__smakebuf_r+0xc>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	6020      	str	r0, [r4, #0]
 8007024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	9b00      	ldr	r3, [sp, #0]
 800702c:	6163      	str	r3, [r4, #20]
 800702e:	9b01      	ldr	r3, [sp, #4]
 8007030:	6120      	str	r0, [r4, #16]
 8007032:	b15b      	cbz	r3, 800704c <__smakebuf_r+0x70>
 8007034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007038:	4630      	mov	r0, r6
 800703a:	f000 f82d 	bl	8007098 <_isatty_r>
 800703e:	b128      	cbz	r0, 800704c <__smakebuf_r+0x70>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f023 0303 	bic.w	r3, r3, #3
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	431d      	orrs	r5, r3
 8007050:	81a5      	strh	r5, [r4, #12]
 8007052:	e7cf      	b.n	8006ff4 <__smakebuf_r+0x18>

08007054 <_close_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_close_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fb fa45 	bl	80024ee <_close>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_close_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_close_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	200052f8 	.word	0x200052f8

08007074 <_fstat_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d07      	ldr	r5, [pc, #28]	; (8007094 <_fstat_r+0x20>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	f7fb fa40 	bl	8002506 <_fstat>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d102      	bne.n	8007090 <_fstat_r+0x1c>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b103      	cbz	r3, 8007090 <_fstat_r+0x1c>
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	bd38      	pop	{r3, r4, r5, pc}
 8007092:	bf00      	nop
 8007094:	200052f8 	.word	0x200052f8

08007098 <_isatty_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d06      	ldr	r5, [pc, #24]	; (80070b4 <_isatty_r+0x1c>)
 800709c:	2300      	movs	r3, #0
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	f7fb fa3f 	bl	8002526 <_isatty>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_isatty_r+0x1a>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_isatty_r+0x1a>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	200052f8 	.word	0x200052f8

080070b8 <_lseek_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	; (80070d8 <_lseek_r+0x20>)
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fb fa38 	bl	800253c <_lseek>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_lseek_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_lseek_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	200052f8 	.word	0x200052f8

080070dc <_read_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	; (80070fc <_read_r+0x20>)
 80070e0:	4604      	mov	r4, r0
 80070e2:	4608      	mov	r0, r1
 80070e4:	4611      	mov	r1, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f7fb f9c6 	bl	800247c <_read>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_read_r+0x1e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_read_r+0x1e>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	200052f8 	.word	0x200052f8

08007100 <_sbrk_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	; (800711c <_sbrk_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fb fa24 	bl	8002558 <_sbrk>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_sbrk_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_sbrk_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	200052f8 	.word	0x200052f8

08007120 <_write_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d07      	ldr	r5, [pc, #28]	; (8007140 <_write_r+0x20>)
 8007124:	4604      	mov	r4, r0
 8007126:	4608      	mov	r0, r1
 8007128:	4611      	mov	r1, r2
 800712a:	2200      	movs	r2, #0
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f7fb f9c1 	bl	80024b6 <_write>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_write_r+0x1e>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_write_r+0x1e>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	200052f8 	.word	0x200052f8

08007144 <_free_r>:
 8007144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007146:	2900      	cmp	r1, #0
 8007148:	d044      	beq.n	80071d4 <_free_r+0x90>
 800714a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714e:	9001      	str	r0, [sp, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f1a1 0404 	sub.w	r4, r1, #4
 8007156:	bfb8      	it	lt
 8007158:	18e4      	addlt	r4, r4, r3
 800715a:	f7ff fe35 	bl	8006dc8 <__malloc_lock>
 800715e:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <_free_r+0x94>)
 8007160:	9801      	ldr	r0, [sp, #4]
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	b933      	cbnz	r3, 8007174 <_free_r+0x30>
 8007166:	6063      	str	r3, [r4, #4]
 8007168:	6014      	str	r4, [r2, #0]
 800716a:	b003      	add	sp, #12
 800716c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007170:	f7ff be30 	b.w	8006dd4 <__malloc_unlock>
 8007174:	42a3      	cmp	r3, r4
 8007176:	d908      	bls.n	800718a <_free_r+0x46>
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	1961      	adds	r1, r4, r5
 800717c:	428b      	cmp	r3, r1
 800717e:	bf01      	itttt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	e7ed      	b.n	8007166 <_free_r+0x22>
 800718a:	461a      	mov	r2, r3
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b10b      	cbz	r3, 8007194 <_free_r+0x50>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x46>
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	1855      	adds	r5, r2, r1
 8007198:	42a5      	cmp	r5, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x70>
 800719c:	6824      	ldr	r4, [r4, #0]
 800719e:	4421      	add	r1, r4
 80071a0:	1854      	adds	r4, r2, r1
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	6011      	str	r1, [r2, #0]
 80071a6:	d1e0      	bne.n	800716a <_free_r+0x26>
 80071a8:	681c      	ldr	r4, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	6053      	str	r3, [r2, #4]
 80071ae:	440c      	add	r4, r1
 80071b0:	6014      	str	r4, [r2, #0]
 80071b2:	e7da      	b.n	800716a <_free_r+0x26>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x78>
 80071b6:	230c      	movs	r3, #12
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	e7d6      	b.n	800716a <_free_r+0x26>
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	1961      	adds	r1, r4, r5
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf04      	itt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	bf04      	itt	eq
 80071cc:	1949      	addeq	r1, r1, r5
 80071ce:	6021      	streq	r1, [r4, #0]
 80071d0:	6054      	str	r4, [r2, #4]
 80071d2:	e7ca      	b.n	800716a <_free_r+0x26>
 80071d4:	b003      	add	sp, #12
 80071d6:	bd30      	pop	{r4, r5, pc}
 80071d8:	200052f0 	.word	0x200052f0

080071dc <sqrt>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	ed2d 8b02 	vpush	{d8}
 80071e2:	ec55 4b10 	vmov	r4, r5, d0
 80071e6:	f000 f825 	bl	8007234 <__ieee754_sqrt>
 80071ea:	4622      	mov	r2, r4
 80071ec:	462b      	mov	r3, r5
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	eeb0 8a40 	vmov.f32	s16, s0
 80071f6:	eef0 8a60 	vmov.f32	s17, s1
 80071fa:	f7f9 fcb7 	bl	8000b6c <__aeabi_dcmpun>
 80071fe:	b990      	cbnz	r0, 8007226 <sqrt+0x4a>
 8007200:	2200      	movs	r2, #0
 8007202:	2300      	movs	r3, #0
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800720c:	b158      	cbz	r0, 8007226 <sqrt+0x4a>
 800720e:	f7ff f98d 	bl	800652c <__errno>
 8007212:	2321      	movs	r3, #33	; 0x21
 8007214:	6003      	str	r3, [r0, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	4610      	mov	r0, r2
 800721c:	4619      	mov	r1, r3
 800721e:	f7f9 fb35 	bl	800088c <__aeabi_ddiv>
 8007222:	ec41 0b18 	vmov	d8, r0, r1
 8007226:	eeb0 0a48 	vmov.f32	s0, s16
 800722a:	eef0 0a68 	vmov.f32	s1, s17
 800722e:	ecbd 8b02 	vpop	{d8}
 8007232:	bd38      	pop	{r3, r4, r5, pc}

08007234 <__ieee754_sqrt>:
 8007234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	ec55 4b10 	vmov	r4, r5, d0
 800723c:	4e67      	ldr	r6, [pc, #412]	; (80073dc <__ieee754_sqrt+0x1a8>)
 800723e:	43ae      	bics	r6, r5
 8007240:	ee10 0a10 	vmov	r0, s0
 8007244:	ee10 2a10 	vmov	r2, s0
 8007248:	4629      	mov	r1, r5
 800724a:	462b      	mov	r3, r5
 800724c:	d10d      	bne.n	800726a <__ieee754_sqrt+0x36>
 800724e:	f7f9 f9f3 	bl	8000638 <__aeabi_dmul>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f837 	bl	80002cc <__adddf3>
 800725e:	4604      	mov	r4, r0
 8007260:	460d      	mov	r5, r1
 8007262:	ec45 4b10 	vmov	d0, r4, r5
 8007266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	2d00      	cmp	r5, #0
 800726c:	dc0b      	bgt.n	8007286 <__ieee754_sqrt+0x52>
 800726e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007272:	4326      	orrs	r6, r4
 8007274:	d0f5      	beq.n	8007262 <__ieee754_sqrt+0x2e>
 8007276:	b135      	cbz	r5, 8007286 <__ieee754_sqrt+0x52>
 8007278:	f7f9 f826 	bl	80002c8 <__aeabi_dsub>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	f7f9 fb04 	bl	800088c <__aeabi_ddiv>
 8007284:	e7eb      	b.n	800725e <__ieee754_sqrt+0x2a>
 8007286:	1509      	asrs	r1, r1, #20
 8007288:	f000 808d 	beq.w	80073a6 <__ieee754_sqrt+0x172>
 800728c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007290:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007298:	07c9      	lsls	r1, r1, #31
 800729a:	bf5c      	itt	pl
 800729c:	005b      	lslpl	r3, r3, #1
 800729e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80072a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072a6:	bf58      	it	pl
 80072a8:	0052      	lslpl	r2, r2, #1
 80072aa:	2500      	movs	r5, #0
 80072ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80072b0:	1076      	asrs	r6, r6, #1
 80072b2:	0052      	lsls	r2, r2, #1
 80072b4:	f04f 0e16 	mov.w	lr, #22
 80072b8:	46ac      	mov	ip, r5
 80072ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072be:	eb0c 0001 	add.w	r0, ip, r1
 80072c2:	4298      	cmp	r0, r3
 80072c4:	bfde      	ittt	le
 80072c6:	1a1b      	suble	r3, r3, r0
 80072c8:	eb00 0c01 	addle.w	ip, r0, r1
 80072cc:	186d      	addle	r5, r5, r1
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	f1be 0e01 	subs.w	lr, lr, #1
 80072d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80072d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80072dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80072e0:	d1ed      	bne.n	80072be <__ieee754_sqrt+0x8a>
 80072e2:	4674      	mov	r4, lr
 80072e4:	2720      	movs	r7, #32
 80072e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80072ea:	4563      	cmp	r3, ip
 80072ec:	eb01 000e 	add.w	r0, r1, lr
 80072f0:	dc02      	bgt.n	80072f8 <__ieee754_sqrt+0xc4>
 80072f2:	d113      	bne.n	800731c <__ieee754_sqrt+0xe8>
 80072f4:	4290      	cmp	r0, r2
 80072f6:	d811      	bhi.n	800731c <__ieee754_sqrt+0xe8>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	eb00 0e01 	add.w	lr, r0, r1
 80072fe:	da57      	bge.n	80073b0 <__ieee754_sqrt+0x17c>
 8007300:	f1be 0f00 	cmp.w	lr, #0
 8007304:	db54      	blt.n	80073b0 <__ieee754_sqrt+0x17c>
 8007306:	f10c 0801 	add.w	r8, ip, #1
 800730a:	eba3 030c 	sub.w	r3, r3, ip
 800730e:	4290      	cmp	r0, r2
 8007310:	bf88      	it	hi
 8007312:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007316:	1a12      	subs	r2, r2, r0
 8007318:	440c      	add	r4, r1
 800731a:	46c4      	mov	ip, r8
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	3f01      	subs	r7, #1
 8007320:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007324:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007328:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800732c:	d1dd      	bne.n	80072ea <__ieee754_sqrt+0xb6>
 800732e:	4313      	orrs	r3, r2
 8007330:	d01b      	beq.n	800736a <__ieee754_sqrt+0x136>
 8007332:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80073e0 <__ieee754_sqrt+0x1ac>
 8007336:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80073e4 <__ieee754_sqrt+0x1b0>
 800733a:	e9da 0100 	ldrd	r0, r1, [sl]
 800733e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007342:	f7f8 ffc1 	bl	80002c8 <__aeabi_dsub>
 8007346:	e9da 8900 	ldrd	r8, r9, [sl]
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4640      	mov	r0, r8
 8007350:	4649      	mov	r1, r9
 8007352:	f7f9 fbed 	bl	8000b30 <__aeabi_dcmple>
 8007356:	b140      	cbz	r0, 800736a <__ieee754_sqrt+0x136>
 8007358:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800735c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007360:	e9db 2300 	ldrd	r2, r3, [fp]
 8007364:	d126      	bne.n	80073b4 <__ieee754_sqrt+0x180>
 8007366:	3501      	adds	r5, #1
 8007368:	463c      	mov	r4, r7
 800736a:	106a      	asrs	r2, r5, #1
 800736c:	0863      	lsrs	r3, r4, #1
 800736e:	07e9      	lsls	r1, r5, #31
 8007370:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007374:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007378:	bf48      	it	mi
 800737a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800737e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007382:	461c      	mov	r4, r3
 8007384:	e76d      	b.n	8007262 <__ieee754_sqrt+0x2e>
 8007386:	0ad3      	lsrs	r3, r2, #11
 8007388:	3815      	subs	r0, #21
 800738a:	0552      	lsls	r2, r2, #21
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0fa      	beq.n	8007386 <__ieee754_sqrt+0x152>
 8007390:	02dc      	lsls	r4, r3, #11
 8007392:	d50a      	bpl.n	80073aa <__ieee754_sqrt+0x176>
 8007394:	f1c1 0420 	rsb	r4, r1, #32
 8007398:	fa22 f404 	lsr.w	r4, r2, r4
 800739c:	1e4d      	subs	r5, r1, #1
 800739e:	408a      	lsls	r2, r1
 80073a0:	4323      	orrs	r3, r4
 80073a2:	1b41      	subs	r1, r0, r5
 80073a4:	e772      	b.n	800728c <__ieee754_sqrt+0x58>
 80073a6:	4608      	mov	r0, r1
 80073a8:	e7f0      	b.n	800738c <__ieee754_sqrt+0x158>
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	3101      	adds	r1, #1
 80073ae:	e7ef      	b.n	8007390 <__ieee754_sqrt+0x15c>
 80073b0:	46e0      	mov	r8, ip
 80073b2:	e7aa      	b.n	800730a <__ieee754_sqrt+0xd6>
 80073b4:	f7f8 ff8a 	bl	80002cc <__adddf3>
 80073b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4640      	mov	r0, r8
 80073c2:	4649      	mov	r1, r9
 80073c4:	f7f9 fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80073c8:	b120      	cbz	r0, 80073d4 <__ieee754_sqrt+0x1a0>
 80073ca:	1ca0      	adds	r0, r4, #2
 80073cc:	bf08      	it	eq
 80073ce:	3501      	addeq	r5, #1
 80073d0:	3402      	adds	r4, #2
 80073d2:	e7ca      	b.n	800736a <__ieee754_sqrt+0x136>
 80073d4:	3401      	adds	r4, #1
 80073d6:	f024 0401 	bic.w	r4, r4, #1
 80073da:	e7c6      	b.n	800736a <__ieee754_sqrt+0x136>
 80073dc:	7ff00000 	.word	0x7ff00000
 80073e0:	20000080 	.word	0x20000080
 80073e4:	20000088 	.word	0x20000088

080073e8 <round>:
 80073e8:	ec53 2b10 	vmov	r2, r3, d0
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80073f2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80073f6:	2813      	cmp	r0, #19
 80073f8:	ee10 5a10 	vmov	r5, s0
 80073fc:	4619      	mov	r1, r3
 80073fe:	dc18      	bgt.n	8007432 <round+0x4a>
 8007400:	2800      	cmp	r0, #0
 8007402:	da09      	bge.n	8007418 <round+0x30>
 8007404:	3001      	adds	r0, #1
 8007406:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800740a:	d103      	bne.n	8007414 <round+0x2c>
 800740c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007410:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007414:	2300      	movs	r3, #0
 8007416:	e02a      	b.n	800746e <round+0x86>
 8007418:	4c16      	ldr	r4, [pc, #88]	; (8007474 <round+0x8c>)
 800741a:	4104      	asrs	r4, r0
 800741c:	ea03 0604 	and.w	r6, r3, r4
 8007420:	4316      	orrs	r6, r2
 8007422:	d011      	beq.n	8007448 <round+0x60>
 8007424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007428:	4103      	asrs	r3, r0
 800742a:	440b      	add	r3, r1
 800742c:	ea23 0104 	bic.w	r1, r3, r4
 8007430:	e7f0      	b.n	8007414 <round+0x2c>
 8007432:	2833      	cmp	r0, #51	; 0x33
 8007434:	dd0b      	ble.n	800744e <round+0x66>
 8007436:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800743a:	d105      	bne.n	8007448 <round+0x60>
 800743c:	ee10 0a10 	vmov	r0, s0
 8007440:	f7f8 ff44 	bl	80002cc <__adddf3>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	ec43 2b10 	vmov	d0, r2, r3
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8007452:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007456:	40f4      	lsrs	r4, r6
 8007458:	4214      	tst	r4, r2
 800745a:	d0f5      	beq.n	8007448 <round+0x60>
 800745c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8007460:	2301      	movs	r3, #1
 8007462:	4083      	lsls	r3, r0
 8007464:	195b      	adds	r3, r3, r5
 8007466:	bf28      	it	cs
 8007468:	3101      	addcs	r1, #1
 800746a:	ea23 0304 	bic.w	r3, r3, r4
 800746e:	461a      	mov	r2, r3
 8007470:	460b      	mov	r3, r1
 8007472:	e7e9      	b.n	8007448 <round+0x60>
 8007474:	000fffff 	.word	0x000fffff

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
