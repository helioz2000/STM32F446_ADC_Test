
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f8  0800abe4  0800abe4  0001abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bedc  0800bedc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee4  0800bee4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800beec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f3c  200000a8  0800bf94  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005fe4  0800bf94  00025fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015325  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033dd  00000000  00000000  00035440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00038820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1c  00000000  00000000  00039ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266f9  00000000  00000000  0003aabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001988c  00000000  00000000  000611b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a57  00000000  00000000  0007aa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d38  00000000  00000000  0015d498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001631d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800abcc 	.word	0x0800abcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800abcc 	.word	0x0800abcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <calc_process_dma_buffer>:
 * Process the DMA buffer
 * parameter second_half: > 0 to process 2nd half of buffer, 0 = 1st half of buffer
 * parameter adc_num: 0 = ADC1, 1 = ADC2 (use ADC1_IDX or ADC2_IDX)
 * returns: -1 on failure, 0 if OK
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8000f24:	b4b0      	push	{r4, r5, r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
		return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	e16c      	b.n	8001222 <calc_process_dma_buffer+0x2fe>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8000f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f56:	3301      	adds	r3, #1
 8000f58:	f887 3020 	strb.w	r3, [r7, #32]
	// first or second half of DMA buffer?
	if (second_half) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <calc_process_dma_buffer+0x46>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8000f62:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000f66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f68:	e001      	b.n	8000f6e <calc_process_dma_buffer+0x4a>
	} else {
		dma_buf_start = 0;	// first half
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8000f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f70:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8000f74:	83fb      	strh	r3, [r7, #30]

	adc_raw_meta[raw_buf_first].min = adc_dma_buf[adc_num][0];
 8000f76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f7a:	49ac      	ldr	r1, [pc, #688]	; (800122c <calc_process_dma_buffer+0x308>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000f82:	fb00 f303 	mul.w	r3, r0, r3
 8000f86:	440b      	add	r3, r1
 8000f88:	8818      	ldrh	r0, [r3, #0]
 8000f8a:	49a9      	ldr	r1, [pc, #676]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	4602      	mov	r2, r0
 8000f98:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].max = adc_dma_buf[adc_num][0];
 8000f9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f9e:	49a3      	ldr	r1, [pc, #652]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fa6:	fb00 f303 	mul.w	r3, r0, r3
 8000faa:	440b      	add	r3, r1
 8000fac:	8818      	ldrh	r0, [r3, #0]
 8000fae:	49a0      	ldr	r1, [pc, #640]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3302      	adds	r3, #2
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].min = adc_dma_buf[adc_num][1];
 8000fc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fc4:	4999      	ldr	r1, [pc, #612]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fcc:	fb00 f303 	mul.w	r3, r0, r3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	8818      	ldrh	r0, [r3, #0]
 8000fd6:	4996      	ldr	r1, [pc, #600]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].max = adc_dma_buf[adc_num][1];
 8000fe6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000ff2:	fb00 f303 	mul.w	r3, r0, r3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	8818      	ldrh	r0, [r3, #0]
 8000ffc:	498c      	ldr	r1, [pc, #560]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3302      	adds	r3, #2
 800100a:	4602      	mov	r2, r0
 800100c:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross1 = -1;
 800100e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001012:	4987      	ldr	r1, [pc, #540]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3304      	adds	r3, #4
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross2 = -1;
 8001026:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800102a:	4981      	ldr	r1, [pc, #516]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3308      	adds	r3, #8
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross1 = -1;
 800103e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001042:	497b      	ldr	r1, [pc, #492]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3304      	adds	r3, #4
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross2 = -1;
 8001056:	f897 2020 	ldrb.w	r2, [r7, #32]
 800105a:	4975      	ldr	r1, [pc, #468]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3308      	adds	r3, #8
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	601a      	str	r2, [r3, #0]
	// split DMA buffer and copy into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001072:	e0d0      	b.n	8001216 <calc_process_dma_buffer+0x2f2>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001074:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001076:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800107a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800107c:	4c6b      	ldr	r4, [pc, #428]	; (800122c <calc_process_dma_buffer+0x308>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001084:	fb05 f000 	mul.w	r0, r5, r0
 8001088:	4401      	add	r1, r0
 800108a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <calc_process_dma_buffer+0x310>)
 8001090:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001094:	fb00 f202 	mul.w	r2, r0, r2
 8001098:	4413      	add	r3, r2
 800109a:	4622      	mov	r2, r4
 800109c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 80010a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010aa:	1c58      	adds	r0, r3, #1
 80010ac:	8478      	strh	r0, [r7, #34]	; 0x22
 80010ae:	461d      	mov	r5, r3
 80010b0:	485e      	ldr	r0, [pc, #376]	; (800122c <calc_process_dma_buffer+0x308>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80010b8:	fb04 f303 	mul.w	r3, r4, r3
 80010bc:	440b      	add	r3, r1
 80010be:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80010c2:	495c      	ldr	r1, [pc, #368]	; (8001234 <calc_process_dma_buffer+0x310>)
 80010c4:	f44f 7352 	mov.w	r3, #840	; 0x348
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	442b      	add	r3, r5
 80010ce:	4602      	mov	r2, r0
 80010d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_meta[raw_buf_first].min = MIN(adc_raw_meta[raw_buf_first].min, adc_dma_buf[adc_num][i]);
 80010d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010d8:	4955      	ldr	r1, [pc, #340]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	83bb      	strh	r3, [r7, #28]
 80010e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ea:	4950      	ldr	r1, [pc, #320]	; (800122c <calc_process_dma_buffer+0x308>)
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80010f2:	fb00 f202 	mul.w	r2, r0, r2
 80010f6:	4413      	add	r3, r2
 80010f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010fc:	837b      	strh	r3, [r7, #26]
 80010fe:	8b7a      	ldrh	r2, [r7, #26]
 8001100:	8bbb      	ldrh	r3, [r7, #28]
 8001102:	4293      	cmp	r3, r2
 8001104:	bf28      	it	cs
 8001106:	4613      	movcs	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800110e:	b298      	uxth	r0, r3
 8001110:	4947      	ldr	r1, [pc, #284]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	4602      	mov	r2, r0
 800111e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_first].max = MAX(adc_raw_meta[raw_buf_first].max, adc_dma_buf[adc_num][i]);
 8001120:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001124:	4942      	ldr	r1, [pc, #264]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3302      	adds	r3, #2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	833b      	strh	r3, [r7, #24]
 8001136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001138:	493c      	ldr	r1, [pc, #240]	; (800122c <calc_process_dma_buffer+0x308>)
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001140:	fb00 f202 	mul.w	r2, r0, r2
 8001144:	4413      	add	r3, r2
 8001146:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800114a:	82fb      	strh	r3, [r7, #22]
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	8b3b      	ldrh	r3, [r7, #24]
 8001150:	4293      	cmp	r3, r2
 8001152:	bf38      	it	cc
 8001154:	4613      	movcc	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800115c:	b298      	uxth	r0, r3
 800115e:	4934      	ldr	r1, [pc, #208]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	3302      	adds	r3, #2
 800116c:	4602      	mov	r2, r0
 800116e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].min = MIN(adc_raw_meta[raw_buf_second].min, adc_dma_buf[adc_num][i+1]);
 8001170:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001174:	492e      	ldr	r1, [pc, #184]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	82bb      	strh	r3, [r7, #20]
 8001184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001186:	3301      	adds	r3, #1
 8001188:	4928      	ldr	r1, [pc, #160]	; (800122c <calc_process_dma_buffer+0x308>)
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001190:	fb00 f202 	mul.w	r2, r0, r2
 8001194:	4413      	add	r3, r2
 8001196:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800119a:	827b      	strh	r3, [r7, #18]
 800119c:	8a7a      	ldrh	r2, [r7, #18]
 800119e:	8abb      	ldrh	r3, [r7, #20]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf28      	it	cs
 80011a4:	4613      	movcs	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ac:	b298      	uxth	r0, r3
 80011ae:	4920      	ldr	r1, [pc, #128]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	4602      	mov	r2, r0
 80011bc:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].max = MAX(adc_raw_meta[raw_buf_second].max, adc_dma_buf[adc_num][i+1]);
 80011be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3302      	adds	r3, #2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	823b      	strh	r3, [r7, #16]
 80011d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011d6:	3301      	adds	r3, #1
 80011d8:	4914      	ldr	r1, [pc, #80]	; (800122c <calc_process_dma_buffer+0x308>)
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80011e0:	fb00 f202 	mul.w	r2, r0, r2
 80011e4:	4413      	add	r3, r2
 80011e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	89fa      	ldrh	r2, [r7, #14]
 80011ee:	8a3b      	ldrh	r3, [r7, #16]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bf38      	it	cc
 80011f4:	4613      	movcc	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3302      	adds	r3, #2
 800120c:	4602      	mov	r2, r0
 800120e:	801a      	strh	r2, [r3, #0]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001212:	3302      	adds	r3, #2
 8001214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001216:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001218:	8bfb      	ldrh	r3, [r7, #30]
 800121a:	429a      	cmp	r2, r3
 800121c:	f67f af2a 	bls.w	8001074 <calc_process_dma_buffer+0x150>
	}
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	372c      	adds	r7, #44	; 0x2c
 8001226:	46bd      	mov	sp, r7
 8001228:	bcb0      	pop	{r4, r5, r7}
 800122a:	4770      	bx	lr
 800122c:	20000780 	.word	0x20000780
 8001230:	200000c4 	.word	0x200000c4
 8001234:	20003c00 	.word	0x20003c00

08001238 <calc_show_buffer>:

void calc_show_buffer(uint8_t buf_num) {
 8001238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800123c:	b08a      	sub	sp, #40	; 0x28
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t address = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint64_t squared_acc = 0;
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t rms_value, adc_raw;
	uint8_t gt_zero_count = 0, lt_zero_count = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	74fb      	strb	r3, [r7, #19]
 800125c:	2300      	movs	r3, #0
 800125e:	74bb      	strb	r3, [r7, #18]
	//uint16_t adc_raw_min = adc_raw_buf[buf_num][0];
	//uint16_t adc_raw_max = adc_raw_min;
	if (buf_num > 3) { return; }
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	f200 809a 	bhi.w	800139c <calc_show_buffer+0x164>
	term_print("Buffer %d\r\n", buf_num);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4619      	mov	r1, r3
 800126c:	484e      	ldr	r0, [pc, #312]	; (80013a8 <calc_show_buffer+0x170>)
 800126e:	f001 fd41 	bl	8002cf4 <term_print>
	term_print("%3d: ", 0);
 8001272:	2100      	movs	r1, #0
 8001274:	484d      	ldr	r0, [pc, #308]	; (80013ac <calc_show_buffer+0x174>)
 8001276:	f001 fd3d 	bl	8002cf4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e044      	b.n	800130a <calc_show_buffer+0xd2>
		if (count >= 20) {
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b13      	cmp	r3, #19
 8001284:	dd06      	ble.n	8001294 <calc_show_buffer+0x5c>
			count =0;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
			term_print("\r\n%3d: ", address);
 800128a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800128c:	4619      	mov	r1, r3
 800128e:	4848      	ldr	r0, [pc, #288]	; (80013b0 <calc_show_buffer+0x178>)
 8001290:	f001 fd30 	bl	8002cf4 <term_print>
		}
		adc_raw = adc_raw_buf[buf_num][i];
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4947      	ldr	r1, [pc, #284]	; (80013b4 <calc_show_buffer+0x17c>)
 8001298:	f44f 7252 	mov.w	r2, #840	; 0x348
 800129c:	fb03 f202 	mul.w	r2, r3, r2
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a8:	81fb      	strh	r3, [r7, #14]
		term_print("%04u ", adc_raw);
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <calc_show_buffer+0x180>)
 80012b0:	f001 fd20 	bl	8002cf4 <term_print>

		squared_acc += adc_raw_buf[buf_num][i] * adc_raw_buf[buf_num][i];
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	493f      	ldr	r1, [pc, #252]	; (80013b4 <calc_show_buffer+0x17c>)
 80012b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012bc:	fb03 f202 	mul.w	r2, r3, r2
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c8:	4618      	mov	r0, r3
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <calc_show_buffer+0x17c>)
 80012ce:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	fb00 f303 	mul.w	r3, r0, r3
 80012e2:	17da      	asrs	r2, r3, #31
 80012e4:	461c      	mov	r4, r3
 80012e6:	4615      	mov	r5, r2
 80012e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ec:	eb12 0804 	adds.w	r8, r2, r4
 80012f0:	eb43 0905 	adc.w	r9, r3, r5
 80012f4:	e9c7 8906 	strd	r8, r9, [r7, #24]
		count++; address++;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3301      	adds	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001300:	3301      	adds	r3, #1
 8001302:	847b      	strh	r3, [r7, #34]	; 0x22
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001310:	d3b6      	bcc.n	8001280 <calc_show_buffer+0x48>
	}
	rms_value = (uint16_t) sqrt((squared_acc / ADC_NUM_DATA));
 8001312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001316:	f44f 7252 	mov.w	r2, #840	; 0x348
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f7ff fc83 	bl	8000c28 <__aeabi_uldivmod>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff f94f 	bl	80005cc <__aeabi_ul2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b10 	vmov	d0, r2, r3
 8001336:	f009 fac1 	bl	800a8bc <sqrt>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc51 	bl	8000be8 <__aeabi_d2uiz>
 8001346:	4603      	mov	r3, r0
 8001348:	823b      	strh	r3, [r7, #16]
	term_print("\r\nMin: %dmV Max: %dmV ", calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].min), calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].max) );
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	491b      	ldr	r1, [pc, #108]	; (80013bc <calc_show_buffer+0x184>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f86a 	bl	8001434 <calc_adc_raw_to_mv_int>
 8001360:	4604      	mov	r4, r0
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4915      	ldr	r1, [pc, #84]	; (80013bc <calc_show_buffer+0x184>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3302      	adds	r3, #2
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f85d 	bl	8001434 <calc_adc_raw_to_mv_int>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4621      	mov	r1, r4
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <calc_show_buffer+0x188>)
 8001382:	f001 fcb7 	bl	8002cf4 <term_print>
	term_print("RMS: %dmV [%u]\r\n", calc_adc_raw_to_mv_int(rms_value), rms_value);
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f853 	bl	8001434 <calc_adc_raw_to_mv_int>
 800138e:	4601      	mov	r1, r0
 8001390:	8a3b      	ldrh	r3, [r7, #16]
 8001392:	461a      	mov	r2, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <calc_show_buffer+0x18c>)
 8001396:	f001 fcad 	bl	8002cf4 <term_print>
 800139a:	e000      	b.n	800139e <calc_show_buffer+0x166>
	if (buf_num > 3) { return; }
 800139c:	bf00      	nop

}
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a6:	bf00      	nop
 80013a8:	0800abe4 	.word	0x0800abe4
 80013ac:	0800abf0 	.word	0x0800abf0
 80013b0:	0800abf8 	.word	0x0800abf8
 80013b4:	20003c00 	.word	0x20003c00
 80013b8:	0800ac00 	.word	0x0800ac00
 80013bc:	200000c4 	.word	0x200000c4
 80013c0:	0800ac08 	.word	0x0800ac08
 80013c4:	0800ac20 	.word	0x0800ac20

080013c8 <calc_csv_buffer>:

void calc_csv_buffer(uint8_t buf_num) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (buf_num > 3) { return; }
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d821      	bhi.n	800141c <calc_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4619      	mov	r1, r3
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <calc_csv_buffer+0x5c>)
 80013de:	f001 fc89 	bl	8002cf4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e011      	b.n	800140c <calc_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <calc_csv_buffer+0x60>)
 80013ec:	f44f 7252 	mov.w	r2, #840	; 0x348
 80013f0:	fb03 f202 	mul.w	r2, r3, r2
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <calc_csv_buffer+0x64>)
 8001402:	f001 fc77 	bl	8002cf4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001412:	d3e9      	bcc.n	80013e8 <calc_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <calc_csv_buffer+0x68>)
 8001416:	f001 fc6d 	bl	8002cf4 <term_print>
 800141a:	e000      	b.n	800141e <calc_csv_buffer+0x56>
	if (buf_num > 3) { return; }
 800141c:	bf00      	nop
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800abe4 	.word	0x0800abe4
 8001428:	20003c00 	.word	0x20003c00
 800142c:	0800ac34 	.word	0x0800ac34
 8001430:	0800ac3c 	.word	0x0800ac3c

08001434 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(uint16_t adc_raw) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f817 	bl	8001474 <calc_adc_raw_to_mv_float>
 8001446:	ee10 3a10 	vmov	r3, s0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b10 	vmov	d0, r2, r3
 8001458:	f009 fb36 	bl	800aac8 <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb98 	bl	8000b98 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <calc_adc_raw_to_mv_float>:

float calc_adc_raw_to_mv_float(uint16_t adc_raw) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001488:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014a8 <calc_adc_raw_to_mv_float+0x34>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014ac <calc_adc_raw_to_mv_float+0x38>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	457ff000 	.word	0x457ff000
 80014ac:	454e4000 	.word	0x454e4000

080014b0 <cmd_error>:
extern uint8_t led_cmd;
extern uint8_t tft_display;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <cmd_error+0x18>)
 80014bc:	f001 fc1a 	bl	8002cf4 <term_print>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800ac44 	.word	0x0800ac44

080014cc <cmd_t>:


int cmd_t(uint8_t* cmd_str) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b74      	cmp	r3, #116	; 0x74
 80014dc:	d014      	beq.n	8001508 <cmd_t+0x3c>
 80014de:	2b74      	cmp	r3, #116	; 0x74
 80014e0:	dc17      	bgt.n	8001512 <cmd_t+0x46>
 80014e2:	2b54      	cmp	r3, #84	; 0x54
 80014e4:	d010      	beq.n	8001508 <cmd_t+0x3c>
 80014e6:	2b54      	cmp	r3, #84	; 0x54
 80014e8:	dc13      	bgt.n	8001512 <cmd_t+0x46>
 80014ea:	2b30      	cmp	r3, #48	; 0x30
 80014ec:	d002      	beq.n	80014f4 <cmd_t+0x28>
 80014ee:	2b31      	cmp	r3, #49	; 0x31
 80014f0:	d005      	beq.n	80014fe <cmd_t+0x32>
 80014f2:	e00e      	b.n	8001512 <cmd_t+0x46>
	case '0':
		tft_display = 1;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <cmd_t+0x58>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
		return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e00b      	b.n	8001516 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <cmd_t+0x58>)
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e006      	b.n	8001516 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <cmd_t+0x58>)
 800150a:	2209      	movs	r2, #9
 800150c:	701a      	strb	r2, [r3, #0]
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e001      	b.n	8001516 <cmd_t+0x4a>
	}
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000076e 	.word	0x2000076e

08001528 <cmd_help>:


int cmd_help(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <cmd_help+0x34>)
 800152e:	f001 fbe1 	bl	8002cf4 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <cmd_help+0x38>)
 8001534:	f001 fbde 	bl	8002cf4 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8001538:	480a      	ldr	r0, [pc, #40]	; (8001564 <cmd_help+0x3c>)
 800153a:	f001 fbdb 	bl	8002cf4 <term_print>
#endif
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 800153e:	480a      	ldr	r0, [pc, #40]	; (8001568 <cmd_help+0x40>)
 8001540:	f001 fbd8 	bl	8002cf4 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <cmd_help+0x44>)
 8001546:	f001 fbd5 	bl	8002cf4 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <cmd_help+0x48>)
 800154c:	f001 fbd2 	bl	8002cf4 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <cmd_help+0x4c>)
 8001552:	f001 fbcf 	bl	8002cf4 <term_print>
	return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0800ac5c 	.word	0x0800ac5c
 8001560:	0800ac70 	.word	0x0800ac70
 8001564:	0800aca8 	.word	0x0800aca8
 8001568:	0800acdc 	.word	0x0800acdc
 800156c:	0800ad1c 	.word	0x0800ad1c
 8001570:	0800ad38 	.word	0x0800ad38
 8001574:	0800ad6c 	.word	0x0800ad6c

08001578 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001584:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3b3f      	subs	r3, #63	; 0x3f
 800158c:	2b35      	cmp	r3, #53	; 0x35
 800158e:	f200 80a5 	bhi.w	80016dc <cmd_process+0x164>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <cmd_process+0x20>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080016d7 	.word	0x080016d7
 800159c:	080016dd 	.word	0x080016dd
 80015a0:	080016dd 	.word	0x080016dd
 80015a4:	080016dd 	.word	0x080016dd
 80015a8:	08001671 	.word	0x08001671
 80015ac:	08001685 	.word	0x08001685
 80015b0:	080016dd 	.word	0x080016dd
 80015b4:	080016dd 	.word	0x080016dd
 80015b8:	080016dd 	.word	0x080016dd
 80015bc:	080016d7 	.word	0x080016d7
 80015c0:	080016dd 	.word	0x080016dd
 80015c4:	080016dd 	.word	0x080016dd
 80015c8:	080016dd 	.word	0x080016dd
 80015cc:	08001699 	.word	0x08001699
 80015d0:	080016dd 	.word	0x080016dd
 80015d4:	080016dd 	.word	0x080016dd
 80015d8:	080016dd 	.word	0x080016dd
 80015dc:	080016dd 	.word	0x080016dd
 80015e0:	080016dd 	.word	0x080016dd
 80015e4:	080016ad 	.word	0x080016ad
 80015e8:	080016b9 	.word	0x080016b9
 80015ec:	080016cd 	.word	0x080016cd
 80015f0:	080016dd 	.word	0x080016dd
 80015f4:	080016dd 	.word	0x080016dd
 80015f8:	080016dd 	.word	0x080016dd
 80015fc:	080016dd 	.word	0x080016dd
 8001600:	080016dd 	.word	0x080016dd
 8001604:	080016dd 	.word	0x080016dd
 8001608:	080016dd 	.word	0x080016dd
 800160c:	080016dd 	.word	0x080016dd
 8001610:	080016dd 	.word	0x080016dd
 8001614:	080016dd 	.word	0x080016dd
 8001618:	080016dd 	.word	0x080016dd
 800161c:	080016dd 	.word	0x080016dd
 8001620:	080016dd 	.word	0x080016dd
 8001624:	080016dd 	.word	0x080016dd
 8001628:	08001671 	.word	0x08001671
 800162c:	08001685 	.word	0x08001685
 8001630:	080016dd 	.word	0x080016dd
 8001634:	080016dd 	.word	0x080016dd
 8001638:	080016dd 	.word	0x080016dd
 800163c:	080016d7 	.word	0x080016d7
 8001640:	080016dd 	.word	0x080016dd
 8001644:	080016dd 	.word	0x080016dd
 8001648:	080016dd 	.word	0x080016dd
 800164c:	08001699 	.word	0x08001699
 8001650:	080016dd 	.word	0x080016dd
 8001654:	080016dd 	.word	0x080016dd
 8001658:	080016dd 	.word	0x080016dd
 800165c:	080016dd 	.word	0x080016dd
 8001660:	080016dd 	.word	0x080016dd
 8001664:	080016ad 	.word	0x080016ad
 8001668:	080016b9 	.word	0x080016b9
 800166c:	080016cd 	.word	0x080016cd
	case 'C':
	case 'c':
		csv_buffer = cmd_str[1] - 0x30;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b30      	subs	r3, #48	; 0x30
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <cmd_process+0x170>)
 800167c:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
		break;
 8001682:	e02b      	b.n	80016dc <cmd_process+0x164>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		cmd_display_buffer = cmd_str[1] - 0x30;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3b30      	subs	r3, #48	; 0x30
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <cmd_process+0x174>)
 8001690:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
		break;
 8001696:	e021      	b.n	80016dc <cmd_process+0x164>
#endif
	case 'L':
	case 'l':
		led_cmd = cmd_str[1] - 0x30 + 1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3b2f      	subs	r3, #47	; 0x2f
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <cmd_process+0x178>)
 80016a4:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
		break;
 80016aa:	e017      	b.n	80016dc <cmd_process+0x164>
	case 'R':
	case 'r':
		adc_restart = 1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <cmd_process+0x17c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
		break;
 80016b6:	e011      	b.n	80016dc <cmd_process+0x164>
	case 'S':
	case 's':
		show_buffer = cmd_str[1] - 0x30;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3b30      	subs	r3, #48	; 0x30
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <cmd_process+0x180>)
 80016c4:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
		break;
 80016ca:	e007      	b.n	80016dc <cmd_process+0x164>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fefd 	bl	80014cc <cmd_t>
 80016d2:	60f8      	str	r0, [r7, #12]
		break;
 80016d4:	e002      	b.n	80016dc <cmd_process+0x164>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80016d6:	f7ff ff27 	bl	8001528 <cmd_help>
 80016da:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000076c 	.word	0x2000076c
 80016ec:	2000076b 	.word	0x2000076b
 80016f0:	2000076d 	.word	0x2000076d
 80016f4:	20000769 	.word	0x20000769
 80016f8:	2000076a 	.word	0x2000076a

080016fc <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fd83 	bl	8000210 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <CMD_Handler+0x3c>)
 8001710:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <CMD_Handler+0x3c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fec8 	bl	80014b0 <cmd_error>
		return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001724:	e003      	b.n	800172e <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff26 	bl	8001578 <cmd_process>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200000f4 	.word	0x200000f4

0800173c <draw_curve>:

uint16_t channel_colour[4] = { YELLOW, CYAN, GREEN, ORANGE};
uint16_t curve_y[DISPLAY_X];	// store the curve before drawing, enables overwrite on next curve
uint16_t curve_len = 0;

void draw_curve(uint16_t colour) {
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b087      	sub	sp, #28
 8001740:	af02      	add	r7, sp, #8
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
	for (int x=1; x<curve_len; x++) {
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e019      	b.n	8001780 <draw_curve+0x44>
		Displ_Line(x-1, curve_y[x-1], x, curve_y[x], colour);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29b      	uxth	r3, r3
 8001754:	b218      	sxth	r0, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3b01      	subs	r3, #1
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <draw_curve+0x5c>)
 800175c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001760:	b219      	sxth	r1, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	b21a      	sxth	r2, r3
 8001766:	4c0c      	ldr	r4, [pc, #48]	; (8001798 <draw_curve+0x5c>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800176e:	b21c      	sxth	r4, r3
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4623      	mov	r3, r4
 8001776:	f002 f898 	bl	80038aa <Displ_Line>
	for (int x=1; x<curve_len; x++) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <draw_curve+0x60>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4293      	cmp	r3, r2
 800178a:	dbdf      	blt.n	800174c <draw_curve+0x10>
	}
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	200000f8 	.word	0x200000f8
 800179c:	200004b8 	.word	0x200004b8

080017a0 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM*ADC_NUM_CHANNELS) || (bufnum < 0) ) return;	// buffer range check
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	f200 814a 	bhi.w	8001a46 <display_show_curve+0x2a6>
	Displ_BackLight('1');
 80017b2:	2031      	movs	r0, #49	; 0x31
 80017b4:	f002 fe72 	bl	800449c <Displ_BackLight>

	float fScale = (float)DISPLAY_Y / (float)adc_raw_meta[bufnum].max;
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	49a5      	ldr	r1, [pc, #660]	; (8001a50 <display_show_curve+0x2b0>)
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	3302      	adds	r3, #2
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d2:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8001a54 <display_show_curve+0x2b4>
 80017d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017da:	edc7 7a06 	vstr	s15, [r7, #24]
	int scale_factor = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]

	int y_offset = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
	int value = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
	int buf_index = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

	if (curve_len) {
 80017ee:	4b9a      	ldr	r3, [pc, #616]	; (8001a58 <display_show_curve+0x2b8>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <display_show_curve+0x5e>
		// Delete previous curve
		draw_curve(BLACK);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff ffa0 	bl	800173c <draw_curve>
 80017fc:	e005      	b.n	800180a <display_show_curve+0x6a>
	} else {
		Displ_CLS(BLACK);
 80017fe:	2000      	movs	r0, #0
 8001800:	f001 fe6a 	bl	80034d8 <Displ_CLS>
		curve_len = 0;
 8001804:	4b94      	ldr	r3, [pc, #592]	; (8001a58 <display_show_curve+0x2b8>)
 8001806:	2200      	movs	r2, #0
 8001808:	801a      	strh	r2, [r3, #0]
	}

	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 800180a:	edd7 7a06 	vldr	s15, [r7, #24]
 800180e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	f140 808a 	bpl.w	8001932 <display_show_curve+0x192>
		scale_factor = trunc(1/fScale)+1; // divisor
 800181e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001822:	edd7 7a06 	vldr	s15, [r7, #24]
 8001826:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800182a:	ee16 0a90 	vmov	r0, s13
 800182e:	f7fe feab 	bl	8000588 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b10 	vmov	d0, r2, r3
 800183a:	f009 f98d 	bl	800ab58 <trunc>
 800183e:	ec51 0b10 	vmov	r0, r1, d0
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b85      	ldr	r3, [pc, #532]	; (8001a5c <display_show_curve+0x2bc>)
 8001848:	f7fe fd40 	bl	80002cc <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f9a0 	bl	8000b98 <__aeabi_d2iz>
 8001858:	4603      	mov	r3, r0
 800185a:	617b      	str	r3, [r7, #20]
		curve_y[0] = DISPLAY_Y - (((adc_raw_buf[bufnum][0] + adc_raw_buf[bufnum][1]) / 2) / scale_factor + y_offset) ;
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <display_show_curve+0x2c0>)
 8001860:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4a7b      	ldr	r2, [pc, #492]	; (8001a60 <display_show_curve+0x2c0>)
 8001872:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3302      	adds	r3, #2
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	4403      	add	r3, r0
 8001882:	0fda      	lsrs	r2, r3, #31
 8001884:	4413      	add	r3, r2
 8001886:	105b      	asrs	r3, r3, #1
 8001888:	461a      	mov	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001890:	b29a      	uxth	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <display_show_curve+0x2c4>)
 80018a2:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < ADC_NUM_DATA / 2; pos_x++) {
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	e03e      	b.n	8001928 <display_show_curve+0x188>
			// calculate reading value by averaging 3 readings (the one before and the one after)
			value = (adc_raw_buf[bufnum][buf_index] + adc_raw_buf[bufnum][buf_index-1] + adc_raw_buf[bufnum][buf_index+1]) / 3;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	496c      	ldr	r1, [pc, #432]	; (8001a60 <display_show_curve+0x2c0>)
 80018ae:	f44f 7252 	mov.w	r2, #840	; 0x348
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	4413      	add	r3, r2
 80018ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018be:	461c      	mov	r4, r3
 80018c0:	79fa      	ldrb	r2, [r7, #7]
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4966      	ldr	r1, [pc, #408]	; (8001a60 <display_show_curve+0x2c0>)
 80018c8:	f44f 7052 	mov.w	r0, #840	; 0x348
 80018cc:	fb00 f202 	mul.w	r2, r0, r2
 80018d0:	4413      	add	r3, r2
 80018d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018d6:	4423      	add	r3, r4
 80018d8:	79f9      	ldrb	r1, [r7, #7]
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	3201      	adds	r2, #1
 80018de:	4860      	ldr	r0, [pc, #384]	; (8001a60 <display_show_curve+0x2c0>)
 80018e0:	f44f 7452 	mov.w	r4, #840	; 0x348
 80018e4:	fb04 f101 	mul.w	r1, r4, r1
 80018e8:	440a      	add	r2, r1
 80018ea:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <display_show_curve+0x2c8>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	17db      	asrs	r3, r3, #31
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = DISPLAY_Y - (value / scale_factor + y_offset);
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fb92 f3f3 	sdiv	r3, r2, r3
 8001904:	b29a      	uxth	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001912:	b299      	uxth	r1, r3
 8001914:	4a53      	ldr	r2, [pc, #332]	; (8001a64 <display_show_curve+0x2c4>)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// advance readings buffer by twice
			buf_index+=2;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	3302      	adds	r3, #2
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
		for (int pos_x=1; pos_x < ADC_NUM_DATA / 2; pos_x++) {
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	3301      	adds	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800192e:	d3bc      	bcc.n	80018aa <display_show_curve+0x10a>
 8001930:	e07d      	b.n	8001a2e <display_show_curve+0x28e>
		}
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8001932:	69b8      	ldr	r0, [r7, #24]
 8001934:	f7fe fe28 	bl	8000588 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	ec43 2b10 	vmov	d0, r2, r3
 8001940:	f009 f90a 	bl	800ab58 <trunc>
 8001944:	ec53 2b10 	vmov	r2, r3, d0
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f924 	bl	8000b98 <__aeabi_d2iz>
 8001950:	4603      	mov	r3, r0
 8001952:	617b      	str	r3, [r7, #20]
		// calculate start of first line
		curve_y[0] = DISPLAY_Y - (((adc_raw_buf[bufnum][0] + adc_raw_buf[bufnum][1]) / 2) * scale_factor + y_offset) ;
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4a42      	ldr	r2, [pc, #264]	; (8001a60 <display_show_curve+0x2c0>)
 8001958:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <display_show_curve+0x2c0>)
 800196a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3302      	adds	r3, #2
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	4403      	add	r3, r0
 800197a:	0fda      	lsrs	r2, r3, #31
 800197c:	4413      	add	r3, r2
 800197e:	105b      	asrs	r3, r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	b29b      	uxth	r3, r3
 8001986:	fb12 f303 	smulbb	r3, r2, r3
 800198a:	b29a      	uxth	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <display_show_curve+0x2c4>)
 800199c:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < ADC_NUM_DATA / 2; pos_x++) {
 800199e:	2301      	movs	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e040      	b.n	8001a26 <display_show_curve+0x286>
			// calculate reading value by averaging 3 readings (the one before and the one after)
			value = (adc_raw_buf[bufnum][buf_index] + adc_raw_buf[bufnum][buf_index-1] + adc_raw_buf[bufnum][buf_index+1]) / 3;
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	492e      	ldr	r1, [pc, #184]	; (8001a60 <display_show_curve+0x2c0>)
 80019a8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80019ac:	fb03 f202 	mul.w	r2, r3, r2
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	4413      	add	r3, r2
 80019b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019b8:	461c      	mov	r4, r3
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3b01      	subs	r3, #1
 80019c0:	4927      	ldr	r1, [pc, #156]	; (8001a60 <display_show_curve+0x2c0>)
 80019c2:	f44f 7052 	mov.w	r0, #840	; 0x348
 80019c6:	fb00 f202 	mul.w	r2, r0, r2
 80019ca:	4413      	add	r3, r2
 80019cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019d0:	4423      	add	r3, r4
 80019d2:	79f9      	ldrb	r1, [r7, #7]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d6:	3201      	adds	r2, #1
 80019d8:	4821      	ldr	r0, [pc, #132]	; (8001a60 <display_show_curve+0x2c0>)
 80019da:	f44f 7452 	mov.w	r4, #840	; 0x348
 80019de:	fb04 f101 	mul.w	r1, r4, r1
 80019e2:	440a      	add	r2, r1
 80019e4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <display_show_curve+0x2c8>)
 80019ec:	fb82 1203 	smull	r1, r2, r2, r3
 80019f0:	17db      	asrs	r3, r3, #31
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	60fb      	str	r3, [r7, #12]
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = DISPLAY_Y - value * scale_factor + y_offset;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	b299      	uxth	r1, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	fb11 f303 	smulbb	r3, r1, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001a10:	b299      	uxth	r1, r3
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <display_show_curve+0x2c4>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// advance readings buffer by twice
			buf_index+=2;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int pos_x=1; pos_x < ADC_NUM_DATA / 2; pos_x++) {
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	3301      	adds	r3, #1
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001a2c:	d3ba      	bcc.n	80019a4 <display_show_curve+0x204>
		}
	}

	curve_len = ADC_NUM_DATA / 2;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <display_show_curve+0x2b8>)
 8001a30:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001a34:	801a      	strh	r2, [r3, #0]
	draw_curve(channel_colour[bufnum]);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <display_show_curve+0x2cc>)
 8001a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fe7c 	bl	800173c <draw_curve>
 8001a44:	e000      	b.n	8001a48 <display_show_curve+0x2a8>
	if ( (bufnum >= ADC_NUM*ADC_NUM_CHANNELS) || (bufnum < 0) ) return;	// buffer range check
 8001a46:	bf00      	nop
}
 8001a48:	372c      	adds	r7, #44	; 0x2c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000c4 	.word	0x200000c4
 8001a54:	43a00000 	.word	0x43a00000
 8001a58:	200004b8 	.word	0x200004b8
 8001a5c:	3ff00000 	.word	0x3ff00000
 8001a60:	20003c00 	.word	0x20003c00
 8001a64:	200000f8 	.word	0x200000f8
 8001a68:	55555556 	.word	0x55555556
 8001a6c:	20000000 	.word	0x20000000

08001a70 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001a74:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001a78:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <start_adcs+0x40>)
 8001a7a:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <start_adcs+0x44>)
 8001a7c:	f003 fb08 	bl	8005090 <HAL_ADC_Start_DMA>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <start_adcs+0x20>
		  term_print("Error starting ADC1 DMA\r\n");
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <start_adcs+0x48>)
 8001a88:	f001 f934 	bl	8002cf4 <term_print>
	  	  Error_Handler();
 8001a8c:	f000 fdaa 	bl	80025e4 <Error_Handler>
	  }
	  //Start ADC2 - keeps running via TIM2
	  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001a90:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001a94:	4909      	ldr	r1, [pc, #36]	; (8001abc <start_adcs+0x4c>)
 8001a96:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <start_adcs+0x50>)
 8001a98:	f003 fafa 	bl	8005090 <HAL_ADC_Start_DMA>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <start_adcs+0x3c>
		  term_print("Error starting ADC2 DMA\r\n");
 8001aa2:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <start_adcs+0x54>)
 8001aa4:	f001 f926 	bl	8002cf4 <term_print>
	   	  Error_Handler();
 8001aa8:	f000 fd9c 	bl	80025e4 <Error_Handler>
	  }
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000780 	.word	0x20000780
 8001ab4:	200004bc 	.word	0x200004bc
 8001ab8:	0800ad88 	.word	0x0800ad88
 8001abc:	200021c0 	.word	0x200021c0
 8001ac0:	20000504 	.word	0x20000504
 8001ac4:	0800ada4 	.word	0x0800ada4

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ace:	f003 fa05 	bl	8004edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 f9cb 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f000 fbe5 	bl	80022a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ada:	f000 fba5 	bl	8002228 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ade:	f000 fb79 	bl	80021d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ae2:	f000 fb2b 	bl	800213c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ae6:	f000 fa33 	bl	8001f50 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001aea:	f000 fa91 	bl	8002010 <MX_ADC2_Init>
  MX_SPI2_Init();
 8001aee:	f000 faef 	bl	80020d0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  Displ_Init(Displ_Orientat_90); // initialize the display and set the initial display orientation (90°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8001af2:	2001      	movs	r0, #1
 8001af4:	f001 fa82 	bl	8002ffc <Displ_Init>
#endif

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8001af8:	2201      	movs	r2, #1
 8001afa:	4975      	ldr	r1, [pc, #468]	; (8001cd0 <main+0x208>)
 8001afc:	4875      	ldr	r0, [pc, #468]	; (8001cd4 <main+0x20c>)
 8001afe:	f006 fe1c 	bl	800873a <HAL_UART_Receive_IT>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <main+0x44>
    Error_Handler();
 8001b08:	f000 fd6c 	bl	80025e4 <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001b0c:	4872      	ldr	r0, [pc, #456]	; (8001cd8 <main+0x210>)
 8001b0e:	f006 f8f9 	bl	8007d04 <HAL_TIM_Base_Start_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <main+0x54>
     Error_Handler();
 8001b18:	f000 fd64 	bl	80025e4 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 8001b1c:	f7ff ffa8 	bl	8001a70 <start_adcs>

#ifdef USE_DISPLAY
  // Draw initial TFT Display
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance.
 8001b20:	2000      	movs	r0, #0
 8001b22:	f001 fcd9 	bl	80034d8 <Displ_CLS>
  Displ_Line(0, 160, 479, 160, BLUE);
 8001b26:	231f      	movs	r3, #31
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	23a0      	movs	r3, #160	; 0xa0
 8001b2c:	f240 12df 	movw	r2, #479	; 0x1df
 8001b30:	21a0      	movs	r1, #160	; 0xa0
 8001b32:	2000      	movs	r0, #0
 8001b34:	f001 feb9 	bl	80038aa <Displ_Line>
  Displ_Line(0, 140, 240, 140, RED);
 8001b38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	238c      	movs	r3, #140	; 0x8c
 8001b40:	22f0      	movs	r2, #240	; 0xf0
 8001b42:	218c      	movs	r1, #140	; 0x8c
 8001b44:	2000      	movs	r0, #0
 8001b46:	f001 feb0 	bl	80038aa <Displ_Line>
  Displ_WString(10, 10, "10,10" , Font20, 1, RED, WHITE);
 8001b4a:	4b64      	ldr	r3, [pc, #400]	; (8001cdc <main+0x214>)
 8001b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b50:	9204      	str	r2, [sp, #16]
 8001b52:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b56:	9203      	str	r2, [sp, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	9202      	str	r2, [sp, #8]
 8001b5c:	466c      	mov	r4, sp
 8001b5e:	1d1a      	adds	r2, r3, #4
 8001b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b64:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <main+0x218>)
 8001b6c:	210a      	movs	r1, #10
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f002 fc54 	bl	800441c <Displ_WString>
  Displ_WString(380, 10, "380,10" , Font20, 1, RED, WHITE);
 8001b74:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <main+0x214>)
 8001b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7a:	9204      	str	r2, [sp, #16]
 8001b7c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b80:	9203      	str	r2, [sp, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	9202      	str	r2, [sp, #8]
 8001b86:	466c      	mov	r4, sp
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <main+0x21c>)
 8001b96:	210a      	movs	r1, #10
 8001b98:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8001b9c:	f002 fc3e 	bl	800441c <Displ_WString>
  Displ_WString(10, 300, "10,300" , Font20, 1, RED, WHITE);
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <main+0x214>)
 8001ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba6:	9204      	str	r2, [sp, #16]
 8001ba8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001bac:	9203      	str	r2, [sp, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	9202      	str	r2, [sp, #8]
 8001bb2:	466c      	mov	r4, sp
 8001bb4:	1d1a      	adds	r2, r3, #4
 8001bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bba:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <main+0x220>)
 8001bc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001bc6:	200a      	movs	r0, #10
 8001bc8:	f002 fc28 	bl	800441c <Displ_WString>
  Displ_BackLight('1');
 8001bcc:	2031      	movs	r0, #49	; 0x31
 8001bce:	f002 fc65 	bl	800449c <Displ_BackLight>
#endif

  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	2212      	movs	r2, #18
 8001bd8:	4944      	ldr	r1, [pc, #272]	; (8001cec <main+0x224>)
 8001bda:	483e      	ldr	r0, [pc, #248]	; (8001cd4 <main+0x20c>)
 8001bdc:	f006 fd1b 	bl	8008616 <HAL_UART_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <main+0x122>
    Error_Handler();
 8001be6:	f000 fcfd 	bl	80025e4 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle UART communication
	  if (rx_cmd_ready) {
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <main+0x228>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <main+0x13c>
		  CMD_Handler((uint8_t*)rx_buff);
 8001bf2:	4840      	ldr	r0, [pc, #256]	; (8001cf4 <main+0x22c>)
 8001bf4:	f7ff fd82 	bl	80016fc <CMD_Handler>
		  rx_count = 0;
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <main+0x230>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <main+0x228>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <main+0x234>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <main+0x14e>
		  adc_restart = 0;
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <main+0x234>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8001c12:	f7ff ff2d 	bl	8001a70 <start_adcs>
	  }

	  if (show_buffer) {
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <main+0x238>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <main+0x16a>
		  calc_show_buffer(show_buffer-1);
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <main+0x238>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fb06 	bl	8001238 <calc_show_buffer>
		  show_buffer = 0;
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <main+0x238>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
	  }
	  if (csv_buffer) {
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <main+0x23c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <main+0x186>
  	  	  calc_csv_buffer(csv_buffer-1);
 8001c3a:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <main+0x23c>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fbc0 	bl	80013c8 <calc_csv_buffer>
	  	  csv_buffer = 0;
 8001c48:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <main+0x23c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
	  }

#ifdef USE_DISPLAY
	  if (cmd_display_buffer) {
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <main+0x240>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <main+0x1a2>
		  display_show_curve(cmd_display_buffer-1);
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <main+0x240>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fd9e 	bl	80017a0 <display_show_curve>
	  	  cmd_display_buffer = 0;
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <main+0x240>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
	  }

	  if (tft_display) {
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <main+0x244>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d020      	beq.n	8001cb4 <main+0x1ec>
		  if (tft_display == 9) {
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <main+0x244>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d10e      	bne.n	8001c98 <main+0x1d0>
			  term_print("Running TFT performance test ...\r\n");
 8001c7a:	4825      	ldr	r0, [pc, #148]	; (8001d10 <main+0x248>)
 8001c7c:	f001 f83a 	bl	8002cf4 <term_print>
			  Displ_BackLight('1');
 8001c80:	2031      	movs	r0, #49	; 0x31
 8001c82:	f002 fc0b 	bl	800449c <Displ_BackLight>
			  //Displ_PerfTest();
			  Displ_TestAll();
 8001c86:	f003 f8d3 	bl	8004e30 <Displ_TestAll>
			  Displ_BackLight('0');
 8001c8a:	2030      	movs	r0, #48	; 0x30
 8001c8c:	f002 fc06 	bl	800449c <Displ_BackLight>
			  term_print("....completed\r\n");
 8001c90:	4820      	ldr	r0, [pc, #128]	; (8001d14 <main+0x24c>)
 8001c92:	f001 f82f 	bl	8002cf4 <term_print>
 8001c96:	e00a      	b.n	8001cae <main+0x1e6>
		  } else {
			  if (tft_display == 1) {
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <main+0x244>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d103      	bne.n	8001ca8 <main+0x1e0>
				  Displ_BackLight('0');
 8001ca0:	2030      	movs	r0, #48	; 0x30
 8001ca2:	f002 fbfb 	bl	800449c <Displ_BackLight>
 8001ca6:	e002      	b.n	8001cae <main+0x1e6>
			  } else {
				  Displ_BackLight('1');
 8001ca8:	2031      	movs	r0, #49	; 0x31
 8001caa:	f002 fbf7 	bl	800449c <Displ_BackLight>
			  }
		  }
		  tft_display = 0;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <main+0x244>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
	  }
#endif

	  if (led_cmd) {
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <main+0x250>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d039      	beq.n	8001d30 <main+0x268>
		  if (led_cmd > 1) {
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <main+0x250>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d92d      	bls.n	8001d20 <main+0x258>
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4814      	ldr	r0, [pc, #80]	; (8001d1c <main+0x254>)
 8001cca:	f004 fc61 	bl	8006590 <HAL_GPIO_WritePin>
 8001cce:	e02c      	b.n	8001d2a <main+0x262>
 8001cd0:	20000752 	.word	0x20000752
 8001cd4:	2000070c 	.word	0x2000070c
 8001cd8:	200006c4 	.word	0x200006c4
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	0800adc0 	.word	0x0800adc0
 8001ce4:	0800adc8 	.word	0x0800adc8
 8001ce8:	0800add0 	.word	0x0800add0
 8001cec:	20000014 	.word	0x20000014
 8001cf0:	20000768 	.word	0x20000768
 8001cf4:	20000754 	.word	0x20000754
 8001cf8:	20000750 	.word	0x20000750
 8001cfc:	20000769 	.word	0x20000769
 8001d00:	2000076a 	.word	0x2000076a
 8001d04:	2000076c 	.word	0x2000076c
 8001d08:	2000076b 	.word	0x2000076b
 8001d0c:	2000076e 	.word	0x2000076e
 8001d10:	0800add8 	.word	0x0800add8
 8001d14:	0800adfc 	.word	0x0800adfc
 8001d18:	2000076d 	.word	0x2000076d
 8001d1c:	40020000 	.word	0x40020000
		  } else {
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2120      	movs	r1, #32
 8001d24:	4846      	ldr	r0, [pc, #280]	; (8001e40 <main+0x378>)
 8001d26:	f004 fc33 	bl	8006590 <HAL_GPIO_WritePin>
		  }
		  led_cmd = 0;
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <main+0x37c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <main+0x380>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	dc0b      	bgt.n	8001d50 <main+0x288>
 8001d38:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <main+0x384>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	dc07      	bgt.n	8001d50 <main+0x288>
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <main+0x388>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	dc03      	bgt.n	8001d50 <main+0x288>
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <main+0x38c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	dd28      	ble.n	8001da2 <main+0x2da>
		  term_print("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <main+0x380>)
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <main+0x384>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <main+0x388>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <main+0x38c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4603      	mov	r3, r0
 8001d64:	483c      	ldr	r0, [pc, #240]	; (8001e58 <main+0x390>)
 8001d66:	f000 ffc5 	bl	8002cf4 <term_print>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <main+0x380>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	dd02      	ble.n	8001d78 <main+0x2b0>
 8001d72:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <main+0x380>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <main+0x384>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	dd02      	ble.n	8001d86 <main+0x2be>
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <main+0x384>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <main+0x388>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	dd02      	ble.n	8001d94 <main+0x2cc>
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <main+0x388>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <main+0x38c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	dd02      	ble.n	8001da2 <main+0x2da>
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <main+0x38c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <main+0x380>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dd0e      	ble.n	8001dc8 <main+0x300>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8001daa:	2100      	movs	r1, #0
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff f8b9 	bl	8000f24 <calc_process_dma_buffer>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <main+0x2f6>
			  term_print("Processing ADC1 DMA 1st half failed\r\n");
 8001db8:	4828      	ldr	r0, [pc, #160]	; (8001e5c <main+0x394>)
 8001dba:	f000 ff9b 	bl	8002cf4 <term_print>
		  }
		  adc1_dma_l_count--;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <main+0x380>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <main+0x380>)
 8001dc6:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <main+0x384>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dd0e      	ble.n	8001dee <main+0x326>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7ff f8a6 	bl	8000f24 <calc_process_dma_buffer>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <main+0x31c>
	  		term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8001dde:	4820      	ldr	r0, [pc, #128]	; (8001e60 <main+0x398>)
 8001de0:	f000 ff88 	bl	8002cf4 <term_print>
	  	  }
	  	  adc1_dma_h_count--;
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <main+0x384>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <main+0x384>)
 8001dec:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <main+0x388>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dd0e      	ble.n	8001e14 <main+0x34c>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8001df6:	2101      	movs	r1, #1
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff f893 	bl	8000f24 <calc_process_dma_buffer>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <main+0x342>
	  		term_print("Processing ADC2 DMA 1st half failed\r\n");
 8001e04:	4817      	ldr	r0, [pc, #92]	; (8001e64 <main+0x39c>)
 8001e06:	f000 ff75 	bl	8002cf4 <term_print>
	  	  }
	  	  adc2_dma_l_count--;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <main+0x388>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <main+0x388>)
 8001e12:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <main+0x38c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f77f aee6 	ble.w	8001bea <main+0x122>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff f87f 	bl	8000f24 <calc_process_dma_buffer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <main+0x36a>
	  		term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <main+0x3a0>)
 8001e2e:	f000 ff61 	bl	8002cf4 <term_print>
	  	  }
	   	  adc2_dma_h_count--;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <main+0x38c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <main+0x38c>)
 8001e3a:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 8001e3c:	e6d5      	b.n	8001bea <main+0x122>
 8001e3e:	bf00      	nop
 8001e40:	40020000 	.word	0x40020000
 8001e44:	2000076d 	.word	0x2000076d
 8001e48:	20000770 	.word	0x20000770
 8001e4c:	20000774 	.word	0x20000774
 8001e50:	20000778 	.word	0x20000778
 8001e54:	2000077c 	.word	0x2000077c
 8001e58:	0800ae0c 	.word	0x0800ae0c
 8001e5c:	0800ae38 	.word	0x0800ae38
 8001e60:	0800ae60 	.word	0x0800ae60
 8001e64:	0800ae88 	.word	0x0800ae88
 8001e68:	0800aeb0 	.word	0x0800aeb0

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	; 0x50
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	2234      	movs	r2, #52	; 0x34
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f007 fd04 	bl	8009888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <SystemClock_Config+0xdc>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <SystemClock_Config+0xdc>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <SystemClock_Config+0xdc>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	2300      	movs	r3, #0
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <SystemClock_Config+0xe0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a25      	ldr	r2, [pc, #148]	; (8001f4c <SystemClock_Config+0xe0>)
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <SystemClock_Config+0xe0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001edc:	2308      	movs	r3, #8
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ee0:	23b4      	movs	r3, #180	; 0xb4
 8001ee2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 ff3d 	bl	8006d74 <HAL_RCC_OscConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f00:	f000 fb70 	bl	80025e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f04:	f004 fb9c 	bl	8006640 <HAL_PWREx_EnableOverDrive>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f0e:	f000 fb69 	bl	80025e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f12:	230f      	movs	r3, #15
 8001f14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f16:	2302      	movs	r3, #2
 8001f18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	2105      	movs	r1, #5
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fbd5 	bl	80066e0 <HAL_RCC_ClockConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f3c:	f000 fb52 	bl	80025e4 <Error_Handler>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3750      	adds	r7, #80	; 0x50
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000

08001f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f64:	4a29      	ldr	r2, [pc, #164]	; (800200c <MX_ADC1_Init+0xbc>)
 8001f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f94:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fb4:	4814      	ldr	r0, [pc, #80]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001fb6:	f003 f827 	bl	8005008 <HAL_ADC_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001fc0:	f000 fb10 	bl	80025e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001fd6:	f003 f96b 	bl	80052b0 <HAL_ADC_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001fe0:	f000 fb00 	bl	80025e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_ADC1_Init+0xb8>)
 8001ff2:	f003 f95d 	bl	80052b0 <HAL_ADC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ffc:	f000 faf2 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200004bc 	.word	0x200004bc
 800200c:	40012000 	.word	0x40012000

08002010 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <MX_ADC2_Init+0xbc>)
 8002026:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <MX_ADC2_Init+0xb8>)
 800202a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800202e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002038:	2201      	movs	r2, #1
 800203a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <MX_ADC2_Init+0xb8>)
 800203e:	2200      	movs	r2, #0
 8002040:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <MX_ADC2_Init+0xb8>)
 800204c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002054:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <MX_ADC2_Init+0xb8>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002062:	2202      	movs	r2, #2
 8002064:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002074:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002076:	f002 ffc7 	bl	8005008 <HAL_ADC_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8002080:	f000 fab0 	bl	80025e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002084:	2301      	movs	r3, #1
 8002086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800208c:	2301      	movs	r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <MX_ADC2_Init+0xb8>)
 8002096:	f003 f90b 	bl	80052b0 <HAL_ADC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80020a0:	f000 faa0 	bl	80025e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020a4:	230b      	movs	r3, #11
 80020a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020a8:	2302      	movs	r3, #2
 80020aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_ADC2_Init+0xb8>)
 80020b2:	f003 f8fd 	bl	80052b0 <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80020bc:	f000 fa92 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000504 	.word	0x20000504
 80020cc:	40012100 	.word	0x40012100

080020d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI2_Init+0x64>)
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <MX_SPI2_Init+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_SPI2_Init+0x64>)
 80020dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI2_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI2_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_SPI2_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI2_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI2_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI2_Init+0x64>)
 800211c:	220a      	movs	r2, #10
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_SPI2_Init+0x64>)
 8002122:	f005 f8c5 	bl	80072b0 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800212c:	f000 fa5a 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000060c 	.word	0x2000060c
 8002138:	40003800 	.word	0x40003800

0800213c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <MX_TIM2_Init+0x94>)
 800215a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800215e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <MX_TIM2_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM2_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_TIM2_Init+0x94>)
 800216e:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8002172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_TIM2_Init+0x94>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_TIM2_Init+0x94>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002180:	4813      	ldr	r0, [pc, #76]	; (80021d0 <MX_TIM2_Init+0x94>)
 8002182:	f005 fd6f 	bl	8007c64 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800218c:	f000 fa2a 	bl	80025e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4619      	mov	r1, r3
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <MX_TIM2_Init+0x94>)
 800219e:	f005 ff29 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021a8:	f000 fa1c 	bl	80025e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021ac:	2320      	movs	r3, #32
 80021ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b4:	463b      	mov	r3, r7
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_TIM2_Init+0x94>)
 80021ba:	f006 f94f 	bl	800845c <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021c4:	f000 fa0e 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200006c4 	.word	0x200006c4

080021d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_USART2_UART_Init+0x50>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 800220c:	f006 f9b6 	bl	800857c <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002216:	f000 f9e5 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000070c 	.word	0x2000070c
 8002224:	40004400 	.word	0x40004400

08002228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <MX_DMA_Init+0x78>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <MX_DMA_Init+0x78>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_DMA_Init+0x78>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_DMA_Init+0x78>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <MX_DMA_Init+0x78>)
 8002254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_DMA_Init+0x78>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	200f      	movs	r0, #15
 800226c:	f003 fbab 	bl	80059c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002270:	200f      	movs	r0, #15
 8002272:	f003 fbc4 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2038      	movs	r0, #56	; 0x38
 800227c:	f003 fba3 	bl	80059c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002280:	2038      	movs	r0, #56	; 0x38
 8002282:	f003 fbbc 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	203a      	movs	r0, #58	; 0x3a
 800228c:	f003 fb9b 	bl	80059c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002290:	203a      	movs	r0, #58	; 0x3a
 8002292:	f003 fbb4 	bl	80059fe <HAL_NVIC_EnableIRQ>

}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <MX_GPIO_Init+0x178>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a56      	ldr	r2, [pc, #344]	; (800241c <MX_GPIO_Init+0x178>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <MX_GPIO_Init+0x178>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <MX_GPIO_Init+0x178>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a4f      	ldr	r2, [pc, #316]	; (800241c <MX_GPIO_Init+0x178>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b4d      	ldr	r3, [pc, #308]	; (800241c <MX_GPIO_Init+0x178>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b49      	ldr	r3, [pc, #292]	; (800241c <MX_GPIO_Init+0x178>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a48      	ldr	r2, [pc, #288]	; (800241c <MX_GPIO_Init+0x178>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <MX_GPIO_Init+0x178>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b42      	ldr	r3, [pc, #264]	; (800241c <MX_GPIO_Init+0x178>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a41      	ldr	r2, [pc, #260]	; (800241c <MX_GPIO_Init+0x178>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <MX_GPIO_Init+0x178>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8002330:	483b      	ldr	r0, [pc, #236]	; (8002420 <MX_GPIO_Init+0x17c>)
 8002332:	f004 f92d 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	483a      	ldr	r0, [pc, #232]	; (8002424 <MX_GPIO_Init+0x180>)
 800233c:	f004 f928 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002346:	4836      	ldr	r0, [pc, #216]	; (8002420 <MX_GPIO_Init+0x17c>)
 8002348:	f004 f922 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	4835      	ldr	r0, [pc, #212]	; (8002428 <MX_GPIO_Init+0x184>)
 8002352:	f004 f91d 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	482d      	ldr	r0, [pc, #180]	; (8002424 <MX_GPIO_Init+0x180>)
 800236e:	f003 ff63 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin;
 8002372:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4825      	ldr	r0, [pc, #148]	; (8002420 <MX_GPIO_Init+0x17c>)
 800238c:	f003 ff54 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	481e      	ldr	r0, [pc, #120]	; (8002420 <MX_GPIO_Init+0x17c>)
 80023a8:	f003 ff46 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4818      	ldr	r0, [pc, #96]	; (8002424 <MX_GPIO_Init+0x180>)
 80023c4:	f003 ff38 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80023c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <MX_GPIO_Init+0x17c>)
 80023e2:	f003 ff29 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 80023e6:	2340      	movs	r3, #64	; 0x40
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	480a      	ldr	r0, [pc, #40]	; (8002428 <MX_GPIO_Init+0x184>)
 80023fe:	f003 ff1b 	bl	8006238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2028      	movs	r0, #40	; 0x28
 8002408:	f003 fadd 	bl	80059c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800240c:	2028      	movs	r0, #40	; 0x28
 800240e:	f003 faf6 	bl	80059fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020800 	.word	0x40020800
 8002428:	40020400 	.word	0x40020400

0800242c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_ADC_ConvCpltCallback+0x34>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d105      	bne.n	8002448 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_ADC_ConvCpltCallback+0x38>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <HAL_ADC_ConvCpltCallback+0x38>)
 8002444:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8002446:	e004      	b.n	8002452 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_ADC_ConvCpltCallback+0x3c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200004bc 	.word	0x200004bc
 8002464:	20000774 	.word	0x20000774
 8002468:	2000077c 	.word	0x2000077c

0800246c <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d105      	bne.n	8002488 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002484:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8002486:	e004      	b.n	8002492 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8002490:	6013      	str	r3, [r2, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200004bc 	.word	0x200004bc
 80024a4:	20000770 	.word	0x20000770
 80024a8:	20000778 	.word	0x20000778

080024ac <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_ADC_ErrorCallback+0x94>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e001      	b.n	80024c6 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 80024c2:	2302      	movs	r3, #2
 80024c4:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d82c      	bhi.n	8002528 <HAL_ADC_ErrorCallback+0x7c>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_ADC_ErrorCallback+0x28>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	080024f9 	.word	0x080024f9
 80024dc:	08002509 	.word	0x08002509
 80024e0:	08002529 	.word	0x08002529
 80024e4:	08002519 	.word	0x08002519
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	461a      	mov	r2, r3
 80024ee:	68f9      	ldr	r1, [r7, #12]
 80024f0:	4814      	ldr	r0, [pc, #80]	; (8002544 <HAL_ADC_ErrorCallback+0x98>)
 80024f2:	f000 fbff 	bl	8002cf4 <term_print>
		break;
 80024f6:	e01e      	b.n	8002536 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	461a      	mov	r2, r3
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	4811      	ldr	r0, [pc, #68]	; (8002548 <HAL_ADC_ErrorCallback+0x9c>)
 8002502:	f000 fbf7 	bl	8002cf4 <term_print>
		break;
 8002506:	e016      	b.n	8002536 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	461a      	mov	r2, r3
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <HAL_ADC_ErrorCallback+0xa0>)
 8002512:	f000 fbef 	bl	8002cf4 <term_print>
		break;
 8002516:	e00e      	b.n	8002536 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	461a      	mov	r2, r3
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <HAL_ADC_ErrorCallback+0xa4>)
 8002522:	f000 fbe7 	bl	8002cf4 <term_print>
		break;
 8002526:	e006      	b.n	8002536 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	4619      	mov	r1, r3
 800252e:	4809      	ldr	r0, [pc, #36]	; (8002554 <HAL_ADC_ErrorCallback+0xa8>)
 8002530:	f000 fbe0 	bl	8002cf4 <term_print>
	}
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200004bc 	.word	0x200004bc
 8002544:	0800aed8 	.word	0x0800aed8
 8002548:	0800aef4 	.word	0x0800aef4
 800254c:	0800af18 	.word	0x0800af18
 8002550:	0800af38 	.word	0x0800af38
 8002554:	0800af54 	.word	0x0800af54

08002558 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	2b13      	cmp	r3, #19
 8002566:	d902      	bls.n	800256e <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 800256a:	2200      	movs	r2, #0
 800256c:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 800256e:	2201      	movs	r2, #1
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_UART_RxCpltCallback+0x7c>)
 8002572:	4819      	ldr	r0, [pc, #100]	; (80025d8 <HAL_UART_RxCpltCallback+0x80>)
 8002574:	f006 f8e1 	bl	800873a <HAL_UART_Receive_IT>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d124      	bne.n	80025c8 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_RxCpltCallback+0x7c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	d00f      	beq.n	80025a6 <HAL_UART_RxCpltCallback+0x4e>
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_UART_RxCpltCallback+0x7c>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b0d      	cmp	r3, #13
 800258c:	d00b      	beq.n	80025a6 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	b291      	uxth	r1, r2
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 8002598:	8011      	strh	r1, [r2, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_UART_RxCpltCallback+0x7c>)
 800259e:	7819      	ldrb	r1, [r3, #0]
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_UART_RxCpltCallback+0x84>)
 80025a2:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 80025a4:	e010      	b.n	80025c8 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_UART_RxCpltCallback+0x88>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	b291      	uxth	r1, r2
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_UART_RxCpltCallback+0x78>)
 80025be:	8011      	strh	r1, [r2, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_UART_RxCpltCallback+0x84>)
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000750 	.word	0x20000750
 80025d4:	20000752 	.word	0x20000752
 80025d8:	2000070c 	.word	0x2000070c
 80025dc:	20000754 	.word	0x20000754
 80025e0:	20000768 	.word	0x20000768

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <Error_Handler+0x10>)
 80025ea:	f007 f93b 	bl	8009864 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ee:	b672      	cpsid	i
}
 80025f0:	bf00      	nop
    __disable_irq();
    while (1)
 80025f2:	e7fe      	b.n	80025f2 <Error_Handler+0xe>
 80025f4:	0800af74 	.word	0x0800af74

080025f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_MspInit+0x4c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002636:	2007      	movs	r0, #7
 8002638:	f003 f9ba 	bl	80059b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	; 0x38
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a79      	ldr	r2, [pc, #484]	; (800284c <HAL_ADC_MspInit+0x204>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d173      	bne.n	8002752 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	4b78      	ldr	r3, [pc, #480]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a77      	ldr	r2, [pc, #476]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b75      	ldr	r3, [pc, #468]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	4b71      	ldr	r3, [pc, #452]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a70      	ldr	r2, [pc, #448]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_ADC_MspInit+0x208>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_ADC_MspInit+0x208>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_ADC_MspInit+0x208>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026be:	2301      	movs	r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c2:	2303      	movs	r3, #3
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ce:	4619      	mov	r1, r3
 80026d0:	4860      	ldr	r0, [pc, #384]	; (8002854 <HAL_ADC_MspInit+0x20c>)
 80026d2:	f003 fdb1 	bl	8006238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d6:	2301      	movs	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026da:	2303      	movs	r3, #3
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	485b      	ldr	r0, [pc, #364]	; (8002858 <HAL_ADC_MspInit+0x210>)
 80026ea:	f003 fda5 	bl	8006238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_ADC_MspInit+0x214>)
 80026f0:	4a5b      	ldr	r2, [pc, #364]	; (8002860 <HAL_ADC_MspInit+0x218>)
 80026f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_ADC_MspInit+0x214>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fa:	4b58      	ldr	r3, [pc, #352]	; (800285c <HAL_ADC_MspInit+0x214>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002700:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002706:	4b55      	ldr	r3, [pc, #340]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800270e:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002714:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800271e:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002724:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002726:	4b4d      	ldr	r3, [pc, #308]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002728:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800272c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002734:	4849      	ldr	r0, [pc, #292]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002736:	f003 f97d 	bl	8005a34 <HAL_DMA_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002740:	f7ff ff50 	bl	80025e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a45      	ldr	r2, [pc, #276]	; (800285c <HAL_ADC_MspInit+0x214>)
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
 800274a:	4a44      	ldr	r2, [pc, #272]	; (800285c <HAL_ADC_MspInit+0x214>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002750:	e078      	b.n	8002844 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a43      	ldr	r2, [pc, #268]	; (8002864 <HAL_ADC_MspInit+0x21c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d173      	bne.n	8002844 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	6453      	str	r3, [r2, #68]	; 0x44
 800276c:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a33      	ldr	r2, [pc, #204]	; (8002850 <HAL_ADC_MspInit+0x208>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <HAL_ADC_MspInit+0x208>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_ADC_MspInit+0x208>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027b0:	2302      	movs	r3, #2
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b4:	2303      	movs	r3, #3
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	4824      	ldr	r0, [pc, #144]	; (8002854 <HAL_ADC_MspInit+0x20c>)
 80027c4:	f003 fd38 	bl	8006238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027c8:	2302      	movs	r3, #2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d8:	4619      	mov	r1, r3
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <HAL_ADC_MspInit+0x210>)
 80027dc:	f003 fd2c 	bl	8006238 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_ADC_MspInit+0x220>)
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_ADC_MspInit+0x224>)
 80027e4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_ADC_MspInit+0x220>)
 80027e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_ADC_MspInit+0x220>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_ADC_MspInit+0x220>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_ADC_MspInit+0x220>)
 80027fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002800:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_ADC_MspInit+0x220>)
 8002804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002808:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_ADC_MspInit+0x220>)
 800280c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002810:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_ADC_MspInit+0x220>)
 8002814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002818:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_ADC_MspInit+0x220>)
 800281c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002820:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_ADC_MspInit+0x220>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002828:	480f      	ldr	r0, [pc, #60]	; (8002868 <HAL_ADC_MspInit+0x220>)
 800282a:	f003 f903 	bl	8005a34 <HAL_DMA_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8002834:	f7ff fed6 	bl	80025e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_ADC_MspInit+0x220>)
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_ADC_MspInit+0x220>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002844:	bf00      	nop
 8002846:	3738      	adds	r7, #56	; 0x38
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40012000 	.word	0x40012000
 8002850:	40023800 	.word	0x40023800
 8002854:	40020800 	.word	0x40020800
 8002858:	40020000 	.word	0x40020000
 800285c:	2000054c 	.word	0x2000054c
 8002860:	40026410 	.word	0x40026410
 8002864:	40012100 	.word	0x40012100
 8002868:	200005ac 	.word	0x200005ac
 800286c:	40026440 	.word	0x40026440

08002870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <HAL_SPI_MspInit+0x12c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d17f      	bne.n	8002992 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a41      	ldr	r2, [pc, #260]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a3a      	ldr	r2, [pc, #232]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a33      	ldr	r2, [pc, #204]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_SPI_MspInit+0x130>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80028e6:	230c      	movs	r3, #12
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028f6:	2305      	movs	r3, #5
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	4828      	ldr	r0, [pc, #160]	; (80029a4 <HAL_SPI_MspInit+0x134>)
 8002902:	f003 fc99 	bl	8006238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8002906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002918:	2305      	movs	r3, #5
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	4821      	ldr	r0, [pc, #132]	; (80029a8 <HAL_SPI_MspInit+0x138>)
 8002924:	f003 fc88 	bl	8006238 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002928:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 800292a:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_SPI_MspInit+0x140>)
 800292c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002946:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002966:	4811      	ldr	r0, [pc, #68]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 8002968:	f003 f864 	bl	8005a34 <HAL_DMA_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002972:	f7ff fe37 	bl	80025e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 800297a:	649a      	str	r2, [r3, #72]	; 0x48
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_SPI_MspInit+0x13c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	2024      	movs	r0, #36	; 0x24
 8002988:	f003 f81d 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800298c:	2024      	movs	r0, #36	; 0x24
 800298e:	f003 f836 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3728      	adds	r7, #40	; 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40003800 	.word	0x40003800
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020800 	.word	0x40020800
 80029a8:	40020400 	.word	0x40020400
 80029ac:	20000664 	.word	0x20000664
 80029b0:	40026070 	.word	0x40026070

080029b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d115      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <HAL_TIM_Base_MspInit+0x48>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <HAL_TIM_Base_MspInit+0x48>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_TIM_Base_MspInit+0x48>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	201c      	movs	r0, #28
 80029e8:	f002 ffed 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ec:	201c      	movs	r0, #28
 80029ee:	f003 f806 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800

08002a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d133      	bne.n	8002a8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_UART_MspInit+0x98>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_UART_MspInit+0x98>)
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_UART_MspInit+0x98>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_UART_MspInit+0x98>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_UART_MspInit+0x98>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_UART_MspInit+0x98>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a6a:	2307      	movs	r3, #7
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <HAL_UART_MspInit+0x9c>)
 8002a76:	f003 fbdf 	bl	8006238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2026      	movs	r0, #38	; 0x26
 8002a80:	f002 ffa1 	bl	80059c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a84:	2026      	movs	r0, #38	; 0x26
 8002a86:	f002 ffba 	bl	80059fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020000 	.word	0x40020000

08002aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <NMI_Handler+0x4>

08002aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <UsageFault_Handler+0x4>

08002abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aec:	f002 fa48 	bl	8004f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <DMA1_Stream4_IRQHandler+0x10>)
 8002afa:	f003 f933 	bl	8005d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000664 	.word	0x20000664

08002b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b0c:	4804      	ldr	r0, [pc, #16]	; (8002b20 <TIM2_IRQHandler+0x18>)
 8002b0e:	f005 f969 	bl	8007de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8002b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <TIM2_IRQHandler+0x1c>)
 8002b18:	f003 fd53 	bl	80065c2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200006c4 	.word	0x200006c4
 8002b24:	40020000 	.word	0x40020000

08002b28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <SPI2_IRQHandler+0x10>)
 8002b2e:	f004 fe3b 	bl	80077a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000060c 	.word	0x2000060c

08002b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <USART2_IRQHandler+0x10>)
 8002b42:	f005 fe2b 	bl	800879c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000070c 	.word	0x2000070c

08002b50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b58:	f003 fd4e 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <DMA2_Stream0_IRQHandler+0x10>)
 8002b66:	f003 f8fd 	bl	8005d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000054c 	.word	0x2000054c

08002b74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <DMA2_Stream2_IRQHandler+0x10>)
 8002b7a:	f003 f8f3 	bl	8005d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200005ac 	.word	0x200005ac

08002b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e00a      	b.n	8002bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b9a:	f3af 8000 	nop.w
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	60ba      	str	r2, [r7, #8]
 8002ba6:	b2ca      	uxtb	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dbf0      	blt.n	8002b9a <_read+0x12>
  }

  return len;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e009      	b.n	8002be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	60ba      	str	r2, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	dbf1      	blt.n	8002bd4 <_write+0x12>
  }
  return len;
 8002bf0:	687b      	ldr	r3, [r7, #4]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_close>:

int _close(int file)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c22:	605a      	str	r2, [r3, #4]
  return 0;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_isatty>:

int _isatty(int file)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f006 fe00 	bl	8009898 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20020000 	.word	0x20020000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	20005640 	.word	0x20005640
 8002ccc:	20005fe8 	.word	0x20005fe8

08002cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <SystemInit+0x20>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <SystemInit+0x20>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8002cf4:	b40f      	push	{r0, r1, r2, r3}
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	2140      	movs	r1, #64	; 0x40
 8002d08:	480a      	ldr	r0, [pc, #40]	; (8002d34 <term_print+0x40>)
 8002d0a:	f006 fd9d 	bl	8009848 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8002d0e:	4809      	ldr	r0, [pc, #36]	; (8002d34 <term_print+0x40>)
 8002d10:	f7fd fa7e 	bl	8000210 <strlen>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1c:	4905      	ldr	r1, [pc, #20]	; (8002d34 <term_print+0x40>)
 8002d1e:	4806      	ldr	r0, [pc, #24]	; (8002d38 <term_print+0x44>)
 8002d20:	f005 fc79 	bl	8008616 <HAL_UART_Transmit>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d30:	b004      	add	sp, #16
 8002d32:	4770      	bx	lr
 8002d34:	20005644 	.word	0x20005644
 8002d38:	2000070c 	.word	0x2000070c

08002d3c <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	480f      	ldr	r0, [pc, #60]	; (8002d80 <Displ_Select+0x44>)
 8002d44:	f003 fc0c 	bl	8006560 <HAL_GPIO_ReadPin>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d54:	480b      	ldr	r0, [pc, #44]	; (8002d84 <Displ_Select+0x48>)
 8002d56:	f003 fc1b 	bl	8006590 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <Displ_Select+0x4c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	490a      	ldr	r1, [pc, #40]	; (8002d88 <Displ_Select+0x4c>)
 8002d60:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002d64:	4013      	ands	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <Displ_Select+0x4c>)
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <Displ_Select+0x4c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <Displ_Select+0x44>)
 8002d76:	f003 fc0b 	bl	8006590 <HAL_GPIO_WritePin>
		}
	}
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40003800 	.word	0x40003800

08002d8c <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6039      	str	r1, [r7, #0]
 8002d94:	4611      	mov	r1, r2
 8002d96:	461a      	mov	r2, r3
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	80bb      	strh	r3, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8002da4:	bf00      	nop
 8002da6:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <Displ_Transmit+0x100>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0fa      	beq.n	8002da6 <Displ_Transmit+0x1a>

	Displ_Select();
 8002db0:	f7ff ffc4 	bl	8002d3c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	461a      	mov	r2, r3
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	4835      	ldr	r0, [pc, #212]	; (8002e90 <Displ_Transmit+0x104>)
 8002dbc:	f003 fbe8 	bl	8006590 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8002dc0:	79bb      	ldrb	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d043      	beq.n	8002e4e <Displ_Transmit+0xc2>
			*data32=__REV16(*data32);
		}
#else
//if display color format is RGB666: convert RGB565 received by TouchGFX and swap bytes

		uint8_t *buf8Pos=dispBuffer1; 							//using a local pointer
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <Displ_Transmit+0x108>)
 8002dc8:	617b      	str	r3, [r7, #20]

		uint16_t *limit=(uint16_t*)(data+dataSize);
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e020      	b.n	8002e1a <Displ_Transmit+0x8e>

			*(buf8Pos++)=((*data16 & 0xF800)>>8);  // R color
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	121b      	asrs	r3, r3, #8
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	6179      	str	r1, [r7, #20]
 8002de6:	f022 0207 	bic.w	r2, r2, #7
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x07E0)>>3);  // G color
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	10db      	asrs	r3, r3, #3
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1c59      	adds	r1, r3, #1
 8002dfa:	6179      	str	r1, [r7, #20]
 8002dfc:	f022 0203 	bic.w	r2, r2, #3
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x001F)<<3);  // B color
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	00d9      	lsls	r1, r3, #3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	617a      	str	r2, [r7, #20]
 8002e10:	b2ca      	uxtb	r2, r1
 8002e12:	701a      	strb	r2, [r3, #0]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	3302      	adds	r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	bf34      	ite	cc
 8002e22:	2301      	movcc	r3, #1
 8002e24:	2300      	movcs	r3, #0
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	491a      	ldr	r1, [pc, #104]	; (8002e94 <Displ_Transmit+0x108>)
 8002e2c:	1a5b      	subs	r3, r3, r1
 8002e2e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002e32:	bfd4      	ite	le
 8002e34:	2301      	movle	r3, #1
 8002e36:	2300      	movgt	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ca      	bne.n	8002dd8 <Displ_Transmit+0x4c>
		}

		data=dispBuffer1; 				//data (pointer to data to transfer via SPI) has to point to converted buffer
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <Displ_Transmit+0x108>)
 8002e44:	603b      	str	r3, [r7, #0]
		dataSize=(buf8Pos-dispBuffer1);	//and dataSize has to contain the converted buffer size
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <Displ_Transmit+0x108>)
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	80bb      	strh	r3, [r7, #4]
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8002e4e:	88bb      	ldrh	r3, [r7, #4]
 8002e50:	2b13      	cmp	r3, #19
 8002e52:	d80d      	bhi.n	8002e70 <Displ_Transmit+0xe4>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <Displ_Transmit+0x100>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8002e5a:	88ba      	ldrh	r2, [r7, #4]
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	480d      	ldr	r0, [pc, #52]	; (8002e98 <Displ_Transmit+0x10c>)
 8002e64:	f004 faad 	bl	80073c2 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <Displ_Transmit+0x100>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8002e6e:	e008      	b.n	8002e82 <Displ_Transmit+0xf6>
			Displ_SpiAvailable=0;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <Displ_Transmit+0x100>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8002e76:	88bb      	ldrh	r3, [r7, #4]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	4806      	ldr	r0, [pc, #24]	; (8002e98 <Displ_Transmit+0x10c>)
 8002e7e:	f004 fbdd 	bl	800763c <HAL_SPI_Transmit_DMA>
	}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000002c 	.word	0x2000002c
 8002e90:	40020000 	.word	0x40020000
 8002e94:	2000568c 	.word	0x2000568c
 8002e98:	2000060c 	.word	0x2000060c

08002e9c <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8002ea6:	1df9      	adds	r1, r7, #7
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7ff ff6d 	bl	8002d8c <Displ_Transmit>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f7ff ff58 	bl	8002d8c <Displ_Transmit>
 8002edc:	e000      	b.n	8002ee0 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8002ede:	bf00      	nop
}
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	Displ_Select();
 8002eec:	f7ff ff26 	bl	8002d3c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2140      	movs	r1, #64	; 0x40
 8002ef4:	4819      	ldr	r0, [pc, #100]	; (8002f5c <ILI9XXX_Init+0x74>)
 8002ef6:	f003 fb4b 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f002 f860 	bl	8004fc0 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002f00:	2201      	movs	r2, #1
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	4815      	ldr	r0, [pc, #84]	; (8002f5c <ILI9XXX_Init+0x74>)
 8002f06:	f003 fb43 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8002f0a:	20a5      	movs	r0, #165	; 0xa5
 8002f0c:	f002 f858 	bl	8004fc0 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002f10:	203a      	movs	r0, #58	; 0x3a
 8002f12:	f7ff ffc3 	bl	8002e9c <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
 8002f16:	2200      	movs	r2, #0
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4811      	ldr	r0, [pc, #68]	; (8002f60 <ILI9XXX_Init+0x78>)
 8002f1c:	f7ff ffcd 	bl	8002eba <Displ_WriteData>
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002f20:	20b0      	movs	r0, #176	; 0xb0
 8002f22:	f7ff ffbb 	bl	8002e9c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002f26:	2200      	movs	r2, #0
 8002f28:	2101      	movs	r1, #1
 8002f2a:	480e      	ldr	r0, [pc, #56]	; (8002f64 <ILI9XXX_Init+0x7c>)
 8002f2c:	f7ff ffc5 	bl	8002eba <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002f30:	20b0      	movs	r0, #176	; 0xb0
 8002f32:	f7ff ffb3 	bl	8002e9c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002f36:	2200      	movs	r2, #0
 8002f38:	2101      	movs	r1, #1
 8002f3a:	480a      	ldr	r0, [pc, #40]	; (8002f64 <ILI9XXX_Init+0x7c>)
 8002f3c:	f7ff ffbd 	bl	8002eba <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002f40:	2011      	movs	r0, #17
 8002f42:	f7ff ffab 	bl	8002e9c <Displ_WriteCommand>
	HAL_Delay(120);
 8002f46:	2078      	movs	r0, #120	; 0x78
 8002f48:	f002 f83a 	bl	8004fc0 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002f4c:	2029      	movs	r0, #41	; 0x29
 8002f4e:	f7ff ffa5 	bl	8002e9c <Displ_WriteCommand>
	HAL_Delay(5);
 8002f52:	2005      	movs	r0, #5
 8002f54:	f002 f834 	bl	8004fc0 <HAL_Delay>

}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	0800afa8 	.word	0x0800afa8
 8002f64:	0800afac 	.word	0x0800afac

08002f68 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	80fb      	strh	r3, [r7, #6]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80bb      	strh	r3, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	807b      	strh	r3, [r7, #2]
 8002f82:	4613      	mov	r3, r2
 8002f84:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	061a      	lsls	r2, r3, #24
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f92:	431a      	orrs	r2, r3
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	0a12      	lsrs	r2, r2, #8
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <Displ_SetAddressWindow+0x90>)
 8002fa6:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8002fa8:	202a      	movs	r0, #42	; 0x2a
 8002faa:	f7ff ff77 	bl	8002e9c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	4811      	ldr	r0, [pc, #68]	; (8002ff8 <Displ_SetAddressWindow+0x90>)
 8002fb4:	f7ff ff81 	bl	8002eba <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8002fb8:	883b      	ldrh	r3, [r7, #0]
 8002fba:	061a      	lsls	r2, r3, #24
 8002fbc:	883b      	ldrh	r3, [r7, #0]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	88bb      	ldrh	r3, [r7, #4]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	88ba      	ldrh	r2, [r7, #4]
 8002fd0:	0a12      	lsrs	r2, r2, #8
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <Displ_SetAddressWindow+0x90>)
 8002fd8:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8002fda:	202b      	movs	r0, #43	; 0x2b
 8002fdc:	f7ff ff5e 	bl	8002e9c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <Displ_SetAddressWindow+0x90>)
 8002fe6:	f7ff ff68 	bl	8002eba <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8002fea:	202c      	movs	r0, #44	; 0x2c
 8002fec:	f7ff ff56 	bl	8002e9c <Displ_WriteCommand>
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	20005e8c 	.word	0x20005e8c

08002ffc <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8003006:	2201      	movs	r2, #1
 8003008:	2180      	movs	r1, #128	; 0x80
 800300a:	4809      	ldr	r0, [pc, #36]	; (8003030 <Displ_Init+0x34>)
 800300c:	f003 fac0 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8003010:	2201      	movs	r2, #1
 8003012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <Displ_Init+0x38>)
 8003018:	f003 faba 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 800301c:	f7ff ff64 	bl	8002ee8 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f808 	bl	8003038 <Displ_Orientation>
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40020800 	.word	0x40020800
 8003034:	40020000 	.word	0x40020000

08003038 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d83b      	bhi.n	80030c0 <Displ_Orientation+0x88>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <Displ_Orientation+0x18>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003061 	.word	0x08003061
 8003054:	08003079 	.word	0x08003079
 8003058:	08003091 	.word	0x08003091
 800305c:	080030a9 	.word	0x080030a9
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <Displ_Orientation+0xa8>)
 8003062:	2288      	movs	r2, #136	; 0x88
 8003064:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <Displ_Orientation+0xac>)
 8003068:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800306c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <Displ_Orientation+0xb0>)
 8003070:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003074:	801a      	strh	r2, [r3, #0]
			break;
 8003076:	e023      	b.n	80030c0 <Displ_Orientation+0x88>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <Displ_Orientation+0xa8>)
 800307a:	22e8      	movs	r2, #232	; 0xe8
 800307c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <Displ_Orientation+0xac>)
 8003080:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003084:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <Displ_Orientation+0xb0>)
 8003088:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800308c:	801a      	strh	r2, [r3, #0]
			break;
 800308e:	e017      	b.n	80030c0 <Displ_Orientation+0x88>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <Displ_Orientation+0xa8>)
 8003092:	2248      	movs	r2, #72	; 0x48
 8003094:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <Displ_Orientation+0xac>)
 8003098:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800309c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <Displ_Orientation+0xb0>)
 80030a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030a4:	801a      	strh	r2, [r3, #0]
			break;
 80030a6:	e00b      	b.n	80030c0 <Displ_Orientation+0x88>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <Displ_Orientation+0xa8>)
 80030aa:	2228      	movs	r2, #40	; 0x28
 80030ac:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <Displ_Orientation+0xac>)
 80030b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030b4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <Displ_Orientation+0xb0>)
 80030b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030bc:	801a      	strh	r2, [r3, #0]
			break;
 80030be:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80030c0:	2036      	movs	r0, #54	; 0x36
 80030c2:	f7ff feeb 	bl	8002e9c <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2101      	movs	r1, #1
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <Displ_Orientation+0xa8>)
 80030cc:	f7ff fef5 	bl	8002eba <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80030d0:	4a06      	ldr	r2, [pc, #24]	; (80030ec <Displ_Orientation+0xb4>)
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	7013      	strb	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20005e90 	.word	0x20005e90
 80030e4:	20005688 	.word	0x20005688
 80030e8:	20005686 	.word	0x20005686
 80030ec:	20005684 	.word	0x20005684

080030f0 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <HAL_SPI_ErrorCallback+0x24>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d102      	bne.n	8003108 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_SPI_ErrorCallback+0x28>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
	}
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40003800 	.word	0x40003800
 8003118:	2000002c 	.word	0x2000002c

0800311c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_SPI_TxCpltCallback+0x24>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d102      	bne.n	8003134 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_SPI_TxCpltCallback+0x28>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40003800 	.word	0x40003800
 8003144:	2000002c 	.word	0x2000002c

08003148 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0
 800314e:	4604      	mov	r4, r0
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4623      	mov	r3, r4
 8003158:	80fb      	strh	r3, [r7, #6]
 800315a:	4603      	mov	r3, r0
 800315c:	80bb      	strh	r3, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	807b      	strh	r3, [r7, #2]
 8003162:	4613      	mov	r3, r2
 8003164:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4a59      	ldr	r2, [pc, #356]	; (80032d0 <Displ_FillArea+0x188>)
 800316a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800316e:	4293      	cmp	r3, r2
 8003170:	f280 80aa 	bge.w	80032c8 <Displ_FillArea+0x180>
 8003174:	88bb      	ldrh	r3, [r7, #4]
 8003176:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <Displ_FillArea+0x18c>)
 8003178:	f9b2 2000 	ldrsh.w	r2, [r2]
 800317c:	4293      	cmp	r3, r2
 800317e:	f280 80a3 	bge.w	80032c8 <Displ_FillArea+0x180>
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 809f 	beq.w	80032c8 <Displ_FillArea+0x180>
 800318a:	883b      	ldrh	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 809b 	beq.w	80032c8 <Displ_FillArea+0x180>

	x1=x + w - 1;
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	4413      	add	r3, r2
 8003198:	3b01      	subs	r3, #1
 800319a:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <Displ_FillArea+0x188>)
 800319e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a2:	461a      	mov	r2, r3
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d903      	bls.n	80031b2 <Displ_FillArea+0x6a>
		x1=_width;
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <Displ_FillArea+0x188>)
 80031ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80031b2:	88ba      	ldrh	r2, [r7, #4]
 80031b4:	883b      	ldrh	r3, [r7, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	3b01      	subs	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <Displ_FillArea+0x18c>)
 80031be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c2:	461a      	mov	r2, r3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d903      	bls.n	80031d2 <Displ_FillArea+0x8a>
		y1=_height;
 80031ca:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <Displ_FillArea+0x18c>)
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	61fb      	str	r3, [r7, #28]

#endif
#ifdef Z_RGB666 // setting up dispBuffer in RGB666 format
	uint32_t datasize;

	uint8_t Rbyte=(color & 0xF800)>>8;
 80031d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031d4:	121b      	asrs	r3, r3, #8
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f023 0307 	bic.w	r3, r3, #7
 80031dc:	75fb      	strb	r3, [r7, #23]
	uint8_t Gbyte=(color & 0x07E0)>>3;
 80031de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031e0:	10db      	asrs	r3, r3, #3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f023 0303 	bic.w	r3, r3, #3
 80031e8:	75bb      	strb	r3, [r7, #22]
	uint8_t Bbyte=(color & 0x001F)<<3;
 80031ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	757b      	strb	r3, [r7, #21]

	area=(((y1-y+1)*(x1-x+1))*3); 		// area to fill in bytes (3 bytes per pixel)
 80031f0:	88bb      	ldrh	r3, [r7, #4]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	6a39      	ldr	r1, [r7, #32]
 80031fc:	1a8a      	subs	r2, r1, r2
 80031fe:	3201      	adds	r2, #1
 8003200:	fb03 f202 	mul.w	r2, r3, r2
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
	uint8_t *buf8Pos=dispBuffer; 		//using a local pointer: changing values next
 800320c:	4b32      	ldr	r3, [pc, #200]	; (80032d8 <Displ_FillArea+0x190>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61bb      	str	r3, [r7, #24]

	datasize = (area<(SIZEBUF-3) ? area : (SIZEBUF-3));  //as buf8Pos receives 3 bytes each cycle we must be sure that SIZEBUF will be not overridden in the next loop
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003218:	4293      	cmp	r3, r2
 800321a:	bf28      	it	cs
 800321c:	4613      	movcs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

	k=0;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
	while ((buf8Pos-dispBuffer)<=datasize){
 8003224:	e00e      	b.n	8003244 <Displ_FillArea+0xfc>
		*(buf8Pos++)=Rbyte;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	61ba      	str	r2, [r7, #24]
 800322c:	7dfa      	ldrb	r2, [r7, #23]
 800322e:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Gbyte;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	61ba      	str	r2, [r7, #24]
 8003236:	7dba      	ldrb	r2, [r7, #22]
 8003238:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Bbyte;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	61ba      	str	r2, [r7, #24]
 8003240:	7d7a      	ldrb	r2, [r7, #21]
 8003242:	701a      	strb	r2, [r3, #0]
	while ((buf8Pos-dispBuffer)<=datasize){
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <Displ_FillArea+0x190>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4293      	cmp	r3, r2
 8003252:	d2e8      	bcs.n	8003226 <Displ_FillArea+0xde>
	}
	datasize=(buf8Pos-dispBuffer);
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <Displ_FillArea+0x190>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	60fb      	str	r3, [r7, #12]
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	b29a      	uxth	r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	b29b      	uxth	r3, r3
 8003266:	88b9      	ldrh	r1, [r7, #4]
 8003268:	88f8      	ldrh	r0, [r7, #6]
 800326a:	f7ff fe7d 	bl	8002f68 <Displ_SetAddressWindow>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
#endif
#ifdef Z_RGB666 // transferring RGB666 format dispBuffer
	times=(area/datasize);  					//how many times buffer must be sent via SPI.
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	60bb      	str	r3, [r7, #8]
	for  (k=0;k<times;k++) {
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	e009      	b.n	8003292 <Displ_FillArea+0x14a>
		Displ_WriteData(dispBuffer,datasize,0);
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <Displ_FillArea+0x190>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fe17 	bl	8002eba <Displ_WriteData>
	for  (k=0;k<times;k++) {
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	3301      	adds	r3, #1
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d3f1      	bcc.n	800327e <Displ_FillArea+0x136>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <Displ_FillArea+0x190>)
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2200      	movs	r2, #0
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7ff fe04 	bl	8002eba <Displ_WriteData>
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <Displ_FillArea+0x190>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <Displ_FillArea+0x194>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <Displ_FillArea+0x178>
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <Displ_FillArea+0x198>)
 80032be:	e000      	b.n	80032c2 <Displ_FillArea+0x17a>
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <Displ_FillArea+0x194>)
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <Displ_FillArea+0x190>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e000      	b.n	80032ca <Displ_FillArea+0x182>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80032c8:	bf00      	nop

}
 80032ca:	372c      	adds	r7, #44	; 0x2c
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	20005686 	.word	0x20005686
 80032d4:	20005688 	.word	0x20005688
 80032d8:	20000030 	.word	0x20000030
 80032dc:	2000568c 	.word	0x2000568c
 80032e0:	20005a8c 	.word	0x20005a8c

080032e4 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
 80032ee:	460b      	mov	r3, r1
 80032f0:	80bb      	strh	r3, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <Displ_Pixel+0x44>)
 80032fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80032fe:	4293      	cmp	r3, r2
 8003300:	da0e      	bge.n	8003320 <Displ_Pixel+0x3c>
 8003302:	88bb      	ldrh	r3, [r7, #4]
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <Displ_Pixel+0x48>)
 8003306:	f9b2 2000 	ldrsh.w	r2, [r2]
 800330a:	4293      	cmp	r3, r2
 800330c:	da08      	bge.n	8003320 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800330e:	88b9      	ldrh	r1, [r7, #4]
 8003310:	88f8      	ldrh	r0, [r7, #6]
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2301      	movs	r3, #1
 8003318:	2201      	movs	r2, #1
 800331a:	f7ff ff15 	bl	8003148 <Displ_FillArea>
 800331e:	e000      	b.n	8003322 <Displ_Pixel+0x3e>
        return;
 8003320:	bf00      	nop

}
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20005686 	.word	0x20005686
 800332c:	20005688 	.word	0x20005688

08003330 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4623      	mov	r3, r4
 8003340:	80fb      	strh	r3, [r7, #6]
 8003342:	4603      	mov	r3, r0
 8003344:	80bb      	strh	r3, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	f1c3 0301 	rsb	r3, r3, #1
 8003354:	b29b      	uxth	r3, r3
 8003356:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003358:	2301      	movs	r3, #1
 800335a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	461a      	mov	r2, r3
 8003360:	03d2      	lsls	r2, r2, #15
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8003372:	88f8      	ldrh	r0, [r7, #6]
 8003374:	88ba      	ldrh	r2, [r7, #4]
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	4413      	add	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	883a      	ldrh	r2, [r7, #0]
 800337e:	4619      	mov	r1, r3
 8003380:	f7ff ffb0 	bl	80032e4 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8003384:	88f8      	ldrh	r0, [r7, #6]
 8003386:	88ba      	ldrh	r2, [r7, #4]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	b29b      	uxth	r3, r3
 800338e:	883a      	ldrh	r2, [r7, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f7ff ffa7 	bl	80032e4 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	4413      	add	r3, r2
 800339c:	b29b      	uxth	r3, r3
 800339e:	88b9      	ldrh	r1, [r7, #4]
 80033a0:	883a      	ldrh	r2, [r7, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff9e 	bl	80032e4 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	88b9      	ldrh	r1, [r7, #4]
 80033b2:	883a      	ldrh	r2, [r7, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff95 	bl	80032e4 <Displ_Pixel>

    while (x<y) {
 80033ba:	e081      	b.n	80034c0 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80033bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0e      	blt.n	80033e2 <Displ_drawCircle+0xb2>
            y--;
 80033c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80033d0:	8a7b      	ldrh	r3, [r7, #18]
 80033d2:	3302      	adds	r3, #2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80033d8:	8afa      	ldrh	r2, [r7, #22]
 80033da:	8a7b      	ldrh	r3, [r7, #18]
 80033dc:	4413      	add	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80033e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80033ee:	8abb      	ldrh	r3, [r7, #20]
 80033f0:	3302      	adds	r3, #2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80033f6:	8afa      	ldrh	r2, [r7, #22]
 80033f8:	8abb      	ldrh	r3, [r7, #20]
 80033fa:	4413      	add	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	8a3b      	ldrh	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	b298      	uxth	r0, r3
 8003408:	88ba      	ldrh	r2, [r7, #4]
 800340a:	89fb      	ldrh	r3, [r7, #14]
 800340c:	4413      	add	r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	883a      	ldrh	r2, [r7, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	f7ff ff66 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	8a3b      	ldrh	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	b298      	uxth	r0, r3
 8003420:	88ba      	ldrh	r2, [r7, #4]
 8003422:	89fb      	ldrh	r3, [r7, #14]
 8003424:	4413      	add	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	883a      	ldrh	r2, [r7, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	f7ff ff5a 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	8a3b      	ldrh	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	b298      	uxth	r0, r3
 8003438:	88ba      	ldrh	r2, [r7, #4]
 800343a:	89fb      	ldrh	r3, [r7, #14]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	883a      	ldrh	r2, [r7, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	f7ff ff4e 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	8a3b      	ldrh	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	b298      	uxth	r0, r3
 8003450:	88ba      	ldrh	r2, [r7, #4]
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	883a      	ldrh	r2, [r7, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	f7ff ff42 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	4413      	add	r3, r2
 8003466:	b298      	uxth	r0, r3
 8003468:	88ba      	ldrh	r2, [r7, #4]
 800346a:	8a3b      	ldrh	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	883a      	ldrh	r2, [r7, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	f7ff ff36 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	b298      	uxth	r0, r3
 8003480:	88ba      	ldrh	r2, [r7, #4]
 8003482:	8a3b      	ldrh	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	883a      	ldrh	r2, [r7, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	f7ff ff2a 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	4413      	add	r3, r2
 8003496:	b298      	uxth	r0, r3
 8003498:	88ba      	ldrh	r2, [r7, #4]
 800349a:	8a3b      	ldrh	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	883a      	ldrh	r2, [r7, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7ff ff1e 	bl	80032e4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b298      	uxth	r0, r3
 80034b0:	88ba      	ldrh	r2, [r7, #4]
 80034b2:	8a3b      	ldrh	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	883a      	ldrh	r2, [r7, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	f7ff ff12 	bl	80032e4 <Displ_Pixel>
    while (x<y) {
 80034c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80034c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f6ff af77 	blt.w	80033bc <Displ_drawCircle+0x8c>
    }
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}

080034d8 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af02      	add	r7, sp, #8
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <Displ_CLS+0x30>)
 80034e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <Displ_CLS+0x34>)
 80034ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f0:	b299      	uxth	r1, r3
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	460b      	mov	r3, r1
 80034f8:	2100      	movs	r1, #0
 80034fa:	2000      	movs	r0, #0
 80034fc:	f7ff fe24 	bl	8003148 <Displ_FillArea>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20005686 	.word	0x20005686
 800350c:	20005688 	.word	0x20005688

08003510 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	4604      	mov	r4, r0
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4623      	mov	r3, r4
 8003520:	80fb      	strh	r3, [r7, #6]
 8003522:	4603      	mov	r3, r0
 8003524:	80bb      	strh	r3, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]
 800352a:	4613      	mov	r3, r2
 800352c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	f1c3 0301 	rsb	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003538:	2301      	movs	r3, #1
 800353a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	461a      	mov	r2, r3
 8003540:	03d2      	lsls	r2, r2, #15
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8003552:	e095      	b.n	8003680 <drawCircleHelper+0x170>
        if (f >= 0) {
 8003554:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0e      	blt.n	800357a <drawCircleHelper+0x6a>
            y--;
 800355c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29b      	uxth	r3, r3
 8003566:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003568:	8a7b      	ldrh	r3, [r7, #18]
 800356a:	3302      	adds	r3, #2
 800356c:	b29b      	uxth	r3, r3
 800356e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8003570:	8afa      	ldrh	r2, [r7, #22]
 8003572:	8a7b      	ldrh	r3, [r7, #18]
 8003574:	4413      	add	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800357a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800357e:	b29b      	uxth	r3, r3
 8003580:	3301      	adds	r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003586:	8abb      	ldrh	r3, [r7, #20]
 8003588:	3302      	adds	r3, #2
 800358a:	b29b      	uxth	r3, r3
 800358c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800358e:	8afa      	ldrh	r2, [r7, #22]
 8003590:	8abb      	ldrh	r3, [r7, #20]
 8003592:	4413      	add	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	8a3b      	ldrh	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	b298      	uxth	r0, r3
 80035aa:	88ba      	ldrh	r2, [r7, #4]
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	4413      	add	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035b4:	4619      	mov	r1, r3
 80035b6:	f7ff fe95 	bl	80032e4 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	4413      	add	r3, r2
 80035c0:	b298      	uxth	r0, r3
 80035c2:	88ba      	ldrh	r2, [r7, #4]
 80035c4:	8a3b      	ldrh	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7ff fe89 	bl	80032e4 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80035d2:	787b      	ldrb	r3, [r7, #1]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d017      	beq.n	800360c <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	8a3b      	ldrh	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	b298      	uxth	r0, r3
 80035e4:	88ba      	ldrh	r2, [r7, #4]
 80035e6:	89fb      	ldrh	r3, [r7, #14]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7ff fe78 	bl	80032e4 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	4413      	add	r3, r2
 80035fa:	b298      	uxth	r0, r3
 80035fc:	88ba      	ldrh	r2, [r7, #4]
 80035fe:	8a3b      	ldrh	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	b29b      	uxth	r3, r3
 8003604:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003606:	4619      	mov	r1, r3
 8003608:	f7ff fe6c 	bl	80032e4 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d017      	beq.n	8003646 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	b298      	uxth	r0, r3
 800361e:	88ba      	ldrh	r2, [r7, #4]
 8003620:	8a3b      	ldrh	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003628:	4619      	mov	r1, r3
 800362a:	f7ff fe5b 	bl	80032e4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	8a3b      	ldrh	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	b298      	uxth	r0, r3
 8003636:	88ba      	ldrh	r2, [r7, #4]
 8003638:	89fb      	ldrh	r3, [r7, #14]
 800363a:	4413      	add	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003640:	4619      	mov	r1, r3
 8003642:	f7ff fe4f 	bl	80032e4 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8003646:	787b      	ldrb	r3, [r7, #1]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d017      	beq.n	8003680 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	89fb      	ldrh	r3, [r7, #14]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	b298      	uxth	r0, r3
 8003658:	88ba      	ldrh	r2, [r7, #4]
 800365a:	8a3b      	ldrh	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	b29b      	uxth	r3, r3
 8003660:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003662:	4619      	mov	r1, r3
 8003664:	f7ff fe3e 	bl	80032e4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	8a3b      	ldrh	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b298      	uxth	r0, r3
 8003670:	88ba      	ldrh	r2, [r7, #4]
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	b29b      	uxth	r3, r3
 8003678:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800367a:	4619      	mov	r1, r3
 800367c:	f7ff fe32 	bl	80032e4 <Displ_Pixel>
    while (x<y) {
 8003680:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003688:	429a      	cmp	r2, r3
 800368a:	f6ff af63 	blt.w	8003554 <drawCircleHelper+0x44>
        }
    }
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af02      	add	r7, sp, #8
 800369e:	4604      	mov	r4, r0
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	4623      	mov	r3, r4
 80036a8:	80fb      	strh	r3, [r7, #6]
 80036aa:	4603      	mov	r3, r0
 80036ac:	80bb      	strh	r3, [r7, #4]
 80036ae:	460b      	mov	r3, r1
 80036b0:	807b      	strh	r3, [r7, #2]
 80036b2:	4613      	mov	r3, r2
 80036b4:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	f1c3 0301 	rsb	r3, r3, #1
 80036bc:	b29b      	uxth	r3, r3
 80036be:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	461a      	mov	r2, r3
 80036c8:	03d2      	lsls	r2, r2, #15
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80036da:	e0a7      	b.n	800382c <fillCircleHelper+0x194>
    if (f >= 0) {
 80036dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0e      	blt.n	8003702 <fillCircleHelper+0x6a>
      y--;
 80036e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80036f0:	8a7b      	ldrh	r3, [r7, #18]
 80036f2:	3302      	adds	r3, #2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80036f8:	8afa      	ldrh	r2, [r7, #22]
 80036fa:	8a7b      	ldrh	r3, [r7, #18]
 80036fc:	4413      	add	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8003702:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003706:	b29b      	uxth	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800370e:	8abb      	ldrh	r3, [r7, #20]
 8003710:	3302      	adds	r3, #2
 8003712:	b29b      	uxth	r3, r3
 8003714:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8003716:	8afa      	ldrh	r2, [r7, #22]
 8003718:	8abb      	ldrh	r3, [r7, #20]
 800371a:	4413      	add	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d03d      	beq.n	80037a6 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	8a3b      	ldrh	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	b218      	sxth	r0, r3
 8003734:	88ba      	ldrh	r2, [r7, #4]
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	b29b      	uxth	r3, r3
 800373c:	b219      	sxth	r1, r3
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	8a3b      	ldrh	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	b21c      	sxth	r4, r3
 8003748:	88ba      	ldrh	r2, [r7, #4]
 800374a:	89fb      	ldrh	r3, [r7, #14]
 800374c:	4413      	add	r3, r2
 800374e:	b29a      	uxth	r2, r3
 8003750:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003752:	4413      	add	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	3301      	adds	r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	b21a      	sxth	r2, r3
 800375c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	4622      	mov	r2, r4
 8003764:	f000 f8a1 	bl	80038aa <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	89fb      	ldrh	r3, [r7, #14]
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	b218      	sxth	r0, r3
 8003772:	88ba      	ldrh	r2, [r7, #4]
 8003774:	8a3b      	ldrh	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	b219      	sxth	r1, r3
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	89fb      	ldrh	r3, [r7, #14]
 8003780:	4413      	add	r3, r2
 8003782:	b29b      	uxth	r3, r3
 8003784:	b21c      	sxth	r4, r3
 8003786:	88ba      	ldrh	r2, [r7, #4]
 8003788:	8a3b      	ldrh	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	b29a      	uxth	r2, r3
 800378e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003790:	4413      	add	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	3301      	adds	r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	b21a      	sxth	r2, r3
 800379a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	4622      	mov	r2, r4
 80037a2:	f000 f882 	bl	80038aa <Displ_Line>
    }
    if (cornername & 0x2) {
 80037a6:	787b      	ldrb	r3, [r7, #1]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03d      	beq.n	800382c <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	8a3b      	ldrh	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	b218      	sxth	r0, r3
 80037ba:	88ba      	ldrh	r2, [r7, #4]
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b219      	sxth	r1, r3
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	8a3b      	ldrh	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	b21c      	sxth	r4, r3
 80037ce:	88ba      	ldrh	r2, [r7, #4]
 80037d0:	89fb      	ldrh	r3, [r7, #14]
 80037d2:	4413      	add	r3, r2
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037d8:	4413      	add	r3, r2
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	b29b      	uxth	r3, r3
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	4622      	mov	r2, r4
 80037ea:	f000 f85e 	bl	80038aa <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	89fb      	ldrh	r3, [r7, #14]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	b218      	sxth	r0, r3
 80037f8:	88ba      	ldrh	r2, [r7, #4]
 80037fa:	8a3b      	ldrh	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b219      	sxth	r1, r3
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	b29b      	uxth	r3, r3
 800380a:	b21c      	sxth	r4, r3
 800380c:	88ba      	ldrh	r2, [r7, #4]
 800380e:	8a3b      	ldrh	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	b29a      	uxth	r2, r3
 8003814:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003816:	4413      	add	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	b21a      	sxth	r2, r3
 8003820:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	4622      	mov	r2, r4
 8003828:	f000 f83f 	bl	80038aa <Displ_Line>
  while (x<y) {
 800382c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003834:	429a      	cmp	r2, r3
 8003836:	f6ff af51 	blt.w	80036dc <fillCircleHelper+0x44>
    }
  }
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}

08003844 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b085      	sub	sp, #20
 8003848:	af02      	add	r7, sp, #8
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4623      	mov	r3, r4
 8003854:	80fb      	strh	r3, [r7, #6]
 8003856:	4603      	mov	r3, r0
 8003858:	80bb      	strh	r3, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	807b      	strh	r3, [r7, #2]
 800385e:	4613      	mov	r3, r2
 8003860:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8003862:	88ba      	ldrh	r2, [r7, #4]
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	b219      	sxth	r1, r3
 800386c:	88ba      	ldrh	r2, [r7, #4]
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	4413      	add	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	b21c      	sxth	r4, r3
 8003876:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800387a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800387e:	883b      	ldrh	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4623      	mov	r3, r4
 8003884:	f000 f811 	bl	80038aa <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8003888:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800388c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003890:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003894:	883b      	ldrh	r3, [r7, #0]
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2303      	movs	r3, #3
 800389e:	f7ff fefb 	bl	8003698 <fillCircleHelper>
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}

080038aa <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80038aa:	b590      	push	{r4, r7, lr}
 80038ac:	b08b      	sub	sp, #44	; 0x2c
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	4604      	mov	r4, r0
 80038b2:	4608      	mov	r0, r1
 80038b4:	4611      	mov	r1, r2
 80038b6:	461a      	mov	r2, r3
 80038b8:	4623      	mov	r3, r4
 80038ba:	80fb      	strh	r3, [r7, #6]
 80038bc:	4603      	mov	r3, r0
 80038be:	80bb      	strh	r3, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80038c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d123      	bne.n	800391c <Displ_Line+0x72>
    	if (y1>y0){
 80038d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80038d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	dd0e      	ble.n	80038fe <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80038e0:	88f8      	ldrh	r0, [r7, #6]
 80038e2:	88b9      	ldrh	r1, [r7, #4]
 80038e4:	883a      	ldrh	r2, [r7, #0]
 80038e6:	88bb      	ldrh	r3, [r7, #4]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	2201      	movs	r2, #1
 80038f8:	f7ff fc26 	bl	8003148 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 80038fc:	e103      	b.n	8003b06 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80038fe:	88f8      	ldrh	r0, [r7, #6]
 8003900:	8839      	ldrh	r1, [r7, #0]
 8003902:	88ba      	ldrh	r2, [r7, #4]
 8003904:	883b      	ldrh	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	3301      	adds	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	2201      	movs	r2, #1
 8003916:	f7ff fc17 	bl	8003148 <Displ_FillArea>
    	return;
 800391a:	e0f4      	b.n	8003b06 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 800391c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003920:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003924:	429a      	cmp	r2, r3
 8003926:	d121      	bne.n	800396c <Displ_Line+0xc2>
    	if (x1>x0)
 8003928:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800392c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003930:	429a      	cmp	r2, r3
 8003932:	dd0d      	ble.n	8003950 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8003934:	88f8      	ldrh	r0, [r7, #6]
 8003936:	88b9      	ldrh	r1, [r7, #4]
 8003938:	887a      	ldrh	r2, [r7, #2]
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	f7ff fbfd 	bl	8003148 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 800394e:	e0da      	b.n	8003b06 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8003950:	8878      	ldrh	r0, [r7, #2]
 8003952:	8839      	ldrh	r1, [r7, #0]
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	b29b      	uxth	r3, r3
 800395c:	3301      	adds	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2301      	movs	r3, #1
 8003966:	f7ff fbef 	bl	8003148 <Displ_FillArea>
    	return;
 800396a:	e0cc      	b.n	8003b06 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 800396c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003970:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dd05      	ble.n	8003984 <Displ_Line+0xda>
 8003978:	f9b7 2000 	ldrsh.w	r2, [r7]
 800397c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003980:	1ad2      	subs	r2, r2, r3
 8003982:	e004      	b.n	800398e <Displ_Line+0xe4>
 8003984:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003988:	f9b7 3000 	ldrsh.w	r3, [r7]
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003996:	4299      	cmp	r1, r3
 8003998:	dd05      	ble.n	80039a6 <Displ_Line+0xfc>
 800399a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800399e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a2:	1acb      	subs	r3, r1, r3
 80039a4:	e004      	b.n	80039b0 <Displ_Line+0x106>
 80039a6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80039aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039ae:	1acb      	subs	r3, r1, r3
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bfcc      	ite	gt
 80039b4:	2301      	movgt	r3, #1
 80039b6:	2300      	movle	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80039bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	827b      	strh	r3, [r7, #18]
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	80fb      	strh	r3, [r7, #6]
 80039cc:	8a7b      	ldrh	r3, [r7, #18]
 80039ce:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	823b      	strh	r3, [r7, #16]
 80039d4:	883b      	ldrh	r3, [r7, #0]
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	8a3b      	ldrh	r3, [r7, #16]
 80039da:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80039dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	dd0b      	ble.n	8003a00 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	81fb      	strh	r3, [r7, #14]
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	80fb      	strh	r3, [r7, #6]
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80039f4:	88bb      	ldrh	r3, [r7, #4]
 80039f6:	81bb      	strh	r3, [r7, #12]
 80039f8:	883b      	ldrh	r3, [r7, #0]
 80039fa:	80bb      	strh	r3, [r7, #4]
 80039fc:	89bb      	ldrh	r3, [r7, #12]
 80039fe:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8003a0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a0e:	105b      	asrs	r3, r3, #1
 8003a10:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8003a12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003a16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	da07      	bge.n	8003a2e <Displ_Line+0x184>
        dy = y1-y0;
 8003a1e:	883a      	ldrh	r2, [r7, #0]
 8003a20:	88bb      	ldrh	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	837b      	strh	r3, [r7, #26]
 8003a2c:	e007      	b.n	8003a3e <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8003a2e:	88ba      	ldrh	r2, [r7, #4]
 8003a30:	883b      	ldrh	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8003a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a3c:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	83bb      	strh	r3, [r7, #28]
 8003a46:	e03a      	b.n	8003abe <Displ_Line+0x214>
    	l++;
 8003a48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8003a54:	8b3a      	ldrh	r2, [r7, #24]
 8003a56:	8afb      	ldrh	r3, [r7, #22]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8003a5e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da25      	bge.n	8003ab2 <Displ_Line+0x208>
        	if (steep) {
 8003a66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8003a6e:	88b8      	ldrh	r0, [r7, #4]
 8003a70:	88f9      	ldrh	r1, [r7, #6]
 8003a72:	8bfa      	ldrh	r2, [r7, #30]
 8003a74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f7ff fb64 	bl	8003148 <Displ_FillArea>
 8003a80:	e007      	b.n	8003a92 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8003a82:	88f8      	ldrh	r0, [r7, #6]
 8003a84:	88b9      	ldrh	r1, [r7, #4]
 8003a86:	8bfa      	ldrh	r2, [r7, #30]
 8003a88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f7ff fb5b 	bl	8003148 <Displ_FillArea>
            }
            y0 += ystep;
 8003a92:	88ba      	ldrh	r2, [r7, #4]
 8003a94:	8b7b      	ldrh	r3, [r7, #26]
 8003a96:	4413      	add	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	80bb      	strh	r3, [r7, #4]
            l=0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8003aa0:	8bbb      	ldrh	r3, [r7, #28]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8003aa8:	8b3a      	ldrh	r2, [r7, #24]
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	4413      	add	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8003ab2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	83bb      	strh	r3, [r7, #28]
 8003abe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003ac2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	ddbe      	ble.n	8003a48 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8003aca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d019      	beq.n	8003b06 <Displ_Line+0x25c>
    	if (steep) {
 8003ad2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8003ada:	88b8      	ldrh	r0, [r7, #4]
 8003adc:	88f9      	ldrh	r1, [r7, #6]
 8003ade:	8bfb      	ldrh	r3, [r7, #30]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	2201      	movs	r2, #1
 8003aec:	f7ff fb2c 	bl	8003148 <Displ_FillArea>
 8003af0:	e009      	b.n	8003b06 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8003af2:	88f8      	ldrh	r0, [r7, #6]
 8003af4:	88b9      	ldrh	r1, [r7, #4]
 8003af6:	8bfb      	ldrh	r3, [r7, #30]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2301      	movs	r3, #1
 8003b02:	f7ff fb21 	bl	8003148 <Displ_FillArea>
    	}
    }
}
 8003b06:	3724      	adds	r7, #36	; 0x24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	80fb      	strh	r3, [r7, #6]
 8003b1e:	4603      	mov	r3, r0
 8003b20:	80bb      	strh	r3, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	807b      	strh	r3, [r7, #2]
 8003b26:	4613      	mov	r3, r2
 8003b28:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8003b2a:	88f8      	ldrh	r0, [r7, #6]
 8003b2c:	88b9      	ldrh	r1, [r7, #4]
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	8b3c      	ldrh	r4, [r7, #24]
 8003b32:	8bbb      	ldrh	r3, [r7, #28]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	4623      	mov	r3, r4
 8003b38:	f7ff fb06 	bl	8003148 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8003b3c:	88f8      	ldrh	r0, [r7, #6]
 8003b3e:	88ba      	ldrh	r2, [r7, #4]
 8003b40:	883b      	ldrh	r3, [r7, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	8b3b      	ldrh	r3, [r7, #24]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	b299      	uxth	r1, r3
 8003b4c:	887a      	ldrh	r2, [r7, #2]
 8003b4e:	8b3c      	ldrh	r4, [r7, #24]
 8003b50:	8bbb      	ldrh	r3, [r7, #28]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	4623      	mov	r3, r4
 8003b56:	f7ff faf7 	bl	8003148 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8003b5a:	88f8      	ldrh	r0, [r7, #6]
 8003b5c:	88b9      	ldrh	r1, [r7, #4]
 8003b5e:	8b3a      	ldrh	r2, [r7, #24]
 8003b60:	883c      	ldrh	r4, [r7, #0]
 8003b62:	8bbb      	ldrh	r3, [r7, #28]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4623      	mov	r3, r4
 8003b68:	f7ff faee 	bl	8003148 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	4413      	add	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	8b3b      	ldrh	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	b298      	uxth	r0, r3
 8003b7a:	88b9      	ldrh	r1, [r7, #4]
 8003b7c:	8b3a      	ldrh	r2, [r7, #24]
 8003b7e:	883c      	ldrh	r4, [r7, #0]
 8003b80:	8bbb      	ldrh	r3, [r7, #28]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	4623      	mov	r3, r4
 8003b86:	f7ff fadf 	bl	8003148 <Displ_FillArea>
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}

08003b92 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003b92:	b590      	push	{r4, r7, lr}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	4604      	mov	r4, r0
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	80fb      	strh	r3, [r7, #6]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	80bb      	strh	r3, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
 8003bac:	4613      	mov	r3, r2
 8003bae:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8003bb0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003bb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003bb8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bbc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003bc0:	8c3b      	ldrh	r3, [r7, #32]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	f7ff fe70 	bl	80038aa <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8003bca:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8003bce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003bd2:	f9b7 1000 	ldrsh.w	r1, [r7]
 8003bd6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8003bda:	8c3b      	ldrh	r3, [r7, #32]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4623      	mov	r3, r4
 8003be0:	f7ff fe63 	bl	80038aa <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8003be4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003be8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bec:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8003bf0:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003bf4:	8c3b      	ldrh	r3, [r7, #32]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7ff fe56 	bl	80038aa <Displ_Line>
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd90      	pop	{r4, r7, pc}

08003c06 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003c06:	b590      	push	{r4, r7, lr}
 8003c08:	b091      	sub	sp, #68	; 0x44
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	4608      	mov	r0, r1
 8003c10:	4611      	mov	r1, r2
 8003c12:	461a      	mov	r2, r3
 8003c14:	4623      	mov	r3, r4
 8003c16:	80fb      	strh	r3, [r7, #6]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	80bb      	strh	r3, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8003c24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003c28:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dd0b      	ble.n	8003c48 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8003c30:	88bb      	ldrh	r3, [r7, #4]
 8003c32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c34:	883b      	ldrh	r3, [r7, #0]
 8003c36:	80bb      	strh	r3, [r7, #4]
 8003c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c3a:	803b      	strh	r3, [r7, #0]
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c40:	887b      	ldrh	r3, [r7, #2]
 8003c42:	80fb      	strh	r3, [r7, #6]
 8003c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c46:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8003c48:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dd0f      	ble.n	8003c74 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8003c54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c58:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c5a:	883b      	ldrh	r3, [r7, #0]
 8003c5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c62:	803b      	strh	r3, [r7, #0]
 8003c64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c68:	843b      	strh	r3, [r7, #32]
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003c70:	8c3b      	ldrh	r3, [r7, #32]
 8003c72:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8003c74:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003c78:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	dd0b      	ble.n	8003c98 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8003c80:	88bb      	ldrh	r3, [r7, #4]
 8003c82:	83fb      	strh	r3, [r7, #30]
 8003c84:	883b      	ldrh	r3, [r7, #0]
 8003c86:	80bb      	strh	r3, [r7, #4]
 8003c88:	8bfb      	ldrh	r3, [r7, #30]
 8003c8a:	803b      	strh	r3, [r7, #0]
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	83bb      	strh	r3, [r7, #28]
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	80fb      	strh	r3, [r7, #6]
 8003c94:	8bbb      	ldrh	r3, [r7, #28]
 8003c96:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8003c98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003c9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d136      	bne.n	8003d12 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ca8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003caa:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8003cac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003cb0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	da02      	bge.n	8003cbe <Displ_fillTriangle+0xb8>
 8003cb8:	887b      	ldrh	r3, [r7, #2]
 8003cba:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cbc:	e007      	b.n	8003cce <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8003cbe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003cc2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	dd01      	ble.n	8003cce <Displ_fillTriangle+0xc8>
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8003cce:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003cd2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	da03      	bge.n	8003ce2 <Displ_fillTriangle+0xdc>
 8003cda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cde:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ce0:	e008      	b.n	8003cf4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8003ce2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003ce6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003cea:	429a      	cmp	r2, r3
 8003cec:	dd02      	ble.n	8003cf4 <Displ_fillTriangle+0xee>
 8003cee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cf2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8003cf4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003cf8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003cfc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d00:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003d04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	f7ff fdcd 	bl	80038aa <Displ_Line>
        return;
 8003d10:	e0d2      	b.n	8003eb8 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8003d1c:	883a      	ldrh	r2, [r7, #0]
 8003d1e:	88bb      	ldrh	r3, [r7, #4]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8003d26:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8003d32:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003d36:	88bb      	ldrh	r3, [r7, #4]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8003d3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8003d4a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003d4e:	883b      	ldrh	r3, [r7, #0]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8003d5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003d62:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d102      	bne.n	8003d70 <Displ_fillTriangle+0x16a>
 8003d6a:	883b      	ldrh	r3, [r7, #0]
 8003d6c:	863b      	strh	r3, [r7, #48]	; 0x30
 8003d6e:	e003      	b.n	8003d78 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8003d70:	883b      	ldrh	r3, [r7, #0]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8003d78:	88bb      	ldrh	r3, [r7, #4]
 8003d7a:	867b      	strh	r3, [r7, #50]	; 0x32
 8003d7c:	e03d      	b.n	8003dfa <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8003d7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003d92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	4413      	add	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8003da6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dac:	4413      	add	r3, r2
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003db0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db6:	4413      	add	r3, r2
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003dba:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003dbe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	dd05      	ble.n	8003dd2 <Displ_fillTriangle+0x1cc>
 8003dc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dc8:	81bb      	strh	r3, [r7, #12]
 8003dca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dce:	89bb      	ldrh	r3, [r7, #12]
 8003dd0:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003dd2:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8003dd6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003dda:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003dde:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003de2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4623      	mov	r3, r4
 8003dea:	f7ff fd5e 	bl	80038aa <Displ_Line>
    for(y=y0; y<=last; y++) {
 8003dee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	867b      	strh	r3, [r7, #50]	; 0x32
 8003dfa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003dfe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003e02:	429a      	cmp	r2, r3
 8003e04:	ddbb      	ble.n	8003d7e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003e06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e0a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003e0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e12:	1a8a      	subs	r2, r1, r2
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003e1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e1e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003e22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e26:	1a8a      	subs	r2, r1, r2
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8003e2e:	e03d      	b.n	8003eac <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8003e30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	4413      	add	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003e44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	4413      	add	r3, r2
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8003e58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5e:	4413      	add	r3, r2
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003e62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e68:	4413      	add	r3, r2
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003e6c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003e70:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003e74:	429a      	cmp	r2, r3
 8003e76:	dd05      	ble.n	8003e84 <Displ_fillTriangle+0x27e>
 8003e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e7a:	81fb      	strh	r3, [r7, #14]
 8003e7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e7e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e80:	89fb      	ldrh	r3, [r7, #14]
 8003e82:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003e84:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8003e88:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003e8c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003e90:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003e94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	f7ff fd05 	bl	80038aa <Displ_Line>
    for(; y<=y2; y++) {
 8003ea0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	867b      	strh	r3, [r7, #50]	; 0x32
 8003eac:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003eb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	ddbb      	ble.n	8003e30 <Displ_fillTriangle+0x22a>
    }
}
 8003eb8:	373c      	adds	r7, #60	; 0x3c
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}
	...

08003ec0 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	b590      	push	{r4, r7, lr}
 8003ec4:	b08d      	sub	sp, #52	; 0x34
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eca:	4603      	mov	r3, r0
 8003ecc:	80fb      	strh	r3, [r7, #6]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	80bb      	strh	r3, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8003ed6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003eda:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8003edc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d102      	bne.n	8003eea <Displ_WChar+0x2a>
		wsize<<= 1;
 8003ee4:	7efb      	ldrb	r3, [r7, #27]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8003eee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ef2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8003efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	3b20      	subs	r3, #32
 8003f02:	4619      	mov	r1, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8003f0e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d005      	beq.n	8003f22 <Displ_WChar+0x62>
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d107      	bne.n	8003f2a <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8003f1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003f1e:	61fb      	str	r3, [r7, #28]
			break;
 8003f20:	e005      	b.n	8003f2e <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8003f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f26:	61fb      	str	r3, [r7, #28]
			break;
 8003f28:	e001      	b.n	8003f2e <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	61fb      	str	r3, [r7, #28]
#endif

#ifdef Z_RGB666
//  setting up char image in RGB666 format

	uint8_t Rcol=(color & 0xF800)>>8;
 8003f2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f32:	121b      	asrs	r3, r3, #8
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	73fb      	strb	r3, [r7, #15]
	uint8_t Gcol=(color & 0x07E0)>>3;
 8003f3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f40:	10db      	asrs	r3, r3, #3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f023 0303 	bic.w	r3, r3, #3
 8003f48:	73bb      	strb	r3, [r7, #14]
	uint8_t Bcol=(color & 0x001F)<<3;
 8003f4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	737b      	strb	r3, [r7, #13]
	uint8_t Rbak=(bgcolor & 0xF800)>>8;
 8003f52:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003f56:	121b      	asrs	r3, r3, #8
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	733b      	strb	r3, [r7, #12]
	uint8_t Gbak=(bgcolor & 0x07E0)>>3;
 8003f60:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003f64:	10db      	asrs	r3, r3, #3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	72fb      	strb	r3, [r7, #11]
	uint8_t Bbak=(bgcolor & 0x001F)<<3;
 8003f6e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	72bb      	strb	r3, [r7, #10]

	for(i = 0; i < (bytes); i+=font.Size){
 8003f76:	2300      	movs	r3, #0
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7a:	e0af      	b.n	80040dc <Displ_WChar+0x21c>
		b=0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8003f80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d015      	beq.n	8003fb4 <Displ_WChar+0xf4>
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d120      	bne.n	8003fce <Displ_WChar+0x10e>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	4413      	add	r3, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	3301      	adds	r3, #1
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	440b      	add	r3, r1
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	3202      	adds	r2, #2
 8003fa8:	6939      	ldr	r1, [r7, #16]
 8003faa:	440a      	add	r2, r1
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8003fb2:	e011      	b.n	8003fd8 <Displ_WChar+0x118>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc0:	3201      	adds	r2, #1
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8003fcc:	e004      	b.n	8003fd8 <Displ_WChar+0x118>
			default:
				b=pos[i];
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	4413      	add	r3, r2
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
 8003fdc:	e072      	b.n	80040c4 <Displ_WChar+0x204>
			if((b << j) & mask)  {
 8003fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d034      	beq.n	8004056 <Displ_WChar+0x196>
				dispBuffer[bufSize++] = Rcol;
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <Displ_WChar+0x27c>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	6239      	str	r1, [r7, #32]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gcol;
 8003ffc:	4b4f      	ldr	r3, [pc, #316]	; (800413c <Displ_WChar+0x27c>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	6239      	str	r1, [r7, #32]
 8004006:	4413      	add	r3, r2
 8004008:	7bba      	ldrb	r2, [r7, #14]
 800400a:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bcol;
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <Displ_WChar+0x27c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	6239      	str	r1, [r7, #32]
 8004016:	4413      	add	r3, r2
 8004018:	7b7a      	ldrb	r2, [r7, #13]
 800401a:	701a      	strb	r2, [r3, #0]

				if (size==2){
 800401c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004020:	2b02      	cmp	r3, #2
 8004022:	d14c      	bne.n	80040be <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rcol;
 8004024:	4b45      	ldr	r3, [pc, #276]	; (800413c <Displ_WChar+0x27c>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	6239      	str	r1, [r7, #32]
 800402e:	4413      	add	r3, r2
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gcol;
 8004034:	4b41      	ldr	r3, [pc, #260]	; (800413c <Displ_WChar+0x27c>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	6239      	str	r1, [r7, #32]
 800403e:	4413      	add	r3, r2
 8004040:	7bba      	ldrb	r2, [r7, #14]
 8004042:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bcol;
 8004044:	4b3d      	ldr	r3, [pc, #244]	; (800413c <Displ_WChar+0x27c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	6239      	str	r1, [r7, #32]
 800404e:	4413      	add	r3, r2
 8004050:	7b7a      	ldrb	r2, [r7, #13]
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e033      	b.n	80040be <Displ_WChar+0x1fe>
				}
			} else {
				dispBuffer[bufSize++] = Rbak;
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <Displ_WChar+0x27c>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	6239      	str	r1, [r7, #32]
 8004060:	4413      	add	r3, r2
 8004062:	7b3a      	ldrb	r2, [r7, #12]
 8004064:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gbak;
 8004066:	4b35      	ldr	r3, [pc, #212]	; (800413c <Displ_WChar+0x27c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	1c59      	adds	r1, r3, #1
 800406e:	6239      	str	r1, [r7, #32]
 8004070:	4413      	add	r3, r2
 8004072:	7afa      	ldrb	r2, [r7, #11]
 8004074:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bbak;
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <Displ_WChar+0x27c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	1c59      	adds	r1, r3, #1
 800407e:	6239      	str	r1, [r7, #32]
 8004080:	4413      	add	r3, r2
 8004082:	7aba      	ldrb	r2, [r7, #10]
 8004084:	701a      	strb	r2, [r3, #0]
				if (size==2) {
 8004086:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800408a:	2b02      	cmp	r3, #2
 800408c:	d117      	bne.n	80040be <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rbak;
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <Displ_WChar+0x27c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	1c59      	adds	r1, r3, #1
 8004096:	6239      	str	r1, [r7, #32]
 8004098:	4413      	add	r3, r2
 800409a:	7b3a      	ldrb	r2, [r7, #12]
 800409c:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gbak;
 800409e:	4b27      	ldr	r3, [pc, #156]	; (800413c <Displ_WChar+0x27c>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	6239      	str	r1, [r7, #32]
 80040a8:	4413      	add	r3, r2
 80040aa:	7afa      	ldrb	r2, [r7, #11]
 80040ac:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bbak;
 80040ae:	4b23      	ldr	r3, [pc, #140]	; (800413c <Displ_WChar+0x27c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	1c59      	adds	r1, r3, #1
 80040b6:	6239      	str	r1, [r7, #32]
 80040b8:	4413      	add	r3, r2
 80040ba:	7aba      	ldrb	r2, [r7, #10]
 80040bc:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	3301      	adds	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040c8:	461a      	mov	r2, r3
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d386      	bcc.n	8003fde <Displ_WChar+0x11e>
	for(i = 0; i < (bytes); i+=font.Size){
 80040d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80040d4:	461a      	mov	r2, r3
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	4413      	add	r3, r2
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	f4ff af4b 	bcc.w	8003f7c <Displ_WChar+0xbc>
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80040e6:	7efb      	ldrb	r3, [r7, #27]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	4413      	add	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29c      	uxth	r4, r3
 80040f4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80040f8:	88bb      	ldrh	r3, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	88b9      	ldrh	r1, [r7, #4]
 8004104:	88f8      	ldrh	r0, [r7, #6]
 8004106:	4622      	mov	r2, r4
 8004108:	f7fe ff2e 	bl	8002f68 <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer,bufSize,0);
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <Displ_WChar+0x27c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	6a39      	ldr	r1, [r7, #32]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fed0 	bl	8002eba <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <Displ_WChar+0x27c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <Displ_WChar+0x280>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <Displ_WChar+0x268>
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <Displ_WChar+0x284>)
 8004126:	e000      	b.n	800412a <Displ_WChar+0x26a>
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <Displ_WChar+0x280>)
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <Displ_WChar+0x27c>)
 800412c:	6013      	str	r3, [r2, #0]

}
 800412e:	bf00      	nop
 8004130:	3734      	adds	r7, #52	; 0x34
 8004132:	46bd      	mov	sp, r7
 8004134:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004138:	b002      	add	sp, #8
 800413a:	4770      	bx	lr
 800413c:	20000030 	.word	0x20000030
 8004140:	2000568c 	.word	0x2000568c
 8004144:	20005a8c 	.word	0x20005a8c

08004148 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b087      	sub	sp, #28
 800414c:	af02      	add	r7, sp, #8
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4623      	mov	r3, r4
 8004158:	80fb      	strh	r3, [r7, #6]
 800415a:	4603      	mov	r3, r0
 800415c:	80bb      	strh	r3, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	807b      	strh	r3, [r7, #2]
 8004162:	4613      	mov	r3, r2
 8004164:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8004166:	f9b7 2000 	ldrsh.w	r2, [r7]
 800416a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800416e:	4293      	cmp	r3, r2
 8004170:	bfa8      	it	ge
 8004172:	4613      	movge	r3, r2
 8004174:	b21b      	sxth	r3, r3
 8004176:	0fda      	lsrs	r2, r3, #31
 8004178:	4413      	add	r3, r2
 800417a:	105b      	asrs	r3, r3, #1
 800417c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800417e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004182:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004186:	429a      	cmp	r2, r3
 8004188:	dd01      	ble.n	800418e <Displ_drawRoundRect+0x46>
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	8c3b      	ldrh	r3, [r7, #32]
 8004192:	4413      	add	r3, r2
 8004194:	b29b      	uxth	r3, r3
 8004196:	b218      	sxth	r0, r3
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	4413      	add	r3, r2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	8c3b      	ldrh	r3, [r7, #32]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b21a      	sxth	r2, r3
 80041ac:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80041b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80041b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	4623      	mov	r3, r4
 80041ba:	f7ff fb76 	bl	80038aa <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	8c3b      	ldrh	r3, [r7, #32]
 80041c2:	4413      	add	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b218      	sxth	r0, r3
 80041c8:	88ba      	ldrh	r2, [r7, #4]
 80041ca:	883b      	ldrh	r3, [r7, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	b219      	sxth	r1, r3
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	4413      	add	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	8c3b      	ldrh	r3, [r7, #32]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	b21c      	sxth	r4, r3
 80041ea:	88ba      	ldrh	r2, [r7, #4]
 80041ec:	883b      	ldrh	r3, [r7, #0]
 80041ee:	4413      	add	r3, r2
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	b21a      	sxth	r2, r3
 80041f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	4622      	mov	r2, r4
 8004200:	f7ff fb53 	bl	80038aa <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8004204:	88ba      	ldrh	r2, [r7, #4]
 8004206:	8c3b      	ldrh	r3, [r7, #32]
 8004208:	4413      	add	r3, r2
 800420a:	b29b      	uxth	r3, r3
 800420c:	b219      	sxth	r1, r3
 800420e:	88ba      	ldrh	r2, [r7, #4]
 8004210:	883b      	ldrh	r3, [r7, #0]
 8004212:	4413      	add	r3, r2
 8004214:	b29a      	uxth	r2, r3
 8004216:	8c3b      	ldrh	r3, [r7, #32]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29b      	uxth	r3, r3
 8004220:	b21c      	sxth	r4, r3
 8004222:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004226:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800422a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4623      	mov	r3, r4
 8004230:	f7ff fb3b 	bl	80038aa <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	4413      	add	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	b218      	sxth	r0, r3
 8004242:	88ba      	ldrh	r2, [r7, #4]
 8004244:	8c3b      	ldrh	r3, [r7, #32]
 8004246:	4413      	add	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	b219      	sxth	r1, r3
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	4413      	add	r3, r2
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	b21c      	sxth	r4, r3
 800425a:	88ba      	ldrh	r2, [r7, #4]
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	4413      	add	r3, r2
 8004260:	b29a      	uxth	r2, r3
 8004262:	8c3b      	ldrh	r3, [r7, #32]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	b21a      	sxth	r2, r3
 800426e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	4622      	mov	r2, r4
 8004276:	f7ff fb18 	bl	80038aa <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	8c3b      	ldrh	r3, [r7, #32]
 800427e:	4413      	add	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	b218      	sxth	r0, r3
 8004284:	88ba      	ldrh	r2, [r7, #4]
 8004286:	8c3b      	ldrh	r3, [r7, #32]
 8004288:	4413      	add	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	b219      	sxth	r1, r3
 800428e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	2301      	movs	r3, #1
 8004298:	f7ff f93a 	bl	8003510 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	4413      	add	r3, r2
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	8c3b      	ldrh	r3, [r7, #32]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	b218      	sxth	r0, r3
 80042b0:	88ba      	ldrh	r2, [r7, #4]
 80042b2:	8c3b      	ldrh	r3, [r7, #32]
 80042b4:	4413      	add	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	b219      	sxth	r1, r3
 80042ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80042be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2302      	movs	r3, #2
 80042c4:	f7ff f924 	bl	8003510 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	4413      	add	r3, r2
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	8c3b      	ldrh	r3, [r7, #32]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b218      	sxth	r0, r3
 80042dc:	88ba      	ldrh	r2, [r7, #4]
 80042de:	883b      	ldrh	r3, [r7, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	8c3b      	ldrh	r3, [r7, #32]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	b219      	sxth	r1, r3
 80042f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80042f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2304      	movs	r3, #4
 80042fa:	f7ff f909 	bl	8003510 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	8c3b      	ldrh	r3, [r7, #32]
 8004302:	4413      	add	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	b218      	sxth	r0, r3
 8004308:	88ba      	ldrh	r2, [r7, #4]
 800430a:	883b      	ldrh	r3, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	b29a      	uxth	r2, r3
 8004310:	8c3b      	ldrh	r3, [r7, #32]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	b219      	sxth	r1, r3
 800431c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2308      	movs	r3, #8
 8004326:	f7ff f8f3 	bl	8003510 <drawCircleHelper>
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bd90      	pop	{r4, r7, pc}

08004332 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004332:	b590      	push	{r4, r7, lr}
 8004334:	b087      	sub	sp, #28
 8004336:	af02      	add	r7, sp, #8
 8004338:	4604      	mov	r4, r0
 800433a:	4608      	mov	r0, r1
 800433c:	4611      	mov	r1, r2
 800433e:	461a      	mov	r2, r3
 8004340:	4623      	mov	r3, r4
 8004342:	80fb      	strh	r3, [r7, #6]
 8004344:	4603      	mov	r3, r0
 8004346:	80bb      	strh	r3, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
 800434c:	4613      	mov	r3, r2
 800434e:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8004350:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004358:	4293      	cmp	r3, r2
 800435a:	bfa8      	it	ge
 800435c:	4613      	movge	r3, r2
 800435e:	b21b      	sxth	r3, r3
 8004360:	0fda      	lsrs	r2, r3, #31
 8004362:	4413      	add	r3, r2
 8004364:	105b      	asrs	r3, r3, #1
 8004366:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8004368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800436c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004370:	429a      	cmp	r2, r3
 8004372:	dd01      	ble.n	8004378 <Displ_fillRoundRect+0x46>
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	8c3b      	ldrh	r3, [r7, #32]
 800437c:	4413      	add	r3, r2
 800437e:	b298      	uxth	r0, r3
 8004380:	88b9      	ldrh	r1, [r7, #4]
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	8c3b      	ldrh	r3, [r7, #32]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	b29b      	uxth	r3, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	b29a      	uxth	r2, r3
 800438e:	883c      	ldrh	r4, [r7, #0]
 8004390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	4623      	mov	r3, r4
 8004396:	f7fe fed7 	bl	8003148 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	4413      	add	r3, r2
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	8c3b      	ldrh	r3, [r7, #32]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	b218      	sxth	r0, r3
 80043ae:	88ba      	ldrh	r2, [r7, #4]
 80043b0:	8c3b      	ldrh	r3, [r7, #32]
 80043b2:	4413      	add	r3, r2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b219      	sxth	r1, r3
 80043b8:	883a      	ldrh	r2, [r7, #0]
 80043ba:	8c3b      	ldrh	r3, [r7, #32]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	b21b      	sxth	r3, r3
 80043ca:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80043ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043d0:	9201      	str	r2, [sp, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	4622      	mov	r2, r4
 80043d8:	f7ff f95e 	bl	8003698 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	8c3b      	ldrh	r3, [r7, #32]
 80043e0:	4413      	add	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	b218      	sxth	r0, r3
 80043e6:	88ba      	ldrh	r2, [r7, #4]
 80043e8:	8c3b      	ldrh	r3, [r7, #32]
 80043ea:	4413      	add	r3, r2
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	b219      	sxth	r1, r3
 80043f0:	883a      	ldrh	r2, [r7, #0]
 80043f2:	8c3b      	ldrh	r3, [r7, #32]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	b21b      	sxth	r3, r3
 8004402:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004406:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004408:	9201      	str	r2, [sp, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2302      	movs	r3, #2
 800440e:	4622      	mov	r2, r4
 8004410:	f7ff f942 	bl	8003698 <fillCircleHelper>
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800441c:	b082      	sub	sp, #8
 800441e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004420:	b08b      	sub	sp, #44	; 0x2c
 8004422:	af06      	add	r7, sp, #24
 8004424:	603a      	str	r2, [r7, #0]
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004428:	4603      	mov	r3, r0
 800442a:	80fb      	strh	r3, [r7, #6]
 800442c:	460b      	mov	r3, r1
 800442e:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8004430:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004432:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8004434:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004438:	2b01      	cmp	r3, #1
 800443a:	d922      	bls.n	8004482 <Displ_WString+0x66>
		delta<<=1;
 800443c:	89fb      	ldrh	r3, [r7, #14]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8004442:	e01e      	b.n	8004482 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	88bd      	ldrh	r5, [r7, #4]
 800444a:	88fc      	ldrh	r4, [r7, #6]
 800444c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004454:	9303      	str	r3, [sp, #12]
 8004456:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	466e      	mov	r6, sp
 800445e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004462:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004466:	e886 0003 	stmia.w	r6, {r0, r1}
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	4629      	mov	r1, r5
 800446e:	4620      	mov	r0, r4
 8004470:	f7ff fd26 	bl	8003ec0 <Displ_WChar>
        x += delta;
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	89fb      	ldrh	r3, [r7, #14]
 8004478:	4413      	add	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
        str++;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1dc      	bne.n	8004444 <Displ_WString+0x28>
    }
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004496:	b002      	add	sp, #8
 8004498:	4770      	bx	lr
	...

0800449c <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	2b51      	cmp	r3, #81	; 0x51
 80044aa:	d00a      	beq.n	80044c2 <Displ_BackLight+0x26>
 80044ac:	2b51      	cmp	r3, #81	; 0x51
 80044ae:	dc16      	bgt.n	80044de <Displ_BackLight+0x42>
 80044b0:	2b46      	cmp	r3, #70	; 0x46
 80044b2:	d008      	beq.n	80044c6 <Displ_BackLight+0x2a>
 80044b4:	2b46      	cmp	r3, #70	; 0x46
 80044b6:	dc12      	bgt.n	80044de <Displ_BackLight+0x42>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d00a      	beq.n	80044d2 <Displ_BackLight+0x36>
 80044bc:	2b31      	cmp	r3, #49	; 0x31
 80044be:	d002      	beq.n	80044c6 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80044c0:	e00d      	b.n	80044de <Displ_BackLight+0x42>
		__NOP();
 80044c2:	bf00      	nop
		break;
 80044c4:	e00c      	b.n	80044e0 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 80044c6:	2201      	movs	r2, #1
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	480a      	ldr	r0, [pc, #40]	; (80044f4 <Displ_BackLight+0x58>)
 80044cc:	f002 f860 	bl	8006590 <HAL_GPIO_WritePin>
		break;
 80044d0:	e006      	b.n	80044e0 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4807      	ldr	r0, [pc, #28]	; (80044f4 <Displ_BackLight+0x58>)
 80044d8:	f002 f85a 	bl	8006590 <HAL_GPIO_WritePin>
		break;
 80044dc:	e000      	b.n	80044e0 <Displ_BackLight+0x44>
		break;
 80044de:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 80044e0:	2140      	movs	r1, #64	; 0x40
 80044e2:	4804      	ldr	r0, [pc, #16]	; (80044f4 <Displ_BackLight+0x58>)
 80044e4:	f002 f83c 	bl	8006560 <HAL_GPIO_ReadPin>
 80044e8:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40020000 	.word	0x40020000

080044f8 <testLines>:




void testLines(uint16_t color)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8004502:	4b7c      	ldr	r3, [pc, #496]	; (80046f4 <testLines+0x1fc>)
 8004504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004508:	617b      	str	r3, [r7, #20]
                  h = _height;
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <testLines+0x200>)
 800450c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004510:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8004512:	2000      	movs	r0, #0
 8004514:	f7fe ffe0 	bl	80034d8 <Displ_CLS>

    x1 = y1 = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3b01      	subs	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e00f      	b.n	800454c <testLines+0x54>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	b218      	sxth	r0, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	b219      	sxth	r1, r3
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	b21a      	sxth	r2, r3
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	b21c      	sxth	r4, r3
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4623      	mov	r3, r4
 8004542:	f7ff f9b2 	bl	80038aa <Displ_Line>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	3306      	adds	r3, #6
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	429a      	cmp	r2, r3
 8004552:	dbeb      	blt.n	800452c <testLines+0x34>
    x2    = w - 1;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3b01      	subs	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e00f      	b.n	8004580 <testLines+0x88>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	b218      	sxth	r0, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	b219      	sxth	r1, r3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	b21a      	sxth	r2, r3
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	b21c      	sxth	r4, r3
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4623      	mov	r3, r4
 8004576:	f7ff f998 	bl	80038aa <Displ_Line>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	3306      	adds	r3, #6
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	dbeb      	blt.n	8004560 <testLines+0x68>

    Displ_CLS(BLACK);
 8004588:	2000      	movs	r0, #0
 800458a:	f7fe ffa5 	bl	80034d8 <Displ_CLS>

    x1    = w - 1;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3b01      	subs	r3, #1
 8004592:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3b01      	subs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e00f      	b.n	80045c4 <testLines+0xcc>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	b218      	sxth	r0, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	b219      	sxth	r1, r3
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	b21a      	sxth	r2, r3
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	b21c      	sxth	r4, r3
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4623      	mov	r3, r4
 80045ba:	f7ff f976 	bl	80038aa <Displ_Line>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3306      	adds	r3, #6
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dbeb      	blt.n	80045a4 <testLines+0xac>
    x2    = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e00f      	b.n	80045f6 <testLines+0xfe>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	b218      	sxth	r0, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	b219      	sxth	r1, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	b21a      	sxth	r2, r3
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	b21c      	sxth	r4, r3
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4623      	mov	r3, r4
 80045ec:	f7ff f95d 	bl	80038aa <Displ_Line>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	3306      	adds	r3, #6
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	dbeb      	blt.n	80045d6 <testLines+0xde>

    Displ_CLS(BLACK);
 80045fe:	2000      	movs	r0, #0
 8004600:	f7fe ff6a 	bl	80034d8 <Displ_CLS>

    x1    = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3b01      	subs	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	e00f      	b.n	8004638 <testLines+0x140>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	b218      	sxth	r0, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	b219      	sxth	r1, r3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	b21a      	sxth	r2, r3
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	b21c      	sxth	r4, r3
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4623      	mov	r3, r4
 800462e:	f7ff f93c 	bl	80038aa <Displ_Line>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3306      	adds	r3, #6
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	429a      	cmp	r2, r3
 800463e:	dbeb      	blt.n	8004618 <testLines+0x120>
    x2    = w - 1;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3b01      	subs	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e00f      	b.n	800466c <testLines+0x174>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	b218      	sxth	r0, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	b219      	sxth	r1, r3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	b21a      	sxth	r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	b21c      	sxth	r4, r3
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	4623      	mov	r3, r4
 8004662:	f7ff f922 	bl	80038aa <Displ_Line>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3306      	adds	r3, #6
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	dbeb      	blt.n	800464c <testLines+0x154>

    Displ_CLS(BLACK);
 8004674:	2000      	movs	r0, #0
 8004676:	f7fe ff2f 	bl	80034d8 <Displ_CLS>

    x1    = w - 1;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	3b01      	subs	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3b01      	subs	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	e00f      	b.n	80046b0 <testLines+0x1b8>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	b218      	sxth	r0, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	b219      	sxth	r1, r3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	b21a      	sxth	r2, r3
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	b21c      	sxth	r4, r3
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4623      	mov	r3, r4
 80046a6:	f7ff f900 	bl	80038aa <Displ_Line>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3306      	adds	r3, #6
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	dbeb      	blt.n	8004690 <testLines+0x198>
    x2    = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e00f      	b.n	80046e2 <testLines+0x1ea>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	b218      	sxth	r0, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	b219      	sxth	r1, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	b21a      	sxth	r2, r3
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	b21c      	sxth	r4, r3
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4623      	mov	r3, r4
 80046d8:	f7ff f8e7 	bl	80038aa <Displ_Line>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	3306      	adds	r3, #6
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	dbeb      	blt.n	80046c2 <testLines+0x1ca>

}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	3724      	adds	r7, #36	; 0x24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}
 80046f4:	20005686 	.word	0x20005686
 80046f8:	20005688 	.word	0x20005688

080046fc <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	4603      	mov	r3, r0
 8004704:	460a      	mov	r2, r1
 8004706:	80fb      	strh	r3, [r7, #6]
 8004708:	4613      	mov	r3, r2
 800470a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <testFastLines+0x94>)
 800470e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <testFastLines+0x98>)
 8004716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800471a:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800471c:	2000      	movs	r0, #0
 800471e:	f7fe fedb 	bl	80034d8 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e011      	b.n	800474c <testFastLines+0x50>
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	b219      	sxth	r1, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29b      	uxth	r3, r3
 8004734:	b21a      	sxth	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	b218      	sxth	r0, r3
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4603      	mov	r3, r0
 8004740:	2000      	movs	r0, #0
 8004742:	f7ff f8b2 	bl	80038aa <Displ_Line>
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3305      	adds	r3, #5
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	dbe9      	blt.n	8004728 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e011      	b.n	800477e <testFastLines+0x82>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	b218      	sxth	r0, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	b21a      	sxth	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29b      	uxth	r3, r3
 800476a:	b219      	sxth	r1, r3
 800476c:	88bb      	ldrh	r3, [r7, #4]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	460b      	mov	r3, r1
 8004772:	2100      	movs	r1, #0
 8004774:	f7ff f899 	bl	80038aa <Displ_Line>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3305      	adds	r3, #5
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	dbe9      	blt.n	800475a <testFastLines+0x5e>
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20005686 	.word	0x20005686
 8004794:	20005688 	.word	0x20005688

08004798 <testRects>:




void testRects(uint16_t color)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b08b      	sub	sp, #44	; 0x2c
 800479c:	af02      	add	r7, sp, #8
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 80047a2:	4b25      	ldr	r3, [pc, #148]	; (8004838 <testRects+0xa0>)
 80047a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047a8:	0fda      	lsrs	r2, r3, #31
 80047aa:	4413      	add	r3, r2
 80047ac:	105b      	asrs	r3, r3, #1
 80047ae:	b21b      	sxth	r3, r3
 80047b0:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <testRects+0xa4>)
 80047b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047b8:	0fda      	lsrs	r2, r3, #31
 80047ba:	4413      	add	r3, r2
 80047bc:	105b      	asrs	r3, r3, #1
 80047be:	b21b      	sxth	r3, r3
 80047c0:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7fe fe88 	bl	80034d8 <Displ_CLS>
	n     = min(_width, _height);
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <testRects+0xa4>)
 80047ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <testRects+0xa0>)
 80047d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bfa8      	it	ge
 80047d8:	4613      	movge	r3, r2
 80047da:	b21b      	sxth	r3, r3
 80047dc:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80047de:	2302      	movs	r3, #2
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e020      	b.n	8004826 <testRects+0x8e>
		i2 = i / 2;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	0fda      	lsrs	r2, r3, #31
 80047e8:	4413      	add	r3, r2
 80047ea:	105b      	asrs	r3, r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	b218      	sxth	r0, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	b29b      	uxth	r3, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	b29b      	uxth	r3, r3
 8004808:	b219      	sxth	r1, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	b21a      	sxth	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	b21c      	sxth	r4, r3
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	2301      	movs	r3, #1
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	4623      	mov	r3, r4
 800481c:	f7ff f976 	bl	8003b0c <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	3306      	adds	r3, #6
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	dbda      	blt.n	80047e4 <testRects+0x4c>
	}
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	3724      	adds	r7, #36	; 0x24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd90      	pop	{r4, r7, pc}
 8004838:	20005686 	.word	0x20005686
 800483c:	20005688 	.word	0x20005688

08004840 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b08b      	sub	sp, #44	; 0x2c
 8004844:	af02      	add	r7, sp, #8
 8004846:	4603      	mov	r3, r0
 8004848:	460a      	mov	r2, r1
 800484a:	80fb      	strh	r3, [r7, #6]
 800484c:	4613      	mov	r3, r2
 800484e:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <testFilledRects+0xd4>)
 8004852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004856:	0fda      	lsrs	r2, r3, #31
 8004858:	4413      	add	r3, r2
 800485a:	105b      	asrs	r3, r3, #1
 800485c:	b21b      	sxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8004862:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <testFilledRects+0xd8>)
 8004864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004868:	0fda      	lsrs	r2, r3, #31
 800486a:	4413      	add	r3, r2
 800486c:	105b      	asrs	r3, r3, #1
 800486e:	b21b      	sxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8004874:	2000      	movs	r0, #0
 8004876:	f7fe fe2f 	bl	80034d8 <Displ_CLS>
	n = min(_width, _height);
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <testFilledRects+0xd8>)
 800487c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004880:	4b24      	ldr	r3, [pc, #144]	; (8004914 <testFilledRects+0xd4>)
 8004882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004886:	4293      	cmp	r3, r2
 8004888:	bfa8      	it	ge
 800488a:	4613      	movge	r3, r2
 800488c:	b21b      	sxth	r3, r3
 800488e:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e035      	b.n	8004902 <testFilledRects+0xc2>
		i2    = i / 2;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	0fda      	lsrs	r2, r3, #31
 800489a:	4413      	add	r3, r2
 800489c:	105b      	asrs	r3, r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	b298      	uxth	r0, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b299      	uxth	r1, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	b29c      	uxth	r4, r3
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4623      	mov	r3, r4
 80048c6:	f7fe fc3f 	bl	8003148 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b218      	sxth	r0, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	b219      	sxth	r1, r3
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	b21a      	sxth	r2, r3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	b21c      	sxth	r4, r3
 80048ee:	88bb      	ldrh	r3, [r7, #4]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	2301      	movs	r3, #1
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4623      	mov	r3, r4
 80048f8:	f7ff f908 	bl	8003b0c <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	3b06      	subs	r3, #6
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dcc6      	bgt.n	8004896 <testFilledRects+0x56>
	}
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}
 8004912:	bf00      	nop
 8004914:	20005686 	.word	0x20005686
 8004918:	20005688 	.word	0x20005688

0800491c <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	460a      	mov	r2, r1
 8004926:	71fb      	strb	r3, [r7, #7]
 8004928:	4613      	mov	r3, r2
 800492a:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <testFilledCircles+0x74>)
 800492e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <testFilledCircles+0x78>)
 8004936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fe fdc8 	bl	80034d8 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e017      	b.n	800497e <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e00c      	b.n	800496e <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	b218      	sxth	r0, r3
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	b219      	sxth	r1, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	b21a      	sxth	r2, r3
 8004960:	88bb      	ldrh	r3, [r7, #4]
 8004962:	f7fe ff6f 	bl	8003844 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	dbee      	blt.n	8004954 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	429a      	cmp	r2, r3
 8004984:	dbe3      	blt.n	800494e <testFilledCircles+0x32>
        }
    }
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20005686 	.word	0x20005686
 8004994:	20005688 	.word	0x20005688

08004998 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	460a      	mov	r2, r1
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <testCircles+0x7c>)
 80049b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	4413      	add	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <testCircles+0x80>)
 80049be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c2:	461a      	mov	r2, r3
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	4413      	add	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e017      	b.n	8004a00 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e00c      	b.n	80049f0 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	b218      	sxth	r0, r3
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	b219      	sxth	r1, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	b21a      	sxth	r2, r3
 80049e2:	88bb      	ldrh	r3, [r7, #4]
 80049e4:	f7fe fca4 	bl	8003330 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	dbee      	blt.n	80049d6 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4413      	add	r3, r2
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	dbe3      	blt.n	80049d0 <testCircles+0x38>
        }
    }
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20005686 	.word	0x20005686
 8004a18:	20005688 	.word	0x20005688

08004a1c <testTriangles>:




void testTriangles()
{
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1e:	b089      	sub	sp, #36	; 0x24
 8004a20:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <testTriangles+0xc0>)
 8004a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a28:	0fda      	lsrs	r2, r3, #31
 8004a2a:	4413      	add	r3, r2
 8004a2c:	105b      	asrs	r3, r3, #1
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8004a34:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <testTriangles+0xc4>)
 8004a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a3a:	0fda      	lsrs	r2, r3, #31
 8004a3c:	4413      	add	r3, r2
 8004a3e:	105b      	asrs	r3, r3, #1
 8004a40:	b21b      	sxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8004a46:	2000      	movs	r0, #0
 8004a48:	f7fe fd46 	bl	80034d8 <Displ_CLS>
    n     = min(cx, cy);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bfa8      	it	ge
 8004a54:	4613      	movge	r3, r2
 8004a56:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e035      	b.n	8004aca <testTriangles+0xae>
    	Displ_drawTriangle(
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004a6e:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004a7c:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004a8a:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004a98:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	b291      	uxth	r1, r2
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	b292      	uxth	r2, r2
 8004aa2:	440a      	add	r2, r1
 8004aa4:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 8004aa6:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	10c9      	asrs	r1, r1, #3
 8004aac:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8004aae:	f001 011f 	and.w	r1, r1, #31
 8004ab2:	b289      	uxth	r1, r1
 8004ab4:	9102      	str	r1, [sp, #8]
 8004ab6:	9201      	str	r2, [sp, #4]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4633      	mov	r3, r6
 8004abc:	462a      	mov	r2, r5
 8004abe:	4621      	mov	r1, r4
 8004ac0:	f7ff f867 	bl	8003b92 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3305      	adds	r3, #5
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	dbc5      	blt.n	8004a5e <testTriangles+0x42>
    }
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004adc:	20005686 	.word	0x20005686
 8004ae0:	20005688 	.word	0x20005688

08004ae4 <testFilledTriangles>:





void testFilledTriangles() {
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8004aea:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <testFilledTriangles+0x154>)
 8004aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af0:	0fda      	lsrs	r2, r3, #31
 8004af2:	4413      	add	r3, r2
 8004af4:	105b      	asrs	r3, r3, #1
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8004afc:	4b4f      	ldr	r3, [pc, #316]	; (8004c3c <testFilledTriangles+0x158>)
 8004afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b02:	0fda      	lsrs	r2, r3, #31
 8004b04:	4413      	add	r3, r2
 8004b06:	105b      	asrs	r3, r3, #1
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fe fce2 	bl	80034d8 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bfa8      	it	ge
 8004b1c:	4613      	movge	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e080      	b.n	8004c24 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	b21c      	sxth	r4, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	b21d      	sxth	r5, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	b21e      	sxth	r6, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	fa0f fc83 	sxth.w	ip, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b21b      	sxth	r3, r3
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	b291      	uxth	r1, r2
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	b292      	uxth	r2, r2
 8004b68:	440a      	add	r2, r1
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	b212      	sxth	r2, r2
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	00c9      	lsls	r1, r1, #3
 8004b72:	b209      	sxth	r1, r1
 8004b74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8004b78:	b208      	sxth	r0, r1
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	10c9      	asrs	r1, r1, #3
 8004b7e:	b209      	sxth	r1, r1
 8004b80:	f001 011f 	and.w	r1, r1, #31
 8004b84:	b209      	sxth	r1, r1
 8004b86:	4301      	orrs	r1, r0
 8004b88:	b209      	sxth	r1, r1
 8004b8a:	b289      	uxth	r1, r1
 8004b8c:	9102      	str	r1, [sp, #8]
 8004b8e:	9201      	str	r2, [sp, #4]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	4663      	mov	r3, ip
 8004b94:	4632      	mov	r2, r6
 8004b96:	4629      	mov	r1, r5
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f7ff f834 	bl	8003c06 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	b21c      	sxth	r4, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	b21d      	sxth	r5, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	b21e      	sxth	r6, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	fa0f fc83 	sxth.w	ip, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	b21a      	sxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	b299      	uxth	r1, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	440b      	add	r3, r1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	b219      	sxth	r1, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bf4:	f023 0307 	bic.w	r3, r3, #7
 8004bf8:	b218      	sxth	r0, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	b21b      	sxth	r3, r3
 8004c00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	4303      	orrs	r3, r0
 8004c08:	b21b      	sxth	r3, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	9302      	str	r3, [sp, #8]
 8004c0e:	9101      	str	r1, [sp, #4]
 8004c10:	9200      	str	r2, [sp, #0]
 8004c12:	4663      	mov	r3, ip
 8004c14:	4632      	mov	r2, r6
 8004c16:	4629      	mov	r1, r5
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7fe ffba 	bl	8003b92 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b05      	subs	r3, #5
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	f73f af7b 	bgt.w	8004b22 <testFilledTriangles+0x3e>
    }
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20005686 	.word	0x20005686
 8004c3c:	20005688 	.word	0x20005688

08004c40 <testRoundRects>:





void testRoundRects() {
 8004c40:	b5b0      	push	{r4, r5, r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8004c46:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <testRoundRects+0xd4>)
 8004c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c4c:	0fda      	lsrs	r2, r3, #31
 8004c4e:	4413      	add	r3, r2
 8004c50:	105b      	asrs	r3, r3, #1
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8004c58:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <testRoundRects+0xd8>)
 8004c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c5e:	0fda      	lsrs	r2, r3, #31
 8004c60:	4413      	add	r3, r2
 8004c62:	105b      	asrs	r3, r3, #1
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f7fe fc34 	bl	80034d8 <Displ_CLS>
    w     = min(_width, _height);
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <testRoundRects+0xd8>)
 8004c72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004c76:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <testRoundRects+0xd4>)
 8004c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	bfa8      	it	ge
 8004c80:	4613      	movge	r3, r2
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	60fb      	str	r3, [r7, #12]
    red = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8004c8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c94:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e031      	b.n	8004d00 <testRoundRects+0xc0>
        i2 = i / 2;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	0fda      	lsrs	r2, r3, #31
 8004ca0:	4413      	add	r3, r2
 8004ca2:	105b      	asrs	r3, r3, #1
 8004ca4:	607b      	str	r3, [r7, #4]
        red += step;
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4413      	add	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b218      	sxth	r0, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b219      	sxth	r1, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	b21c      	sxth	r4, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	b21d      	sxth	r5, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da00      	bge.n	8004cda <testRoundRects+0x9a>
 8004cd8:	3307      	adds	r3, #7
 8004cda:	10db      	asrs	r3, r3, #3
 8004cdc:	b21a      	sxth	r2, r3
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	9200      	str	r2, [sp, #0]
 8004cf2:	462b      	mov	r3, r5
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	f7ff fa27 	bl	8004148 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3306      	adds	r3, #6
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dbc9      	blt.n	8004c9c <testRoundRects+0x5c>
    }
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bdb0      	pop	{r4, r5, r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20005686 	.word	0x20005686
 8004d18:	20005688 	.word	0x20005688

08004d1c <testFilledRoundRects>:





void testFilledRoundRects() {
 8004d1c:	b5b0      	push	{r4, r5, r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <testFilledRoundRects+0xe0>)
 8004d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d28:	0fda      	lsrs	r2, r3, #31
 8004d2a:	4413      	add	r3, r2
 8004d2c:	105b      	asrs	r3, r3, #1
 8004d2e:	b21b      	sxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8004d34:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <testFilledRoundRects+0xe4>)
 8004d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3a:	0fda      	lsrs	r2, r3, #31
 8004d3c:	4413      	add	r3, r2
 8004d3e:	105b      	asrs	r3, r3, #1
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7fe fbc6 	bl	80034d8 <Displ_CLS>
    green = 256;
 8004d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d50:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8004d52:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <testFilledRoundRects+0xe4>)
 8004d54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <testFilledRoundRects+0xe0>)
 8004d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bfa8      	it	ge
 8004d62:	4613      	movge	r3, r2
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d70:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8004d72:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <testFilledRoundRects+0xe4>)
 8004d74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004d78:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <testFilledRoundRects+0xe0>)
 8004d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfa8      	it	ge
 8004d82:	4613      	movge	r3, r2
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e02f      	b.n	8004dea <testFilledRoundRects+0xce>
        i2 = i / 2;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	0fda      	lsrs	r2, r3, #31
 8004d8e:	4413      	add	r3, r2
 8004d90:	105b      	asrs	r3, r3, #1
 8004d92:	603b      	str	r3, [r7, #0]
        green -= step;
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	b218      	sxth	r0, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	b219      	sxth	r1, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	b21c      	sxth	r4, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	b21d      	sxth	r5, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da00      	bge.n	8004dc8 <testFilledRoundRects+0xac>
 8004dc6:	3307      	adds	r3, #7
 8004dc8:	10db      	asrs	r3, r3, #3
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	00d2      	lsls	r2, r2, #3
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	9201      	str	r2, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	462b      	mov	r3, r5
 8004dde:	4622      	mov	r2, r4
 8004de0:	f7ff faa7 	bl	8004332 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3b06      	subs	r3, #6
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b14      	cmp	r3, #20
 8004dee:	dccc      	bgt.n	8004d8a <testFilledRoundRects+0x6e>
    }
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20005686 	.word	0x20005686
 8004e00:	20005688 	.word	0x20005688

08004e04 <testFillScreen>:




void testFillScreen()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8004e08:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004e0c:	f7fe fb64 	bl	80034d8 <Displ_CLS>
	Displ_CLS(GREEN);
 8004e10:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004e14:	f7fe fb60 	bl	80034d8 <Displ_CLS>
	Displ_CLS(BLUE);
 8004e18:	201f      	movs	r0, #31
 8004e1a:	f7fe fb5d 	bl	80034d8 <Displ_CLS>
	Displ_CLS(YELLOW);
 8004e1e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004e22:	f7fe fb59 	bl	80034d8 <Displ_CLS>
	Displ_CLS(BLACK);
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7fe fb56 	bl	80034d8 <Displ_CLS>
}
 8004e2c:	bf00      	nop
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <Displ_TestAll>:





void Displ_TestAll (){
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
	testFillScreen();
 8004e34:	f7ff ffe6 	bl	8004e04 <testFillScreen>
	testLines(CYAN);
 8004e38:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004e3c:	f7ff fb5c 	bl	80044f8 <testLines>
	testFastLines(RED, BLUE);
 8004e40:	211f      	movs	r1, #31
 8004e42:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004e46:	f7ff fc59 	bl	80046fc <testFastLines>
	testRects(GREEN);
 8004e4a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004e4e:	f7ff fca3 	bl	8004798 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8004e52:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8004e56:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004e5a:	f7ff fcf1 	bl	8004840 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8004e5e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8004e62:	200a      	movs	r0, #10
 8004e64:	f7ff fd5a 	bl	800491c <testFilledCircles>
	testCircles(10, WHITE);
 8004e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e6c:	200a      	movs	r0, #10
 8004e6e:	f7ff fd93 	bl	8004998 <testCircles>
	testTriangles();
 8004e72:	f7ff fdd3 	bl	8004a1c <testTriangles>
	testFilledTriangles();
 8004e76:	f7ff fe35 	bl	8004ae4 <testFilledTriangles>
	testRoundRects();
 8004e7a:	f7ff fee1 	bl	8004c40 <testRoundRects>
	testFilledRoundRects();
 8004e7e:	f7ff ff4d 	bl	8004d1c <testFilledRoundRects>
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e8c:	480d      	ldr	r0, [pc, #52]	; (8004ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e8e:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e94:	e002      	b.n	8004e9c <LoopCopyDataInit>

08004e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e9a:	3304      	adds	r3, #4

08004e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ea0:	d3f9      	bcc.n	8004e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ea4:	4c0b      	ldr	r4, [pc, #44]	; (8004ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ea8:	e001      	b.n	8004eae <LoopFillZerobss>

08004eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004eac:	3204      	adds	r2, #4

08004eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004eb0:	d3fb      	bcc.n	8004eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004eb2:	f7fd ff0d 	bl	8002cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eb6:	f004 fcf5 	bl	80098a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eba:	f7fc fe05 	bl	8001ac8 <main>
  bx  lr    
 8004ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ec8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004ecc:	0800beec 	.word	0x0800beec
  ldr r2, =_sbss
 8004ed0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004ed4:	20005fe4 	.word	0x20005fe4

08004ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ed8:	e7fe      	b.n	8004ed8 <ADC_IRQHandler>
	...

08004edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <HAL_Init+0x40>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <HAL_Init+0x40>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_Init+0x40>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_Init+0x40>)
 8004ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <HAL_Init+0x40>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <HAL_Init+0x40>)
 8004efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f04:	2003      	movs	r0, #3
 8004f06:	f000 fd53 	bl	80059b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f000 f808 	bl	8004f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f10:	f7fd fb72 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023c00 	.word	0x40023c00

08004f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_InitTick+0x54>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_InitTick+0x58>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd6b 	bl	8005a1a <HAL_SYSTICK_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e00e      	b.n	8004f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b0f      	cmp	r3, #15
 8004f52:	d80a      	bhi.n	8004f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f54:	2200      	movs	r2, #0
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f5c:	f000 fd33 	bl	80059c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f60:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <HAL_InitTick+0x5c>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000028 	.word	0x20000028
 8004f78:	20000038 	.word	0x20000038
 8004f7c:	20000034 	.word	0x20000034

08004f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_IncTick+0x20>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000038 	.word	0x20000038
 8004fa4:	20005e94 	.word	0x20005e94

08004fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return uwTick;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_GetTick+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20005e94 	.word	0x20005e94

08004fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fc8:	f7ff ffee 	bl	8004fa8 <HAL_GetTick>
 8004fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd8:	d005      	beq.n	8004fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_Delay+0x44>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fe6:	bf00      	nop
 8004fe8:	f7ff ffde 	bl	8004fa8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d8f7      	bhi.n	8004fe8 <HAL_Delay+0x28>
  {
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000038 	.word	0x20000038

08005008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e033      	b.n	8005086 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd fb0e 	bl	8002648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d118      	bne.n	8005078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800504e:	f023 0302 	bic.w	r3, r3, #2
 8005052:	f043 0202 	orr.w	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa5a 	bl	8005514 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
 8005076:	e001      	b.n	800507c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_ADC_Start_DMA+0x1e>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e0e9      	b.n	8005282 <HAL_ADC_Start_DMA+0x1f2>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d018      	beq.n	80050f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050d4:	4b6d      	ldr	r3, [pc, #436]	; (800528c <HAL_ADC_Start_DMA+0x1fc>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a6d      	ldr	r2, [pc, #436]	; (8005290 <HAL_ADC_Start_DMA+0x200>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0c9a      	lsrs	r2, r3, #18
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050e8:	e002      	b.n	80050f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f9      	bne.n	80050ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d107      	bne.n	8005116 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005114:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	f040 80a1 	bne.w	8005268 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005164:	d106      	bne.n	8005174 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f023 0206 	bic.w	r2, r3, #6
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
 8005172:	e002      	b.n	800517a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005182:	4b44      	ldr	r3, [pc, #272]	; (8005294 <HAL_ADC_Start_DMA+0x204>)
 8005184:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	4a43      	ldr	r2, [pc, #268]	; (8005298 <HAL_ADC_Start_DMA+0x208>)
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	4a42      	ldr	r2, [pc, #264]	; (800529c <HAL_ADC_Start_DMA+0x20c>)
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	4a41      	ldr	r2, [pc, #260]	; (80052a0 <HAL_ADC_Start_DMA+0x210>)
 800519c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	334c      	adds	r3, #76	; 0x4c
 80051d2:	4619      	mov	r1, r3
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f000 fcda 	bl	8005b90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d12a      	bne.n	800523e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2d      	ldr	r2, [pc, #180]	; (80052a4 <HAL_ADC_Start_DMA+0x214>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d015      	beq.n	800521e <HAL_ADC_Start_DMA+0x18e>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <HAL_ADC_Start_DMA+0x218>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d105      	bne.n	8005208 <HAL_ADC_Start_DMA+0x178>
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <HAL_ADC_Start_DMA+0x204>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a27      	ldr	r2, [pc, #156]	; (80052ac <HAL_ADC_Start_DMA+0x21c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d136      	bne.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
 8005212:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_ADC_Start_DMA+0x204>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d130      	bne.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d129      	bne.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	e020      	b.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_ADC_Start_DMA+0x214>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d11b      	bne.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d114      	bne.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005264:	609a      	str	r2, [r3, #8]
 8005266:	e00b      	b.n	8005280 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f043 0210 	orr.w	r2, r3, #16
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000028 	.word	0x20000028
 8005290:	431bde83 	.word	0x431bde83
 8005294:	40012300 	.word	0x40012300
 8005298:	0800570d 	.word	0x0800570d
 800529c:	080057c7 	.word	0x080057c7
 80052a0:	080057e3 	.word	0x080057e3
 80052a4:	40012000 	.word	0x40012000
 80052a8:	40012100 	.word	0x40012100
 80052ac:	40012200 	.word	0x40012200

080052b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x1c>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e113      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x244>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d925      	bls.n	8005328 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68d9      	ldr	r1, [r3, #12]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	3b1e      	subs	r3, #30
 80052f2:	2207      	movs	r2, #7
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43da      	mvns	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	400a      	ands	r2, r1
 8005300:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68d9      	ldr	r1, [r3, #12]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	4618      	mov	r0, r3
 8005314:	4603      	mov	r3, r0
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4403      	add	r3, r0
 800531a:	3b1e      	subs	r3, #30
 800531c:	409a      	lsls	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	e022      	b.n	800536e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6919      	ldr	r1, [r3, #16]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	2207      	movs	r2, #7
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	400a      	ands	r2, r1
 800534a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6919      	ldr	r1, [r3, #16]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	4618      	mov	r0, r3
 800535e:	4603      	mov	r3, r0
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4403      	add	r3, r0
 8005364:	409a      	lsls	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d824      	bhi.n	80053c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	3b05      	subs	r3, #5
 8005388:	221f      	movs	r2, #31
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43da      	mvns	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	400a      	ands	r2, r1
 8005396:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4618      	mov	r0, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	3b05      	subs	r3, #5
 80053b2:	fa00 f203 	lsl.w	r2, r0, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34
 80053be:	e04c      	b.n	800545a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	d824      	bhi.n	8005412 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	3b23      	subs	r3, #35	; 0x23
 80053da:	221f      	movs	r2, #31
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43da      	mvns	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	400a      	ands	r2, r1
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4618      	mov	r0, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	3b23      	subs	r3, #35	; 0x23
 8005404:	fa00 f203 	lsl.w	r2, r0, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
 8005410:	e023      	b.n	800545a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	3b41      	subs	r3, #65	; 0x41
 8005424:	221f      	movs	r2, #31
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43da      	mvns	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	400a      	ands	r2, r1
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	4618      	mov	r0, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	3b41      	subs	r3, #65	; 0x41
 800544e:	fa00 f203 	lsl.w	r2, r0, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_ADC_ConfigChannel+0x250>)
 800545c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a28      	ldr	r2, [pc, #160]	; (8005504 <HAL_ADC_ConfigChannel+0x254>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10f      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x1d8>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b12      	cmp	r3, #18
 800546e:	d10b      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_ADC_ConfigChannel+0x254>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d12b      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x23a>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_ADC_ConfigChannel+0x258>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <HAL_ADC_ConfigChannel+0x1f4>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b11      	cmp	r3, #17
 80054a2:	d122      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <HAL_ADC_ConfigChannel+0x258>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d111      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_ADC_ConfigChannel+0x25c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a11      	ldr	r2, [pc, #68]	; (8005510 <HAL_ADC_ConfigChannel+0x260>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	0c9a      	lsrs	r2, r3, #18
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054dc:	e002      	b.n	80054e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f9      	bne.n	80054de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012300 	.word	0x40012300
 8005504:	40012000 	.word	0x40012000
 8005508:	10000012 	.word	0x10000012
 800550c:	20000028 	.word	0x20000028
 8005510:	431bde83 	.word	0x431bde83

08005514 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800551c:	4b79      	ldr	r3, [pc, #484]	; (8005704 <ADC_Init+0x1f0>)
 800551e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800556c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4a58      	ldr	r2, [pc, #352]	; (8005708 <ADC_Init+0x1f4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e00f      	b.n	8005612 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005610:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0202 	bic.w	r2, r2, #2
 8005620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7e1b      	ldrb	r3, [r3, #24]
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01b      	beq.n	8005678 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800565e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	3b01      	subs	r3, #1
 800566c:	035a      	lsls	r2, r3, #13
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	e007      	b.n	8005688 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005686:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	051a      	lsls	r2, r3, #20
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ca:	025a      	lsls	r2, r3, #9
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	029a      	lsls	r2, r3, #10
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40012300 	.word	0x40012300
 8005708:	0f000001 	.word	0x0f000001

0800570c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d13c      	bne.n	80057a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d12b      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005744:	2b00      	cmp	r3, #0
 8005746:	d127      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005760:	2b00      	cmp	r3, #0
 8005762:	d119      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0220 	bic.w	r2, r2, #32
 8005772:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0201 	orr.w	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7fc fe47 	bl	800242c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800579e:	e00e      	b.n	80057be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7fc fe7d 	bl	80024ac <HAL_ADC_ErrorCallback>
}
 80057b2:	e004      	b.n	80057be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7fc fe49 	bl	800246c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7fc fe52 	bl	80024ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <__NVIC_SetPriorityGrouping+0x44>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800582c:	4013      	ands	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800583c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005842:	4a04      	ldr	r2, [pc, #16]	; (8005854 <__NVIC_SetPriorityGrouping+0x44>)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	60d3      	str	r3, [r2, #12]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	e000ed00 	.word	0xe000ed00

08005858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <__NVIC_GetPriorityGrouping+0x18>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	0a1b      	lsrs	r3, r3, #8
 8005862:	f003 0307 	and.w	r3, r3, #7
}
 8005866:	4618      	mov	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db0b      	blt.n	800589e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	4907      	ldr	r1, [pc, #28]	; (80058ac <__NVIC_EnableIRQ+0x38>)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	2001      	movs	r0, #1
 8005896:	fa00 f202 	lsl.w	r2, r0, r2
 800589a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	e000e100 	.word	0xe000e100

080058b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	6039      	str	r1, [r7, #0]
 80058ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	db0a      	blt.n	80058da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	490c      	ldr	r1, [pc, #48]	; (80058fc <__NVIC_SetPriority+0x4c>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	0112      	lsls	r2, r2, #4
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	440b      	add	r3, r1
 80058d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058d8:	e00a      	b.n	80058f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4908      	ldr	r1, [pc, #32]	; (8005900 <__NVIC_SetPriority+0x50>)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3b04      	subs	r3, #4
 80058e8:	0112      	lsls	r2, r2, #4
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	440b      	add	r3, r1
 80058ee:	761a      	strb	r2, [r3, #24]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	e000e100 	.word	0xe000e100
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	bf28      	it	cs
 8005922:	2304      	movcs	r3, #4
 8005924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3304      	adds	r3, #4
 800592a:	2b06      	cmp	r3, #6
 800592c:	d902      	bls.n	8005934 <NVIC_EncodePriority+0x30>
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3b03      	subs	r3, #3
 8005932:	e000      	b.n	8005936 <NVIC_EncodePriority+0x32>
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	401a      	ands	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800594c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	43d9      	mvns	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800595c:	4313      	orrs	r3, r2
         );
}
 800595e:	4618      	mov	r0, r3
 8005960:	3724      	adds	r7, #36	; 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3b01      	subs	r3, #1
 8005978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800597c:	d301      	bcc.n	8005982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800597e:	2301      	movs	r3, #1
 8005980:	e00f      	b.n	80059a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005982:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <SysTick_Config+0x40>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3b01      	subs	r3, #1
 8005988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800598a:	210f      	movs	r1, #15
 800598c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005990:	f7ff ff8e 	bl	80058b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <SysTick_Config+0x40>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800599a:	4b04      	ldr	r3, [pc, #16]	; (80059ac <SysTick_Config+0x40>)
 800599c:	2207      	movs	r2, #7
 800599e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	e000e010 	.word	0xe000e010

080059b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff29 	bl	8005810 <__NVIC_SetPriorityGrouping>
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	4603      	mov	r3, r0
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059d8:	f7ff ff3e 	bl	8005858 <__NVIC_GetPriorityGrouping>
 80059dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	6978      	ldr	r0, [r7, #20]
 80059e4:	f7ff ff8e 	bl	8005904 <NVIC_EncodePriority>
 80059e8:	4602      	mov	r2, r0
 80059ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ee:	4611      	mov	r1, r2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff ff5d 	bl	80058b0 <__NVIC_SetPriority>
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	4603      	mov	r3, r0
 8005a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ff31 	bl	8005874 <__NVIC_EnableIRQ>
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ffa2 	bl	800596c <SysTick_Config>
 8005a28:	4603      	mov	r3, r0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a40:	f7ff fab2 	bl	8004fa8 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e099      	b.n	8005b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a70:	e00f      	b.n	8005a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a72:	f7ff fa99 	bl	8004fa8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d908      	bls.n	8005a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e078      	b.n	8005b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e8      	bne.n	8005a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <HAL_DMA_Init+0x158>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d107      	bne.n	8005afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	4313      	orrs	r3, r2
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d117      	bne.n	8005b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00e      	beq.n	8005b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb01 	bl	8006140 <DMA_CheckFifoParam>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2240      	movs	r2, #64	; 0x40
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b52:	2301      	movs	r3, #1
 8005b54:	e016      	b.n	8005b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fab8 	bl	80060d4 <DMA_CalcBaseAndBitshift>
 8005b64:	4603      	mov	r3, r0
 8005b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6c:	223f      	movs	r2, #63	; 0x3f
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	f010803f 	.word	0xf010803f

08005b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_DMA_Start_IT+0x26>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e040      	b.n	8005c38 <HAL_DMA_Start_IT+0xa8>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d12f      	bne.n	8005c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fa4a 	bl	8006078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	223f      	movs	r2, #63	; 0x3f
 8005bea:	409a      	lsls	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0216 	orr.w	r2, r2, #22
 8005bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e005      	b.n	8005c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
 8005c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c4e:	f7ff f9ab 	bl	8004fa8 <HAL_GetTick>
 8005c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d008      	beq.n	8005c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2280      	movs	r2, #128	; 0x80
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e052      	b.n	8005d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0216 	bic.w	r2, r2, #22
 8005c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <HAL_DMA_Abort+0x62>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0208 	bic.w	r2, r2, #8
 8005cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc2:	e013      	b.n	8005cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cc4:	f7ff f970 	bl	8004fa8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d90c      	bls.n	8005cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2203      	movs	r2, #3
 8005cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e015      	b.n	8005d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e4      	bne.n	8005cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	223f      	movs	r2, #63	; 0x3f
 8005d00:	409a      	lsls	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00c      	b.n	8005d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2205      	movs	r2, #5
 8005d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d70:	4b8e      	ldr	r3, [pc, #568]	; (8005fac <HAL_DMA_IRQHandler+0x248>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a8e      	ldr	r2, [pc, #568]	; (8005fb0 <HAL_DMA_IRQHandler+0x24c>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	2208      	movs	r2, #8
 8005d90:	409a      	lsls	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01a      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d013      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0204 	bic.w	r2, r2, #4
 8005db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	f043 0201 	orr.w	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	2201      	movs	r2, #1
 8005df4:	409a      	lsls	r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	f043 0202 	orr.w	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d012      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	2204      	movs	r2, #4
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	f043 0204 	orr.w	r2, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e40:	2210      	movs	r2, #16
 8005e42:	409a      	lsls	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d043      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d03c      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5e:	2210      	movs	r2, #16
 8005e60:	409a      	lsls	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d018      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d024      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
 8005e92:	e01f      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
 8005ea4:	e016      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d107      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0208 	bic.w	r2, r2, #8
 8005ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	2220      	movs	r2, #32
 8005eda:	409a      	lsls	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 808f 	beq.w	8006004 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8087 	beq.w	8006004 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efa:	2220      	movs	r2, #32
 8005efc:	409a      	lsls	r2, r3
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d136      	bne.n	8005f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0216 	bic.w	r2, r2, #22
 8005f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <HAL_DMA_IRQHandler+0x1da>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0208 	bic.w	r2, r2, #8
 8005f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	223f      	movs	r2, #63	; 0x3f
 8005f54:	409a      	lsls	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d07e      	beq.n	8006070 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
        }
        return;
 8005f7a:	e079      	b.n	8006070 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d031      	beq.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
 8005fa8:	e02c      	b.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
 8005faa:	bf00      	nop
 8005fac:	20000028 	.word	0x20000028
 8005fb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d023      	beq.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	e01e      	b.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10f      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0210 	bic.w	r2, r2, #16
 8005fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	2b00      	cmp	r3, #0
 800600a:	d032      	beq.n	8006072 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d022      	beq.n	800605e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2205      	movs	r2, #5
 800601c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3301      	adds	r3, #1
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	429a      	cmp	r2, r3
 800603a:	d307      	bcc.n	800604c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f2      	bne.n	8006030 <HAL_DMA_IRQHandler+0x2cc>
 800604a:	e000      	b.n	800604e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800604c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
 800606e:	e000      	b.n	8006072 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006070:	bf00      	nop
    }
  }
}
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d108      	bne.n	80060b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060b6:	e007      	b.n	80060c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	60da      	str	r2, [r3, #12]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	3b10      	subs	r3, #16
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <DMA_CalcBaseAndBitshift+0x64>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060ee:	4a13      	ldr	r2, [pc, #76]	; (800613c <DMA_CalcBaseAndBitshift+0x68>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d909      	bls.n	8006116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	659a      	str	r2, [r3, #88]	; 0x58
 8006114:	e007      	b.n	8006126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	aaaaaaab 	.word	0xaaaaaaab
 800613c:	0800bea0 	.word	0x0800bea0

08006140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d11f      	bne.n	800619a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d856      	bhi.n	800620e <DMA_CheckFifoParam+0xce>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <DMA_CheckFifoParam+0x28>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	08006179 	.word	0x08006179
 800616c:	0800618b 	.word	0x0800618b
 8006170:	08006179 	.word	0x08006179
 8006174:	0800620f 	.word	0x0800620f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d046      	beq.n	8006212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006188:	e043      	b.n	8006212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006192:	d140      	bne.n	8006216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006198:	e03d      	b.n	8006216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a2:	d121      	bne.n	80061e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d837      	bhi.n	800621a <DMA_CheckFifoParam+0xda>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <DMA_CheckFifoParam+0x70>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061c1 	.word	0x080061c1
 80061b4:	080061c7 	.word	0x080061c7
 80061b8:	080061c1 	.word	0x080061c1
 80061bc:	080061d9 	.word	0x080061d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
      break;
 80061c4:	e030      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d025      	beq.n	800621e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061d6:	e022      	b.n	800621e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061e0:	d11f      	bne.n	8006222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061e6:	e01c      	b.n	8006222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d903      	bls.n	80061f6 <DMA_CheckFifoParam+0xb6>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d003      	beq.n	80061fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061f4:	e018      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
      break;
 80061fa:	e015      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e00b      	b.n	8006226 <DMA_CheckFifoParam+0xe6>
      break;
 800620e:	bf00      	nop
 8006210:	e00a      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      break;
 8006212:	bf00      	nop
 8006214:	e008      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      break;
 8006216:	bf00      	nop
 8006218:	e006      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      break;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      break;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      break;   
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <DMA_CheckFifoParam+0xe8>
      break;
 8006226:	bf00      	nop
    }
  } 
  
  return status; 
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e165      	b.n	8006520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006254:	2201      	movs	r2, #1
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4013      	ands	r3, r2
 8006266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	429a      	cmp	r2, r3
 800626e:	f040 8154 	bne.w	800651a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d005      	beq.n	800628a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006286:	2b02      	cmp	r3, #2
 8006288:	d130      	bne.n	80062ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062c0:	2201      	movs	r2, #1
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 0201 	and.w	r2, r3, #1
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d017      	beq.n	8006328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	2203      	movs	r2, #3
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d123      	bne.n	800637c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	08da      	lsrs	r2, r3, #3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3208      	adds	r2, #8
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	220f      	movs	r2, #15
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4313      	orrs	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	08da      	lsrs	r2, r3, #3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3208      	adds	r2, #8
 8006376:	69b9      	ldr	r1, [r7, #24]
 8006378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	2203      	movs	r2, #3
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 0203 	and.w	r2, r3, #3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80ae 	beq.w	800651a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	4b5d      	ldr	r3, [pc, #372]	; (8006538 <HAL_GPIO_Init+0x300>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	4a5c      	ldr	r2, [pc, #368]	; (8006538 <HAL_GPIO_Init+0x300>)
 80063c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063cc:	6453      	str	r3, [r2, #68]	; 0x44
 80063ce:	4b5a      	ldr	r3, [pc, #360]	; (8006538 <HAL_GPIO_Init+0x300>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063da:	4a58      	ldr	r2, [pc, #352]	; (800653c <HAL_GPIO_Init+0x304>)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	3302      	adds	r3, #2
 80063e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	220f      	movs	r2, #15
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43db      	mvns	r3, r3
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	4013      	ands	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a4f      	ldr	r2, [pc, #316]	; (8006540 <HAL_GPIO_Init+0x308>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d025      	beq.n	8006452 <HAL_GPIO_Init+0x21a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a4e      	ldr	r2, [pc, #312]	; (8006544 <HAL_GPIO_Init+0x30c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01f      	beq.n	800644e <HAL_GPIO_Init+0x216>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a4d      	ldr	r2, [pc, #308]	; (8006548 <HAL_GPIO_Init+0x310>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d019      	beq.n	800644a <HAL_GPIO_Init+0x212>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a4c      	ldr	r2, [pc, #304]	; (800654c <HAL_GPIO_Init+0x314>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_GPIO_Init+0x20e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a4b      	ldr	r2, [pc, #300]	; (8006550 <HAL_GPIO_Init+0x318>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00d      	beq.n	8006442 <HAL_GPIO_Init+0x20a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a4a      	ldr	r2, [pc, #296]	; (8006554 <HAL_GPIO_Init+0x31c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d007      	beq.n	800643e <HAL_GPIO_Init+0x206>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a49      	ldr	r2, [pc, #292]	; (8006558 <HAL_GPIO_Init+0x320>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <HAL_GPIO_Init+0x202>
 8006436:	2306      	movs	r3, #6
 8006438:	e00c      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 800643a:	2307      	movs	r3, #7
 800643c:	e00a      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 800643e:	2305      	movs	r3, #5
 8006440:	e008      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 8006442:	2304      	movs	r3, #4
 8006444:	e006      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 8006446:	2303      	movs	r3, #3
 8006448:	e004      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 800644a:	2302      	movs	r3, #2
 800644c:	e002      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <HAL_GPIO_Init+0x21c>
 8006452:	2300      	movs	r3, #0
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	f002 0203 	and.w	r2, r2, #3
 800645a:	0092      	lsls	r2, r2, #2
 800645c:	4093      	lsls	r3, r2
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4313      	orrs	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006464:	4935      	ldr	r1, [pc, #212]	; (800653c <HAL_GPIO_Init+0x304>)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	3302      	adds	r3, #2
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006472:	4b3a      	ldr	r3, [pc, #232]	; (800655c <HAL_GPIO_Init+0x324>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	43db      	mvns	r3, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006496:	4a31      	ldr	r2, [pc, #196]	; (800655c <HAL_GPIO_Init+0x324>)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800649c:	4b2f      	ldr	r3, [pc, #188]	; (800655c <HAL_GPIO_Init+0x324>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <HAL_GPIO_Init+0x324>)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064c6:	4b25      	ldr	r3, [pc, #148]	; (800655c <HAL_GPIO_Init+0x324>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4013      	ands	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064ea:	4a1c      	ldr	r2, [pc, #112]	; (800655c <HAL_GPIO_Init+0x324>)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <HAL_GPIO_Init+0x324>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <HAL_GPIO_Init+0x324>)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	f67f ae96 	bls.w	8006254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3724      	adds	r7, #36	; 0x24
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800
 800653c:	40013800 	.word	0x40013800
 8006540:	40020000 	.word	0x40020000
 8006544:	40020400 	.word	0x40020400
 8006548:	40020800 	.word	0x40020800
 800654c:	40020c00 	.word	0x40020c00
 8006550:	40021000 	.word	0x40021000
 8006554:	40021400 	.word	0x40021400
 8006558:	40021800 	.word	0x40021800
 800655c:	40013c00 	.word	0x40013c00

08006560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e001      	b.n	8006582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
 800659c:	4613      	mov	r3, r2
 800659e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065a0:	787b      	ldrb	r3, [r7, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065a6:	887a      	ldrh	r2, [r7, #2]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065ac:	e003      	b.n	80065b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	041a      	lsls	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	619a      	str	r2, [r3, #24]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065d4:	887a      	ldrh	r2, [r7, #2]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4013      	ands	r3, r2
 80065da:	041a      	lsls	r2, r3, #16
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	43d9      	mvns	r1, r3
 80065e0:	887b      	ldrh	r3, [r7, #2]
 80065e2:	400b      	ands	r3, r1
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	619a      	str	r2, [r3, #24]
}
 80065ea:	bf00      	nop
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800660e:	4a05      	ldr	r2, [pc, #20]	; (8006624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f806 	bl	8006628 <HAL_GPIO_EXTI_Callback>
  }
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40013c00 	.word	0x40013c00

08006628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006658:	6413      	str	r3, [r2, #64]	; 0x40
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800666c:	f7fe fc9c 	bl	8004fa8 <HAL_GetTick>
 8006670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006672:	e009      	b.n	8006688 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006674:	f7fe fc98 	bl	8004fa8 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006682:	d901      	bls.n	8006688 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e01f      	b.n	80066c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006694:	d1ee      	bne.n	8006674 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800669c:	f7fe fc84 	bl	8004fa8 <HAL_GetTick>
 80066a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066a2:	e009      	b.n	80066b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066a4:	f7fe fc80 	bl	8004fa8 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066b2:	d901      	bls.n	80066b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e007      	b.n	80066c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066b8:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c4:	d1ee      	bne.n	80066a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40023800 	.word	0x40023800
 80066d4:	420e0040 	.word	0x420e0040
 80066d8:	40007000 	.word	0x40007000
 80066dc:	420e0044 	.word	0x420e0044

080066e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0cc      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066f4:	4b68      	ldr	r3, [pc, #416]	; (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d90c      	bls.n	800671c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b65      	ldr	r3, [pc, #404]	; (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b63      	ldr	r3, [pc, #396]	; (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0b8      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d020      	beq.n	800676a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006734:	4b59      	ldr	r3, [pc, #356]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a58      	ldr	r2, [pc, #352]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800673e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800674c:	4b53      	ldr	r3, [pc, #332]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a52      	ldr	r2, [pc, #328]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006758:	4b50      	ldr	r3, [pc, #320]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	494d      	ldr	r1, [pc, #308]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d044      	beq.n	8006800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	4b47      	ldr	r3, [pc, #284]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d119      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e07f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d003      	beq.n	800679e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679a:	2b03      	cmp	r3, #3
 800679c:	d107      	bne.n	80067ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679e:	4b3f      	ldr	r3, [pc, #252]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e06f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ae:	4b3b      	ldr	r3, [pc, #236]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e067      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067be:	4b37      	ldr	r3, [pc, #220]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f023 0203 	bic.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4934      	ldr	r1, [pc, #208]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d0:	f7fe fbea 	bl	8004fa8 <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	e00a      	b.n	80067ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d8:	f7fe fbe6 	bl	8004fa8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e04f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	4b2b      	ldr	r3, [pc, #172]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 020c 	and.w	r2, r3, #12
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1eb      	bne.n	80067d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d20c      	bcs.n	8006828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b22      	ldr	r3, [pc, #136]	; (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b20      	ldr	r3, [pc, #128]	; (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e032      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4916      	ldr	r1, [pc, #88]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	490e      	ldr	r1, [pc, #56]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	4313      	orrs	r3, r2
 8006864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006866:	f000 f855 	bl	8006914 <HAL_RCC_GetSysClockFreq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	490a      	ldr	r1, [pc, #40]	; (80068a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006878:	5ccb      	ldrb	r3, [r1, r3]
 800687a:	fa22 f303 	lsr.w	r3, r2, r3
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fb4a 	bl	8004f20 <HAL_InitTick>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40023c00 	.word	0x40023c00
 800689c:	40023800 	.word	0x40023800
 80068a0:	0800be88 	.word	0x0800be88
 80068a4:	20000028 	.word	0x20000028
 80068a8:	20000034 	.word	0x20000034

080068ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b0:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b2:	681b      	ldr	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000028 	.word	0x20000028

080068c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068c8:	f7ff fff0 	bl	80068ac <HAL_RCC_GetHCLKFreq>
 80068cc:	4602      	mov	r2, r0
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	0a9b      	lsrs	r3, r3, #10
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	4903      	ldr	r1, [pc, #12]	; (80068e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068da:	5ccb      	ldrb	r3, [r1, r3]
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40023800 	.word	0x40023800
 80068e8:	0800be98 	.word	0x0800be98

080068ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068f0:	f7ff ffdc 	bl	80068ac <HAL_RCC_GetHCLKFreq>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <HAL_RCC_GetPCLK2Freq+0x20>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	0b5b      	lsrs	r3, r3, #13
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	4903      	ldr	r1, [pc, #12]	; (8006910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006902:	5ccb      	ldrb	r3, [r1, r3]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40023800 	.word	0x40023800
 8006910:	0800be98 	.word	0x0800be98

08006914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006918:	b0ae      	sub	sp, #184	; 0xb8
 800691a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800693a:	4bcb      	ldr	r3, [pc, #812]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b0c      	cmp	r3, #12
 8006944:	f200 8206 	bhi.w	8006d54 <HAL_RCC_GetSysClockFreq+0x440>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <HAL_RCC_GetSysClockFreq+0x3c>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006985 	.word	0x08006985
 8006954:	08006d55 	.word	0x08006d55
 8006958:	08006d55 	.word	0x08006d55
 800695c:	08006d55 	.word	0x08006d55
 8006960:	0800698d 	.word	0x0800698d
 8006964:	08006d55 	.word	0x08006d55
 8006968:	08006d55 	.word	0x08006d55
 800696c:	08006d55 	.word	0x08006d55
 8006970:	08006995 	.word	0x08006995
 8006974:	08006d55 	.word	0x08006d55
 8006978:	08006d55 	.word	0x08006d55
 800697c:	08006d55 	.word	0x08006d55
 8006980:	08006b85 	.word	0x08006b85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4bb9      	ldr	r3, [pc, #740]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x358>)
 8006986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800698a:	e1e7      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800698c:	4bb8      	ldr	r3, [pc, #736]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800698e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006992:	e1e3      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006994:	4bb4      	ldr	r3, [pc, #720]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069a0:	4bb1      	ldr	r3, [pc, #708]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d071      	beq.n	8006a90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ac:	4bae      	ldr	r3, [pc, #696]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	099b      	lsrs	r3, r3, #6
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80069bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069d2:	4622      	mov	r2, r4
 80069d4:	462b      	mov	r3, r5
 80069d6:	f04f 0000 	mov.w	r0, #0
 80069da:	f04f 0100 	mov.w	r1, #0
 80069de:	0159      	lsls	r1, r3, #5
 80069e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069e4:	0150      	lsls	r0, r2, #5
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4621      	mov	r1, r4
 80069ec:	1a51      	subs	r1, r2, r1
 80069ee:	6439      	str	r1, [r7, #64]	; 0x40
 80069f0:	4629      	mov	r1, r5
 80069f2:	eb63 0301 	sbc.w	r3, r3, r1
 80069f6:	647b      	str	r3, [r7, #68]	; 0x44
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006a04:	4649      	mov	r1, r9
 8006a06:	018b      	lsls	r3, r1, #6
 8006a08:	4641      	mov	r1, r8
 8006a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a0e:	4641      	mov	r1, r8
 8006a10:	018a      	lsls	r2, r1, #6
 8006a12:	4641      	mov	r1, r8
 8006a14:	1a51      	subs	r1, r2, r1
 8006a16:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a18:	4649      	mov	r1, r9
 8006a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	00cb      	lsls	r3, r1, #3
 8006a30:	4641      	mov	r1, r8
 8006a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a36:	4641      	mov	r1, r8
 8006a38:	00ca      	lsls	r2, r1, #3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4622      	mov	r2, r4
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	633b      	str	r3, [r7, #48]	; 0x30
 8006a46:	462b      	mov	r3, r5
 8006a48:	460a      	mov	r2, r1
 8006a4a:	eb42 0303 	adc.w	r3, r2, r3
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	024b      	lsls	r3, r1, #9
 8006a60:	4621      	mov	r1, r4
 8006a62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a66:	4621      	mov	r1, r4
 8006a68:	024a      	lsls	r2, r1, #9
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a80:	f7fa f8d2 	bl	8000c28 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4613      	mov	r3, r2
 8006a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a8e:	e067      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a90:	4b75      	ldr	r3, [pc, #468]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	099b      	lsrs	r3, r3, #6
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aaa:	2300      	movs	r3, #0
 8006aac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	f04f 0000 	mov.w	r0, #0
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	0159      	lsls	r1, r3, #5
 8006ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac4:	0150      	lsls	r0, r2, #5
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4621      	mov	r1, r4
 8006acc:	1a51      	subs	r1, r2, r1
 8006ace:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	018b      	lsls	r3, r1, #6
 8006ae8:	4641      	mov	r1, r8
 8006aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aee:	4641      	mov	r1, r8
 8006af0:	018a      	lsls	r2, r1, #6
 8006af2:	4641      	mov	r1, r8
 8006af4:	ebb2 0a01 	subs.w	sl, r2, r1
 8006af8:	4649      	mov	r1, r9
 8006afa:	eb63 0b01 	sbc.w	fp, r3, r1
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b12:	4692      	mov	sl, r2
 8006b14:	469b      	mov	fp, r3
 8006b16:	4623      	mov	r3, r4
 8006b18:	eb1a 0303 	adds.w	r3, sl, r3
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	462b      	mov	r3, r5
 8006b20:	eb4b 0303 	adc.w	r3, fp, r3
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b32:	4629      	mov	r1, r5
 8006b34:	028b      	lsls	r3, r1, #10
 8006b36:	4621      	mov	r1, r4
 8006b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	028a      	lsls	r2, r1, #10
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b48:	2200      	movs	r2, #0
 8006b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8006b4c:	677a      	str	r2, [r7, #116]	; 0x74
 8006b4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006b52:	f7fa f869 	bl	8000c28 <__aeabi_uldivmod>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b60:	4b41      	ldr	r3, [pc, #260]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b82:	e0eb      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b84:	4b38      	ldr	r3, [pc, #224]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b90:	4b35      	ldr	r3, [pc, #212]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d06b      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b9c:	4b32      	ldr	r3, [pc, #200]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	099b      	lsrs	r3, r3, #6
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ba6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8006bb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006bb8:	4622      	mov	r2, r4
 8006bba:	462b      	mov	r3, r5
 8006bbc:	f04f 0000 	mov.w	r0, #0
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	0159      	lsls	r1, r3, #5
 8006bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bca:	0150      	lsls	r0, r2, #5
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	1a51      	subs	r1, r2, r1
 8006bd4:	61b9      	str	r1, [r7, #24]
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006bea:	4659      	mov	r1, fp
 8006bec:	018b      	lsls	r3, r1, #6
 8006bee:	4651      	mov	r1, sl
 8006bf0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	018a      	lsls	r2, r1, #6
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ebb2 0801 	subs.w	r8, r2, r1
 8006bfe:	4659      	mov	r1, fp
 8006c00:	eb63 0901 	sbc.w	r9, r3, r1
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c18:	4690      	mov	r8, r2
 8006c1a:	4699      	mov	r9, r3
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	eb18 0303 	adds.w	r3, r8, r3
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	462b      	mov	r3, r5
 8006c26:	eb49 0303 	adc.w	r3, r9, r3
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c38:	4629      	mov	r1, r5
 8006c3a:	024b      	lsls	r3, r1, #9
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c42:	4621      	mov	r1, r4
 8006c44:	024a      	lsls	r2, r1, #9
 8006c46:	4610      	mov	r0, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c4e:	2200      	movs	r2, #0
 8006c50:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c58:	f7f9 ffe6 	bl	8000c28 <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4613      	mov	r3, r2
 8006c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c66:	e065      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x420>
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c74:	4b3d      	ldr	r3, [pc, #244]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x458>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	4611      	mov	r1, r2
 8006c80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c84:	653b      	str	r3, [r7, #80]	; 0x50
 8006c86:	2300      	movs	r3, #0
 8006c88:	657b      	str	r3, [r7, #84]	; 0x54
 8006c8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f04f 0100 	mov.w	r1, #0
 8006c9a:	0159      	lsls	r1, r3, #5
 8006c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca0:	0150      	lsls	r0, r2, #5
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	1a51      	subs	r1, r2, r1
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	4649      	mov	r1, r9
 8006cae:	eb63 0301 	sbc.w	r3, r3, r1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	018b      	lsls	r3, r1, #6
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cca:	4651      	mov	r1, sl
 8006ccc:	018a      	lsls	r2, r1, #6
 8006cce:	4651      	mov	r1, sl
 8006cd0:	1a54      	subs	r4, r2, r1
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	eb63 0501 	sbc.w	r5, r3, r1
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	00eb      	lsls	r3, r5, #3
 8006ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ce6:	00e2      	lsls	r2, r4, #3
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	4643      	mov	r3, r8
 8006cee:	18e3      	adds	r3, r4, r3
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	eb45 0303 	adc.w	r3, r5, r3
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d06:	4629      	mov	r1, r5
 8006d08:	028b      	lsls	r3, r1, #10
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d10:	4621      	mov	r1, r4
 8006d12:	028a      	lsls	r2, r1, #10
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d26:	f7f9 ff7f 	bl	8000c28 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4613      	mov	r3, r2
 8006d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x458>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	0f1b      	lsrs	r3, r3, #28
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d52:	e003      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d54:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	37b8      	adds	r7, #184	; 0xb8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	00f42400 	.word	0x00f42400

08006d74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e28d      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8083 	beq.w	8006e9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d94:	4b94      	ldr	r3, [pc, #592]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 030c 	and.w	r3, r3, #12
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d019      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006da0:	4b91      	ldr	r3, [pc, #580]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d106      	bne.n	8006dba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dac:	4b8e      	ldr	r3, [pc, #568]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db8:	d00c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dba:	4b8b      	ldr	r3, [pc, #556]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dc2:	2b0c      	cmp	r3, #12
 8006dc4:	d112      	bne.n	8006dec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dc6:	4b88      	ldr	r3, [pc, #544]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd4:	4b84      	ldr	r3, [pc, #528]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05b      	beq.n	8006e98 <HAL_RCC_OscConfig+0x124>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d157      	bne.n	8006e98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e25a      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_OscConfig+0x90>
 8006df6:	4b7c      	ldr	r3, [pc, #496]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a7b      	ldr	r2, [pc, #492]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e01d      	b.n	8006e40 <HAL_RCC_OscConfig+0xcc>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0xb4>
 8006e0e:	4b76      	ldr	r3, [pc, #472]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a75      	ldr	r2, [pc, #468]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4b73      	ldr	r3, [pc, #460]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a72      	ldr	r2, [pc, #456]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0xcc>
 8006e28:	4b6f      	ldr	r3, [pc, #444]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6e      	ldr	r2, [pc, #440]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6b      	ldr	r2, [pc, #428]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d013      	beq.n	8006e70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fe f8ae 	bl	8004fa8 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fe f8aa 	bl	8004fa8 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e21f      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e62:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0xdc>
 8006e6e:	e014      	b.n	8006e9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fe f89a 	bl	8004fa8 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e78:	f7fe f896 	bl	8004fa8 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e20b      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e8a:	4b57      	ldr	r3, [pc, #348]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x104>
 8006e96:	e000      	b.n	8006e9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d06f      	beq.n	8006f86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ea6:	4b50      	ldr	r3, [pc, #320]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d017      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eb2:	4b4d      	ldr	r3, [pc, #308]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d105      	bne.n	8006eca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ebe:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00b      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eca:	4b47      	ldr	r3, [pc, #284]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ed2:	2b0c      	cmp	r3, #12
 8006ed4:	d11c      	bne.n	8006f10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ed6:	4b44      	ldr	r3, [pc, #272]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d116      	bne.n	8006f10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ee2:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_RCC_OscConfig+0x186>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d001      	beq.n	8006efa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e1d3      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efa:	4b3b      	ldr	r3, [pc, #236]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4937      	ldr	r1, [pc, #220]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f0e:	e03a      	b.n	8006f86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d020      	beq.n	8006f5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f18:	4b34      	ldr	r3, [pc, #208]	; (8006fec <HAL_RCC_OscConfig+0x278>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1e:	f7fe f843 	bl	8004fa8 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f26:	f7fe f83f 	bl	8004fa8 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e1b4      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f38:	4b2b      	ldr	r3, [pc, #172]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0f0      	beq.n	8006f26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f44:	4b28      	ldr	r3, [pc, #160]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	4925      	ldr	r1, [pc, #148]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	600b      	str	r3, [r1, #0]
 8006f58:	e015      	b.n	8006f86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <HAL_RCC_OscConfig+0x278>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fe f822 	bl	8004fa8 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f68:	f7fe f81e 	bl	8004fa8 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e193      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d036      	beq.n	8007000 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f9a:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <HAL_RCC_OscConfig+0x27c>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa0:	f7fe f802 	bl	8004fa8 <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa8:	f7fd fffe 	bl	8004fa8 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e173      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fba:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <HAL_RCC_OscConfig+0x274>)
 8006fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x234>
 8006fc6:	e01b      	b.n	8007000 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc8:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <HAL_RCC_OscConfig+0x27c>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fce:	f7fd ffeb 	bl	8004fa8 <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fd4:	e00e      	b.n	8006ff4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fd6:	f7fd ffe7 	bl	8004fa8 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d907      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e15c      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	42470000 	.word	0x42470000
 8006ff0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ff4:	4b8a      	ldr	r3, [pc, #552]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8006ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1ea      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8097 	beq.w	800713c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007012:	4b83      	ldr	r3, [pc, #524]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10f      	bne.n	800703e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	4b7f      	ldr	r3, [pc, #508]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	4a7e      	ldr	r2, [pc, #504]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702c:	6413      	str	r3, [r2, #64]	; 0x40
 800702e:	4b7c      	ldr	r3, [pc, #496]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007036:	60bb      	str	r3, [r7, #8]
 8007038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800703e:	4b79      	ldr	r3, [pc, #484]	; (8007224 <HAL_RCC_OscConfig+0x4b0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d118      	bne.n	800707c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800704a:	4b76      	ldr	r3, [pc, #472]	; (8007224 <HAL_RCC_OscConfig+0x4b0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a75      	ldr	r2, [pc, #468]	; (8007224 <HAL_RCC_OscConfig+0x4b0>)
 8007050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007056:	f7fd ffa7 	bl	8004fa8 <HAL_GetTick>
 800705a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705c:	e008      	b.n	8007070 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705e:	f7fd ffa3 	bl	8004fa8 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e118      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007070:	4b6c      	ldr	r3, [pc, #432]	; (8007224 <HAL_RCC_OscConfig+0x4b0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0f0      	beq.n	800705e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d106      	bne.n	8007092 <HAL_RCC_OscConfig+0x31e>
 8007084:	4b66      	ldr	r3, [pc, #408]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a65      	ldr	r2, [pc, #404]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	6713      	str	r3, [r2, #112]	; 0x70
 8007090:	e01c      	b.n	80070cc <HAL_RCC_OscConfig+0x358>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b05      	cmp	r3, #5
 8007098:	d10c      	bne.n	80070b4 <HAL_RCC_OscConfig+0x340>
 800709a:	4b61      	ldr	r3, [pc, #388]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a60      	ldr	r2, [pc, #384]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070a0:	f043 0304 	orr.w	r3, r3, #4
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
 80070a6:	4b5e      	ldr	r3, [pc, #376]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	4a5d      	ldr	r2, [pc, #372]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
 80070b2:	e00b      	b.n	80070cc <HAL_RCC_OscConfig+0x358>
 80070b4:	4b5a      	ldr	r3, [pc, #360]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b8:	4a59      	ldr	r2, [pc, #356]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	6713      	str	r3, [r2, #112]	; 0x70
 80070c0:	4b57      	ldr	r3, [pc, #348]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	4a56      	ldr	r2, [pc, #344]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070c6:	f023 0304 	bic.w	r3, r3, #4
 80070ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d015      	beq.n	8007100 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070d4:	f7fd ff68 	bl	8004fa8 <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070da:	e00a      	b.n	80070f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070dc:	f7fd ff64 	bl	8004fa8 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e0d7      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f2:	4b4b      	ldr	r3, [pc, #300]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0ee      	beq.n	80070dc <HAL_RCC_OscConfig+0x368>
 80070fe:	e014      	b.n	800712a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7fd ff52 	bl	8004fa8 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007106:	e00a      	b.n	800711e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007108:	f7fd ff4e 	bl	8004fa8 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	f241 3288 	movw	r2, #5000	; 0x1388
 8007116:	4293      	cmp	r3, r2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e0c1      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711e:	4b40      	ldr	r3, [pc, #256]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1ee      	bne.n	8007108 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d105      	bne.n	800713c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	4a3a      	ldr	r2, [pc, #232]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80ad 	beq.w	80072a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007146:	4b36      	ldr	r3, [pc, #216]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 030c 	and.w	r3, r3, #12
 800714e:	2b08      	cmp	r3, #8
 8007150:	d060      	beq.n	8007214 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d145      	bne.n	80071e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715a:	4b33      	ldr	r3, [pc, #204]	; (8007228 <HAL_RCC_OscConfig+0x4b4>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fd ff22 	bl	8004fa8 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007168:	f7fd ff1e 	bl	8004fa8 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e093      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	4b29      	ldr	r3, [pc, #164]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69da      	ldr	r2, [r3, #28]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	019b      	lsls	r3, r3, #6
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	3b01      	subs	r3, #1
 80071a0:	041b      	lsls	r3, r3, #16
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	071b      	lsls	r3, r3, #28
 80071b2:	491b      	ldr	r1, [pc, #108]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071b8:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <HAL_RCC_OscConfig+0x4b4>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071be:	f7fd fef3 	bl	8004fa8 <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071c6:	f7fd feef 	bl	8004fa8 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e064      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d8:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <HAL_RCC_OscConfig+0x452>
 80071e4:	e05c      	b.n	80072a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <HAL_RCC_OscConfig+0x4b4>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7fd fedc 	bl	8004fa8 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071f4:	f7fd fed8 	bl	8004fa8 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e04d      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_RCC_OscConfig+0x4ac>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0x480>
 8007212:	e045      	b.n	80072a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d107      	bne.n	800722c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e040      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
 8007220:	40023800 	.word	0x40023800
 8007224:	40007000 	.word	0x40007000
 8007228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800722c:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <HAL_RCC_OscConfig+0x538>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d030      	beq.n	800729c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007244:	429a      	cmp	r2, r3
 8007246:	d129      	bne.n	800729c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d122      	bne.n	800729c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800725c:	4013      	ands	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007264:	4293      	cmp	r3, r2
 8007266:	d119      	bne.n	800729c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	3b01      	subs	r3, #1
 8007276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007278:	429a      	cmp	r2, r3
 800727a:	d10f      	bne.n	800729c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007288:	429a      	cmp	r2, r3
 800728a:	d107      	bne.n	800729c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800

080072b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e07b      	b.n	80073ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d108      	bne.n	80072dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072d2:	d009      	beq.n	80072e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	61da      	str	r2, [r3, #28]
 80072da:	e005      	b.n	80072e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fb fab4 	bl	8002870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	ea42 0103 	orr.w	r1, r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	f003 0104 	and.w	r1, r3, #4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	f003 0210 	and.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_SPI_Transmit+0x22>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e126      	b.n	8007632 <HAL_SPI_Transmit+0x270>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ec:	f7fd fddc 	bl	8004fa8 <HAL_GetTick>
 80073f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d002      	beq.n	8007408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007402:	2302      	movs	r3, #2
 8007404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007406:	e10b      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_SPI_Transmit+0x52>
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007418:	e102      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2203      	movs	r2, #3
 800741e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	88fa      	ldrh	r2, [r7, #6]
 8007432:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007460:	d10f      	bne.n	8007482 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d007      	beq.n	80074a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d14b      	bne.n	8007542 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_SPI_Transmit+0xf6>
 80074b2:	8afb      	ldrh	r3, [r7, #22]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d13e      	bne.n	8007536 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	881a      	ldrh	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	1c9a      	adds	r2, r3, #2
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074dc:	e02b      	b.n	8007536 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d112      	bne.n	8007512 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007510:	e011      	b.n	8007536 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007512:	f7fd fd49 	bl	8004fa8 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d803      	bhi.n	800752a <HAL_SPI_Transmit+0x168>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007528:	d102      	bne.n	8007530 <HAL_SPI_Transmit+0x16e>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007534:	e074      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1ce      	bne.n	80074de <HAL_SPI_Transmit+0x11c>
 8007540:	e04c      	b.n	80075dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_SPI_Transmit+0x18e>
 800754a:	8afb      	ldrh	r3, [r7, #22]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d140      	bne.n	80075d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007576:	e02c      	b.n	80075d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d113      	bne.n	80075ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ac:	e011      	b.n	80075d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ae:	f7fd fcfb 	bl	8004fa8 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d803      	bhi.n	80075c6 <HAL_SPI_Transmit+0x204>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c4:	d102      	bne.n	80075cc <HAL_SPI_Transmit+0x20a>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075d0:	e026      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1cd      	bne.n	8007578 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fafd 	bl	8007be0 <SPI_EndRxTxTransaction>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e000      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
  }

error:
 800761e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007630:	7ffb      	ldrb	r3, [r7, #31]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_SPI_Transmit_DMA+0x20>
 8007658:	2302      	movs	r3, #2
 800765a:	e09b      	b.n	8007794 <HAL_SPI_Transmit_DMA+0x158>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d002      	beq.n	8007676 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007670:	2302      	movs	r3, #2
 8007672:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007674:	e089      	b.n	800778a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_SPI_Transmit_DMA+0x46>
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007686:	e080      	b.n	800778a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2203      	movs	r2, #3
 800768c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ce:	d10f      	bne.n	80076f0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f4:	4a29      	ldr	r2, [pc, #164]	; (800779c <HAL_SPI_Transmit_DMA+0x160>)
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <HAL_SPI_Transmit_DMA+0x164>)
 80076fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007704:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <HAL_SPI_Transmit_DMA+0x168>)
 8007706:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770c:	2200      	movs	r2, #0
 800770e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	4619      	mov	r1, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	330c      	adds	r3, #12
 8007720:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007726:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007728:	f7fe fa32 	bl	8005b90 <HAL_DMA_Start_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f043 0210 	orr.w	r2, r3, #16
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800774a:	e01e      	b.n	800778a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d007      	beq.n	800776a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007768:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0220 	orr.w	r2, r2, #32
 8007778:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0202 	orr.w	r2, r2, #2
 8007788:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	08007a4d 	.word	0x08007a4d
 80077a0:	080079a5 	.word	0x080079a5
 80077a4:	08007a69 	.word	0x08007a69

080077a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10e      	bne.n	80077e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
    return;
 80077e6:	e0ce      	b.n	8007986 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <HAL_SPI_IRQHandler+0x5e>
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
    return;
 8007804:	e0bf      	b.n	8007986 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <HAL_SPI_IRQHandler+0x7e>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80b0 	beq.w	8007986 <HAL_SPI_IRQHandler+0x1de>
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80aa 	beq.w	8007986 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b03      	cmp	r3, #3
 8007846:	d011      	beq.n	800786c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f043 0204 	orr.w	r2, r3, #4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	e00b      	b.n	8007884 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800786c:	2300      	movs	r3, #0
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
        return;
 8007882:	e080      	b.n	8007986 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d014      	beq.n	80078b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f043 0201 	orr.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00c      	beq.n	80078dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f043 0208 	orr.w	r2, r3, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04f      	beq.n	8007984 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d104      	bne.n	8007910 <HAL_SPI_IRQHandler+0x168>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d034      	beq.n	800797a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0203 	bic.w	r2, r2, #3
 800791e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d011      	beq.n	800794c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792c:	4a17      	ldr	r2, [pc, #92]	; (800798c <HAL_SPI_IRQHandler+0x1e4>)
 800792e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe f9f3 	bl	8005d20 <HAL_DMA_Abort_IT>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007950:	2b00      	cmp	r3, #0
 8007952:	d016      	beq.n	8007982 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007958:	4a0c      	ldr	r2, [pc, #48]	; (800798c <HAL_SPI_IRQHandler+0x1e4>)
 800795a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe f9dd 	bl	8005d20 <HAL_DMA_Abort_IT>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007978:	e003      	b.n	8007982 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fb fbb8 	bl	80030f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007980:	e000      	b.n	8007984 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007982:	bf00      	nop
    return;
 8007984:	bf00      	nop
  }
}
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	08007aa9 	.word	0x08007aa9

08007990 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079b2:	f7fd faf9 	bl	8004fa8 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c6:	d03b      	beq.n	8007a40 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0220 	bic.w	r2, r2, #32
 80079d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0202 	bic.w	r2, r2, #2
 80079e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	2164      	movs	r1, #100	; 0x64
 80079ec:	6978      	ldr	r0, [r7, #20]
 80079ee:	f000 f8f7 	bl	8007be0 <SPI_EndRxTxTransaction>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fc:	f043 0220 	orr.w	r2, r3, #32
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2200      	movs	r2, #0
 8007a26:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a38:	6978      	ldr	r0, [r7, #20]
 8007a3a:	f7fb fb59 	bl	80030f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a3e:	e002      	b.n	8007a46 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007a40:	6978      	ldr	r0, [r7, #20]
 8007a42:	f7fb fb6b 	bl	800311c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7ff ff98 	bl	8007990 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0203 	bic.w	r2, r2, #3
 8007a84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8a:	f043 0210 	orr.w	r2, r3, #16
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7fb fb28 	bl	80030f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7fb fb14 	bl	80030f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ac8:	bf00      	nop
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ae0:	f7fd fa62 	bl	8004fa8 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007af0:	f7fd fa5a 	bl	8004fa8 <HAL_GetTick>
 8007af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007af6:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	015b      	lsls	r3, r3, #5
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b06:	e054      	b.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0e:	d050      	beq.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b10:	f7fd fa4a 	bl	8004fa8 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d902      	bls.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d13d      	bne.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b3e:	d111      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b48:	d004      	beq.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b52:	d107      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6c:	d10f      	bne.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e017      	b.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	2300      	movne	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d19b      	bne.n	8007b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3720      	adds	r7, #32
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000028 	.word	0x20000028

08007be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bec:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <SPI_EndRxTxTransaction+0x7c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <SPI_EndRxTxTransaction+0x80>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	0d5b      	lsrs	r3, r3, #21
 8007bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
 8007c00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c0a:	d112      	bne.n	8007c32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff ff5a 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	f043 0220 	orr.w	r2, r3, #32
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e00f      	b.n	8007c52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d0f2      	beq.n	8007c32 <SPI_EndRxTxTransaction+0x52>
 8007c4c:	e000      	b.n	8007c50 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c4e:	bf00      	nop
  }

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000028 	.word	0x20000028
 8007c60:	165e9f81 	.word	0x165e9f81

08007c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e041      	b.n	8007cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fa fe92 	bl	80029b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f000 faa0 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d001      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e04e      	b.n	8007dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0201 	orr.w	r2, r2, #1
 8007d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a23      	ldr	r2, [pc, #140]	; (8007dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d022      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d46:	d01d      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a1f      	ldr	r2, [pc, #124]	; (8007dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d018      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1b      	ldr	r2, [pc, #108]	; (8007dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d111      	bne.n	8007da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 0307 	and.w	r3, r3, #7
 8007d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b06      	cmp	r3, #6
 8007d94:	d010      	beq.n	8007db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0201 	orr.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da6:	e007      	b.n	8007db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40000800 	.word	0x40000800
 8007dd4:	40000c00 	.word	0x40000c00
 8007dd8:	40010400 	.word	0x40010400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40001800 	.word	0x40001800

08007de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d122      	bne.n	8007e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d11b      	bne.n	8007e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0202 	mvn.w	r2, #2
 8007e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9bf 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007e2c:	e005      	b.n	8007e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f9b1 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f9c2 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d122      	bne.n	8007e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d11b      	bne.n	8007e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f06f 0204 	mvn.w	r2, #4
 8007e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f995 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007e80:	e005      	b.n	8007e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f987 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f998 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d122      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d11b      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f06f 0208 	mvn.w	r2, #8
 8007eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f96b 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007ed4:	e005      	b.n	8007ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f95d 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f96e 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d122      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f003 0310 	and.w	r3, r3, #16
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d11b      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0210 	mvn.w	r2, #16
 8007f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2208      	movs	r2, #8
 8007f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f941 	bl	80081aa <HAL_TIM_IC_CaptureCallback>
 8007f28:	e005      	b.n	8007f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f933 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f944 	bl	80081be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10e      	bne.n	8007f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d107      	bne.n	8007f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f06f 0201 	mvn.w	r2, #1
 8007f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f90d 	bl	8008182 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d10e      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b80      	cmp	r3, #128	; 0x80
 8007f82:	d107      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 faea 	bl	8008568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d10e      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d107      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f909 	bl	80081d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d10e      	bne.n	8007fec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d107      	bne.n	8007fec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0220 	mvn.w	r2, #32
 8007fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fab4 	bl	8008554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_TIM_ConfigClockSource+0x1c>
 800800c:	2302      	movs	r3, #2
 800800e:	e0b4      	b.n	800817a <HAL_TIM_ConfigClockSource+0x186>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800802e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008048:	d03e      	beq.n	80080c8 <HAL_TIM_ConfigClockSource+0xd4>
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804e:	f200 8087 	bhi.w	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008056:	f000 8086 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x172>
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d87f      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008060:	2b70      	cmp	r3, #112	; 0x70
 8008062:	d01a      	beq.n	800809a <HAL_TIM_ConfigClockSource+0xa6>
 8008064:	2b70      	cmp	r3, #112	; 0x70
 8008066:	d87b      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008068:	2b60      	cmp	r3, #96	; 0x60
 800806a:	d050      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x11a>
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d877      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008070:	2b50      	cmp	r3, #80	; 0x50
 8008072:	d03c      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0xfa>
 8008074:	2b50      	cmp	r3, #80	; 0x50
 8008076:	d873      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d058      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x13a>
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	d86f      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008080:	2b30      	cmp	r3, #48	; 0x30
 8008082:	d064      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008084:	2b30      	cmp	r3, #48	; 0x30
 8008086:	d86b      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b20      	cmp	r3, #32
 800808a:	d060      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 800808c:	2b20      	cmp	r3, #32
 800808e:	d867      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05c      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008094:	2b10      	cmp	r3, #16
 8008096:	d05a      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008098:	e062      	b.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6899      	ldr	r1, [r3, #8]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f000 f9b7 	bl	800841c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	609a      	str	r2, [r3, #8]
      break;
 80080c6:	e04f      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6899      	ldr	r1, [r3, #8]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f000 f9a0 	bl	800841c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ea:	609a      	str	r2, [r3, #8]
      break;
 80080ec:	e03c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 f914 	bl	8008328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2150      	movs	r1, #80	; 0x50
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f96d 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 800810c:	e02c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6859      	ldr	r1, [r3, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	f000 f933 	bl	8008386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2160      	movs	r1, #96	; 0x60
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f95d 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 800812c:	e01c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	6859      	ldr	r1, [r3, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	461a      	mov	r2, r3
 800813c:	f000 f8f4 	bl	8008328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f94d 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 800814c:	e00c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f000 f944 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 800815e:	e003      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
      break;
 8008164:	e000      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a40      	ldr	r2, [pc, #256]	; (80082fc <TIM_Base_SetConfig+0x114>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d00f      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a3d      	ldr	r2, [pc, #244]	; (8008300 <TIM_Base_SetConfig+0x118>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a3c      	ldr	r2, [pc, #240]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a3b      	ldr	r2, [pc, #236]	; (8008308 <TIM_Base_SetConfig+0x120>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a3a      	ldr	r2, [pc, #232]	; (800830c <TIM_Base_SetConfig+0x124>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d108      	bne.n	800823a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2f      	ldr	r2, [pc, #188]	; (80082fc <TIM_Base_SetConfig+0x114>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d02b      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008248:	d027      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2c      	ldr	r2, [pc, #176]	; (8008300 <TIM_Base_SetConfig+0x118>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d023      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2b      	ldr	r2, [pc, #172]	; (8008304 <TIM_Base_SetConfig+0x11c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01f      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2a      	ldr	r2, [pc, #168]	; (8008308 <TIM_Base_SetConfig+0x120>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01b      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a29      	ldr	r2, [pc, #164]	; (800830c <TIM_Base_SetConfig+0x124>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d017      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a28      	ldr	r2, [pc, #160]	; (8008310 <TIM_Base_SetConfig+0x128>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d013      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a27      	ldr	r2, [pc, #156]	; (8008314 <TIM_Base_SetConfig+0x12c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00f      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a26      	ldr	r2, [pc, #152]	; (8008318 <TIM_Base_SetConfig+0x130>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00b      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a25      	ldr	r2, [pc, #148]	; (800831c <TIM_Base_SetConfig+0x134>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d007      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a24      	ldr	r2, [pc, #144]	; (8008320 <TIM_Base_SetConfig+0x138>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <TIM_Base_SetConfig+0x13c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d108      	bne.n	80082ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <TIM_Base_SetConfig+0x114>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_Base_SetConfig+0xf8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a0c      	ldr	r2, [pc, #48]	; (800830c <TIM_Base_SetConfig+0x124>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d103      	bne.n	80082e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	691a      	ldr	r2, [r3, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	615a      	str	r2, [r3, #20]
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40010000 	.word	0x40010000
 8008300:	40000400 	.word	0x40000400
 8008304:	40000800 	.word	0x40000800
 8008308:	40000c00 	.word	0x40000c00
 800830c:	40010400 	.word	0x40010400
 8008310:	40014000 	.word	0x40014000
 8008314:	40014400 	.word	0x40014400
 8008318:	40014800 	.word	0x40014800
 800831c:	40001800 	.word	0x40001800
 8008320:	40001c00 	.word	0x40001c00
 8008324:	40002000 	.word	0x40002000

08008328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	f023 0201 	bic.w	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	4313      	orrs	r3, r2
 800835c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f023 030a 	bic.w	r3, r3, #10
 8008364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	621a      	str	r2, [r3, #32]
}
 800837a:	bf00      	nop
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0210 	bic.w	r2, r3, #16
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	031b      	lsls	r3, r3, #12
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	011b      	lsls	r3, r3, #4
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	621a      	str	r2, [r3, #32]
}
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	f043 0307 	orr.w	r3, r3, #7
 8008408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	609a      	str	r2, [r3, #8]
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	021a      	lsls	r2, r3, #8
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	431a      	orrs	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4313      	orrs	r3, r2
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	609a      	str	r2, [r3, #8]
}
 8008450:	bf00      	nop
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008470:	2302      	movs	r3, #2
 8008472:	e05a      	b.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a21      	ldr	r2, [pc, #132]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d022      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c0:	d01d      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1d      	ldr	r2, [pc, #116]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d018      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1b      	ldr	r2, [pc, #108]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1a      	ldr	r2, [pc, #104]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a18      	ldr	r2, [pc, #96]	; (8008548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d009      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a17      	ldr	r2, [pc, #92]	; (800854c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d004      	beq.n	80084fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a15      	ldr	r2, [pc, #84]	; (8008550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10c      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4313      	orrs	r3, r2
 800850e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40010000 	.word	0x40010000
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40010400 	.word	0x40010400
 800854c:	40014000 	.word	0x40014000
 8008550:	40001800 	.word	0x40001800

08008554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e03f      	b.n	800860e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fa fa2c 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fddf 	bl	8009184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b08a      	sub	sp, #40	; 0x28
 800861a:	af02      	add	r7, sp, #8
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	603b      	str	r3, [r7, #0]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b20      	cmp	r3, #32
 8008634:	d17c      	bne.n	8008730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_UART_Transmit+0x2c>
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e075      	b.n	8008732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_UART_Transmit+0x3e>
 8008650:	2302      	movs	r3, #2
 8008652:	e06e      	b.n	8008732 <HAL_UART_Transmit+0x11c>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2221      	movs	r2, #33	; 0x21
 8008666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800866a:	f7fc fc9d 	bl	8004fa8 <HAL_GetTick>
 800866e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	88fa      	ldrh	r2, [r7, #6]
 8008674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	88fa      	ldrh	r2, [r7, #6]
 800867a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008684:	d108      	bne.n	8008698 <HAL_UART_Transmit+0x82>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d104      	bne.n	8008698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	e003      	b.n	80086a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80086a8:	e02a      	b.n	8008700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2200      	movs	r2, #0
 80086b2:	2180      	movs	r1, #128	; 0x80
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 fb1f 	bl	8008cf8 <UART_WaitOnFlagUntilTimeout>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e036      	b.n	8008732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10b      	bne.n	80086e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	3302      	adds	r3, #2
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	e007      	b.n	80086f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	781a      	ldrb	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1cf      	bne.n	80086aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2200      	movs	r2, #0
 8008712:	2140      	movs	r1, #64	; 0x40
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 faef 	bl	8008cf8 <UART_WaitOnFlagUntilTimeout>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e006      	b.n	8008732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	e000      	b.n	8008732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
  }
}
 8008732:	4618      	mov	r0, r3
 8008734:	3720      	adds	r7, #32
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	4613      	mov	r3, r2
 8008746:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b20      	cmp	r3, #32
 8008752:	d11d      	bne.n	8008790 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <HAL_UART_Receive_IT+0x26>
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e016      	b.n	8008792 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_UART_Receive_IT+0x38>
 800876e:	2302      	movs	r3, #2
 8008770:	e00f      	b.n	8008792 <HAL_UART_Receive_IT+0x58>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	461a      	mov	r2, r3
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fb24 	bl	8008dd4 <UART_Start_Receive_IT>
 800878c:	4603      	mov	r3, r0
 800878e:	e000      	b.n	8008792 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008790:	2302      	movs	r3, #2
  }
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b0ba      	sub	sp, #232	; 0xe8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10f      	bne.n	8008802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <HAL_UART_IRQHandler+0x66>
 80087ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fc07 	bl	800900e <UART_Receive_IT>
      return;
 8008800:	e256      	b.n	8008cb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80de 	beq.w	80089c8 <HAL_UART_IRQHandler+0x22c>
 800880c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800881c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 80d1 	beq.w	80089c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <HAL_UART_IRQHandler+0xae>
 8008832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f043 0201 	orr.w	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <HAL_UART_IRQHandler+0xd2>
 8008856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f043 0202 	orr.w	r2, r3, #2
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <HAL_UART_IRQHandler+0xf6>
 800887a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	f043 0204 	orr.w	r2, r3, #4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d011      	beq.n	80088c2 <HAL_UART_IRQHandler+0x126>
 800889e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d105      	bne.n	80088b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	f043 0208 	orr.w	r2, r3, #8
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 81ed 	beq.w	8008ca6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d008      	beq.n	80088ea <HAL_UART_IRQHandler+0x14e>
 80088d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fb92 	bl	800900e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	bf0c      	ite	eq
 80088f8:	2301      	moveq	r3, #1
 80088fa:	2300      	movne	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d103      	bne.n	8008916 <HAL_UART_IRQHandler+0x17a>
 800890e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d04f      	beq.n	80089b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa9a 	bl	8008e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d141      	bne.n	80089ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3314      	adds	r3, #20
 8008930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008956:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800895a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800896e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1d9      	bne.n	800892a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	2b00      	cmp	r3, #0
 800897c:	d013      	beq.n	80089a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	4a7d      	ldr	r2, [pc, #500]	; (8008b78 <HAL_UART_IRQHandler+0x3dc>)
 8008984:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	4618      	mov	r0, r3
 800898c:	f7fd f9c8 	bl	8005d20 <HAL_DMA_Abort_IT>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d016      	beq.n	80089c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a4:	e00e      	b.n	80089c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f990 	bl	8008ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ac:	e00a      	b.n	80089c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f98c 	bl	8008ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b4:	e006      	b.n	80089c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f988 	bl	8008ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089c2:	e170      	b.n	8008ca6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c4:	bf00      	nop
    return;
 80089c6:	e16e      	b.n	8008ca6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	f040 814a 	bne.w	8008c66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 8143 	beq.w	8008c66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 813c 	beq.w	8008c66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ee:	2300      	movs	r3, #0
 80089f0:	60bb      	str	r3, [r7, #8]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60bb      	str	r3, [r7, #8]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	60bb      	str	r3, [r7, #8]
 8008a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0e:	2b40      	cmp	r3, #64	; 0x40
 8008a10:	f040 80b4 	bne.w	8008b7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8140 	beq.w	8008caa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a32:	429a      	cmp	r2, r3
 8008a34:	f080 8139 	bcs.w	8008caa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a4a:	f000 8088 	beq.w	8008b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	330c      	adds	r3, #12
 8008a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	330c      	adds	r3, #12
 8008a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1d9      	bne.n	8008a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3314      	adds	r3, #20
 8008aa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3314      	adds	r3, #20
 8008aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008abe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e1      	bne.n	8008a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3314      	adds	r3, #20
 8008adc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3314      	adds	r3, #20
 8008af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008afa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008afc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e3      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	330c      	adds	r3, #12
 8008b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2e:	f023 0310 	bic.w	r3, r3, #16
 8008b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b40:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e3      	bne.n	8008b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fd f871 	bl	8005c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f8b6 	bl	8008ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b74:	e099      	b.n	8008caa <HAL_UART_IRQHandler+0x50e>
 8008b76:	bf00      	nop
 8008b78:	08008f17 	.word	0x08008f17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 808b 	beq.w	8008cae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8086 	beq.w	8008cae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	330c      	adds	r3, #12
 8008ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8008bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e3      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3314      	adds	r3, #20
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3314      	adds	r3, #20
 8008bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e3      	bne.n	8008bda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	330c      	adds	r3, #12
 8008c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	e853 3f00 	ldrex	r3, [r3]
 8008c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0310 	bic.w	r3, r3, #16
 8008c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	330c      	adds	r3, #12
 8008c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c44:	61fa      	str	r2, [r7, #28]
 8008c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	69b9      	ldr	r1, [r7, #24]
 8008c4a:	69fa      	ldr	r2, [r7, #28]
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	617b      	str	r3, [r7, #20]
   return(result);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e3      	bne.n	8008c20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f83e 	bl	8008ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c64:	e023      	b.n	8008cae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d009      	beq.n	8008c86 <HAL_UART_IRQHandler+0x4ea>
 8008c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f95d 	bl	8008f3e <UART_Transmit_IT>
    return;
 8008c84:	e014      	b.n	8008cb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00e      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x514>
 8008c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d008      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f99d 	bl	8008fde <UART_EndTransmit_IT>
    return;
 8008ca4:	e004      	b.n	8008cb0 <HAL_UART_IRQHandler+0x514>
    return;
 8008ca6:	bf00      	nop
 8008ca8:	e002      	b.n	8008cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8008cae:	bf00      	nop
  }
}
 8008cb0:	37e8      	adds	r7, #232	; 0xe8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop

08008cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b090      	sub	sp, #64	; 0x40
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	4613      	mov	r3, r2
 8008d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d08:	e050      	b.n	8008dac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d10:	d04c      	beq.n	8008dac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d007      	beq.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d18:	f7fc f946 	bl	8004fa8 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d241      	bcs.n	8008dac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d48:	637a      	str	r2, [r7, #52]	; 0x34
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e5      	bne.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f023 0301 	bic.w	r3, r3, #1
 8008d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3314      	adds	r3, #20
 8008d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d7c:	623a      	str	r2, [r7, #32]
 8008d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e5      	bne.n	8008d5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e00f      	b.n	8008dcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4013      	ands	r3, r2
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	bf0c      	ite	eq
 8008dbc:	2301      	moveq	r3, #1
 8008dbe:	2300      	movne	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d09f      	beq.n	8008d0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3740      	adds	r7, #64	; 0x40
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2222      	movs	r2, #34	; 0x22
 8008dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	695a      	ldr	r2, [r3, #20]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0201 	orr.w	r2, r2, #1
 8008e30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0220 	orr.w	r2, r2, #32
 8008e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b095      	sub	sp, #84	; 0x54
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	330c      	adds	r3, #12
 8008e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e78:	643a      	str	r2, [r7, #64]	; 0x40
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e5      	bne.n	8008e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3314      	adds	r3, #20
 8008e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f023 0301 	bic.w	r3, r3, #1
 8008ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e5      	bne.n	8008e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d119      	bne.n	8008efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	330c      	adds	r3, #12
 8008ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f023 0310 	bic.w	r3, r3, #16
 8008ede:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee8:	61ba      	str	r2, [r7, #24]
 8008eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6979      	ldr	r1, [r7, #20]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e5      	bne.n	8008ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f0a:	bf00      	nop
 8008f0c:	3754      	adds	r7, #84	; 0x54
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff fecb 	bl	8008ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f36:	bf00      	nop
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b21      	cmp	r3, #33	; 0x21
 8008f50:	d13e      	bne.n	8008fd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f5a:	d114      	bne.n	8008f86 <UART_Transmit_IT+0x48>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d110      	bne.n	8008f86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	1c9a      	adds	r2, r3, #2
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	621a      	str	r2, [r3, #32]
 8008f84:	e008      	b.n	8008f98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6211      	str	r1, [r2, #32]
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10f      	bne.n	8008fcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e000      	b.n	8008fd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
  }
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fe5a 	bl	8008cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b08c      	sub	sp, #48	; 0x30
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b22      	cmp	r3, #34	; 0x22
 8009020:	f040 80ab 	bne.w	800917a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800902c:	d117      	bne.n	800905e <UART_Receive_IT+0x50>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d113      	bne.n	800905e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904c:	b29a      	uxth	r2, r3
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	1c9a      	adds	r2, r3, #2
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	629a      	str	r2, [r3, #40]	; 0x28
 800905c:	e026      	b.n	80090ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009064:	2300      	movs	r3, #0
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009070:	d007      	beq.n	8009082 <UART_Receive_IT+0x74>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <UART_Receive_IT+0x82>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	b2da      	uxtb	r2, r3
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e008      	b.n	80090a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909c:	b2da      	uxtb	r2, r3
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	3b01      	subs	r3, #1
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4619      	mov	r1, r3
 80090ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d15a      	bne.n	8009176 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0220 	bic.w	r2, r2, #32
 80090ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0201 	bic.w	r2, r2, #1
 80090ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d135      	bne.n	800916c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	330c      	adds	r3, #12
 800910c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	613b      	str	r3, [r7, #16]
   return(result);
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f023 0310 	bic.w	r3, r3, #16
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	330c      	adds	r3, #12
 8009124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009126:	623a      	str	r2, [r7, #32]
 8009128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	69f9      	ldr	r1, [r7, #28]
 800912c:	6a3a      	ldr	r2, [r7, #32]
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	61bb      	str	r3, [r7, #24]
   return(result);
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e5      	bne.n	8009106 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b10      	cmp	r3, #16
 8009146:	d10a      	bne.n	800915e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fdbb 	bl	8008ce0 <HAL_UARTEx_RxEventCallback>
 800916a:	e002      	b.n	8009172 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f9 f9f3 	bl	8002558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	e002      	b.n	800917c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	e000      	b.n	800917c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800917a:	2302      	movs	r3, #2
  }
}
 800917c:	4618      	mov	r0, r3
 800917e:	3730      	adds	r7, #48	; 0x30
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009188:	b0c0      	sub	sp, #256	; 0x100
 800918a:	af00      	add	r7, sp, #0
 800918c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a0:	68d9      	ldr	r1, [r3, #12]
 80091a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	ea40 0301 	orr.w	r3, r0, r1
 80091ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091dc:	f021 010c 	bic.w	r1, r1, #12
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091ea:	430b      	orrs	r3, r1
 80091ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fe:	6999      	ldr	r1, [r3, #24]
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	ea40 0301 	orr.w	r3, r0, r1
 800920a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4b8f      	ldr	r3, [pc, #572]	; (8009450 <UART_SetConfig+0x2cc>)
 8009214:	429a      	cmp	r2, r3
 8009216:	d005      	beq.n	8009224 <UART_SetConfig+0xa0>
 8009218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	4b8d      	ldr	r3, [pc, #564]	; (8009454 <UART_SetConfig+0x2d0>)
 8009220:	429a      	cmp	r2, r3
 8009222:	d104      	bne.n	800922e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009224:	f7fd fb62 	bl	80068ec <HAL_RCC_GetPCLK2Freq>
 8009228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800922c:	e003      	b.n	8009236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800922e:	f7fd fb49 	bl	80068c4 <HAL_RCC_GetPCLK1Freq>
 8009232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009240:	f040 810c 	bne.w	800945c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009248:	2200      	movs	r2, #0
 800924a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800924e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009256:	4622      	mov	r2, r4
 8009258:	462b      	mov	r3, r5
 800925a:	1891      	adds	r1, r2, r2
 800925c:	65b9      	str	r1, [r7, #88]	; 0x58
 800925e:	415b      	adcs	r3, r3
 8009260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009266:	4621      	mov	r1, r4
 8009268:	eb12 0801 	adds.w	r8, r2, r1
 800926c:	4629      	mov	r1, r5
 800926e:	eb43 0901 	adc.w	r9, r3, r1
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 0300 	mov.w	r3, #0
 800927a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800927e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009286:	4690      	mov	r8, r2
 8009288:	4699      	mov	r9, r3
 800928a:	4623      	mov	r3, r4
 800928c:	eb18 0303 	adds.w	r3, r8, r3
 8009290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009294:	462b      	mov	r3, r5
 8009296:	eb49 0303 	adc.w	r3, r9, r3
 800929a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800929e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092b2:	460b      	mov	r3, r1
 80092b4:	18db      	adds	r3, r3, r3
 80092b6:	653b      	str	r3, [r7, #80]	; 0x50
 80092b8:	4613      	mov	r3, r2
 80092ba:	eb42 0303 	adc.w	r3, r2, r3
 80092be:	657b      	str	r3, [r7, #84]	; 0x54
 80092c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092c8:	f7f7 fcae 	bl	8000c28 <__aeabi_uldivmod>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4b61      	ldr	r3, [pc, #388]	; (8009458 <UART_SetConfig+0x2d4>)
 80092d2:	fba3 2302 	umull	r2, r3, r3, r2
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	011c      	lsls	r4, r3, #4
 80092da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	1891      	adds	r1, r2, r2
 80092f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80092f4:	415b      	adcs	r3, r3
 80092f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092fc:	4641      	mov	r1, r8
 80092fe:	eb12 0a01 	adds.w	sl, r2, r1
 8009302:	4649      	mov	r1, r9
 8009304:	eb43 0b01 	adc.w	fp, r3, r1
 8009308:	f04f 0200 	mov.w	r2, #0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800931c:	4692      	mov	sl, r2
 800931e:	469b      	mov	fp, r3
 8009320:	4643      	mov	r3, r8
 8009322:	eb1a 0303 	adds.w	r3, sl, r3
 8009326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800932a:	464b      	mov	r3, r9
 800932c:	eb4b 0303 	adc.w	r3, fp, r3
 8009330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009348:	460b      	mov	r3, r1
 800934a:	18db      	adds	r3, r3, r3
 800934c:	643b      	str	r3, [r7, #64]	; 0x40
 800934e:	4613      	mov	r3, r2
 8009350:	eb42 0303 	adc.w	r3, r2, r3
 8009354:	647b      	str	r3, [r7, #68]	; 0x44
 8009356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800935a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800935e:	f7f7 fc63 	bl	8000c28 <__aeabi_uldivmod>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4611      	mov	r1, r2
 8009368:	4b3b      	ldr	r3, [pc, #236]	; (8009458 <UART_SetConfig+0x2d4>)
 800936a:	fba3 2301 	umull	r2, r3, r3, r1
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	2264      	movs	r2, #100	; 0x64
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	1acb      	subs	r3, r1, r3
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800937e:	4b36      	ldr	r3, [pc, #216]	; (8009458 <UART_SetConfig+0x2d4>)
 8009380:	fba3 2302 	umull	r2, r3, r3, r2
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800938c:	441c      	add	r4, r3
 800938e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009392:	2200      	movs	r2, #0
 8009394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800939c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	1891      	adds	r1, r2, r2
 80093a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80093a8:	415b      	adcs	r3, r3
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093b0:	4641      	mov	r1, r8
 80093b2:	1851      	adds	r1, r2, r1
 80093b4:	6339      	str	r1, [r7, #48]	; 0x30
 80093b6:	4649      	mov	r1, r9
 80093b8:	414b      	adcs	r3, r1
 80093ba:	637b      	str	r3, [r7, #52]	; 0x34
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093c8:	4659      	mov	r1, fp
 80093ca:	00cb      	lsls	r3, r1, #3
 80093cc:	4651      	mov	r1, sl
 80093ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d2:	4651      	mov	r1, sl
 80093d4:	00ca      	lsls	r2, r1, #3
 80093d6:	4610      	mov	r0, r2
 80093d8:	4619      	mov	r1, r3
 80093da:	4603      	mov	r3, r0
 80093dc:	4642      	mov	r2, r8
 80093de:	189b      	adds	r3, r3, r2
 80093e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093e4:	464b      	mov	r3, r9
 80093e6:	460a      	mov	r2, r1
 80093e8:	eb42 0303 	adc.w	r3, r2, r3
 80093ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009404:	460b      	mov	r3, r1
 8009406:	18db      	adds	r3, r3, r3
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
 800940a:	4613      	mov	r3, r2
 800940c:	eb42 0303 	adc.w	r3, r2, r3
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800941a:	f7f7 fc05 	bl	8000c28 <__aeabi_uldivmod>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <UART_SetConfig+0x2d4>)
 8009424:	fba3 1302 	umull	r1, r3, r3, r2
 8009428:	095b      	lsrs	r3, r3, #5
 800942a:	2164      	movs	r1, #100	; 0x64
 800942c:	fb01 f303 	mul.w	r3, r1, r3
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	3332      	adds	r3, #50	; 0x32
 8009436:	4a08      	ldr	r2, [pc, #32]	; (8009458 <UART_SetConfig+0x2d4>)
 8009438:	fba2 2303 	umull	r2, r3, r2, r3
 800943c:	095b      	lsrs	r3, r3, #5
 800943e:	f003 0207 	and.w	r2, r3, #7
 8009442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4422      	add	r2, r4
 800944a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800944c:	e106      	b.n	800965c <UART_SetConfig+0x4d8>
 800944e:	bf00      	nop
 8009450:	40011000 	.word	0x40011000
 8009454:	40011400 	.word	0x40011400
 8009458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800945c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009460:	2200      	movs	r2, #0
 8009462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800946a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800946e:	4642      	mov	r2, r8
 8009470:	464b      	mov	r3, r9
 8009472:	1891      	adds	r1, r2, r2
 8009474:	6239      	str	r1, [r7, #32]
 8009476:	415b      	adcs	r3, r3
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
 800947a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800947e:	4641      	mov	r1, r8
 8009480:	1854      	adds	r4, r2, r1
 8009482:	4649      	mov	r1, r9
 8009484:	eb43 0501 	adc.w	r5, r3, r1
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	00eb      	lsls	r3, r5, #3
 8009492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009496:	00e2      	lsls	r2, r4, #3
 8009498:	4614      	mov	r4, r2
 800949a:	461d      	mov	r5, r3
 800949c:	4643      	mov	r3, r8
 800949e:	18e3      	adds	r3, r4, r3
 80094a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094a4:	464b      	mov	r3, r9
 80094a6:	eb45 0303 	adc.w	r3, r5, r3
 80094aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094ca:	4629      	mov	r1, r5
 80094cc:	008b      	lsls	r3, r1, #2
 80094ce:	4621      	mov	r1, r4
 80094d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094d4:	4621      	mov	r1, r4
 80094d6:	008a      	lsls	r2, r1, #2
 80094d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094dc:	f7f7 fba4 	bl	8000c28 <__aeabi_uldivmod>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4b60      	ldr	r3, [pc, #384]	; (8009668 <UART_SetConfig+0x4e4>)
 80094e6:	fba3 2302 	umull	r2, r3, r3, r2
 80094ea:	095b      	lsrs	r3, r3, #5
 80094ec:	011c      	lsls	r4, r3, #4
 80094ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009500:	4642      	mov	r2, r8
 8009502:	464b      	mov	r3, r9
 8009504:	1891      	adds	r1, r2, r2
 8009506:	61b9      	str	r1, [r7, #24]
 8009508:	415b      	adcs	r3, r3
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009510:	4641      	mov	r1, r8
 8009512:	1851      	adds	r1, r2, r1
 8009514:	6139      	str	r1, [r7, #16]
 8009516:	4649      	mov	r1, r9
 8009518:	414b      	adcs	r3, r1
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	f04f 0300 	mov.w	r3, #0
 8009524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009528:	4659      	mov	r1, fp
 800952a:	00cb      	lsls	r3, r1, #3
 800952c:	4651      	mov	r1, sl
 800952e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009532:	4651      	mov	r1, sl
 8009534:	00ca      	lsls	r2, r1, #3
 8009536:	4610      	mov	r0, r2
 8009538:	4619      	mov	r1, r3
 800953a:	4603      	mov	r3, r0
 800953c:	4642      	mov	r2, r8
 800953e:	189b      	adds	r3, r3, r2
 8009540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009544:	464b      	mov	r3, r9
 8009546:	460a      	mov	r2, r1
 8009548:	eb42 0303 	adc.w	r3, r2, r3
 800954c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	67bb      	str	r3, [r7, #120]	; 0x78
 800955a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800955c:	f04f 0200 	mov.w	r2, #0
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009568:	4649      	mov	r1, r9
 800956a:	008b      	lsls	r3, r1, #2
 800956c:	4641      	mov	r1, r8
 800956e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009572:	4641      	mov	r1, r8
 8009574:	008a      	lsls	r2, r1, #2
 8009576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800957a:	f7f7 fb55 	bl	8000c28 <__aeabi_uldivmod>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4611      	mov	r1, r2
 8009584:	4b38      	ldr	r3, [pc, #224]	; (8009668 <UART_SetConfig+0x4e4>)
 8009586:	fba3 2301 	umull	r2, r3, r3, r1
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	2264      	movs	r2, #100	; 0x64
 800958e:	fb02 f303 	mul.w	r3, r2, r3
 8009592:	1acb      	subs	r3, r1, r3
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	3332      	adds	r3, #50	; 0x32
 8009598:	4a33      	ldr	r2, [pc, #204]	; (8009668 <UART_SetConfig+0x4e4>)
 800959a:	fba2 2303 	umull	r2, r3, r2, r3
 800959e:	095b      	lsrs	r3, r3, #5
 80095a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095a4:	441c      	add	r4, r3
 80095a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095aa:	2200      	movs	r2, #0
 80095ac:	673b      	str	r3, [r7, #112]	; 0x70
 80095ae:	677a      	str	r2, [r7, #116]	; 0x74
 80095b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095b4:	4642      	mov	r2, r8
 80095b6:	464b      	mov	r3, r9
 80095b8:	1891      	adds	r1, r2, r2
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	415b      	adcs	r3, r3
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095c4:	4641      	mov	r1, r8
 80095c6:	1851      	adds	r1, r2, r1
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	4649      	mov	r1, r9
 80095cc:	414b      	adcs	r3, r1
 80095ce:	607b      	str	r3, [r7, #4]
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095dc:	4659      	mov	r1, fp
 80095de:	00cb      	lsls	r3, r1, #3
 80095e0:	4651      	mov	r1, sl
 80095e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e6:	4651      	mov	r1, sl
 80095e8:	00ca      	lsls	r2, r1, #3
 80095ea:	4610      	mov	r0, r2
 80095ec:	4619      	mov	r1, r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	4642      	mov	r2, r8
 80095f2:	189b      	adds	r3, r3, r2
 80095f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f6:	464b      	mov	r3, r9
 80095f8:	460a      	mov	r2, r1
 80095fa:	eb42 0303 	adc.w	r3, r2, r3
 80095fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	663b      	str	r3, [r7, #96]	; 0x60
 800960a:	667a      	str	r2, [r7, #100]	; 0x64
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	f04f 0300 	mov.w	r3, #0
 8009614:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009618:	4649      	mov	r1, r9
 800961a:	008b      	lsls	r3, r1, #2
 800961c:	4641      	mov	r1, r8
 800961e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009622:	4641      	mov	r1, r8
 8009624:	008a      	lsls	r2, r1, #2
 8009626:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800962a:	f7f7 fafd 	bl	8000c28 <__aeabi_uldivmod>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <UART_SetConfig+0x4e4>)
 8009634:	fba3 1302 	umull	r1, r3, r3, r2
 8009638:	095b      	lsrs	r3, r3, #5
 800963a:	2164      	movs	r1, #100	; 0x64
 800963c:	fb01 f303 	mul.w	r3, r1, r3
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	3332      	adds	r3, #50	; 0x32
 8009646:	4a08      	ldr	r2, [pc, #32]	; (8009668 <UART_SetConfig+0x4e4>)
 8009648:	fba2 2303 	umull	r2, r3, r2, r3
 800964c:	095b      	lsrs	r3, r3, #5
 800964e:	f003 020f 	and.w	r2, r3, #15
 8009652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4422      	add	r2, r4
 800965a:	609a      	str	r2, [r3, #8]
}
 800965c:	bf00      	nop
 800965e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009662:	46bd      	mov	sp, r7
 8009664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009668:	51eb851f 	.word	0x51eb851f

0800966c <std>:
 800966c:	2300      	movs	r3, #0
 800966e:	b510      	push	{r4, lr}
 8009670:	4604      	mov	r4, r0
 8009672:	e9c0 3300 	strd	r3, r3, [r0]
 8009676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800967a:	6083      	str	r3, [r0, #8]
 800967c:	8181      	strh	r1, [r0, #12]
 800967e:	6643      	str	r3, [r0, #100]	; 0x64
 8009680:	81c2      	strh	r2, [r0, #14]
 8009682:	6183      	str	r3, [r0, #24]
 8009684:	4619      	mov	r1, r3
 8009686:	2208      	movs	r2, #8
 8009688:	305c      	adds	r0, #92	; 0x5c
 800968a:	f000 f8fd 	bl	8009888 <memset>
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <std+0x58>)
 8009690:	6263      	str	r3, [r4, #36]	; 0x24
 8009692:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <std+0x5c>)
 8009694:	62a3      	str	r3, [r4, #40]	; 0x28
 8009696:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <std+0x60>)
 8009698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <std+0x64>)
 800969c:	6323      	str	r3, [r4, #48]	; 0x30
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <std+0x68>)
 80096a0:	6224      	str	r4, [r4, #32]
 80096a2:	429c      	cmp	r4, r3
 80096a4:	d006      	beq.n	80096b4 <std+0x48>
 80096a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80096aa:	4294      	cmp	r4, r2
 80096ac:	d002      	beq.n	80096b4 <std+0x48>
 80096ae:	33d0      	adds	r3, #208	; 0xd0
 80096b0:	429c      	cmp	r4, r3
 80096b2:	d105      	bne.n	80096c0 <std+0x54>
 80096b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096bc:	f000 b916 	b.w	80098ec <__retarget_lock_init_recursive>
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	bf00      	nop
 80096c4:	0800a401 	.word	0x0800a401
 80096c8:	0800a423 	.word	0x0800a423
 80096cc:	0800a45b 	.word	0x0800a45b
 80096d0:	0800a47f 	.word	0x0800a47f
 80096d4:	20005e98 	.word	0x20005e98

080096d8 <stdio_exit_handler>:
 80096d8:	4a02      	ldr	r2, [pc, #8]	; (80096e4 <stdio_exit_handler+0xc>)
 80096da:	4903      	ldr	r1, [pc, #12]	; (80096e8 <stdio_exit_handler+0x10>)
 80096dc:	4803      	ldr	r0, [pc, #12]	; (80096ec <stdio_exit_handler+0x14>)
 80096de:	f000 b869 	b.w	80097b4 <_fwalk_sglue>
 80096e2:	bf00      	nop
 80096e4:	2000003c 	.word	0x2000003c
 80096e8:	0800a399 	.word	0x0800a399
 80096ec:	20000048 	.word	0x20000048

080096f0 <cleanup_stdio>:
 80096f0:	6841      	ldr	r1, [r0, #4]
 80096f2:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <cleanup_stdio+0x34>)
 80096f4:	4299      	cmp	r1, r3
 80096f6:	b510      	push	{r4, lr}
 80096f8:	4604      	mov	r4, r0
 80096fa:	d001      	beq.n	8009700 <cleanup_stdio+0x10>
 80096fc:	f000 fe4c 	bl	800a398 <_fflush_r>
 8009700:	68a1      	ldr	r1, [r4, #8]
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <cleanup_stdio+0x38>)
 8009704:	4299      	cmp	r1, r3
 8009706:	d002      	beq.n	800970e <cleanup_stdio+0x1e>
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fe45 	bl	800a398 <_fflush_r>
 800970e:	68e1      	ldr	r1, [r4, #12]
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <cleanup_stdio+0x3c>)
 8009712:	4299      	cmp	r1, r3
 8009714:	d004      	beq.n	8009720 <cleanup_stdio+0x30>
 8009716:	4620      	mov	r0, r4
 8009718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800971c:	f000 be3c 	b.w	800a398 <_fflush_r>
 8009720:	bd10      	pop	{r4, pc}
 8009722:	bf00      	nop
 8009724:	20005e98 	.word	0x20005e98
 8009728:	20005f00 	.word	0x20005f00
 800972c:	20005f68 	.word	0x20005f68

08009730 <global_stdio_init.part.0>:
 8009730:	b510      	push	{r4, lr}
 8009732:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <global_stdio_init.part.0+0x30>)
 8009734:	4c0b      	ldr	r4, [pc, #44]	; (8009764 <global_stdio_init.part.0+0x34>)
 8009736:	4a0c      	ldr	r2, [pc, #48]	; (8009768 <global_stdio_init.part.0+0x38>)
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	4620      	mov	r0, r4
 800973c:	2200      	movs	r2, #0
 800973e:	2104      	movs	r1, #4
 8009740:	f7ff ff94 	bl	800966c <std>
 8009744:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009748:	2201      	movs	r2, #1
 800974a:	2109      	movs	r1, #9
 800974c:	f7ff ff8e 	bl	800966c <std>
 8009750:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009754:	2202      	movs	r2, #2
 8009756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975a:	2112      	movs	r1, #18
 800975c:	f7ff bf86 	b.w	800966c <std>
 8009760:	20005fd0 	.word	0x20005fd0
 8009764:	20005e98 	.word	0x20005e98
 8009768:	080096d9 	.word	0x080096d9

0800976c <__sfp_lock_acquire>:
 800976c:	4801      	ldr	r0, [pc, #4]	; (8009774 <__sfp_lock_acquire+0x8>)
 800976e:	f000 b8be 	b.w	80098ee <__retarget_lock_acquire_recursive>
 8009772:	bf00      	nop
 8009774:	20005fd5 	.word	0x20005fd5

08009778 <__sfp_lock_release>:
 8009778:	4801      	ldr	r0, [pc, #4]	; (8009780 <__sfp_lock_release+0x8>)
 800977a:	f000 b8b9 	b.w	80098f0 <__retarget_lock_release_recursive>
 800977e:	bf00      	nop
 8009780:	20005fd5 	.word	0x20005fd5

08009784 <__sinit>:
 8009784:	b510      	push	{r4, lr}
 8009786:	4604      	mov	r4, r0
 8009788:	f7ff fff0 	bl	800976c <__sfp_lock_acquire>
 800978c:	6a23      	ldr	r3, [r4, #32]
 800978e:	b11b      	cbz	r3, 8009798 <__sinit+0x14>
 8009790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009794:	f7ff bff0 	b.w	8009778 <__sfp_lock_release>
 8009798:	4b04      	ldr	r3, [pc, #16]	; (80097ac <__sinit+0x28>)
 800979a:	6223      	str	r3, [r4, #32]
 800979c:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <__sinit+0x2c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f5      	bne.n	8009790 <__sinit+0xc>
 80097a4:	f7ff ffc4 	bl	8009730 <global_stdio_init.part.0>
 80097a8:	e7f2      	b.n	8009790 <__sinit+0xc>
 80097aa:	bf00      	nop
 80097ac:	080096f1 	.word	0x080096f1
 80097b0:	20005fd0 	.word	0x20005fd0

080097b4 <_fwalk_sglue>:
 80097b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b8:	4607      	mov	r7, r0
 80097ba:	4688      	mov	r8, r1
 80097bc:	4614      	mov	r4, r2
 80097be:	2600      	movs	r6, #0
 80097c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097c4:	f1b9 0901 	subs.w	r9, r9, #1
 80097c8:	d505      	bpl.n	80097d6 <_fwalk_sglue+0x22>
 80097ca:	6824      	ldr	r4, [r4, #0]
 80097cc:	2c00      	cmp	r4, #0
 80097ce:	d1f7      	bne.n	80097c0 <_fwalk_sglue+0xc>
 80097d0:	4630      	mov	r0, r6
 80097d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d907      	bls.n	80097ec <_fwalk_sglue+0x38>
 80097dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097e0:	3301      	adds	r3, #1
 80097e2:	d003      	beq.n	80097ec <_fwalk_sglue+0x38>
 80097e4:	4629      	mov	r1, r5
 80097e6:	4638      	mov	r0, r7
 80097e8:	47c0      	blx	r8
 80097ea:	4306      	orrs	r6, r0
 80097ec:	3568      	adds	r5, #104	; 0x68
 80097ee:	e7e9      	b.n	80097c4 <_fwalk_sglue+0x10>

080097f0 <_vsniprintf_r>:
 80097f0:	b530      	push	{r4, r5, lr}
 80097f2:	4614      	mov	r4, r2
 80097f4:	2c00      	cmp	r4, #0
 80097f6:	b09b      	sub	sp, #108	; 0x6c
 80097f8:	4605      	mov	r5, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	da05      	bge.n	800980a <_vsniprintf_r+0x1a>
 80097fe:	238b      	movs	r3, #139	; 0x8b
 8009800:	6003      	str	r3, [r0, #0]
 8009802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009806:	b01b      	add	sp, #108	; 0x6c
 8009808:	bd30      	pop	{r4, r5, pc}
 800980a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800980e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009812:	bf14      	ite	ne
 8009814:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009818:	4623      	moveq	r3, r4
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009822:	9100      	str	r1, [sp, #0]
 8009824:	9104      	str	r1, [sp, #16]
 8009826:	f8ad 300e 	strh.w	r3, [sp, #14]
 800982a:	4669      	mov	r1, sp
 800982c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800982e:	f000 f8bb 	bl	80099a8 <_svfiprintf_r>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	bfbc      	itt	lt
 8009836:	238b      	movlt	r3, #139	; 0x8b
 8009838:	602b      	strlt	r3, [r5, #0]
 800983a:	2c00      	cmp	r4, #0
 800983c:	d0e3      	beq.n	8009806 <_vsniprintf_r+0x16>
 800983e:	9b00      	ldr	r3, [sp, #0]
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
 8009844:	e7df      	b.n	8009806 <_vsniprintf_r+0x16>
	...

08009848 <vsniprintf>:
 8009848:	b507      	push	{r0, r1, r2, lr}
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	460a      	mov	r2, r1
 8009850:	4601      	mov	r1, r0
 8009852:	4803      	ldr	r0, [pc, #12]	; (8009860 <vsniprintf+0x18>)
 8009854:	6800      	ldr	r0, [r0, #0]
 8009856:	f7ff ffcb 	bl	80097f0 <_vsniprintf_r>
 800985a:	b003      	add	sp, #12
 800985c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009860:	20000094 	.word	0x20000094

08009864 <iprintf>:
 8009864:	b40f      	push	{r0, r1, r2, r3}
 8009866:	b507      	push	{r0, r1, r2, lr}
 8009868:	4906      	ldr	r1, [pc, #24]	; (8009884 <iprintf+0x20>)
 800986a:	ab04      	add	r3, sp, #16
 800986c:	6808      	ldr	r0, [r1, #0]
 800986e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009872:	6881      	ldr	r1, [r0, #8]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	f000 f9bf 	bl	8009bf8 <_vfiprintf_r>
 800987a:	b003      	add	sp, #12
 800987c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009880:	b004      	add	sp, #16
 8009882:	4770      	bx	lr
 8009884:	20000094 	.word	0x20000094

08009888 <memset>:
 8009888:	4402      	add	r2, r0
 800988a:	4603      	mov	r3, r0
 800988c:	4293      	cmp	r3, r2
 800988e:	d100      	bne.n	8009892 <memset+0xa>
 8009890:	4770      	bx	lr
 8009892:	f803 1b01 	strb.w	r1, [r3], #1
 8009896:	e7f9      	b.n	800988c <memset+0x4>

08009898 <__errno>:
 8009898:	4b01      	ldr	r3, [pc, #4]	; (80098a0 <__errno+0x8>)
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20000094 	.word	0x20000094

080098a4 <__libc_init_array>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4d0d      	ldr	r5, [pc, #52]	; (80098dc <__libc_init_array+0x38>)
 80098a8:	4c0d      	ldr	r4, [pc, #52]	; (80098e0 <__libc_init_array+0x3c>)
 80098aa:	1b64      	subs	r4, r4, r5
 80098ac:	10a4      	asrs	r4, r4, #2
 80098ae:	2600      	movs	r6, #0
 80098b0:	42a6      	cmp	r6, r4
 80098b2:	d109      	bne.n	80098c8 <__libc_init_array+0x24>
 80098b4:	4d0b      	ldr	r5, [pc, #44]	; (80098e4 <__libc_init_array+0x40>)
 80098b6:	4c0c      	ldr	r4, [pc, #48]	; (80098e8 <__libc_init_array+0x44>)
 80098b8:	f001 f988 	bl	800abcc <_init>
 80098bc:	1b64      	subs	r4, r4, r5
 80098be:	10a4      	asrs	r4, r4, #2
 80098c0:	2600      	movs	r6, #0
 80098c2:	42a6      	cmp	r6, r4
 80098c4:	d105      	bne.n	80098d2 <__libc_init_array+0x2e>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098cc:	4798      	blx	r3
 80098ce:	3601      	adds	r6, #1
 80098d0:	e7ee      	b.n	80098b0 <__libc_init_array+0xc>
 80098d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d6:	4798      	blx	r3
 80098d8:	3601      	adds	r6, #1
 80098da:	e7f2      	b.n	80098c2 <__libc_init_array+0x1e>
 80098dc:	0800bee4 	.word	0x0800bee4
 80098e0:	0800bee4 	.word	0x0800bee4
 80098e4:	0800bee4 	.word	0x0800bee4
 80098e8:	0800bee8 	.word	0x0800bee8

080098ec <__retarget_lock_init_recursive>:
 80098ec:	4770      	bx	lr

080098ee <__retarget_lock_acquire_recursive>:
 80098ee:	4770      	bx	lr

080098f0 <__retarget_lock_release_recursive>:
 80098f0:	4770      	bx	lr

080098f2 <__ssputs_r>:
 80098f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f6:	688e      	ldr	r6, [r1, #8]
 80098f8:	461f      	mov	r7, r3
 80098fa:	42be      	cmp	r6, r7
 80098fc:	680b      	ldr	r3, [r1, #0]
 80098fe:	4682      	mov	sl, r0
 8009900:	460c      	mov	r4, r1
 8009902:	4690      	mov	r8, r2
 8009904:	d82c      	bhi.n	8009960 <__ssputs_r+0x6e>
 8009906:	898a      	ldrh	r2, [r1, #12]
 8009908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800990c:	d026      	beq.n	800995c <__ssputs_r+0x6a>
 800990e:	6965      	ldr	r5, [r4, #20]
 8009910:	6909      	ldr	r1, [r1, #16]
 8009912:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009916:	eba3 0901 	sub.w	r9, r3, r1
 800991a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800991e:	1c7b      	adds	r3, r7, #1
 8009920:	444b      	add	r3, r9
 8009922:	106d      	asrs	r5, r5, #1
 8009924:	429d      	cmp	r5, r3
 8009926:	bf38      	it	cc
 8009928:	461d      	movcc	r5, r3
 800992a:	0553      	lsls	r3, r2, #21
 800992c:	d527      	bpl.n	800997e <__ssputs_r+0x8c>
 800992e:	4629      	mov	r1, r5
 8009930:	f000 fa9c 	bl	8009e6c <_malloc_r>
 8009934:	4606      	mov	r6, r0
 8009936:	b360      	cbz	r0, 8009992 <__ssputs_r+0xa0>
 8009938:	6921      	ldr	r1, [r4, #16]
 800993a:	464a      	mov	r2, r9
 800993c:	f000 ff5c 	bl	800a7f8 <memcpy>
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994a:	81a3      	strh	r3, [r4, #12]
 800994c:	6126      	str	r6, [r4, #16]
 800994e:	6165      	str	r5, [r4, #20]
 8009950:	444e      	add	r6, r9
 8009952:	eba5 0509 	sub.w	r5, r5, r9
 8009956:	6026      	str	r6, [r4, #0]
 8009958:	60a5      	str	r5, [r4, #8]
 800995a:	463e      	mov	r6, r7
 800995c:	42be      	cmp	r6, r7
 800995e:	d900      	bls.n	8009962 <__ssputs_r+0x70>
 8009960:	463e      	mov	r6, r7
 8009962:	6820      	ldr	r0, [r4, #0]
 8009964:	4632      	mov	r2, r6
 8009966:	4641      	mov	r1, r8
 8009968:	f000 feb4 	bl	800a6d4 <memmove>
 800996c:	68a3      	ldr	r3, [r4, #8]
 800996e:	1b9b      	subs	r3, r3, r6
 8009970:	60a3      	str	r3, [r4, #8]
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	4433      	add	r3, r6
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	2000      	movs	r0, #0
 800997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997e:	462a      	mov	r2, r5
 8009980:	f000 fd81 	bl	800a486 <_realloc_r>
 8009984:	4606      	mov	r6, r0
 8009986:	2800      	cmp	r0, #0
 8009988:	d1e0      	bne.n	800994c <__ssputs_r+0x5a>
 800998a:	6921      	ldr	r1, [r4, #16]
 800998c:	4650      	mov	r0, sl
 800998e:	f000 ff41 	bl	800a814 <_free_r>
 8009992:	230c      	movs	r3, #12
 8009994:	f8ca 3000 	str.w	r3, [sl]
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099a4:	e7e9      	b.n	800997a <__ssputs_r+0x88>
	...

080099a8 <_svfiprintf_r>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	4698      	mov	r8, r3
 80099ae:	898b      	ldrh	r3, [r1, #12]
 80099b0:	061b      	lsls	r3, r3, #24
 80099b2:	b09d      	sub	sp, #116	; 0x74
 80099b4:	4607      	mov	r7, r0
 80099b6:	460d      	mov	r5, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	d50e      	bpl.n	80099da <_svfiprintf_r+0x32>
 80099bc:	690b      	ldr	r3, [r1, #16]
 80099be:	b963      	cbnz	r3, 80099da <_svfiprintf_r+0x32>
 80099c0:	2140      	movs	r1, #64	; 0x40
 80099c2:	f000 fa53 	bl	8009e6c <_malloc_r>
 80099c6:	6028      	str	r0, [r5, #0]
 80099c8:	6128      	str	r0, [r5, #16]
 80099ca:	b920      	cbnz	r0, 80099d6 <_svfiprintf_r+0x2e>
 80099cc:	230c      	movs	r3, #12
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099d4:	e0d0      	b.n	8009b78 <_svfiprintf_r+0x1d0>
 80099d6:	2340      	movs	r3, #64	; 0x40
 80099d8:	616b      	str	r3, [r5, #20]
 80099da:	2300      	movs	r3, #0
 80099dc:	9309      	str	r3, [sp, #36]	; 0x24
 80099de:	2320      	movs	r3, #32
 80099e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099e8:	2330      	movs	r3, #48	; 0x30
 80099ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b90 <_svfiprintf_r+0x1e8>
 80099ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099f2:	f04f 0901 	mov.w	r9, #1
 80099f6:	4623      	mov	r3, r4
 80099f8:	469a      	mov	sl, r3
 80099fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099fe:	b10a      	cbz	r2, 8009a04 <_svfiprintf_r+0x5c>
 8009a00:	2a25      	cmp	r2, #37	; 0x25
 8009a02:	d1f9      	bne.n	80099f8 <_svfiprintf_r+0x50>
 8009a04:	ebba 0b04 	subs.w	fp, sl, r4
 8009a08:	d00b      	beq.n	8009a22 <_svfiprintf_r+0x7a>
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4638      	mov	r0, r7
 8009a12:	f7ff ff6e 	bl	80098f2 <__ssputs_r>
 8009a16:	3001      	adds	r0, #1
 8009a18:	f000 80a9 	beq.w	8009b6e <_svfiprintf_r+0x1c6>
 8009a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1e:	445a      	add	r2, fp
 8009a20:	9209      	str	r2, [sp, #36]	; 0x24
 8009a22:	f89a 3000 	ldrb.w	r3, [sl]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 80a1 	beq.w	8009b6e <_svfiprintf_r+0x1c6>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a36:	f10a 0a01 	add.w	sl, sl, #1
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	9307      	str	r3, [sp, #28]
 8009a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a42:	931a      	str	r3, [sp, #104]	; 0x68
 8009a44:	4654      	mov	r4, sl
 8009a46:	2205      	movs	r2, #5
 8009a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4c:	4850      	ldr	r0, [pc, #320]	; (8009b90 <_svfiprintf_r+0x1e8>)
 8009a4e:	f7f6 fbe7 	bl	8000220 <memchr>
 8009a52:	9a04      	ldr	r2, [sp, #16]
 8009a54:	b9d8      	cbnz	r0, 8009a8e <_svfiprintf_r+0xe6>
 8009a56:	06d0      	lsls	r0, r2, #27
 8009a58:	bf44      	itt	mi
 8009a5a:	2320      	movmi	r3, #32
 8009a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a60:	0711      	lsls	r1, r2, #28
 8009a62:	bf44      	itt	mi
 8009a64:	232b      	movmi	r3, #43	; 0x2b
 8009a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a70:	d015      	beq.n	8009a9e <_svfiprintf_r+0xf6>
 8009a72:	9a07      	ldr	r2, [sp, #28]
 8009a74:	4654      	mov	r4, sl
 8009a76:	2000      	movs	r0, #0
 8009a78:	f04f 0c0a 	mov.w	ip, #10
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a82:	3b30      	subs	r3, #48	; 0x30
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	d94d      	bls.n	8009b24 <_svfiprintf_r+0x17c>
 8009a88:	b1b0      	cbz	r0, 8009ab8 <_svfiprintf_r+0x110>
 8009a8a:	9207      	str	r2, [sp, #28]
 8009a8c:	e014      	b.n	8009ab8 <_svfiprintf_r+0x110>
 8009a8e:	eba0 0308 	sub.w	r3, r0, r8
 8009a92:	fa09 f303 	lsl.w	r3, r9, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	46a2      	mov	sl, r4
 8009a9c:	e7d2      	b.n	8009a44 <_svfiprintf_r+0x9c>
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	9103      	str	r1, [sp, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfbb      	ittet	lt
 8009aaa:	425b      	neglt	r3, r3
 8009aac:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab0:	9307      	strge	r3, [sp, #28]
 8009ab2:	9307      	strlt	r3, [sp, #28]
 8009ab4:	bfb8      	it	lt
 8009ab6:	9204      	strlt	r2, [sp, #16]
 8009ab8:	7823      	ldrb	r3, [r4, #0]
 8009aba:	2b2e      	cmp	r3, #46	; 0x2e
 8009abc:	d10c      	bne.n	8009ad8 <_svfiprintf_r+0x130>
 8009abe:	7863      	ldrb	r3, [r4, #1]
 8009ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac2:	d134      	bne.n	8009b2e <_svfiprintf_r+0x186>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	1d1a      	adds	r2, r3, #4
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	9203      	str	r2, [sp, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bfb8      	it	lt
 8009ad0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ad4:	3402      	adds	r4, #2
 8009ad6:	9305      	str	r3, [sp, #20]
 8009ad8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ba0 <_svfiprintf_r+0x1f8>
 8009adc:	7821      	ldrb	r1, [r4, #0]
 8009ade:	2203      	movs	r2, #3
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	f7f6 fb9d 	bl	8000220 <memchr>
 8009ae6:	b138      	cbz	r0, 8009af8 <_svfiprintf_r+0x150>
 8009ae8:	9b04      	ldr	r3, [sp, #16]
 8009aea:	eba0 000a 	sub.w	r0, r0, sl
 8009aee:	2240      	movs	r2, #64	; 0x40
 8009af0:	4082      	lsls	r2, r0
 8009af2:	4313      	orrs	r3, r2
 8009af4:	3401      	adds	r4, #1
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afc:	4825      	ldr	r0, [pc, #148]	; (8009b94 <_svfiprintf_r+0x1ec>)
 8009afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b02:	2206      	movs	r2, #6
 8009b04:	f7f6 fb8c 	bl	8000220 <memchr>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d038      	beq.n	8009b7e <_svfiprintf_r+0x1d6>
 8009b0c:	4b22      	ldr	r3, [pc, #136]	; (8009b98 <_svfiprintf_r+0x1f0>)
 8009b0e:	bb1b      	cbnz	r3, 8009b58 <_svfiprintf_r+0x1b0>
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	3307      	adds	r3, #7
 8009b14:	f023 0307 	bic.w	r3, r3, #7
 8009b18:	3308      	adds	r3, #8
 8009b1a:	9303      	str	r3, [sp, #12]
 8009b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1e:	4433      	add	r3, r6
 8009b20:	9309      	str	r3, [sp, #36]	; 0x24
 8009b22:	e768      	b.n	80099f6 <_svfiprintf_r+0x4e>
 8009b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b28:	460c      	mov	r4, r1
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	e7a6      	b.n	8009a7c <_svfiprintf_r+0xd4>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	3401      	adds	r4, #1
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	4619      	mov	r1, r3
 8009b36:	f04f 0c0a 	mov.w	ip, #10
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b40:	3a30      	subs	r2, #48	; 0x30
 8009b42:	2a09      	cmp	r2, #9
 8009b44:	d903      	bls.n	8009b4e <_svfiprintf_r+0x1a6>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0c6      	beq.n	8009ad8 <_svfiprintf_r+0x130>
 8009b4a:	9105      	str	r1, [sp, #20]
 8009b4c:	e7c4      	b.n	8009ad8 <_svfiprintf_r+0x130>
 8009b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b52:	4604      	mov	r4, r0
 8009b54:	2301      	movs	r3, #1
 8009b56:	e7f0      	b.n	8009b3a <_svfiprintf_r+0x192>
 8009b58:	ab03      	add	r3, sp, #12
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	462a      	mov	r2, r5
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <_svfiprintf_r+0x1f4>)
 8009b60:	a904      	add	r1, sp, #16
 8009b62:	4638      	mov	r0, r7
 8009b64:	f3af 8000 	nop.w
 8009b68:	1c42      	adds	r2, r0, #1
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	d1d6      	bne.n	8009b1c <_svfiprintf_r+0x174>
 8009b6e:	89ab      	ldrh	r3, [r5, #12]
 8009b70:	065b      	lsls	r3, r3, #25
 8009b72:	f53f af2d 	bmi.w	80099d0 <_svfiprintf_r+0x28>
 8009b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b78:	b01d      	add	sp, #116	; 0x74
 8009b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	462a      	mov	r2, r5
 8009b84:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <_svfiprintf_r+0x1f4>)
 8009b86:	a904      	add	r1, sp, #16
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f000 fa5d 	bl	800a048 <_printf_i>
 8009b8e:	e7eb      	b.n	8009b68 <_svfiprintf_r+0x1c0>
 8009b90:	0800bea8 	.word	0x0800bea8
 8009b94:	0800beb2 	.word	0x0800beb2
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	080098f3 	.word	0x080098f3
 8009ba0:	0800beae 	.word	0x0800beae

08009ba4 <__sfputc_r>:
 8009ba4:	6893      	ldr	r3, [r2, #8]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	b410      	push	{r4}
 8009bac:	6093      	str	r3, [r2, #8]
 8009bae:	da08      	bge.n	8009bc2 <__sfputc_r+0x1e>
 8009bb0:	6994      	ldr	r4, [r2, #24]
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	db01      	blt.n	8009bba <__sfputc_r+0x16>
 8009bb6:	290a      	cmp	r1, #10
 8009bb8:	d103      	bne.n	8009bc2 <__sfputc_r+0x1e>
 8009bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbe:	f000 bc91 	b.w	800a4e4 <__swbuf_r>
 8009bc2:	6813      	ldr	r3, [r2, #0]
 8009bc4:	1c58      	adds	r0, r3, #1
 8009bc6:	6010      	str	r0, [r2, #0]
 8009bc8:	7019      	strb	r1, [r3, #0]
 8009bca:	4608      	mov	r0, r1
 8009bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <__sfputs_r>:
 8009bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	18d5      	adds	r5, r2, r3
 8009bdc:	42ac      	cmp	r4, r5
 8009bde:	d101      	bne.n	8009be4 <__sfputs_r+0x12>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e007      	b.n	8009bf4 <__sfputs_r+0x22>
 8009be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be8:	463a      	mov	r2, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffda 	bl	8009ba4 <__sfputc_r>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d1f3      	bne.n	8009bdc <__sfputs_r+0xa>
 8009bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bf8 <_vfiprintf_r>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	b09d      	sub	sp, #116	; 0x74
 8009c00:	4614      	mov	r4, r2
 8009c02:	4698      	mov	r8, r3
 8009c04:	4606      	mov	r6, r0
 8009c06:	b118      	cbz	r0, 8009c10 <_vfiprintf_r+0x18>
 8009c08:	6a03      	ldr	r3, [r0, #32]
 8009c0a:	b90b      	cbnz	r3, 8009c10 <_vfiprintf_r+0x18>
 8009c0c:	f7ff fdba 	bl	8009784 <__sinit>
 8009c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c12:	07d9      	lsls	r1, r3, #31
 8009c14:	d405      	bmi.n	8009c22 <_vfiprintf_r+0x2a>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	059a      	lsls	r2, r3, #22
 8009c1a:	d402      	bmi.n	8009c22 <_vfiprintf_r+0x2a>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1e:	f7ff fe66 	bl	80098ee <__retarget_lock_acquire_recursive>
 8009c22:	89ab      	ldrh	r3, [r5, #12]
 8009c24:	071b      	lsls	r3, r3, #28
 8009c26:	d501      	bpl.n	8009c2c <_vfiprintf_r+0x34>
 8009c28:	692b      	ldr	r3, [r5, #16]
 8009c2a:	b99b      	cbnz	r3, 8009c54 <_vfiprintf_r+0x5c>
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f000 fc96 	bl	800a560 <__swsetup_r>
 8009c34:	b170      	cbz	r0, 8009c54 <_vfiprintf_r+0x5c>
 8009c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c38:	07dc      	lsls	r4, r3, #31
 8009c3a:	d504      	bpl.n	8009c46 <_vfiprintf_r+0x4e>
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c40:	b01d      	add	sp, #116	; 0x74
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	0598      	lsls	r0, r3, #22
 8009c4a:	d4f7      	bmi.n	8009c3c <_vfiprintf_r+0x44>
 8009c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4e:	f7ff fe4f 	bl	80098f0 <__retarget_lock_release_recursive>
 8009c52:	e7f3      	b.n	8009c3c <_vfiprintf_r+0x44>
 8009c54:	2300      	movs	r3, #0
 8009c56:	9309      	str	r3, [sp, #36]	; 0x24
 8009c58:	2320      	movs	r3, #32
 8009c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c62:	2330      	movs	r3, #48	; 0x30
 8009c64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e18 <_vfiprintf_r+0x220>
 8009c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c6c:	f04f 0901 	mov.w	r9, #1
 8009c70:	4623      	mov	r3, r4
 8009c72:	469a      	mov	sl, r3
 8009c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c78:	b10a      	cbz	r2, 8009c7e <_vfiprintf_r+0x86>
 8009c7a:	2a25      	cmp	r2, #37	; 0x25
 8009c7c:	d1f9      	bne.n	8009c72 <_vfiprintf_r+0x7a>
 8009c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c82:	d00b      	beq.n	8009c9c <_vfiprintf_r+0xa4>
 8009c84:	465b      	mov	r3, fp
 8009c86:	4622      	mov	r2, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ffa1 	bl	8009bd2 <__sfputs_r>
 8009c90:	3001      	adds	r0, #1
 8009c92:	f000 80a9 	beq.w	8009de8 <_vfiprintf_r+0x1f0>
 8009c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c98:	445a      	add	r2, fp
 8009c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80a1 	beq.w	8009de8 <_vfiprintf_r+0x1f0>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb0:	f10a 0a01 	add.w	sl, sl, #1
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2205      	movs	r2, #5
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4854      	ldr	r0, [pc, #336]	; (8009e18 <_vfiprintf_r+0x220>)
 8009cc8:	f7f6 faaa 	bl	8000220 <memchr>
 8009ccc:	9a04      	ldr	r2, [sp, #16]
 8009cce:	b9d8      	cbnz	r0, 8009d08 <_vfiprintf_r+0x110>
 8009cd0:	06d1      	lsls	r1, r2, #27
 8009cd2:	bf44      	itt	mi
 8009cd4:	2320      	movmi	r3, #32
 8009cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cda:	0713      	lsls	r3, r2, #28
 8009cdc:	bf44      	itt	mi
 8009cde:	232b      	movmi	r3, #43	; 0x2b
 8009ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cea:	d015      	beq.n	8009d18 <_vfiprintf_r+0x120>
 8009cec:	9a07      	ldr	r2, [sp, #28]
 8009cee:	4654      	mov	r4, sl
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cfc:	3b30      	subs	r3, #48	; 0x30
 8009cfe:	2b09      	cmp	r3, #9
 8009d00:	d94d      	bls.n	8009d9e <_vfiprintf_r+0x1a6>
 8009d02:	b1b0      	cbz	r0, 8009d32 <_vfiprintf_r+0x13a>
 8009d04:	9207      	str	r2, [sp, #28]
 8009d06:	e014      	b.n	8009d32 <_vfiprintf_r+0x13a>
 8009d08:	eba0 0308 	sub.w	r3, r0, r8
 8009d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	46a2      	mov	sl, r4
 8009d16:	e7d2      	b.n	8009cbe <_vfiprintf_r+0xc6>
 8009d18:	9b03      	ldr	r3, [sp, #12]
 8009d1a:	1d19      	adds	r1, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	9103      	str	r1, [sp, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bfbb      	ittet	lt
 8009d24:	425b      	neglt	r3, r3
 8009d26:	f042 0202 	orrlt.w	r2, r2, #2
 8009d2a:	9307      	strge	r3, [sp, #28]
 8009d2c:	9307      	strlt	r3, [sp, #28]
 8009d2e:	bfb8      	it	lt
 8009d30:	9204      	strlt	r2, [sp, #16]
 8009d32:	7823      	ldrb	r3, [r4, #0]
 8009d34:	2b2e      	cmp	r3, #46	; 0x2e
 8009d36:	d10c      	bne.n	8009d52 <_vfiprintf_r+0x15a>
 8009d38:	7863      	ldrb	r3, [r4, #1]
 8009d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d3c:	d134      	bne.n	8009da8 <_vfiprintf_r+0x1b0>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	1d1a      	adds	r2, r3, #4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	9203      	str	r2, [sp, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfb8      	it	lt
 8009d4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d4e:	3402      	adds	r4, #2
 8009d50:	9305      	str	r3, [sp, #20]
 8009d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e28 <_vfiprintf_r+0x230>
 8009d56:	7821      	ldrb	r1, [r4, #0]
 8009d58:	2203      	movs	r2, #3
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	f7f6 fa60 	bl	8000220 <memchr>
 8009d60:	b138      	cbz	r0, 8009d72 <_vfiprintf_r+0x17a>
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	eba0 000a 	sub.w	r0, r0, sl
 8009d68:	2240      	movs	r2, #64	; 0x40
 8009d6a:	4082      	lsls	r2, r0
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	3401      	adds	r4, #1
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d76:	4829      	ldr	r0, [pc, #164]	; (8009e1c <_vfiprintf_r+0x224>)
 8009d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d7c:	2206      	movs	r2, #6
 8009d7e:	f7f6 fa4f 	bl	8000220 <memchr>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d03f      	beq.n	8009e06 <_vfiprintf_r+0x20e>
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <_vfiprintf_r+0x228>)
 8009d88:	bb1b      	cbnz	r3, 8009dd2 <_vfiprintf_r+0x1da>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	3307      	adds	r3, #7
 8009d8e:	f023 0307 	bic.w	r3, r3, #7
 8009d92:	3308      	adds	r3, #8
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d98:	443b      	add	r3, r7
 8009d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9c:	e768      	b.n	8009c70 <_vfiprintf_r+0x78>
 8009d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da2:	460c      	mov	r4, r1
 8009da4:	2001      	movs	r0, #1
 8009da6:	e7a6      	b.n	8009cf6 <_vfiprintf_r+0xfe>
 8009da8:	2300      	movs	r3, #0
 8009daa:	3401      	adds	r4, #1
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	4619      	mov	r1, r3
 8009db0:	f04f 0c0a 	mov.w	ip, #10
 8009db4:	4620      	mov	r0, r4
 8009db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dba:	3a30      	subs	r2, #48	; 0x30
 8009dbc:	2a09      	cmp	r2, #9
 8009dbe:	d903      	bls.n	8009dc8 <_vfiprintf_r+0x1d0>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0c6      	beq.n	8009d52 <_vfiprintf_r+0x15a>
 8009dc4:	9105      	str	r1, [sp, #20]
 8009dc6:	e7c4      	b.n	8009d52 <_vfiprintf_r+0x15a>
 8009dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dcc:	4604      	mov	r4, r0
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e7f0      	b.n	8009db4 <_vfiprintf_r+0x1bc>
 8009dd2:	ab03      	add	r3, sp, #12
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <_vfiprintf_r+0x22c>)
 8009dda:	a904      	add	r1, sp, #16
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f3af 8000 	nop.w
 8009de2:	4607      	mov	r7, r0
 8009de4:	1c78      	adds	r0, r7, #1
 8009de6:	d1d6      	bne.n	8009d96 <_vfiprintf_r+0x19e>
 8009de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dea:	07d9      	lsls	r1, r3, #31
 8009dec:	d405      	bmi.n	8009dfa <_vfiprintf_r+0x202>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	059a      	lsls	r2, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_vfiprintf_r+0x202>
 8009df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009df6:	f7ff fd7b 	bl	80098f0 <__retarget_lock_release_recursive>
 8009dfa:	89ab      	ldrh	r3, [r5, #12]
 8009dfc:	065b      	lsls	r3, r3, #25
 8009dfe:	f53f af1d 	bmi.w	8009c3c <_vfiprintf_r+0x44>
 8009e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e04:	e71c      	b.n	8009c40 <_vfiprintf_r+0x48>
 8009e06:	ab03      	add	r3, sp, #12
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <_vfiprintf_r+0x22c>)
 8009e0e:	a904      	add	r1, sp, #16
 8009e10:	4630      	mov	r0, r6
 8009e12:	f000 f919 	bl	800a048 <_printf_i>
 8009e16:	e7e4      	b.n	8009de2 <_vfiprintf_r+0x1ea>
 8009e18:	0800bea8 	.word	0x0800bea8
 8009e1c:	0800beb2 	.word	0x0800beb2
 8009e20:	00000000 	.word	0x00000000
 8009e24:	08009bd3 	.word	0x08009bd3
 8009e28:	0800beae 	.word	0x0800beae

08009e2c <sbrk_aligned>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4e0e      	ldr	r6, [pc, #56]	; (8009e68 <sbrk_aligned+0x3c>)
 8009e30:	460c      	mov	r4, r1
 8009e32:	6831      	ldr	r1, [r6, #0]
 8009e34:	4605      	mov	r5, r0
 8009e36:	b911      	cbnz	r1, 8009e3e <sbrk_aligned+0x12>
 8009e38:	f000 fcbc 	bl	800a7b4 <_sbrk_r>
 8009e3c:	6030      	str	r0, [r6, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f000 fcb7 	bl	800a7b4 <_sbrk_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	d00a      	beq.n	8009e60 <sbrk_aligned+0x34>
 8009e4a:	1cc4      	adds	r4, r0, #3
 8009e4c:	f024 0403 	bic.w	r4, r4, #3
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d007      	beq.n	8009e64 <sbrk_aligned+0x38>
 8009e54:	1a21      	subs	r1, r4, r0
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 fcac 	bl	800a7b4 <_sbrk_r>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d101      	bne.n	8009e64 <sbrk_aligned+0x38>
 8009e60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009e64:	4620      	mov	r0, r4
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	20005fdc 	.word	0x20005fdc

08009e6c <_malloc_r>:
 8009e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e70:	1ccd      	adds	r5, r1, #3
 8009e72:	f025 0503 	bic.w	r5, r5, #3
 8009e76:	3508      	adds	r5, #8
 8009e78:	2d0c      	cmp	r5, #12
 8009e7a:	bf38      	it	cc
 8009e7c:	250c      	movcc	r5, #12
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	4607      	mov	r7, r0
 8009e82:	db01      	blt.n	8009e88 <_malloc_r+0x1c>
 8009e84:	42a9      	cmp	r1, r5
 8009e86:	d905      	bls.n	8009e94 <_malloc_r+0x28>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	2600      	movs	r6, #0
 8009e8e:	4630      	mov	r0, r6
 8009e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f68 <_malloc_r+0xfc>
 8009e98:	f000 faa6 	bl	800a3e8 <__malloc_lock>
 8009e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009ea0:	461c      	mov	r4, r3
 8009ea2:	bb5c      	cbnz	r4, 8009efc <_malloc_r+0x90>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	f7ff ffc0 	bl	8009e2c <sbrk_aligned>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	4604      	mov	r4, r0
 8009eb0:	d155      	bne.n	8009f5e <_malloc_r+0xf2>
 8009eb2:	f8d8 4000 	ldr.w	r4, [r8]
 8009eb6:	4626      	mov	r6, r4
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d145      	bne.n	8009f48 <_malloc_r+0xdc>
 8009ebc:	2c00      	cmp	r4, #0
 8009ebe:	d048      	beq.n	8009f52 <_malloc_r+0xe6>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	eb04 0903 	add.w	r9, r4, r3
 8009eca:	f000 fc73 	bl	800a7b4 <_sbrk_r>
 8009ece:	4581      	cmp	r9, r0
 8009ed0:	d13f      	bne.n	8009f52 <_malloc_r+0xe6>
 8009ed2:	6821      	ldr	r1, [r4, #0]
 8009ed4:	1a6d      	subs	r5, r5, r1
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f7ff ffa7 	bl	8009e2c <sbrk_aligned>
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d037      	beq.n	8009f52 <_malloc_r+0xe6>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	442b      	add	r3, r5
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d038      	beq.n	8009f62 <_malloc_r+0xf6>
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	42a2      	cmp	r2, r4
 8009ef4:	d12b      	bne.n	8009f4e <_malloc_r+0xe2>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
 8009efa:	e00f      	b.n	8009f1c <_malloc_r+0xb0>
 8009efc:	6822      	ldr	r2, [r4, #0]
 8009efe:	1b52      	subs	r2, r2, r5
 8009f00:	d41f      	bmi.n	8009f42 <_malloc_r+0xd6>
 8009f02:	2a0b      	cmp	r2, #11
 8009f04:	d917      	bls.n	8009f36 <_malloc_r+0xca>
 8009f06:	1961      	adds	r1, r4, r5
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	6025      	str	r5, [r4, #0]
 8009f0c:	bf18      	it	ne
 8009f0e:	6059      	strne	r1, [r3, #4]
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	bf08      	it	eq
 8009f14:	f8c8 1000 	streq.w	r1, [r8]
 8009f18:	5162      	str	r2, [r4, r5]
 8009f1a:	604b      	str	r3, [r1, #4]
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f104 060b 	add.w	r6, r4, #11
 8009f22:	f000 fa67 	bl	800a3f4 <__malloc_unlock>
 8009f26:	f026 0607 	bic.w	r6, r6, #7
 8009f2a:	1d23      	adds	r3, r4, #4
 8009f2c:	1af2      	subs	r2, r6, r3
 8009f2e:	d0ae      	beq.n	8009e8e <_malloc_r+0x22>
 8009f30:	1b9b      	subs	r3, r3, r6
 8009f32:	50a3      	str	r3, [r4, r2]
 8009f34:	e7ab      	b.n	8009e8e <_malloc_r+0x22>
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	6862      	ldr	r2, [r4, #4]
 8009f3a:	d1dd      	bne.n	8009ef8 <_malloc_r+0x8c>
 8009f3c:	f8c8 2000 	str.w	r2, [r8]
 8009f40:	e7ec      	b.n	8009f1c <_malloc_r+0xb0>
 8009f42:	4623      	mov	r3, r4
 8009f44:	6864      	ldr	r4, [r4, #4]
 8009f46:	e7ac      	b.n	8009ea2 <_malloc_r+0x36>
 8009f48:	4634      	mov	r4, r6
 8009f4a:	6876      	ldr	r6, [r6, #4]
 8009f4c:	e7b4      	b.n	8009eb8 <_malloc_r+0x4c>
 8009f4e:	4613      	mov	r3, r2
 8009f50:	e7cc      	b.n	8009eec <_malloc_r+0x80>
 8009f52:	230c      	movs	r3, #12
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	4638      	mov	r0, r7
 8009f58:	f000 fa4c 	bl	800a3f4 <__malloc_unlock>
 8009f5c:	e797      	b.n	8009e8e <_malloc_r+0x22>
 8009f5e:	6025      	str	r5, [r4, #0]
 8009f60:	e7dc      	b.n	8009f1c <_malloc_r+0xb0>
 8009f62:	605b      	str	r3, [r3, #4]
 8009f64:	deff      	udf	#255	; 0xff
 8009f66:	bf00      	nop
 8009f68:	20005fd8 	.word	0x20005fd8

08009f6c <_printf_common>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	4699      	mov	r9, r3
 8009f74:	688a      	ldr	r2, [r1, #8]
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bfb8      	it	lt
 8009f80:	4613      	movlt	r3, r2
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	b10a      	cbz	r2, 8009f92 <_printf_common+0x26>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	0699      	lsls	r1, r3, #26
 8009f96:	bf42      	ittt	mi
 8009f98:	6833      	ldrmi	r3, [r6, #0]
 8009f9a:	3302      	addmi	r3, #2
 8009f9c:	6033      	strmi	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d106      	bne.n	8009fb4 <_printf_common+0x48>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	dc26      	bgt.n	800a002 <_printf_common+0x96>
 8009fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb8:	1e13      	subs	r3, r2, #0
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	bf18      	it	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	0692      	lsls	r2, r2, #26
 8009fc2:	d42b      	bmi.n	800a01c <_printf_common+0xb0>
 8009fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d01e      	beq.n	800a010 <_printf_common+0xa4>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	f003 0306 	and.w	r3, r3, #6
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	bf02      	ittt	eq
 8009fde:	68e5      	ldreq	r5, [r4, #12]
 8009fe0:	6833      	ldreq	r3, [r6, #0]
 8009fe2:	1aed      	subeq	r5, r5, r3
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	341a      	adds	r4, #26
 8009ffa:	42b5      	cmp	r5, r6
 8009ffc:	d11a      	bne.n	800a034 <_printf_common+0xc8>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e008      	b.n	800a014 <_printf_common+0xa8>
 800a002:	2301      	movs	r3, #1
 800a004:	4652      	mov	r2, sl
 800a006:	4649      	mov	r1, r9
 800a008:	4638      	mov	r0, r7
 800a00a:	47c0      	blx	r8
 800a00c:	3001      	adds	r0, #1
 800a00e:	d103      	bne.n	800a018 <_printf_common+0xac>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	3501      	adds	r5, #1
 800a01a:	e7c6      	b.n	8009faa <_printf_common+0x3e>
 800a01c:	18e1      	adds	r1, r4, r3
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	2030      	movs	r0, #48	; 0x30
 800a022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a026:	4422      	add	r2, r4
 800a028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a030:	3302      	adds	r3, #2
 800a032:	e7c7      	b.n	8009fc4 <_printf_common+0x58>
 800a034:	2301      	movs	r3, #1
 800a036:	4622      	mov	r2, r4
 800a038:	4649      	mov	r1, r9
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c0      	blx	r8
 800a03e:	3001      	adds	r0, #1
 800a040:	d0e6      	beq.n	800a010 <_printf_common+0xa4>
 800a042:	3601      	adds	r6, #1
 800a044:	e7d9      	b.n	8009ffa <_printf_common+0x8e>
	...

0800a048 <_printf_i>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	7e0f      	ldrb	r7, [r1, #24]
 800a04e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a050:	2f78      	cmp	r7, #120	; 0x78
 800a052:	4691      	mov	r9, r2
 800a054:	4680      	mov	r8, r0
 800a056:	460c      	mov	r4, r1
 800a058:	469a      	mov	sl, r3
 800a05a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a05e:	d807      	bhi.n	800a070 <_printf_i+0x28>
 800a060:	2f62      	cmp	r7, #98	; 0x62
 800a062:	d80a      	bhi.n	800a07a <_printf_i+0x32>
 800a064:	2f00      	cmp	r7, #0
 800a066:	f000 80d4 	beq.w	800a212 <_printf_i+0x1ca>
 800a06a:	2f58      	cmp	r7, #88	; 0x58
 800a06c:	f000 80c0 	beq.w	800a1f0 <_printf_i+0x1a8>
 800a070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a078:	e03a      	b.n	800a0f0 <_printf_i+0xa8>
 800a07a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a07e:	2b15      	cmp	r3, #21
 800a080:	d8f6      	bhi.n	800a070 <_printf_i+0x28>
 800a082:	a101      	add	r1, pc, #4	; (adr r1, 800a088 <_printf_i+0x40>)
 800a084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0f5 	.word	0x0800a0f5
 800a090:	0800a071 	.word	0x0800a071
 800a094:	0800a071 	.word	0x0800a071
 800a098:	0800a071 	.word	0x0800a071
 800a09c:	0800a071 	.word	0x0800a071
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a071 	.word	0x0800a071
 800a0a8:	0800a071 	.word	0x0800a071
 800a0ac:	0800a071 	.word	0x0800a071
 800a0b0:	0800a071 	.word	0x0800a071
 800a0b4:	0800a1f9 	.word	0x0800a1f9
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a1b3 	.word	0x0800a1b3
 800a0c0:	0800a071 	.word	0x0800a071
 800a0c4:	0800a071 	.word	0x0800a071
 800a0c8:	0800a21b 	.word	0x0800a21b
 800a0cc:	0800a071 	.word	0x0800a071
 800a0d0:	0800a121 	.word	0x0800a121
 800a0d4:	0800a071 	.word	0x0800a071
 800a0d8:	0800a071 	.word	0x0800a071
 800a0dc:	0800a1bb 	.word	0x0800a1bb
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	602a      	str	r2, [r5, #0]
 800a0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e09f      	b.n	800a234 <_printf_i+0x1ec>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	0607      	lsls	r7, r0, #24
 800a0fa:	f103 0104 	add.w	r1, r3, #4
 800a0fe:	6029      	str	r1, [r5, #0]
 800a100:	d501      	bpl.n	800a106 <_printf_i+0xbe>
 800a102:	681e      	ldr	r6, [r3, #0]
 800a104:	e003      	b.n	800a10e <_printf_i+0xc6>
 800a106:	0646      	lsls	r6, r0, #25
 800a108:	d5fb      	bpl.n	800a102 <_printf_i+0xba>
 800a10a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a10e:	2e00      	cmp	r6, #0
 800a110:	da03      	bge.n	800a11a <_printf_i+0xd2>
 800a112:	232d      	movs	r3, #45	; 0x2d
 800a114:	4276      	negs	r6, r6
 800a116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11a:	485a      	ldr	r0, [pc, #360]	; (800a284 <_printf_i+0x23c>)
 800a11c:	230a      	movs	r3, #10
 800a11e:	e012      	b.n	800a146 <_printf_i+0xfe>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	1d19      	adds	r1, r3, #4
 800a126:	6029      	str	r1, [r5, #0]
 800a128:	0605      	lsls	r5, r0, #24
 800a12a:	d501      	bpl.n	800a130 <_printf_i+0xe8>
 800a12c:	681e      	ldr	r6, [r3, #0]
 800a12e:	e002      	b.n	800a136 <_printf_i+0xee>
 800a130:	0641      	lsls	r1, r0, #25
 800a132:	d5fb      	bpl.n	800a12c <_printf_i+0xe4>
 800a134:	881e      	ldrh	r6, [r3, #0]
 800a136:	4853      	ldr	r0, [pc, #332]	; (800a284 <_printf_i+0x23c>)
 800a138:	2f6f      	cmp	r7, #111	; 0x6f
 800a13a:	bf0c      	ite	eq
 800a13c:	2308      	moveq	r3, #8
 800a13e:	230a      	movne	r3, #10
 800a140:	2100      	movs	r1, #0
 800a142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a146:	6865      	ldr	r5, [r4, #4]
 800a148:	60a5      	str	r5, [r4, #8]
 800a14a:	2d00      	cmp	r5, #0
 800a14c:	bfa2      	ittt	ge
 800a14e:	6821      	ldrge	r1, [r4, #0]
 800a150:	f021 0104 	bicge.w	r1, r1, #4
 800a154:	6021      	strge	r1, [r4, #0]
 800a156:	b90e      	cbnz	r6, 800a15c <_printf_i+0x114>
 800a158:	2d00      	cmp	r5, #0
 800a15a:	d04b      	beq.n	800a1f4 <_printf_i+0x1ac>
 800a15c:	4615      	mov	r5, r2
 800a15e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a162:	fb03 6711 	mls	r7, r3, r1, r6
 800a166:	5dc7      	ldrb	r7, [r0, r7]
 800a168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a16c:	4637      	mov	r7, r6
 800a16e:	42bb      	cmp	r3, r7
 800a170:	460e      	mov	r6, r1
 800a172:	d9f4      	bls.n	800a15e <_printf_i+0x116>
 800a174:	2b08      	cmp	r3, #8
 800a176:	d10b      	bne.n	800a190 <_printf_i+0x148>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	07de      	lsls	r6, r3, #31
 800a17c:	d508      	bpl.n	800a190 <_printf_i+0x148>
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	6861      	ldr	r1, [r4, #4]
 800a182:	4299      	cmp	r1, r3
 800a184:	bfde      	ittt	le
 800a186:	2330      	movle	r3, #48	; 0x30
 800a188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a18c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a190:	1b52      	subs	r2, r2, r5
 800a192:	6122      	str	r2, [r4, #16]
 800a194:	f8cd a000 	str.w	sl, [sp]
 800a198:	464b      	mov	r3, r9
 800a19a:	aa03      	add	r2, sp, #12
 800a19c:	4621      	mov	r1, r4
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f7ff fee4 	bl	8009f6c <_printf_common>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d14a      	bne.n	800a23e <_printf_i+0x1f6>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ac:	b004      	add	sp, #16
 800a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f043 0320 	orr.w	r3, r3, #32
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	4833      	ldr	r0, [pc, #204]	; (800a288 <_printf_i+0x240>)
 800a1bc:	2778      	movs	r7, #120	; 0x78
 800a1be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	061f      	lsls	r7, r3, #24
 800a1c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1cc:	d402      	bmi.n	800a1d4 <_printf_i+0x18c>
 800a1ce:	065f      	lsls	r7, r3, #25
 800a1d0:	bf48      	it	mi
 800a1d2:	b2b6      	uxthmi	r6, r6
 800a1d4:	07df      	lsls	r7, r3, #31
 800a1d6:	bf48      	it	mi
 800a1d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a1dc:	6029      	str	r1, [r5, #0]
 800a1de:	bf48      	it	mi
 800a1e0:	6023      	strmi	r3, [r4, #0]
 800a1e2:	b91e      	cbnz	r6, 800a1ec <_printf_i+0x1a4>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	f023 0320 	bic.w	r3, r3, #32
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	e7a7      	b.n	800a140 <_printf_i+0xf8>
 800a1f0:	4824      	ldr	r0, [pc, #144]	; (800a284 <_printf_i+0x23c>)
 800a1f2:	e7e4      	b.n	800a1be <_printf_i+0x176>
 800a1f4:	4615      	mov	r5, r2
 800a1f6:	e7bd      	b.n	800a174 <_printf_i+0x12c>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	6826      	ldr	r6, [r4, #0]
 800a1fc:	6961      	ldr	r1, [r4, #20]
 800a1fe:	1d18      	adds	r0, r3, #4
 800a200:	6028      	str	r0, [r5, #0]
 800a202:	0635      	lsls	r5, r6, #24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	d501      	bpl.n	800a20c <_printf_i+0x1c4>
 800a208:	6019      	str	r1, [r3, #0]
 800a20a:	e002      	b.n	800a212 <_printf_i+0x1ca>
 800a20c:	0670      	lsls	r0, r6, #25
 800a20e:	d5fb      	bpl.n	800a208 <_printf_i+0x1c0>
 800a210:	8019      	strh	r1, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	4615      	mov	r5, r2
 800a218:	e7bc      	b.n	800a194 <_printf_i+0x14c>
 800a21a:	682b      	ldr	r3, [r5, #0]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	602a      	str	r2, [r5, #0]
 800a220:	681d      	ldr	r5, [r3, #0]
 800a222:	6862      	ldr	r2, [r4, #4]
 800a224:	2100      	movs	r1, #0
 800a226:	4628      	mov	r0, r5
 800a228:	f7f5 fffa 	bl	8000220 <memchr>
 800a22c:	b108      	cbz	r0, 800a232 <_printf_i+0x1ea>
 800a22e:	1b40      	subs	r0, r0, r5
 800a230:	6060      	str	r0, [r4, #4]
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	2300      	movs	r3, #0
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a23c:	e7aa      	b.n	800a194 <_printf_i+0x14c>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	462a      	mov	r2, r5
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	47d0      	blx	sl
 800a248:	3001      	adds	r0, #1
 800a24a:	d0ad      	beq.n	800a1a8 <_printf_i+0x160>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d413      	bmi.n	800a27a <_printf_i+0x232>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	4298      	cmp	r0, r3
 800a258:	bfb8      	it	lt
 800a25a:	4618      	movlt	r0, r3
 800a25c:	e7a6      	b.n	800a1ac <_printf_i+0x164>
 800a25e:	2301      	movs	r3, #1
 800a260:	4632      	mov	r2, r6
 800a262:	4649      	mov	r1, r9
 800a264:	4640      	mov	r0, r8
 800a266:	47d0      	blx	sl
 800a268:	3001      	adds	r0, #1
 800a26a:	d09d      	beq.n	800a1a8 <_printf_i+0x160>
 800a26c:	3501      	adds	r5, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	9903      	ldr	r1, [sp, #12]
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	42ab      	cmp	r3, r5
 800a276:	dcf2      	bgt.n	800a25e <_printf_i+0x216>
 800a278:	e7eb      	b.n	800a252 <_printf_i+0x20a>
 800a27a:	2500      	movs	r5, #0
 800a27c:	f104 0619 	add.w	r6, r4, #25
 800a280:	e7f5      	b.n	800a26e <_printf_i+0x226>
 800a282:	bf00      	nop
 800a284:	0800beb9 	.word	0x0800beb9
 800a288:	0800beca 	.word	0x0800beca

0800a28c <__sflush_r>:
 800a28c:	898a      	ldrh	r2, [r1, #12]
 800a28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a292:	4605      	mov	r5, r0
 800a294:	0710      	lsls	r0, r2, #28
 800a296:	460c      	mov	r4, r1
 800a298:	d458      	bmi.n	800a34c <__sflush_r+0xc0>
 800a29a:	684b      	ldr	r3, [r1, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	dc05      	bgt.n	800a2ac <__sflush_r+0x20>
 800a2a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	dc02      	bgt.n	800a2ac <__sflush_r+0x20>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ae:	2e00      	cmp	r6, #0
 800a2b0:	d0f9      	beq.n	800a2a6 <__sflush_r+0x1a>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2b8:	682f      	ldr	r7, [r5, #0]
 800a2ba:	6a21      	ldr	r1, [r4, #32]
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	d032      	beq.n	800a326 <__sflush_r+0x9a>
 800a2c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	075a      	lsls	r2, r3, #29
 800a2c6:	d505      	bpl.n	800a2d4 <__sflush_r+0x48>
 800a2c8:	6863      	ldr	r3, [r4, #4]
 800a2ca:	1ac0      	subs	r0, r0, r3
 800a2cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2ce:	b10b      	cbz	r3, 800a2d4 <__sflush_r+0x48>
 800a2d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2d2:	1ac0      	subs	r0, r0, r3
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2da:	6a21      	ldr	r1, [r4, #32]
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b0      	blx	r6
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	d106      	bne.n	800a2f4 <__sflush_r+0x68>
 800a2e6:	6829      	ldr	r1, [r5, #0]
 800a2e8:	291d      	cmp	r1, #29
 800a2ea:	d82b      	bhi.n	800a344 <__sflush_r+0xb8>
 800a2ec:	4a29      	ldr	r2, [pc, #164]	; (800a394 <__sflush_r+0x108>)
 800a2ee:	410a      	asrs	r2, r1
 800a2f0:	07d6      	lsls	r6, r2, #31
 800a2f2:	d427      	bmi.n	800a344 <__sflush_r+0xb8>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	6062      	str	r2, [r4, #4]
 800a2f8:	04d9      	lsls	r1, r3, #19
 800a2fa:	6922      	ldr	r2, [r4, #16]
 800a2fc:	6022      	str	r2, [r4, #0]
 800a2fe:	d504      	bpl.n	800a30a <__sflush_r+0x7e>
 800a300:	1c42      	adds	r2, r0, #1
 800a302:	d101      	bne.n	800a308 <__sflush_r+0x7c>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b903      	cbnz	r3, 800a30a <__sflush_r+0x7e>
 800a308:	6560      	str	r0, [r4, #84]	; 0x54
 800a30a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30c:	602f      	str	r7, [r5, #0]
 800a30e:	2900      	cmp	r1, #0
 800a310:	d0c9      	beq.n	800a2a6 <__sflush_r+0x1a>
 800a312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a316:	4299      	cmp	r1, r3
 800a318:	d002      	beq.n	800a320 <__sflush_r+0x94>
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 fa7a 	bl	800a814 <_free_r>
 800a320:	2000      	movs	r0, #0
 800a322:	6360      	str	r0, [r4, #52]	; 0x34
 800a324:	e7c0      	b.n	800a2a8 <__sflush_r+0x1c>
 800a326:	2301      	movs	r3, #1
 800a328:	4628      	mov	r0, r5
 800a32a:	47b0      	blx	r6
 800a32c:	1c41      	adds	r1, r0, #1
 800a32e:	d1c8      	bne.n	800a2c2 <__sflush_r+0x36>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0c5      	beq.n	800a2c2 <__sflush_r+0x36>
 800a336:	2b1d      	cmp	r3, #29
 800a338:	d001      	beq.n	800a33e <__sflush_r+0xb2>
 800a33a:	2b16      	cmp	r3, #22
 800a33c:	d101      	bne.n	800a342 <__sflush_r+0xb6>
 800a33e:	602f      	str	r7, [r5, #0]
 800a340:	e7b1      	b.n	800a2a6 <__sflush_r+0x1a>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a348:	81a3      	strh	r3, [r4, #12]
 800a34a:	e7ad      	b.n	800a2a8 <__sflush_r+0x1c>
 800a34c:	690f      	ldr	r7, [r1, #16]
 800a34e:	2f00      	cmp	r7, #0
 800a350:	d0a9      	beq.n	800a2a6 <__sflush_r+0x1a>
 800a352:	0793      	lsls	r3, r2, #30
 800a354:	680e      	ldr	r6, [r1, #0]
 800a356:	bf08      	it	eq
 800a358:	694b      	ldreq	r3, [r1, #20]
 800a35a:	600f      	str	r7, [r1, #0]
 800a35c:	bf18      	it	ne
 800a35e:	2300      	movne	r3, #0
 800a360:	eba6 0807 	sub.w	r8, r6, r7
 800a364:	608b      	str	r3, [r1, #8]
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	dd9c      	ble.n	800a2a6 <__sflush_r+0x1a>
 800a36c:	6a21      	ldr	r1, [r4, #32]
 800a36e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a370:	4643      	mov	r3, r8
 800a372:	463a      	mov	r2, r7
 800a374:	4628      	mov	r0, r5
 800a376:	47b0      	blx	r6
 800a378:	2800      	cmp	r0, #0
 800a37a:	dc06      	bgt.n	800a38a <__sflush_r+0xfe>
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a388:	e78e      	b.n	800a2a8 <__sflush_r+0x1c>
 800a38a:	4407      	add	r7, r0
 800a38c:	eba8 0800 	sub.w	r8, r8, r0
 800a390:	e7e9      	b.n	800a366 <__sflush_r+0xda>
 800a392:	bf00      	nop
 800a394:	dfbffffe 	.word	0xdfbffffe

0800a398 <_fflush_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	690b      	ldr	r3, [r1, #16]
 800a39c:	4605      	mov	r5, r0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	b913      	cbnz	r3, 800a3a8 <_fflush_r+0x10>
 800a3a2:	2500      	movs	r5, #0
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	b118      	cbz	r0, 800a3b2 <_fflush_r+0x1a>
 800a3aa:	6a03      	ldr	r3, [r0, #32]
 800a3ac:	b90b      	cbnz	r3, 800a3b2 <_fflush_r+0x1a>
 800a3ae:	f7ff f9e9 	bl	8009784 <__sinit>
 800a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0f3      	beq.n	800a3a2 <_fflush_r+0xa>
 800a3ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3bc:	07d0      	lsls	r0, r2, #31
 800a3be:	d404      	bmi.n	800a3ca <_fflush_r+0x32>
 800a3c0:	0599      	lsls	r1, r3, #22
 800a3c2:	d402      	bmi.n	800a3ca <_fflush_r+0x32>
 800a3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3c6:	f7ff fa92 	bl	80098ee <__retarget_lock_acquire_recursive>
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	f7ff ff5d 	bl	800a28c <__sflush_r>
 800a3d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d4:	07da      	lsls	r2, r3, #31
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	d4e4      	bmi.n	800a3a4 <_fflush_r+0xc>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	059b      	lsls	r3, r3, #22
 800a3de:	d4e1      	bmi.n	800a3a4 <_fflush_r+0xc>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e2:	f7ff fa85 	bl	80098f0 <__retarget_lock_release_recursive>
 800a3e6:	e7dd      	b.n	800a3a4 <_fflush_r+0xc>

0800a3e8 <__malloc_lock>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	; (800a3f0 <__malloc_lock+0x8>)
 800a3ea:	f7ff ba80 	b.w	80098ee <__retarget_lock_acquire_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	20005fd4 	.word	0x20005fd4

0800a3f4 <__malloc_unlock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__malloc_unlock+0x8>)
 800a3f6:	f7ff ba7b 	b.w	80098f0 <__retarget_lock_release_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	20005fd4 	.word	0x20005fd4

0800a400 <__sread>:
 800a400:	b510      	push	{r4, lr}
 800a402:	460c      	mov	r4, r1
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	f000 f9c2 	bl	800a790 <_read_r>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	bfab      	itete	ge
 800a410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a412:	89a3      	ldrhlt	r3, [r4, #12]
 800a414:	181b      	addge	r3, r3, r0
 800a416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a41a:	bfac      	ite	ge
 800a41c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a41e:	81a3      	strhlt	r3, [r4, #12]
 800a420:	bd10      	pop	{r4, pc}

0800a422 <__swrite>:
 800a422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	461f      	mov	r7, r3
 800a428:	898b      	ldrh	r3, [r1, #12]
 800a42a:	05db      	lsls	r3, r3, #23
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	4616      	mov	r6, r2
 800a432:	d505      	bpl.n	800a440 <__swrite+0x1e>
 800a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a438:	2302      	movs	r3, #2
 800a43a:	2200      	movs	r2, #0
 800a43c:	f000 f996 	bl	800a76c <_lseek_r>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	4632      	mov	r2, r6
 800a44e:	463b      	mov	r3, r7
 800a450:	4628      	mov	r0, r5
 800a452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a456:	f000 b9bd 	b.w	800a7d4 <_write_r>

0800a45a <__sseek>:
 800a45a:	b510      	push	{r4, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a462:	f000 f983 	bl	800a76c <_lseek_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	bf15      	itete	ne
 800a46c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a476:	81a3      	strheq	r3, [r4, #12]
 800a478:	bf18      	it	ne
 800a47a:	81a3      	strhne	r3, [r4, #12]
 800a47c:	bd10      	pop	{r4, pc}

0800a47e <__sclose>:
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 b941 	b.w	800a708 <_close_r>

0800a486 <_realloc_r>:
 800a486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a48a:	4680      	mov	r8, r0
 800a48c:	4614      	mov	r4, r2
 800a48e:	460e      	mov	r6, r1
 800a490:	b921      	cbnz	r1, 800a49c <_realloc_r+0x16>
 800a492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	4611      	mov	r1, r2
 800a498:	f7ff bce8 	b.w	8009e6c <_malloc_r>
 800a49c:	b92a      	cbnz	r2, 800a4aa <_realloc_r+0x24>
 800a49e:	f000 f9b9 	bl	800a814 <_free_r>
 800a4a2:	4625      	mov	r5, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4aa:	f000 f9ff 	bl	800a8ac <_malloc_usable_size_r>
 800a4ae:	4284      	cmp	r4, r0
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	d802      	bhi.n	800a4ba <_realloc_r+0x34>
 800a4b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4b8:	d812      	bhi.n	800a4e0 <_realloc_r+0x5a>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4640      	mov	r0, r8
 800a4be:	f7ff fcd5 	bl	8009e6c <_malloc_r>
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d0ed      	beq.n	800a4a4 <_realloc_r+0x1e>
 800a4c8:	42bc      	cmp	r4, r7
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	bf28      	it	cs
 800a4d0:	463a      	movcs	r2, r7
 800a4d2:	f000 f991 	bl	800a7f8 <memcpy>
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f000 f99b 	bl	800a814 <_free_r>
 800a4de:	e7e1      	b.n	800a4a4 <_realloc_r+0x1e>
 800a4e0:	4635      	mov	r5, r6
 800a4e2:	e7df      	b.n	800a4a4 <_realloc_r+0x1e>

0800a4e4 <__swbuf_r>:
 800a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e6:	460e      	mov	r6, r1
 800a4e8:	4614      	mov	r4, r2
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	b118      	cbz	r0, 800a4f6 <__swbuf_r+0x12>
 800a4ee:	6a03      	ldr	r3, [r0, #32]
 800a4f0:	b90b      	cbnz	r3, 800a4f6 <__swbuf_r+0x12>
 800a4f2:	f7ff f947 	bl	8009784 <__sinit>
 800a4f6:	69a3      	ldr	r3, [r4, #24]
 800a4f8:	60a3      	str	r3, [r4, #8]
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	071a      	lsls	r2, r3, #28
 800a4fe:	d525      	bpl.n	800a54c <__swbuf_r+0x68>
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	b31b      	cbz	r3, 800a54c <__swbuf_r+0x68>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	6922      	ldr	r2, [r4, #16]
 800a508:	1a98      	subs	r0, r3, r2
 800a50a:	6963      	ldr	r3, [r4, #20]
 800a50c:	b2f6      	uxtb	r6, r6
 800a50e:	4283      	cmp	r3, r0
 800a510:	4637      	mov	r7, r6
 800a512:	dc04      	bgt.n	800a51e <__swbuf_r+0x3a>
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f7ff ff3e 	bl	800a398 <_fflush_r>
 800a51c:	b9e0      	cbnz	r0, 800a558 <__swbuf_r+0x74>
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	3b01      	subs	r3, #1
 800a522:	60a3      	str	r3, [r4, #8]
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	6022      	str	r2, [r4, #0]
 800a52a:	701e      	strb	r6, [r3, #0]
 800a52c:	6962      	ldr	r2, [r4, #20]
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	429a      	cmp	r2, r3
 800a532:	d004      	beq.n	800a53e <__swbuf_r+0x5a>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	07db      	lsls	r3, r3, #31
 800a538:	d506      	bpl.n	800a548 <__swbuf_r+0x64>
 800a53a:	2e0a      	cmp	r6, #10
 800a53c:	d104      	bne.n	800a548 <__swbuf_r+0x64>
 800a53e:	4621      	mov	r1, r4
 800a540:	4628      	mov	r0, r5
 800a542:	f7ff ff29 	bl	800a398 <_fflush_r>
 800a546:	b938      	cbnz	r0, 800a558 <__swbuf_r+0x74>
 800a548:	4638      	mov	r0, r7
 800a54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a54c:	4621      	mov	r1, r4
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 f806 	bl	800a560 <__swsetup_r>
 800a554:	2800      	cmp	r0, #0
 800a556:	d0d5      	beq.n	800a504 <__swbuf_r+0x20>
 800a558:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a55c:	e7f4      	b.n	800a548 <__swbuf_r+0x64>
	...

0800a560 <__swsetup_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <__swsetup_r+0xac>)
 800a564:	4605      	mov	r5, r0
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	460c      	mov	r4, r1
 800a56a:	b118      	cbz	r0, 800a574 <__swsetup_r+0x14>
 800a56c:	6a03      	ldr	r3, [r0, #32]
 800a56e:	b90b      	cbnz	r3, 800a574 <__swsetup_r+0x14>
 800a570:	f7ff f908 	bl	8009784 <__sinit>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a57a:	0718      	lsls	r0, r3, #28
 800a57c:	d422      	bmi.n	800a5c4 <__swsetup_r+0x64>
 800a57e:	06d9      	lsls	r1, r3, #27
 800a580:	d407      	bmi.n	800a592 <__swsetup_r+0x32>
 800a582:	2309      	movs	r3, #9
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a590:	e034      	b.n	800a5fc <__swsetup_r+0x9c>
 800a592:	0758      	lsls	r0, r3, #29
 800a594:	d512      	bpl.n	800a5bc <__swsetup_r+0x5c>
 800a596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a598:	b141      	cbz	r1, 800a5ac <__swsetup_r+0x4c>
 800a59a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a59e:	4299      	cmp	r1, r3
 800a5a0:	d002      	beq.n	800a5a8 <__swsetup_r+0x48>
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 f936 	bl	800a814 <_free_r>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	6363      	str	r3, [r4, #52]	; 0x34
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	6063      	str	r3, [r4, #4]
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f043 0308 	orr.w	r3, r3, #8
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	b94b      	cbnz	r3, 800a5dc <__swsetup_r+0x7c>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d2:	d003      	beq.n	800a5dc <__swsetup_r+0x7c>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 f840 	bl	800a65c <__smakebuf_r>
 800a5dc:	89a0      	ldrh	r0, [r4, #12]
 800a5de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5e2:	f010 0301 	ands.w	r3, r0, #1
 800a5e6:	d00a      	beq.n	800a5fe <__swsetup_r+0x9e>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	6963      	ldr	r3, [r4, #20]
 800a5ee:	425b      	negs	r3, r3
 800a5f0:	61a3      	str	r3, [r4, #24]
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	b943      	cbnz	r3, 800a608 <__swsetup_r+0xa8>
 800a5f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5fa:	d1c4      	bne.n	800a586 <__swsetup_r+0x26>
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
 800a5fe:	0781      	lsls	r1, r0, #30
 800a600:	bf58      	it	pl
 800a602:	6963      	ldrpl	r3, [r4, #20]
 800a604:	60a3      	str	r3, [r4, #8]
 800a606:	e7f4      	b.n	800a5f2 <__swsetup_r+0x92>
 800a608:	2000      	movs	r0, #0
 800a60a:	e7f7      	b.n	800a5fc <__swsetup_r+0x9c>
 800a60c:	20000094 	.word	0x20000094

0800a610 <__swhatbuf_r>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	460c      	mov	r4, r1
 800a614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a618:	2900      	cmp	r1, #0
 800a61a:	b096      	sub	sp, #88	; 0x58
 800a61c:	4615      	mov	r5, r2
 800a61e:	461e      	mov	r6, r3
 800a620:	da0d      	bge.n	800a63e <__swhatbuf_r+0x2e>
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a628:	f04f 0100 	mov.w	r1, #0
 800a62c:	bf0c      	ite	eq
 800a62e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a632:	2340      	movne	r3, #64	; 0x40
 800a634:	2000      	movs	r0, #0
 800a636:	6031      	str	r1, [r6, #0]
 800a638:	602b      	str	r3, [r5, #0]
 800a63a:	b016      	add	sp, #88	; 0x58
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	466a      	mov	r2, sp
 800a640:	f000 f872 	bl	800a728 <_fstat_r>
 800a644:	2800      	cmp	r0, #0
 800a646:	dbec      	blt.n	800a622 <__swhatbuf_r+0x12>
 800a648:	9901      	ldr	r1, [sp, #4]
 800a64a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a64e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a652:	4259      	negs	r1, r3
 800a654:	4159      	adcs	r1, r3
 800a656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a65a:	e7eb      	b.n	800a634 <__swhatbuf_r+0x24>

0800a65c <__smakebuf_r>:
 800a65c:	898b      	ldrh	r3, [r1, #12]
 800a65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a660:	079d      	lsls	r5, r3, #30
 800a662:	4606      	mov	r6, r0
 800a664:	460c      	mov	r4, r1
 800a666:	d507      	bpl.n	800a678 <__smakebuf_r+0x1c>
 800a668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	2301      	movs	r3, #1
 800a672:	6163      	str	r3, [r4, #20]
 800a674:	b002      	add	sp, #8
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	ab01      	add	r3, sp, #4
 800a67a:	466a      	mov	r2, sp
 800a67c:	f7ff ffc8 	bl	800a610 <__swhatbuf_r>
 800a680:	9900      	ldr	r1, [sp, #0]
 800a682:	4605      	mov	r5, r0
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff fbf1 	bl	8009e6c <_malloc_r>
 800a68a:	b948      	cbnz	r0, 800a6a0 <__smakebuf_r+0x44>
 800a68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a690:	059a      	lsls	r2, r3, #22
 800a692:	d4ef      	bmi.n	800a674 <__smakebuf_r+0x18>
 800a694:	f023 0303 	bic.w	r3, r3, #3
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	e7e3      	b.n	800a668 <__smakebuf_r+0xc>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	6020      	str	r0, [r4, #0]
 800a6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	6163      	str	r3, [r4, #20]
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	6120      	str	r0, [r4, #16]
 800a6b2:	b15b      	cbz	r3, 800a6cc <__smakebuf_r+0x70>
 800a6b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f000 f847 	bl	800a74c <_isatty_r>
 800a6be:	b128      	cbz	r0, 800a6cc <__smakebuf_r+0x70>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	f023 0303 	bic.w	r3, r3, #3
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	81a3      	strh	r3, [r4, #12]
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	431d      	orrs	r5, r3
 800a6d0:	81a5      	strh	r5, [r4, #12]
 800a6d2:	e7cf      	b.n	800a674 <__smakebuf_r+0x18>

0800a6d4 <memmove>:
 800a6d4:	4288      	cmp	r0, r1
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	eb01 0402 	add.w	r4, r1, r2
 800a6dc:	d902      	bls.n	800a6e4 <memmove+0x10>
 800a6de:	4284      	cmp	r4, r0
 800a6e0:	4623      	mov	r3, r4
 800a6e2:	d807      	bhi.n	800a6f4 <memmove+0x20>
 800a6e4:	1e43      	subs	r3, r0, #1
 800a6e6:	42a1      	cmp	r1, r4
 800a6e8:	d008      	beq.n	800a6fc <memmove+0x28>
 800a6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6f2:	e7f8      	b.n	800a6e6 <memmove+0x12>
 800a6f4:	4402      	add	r2, r0
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	428a      	cmp	r2, r1
 800a6fa:	d100      	bne.n	800a6fe <memmove+0x2a>
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a706:	e7f7      	b.n	800a6f8 <memmove+0x24>

0800a708 <_close_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d06      	ldr	r5, [pc, #24]	; (800a724 <_close_r+0x1c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	f7f8 fa71 	bl	8002bfa <_close>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_close_r+0x1a>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_close_r+0x1a>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	20005fe0 	.word	0x20005fe0

0800a728 <_fstat_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_fstat_r+0x20>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f7f8 fa6c 	bl	8002c12 <_fstat>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d102      	bne.n	800a744 <_fstat_r+0x1c>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b103      	cbz	r3, 800a744 <_fstat_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop
 800a748:	20005fe0 	.word	0x20005fe0

0800a74c <_isatty_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_isatty_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f8 fa6b 	bl	8002c32 <_isatty>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_isatty_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_isatty_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20005fe0 	.word	0x20005fe0

0800a76c <_lseek_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d07      	ldr	r5, [pc, #28]	; (800a78c <_lseek_r+0x20>)
 800a770:	4604      	mov	r4, r0
 800a772:	4608      	mov	r0, r1
 800a774:	4611      	mov	r1, r2
 800a776:	2200      	movs	r2, #0
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f7f8 fa64 	bl	8002c48 <_lseek>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_lseek_r+0x1e>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_lseek_r+0x1e>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	20005fe0 	.word	0x20005fe0

0800a790 <_read_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_read_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f8 f9f2 	bl	8002b88 <_read>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_read_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_read_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20005fe0 	.word	0x20005fe0

0800a7b4 <_sbrk_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d06      	ldr	r5, [pc, #24]	; (800a7d0 <_sbrk_r+0x1c>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	f7f8 fa50 	bl	8002c64 <_sbrk>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_sbrk_r+0x1a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_sbrk_r+0x1a>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	20005fe0 	.word	0x20005fe0

0800a7d4 <_write_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_write_r+0x20>)
 800a7d8:	4604      	mov	r4, r0
 800a7da:	4608      	mov	r0, r1
 800a7dc:	4611      	mov	r1, r2
 800a7de:	2200      	movs	r2, #0
 800a7e0:	602a      	str	r2, [r5, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f7f8 f9ed 	bl	8002bc2 <_write>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_write_r+0x1e>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_write_r+0x1e>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20005fe0 	.word	0x20005fe0

0800a7f8 <memcpy>:
 800a7f8:	440a      	add	r2, r1
 800a7fa:	4291      	cmp	r1, r2
 800a7fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a800:	d100      	bne.n	800a804 <memcpy+0xc>
 800a802:	4770      	bx	lr
 800a804:	b510      	push	{r4, lr}
 800a806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80e:	4291      	cmp	r1, r2
 800a810:	d1f9      	bne.n	800a806 <memcpy+0xe>
 800a812:	bd10      	pop	{r4, pc}

0800a814 <_free_r>:
 800a814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a816:	2900      	cmp	r1, #0
 800a818:	d044      	beq.n	800a8a4 <_free_r+0x90>
 800a81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81e:	9001      	str	r0, [sp, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f1a1 0404 	sub.w	r4, r1, #4
 800a826:	bfb8      	it	lt
 800a828:	18e4      	addlt	r4, r4, r3
 800a82a:	f7ff fddd 	bl	800a3e8 <__malloc_lock>
 800a82e:	4a1e      	ldr	r2, [pc, #120]	; (800a8a8 <_free_r+0x94>)
 800a830:	9801      	ldr	r0, [sp, #4]
 800a832:	6813      	ldr	r3, [r2, #0]
 800a834:	b933      	cbnz	r3, 800a844 <_free_r+0x30>
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	6014      	str	r4, [r2, #0]
 800a83a:	b003      	add	sp, #12
 800a83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a840:	f7ff bdd8 	b.w	800a3f4 <__malloc_unlock>
 800a844:	42a3      	cmp	r3, r4
 800a846:	d908      	bls.n	800a85a <_free_r+0x46>
 800a848:	6825      	ldr	r5, [r4, #0]
 800a84a:	1961      	adds	r1, r4, r5
 800a84c:	428b      	cmp	r3, r1
 800a84e:	bf01      	itttt	eq
 800a850:	6819      	ldreq	r1, [r3, #0]
 800a852:	685b      	ldreq	r3, [r3, #4]
 800a854:	1949      	addeq	r1, r1, r5
 800a856:	6021      	streq	r1, [r4, #0]
 800a858:	e7ed      	b.n	800a836 <_free_r+0x22>
 800a85a:	461a      	mov	r2, r3
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b10b      	cbz	r3, 800a864 <_free_r+0x50>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d9fa      	bls.n	800a85a <_free_r+0x46>
 800a864:	6811      	ldr	r1, [r2, #0]
 800a866:	1855      	adds	r5, r2, r1
 800a868:	42a5      	cmp	r5, r4
 800a86a:	d10b      	bne.n	800a884 <_free_r+0x70>
 800a86c:	6824      	ldr	r4, [r4, #0]
 800a86e:	4421      	add	r1, r4
 800a870:	1854      	adds	r4, r2, r1
 800a872:	42a3      	cmp	r3, r4
 800a874:	6011      	str	r1, [r2, #0]
 800a876:	d1e0      	bne.n	800a83a <_free_r+0x26>
 800a878:	681c      	ldr	r4, [r3, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	6053      	str	r3, [r2, #4]
 800a87e:	440c      	add	r4, r1
 800a880:	6014      	str	r4, [r2, #0]
 800a882:	e7da      	b.n	800a83a <_free_r+0x26>
 800a884:	d902      	bls.n	800a88c <_free_r+0x78>
 800a886:	230c      	movs	r3, #12
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	e7d6      	b.n	800a83a <_free_r+0x26>
 800a88c:	6825      	ldr	r5, [r4, #0]
 800a88e:	1961      	adds	r1, r4, r5
 800a890:	428b      	cmp	r3, r1
 800a892:	bf04      	itt	eq
 800a894:	6819      	ldreq	r1, [r3, #0]
 800a896:	685b      	ldreq	r3, [r3, #4]
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	bf04      	itt	eq
 800a89c:	1949      	addeq	r1, r1, r5
 800a89e:	6021      	streq	r1, [r4, #0]
 800a8a0:	6054      	str	r4, [r2, #4]
 800a8a2:	e7ca      	b.n	800a83a <_free_r+0x26>
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bd30      	pop	{r4, r5, pc}
 800a8a8:	20005fd8 	.word	0x20005fd8

0800a8ac <_malloc_usable_size_r>:
 800a8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b0:	1f18      	subs	r0, r3, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfbc      	itt	lt
 800a8b6:	580b      	ldrlt	r3, [r1, r0]
 800a8b8:	18c0      	addlt	r0, r0, r3
 800a8ba:	4770      	bx	lr

0800a8bc <sqrt>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	ed2d 8b02 	vpush	{d8}
 800a8c2:	ec55 4b10 	vmov	r4, r5, d0
 800a8c6:	f000 f825 	bl	800a914 <__ieee754_sqrt>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	462b      	mov	r3, r5
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	eeb0 8a40 	vmov.f32	s16, s0
 800a8d6:	eef0 8a60 	vmov.f32	s17, s1
 800a8da:	f7f6 f947 	bl	8000b6c <__aeabi_dcmpun>
 800a8de:	b990      	cbnz	r0, 800a906 <sqrt+0x4a>
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f6 f918 	bl	8000b1c <__aeabi_dcmplt>
 800a8ec:	b158      	cbz	r0, 800a906 <sqrt+0x4a>
 800a8ee:	f7fe ffd3 	bl	8009898 <__errno>
 800a8f2:	2321      	movs	r3, #33	; 0x21
 800a8f4:	6003      	str	r3, [r0, #0]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f7f5 ffc5 	bl	800088c <__aeabi_ddiv>
 800a902:	ec41 0b18 	vmov	d8, r0, r1
 800a906:	eeb0 0a48 	vmov.f32	s0, s16
 800a90a:	eef0 0a68 	vmov.f32	s1, s17
 800a90e:	ecbd 8b02 	vpop	{d8}
 800a912:	bd38      	pop	{r3, r4, r5, pc}

0800a914 <__ieee754_sqrt>:
 800a914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	ec55 4b10 	vmov	r4, r5, d0
 800a91c:	4e67      	ldr	r6, [pc, #412]	; (800aabc <__ieee754_sqrt+0x1a8>)
 800a91e:	43ae      	bics	r6, r5
 800a920:	ee10 0a10 	vmov	r0, s0
 800a924:	ee10 2a10 	vmov	r2, s0
 800a928:	4629      	mov	r1, r5
 800a92a:	462b      	mov	r3, r5
 800a92c:	d10d      	bne.n	800a94a <__ieee754_sqrt+0x36>
 800a92e:	f7f5 fe83 	bl	8000638 <__aeabi_dmul>
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4620      	mov	r0, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fcc7 	bl	80002cc <__adddf3>
 800a93e:	4604      	mov	r4, r0
 800a940:	460d      	mov	r5, r1
 800a942:	ec45 4b10 	vmov	d0, r4, r5
 800a946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	2d00      	cmp	r5, #0
 800a94c:	dc0b      	bgt.n	800a966 <__ieee754_sqrt+0x52>
 800a94e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a952:	4326      	orrs	r6, r4
 800a954:	d0f5      	beq.n	800a942 <__ieee754_sqrt+0x2e>
 800a956:	b135      	cbz	r5, 800a966 <__ieee754_sqrt+0x52>
 800a958:	f7f5 fcb6 	bl	80002c8 <__aeabi_dsub>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	f7f5 ff94 	bl	800088c <__aeabi_ddiv>
 800a964:	e7eb      	b.n	800a93e <__ieee754_sqrt+0x2a>
 800a966:	1509      	asrs	r1, r1, #20
 800a968:	f000 808d 	beq.w	800aa86 <__ieee754_sqrt+0x172>
 800a96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a970:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a978:	07c9      	lsls	r1, r1, #31
 800a97a:	bf5c      	itt	pl
 800a97c:	005b      	lslpl	r3, r3, #1
 800a97e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a986:	bf58      	it	pl
 800a988:	0052      	lslpl	r2, r2, #1
 800a98a:	2500      	movs	r5, #0
 800a98c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a990:	1076      	asrs	r6, r6, #1
 800a992:	0052      	lsls	r2, r2, #1
 800a994:	f04f 0e16 	mov.w	lr, #22
 800a998:	46ac      	mov	ip, r5
 800a99a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a99e:	eb0c 0001 	add.w	r0, ip, r1
 800a9a2:	4298      	cmp	r0, r3
 800a9a4:	bfde      	ittt	le
 800a9a6:	1a1b      	suble	r3, r3, r0
 800a9a8:	eb00 0c01 	addle.w	ip, r0, r1
 800a9ac:	186d      	addle	r5, r5, r1
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	f1be 0e01 	subs.w	lr, lr, #1
 800a9b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9c0:	d1ed      	bne.n	800a99e <__ieee754_sqrt+0x8a>
 800a9c2:	4674      	mov	r4, lr
 800a9c4:	2720      	movs	r7, #32
 800a9c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a9ca:	4563      	cmp	r3, ip
 800a9cc:	eb01 000e 	add.w	r0, r1, lr
 800a9d0:	dc02      	bgt.n	800a9d8 <__ieee754_sqrt+0xc4>
 800a9d2:	d113      	bne.n	800a9fc <__ieee754_sqrt+0xe8>
 800a9d4:	4290      	cmp	r0, r2
 800a9d6:	d811      	bhi.n	800a9fc <__ieee754_sqrt+0xe8>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	eb00 0e01 	add.w	lr, r0, r1
 800a9de:	da57      	bge.n	800aa90 <__ieee754_sqrt+0x17c>
 800a9e0:	f1be 0f00 	cmp.w	lr, #0
 800a9e4:	db54      	blt.n	800aa90 <__ieee754_sqrt+0x17c>
 800a9e6:	f10c 0801 	add.w	r8, ip, #1
 800a9ea:	eba3 030c 	sub.w	r3, r3, ip
 800a9ee:	4290      	cmp	r0, r2
 800a9f0:	bf88      	it	hi
 800a9f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800a9f6:	1a12      	subs	r2, r2, r0
 800a9f8:	440c      	add	r4, r1
 800a9fa:	46c4      	mov	ip, r8
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	3f01      	subs	r7, #1
 800aa00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800aa04:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aa08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800aa0c:	d1dd      	bne.n	800a9ca <__ieee754_sqrt+0xb6>
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	d01b      	beq.n	800aa4a <__ieee754_sqrt+0x136>
 800aa12:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aac0 <__ieee754_sqrt+0x1ac>
 800aa16:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aac4 <__ieee754_sqrt+0x1b0>
 800aa1a:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa1e:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa22:	f7f5 fc51 	bl	80002c8 <__aeabi_dsub>
 800aa26:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4640      	mov	r0, r8
 800aa30:	4649      	mov	r1, r9
 800aa32:	f7f6 f87d 	bl	8000b30 <__aeabi_dcmple>
 800aa36:	b140      	cbz	r0, 800aa4a <__ieee754_sqrt+0x136>
 800aa38:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800aa3c:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa40:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa44:	d126      	bne.n	800aa94 <__ieee754_sqrt+0x180>
 800aa46:	3501      	adds	r5, #1
 800aa48:	463c      	mov	r4, r7
 800aa4a:	106a      	asrs	r2, r5, #1
 800aa4c:	0863      	lsrs	r3, r4, #1
 800aa4e:	07e9      	lsls	r1, r5, #31
 800aa50:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aa54:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aa58:	bf48      	it	mi
 800aa5a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aa5e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800aa62:	461c      	mov	r4, r3
 800aa64:	e76d      	b.n	800a942 <__ieee754_sqrt+0x2e>
 800aa66:	0ad3      	lsrs	r3, r2, #11
 800aa68:	3815      	subs	r0, #21
 800aa6a:	0552      	lsls	r2, r2, #21
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d0fa      	beq.n	800aa66 <__ieee754_sqrt+0x152>
 800aa70:	02dc      	lsls	r4, r3, #11
 800aa72:	d50a      	bpl.n	800aa8a <__ieee754_sqrt+0x176>
 800aa74:	f1c1 0420 	rsb	r4, r1, #32
 800aa78:	fa22 f404 	lsr.w	r4, r2, r4
 800aa7c:	1e4d      	subs	r5, r1, #1
 800aa7e:	408a      	lsls	r2, r1
 800aa80:	4323      	orrs	r3, r4
 800aa82:	1b41      	subs	r1, r0, r5
 800aa84:	e772      	b.n	800a96c <__ieee754_sqrt+0x58>
 800aa86:	4608      	mov	r0, r1
 800aa88:	e7f0      	b.n	800aa6c <__ieee754_sqrt+0x158>
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	3101      	adds	r1, #1
 800aa8e:	e7ef      	b.n	800aa70 <__ieee754_sqrt+0x15c>
 800aa90:	46e0      	mov	r8, ip
 800aa92:	e7aa      	b.n	800a9ea <__ieee754_sqrt+0xd6>
 800aa94:	f7f5 fc1a 	bl	80002cc <__adddf3>
 800aa98:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	f7f6 f83a 	bl	8000b1c <__aeabi_dcmplt>
 800aaa8:	b120      	cbz	r0, 800aab4 <__ieee754_sqrt+0x1a0>
 800aaaa:	1ca0      	adds	r0, r4, #2
 800aaac:	bf08      	it	eq
 800aaae:	3501      	addeq	r5, #1
 800aab0:	3402      	adds	r4, #2
 800aab2:	e7ca      	b.n	800aa4a <__ieee754_sqrt+0x136>
 800aab4:	3401      	adds	r4, #1
 800aab6:	f024 0401 	bic.w	r4, r4, #1
 800aaba:	e7c6      	b.n	800aa4a <__ieee754_sqrt+0x136>
 800aabc:	7ff00000 	.word	0x7ff00000
 800aac0:	20000098 	.word	0x20000098
 800aac4:	200000a0 	.word	0x200000a0

0800aac8 <round>:
 800aac8:	ec53 2b10 	vmov	r2, r3, d0
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800aad2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800aad6:	2813      	cmp	r0, #19
 800aad8:	ee10 5a10 	vmov	r5, s0
 800aadc:	4619      	mov	r1, r3
 800aade:	dc18      	bgt.n	800ab12 <round+0x4a>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	da09      	bge.n	800aaf8 <round+0x30>
 800aae4:	3001      	adds	r0, #1
 800aae6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800aaea:	d103      	bne.n	800aaf4 <round+0x2c>
 800aaec:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800aaf0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e02a      	b.n	800ab4e <round+0x86>
 800aaf8:	4c16      	ldr	r4, [pc, #88]	; (800ab54 <round+0x8c>)
 800aafa:	4104      	asrs	r4, r0
 800aafc:	ea03 0604 	and.w	r6, r3, r4
 800ab00:	4316      	orrs	r6, r2
 800ab02:	d011      	beq.n	800ab28 <round+0x60>
 800ab04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab08:	4103      	asrs	r3, r0
 800ab0a:	440b      	add	r3, r1
 800ab0c:	ea23 0104 	bic.w	r1, r3, r4
 800ab10:	e7f0      	b.n	800aaf4 <round+0x2c>
 800ab12:	2833      	cmp	r0, #51	; 0x33
 800ab14:	dd0b      	ble.n	800ab2e <round+0x66>
 800ab16:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ab1a:	d105      	bne.n	800ab28 <round+0x60>
 800ab1c:	ee10 0a10 	vmov	r0, s0
 800ab20:	f7f5 fbd4 	bl	80002cc <__adddf3>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	ec43 2b10 	vmov	d0, r2, r3
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
 800ab2e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ab32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab36:	40f4      	lsrs	r4, r6
 800ab38:	4214      	tst	r4, r2
 800ab3a:	d0f5      	beq.n	800ab28 <round+0x60>
 800ab3c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800ab40:	2301      	movs	r3, #1
 800ab42:	4083      	lsls	r3, r0
 800ab44:	195b      	adds	r3, r3, r5
 800ab46:	bf28      	it	cs
 800ab48:	3101      	addcs	r1, #1
 800ab4a:	ea23 0304 	bic.w	r3, r3, r4
 800ab4e:	461a      	mov	r2, r3
 800ab50:	460b      	mov	r3, r1
 800ab52:	e7e9      	b.n	800ab28 <round+0x60>
 800ab54:	000fffff 	.word	0x000fffff

0800ab58 <trunc>:
 800ab58:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800ab5c:	ec5c bb10 	vmov	fp, ip, d0
 800ab60:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800ab64:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800ab68:	2913      	cmp	r1, #19
 800ab6a:	4664      	mov	r4, ip
 800ab6c:	dc11      	bgt.n	800ab92 <trunc+0x3a>
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	bfa7      	ittee	ge
 800ab72:	4b15      	ldrge	r3, [pc, #84]	; (800abc8 <trunc+0x70>)
 800ab74:	fa43 f101 	asrge.w	r1, r3, r1
 800ab78:	2200      	movlt	r2, #0
 800ab7a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800ab7e:	bfa4      	itt	ge
 800ab80:	2200      	movge	r2, #0
 800ab82:	ea01 030c 	andge.w	r3, r1, ip
 800ab86:	4693      	mov	fp, r2
 800ab88:	469c      	mov	ip, r3
 800ab8a:	ec4c bb10 	vmov	d0, fp, ip
 800ab8e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800ab92:	2933      	cmp	r1, #51	; 0x33
 800ab94:	dd0d      	ble.n	800abb2 <trunc+0x5a>
 800ab96:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ab9a:	d1f6      	bne.n	800ab8a <trunc+0x32>
 800ab9c:	4663      	mov	r3, ip
 800ab9e:	ee10 2a10 	vmov	r2, s0
 800aba2:	ee10 0a10 	vmov	r0, s0
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7f5 fb90 	bl	80002cc <__adddf3>
 800abac:	4683      	mov	fp, r0
 800abae:	468c      	mov	ip, r1
 800abb0:	e7eb      	b.n	800ab8a <trunc+0x32>
 800abb2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800abb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abba:	40c3      	lsrs	r3, r0
 800abbc:	ea2b 0603 	bic.w	r6, fp, r3
 800abc0:	46b3      	mov	fp, r6
 800abc2:	46a4      	mov	ip, r4
 800abc4:	e7e1      	b.n	800ab8a <trunc+0x32>
 800abc6:	bf00      	nop
 800abc8:	fff00000 	.word	0xfff00000

0800abcc <_init>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr

0800abd8 <_fini>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr
